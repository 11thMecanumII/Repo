
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f748  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800fa18  0800fa18  0001fa18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fee8  0800fee8  0001fee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800fef0  0800fef0  0001fef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fef8  0800fef8  0001fef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000240  24000000  0800fefc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a60  24000240  0801013c  00020240  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001ca0  0801013c  00021ca0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022e93  00000000  00000000  0002026e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003930  00000000  00000000  00043101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e0  00000000  00000000  00046a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c0  00000000  00000000  00047f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034f9b  00000000  00000000  000492d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bfd3  00000000  00000000  0007e273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153730  00000000  00000000  0009a246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ed976  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ed0  00000000  00000000  001ed9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000240 	.word	0x24000240
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800fa00 	.word	0x0800fa00

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000244 	.word	0x24000244
 800030c:	0800fa00 	.word	0x0800fa00

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[1]},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[2]},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[3]}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	49c7      	ldr	r1, [pc, #796]	; (80009a8 <pidCtrl+0x328>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	440b      	add	r3, r1
 8000696:	3318      	adds	r3, #24
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000980 <pidCtrl+0x300>
 80006a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006ac:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000988 <pidCtrl+0x308>
 80006b0:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 80006b4:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8000990 <pidCtrl+0x310>
 80006b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006bc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000998 <pidCtrl+0x318>
 80006c0:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c4:	49b8      	ldr	r1, [pc, #736]	; (80009a8 <pidCtrl+0x328>)
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	440b      	add	r3, r1
 80006d2:	3328      	adds	r3, #40	; 0x28
 80006d4:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d8:	49b3      	ldr	r1, [pc, #716]	; (80009a8 <pidCtrl+0x328>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4613      	mov	r3, r2
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	440b      	add	r3, r1
 80006e6:	3320      	adds	r3, #32
 80006e8:	ed93 6b00 	vldr	d6, [r3]
 80006ec:	49ae      	ldr	r1, [pc, #696]	; (80009a8 <pidCtrl+0x328>)
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4613      	mov	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	440b      	add	r3, r1
 80006fa:	3328      	adds	r3, #40	; 0x28
 80006fc:	ed93 7b00 	vldr	d7, [r3]
 8000700:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000704:	49a8      	ldr	r1, [pc, #672]	; (80009a8 <pidCtrl+0x328>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	440b      	add	r3, r1
 8000712:	3330      	adds	r3, #48	; 0x30
 8000714:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000718:	49a3      	ldr	r1, [pc, #652]	; (80009a8 <pidCtrl+0x328>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	440b      	add	r3, r1
 8000726:	ed93 6b00 	vldr	d6, [r3]
 800072a:	499f      	ldr	r1, [pc, #636]	; (80009a8 <pidCtrl+0x328>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	440b      	add	r3, r1
 8000738:	3330      	adds	r3, #48	; 0x30
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000742:	4999      	ldr	r1, [pc, #612]	; (80009a8 <pidCtrl+0x328>)
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4613      	mov	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	1a9b      	subs	r3, r3, r2
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	440b      	add	r3, r1
 8000750:	3348      	adds	r3, #72	; 0x48
 8000752:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000756:	4994      	ldr	r1, [pc, #592]	; (80009a8 <pidCtrl+0x328>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	1a9b      	subs	r3, r3, r2
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	440b      	add	r3, r1
 8000764:	3350      	adds	r3, #80	; 0x50
 8000766:	ed93 6b00 	vldr	d6, [r3]
 800076a:	498f      	ldr	r1, [pc, #572]	; (80009a8 <pidCtrl+0x328>)
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	440b      	add	r3, r1
 8000778:	3308      	adds	r3, #8
 800077a:	ed93 5b00 	vldr	d5, [r3]
 800077e:	498a      	ldr	r1, [pc, #552]	; (80009a8 <pidCtrl+0x328>)
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	440b      	add	r3, r1
 800078c:	3338      	adds	r3, #56	; 0x38
 800078e:	ed93 7b00 	vldr	d7, [r3]
 8000792:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000796:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8000998 <pidCtrl+0x318>
 800079a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800079e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007a2:	4981      	ldr	r1, [pc, #516]	; (80009a8 <pidCtrl+0x328>)
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	440b      	add	r3, r1
 80007b0:	3350      	adds	r3, #80	; 0x50
 80007b2:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007b6:	497c      	ldr	r1, [pc, #496]	; (80009a8 <pidCtrl+0x328>)
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	440b      	add	r3, r1
 80007c4:	3310      	adds	r3, #16
 80007c6:	ed93 6b00 	vldr	d6, [r3]
 80007ca:	4977      	ldr	r1, [pc, #476]	; (80009a8 <pidCtrl+0x328>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	440b      	add	r3, r1
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	ed93 5b00 	vldr	d5, [r3]
 80007de:	4972      	ldr	r1, [pc, #456]	; (80009a8 <pidCtrl+0x328>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	440b      	add	r3, r1
 80007ec:	3338      	adds	r3, #56	; 0x38
 80007ee:	ed93 7b00 	vldr	d7, [r3]
 80007f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007fa:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000998 <pidCtrl+0x318>
 80007fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000802:	4969      	ldr	r1, [pc, #420]	; (80009a8 <pidCtrl+0x328>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	1a9b      	subs	r3, r3, r2
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	440b      	add	r3, r1
 8000810:	3358      	adds	r3, #88	; 0x58
 8000812:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 8000816:	4964      	ldr	r1, [pc, #400]	; (80009a8 <pidCtrl+0x328>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	440b      	add	r3, r1
 8000824:	3350      	adds	r3, #80	; 0x50
 8000826:	ed93 7b00 	vldr	d7, [r3]
 800082a:	eeb0 7bc7 	vabs.f64	d7, d7
 800082e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000832:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	dd1f      	ble.n	800087c <pidCtrl+0x1fc>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800083c:	495a      	ldr	r1, [pc, #360]	; (80009a8 <pidCtrl+0x328>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	1a9b      	subs	r3, r3, r2
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	440b      	add	r3, r1
 800084a:	3350      	adds	r3, #80	; 0x50
 800084c:	ed93 7b00 	vldr	d7, [r3]
 8000850:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000858:	db03      	blt.n	8000862 <pidCtrl+0x1e2>
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	4953      	ldr	r1, [pc, #332]	; (80009ac <pidCtrl+0x32c>)
 8000860:	e002      	b.n	8000868 <pidCtrl+0x1e8>
 8000862:	f04f 0000 	mov.w	r0, #0
 8000866:	4952      	ldr	r1, [pc, #328]	; (80009b0 <pidCtrl+0x330>)
 8000868:	4c4f      	ldr	r4, [pc, #316]	; (80009a8 <pidCtrl+0x328>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	4423      	add	r3, r4
 8000876:	3350      	adds	r3, #80	; 0x50
 8000878:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 800087c:	494a      	ldr	r1, [pc, #296]	; (80009a8 <pidCtrl+0x328>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4613      	mov	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	440b      	add	r3, r1
 800088a:	3348      	adds	r3, #72	; 0x48
 800088c:	ed93 6b00 	vldr	d6, [r3]
 8000890:	4945      	ldr	r1, [pc, #276]	; (80009a8 <pidCtrl+0x328>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4613      	mov	r3, r2
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	1a9b      	subs	r3, r3, r2
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	440b      	add	r3, r1
 800089e:	3350      	adds	r3, #80	; 0x50
 80008a0:	ed93 7b00 	vldr	d7, [r3]
 80008a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008a8:	493f      	ldr	r1, [pc, #252]	; (80009a8 <pidCtrl+0x328>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	440b      	add	r3, r1
 80008b6:	3358      	adds	r3, #88	; 0x58
 80008b8:	ed93 7b00 	vldr	d7, [r3]
 80008bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008c0:	4939      	ldr	r1, [pc, #228]	; (80009a8 <pidCtrl+0x328>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	1a9b      	subs	r3, r3, r2
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	440b      	add	r3, r1
 80008ce:	3340      	adds	r3, #64	; 0x40
 80008d0:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008d4:	4934      	ldr	r1, [pc, #208]	; (80009a8 <pidCtrl+0x328>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	1a9b      	subs	r3, r3, r2
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	440b      	add	r3, r1
 80008e2:	3330      	adds	r3, #48	; 0x30
 80008e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008e8:	4c2f      	ldr	r4, [pc, #188]	; (80009a8 <pidCtrl+0x328>)
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4613      	mov	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4423      	add	r3, r4
 80008f6:	3338      	adds	r3, #56	; 0x38
 80008f8:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80008fc:	492a      	ldr	r1, [pc, #168]	; (80009a8 <pidCtrl+0x328>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4613      	mov	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	440b      	add	r3, r1
 800090a:	3340      	adds	r3, #64	; 0x40
 800090c:	ed93 7b00 	vldr	d7, [r3]
 8000910:	eeb0 7bc7 	vabs.f64	d7, d7
 8000914:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80009a0 <pidCtrl+0x320>
 8000918:	ee27 7b06 	vmul.f64	d7, d7, d6
 800091c:	4922      	ldr	r1, [pc, #136]	; (80009a8 <pidCtrl+0x328>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4613      	mov	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	440b      	add	r3, r1
 800092a:	3360      	adds	r3, #96	; 0x60
 800092c:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <pidCtrl+0x328>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4613      	mov	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	440b      	add	r3, r1
 800093e:	3360      	adds	r3, #96	; 0x60
 8000940:	ed93 7b00 	vldr	d7, [r3]
 8000944:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80009a0 <pidCtrl+0x320>
 8000948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000950:	dc00      	bgt.n	8000954 <pidCtrl+0x2d4>
}
 8000952:	e00d      	b.n	8000970 <pidCtrl+0x2f0>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000954:	4914      	ldr	r1, [pc, #80]	; (80009a8 <pidCtrl+0x328>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	440b      	add	r3, r1
 8000962:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8000966:	a30e      	add	r3, pc, #56	; (adr r3, 80009a0 <pidCtrl+0x320>)
 8000968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bc90      	pop	{r4, r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	f3af 8000 	nop.w
 8000980:	54cadf99 	.word	0x54cadf99
 8000984:	400921fb 	.word	0x400921fb
 8000988:	b6ae7d56 	.word	0xb6ae7d56
 800098c:	3fb97f62 	.word	0x3fb97f62
 8000990:	cccccccd 	.word	0xcccccccd
 8000994:	40e4cccc 	.word	0x40e4cccc
 8000998:	00000000 	.word	0x00000000
 800099c:	408f4000 	.word	0x408f4000
 80009a0:	00000000 	.word	0x00000000
 80009a4:	40b06800 	.word	0x40b06800
 80009a8:	24000000 	.word	0x24000000
 80009ac:	3ff00000 	.word	0x3ff00000
 80009b0:	bff00000 	.word	0xbff00000

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f004 fb02 	bl	8004fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f862 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 fc68 	bl	8001294 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c4:	f000 fc3e 	bl	8001244 <MX_DMA_Init>
  MX_USART10_UART_Init();
 80009c8:	f000 fbf0 	bl	80011ac <MX_USART10_UART_Init>
  MX_TIM3_Init();
 80009cc:	f000 f91a 	bl	8000c04 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009d0:	f000 f96e 	bl	8000cb0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009d4:	f000 f9c2 	bl	8000d5c <MX_TIM5_Init>
  MX_TIM8_Init();
 80009d8:	f000 fa0e 	bl	8000df8 <MX_TIM8_Init>
  MX_TIM15_Init();
 80009dc:	f000 faa8 	bl	8000f30 <MX_TIM15_Init>
  MX_TIM23_Init();
 80009e0:	f000 fb38 	bl	8001054 <MX_TIM23_Init>
  MX_TIM24_Init();
 80009e4:	f000 fb8c 	bl	8001100 <MX_TIM24_Init>
  MX_TIM2_Init();
 80009e8:	f000 f8be 	bl	8000b68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 80009ec:	481d      	ldr	r0, [pc, #116]	; (8000a64 <main+0xb0>)
 80009ee:	f00a fa7b 	bl	800aee8 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <main+0xb4>)
 80009f4:	f00a fa78 	bl	800aee8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80009f8:	2108      	movs	r1, #8
 80009fa:	481c      	ldr	r0, [pc, #112]	; (8000a6c <main+0xb8>)
 80009fc:	f00a fb52 	bl	800b0a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000a00:	210c      	movs	r1, #12
 8000a02:	481a      	ldr	r0, [pc, #104]	; (8000a6c <main+0xb8>)
 8000a04:	f00a fb4e 	bl	800b0a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4819      	ldr	r0, [pc, #100]	; (8000a70 <main+0xbc>)
 8000a0c:	f00a fb4a 	bl	800b0a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000a10:	2104      	movs	r1, #4
 8000a12:	4817      	ldr	r0, [pc, #92]	; (8000a70 <main+0xbc>)
 8000a14:	f00a fb46 	bl	800b0a4 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4816      	ldr	r0, [pc, #88]	; (8000a74 <main+0xc0>)
 8000a1c:	f00a fd04 	bl	800b428 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 8000a20:	2104      	movs	r1, #4
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <main+0xc0>)
 8000a24:	f00a fd00 	bl	800b428 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <main+0xc4>)
 8000a2c:	f00a fcfc 	bl	800b428 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <main+0xc4>)
 8000a34:	f00a fcf8 	bl	800b428 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <main+0xc8>)
 8000a3c:	f00a fcf4 	bl	800b428 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000a40:	2104      	movs	r1, #4
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <main+0xc8>)
 8000a44:	f00a fcf0 	bl	800b428 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <main+0xcc>)
 8000a4c:	f00a fcec 	bl	800b428 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 8000a50:	2104      	movs	r1, #4
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <main+0xcc>)
 8000a54:	f00a fce8 	bl	800b428 <HAL_TIM_Encoder_Start>


    setup();
 8000a58:	f002 fbf6 	bl	8003248 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 8000a5c:	f002 fc24 	bl	80032a8 <loop>
 8000a60:	e7fc      	b.n	8000a5c <main+0xa8>
 8000a62:	bf00      	nop
 8000a64:	24000340 	.word	0x24000340
 8000a68:	2400025c 	.word	0x2400025c
 8000a6c:	2400038c 	.word	0x2400038c
 8000a70:	240003d8 	.word	0x240003d8
 8000a74:	24000470 	.word	0x24000470
 8000a78:	240002a8 	.word	0x240002a8
 8000a7c:	240002f4 	.word	0x240002f4
 8000a80:	24000424 	.word	0x24000424

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f00e fe2a 	bl	800f6ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00e fe24 	bl	800f6ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f007 ff37 	bl	8008918 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab6:	4a2b      	ldr	r2, [pc, #172]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aca:	bf00      	nop
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad8:	d1f8      	bne.n	8000acc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000af2:	2315      	movs	r3, #21
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 ff3a 	bl	800898c <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b1e:	f000 fc79 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	233f      	movs	r3, #63	; 0x3f
 8000b24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2303      	movs	r3, #3
 8000b28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000b2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b30:	2308      	movs	r3, #8
 8000b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b34:	2340      	movs	r3, #64	; 0x40
 8000b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b38:	2340      	movs	r3, #64	; 0x40
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f008 facc 	bl	80090e8 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000b56:	f000 fc5d 	bl	8001414 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3770      	adds	r7, #112	; 0x70
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	58024800 	.word	0x58024800

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b90:	2253      	movs	r2, #83	; 0x53
 8000b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b9c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bae:	4814      	ldr	r0, [pc, #80]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bb0:	f00a f942 	bl	800ae38 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bba:	f000 fc2b 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bcc:	f00a feee 	bl	800b9ac <HAL_TIM_ConfigClockSource>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bd6:	f000 fc1d 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000be8:	f00b fc40 	bl	800c46c <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bf2:	f000 fc0f 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2400025c 	.word	0x2400025c

08000c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2224      	movs	r2, #36	; 0x24
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00e fd6a 	bl	800f6ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c24:	4a21      	ldr	r2, [pc, #132]	; (8000cac <MX_TIM3_Init+0xa8>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c60:	2301      	movs	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c74:	f00a fb32 	bl	800b2dc <HAL_TIM_Encoder_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c7e:	f000 fbc9 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c90:	f00b fbec 	bl	800c46c <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c9a:	f000 fbbb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	240002a8 	.word	0x240002a8
 8000cac:	40000400 	.word	0x40000400

08000cb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2224      	movs	r2, #36	; 0x24
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00e fd14 	bl	800f6ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000d20:	f00a fadc 	bl	800b2dc <HAL_TIM_Encoder_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d2a:	f000 fb73 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000d3c:	f00b fb96 	bl	800c46c <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d46:	f000 fb65 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3730      	adds	r7, #48	; 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	240002f4 	.word	0x240002f4
 8000d58:	40000800 	.word	0x40000800

08000d5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <MX_TIM5_Init+0x98>)
 8000d7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d82:	2253      	movs	r2, #83	; 0x53
 8000d84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000da2:	f00a f849 	bl	800ae38 <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000dac:	f000 fb32 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000dbe:	f00a fdf5 	bl	800b9ac <HAL_TIM_ConfigClockSource>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000dc8:	f000 fb24 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000dda:	f00b fb47 	bl	800c46c <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 fb16 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000340 	.word	0x24000340
 8000df4:	40000c00 	.word	0x40000c00

08000df8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b098      	sub	sp, #96	; 0x60
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2234      	movs	r2, #52	; 0x34
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00e fc61 	bl	800f6ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e2c:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <MX_TIM8_Init+0x134>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4199;
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e3e:	f241 0267 	movw	r2, #4199	; 0x1067
 8000e42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e56:	4834      	ldr	r0, [pc, #208]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e58:	f00a f8cc 	bl	800aff4 <HAL_TIM_PWM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f000 fad7 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e76:	4619      	mov	r1, r3
 8000e78:	482b      	ldr	r0, [pc, #172]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e7a:	f00b faf7 	bl	800c46c <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e84:	f000 fac6 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e94:	2300      	movs	r3, #0
 8000e96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481e      	ldr	r0, [pc, #120]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000eae:	f00a fc69 	bl	800b784 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000eb8:	f000 faac 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ebc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4818      	ldr	r0, [pc, #96]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000ec6:	f00a fc5d 	bl	800b784 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000ed0:	f000 faa0 	bl	8001414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000f0a:	f00b fb4b 	bl	800c5a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000f14:	f000 fa7e 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000f1a:	f003 fb41 	bl	80045a0 <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3760      	adds	r7, #96	; 0x60
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2400038c 	.word	0x2400038c
 8000f2c:	40010400 	.word	0x40010400

08000f30 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b098      	sub	sp, #96	; 0x60
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2234      	movs	r2, #52	; 0x34
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00e fbc5 	bl	800f6ec <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f64:	4a3a      	ldr	r2, [pc, #232]	; (8001050 <MX_TIM15_Init+0x120>)
 8000f66:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f76:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000f7a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b33      	ldr	r3, [pc, #204]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f8e:	482f      	ldr	r0, [pc, #188]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f90:	f00a f830 	bl	800aff4 <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 fa3b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000faa:	4619      	mov	r1, r3
 8000fac:	4827      	ldr	r0, [pc, #156]	; (800104c <MX_TIM15_Init+0x11c>)
 8000fae:	f00b fa5d 	bl	800c46c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 fa2c 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbc:	2360      	movs	r3, #96	; 0x60
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481a      	ldr	r0, [pc, #104]	; (800104c <MX_TIM15_Init+0x11c>)
 8000fe2:	f00a fbcf 	bl	800b784 <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000fec:	f000 fa12 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4814      	ldr	r0, [pc, #80]	; (800104c <MX_TIM15_Init+0x11c>)
 8000ffa:	f00a fbc3 	bl	800b784 <HAL_TIM_PWM_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001004:	f000 fa06 	bl	8001414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <MX_TIM15_Init+0x11c>)
 8001030:	f00b fab8 	bl	800c5a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800103a:	f000 f9eb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <MX_TIM15_Init+0x11c>)
 8001040:	f003 faae 	bl	80045a0 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3760      	adds	r7, #96	; 0x60
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	240003d8 	.word	0x240003d8
 8001050:	40014000 	.word	0x40014000

08001054 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f00e fb42 	bl	800f6ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <MX_TIM23_Init+0xa8>)
 8001076:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_TIM23_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001086:	f04f 32ff 	mov.w	r2, #4294967295
 800108a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_TIM23_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001098:	2303      	movs	r3, #3
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_TIM23_Init+0xa4>)
 80010c4:	f00a f90a 	bl	800b2dc <HAL_TIM_Encoder_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 80010ce:	f000 f9a1 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_TIM23_Init+0xa4>)
 80010e0:	f00b f9c4 	bl	800c46c <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80010ea:	f000 f993 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3730      	adds	r7, #48	; 0x30
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	24000424 	.word	0x24000424
 80010fc:	4000e000 	.word	0x4000e000

08001100 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2224      	movs	r2, #36	; 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f00e faec 	bl	800f6ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <MX_TIM24_Init+0xa8>)
 8001122:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001132:	f04f 32ff 	mov.w	r2, #4294967295
 8001136:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001144:	2303      	movs	r3, #3
 8001146:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001170:	f00a f8b4 	bl	800b2dc <HAL_TIM_Encoder_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 800117a:	f000 f94b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800118c:	f00b f96e 	bl	800c46c <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8001196:	f000 f93d 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3730      	adds	r7, #48	; 0x30
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000470 	.word	0x24000470
 80011a8:	4000e400 	.word	0x4000e400

080011ac <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_USART10_UART_Init+0x94>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 57600;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011bc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011f6:	f00b fa93 	bl	800c720 <HAL_UART_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 f908 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_USART10_UART_Init+0x90>)
 8001208:	f00d fb0c 	bl	800e824 <HAL_UARTEx_SetTxFifoThreshold>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8001212:	f000 f8ff 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <MX_USART10_UART_Init+0x90>)
 800121a:	f00d fb41 	bl	800e8a0 <HAL_UARTEx_SetRxFifoThreshold>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8001224:	f000 f8f6 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_USART10_UART_Init+0x90>)
 800122a:	f00d fac2 	bl	800e7b2 <HAL_UARTEx_DisableFifoMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 f8ee 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	240004bc 	.word	0x240004bc
 8001240:	40011c00 	.word	0x40011c00

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_DMA_Init+0x4c>)
 800124c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_DMA_Init+0x4c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_DMA_Init+0x4c>)
 800125c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	200b      	movs	r0, #11
 800126e:	f004 f838 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001272:	200b      	movs	r0, #11
 8001274:	f004 f84f 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	200c      	movs	r0, #12
 800127e:	f004 f830 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001282:	200c      	movs	r0, #12
 8001284:	f004 f847 	bl	8005316 <HAL_NVIC_EnableIRQ>

}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	58024400 	.word	0x58024400

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <MX_GPIO_Init+0x170>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <MX_GPIO_Init+0x170>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <MX_GPIO_Init+0x170>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <MX_GPIO_Init+0x170>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <MX_GPIO_Init+0x170>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <MX_GPIO_Init+0x170>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <MX_GPIO_Init+0x170>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a3e      	ldr	r2, [pc, #248]	; (8001404 <MX_GPIO_Init+0x170>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <MX_GPIO_Init+0x170>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <MX_GPIO_Init+0x170>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a36      	ldr	r2, [pc, #216]	; (8001404 <MX_GPIO_Init+0x170>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <MX_GPIO_Init+0x170>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <MX_GPIO_Init+0x170>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <MX_GPIO_Init+0x170>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <MX_GPIO_Init+0x170>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_GPIO_Init+0x170>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <MX_GPIO_Init+0x170>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <MX_GPIO_Init+0x170>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800137c:	2200      	movs	r2, #0
 800137e:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <MX_GPIO_Init+0x174>)
 8001384:	f007 fa8a 	bl	800889c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_GPIO_Init+0x178>)
 8001390:	f007 fa84 	bl	800889c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001394:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001398:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4816      	ldr	r0, [pc, #88]	; (8001408 <MX_GPIO_Init+0x174>)
 80013ae:	f006 ffcb 	bl	8008348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_GPIO_Init+0x17c>)
 80013ca:	f006 ffbd 	bl	8008348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <MX_GPIO_Init+0x178>)
 80013e8:	f006 ffae 	bl	8008348 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2028      	movs	r0, #40	; 0x28
 80013f2:	f003 ff76 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013f6:	2028      	movs	r0, #40	; 0x28
 80013f8:	f003 ff8d 	bl	8005316 <HAL_NVIC_EnableIRQ>

}
 80013fc:	bf00      	nop
 80013fe:	3730      	adds	r7, #48	; 0x30
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58024400 	.word	0x58024400
 8001408:	58021000 	.word	0x58021000
 800140c:	58020400 	.word	0x58020400
 8001410:	58020800 	.word	0x58020800

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>

0800141e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <_ZN3ros3MsgC1Ev+0x1c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	0800fcc0 	.word	0x0800fcc0

08001460 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
      data()
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ffe8 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ffcf 	bl	800141e <_ZN3ros4TimeC1Ev>
    {
    }
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800fca8 	.word	0x0800fca8

08001490 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6859      	ldr	r1, [r3, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	0a19      	lsrs	r1, r3, #8
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	0c19      	lsrs	r1, r3, #16
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3302      	adds	r3, #2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	b2ca      	uxtb	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	0e19      	lsrs	r1, r3, #24
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3303      	adds	r3, #3
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3304      	adds	r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6899      	ldr	r1, [r3, #8]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	0a19      	lsrs	r1, r3, #8
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3301      	adds	r3, #1
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	4413      	add	r3, r2
 8001504:	b2ca      	uxtb	r2, r1
 8001506:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	0c19      	lsrs	r1, r3, #16
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3302      	adds	r3, #2
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	0e19      	lsrs	r1, r3, #24
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3303      	adds	r3, #3
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4413      	add	r3, r2
 8001528:	b2ca      	uxtb	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3304      	adds	r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
      return offset;
 8001532:	68fb      	ldr	r3, [r7, #12]
    }
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	440b      	add	r3, r1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3302      	adds	r3, #2
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3303      	adds	r3, #3
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	440b      	add	r3, r1
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	061b      	lsls	r3, r3, #24
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	6839      	ldr	r1, [r7, #0]
 80015bc:	440b      	add	r3, r1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3302      	adds	r3, #2
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	440b      	add	r3, r1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	041b      	lsls	r3, r3, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3303      	adds	r3, #3
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	440b      	add	r3, r1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3304      	adds	r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]
     return offset;
 80015fa:	68fb      	ldr	r3, [r7, #12]
    }
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	0800fa18 	.word	0x0800fa18

08001624 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	0800fa2c 	.word	0x0800fa2c

08001640 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fef8 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	809a      	strh	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    {
    }
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0800fc90 	.word	0x0800fc90
 8001684:	0800fa50 	.word	0x0800fa50

08001688 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	8899      	ldrh	r1, [r3, #4]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	b2ca      	uxtb	r2, r1
 80016a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	889b      	ldrh	r3, [r3, #4]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b299      	uxth	r1, r3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3301      	adds	r3, #1
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	3302      	adds	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe24 	bl	8000310 <strlen>
 80016c8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	69b9      	ldr	r1, [r7, #24]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fdf4 	bl	80032c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3304      	adds	r3, #4
 80016dc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	18d0      	adds	r0, r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4619      	mov	r1, r3
 80016ec:	f00d fff0 	bl	800f6d0 <memcpy>
      offset += length_topic_name;
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4413      	add	r3, r2
 80016f6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fe07 	bl	8000310 <strlen>
 8001702:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	6979      	ldr	r1, [r7, #20]
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fdd7 	bl	80032c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	18d0      	adds	r0, r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4619      	mov	r1, r3
 8001726:	f00d ffd3 	bl	800f6d0 <memcpy>
      offset += length_message_type;
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	4413      	add	r3, r2
 8001730:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fdea 	bl	8000310 <strlen>
 800173c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fdba 	bl	80032c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	3304      	adds	r3, #4
 8001750:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	18d0      	adds	r0, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4619      	mov	r1, r3
 8001760:	f00d ffb6 	bl	800f6d0 <memcpy>
      offset += length_md5sum;
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4413      	add	r3, r2
 800176a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4413      	add	r3, r2
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	0a19      	lsrs	r1, r3, #8
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0c19      	lsrs	r1, r3, #16
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3302      	adds	r3, #2
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0e19      	lsrs	r1, r3, #24
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3303      	adds	r3, #3
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	61fb      	str	r3, [r7, #28]
      return offset;
 80017b4:	69fb      	ldr	r3, [r7, #28]
    }
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017be:	b580      	push	{r7, lr}
 80017c0:	b08a      	sub	sp, #40	; 0x28
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	889b      	ldrh	r3, [r3, #4]
 80017de:	b21a      	sxth	r2, r3
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	3301      	adds	r3, #1
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	440b      	add	r3, r1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3302      	adds	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	441a      	add	r2, r3
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fd76 	bl	80032fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3304      	adds	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	4413      	add	r3, r2
 8001820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	441a      	add	r2, r3
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3b01      	subs	r3, #1
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	440b      	add	r3, r1
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3301      	adds	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	e7ec      	b.n	800181a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4413      	add	r3, r2
 8001846:	3b01      	subs	r3, #1
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	4413      	add	r3, r2
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	3b01      	subs	r3, #1
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	441a      	add	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	441a      	add	r2, r3
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fd43 	bl	80032fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	3304      	adds	r3, #4
 800187a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	6a3a      	ldr	r2, [r7, #32]
 8001888:	429a      	cmp	r2, r3
 800188a:	d20c      	bcs.n	80018a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	441a      	add	r2, r3
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	3b01      	subs	r3, #1
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	440b      	add	r3, r1
 800189a:	7812      	ldrb	r2, [r2, #0]
 800189c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	3301      	adds	r3, #1
 80018a2:	623b      	str	r3, [r7, #32]
 80018a4:	e7ec      	b.n	8001880 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	3b01      	subs	r3, #1
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	441a      	add	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4413      	add	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	441a      	add	r2, r3
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 fd10 	bl	80032fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	3304      	adds	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d20c      	bcs.n	800190c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	441a      	add	r2, r3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	440b      	add	r3, r1
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3301      	adds	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e7ec      	b.n	80018e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4413      	add	r3, r2
 8001912:	3b01      	subs	r3, #1
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	3b01      	subs	r3, #1
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	441a      	add	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	440a      	add	r2, r1
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	3301      	adds	r3, #1
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	440b      	add	r3, r1
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	4313      	orrs	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3302      	adds	r3, #2
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	440b      	add	r3, r1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	4313      	orrs	r3, r2
 8001964:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	3303      	adds	r3, #3
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	440b      	add	r3, r1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	061b      	lsls	r3, r3, #24
 8001974:	4313      	orrs	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	3304      	adds	r3, #4
 8001982:	61bb      	str	r3, [r7, #24]
     return offset;
 8001984:	69bb      	ldr	r3, [r7, #24]
    }
 8001986:	4618      	mov	r0, r3
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	0800fa54 	.word	0x0800fa54

080019ac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	0800fa70 	.word	0x0800fa70

080019c8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fd34 	bl	8001440 <_ZN3ros3MsgC1Ev>
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	711a      	strb	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80019e8:	609a      	str	r2, [r3, #8]
    {
    }
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	0800fc78 	.word	0x0800fc78
 80019f8:	0800fa50 	.word	0x0800fa50

080019fc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	7912      	ldrb	r2, [r2, #4]
 8001a14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fc75 	bl	8000310 <strlen>
 8001a26:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fc45 	bl	80032c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	18d0      	adds	r0, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f00d fe41 	bl	800f6d0 <memcpy>
      offset += length_msg;
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a56:	68fb      	ldr	r3, [r7, #12]
    }
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	441a      	add	r2, r3
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fc35 	bl	80032fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	3304      	adds	r3, #4
 8001a96:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d20c      	bcs.n	8001ac2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	441a      	add	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e7ec      	b.n	8001a9c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	441a      	add	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
     return offset;
 8001ae6:	693b      	ldr	r3, [r7, #16]
    }
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	0800fa94 	.word	0x0800fa94

08001b0c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	0800faa8 	.word	0x0800faa8

08001b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fc84 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	0800fc60 	.word	0x0800fc60

08001b70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	b2ca      	uxtb	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0a19      	lsrs	r1, r3, #8
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0c19      	lsrs	r1, r3, #16
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	b2ca      	uxtb	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	0e19      	lsrs	r1, r3, #24
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3303      	adds	r3, #3
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d22b      	bcs.n	8001c2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	0a19      	lsrs	r1, r3, #8
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2ca      	uxtb	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	0c19      	lsrs	r1, r3, #16
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	3302      	adds	r3, #2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	0e19      	lsrs	r1, r3, #24
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3303      	adds	r3, #3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	3304      	adds	r3, #4
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	e7ce      	b.n	8001bcc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6919      	ldr	r1, [r3, #16]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	b2ca      	uxtb	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	0a19      	lsrs	r1, r3, #8
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	0c19      	lsrs	r1, r3, #16
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3302      	adds	r3, #2
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2ca      	uxtb	r2, r1
 8001c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	0e19      	lsrs	r1, r3, #24
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3303      	adds	r3, #3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3304      	adds	r3, #4
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d22b      	bcs.n	8001cde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b2ca      	uxtb	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	0a19      	lsrs	r1, r3, #8
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0c19      	lsrs	r1, r3, #16
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b2ca      	uxtb	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	0e19      	lsrs	r1, r3, #24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	e7ce      	b.n	8001c7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69d9      	ldr	r1, [r3, #28]
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b2ca      	uxtb	r2, r1
 8001cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	0a19      	lsrs	r1, r3, #8
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	0c19      	lsrs	r1, r3, #16
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	3302      	adds	r3, #2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	0e19      	lsrs	r1, r3, #24
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3303      	adds	r3, #3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3304      	adds	r3, #4
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d228      	bcs.n	8001d88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fae4 	bl	8000310 <strlen>
 8001d48:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fab4 	bl	80032c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	18d0      	adds	r0, r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4619      	mov	r1, r3
 8001d74:	f00d fcac 	bl	800f6d0 <memcpy>
      offset += length_stringsi;
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	e7d1      	b.n	8001d2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b08e      	sub	sp, #56	; 0x38
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	3301      	adds	r3, #1
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	6a3a      	ldr	r2, [r7, #32]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	6a3a      	ldr	r2, [r7, #32]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	6a3a      	ldr	r2, [r7, #32]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	3304      	adds	r3, #4
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	6a3a      	ldr	r2, [r7, #32]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d90a      	bls.n	8001e06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f00d fc7e 	bl	800f6fc <realloc>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a3a      	ldr	r2, [r7, #32]
 8001e0a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d236      	bcs.n	8001e88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	440a      	add	r2, r1
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	3301      	adds	r3, #1
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	440b      	add	r3, r1
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	3302      	adds	r3, #2
 8001e44:	6839      	ldr	r1, [r7, #0]
 8001e46:	440b      	add	r3, r1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	3303      	adds	r3, #3
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	440b      	add	r3, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e82:	3301      	adds	r3, #1
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
 8001e86:	e7c3      	b.n	8001e10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	3301      	adds	r3, #1
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb8:	3303      	adds	r3, #3
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	3304      	adds	r3, #4
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d90a      	bls.n	8001eee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f00d fc0a 	bl	800f6fc <realloc>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d236      	bcs.n	8001f70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	440a      	add	r2, r1
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	3301      	adds	r3, #1
 8001f1a:	6839      	ldr	r1, [r7, #0]
 8001f1c:	440b      	add	r3, r1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	440b      	add	r3, r1
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	041b      	lsls	r3, r3, #16
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	440b      	add	r3, r1
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	3304      	adds	r3, #4
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	3214      	adds	r2, #20
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6e:	e7c3      	b.n	8001ef8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	3302      	adds	r3, #2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d90a      	bls.n	8001fd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f00d fb96 	bl	800f6fc <realloc>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d23f      	bcs.n	800206a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	441a      	add	r2, r3
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 f980 	bl	80032fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffe:	3304      	adds	r3, #4
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200e:	429a      	cmp	r2, r3
 8002010:	d20c      	bcs.n	800202c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	441a      	add	r2, r3
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3b01      	subs	r3, #1
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	440b      	add	r3, r1
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	3301      	adds	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e7ec      	b.n	8002006 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800202c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	3b01      	subs	r3, #1
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	3b01      	subs	r3, #1
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	441a      	add	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	3220      	adds	r2, #32
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	3301      	adds	r3, #1
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
 8002068:	e7ba      	b.n	8001fe0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800206c:	4618      	mov	r0, r3
 800206e:	3738      	adds	r7, #56	; 0x38
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	0800fbb4 	.word	0x0800fbb4

08002090 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0800facc 	.word	0x0800facc

080020ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68d8      	ldr	r0, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6891      	ldr	r1, [r2, #8]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4798      	blx	r3
 80020f8:	4603      	mov	r3, r0
  };
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
  }
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a42      	ldr	r2, [pc, #264]	; (8002238 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d068      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a40      	ldr	r2, [pc, #256]	; (800223c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d061      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d05a      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d053      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d04c      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a36      	ldr	r2, [pc, #216]	; (800224c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d045      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a33      	ldr	r2, [pc, #204]	; (8002250 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d03e      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d037      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d030      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2c      	ldr	r2, [pc, #176]	; (800225c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d029      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a27      	ldr	r2, [pc, #156]	; (8002264 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d01b      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a24      	ldr	r2, [pc, #144]	; (8002268 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d014      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a22      	ldr	r2, [pc, #136]	; (800226c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d006      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d109      	bne.n	8002218 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002216:	e008      	b.n	800222a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40020010 	.word	0x40020010
 800223c:	40020028 	.word	0x40020028
 8002240:	40020040 	.word	0x40020040
 8002244:	40020058 	.word	0x40020058
 8002248:	40020070 	.word	0x40020070
 800224c:	40020088 	.word	0x40020088
 8002250:	400200a0 	.word	0x400200a0
 8002254:	400200b8 	.word	0x400200b8
 8002258:	40020410 	.word	0x40020410
 800225c:	40020428 	.word	0x40020428
 8002260:	40020440 	.word	0x40020440
 8002264:	40020458 	.word	0x40020458
 8002268:	40020470 	.word	0x40020470
 800226c:	40020488 	.word	0x40020488
 8002270:	400204a0 	.word	0x400204a0
 8002274:	400204b8 	.word	0x400204b8

08002278 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	461a      	mov	r2, r3
 8002296:	2300      	movs	r3, #0
 8002298:	6093      	str	r3, [r2, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	461a      	mov	r2, r3
 80022a2:	2300      	movs	r3, #0
 80022a4:	60d3      	str	r3, [r2, #12]
    }
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	240004bc 	.word	0x240004bc

080022b8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f804 	bl	80022ce <_ZN13STM32Hardware10reset_rbufEv>
    }
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022e2:	4619      	mov	r1, r3
 80022e4:	f00a fb3a 	bl	800c95c <HAL_UART_Receive_DMA>
    }
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff09 	bl	800211c <_ZN13STM32Hardware10getRdmaIndEv>
 800230a:	4603      	mov	r3, r0
 800230c:	429c      	cmp	r4, r3
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002320:	1c59      	adds	r1, r3, #1
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002336:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002340:	68fb      	ldr	r3, [r7, #12]
    }
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
	...

0800234c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235c:	2b20      	cmp	r3, #32
 800235e:	d108      	bne.n	8002372 <_ZN13STM32Hardware5flushEv+0x26>
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f083 0301 	eor.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <_ZN13STM32Hardware5flushEv+0x26>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <_ZN13STM32Hardware5flushEv+0x28>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d049      	beq.n	800240c <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	d039      	beq.n	8002406 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d20c      	bcs.n	80023c0 <_ZN13STM32Hardware5flushEv+0x74>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	e007      	b.n	80023d0 <_ZN13STM32Hardware5flushEv+0x84>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	89fa      	ldrh	r2, [r7, #14]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f00a fa25 	bl	800c838 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	4413      	add	r3, r2
 80023fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002404:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002406:	4b03      	ldr	r3, [pc, #12]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
      }
    }
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2400063c 	.word	0x2400063c

08002418 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
      int n = length;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242e:	bfa8      	it	ge
 8002430:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002434:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4293      	cmp	r3, r2
 8002446:	bf28      	it	cs
 8002448:	4613      	movcs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	4618      	mov	r0, r3
 8002462:	f00d f935 	bl	800f6d0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4413      	add	r3, r2
 8002472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	429a      	cmp	r2, r3
 8002484:	d00b      	beq.n	800249e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f603 0008 	addw	r0, r3, #2056	; 0x808
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	18d1      	adds	r1, r2, r3
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	461a      	mov	r2, r3
 800249a:	f00d f919 	bl	800f6d0 <memcpy>
      }

      flush();
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff54 	bl	800234c <_ZN13STM32Hardware5flushEv>
    }
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	f002 fe0a 	bl	80050cc <HAL_GetTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ffb6 	bl	8001440 <_ZN3ros3MsgC1Ev>
 80024d4:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	0800fc1c 	.word	0x0800fc1c

08002514 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002514:	b480      	push	{r7}
 8002516:	b08b      	sub	sp, #44	; 0x2c
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002528:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800252c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002532:	6838      	ldr	r0, [r7, #0]
 8002534:	4401      	add	r1, r0
 8002536:	b2d3      	uxtb	r3, r2
 8002538:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800253a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	0a02      	lsrs	r2, r0, #8
 8002548:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800254c:	0a0b      	lsrs	r3, r1, #8
 800254e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002550:	3101      	adds	r1, #1
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	4401      	add	r1, r0
 8002556:	b2d3      	uxtb	r3, r2
 8002558:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800255a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	0c02      	lsrs	r2, r0, #16
 8002568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800256c:	0c0b      	lsrs	r3, r1, #16
 800256e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002570:	3102      	adds	r1, #2
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	4401      	add	r1, r0
 8002576:	b2d3      	uxtb	r3, r2
 8002578:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800257a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	0e02      	lsrs	r2, r0, #24
 8002588:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800258c:	0e0b      	lsrs	r3, r1, #24
 800258e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002590:	3103      	adds	r1, #3
 8002592:	6838      	ldr	r0, [r7, #0]
 8002594:	4401      	add	r1, r0
 8002596:	b2d3      	uxtb	r3, r2
 8002598:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800259a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	000a      	movs	r2, r1
 80025a8:	2300      	movs	r3, #0
 80025aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ac:	3104      	adds	r1, #4
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	4401      	add	r1, r0
 80025b2:	b2d3      	uxtb	r3, r2
 80025b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80025b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	0a0a      	lsrs	r2, r1, #8
 80025c4:	2300      	movs	r3, #0
 80025c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c8:	3105      	adds	r1, #5
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	4401      	add	r1, r0
 80025ce:	b2d3      	uxtb	r3, r2
 80025d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80025d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	0c0a      	lsrs	r2, r1, #16
 80025e0:	2300      	movs	r3, #0
 80025e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e4:	3106      	adds	r1, #6
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	4401      	add	r1, r0
 80025ea:	b2d3      	uxtb	r3, r2
 80025ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80025ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	0e0a      	lsrs	r2, r1, #24
 80025fc:	2300      	movs	r3, #0
 80025fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002600:	3107      	adds	r1, #7
 8002602:	6838      	ldr	r0, [r7, #0]
 8002604:	4401      	add	r1, r0
 8002606:	b2d3      	uxtb	r3, r2
 8002608:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	3308      	adds	r3, #8
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002616:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800261a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800261e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002620:	6838      	ldr	r0, [r7, #0]
 8002622:	4401      	add	r1, r0
 8002624:	b2d3      	uxtb	r3, r2
 8002626:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002628:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	0a02      	lsrs	r2, r0, #8
 8002636:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800263a:	0a0b      	lsrs	r3, r1, #8
 800263c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263e:	3101      	adds	r1, #1
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	4401      	add	r1, r0
 8002644:	b2d3      	uxtb	r3, r2
 8002646:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002648:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	0c02      	lsrs	r2, r0, #16
 8002656:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800265a:	0c0b      	lsrs	r3, r1, #16
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	3102      	adds	r1, #2
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	4401      	add	r1, r0
 8002664:	b2d3      	uxtb	r3, r2
 8002666:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002668:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	0e02      	lsrs	r2, r0, #24
 8002676:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800267a:	0e0b      	lsrs	r3, r1, #24
 800267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267e:	3103      	adds	r1, #3
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	4401      	add	r1, r0
 8002684:	b2d3      	uxtb	r3, r2
 8002686:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002688:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	000a      	movs	r2, r1
 8002696:	2300      	movs	r3, #0
 8002698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269a:	3104      	adds	r1, #4
 800269c:	6838      	ldr	r0, [r7, #0]
 800269e:	4401      	add	r1, r0
 80026a0:	b2d3      	uxtb	r3, r2
 80026a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80026a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	0a0a      	lsrs	r2, r1, #8
 80026b2:	2300      	movs	r3, #0
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	3105      	adds	r1, #5
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	4401      	add	r1, r0
 80026bc:	b2d3      	uxtb	r3, r2
 80026be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80026c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	0c0a      	lsrs	r2, r1, #16
 80026ce:	2300      	movs	r3, #0
 80026d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d2:	3106      	adds	r1, #6
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	4401      	add	r1, r0
 80026d8:	b2d3      	uxtb	r3, r2
 80026da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80026dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	0e0a      	lsrs	r2, r1, #24
 80026ea:	2300      	movs	r3, #0
 80026ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ee:	3107      	adds	r1, #7
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	4401      	add	r1, r0
 80026f4:	b2d3      	uxtb	r3, r2
 80026f6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	3308      	adds	r3, #8
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002704:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800270c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	4401      	add	r1, r0
 8002712:	b2d3      	uxtb	r3, r2
 8002714:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	0a02      	lsrs	r2, r0, #8
 8002724:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002728:	0a0b      	lsrs	r3, r1, #8
 800272a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272c:	3101      	adds	r1, #1
 800272e:	6838      	ldr	r0, [r7, #0]
 8002730:	4401      	add	r1, r0
 8002732:	b2d3      	uxtb	r3, r2
 8002734:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002736:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	0c02      	lsrs	r2, r0, #16
 8002744:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002748:	0c0b      	lsrs	r3, r1, #16
 800274a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274c:	3102      	adds	r1, #2
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	4401      	add	r1, r0
 8002752:	b2d3      	uxtb	r3, r2
 8002754:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	0e02      	lsrs	r2, r0, #24
 8002764:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002768:	0e0b      	lsrs	r3, r1, #24
 800276a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276c:	3103      	adds	r1, #3
 800276e:	6838      	ldr	r0, [r7, #0]
 8002770:	4401      	add	r1, r0
 8002772:	b2d3      	uxtb	r3, r2
 8002774:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	000a      	movs	r2, r1
 8002784:	2300      	movs	r3, #0
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	3104      	adds	r1, #4
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	4401      	add	r1, r0
 800278e:	b2d3      	uxtb	r3, r2
 8002790:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	0a0a      	lsrs	r2, r1, #8
 80027a0:	2300      	movs	r3, #0
 80027a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a4:	3105      	adds	r1, #5
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	4401      	add	r1, r0
 80027aa:	b2d3      	uxtb	r3, r2
 80027ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80027ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	0c0a      	lsrs	r2, r1, #16
 80027bc:	2300      	movs	r3, #0
 80027be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c0:	3106      	adds	r1, #6
 80027c2:	6838      	ldr	r0, [r7, #0]
 80027c4:	4401      	add	r1, r0
 80027c6:	b2d3      	uxtb	r3, r2
 80027c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80027ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	0e0a      	lsrs	r2, r1, #24
 80027d8:	2300      	movs	r3, #0
 80027da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027dc:	3107      	adds	r1, #7
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	4401      	add	r1, r0
 80027e2:	b2d3      	uxtb	r3, r2
 80027e4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3308      	adds	r3, #8
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027ee:	4618      	mov	r0, r3
 80027f0:	372c      	adds	r7, #44	; 0x2c
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027fa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027fe:	b0eb      	sub	sp, #428	; 0x1ac
 8002800:	af00      	add	r7, sp, #0
 8002802:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002806:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800281c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002820:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002824:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2200      	movs	r2, #0
 8002830:	461c      	mov	r4, r3
 8002832:	4615      	mov	r5, r2
 8002834:	ea40 0804 	orr.w	r8, r0, r4
 8002838:	ea41 0905 	orr.w	r9, r1, r5
 800283c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002840:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002844:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2200      	movs	r2, #0
 8002856:	469a      	mov	sl, r3
 8002858:	4693      	mov	fp, r2
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002866:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800286a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800286e:	ea40 0402 	orr.w	r4, r0, r2
 8002872:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002876:	430b      	orrs	r3, r1
 8002878:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800287c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002880:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002884:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002888:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800289e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80028ae:	464c      	mov	r4, r9
 80028b0:	0423      	lsls	r3, r4, #16
 80028b2:	4644      	mov	r4, r8
 80028b4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80028b8:	4644      	mov	r4, r8
 80028ba:	0422      	lsls	r2, r4, #16
 80028bc:	ea40 0402 	orr.w	r4, r0, r2
 80028c0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80028c4:	430b      	orrs	r3, r1
 80028c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80028ca:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80028ce:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028d2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028da:	1cda      	adds	r2, r3, #3
 80028dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028e0:	4413      	add	r3, r2
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80028ec:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80028f0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80028f4:	4623      	mov	r3, r4
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80028fc:	4623      	mov	r3, r4
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002904:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002908:	4623      	mov	r3, r4
 800290a:	4303      	orrs	r3, r0
 800290c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002910:	462b      	mov	r3, r5
 8002912:	430b      	orrs	r3, r1
 8002914:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002918:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800291c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002920:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002924:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002928:	1d1a      	adds	r2, r3, #4
 800292a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800293a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800294a:	0023      	movs	r3, r4
 800294c:	2200      	movs	r2, #0
 800294e:	ea40 0402 	orr.w	r4, r0, r2
 8002952:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002956:	430b      	orrs	r3, r1
 8002958:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800295c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002960:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002964:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002968:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800296c:	1d5a      	adds	r2, r3, #5
 800296e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2200      	movs	r2, #0
 800297a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800297e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800298e:	0223      	lsls	r3, r4, #8
 8002990:	2200      	movs	r2, #0
 8002992:	ea40 0402 	orr.w	r4, r0, r2
 8002996:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800299a:	430b      	orrs	r3, r1
 800299c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80029a0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80029a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80029a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b0:	1d9a      	adds	r2, r3, #6
 80029b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029c2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80029d2:	0423      	lsls	r3, r4, #16
 80029d4:	2200      	movs	r2, #0
 80029d6:	ea40 0402 	orr.w	r4, r0, r2
 80029da:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80029de:	430b      	orrs	r3, r1
 80029e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029e4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80029e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80029ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f4:	1dda      	adds	r2, r3, #7
 80029f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002a06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002a16:	0623      	lsls	r3, r4, #24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	ea40 0402 	orr.w	r4, r0, r2
 8002a1e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002a22:	430b      	orrs	r3, r1
 8002a24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a28:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002a2c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002a30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a34:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a38:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002a3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a40:	3308      	adds	r3, #8
 8002a42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a56:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a6a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002a6e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002a72:	4623      	mov	r3, r4
 8002a74:	4303      	orrs	r3, r0
 8002a76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a82:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002a86:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002aa4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002ab4:	464c      	mov	r4, r9
 8002ab6:	0223      	lsls	r3, r4, #8
 8002ab8:	4644      	mov	r4, r8
 8002aba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002abe:	4644      	mov	r4, r8
 8002ac0:	0222      	lsls	r2, r4, #8
 8002ac2:	ea40 0402 	orr.w	r4, r0, r2
 8002ac6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002aca:	430b      	orrs	r3, r1
 8002acc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ad0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002ad4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ad8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ae0:	1c9a      	adds	r2, r3, #2
 8002ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002b02:	464c      	mov	r4, r9
 8002b04:	0423      	lsls	r3, r4, #16
 8002b06:	4644      	mov	r4, r8
 8002b08:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b0c:	4644      	mov	r4, r8
 8002b0e:	0422      	lsls	r2, r4, #16
 8002b10:	ea40 0402 	orr.w	r4, r0, r2
 8002b14:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b1e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002b22:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b2e:	1cda      	adds	r2, r3, #3
 8002b30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b40:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b44:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002b48:	4623      	mov	r3, r4
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b50:	4623      	mov	r3, r4
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b58:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002b5c:	4623      	mov	r3, r4
 8002b5e:	4303      	orrs	r3, r0
 8002b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b64:	462b      	mov	r3, r5
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b6c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002b70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b7c:	1d1a      	adds	r2, r3, #4
 8002b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b8e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002b9e:	0023      	movs	r3, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	ea40 0402 	orr.w	r4, r0, r2
 8002ba6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002baa:	430b      	orrs	r3, r1
 8002bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002bb0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002bb4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002bb8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc0:	1d5a      	adds	r2, r3, #5
 8002bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bd2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002be2:	0223      	lsls	r3, r4, #8
 8002be4:	2200      	movs	r2, #0
 8002be6:	ea40 0402 	orr.w	r4, r0, r2
 8002bea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bf4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002bf8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002bfc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c04:	1d9a      	adds	r2, r3, #6
 8002c06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002c26:	0423      	lsls	r3, r4, #16
 8002c28:	2200      	movs	r2, #0
 8002c2a:	ea40 0402 	orr.w	r4, r0, r2
 8002c2e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002c32:	430b      	orrs	r3, r1
 8002c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c38:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002c3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c48:	1dda      	adds	r2, r3, #7
 8002c4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002c6a:	0623      	lsls	r3, r4, #24
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	ea40 0402 	orr.w	r4, r0, r2
 8002c72:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002c76:	430b      	orrs	r3, r1
 8002c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c7c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002c80:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002c84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c88:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c8c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002c90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ca6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002caa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002cae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cbe:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002cc2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	4303      	orrs	r3, r0
 8002cca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ccc:	462b      	mov	r3, r5
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cd2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002cd6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002cde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ce8:	4413      	add	r3, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2200      	movs	r2, #0
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
 8002cf2:	677a      	str	r2, [r7, #116]	; 0x74
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d00:	464c      	mov	r4, r9
 8002d02:	0223      	lsls	r3, r4, #8
 8002d04:	4644      	mov	r4, r8
 8002d06:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d0a:	4644      	mov	r4, r8
 8002d0c:	0222      	lsls	r2, r4, #8
 8002d0e:	ea40 0402 	orr.w	r4, r0, r2
 8002d12:	66bc      	str	r4, [r7, #104]	; 0x68
 8002d14:	430b      	orrs	r3, r1
 8002d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d18:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002d1c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d20:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d28:	1c9a      	adds	r2, r3, #2
 8002d2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2200      	movs	r2, #0
 8002d36:	663b      	str	r3, [r7, #96]	; 0x60
 8002d38:	667a      	str	r2, [r7, #100]	; 0x64
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d46:	464c      	mov	r4, r9
 8002d48:	0423      	lsls	r3, r4, #16
 8002d4a:	4644      	mov	r4, r8
 8002d4c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d50:	4644      	mov	r4, r8
 8002d52:	0422      	lsls	r2, r4, #16
 8002d54:	ea40 0402 	orr.w	r4, r0, r2
 8002d58:	65bc      	str	r4, [r7, #88]	; 0x58
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d5e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002d62:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d66:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d6e:	1cda      	adds	r2, r3, #3
 8002d70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d7e:	657a      	str	r2, [r7, #84]	; 0x54
 8002d80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002d84:	4623      	mov	r3, r4
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002d94:	4623      	mov	r3, r4
 8002d96:	4303      	orrs	r3, r0
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002da0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002da4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002da8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002db0:	1d1a      	adds	r2, r3, #4
 8002db2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002dcc:	0023      	movs	r3, r4
 8002dce:	2200      	movs	r2, #0
 8002dd0:	ea40 0402 	orr.w	r4, r0, r2
 8002dd4:	633c      	str	r4, [r7, #48]	; 0x30
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dda:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002dde:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002de2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002de6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dea:	1d5a      	adds	r2, r3, #5
 8002dec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2200      	movs	r2, #0
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002e06:	0223      	lsls	r3, r4, #8
 8002e08:	2200      	movs	r2, #0
 8002e0a:	ea40 0402 	orr.w	r4, r0, r2
 8002e0e:	623c      	str	r4, [r7, #32]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
 8002e14:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002e18:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e1c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e24:	3306      	adds	r3, #6
 8002e26:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	61fa      	str	r2, [r7, #28]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	69bc      	ldr	r4, [r7, #24]
 8002e40:	0423      	lsls	r3, r4, #16
 8002e42:	2200      	movs	r2, #0
 8002e44:	ea40 0402 	orr.w	r4, r0, r2
 8002e48:	613c      	str	r4, [r7, #16]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e52:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e56:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e5e:	3307      	adds	r3, #7
 8002e60:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e64:	4413      	add	r3, r2
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	60fa      	str	r2, [r7, #12]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	68bc      	ldr	r4, [r7, #8]
 8002e7a:	0623      	lsls	r3, r4, #24
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	ea40 0402 	orr.w	r4, r0, r2
 8002e82:	603c      	str	r4, [r7, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e8c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002e90:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002e94:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002e98:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002e9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002ea6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002eb6:	4770      	bx	lr

08002eb8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	0800faf0 	.word	0x0800faf0

08002ed4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	0800fb08 	.word	0x0800fb08

08002ef0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe faa0 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8002f00:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3308      	adds	r3, #8
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fada 	bl	80024c4 <_ZN13geometry_msgs7Vector3C1Ev>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3328      	adds	r3, #40	; 0x28
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fad5 	bl	80024c4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0800fc04 	.word	0x0800fc04

08002f28 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f103 0008 	add.w	r0, r3, #8
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7ff fae6 	bl	8002514 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7ff fad9 	bl	8002514 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    }
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f103 0008 	add.w	r0, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7ff fc33 	bl	80027fa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7ff fc26 	bl	80027fa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
     return offset;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    }
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	0800fb2c 	.word	0x0800fb2c

08002fdc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	0800fb40 	.word	0x0800fb40

08002ff8 <_Z8callbackRKN13geometry_msgs5TwistE>:
ros::NodeHandle nh;
bool ifFirstPush = false;
double Vx, Vy, W, rVx, rVy, rW;
double WX, WY, WW;

void callback(const geometry_msgs::Twist &msg){
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003006:	490a      	ldr	r1, [pc, #40]	; (8003030 <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 8003008:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003012:	4908      	ldr	r1, [pc, #32]	; (8003034 <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003014:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800301e:	4906      	ldr	r1, [pc, #24]	; (8003038 <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 8003020:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	24001b80 	.word	0x24001b80
 8003034:	24001b88 	.word	0x24001b88
 8003038:	24001b90 	.word	0x24001b90

0800303c <interPub>:
ros::Publisher pub("/ins_vel", &insVel);
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);

int timeout = 0;

void interPub(void){
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
	insVel.linear.x = rVx;
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <interPub+0x68>)
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	4918      	ldr	r1, [pc, #96]	; (80030a8 <interPub+0x6c>)
 8003048:	e9c1 2304 	strd	r2, r3, [r1, #16]
	insVel.linear.y = rVy;
 800304c:	4b17      	ldr	r3, [pc, #92]	; (80030ac <interPub+0x70>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	4915      	ldr	r1, [pc, #84]	; (80030a8 <interPub+0x6c>)
 8003054:	e9c1 2306 	strd	r2, r3, [r1, #24]
	insVel.angular.z = rW;
 8003058:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <interPub+0x74>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	4912      	ldr	r1, [pc, #72]	; (80030a8 <interPub+0x6c>)
 8003060:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	insVel.angular.x = odom.x;
 8003064:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <interPub+0x78>)
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	490f      	ldr	r1, [pc, #60]	; (80030a8 <interPub+0x6c>)
 800306c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	insVel.angular.y = odom.y;
 8003070:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <interPub+0x78>)
 8003072:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003076:	490c      	ldr	r1, [pc, #48]	; (80030a8 <interPub+0x6c>)
 8003078:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	insVel.linear.z = odom.theta;
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <interPub+0x78>)
 800307e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003082:	4909      	ldr	r1, [pc, #36]	; (80030a8 <interPub+0x6c>)
 8003084:	e9c1 2308 	strd	r2, r3, [r1, #32]

	if(ifFirstPush)		pub.publish(&insVel);
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <interPub+0x7c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <interPub+0x5c>
 8003090:	4905      	ldr	r1, [pc, #20]	; (80030a8 <interPub+0x6c>)
 8003092:	480a      	ldr	r0, [pc, #40]	; (80030bc <interPub+0x80>)
 8003094:	f7ff f821 	bl	80020da <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	ifFirstPush = true;
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <interPub+0x7c>)
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	24001b98 	.word	0x24001b98
 80030a8:	24001bb0 	.word	0x24001bb0
 80030ac:	24001ba0 	.word	0x24001ba0
 80030b0:	24001ba8 	.word	0x24001ba8
 80030b4:	24001c70 	.word	0x24001c70
 80030b8:	24001b7c 	.word	0x24001b7c
 80030bc:	24001bf8 	.word	0x24001bf8

080030c0 <_Z13Error_Handlerv>:
	W = 0;
}

/* UART Communication */
void Error_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030c4:	b672      	cpsid	i
}
 80030c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <_Z13Error_Handlerv+0x8>
	...

080030cc <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80030d0:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030d2:	4a2d      	ldr	r2, [pc, #180]	; (8003188 <_ZL20MX_USART10_UART_Initv+0xbc>)
 80030d4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80030d6:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030dc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80030de:	4b29      	ldr	r3, [pc, #164]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80030f0:	4b24      	ldr	r3, [pc, #144]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030f2:	220c      	movs	r2, #12
 80030f4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030f6:	4b23      	ldr	r3, [pc, #140]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80030fc:	4b21      	ldr	r3, [pc, #132]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003102:	4b20      	ldr	r3, [pc, #128]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003104:	2200      	movs	r2, #0
 8003106:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003108:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800310a:	2200      	movs	r2, #0
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800310e:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003110:	2200      	movs	r2, #0
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8003114:	481b      	ldr	r0, [pc, #108]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003116:	f009 fb03 	bl	800c720 <HAL_UART_Init>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 800312a:	f7ff ffc9 	bl	80030c0 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800312e:	2100      	movs	r1, #0
 8003130:	4814      	ldr	r0, [pc, #80]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003132:	f00b fb77 	bl	800e824 <HAL_UARTEx_SetTxFifoThreshold>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 8003146:	f7ff ffbb 	bl	80030c0 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800314a:	2100      	movs	r1, #0
 800314c:	480d      	ldr	r0, [pc, #52]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800314e:	f00b fba7 	bl	800e8a0 <HAL_UARTEx_SetRxFifoThreshold>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 8003162:	f7ff ffad 	bl	80030c0 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8003166:	4807      	ldr	r0, [pc, #28]	; (8003184 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003168:	f00b fb23 	bl	800e7b2 <HAL_UARTEx_DisableFifoMode>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 800317c:	f7ff ffa0 	bl	80030c0 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	240004bc 	.word	0x240004bc
 8003188:	40011c00 	.word	0x40011c00

0800318c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <HAL_UART_ErrorCallback+0x5c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d120      	bne.n	80031de <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 800319c:	4913      	ldr	r1, [pc, #76]	; (80031ec <HAL_UART_ErrorCallback+0x60>)
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 80031aa:	4911      	ldr	r1, [pc, #68]	; (80031f0 <HAL_UART_ErrorCallback+0x64>)
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 80031b8:	490e      	ldr	r1, [pc, #56]	; (80031f4 <HAL_UART_ErrorCallback+0x68>)
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 80031c6:	4808      	ldr	r0, [pc, #32]	; (80031e8 <HAL_UART_ErrorCallback+0x5c>)
 80031c8:	f009 fafa 	bl	800c7c0 <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 80031cc:	f7ff ff7e 	bl	80030cc <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 80031d0:	4809      	ldr	r0, [pc, #36]	; (80031f8 <HAL_UART_ErrorCallback+0x6c>)
 80031d2:	f000 f997 	bl	8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff f86d 	bl	80022b8 <_ZN13STM32Hardware4initEv>
    }
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	240004bc 	.word	0x240004bc
 80031ec:	24001b80 	.word	0x24001b80
 80031f0:	24001b88 	.word	0x24001b88
 80031f4:	24001b90 	.word	0x24001b90
 80031f8:	24000640 	.word	0x24000640

080031fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003204:	4805      	ldr	r0, [pc, #20]	; (800321c <HAL_UART_TxCpltCallback+0x20>)
 8003206:	f000 f97d 	bl	8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800320a:	4603      	mov	r3, r0
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f89d 	bl	800234c <_ZN13STM32Hardware5flushEv>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	24000640 	.word	0x24000640

08003220 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003228:	4805      	ldr	r0, [pc, #20]	; (8003240 <HAL_UART_RxCpltCallback+0x20>)
 800322a:	f000 f96b 	bl	8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800322e:	4603      	mov	r3, r0
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff f84c 	bl	80022ce <_ZN13STM32Hardware10reset_rbufEv>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	24000640 	.word	0x24000640
 8003244:	00000000 	.word	0x00000000

08003248 <setup>:

void setup(void){
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
    nh.initNode();
 800324c:	4812      	ldr	r0, [pc, #72]	; (8003298 <setup+0x50>)
 800324e:	f000 f965 	bl	800351c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8003252:	4912      	ldr	r1, [pc, #72]	; (800329c <setup+0x54>)
 8003254:	4810      	ldr	r0, [pc, #64]	; (8003298 <setup+0x50>)
 8003256:	f000 f98a 	bl	800356e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 800325a:	4911      	ldr	r1, [pc, #68]	; (80032a0 <setup+0x58>)
 800325c:	480e      	ldr	r0, [pc, #56]	; (8003298 <setup+0x50>)
 800325e:	f000 f9b1 	bl	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    odom.x = 0;		odom.y = 0;		odom.theta = (double)PI/2;
 8003262:	4910      	ldr	r1, [pc, #64]	; (80032a4 <setup+0x5c>)
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9c1 2300 	strd	r2, r3, [r1]
 8003270:	490c      	ldr	r1, [pc, #48]	; (80032a4 <setup+0x5c>)
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800327e:	4909      	ldr	r1, [pc, #36]	; (80032a4 <setup+0x5c>)
 8003280:	a303      	add	r3, pc, #12	; (adr r3, 8003290 <setup+0x48>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	54cadf99 	.word	0x54cadf99
 8003294:	3ff921fb 	.word	0x3ff921fb
 8003298:	24000640 	.word	0x24000640
 800329c:	24001c10 	.word	0x24001c10
 80032a0:	24001bf8 	.word	0x24001bf8
 80032a4:	24001c70 	.word	0x24001c70

080032a8 <loop>:
void loop(void){
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
    if(!nh.spinOnce()){
 80032ac:	4803      	ldr	r0, [pc, #12]	; (80032bc <loop+0x14>)
 80032ae:	f000 f9b9 	bl	8003624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
//    	stop();
//    	timeout = 0;
//    }
//    Vx = vel_World2Car('x', WX, WY);
//	Vy = vel_World2Car('y', WX, WY);
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	24000640 	.word	0x24000640

080032c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d80d      	bhi.n	80032f0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	fa22 f103 	lsr.w	r1, r2, r3
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	b2ca      	uxtb	r2, r1
 80032e6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3301      	adds	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e7ee      	b.n	80032ce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d811      	bhi.n	800333a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6839      	ldr	r1, [r7, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	440a      	add	r2, r1
 8003320:	7812      	ldrb	r2, [r2, #0]
 8003322:	4611      	mov	r1, r2
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	00d2      	lsls	r2, r2, #3
 8003328:	fa01 f202 	lsl.w	r2, r1, r2
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3301      	adds	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e7ea      	b.n	8003310 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	4a04      	ldr	r2, [pc, #16]	; (8003364 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	0800fc4c 	.word	0x0800fc4c

08003368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ffe8 	bl	8003348 <_ZN3ros15NodeHandleBase_C1Ev>
 8003378:	4a47      	ldr	r2, [pc, #284]	; (8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe ff78 	bl	8002278 <_ZN13STM32HardwareC1Ev>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	f241 5314 	movw	r3, #5396	; 0x1514
 800339a:	4413      	add	r3, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe fbc3 	bl	8001b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b18      	cmp	r3, #24
 80033aa:	d80b      	bhi.n	80033c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	2200      	movs	r2, #0
 80033ba:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	3301      	adds	r3, #1
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e7f0      	b.n	80033a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033c4:	2300      	movs	r3, #0
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b18      	cmp	r3, #24
 80033cc:	d80a      	bhi.n	80033e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80033d6:	2100      	movs	r1, #0
 80033d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	3301      	adds	r3, #1
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	e7f1      	b.n	80033c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ee:	d20b      	bcs.n	8003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	441a      	add	r2, r3
 80033f6:	f241 0324 	movw	r3, #4132	; 0x1024
 80033fa:	4413      	add	r3, r2
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e7ef      	b.n	80033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003412:	d20b      	bcs.n	800342c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	441a      	add	r2, r3
 800341a:	f241 2324 	movw	r3, #4644	; 0x1224
 800341e:	4413      	add	r3, r2
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	3301      	adds	r3, #1
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	e7ef      	b.n	800340c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003432:	461a      	mov	r2, r3
 8003434:	2300      	movs	r3, #0
 8003436:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003440:	461a      	mov	r2, r3
 8003442:	2300      	movs	r3, #0
 8003444:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800344e:	461a      	mov	r2, r3
 8003450:	2300      	movs	r3, #0
 8003452:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800345c:	461a      	mov	r2, r3
 800345e:	2300      	movs	r3, #0
 8003460:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800346a:	461a      	mov	r2, r3
 800346c:	2300      	movs	r3, #0
 800346e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003478:	461a      	mov	r2, r3
 800347a:	2300      	movs	r3, #0
 800347c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003486:	461a      	mov	r2, r3
 8003488:	2300      	movs	r3, #0
 800348a:	6213      	str	r3, [r2, #32]
  }
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	0800fbf0 	.word	0x0800fbf0

0800349c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	0800fc34 	.word	0x0800fc34

080034bc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ffe5 	bl	800349c <_ZN3ros11Subscriber_C1Ev>
 80034d2:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3310      	adds	r3, #16
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fd07 	bl	8002ef0 <_ZN13geometry_msgs5TwistC1Ev>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	659a      	str	r2, [r3, #88]	; 0x58
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	609a      	str	r2, [r3, #8]
  };
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	0800fbd8 	.word	0x0800fbd8

08003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
  }
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fec5 	bl	80022b8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003534:	461a      	mov	r2, r3
 8003536:	2300      	movs	r3, #0
 8003538:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003542:	461a      	mov	r2, r3
 8003544:	2300      	movs	r3, #0
 8003546:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003550:	461a      	mov	r2, r3
 8003552:	2300      	movs	r3, #0
 8003554:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800355e:	461a      	mov	r2, r3
 8003560:	2300      	movs	r3, #0
 8003562:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b18      	cmp	r3, #24
 8003580:	dc19      	bgt.n	80035b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800358a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800359c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	605a      	str	r2, [r3, #4]
        return true;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e004      	b.n	80035b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3301      	adds	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e7e2      	b.n	800357c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80035b6:	2300      	movs	r3, #0
  }
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b18      	cmp	r3, #24
 80035d6:	dc1e      	bgt.n	8003616 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d111      	bne.n	800360e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	60da      	str	r2, [r3, #12]
        return true;
 800360a:	2301      	movs	r3, #1
 800360c:	e004      	b.n	8003618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3301      	adds	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e7dd      	b.n	80035d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003616:	2300      	movs	r3, #0
  }
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe ff3b 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003636:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800364a:	4293      	cmp	r3, r2
 800364c:	d905      	bls.n	800365a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003660:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00e      	beq.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800366e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	429a      	cmp	r2, r3
 8003676:	d906      	bls.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367e:	461a      	mov	r2, r3
 8003680:	2300      	movs	r3, #0
 8003682:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe ff08 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad2      	subs	r2, r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	bf8c      	ite	hi
 80036ae:	2301      	movhi	r3, #1
 80036b0:	2300      	movls	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80036b8:	f06f 0301 	mvn.w	r3, #1
 80036bc:	e226      	b.n	8003b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fe14 	bl	80022f0 <_ZN13STM32Hardware4readEv>
 80036c8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f2c0 81ff 	blt.w	8003ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d8:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4413      	add	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036e6:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80036f4:	2b07      	cmp	r3, #7
 80036f6:	d12d      	bne.n	8003754 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fe:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800370a:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	b2d1      	uxtb	r1, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	441a      	add	r2, r3
 8003716:	f241 0324 	movw	r3, #4132	; 0x1024
 800371a:	4413      	add	r3, r2
 800371c:	460a      	mov	r2, r1
 800371e:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003726:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800372a:	3b01      	subs	r3, #1
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003732:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1a0      	bne.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374a:	461a      	mov	r2, r3
 800374c:	2308      	movs	r3, #8
 800374e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003752:	e798      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800375e:	2b00      	cmp	r3, #0
 8003760:	d130      	bne.n	80037c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2bff      	cmp	r3, #255	; 0xff
 8003766:	d112      	bne.n	800378e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003772:	3301      	adds	r3, #1
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800377a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3314      	adds	r3, #20
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003788:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 800378c:	e77b      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fe8a 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	bf8c      	ite	hi
 80037a6:	2301      	movhi	r3, #1
 80037a8:	2300      	movls	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f43f af6a 	beq.w	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80037be:	f06f 0301 	mvn.w	r3, #1
 80037c2:	e1a3      	b.n	8003b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ca:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d121      	bne.n	8003816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2bfe      	cmp	r3, #254	; 0xfe
 80037d6:	d10b      	bne.n	80037f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037de:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037e2:	3301      	adds	r3, #1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037ea:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80037ee:	e74a      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f6:	461a      	mov	r2, r3
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003804:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f af3c 	bne.w	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f980 	bl	8003b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003814:	e737      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003820:	2b02      	cmp	r3, #2
 8003822:	d120      	bne.n	8003866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800382a:	461a      	mov	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003838:	461a      	mov	r2, r3
 800383a:	2300      	movs	r3, #0
 800383c:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003846:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800384a:	3301      	adds	r3, #1
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003852:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003864:	e70f      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800386c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003870:	2b03      	cmp	r3, #3
 8003872:	d118      	bne.n	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	4413      	add	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800388a:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003894:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003898:	3301      	adds	r3, #1
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038a0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80038a4:	e6ef      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ac:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d11f      	bne.n	80038f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038be:	425a      	negs	r2, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	bf58      	it	pl
 80038c6:	4253      	negpl	r3, r2
 80038c8:	2bff      	cmp	r3, #255	; 0xff
 80038ca:	d10b      	bne.n	80038e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038d6:	3301      	adds	r3, #1
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038de:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80038e2:	e6d0      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ea:	461a      	mov	r2, r3
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80038f2:	e6c8      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d119      	bne.n	8003936 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003908:	461a      	mov	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003916:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800391a:	3301      	adds	r3, #1
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003922:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003934:	e6a7      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003940:	2b06      	cmp	r3, #6
 8003942:	d123      	bne.n	800398c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	4413      	add	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800395a:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003964:	461a      	mov	r2, r3
 8003966:	2307      	movs	r3, #7
 8003968:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003972:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f ae85 	bne.w	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003982:	461a      	mov	r2, r3
 8003984:	2308      	movs	r3, #8
 8003986:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800398a:	e67c      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003992:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003996:	2b08      	cmp	r3, #8
 8003998:	f47f ae75 	bne.w	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80039b4:	425a      	negs	r2, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	bf58      	it	pl
 80039bc:	4253      	negpl	r3, r2
 80039be:	2bff      	cmp	r3, #255	; 0xff
 80039c0:	f47f ae61 	bne.w	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ca:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d116      	bne.n	8003a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f89e 	bl	8003b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f8ba 	bl	8003b52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e4:	461a      	mov	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295
 80039fe:	e085      	b.n	8003b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a06:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a0a:	2b0a      	cmp	r3, #10
 8003a0c:	d108      	bne.n	8003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	f241 0324 	movw	r3, #4132	; 0x1024
 8003a14:	4413      	add	r3, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f97b 	bl	8003d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003a1e:	e632      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a26:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d112      	bne.n	8003a54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	f241 5314 	movw	r3, #5396	; 0x1514
 8003a34:	4413      	add	r3, r2
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	f241 0224 	movw	r2, #4132	; 0x1024
 8003a3c:	440a      	add	r2, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe f9a6 	bl	8001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8003a52:	e618      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a5e:	2b0b      	cmp	r3, #11
 8003a60:	d106      	bne.n	8003a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003a6e:	e60a      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a76:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a7a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f43f adfc 	beq.w	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a94:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a98:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003aa2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aac:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003ab0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	f241 0324 	movw	r3, #4132	; 0x1024
 8003ac8:	440b      	add	r3, r1
 8003aca:	4619      	mov	r1, r3
 8003acc:	4790      	blx	r2
    while (true)
 8003ace:	e5da      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8003ad0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d014      	beq.n	8003b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d909      	bls.n	8003b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f80c 	bl	8003b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8003b0a:	2300      	movs	r3, #0
  }
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fd fc9d 	bl	8001460 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f107 020c 	add.w	r2, r7, #12
 8003b30:	210a      	movs	r1, #10
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
    rt_time = hardware_.time();
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fcb6 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003b40:	4602      	mov	r2, r0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b48:	615a      	str	r2, [r3, #20]
  }
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003b52:	b590      	push	{r4, r7, lr}
 8003b54:	b08b      	sub	sp, #44	; 0x2c
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003b5a:	f107 030c 	add.w	r3, r7, #12
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fd6e 	bl	8001640 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	2b18      	cmp	r3, #24
 8003b6c:	dc63      	bgt.n	8003c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d056      	beq.n	8003c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4798      	blx	r3
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4608      	mov	r0, r1
 8003bfc:	4798      	blx	r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c06:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681c      	ldr	r4, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fe fa70 	bl	8002102 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003c22:	4601      	mov	r1, r0
 8003c24:	f107 030c 	add.w	r3, r7, #12
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	3301      	adds	r3, #1
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
 8003c34:	e798      	b.n	8003b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	2b18      	cmp	r3, #24
 8003c3e:	dc5f      	bgt.n	8003d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c44:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d053      	beq.n	8003cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c54:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c76:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c82:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4608      	mov	r0, r1
 8003c92:	4798      	blx	r3
 8003c94:	4603      	mov	r3, r0
 8003c96:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4608      	mov	r0, r1
 8003cb8:	4798      	blx	r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cc2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681c      	ldr	r4, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cda:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4798      	blx	r3
 8003cec:	4601      	mov	r1, r0
 8003cee:	f107 030c 	add.w	r3, r7, #12
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfe:	e79c      	b.n	8003c3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8003d0c:	bf00      	nop
 8003d0e:	372c      	adds	r7, #44	; 0x2c
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd90      	pop	{r4, r7, pc}

08003d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd fb9c 	bl	8001460 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe fbbd 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003d32:	4602      	mov	r2, r0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003d40:	f107 0308 	add.w	r3, r7, #8
 8003d44:	6839      	ldr	r1, [r7, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd fbfa 	bl	8001540 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	4915      	ldr	r1, [pc, #84]	; (8003da8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003d52:	fba1 1303 	umull	r1, r3, r1, r3
 8003d56:	099b      	lsrs	r3, r3, #6
 8003d58:	4413      	add	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003d5c:	6939      	ldr	r1, [r7, #16]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003d62:	fba3 0302 	umull	r0, r3, r3, r2
 8003d66:	099b      	lsrs	r3, r3, #6
 8003d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d6c:	fb00 f303 	mul.w	r3, r0, r3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	4a0e      	ldr	r2, [pc, #56]	; (8003dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	440b      	add	r3, r1
 8003d7a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003d7c:	f107 0308 	add.w	r3, r7, #8
 8003d80:	3304      	adds	r3, #4
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8bf 	bl	8003f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fb8c 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003d94:	4602      	mov	r2, r0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	10624dd3 	.word	0x10624dd3
 8003dac:	000f4240 	.word	0x000f4240

08003db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b63      	cmp	r3, #99	; 0x63
 8003dc0:	dd0b      	ble.n	8003dda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003dcc:	f083 0301 	eor.w	r3, r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e090      	b.n	8003efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	f241 2324 	movw	r3, #4644	; 0x1224
 8003de6:	440b      	add	r3, r1
 8003de8:	3307      	adds	r3, #7
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4790      	blx	r2
 8003df0:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df8:	22ff      	movs	r2, #255	; 0xff
 8003dfa:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e04:	22fe      	movs	r2, #254	; 0xfe
 8003e06:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e14:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e28:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e32:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3c:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8003e40:	4413      	add	r3, r2
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	b21b      	sxth	r3, r3
 8003e64:	121b      	asrs	r3, r3, #8
 8003e66:	b21b      	sxth	r3, r3
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e70:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003e78:	2305      	movs	r3, #5
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3306      	adds	r3, #6
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	dc0e      	bgt.n	8003ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	441a      	add	r2, r3
 8003e8c:	f241 2324 	movw	r3, #4644	; 0x1224
 8003e90:	4413      	add	r3, r2
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	e7eb      	b.n	8003e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3307      	adds	r3, #7
 8003ea8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	425a      	negs	r2, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	bf58      	it	pl
 8003eb4:	4253      	negpl	r3, r2
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	1c59      	adds	r1, r3, #1
 8003ebc:	6179      	str	r1, [r7, #20]
 8003ebe:	43d2      	mvns	r2, r2
 8003ec0:	b2d1      	uxtb	r1, r2
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	441a      	add	r2, r3
 8003ec6:	f241 2324 	movw	r3, #4644	; 0x1224
 8003eca:	4413      	add	r3, r2
 8003ecc:	460a      	mov	r2, r1
 8003ece:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed6:	dc0b      	bgt.n	8003ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1d18      	adds	r0, r3, #4
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	f241 2324 	movw	r3, #4644	; 0x1224
 8003ee2:	4413      	add	r3, r2
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	f7fe fa96 	bl	8002418 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	e005      	b.n	8003efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003ef0:	4904      	ldr	r1, [pc, #16]	; (8003f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f84c 	bl	8003f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	0800fb64 	.word	0x0800fb64

08003f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe fac8 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003f1c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4917      	ldr	r1, [pc, #92]	; (8003f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003f26:	fba1 1303 	umull	r1, r3, r1, r3
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f36:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003f40:	fba3 0302 	umull	r0, r3, r3, r2
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f4a:	fb00 f303 	mul.w	r3, r0, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	4a0d      	ldr	r2, [pc, #52]	; (8003f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	1aca      	subs	r2, r1, r3
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8003f5a:	4413      	add	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f62:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f6a:	4413      	add	r3, r2
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	f241 021c 	movw	r2, #4124	; 0x101c
 8003f72:	440a      	add	r2, r1
 8003f74:	4611      	mov	r1, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc fb54 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	10624dd3 	.word	0x10624dd3
 8003f88:	000f4240 	.word	0x000f4240
 8003f8c:	3b9aca00 	.word	0x3b9aca00

08003f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	2103      	movs	r1, #3
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f804 	bl	8003fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003fba:	f107 0314 	add.w	r3, r7, #20
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fd fd02 	bl	80019c8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003fc4:	7afb      	ldrb	r3, [r7, #11]
 8003fc6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f107 0214 	add.w	r2, r7, #20
 8003fd6:	2107      	movs	r1, #7
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	4798      	blx	r3
  }
 8003fdc:	bf00      	nop
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <_Z41__static_initialization_and_destruction_0ii>:
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d116      	bne.n	8004022 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d111      	bne.n	8004022 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003ffe:	480b      	ldr	r0, [pc, #44]	; (800402c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004000:	f7ff f9b2 	bl	8003368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist insVel;
 8004004:	480a      	ldr	r0, [pc, #40]	; (8004030 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004006:	f7fe ff73 	bl	8002ef0 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("/ins_vel", &insVel);
 800400a:	2300      	movs	r3, #0
 800400c:	4a08      	ldr	r2, [pc, #32]	; (8004030 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800400e:	4909      	ldr	r1, [pc, #36]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004010:	4809      	ldr	r0, [pc, #36]	; (8004038 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004012:	f7fe f84b 	bl	80020ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8004016:	2301      	movs	r3, #1
 8004018:	4a08      	ldr	r2, [pc, #32]	; (800403c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800401a:	4909      	ldr	r1, [pc, #36]	; (8004040 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800401c:	4809      	ldr	r0, [pc, #36]	; (8004044 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800401e:	f7ff fa4d 	bl	80034bc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	24000640 	.word	0x24000640
 8004030:	24001bb0 	.word	0x24001bb0
 8004034:	0800fba0 	.word	0x0800fba0
 8004038:	24001bf8 	.word	0x24001bf8
 800403c:	08002ff9 	.word	0x08002ff9
 8004040:	0800fbac 	.word	0x0800fbac
 8004044:	24001c10 	.word	0x24001c10

08004048 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3310      	adds	r3, #16
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe ff8b 	bl	8002f74 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	3210      	adds	r2, #16
 8004066:	4610      	mov	r0, r2
 8004068:	4798      	blx	r3
  }
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3310      	adds	r3, #16
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe ff92 	bl	8002fc0 <_ZN13geometry_msgs5Twist7getTypeEv>
 800409c:	4603      	mov	r3, r0
  }
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3310      	adds	r3, #16
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe ff92 	bl	8002fdc <_ZN13geometry_msgs5Twist6getMD5Ev>
 80040b8:	4603      	mov	r3, r0
  }
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
    return configured_;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d0:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <_GLOBAL__sub_I_nh>:
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040e8:	2001      	movs	r0, #1
 80040ea:	f7ff ff7b 	bl	8003fe4 <_Z41__static_initialization_and_destruction_0ii>
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <odom_update>:
#include "odometry.h"

ODOM odom;

void odom_update(double Vx_world, double Vy_world, double W){
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	ed87 0b04 	vstr	d0, [r7, #16]
 80040fa:	ed87 1b02 	vstr	d1, [r7, #8]
 80040fe:	ed87 2b00 	vstr	d2, [r7]
    odom.x += (double)Vx_world * dt;
 8004102:	4b35      	ldr	r3, [pc, #212]	; (80041d8 <odom_update+0xe8>)
 8004104:	ed93 6b00 	vldr	d6, [r3]
 8004108:	ed97 7b04 	vldr	d7, [r7, #16]
 800410c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80041b8 <odom_update+0xc8>
 8004110:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004114:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004118:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <odom_update+0xe8>)
 800411a:	ed83 7b00 	vstr	d7, [r3]
    odom.y += (double)Vy_world * dt;
 800411e:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <odom_update+0xe8>)
 8004120:	ed93 6b02 	vldr	d6, [r3, #8]
 8004124:	ed97 7b02 	vldr	d7, [r7, #8]
 8004128:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80041b8 <odom_update+0xc8>
 800412c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004130:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <odom_update+0xe8>)
 8004136:	ed83 7b02 	vstr	d7, [r3, #8]
    odom.theta += (double)W * dt;
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <odom_update+0xe8>)
 800413c:	ed93 6b04 	vldr	d6, [r3, #16]
 8004140:	ed97 7b00 	vldr	d7, [r7]
 8004144:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80041b8 <odom_update+0xc8>
 8004148:	ee27 7b05 	vmul.f64	d7, d7, d5
 800414c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004150:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <odom_update+0xe8>)
 8004152:	ed83 7b04 	vstr	d7, [r3, #16]
    while(odom.theta > PI)  odom.theta -= 2*PI;
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <odom_update+0xe8>)
 8004158:	ed93 7b04 	vldr	d7, [r3, #16]
 800415c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80041c0 <odom_update+0xd0>
 8004160:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004168:	dc00      	bgt.n	800416c <odom_update+0x7c>
 800416a:	e00a      	b.n	8004182 <odom_update+0x92>
 800416c:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <odom_update+0xe8>)
 800416e:	ed93 7b04 	vldr	d7, [r3, #16]
 8004172:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80041c8 <odom_update+0xd8>
 8004176:	ee37 7b46 	vsub.f64	d7, d7, d6
 800417a:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <odom_update+0xe8>)
 800417c:	ed83 7b04 	vstr	d7, [r3, #16]
 8004180:	e7e9      	b.n	8004156 <odom_update+0x66>
    while(odom.theta < -1*PI) odom.theta += 2*PI;
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <odom_update+0xe8>)
 8004184:	ed93 7b04 	vldr	d7, [r3, #16]
 8004188:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80041d0 <odom_update+0xe0>
 800418c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	d400      	bmi.n	8004198 <odom_update+0xa8>
    return;
 8004196:	e00a      	b.n	80041ae <odom_update+0xbe>
    while(odom.theta < -1*PI) odom.theta += 2*PI;
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <odom_update+0xe8>)
 800419a:	ed93 7b04 	vldr	d7, [r3, #16]
 800419e:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80041c8 <odom_update+0xd8>
 80041a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <odom_update+0xe8>)
 80041a8:	ed83 7b04 	vstr	d7, [r3, #16]
 80041ac:	e7e9      	b.n	8004182 <odom_update+0x92>
}
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80041bc:	3f50624d 	.word	0x3f50624d
 80041c0:	54cadf99 	.word	0x54cadf99
 80041c4:	400921fb 	.word	0x400921fb
 80041c8:	54cadf99 	.word	0x54cadf99
 80041cc:	401921fb 	.word	0x401921fb
 80041d0:	54cadf99 	.word	0x54cadf99
 80041d4:	c00921fb 	.word	0xc00921fb
 80041d8:	24001c70 	.word	0x24001c70

080041dc <vel_Car2World>:
	if(coor == 'x')
		return Vx_world * sin( odom.theta ) - Vy_world * cos( odom.theta );
	else
		return Vx_world * cos( odom.theta ) + Vy_world * sin( odom.theta );
}
double vel_Car2World(char coor, double Vx, double Vy){
 80041dc:	b580      	push	{r7, lr}
 80041de:	ed2d 8b02 	vpush	{d8}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80041ec:	ed87 1b00 	vstr	d1, [r7]
 80041f0:	75fb      	strb	r3, [r7, #23]
	if(coor == 'x')
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
 80041f4:	2b78      	cmp	r3, #120	; 0x78
 80041f6:	d11c      	bne.n	8004232 <vel_Car2World+0x56>
		return Vx * sin( odom.theta ) + Vy * cos( odom.theta );
 80041f8:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <vel_Car2World+0x9c>)
 80041fa:	ed93 7b04 	vldr	d7, [r3, #16]
 80041fe:	eeb0 0b47 	vmov.f64	d0, d7
 8004202:	f00a fc3d 	bl	800ea80 <sin>
 8004206:	eeb0 6b40 	vmov.f64	d6, d0
 800420a:	ed97 7b02 	vldr	d7, [r7, #8]
 800420e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004212:	4b19      	ldr	r3, [pc, #100]	; (8004278 <vel_Car2World+0x9c>)
 8004214:	ed93 7b04 	vldr	d7, [r3, #16]
 8004218:	eeb0 0b47 	vmov.f64	d0, d7
 800421c:	f00a fbe4 	bl	800e9e8 <cos>
 8004220:	eeb0 6b40 	vmov.f64	d6, d0
 8004224:	ed97 7b00 	vldr	d7, [r7]
 8004228:	ee26 7b07 	vmul.f64	d7, d6, d7
 800422c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004230:	e01b      	b.n	800426a <vel_Car2World+0x8e>
	else
		return Vy * sin( odom.theta ) - Vx * cos( odom.theta );
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <vel_Car2World+0x9c>)
 8004234:	ed93 7b04 	vldr	d7, [r3, #16]
 8004238:	eeb0 0b47 	vmov.f64	d0, d7
 800423c:	f00a fc20 	bl	800ea80 <sin>
 8004240:	eeb0 6b40 	vmov.f64	d6, d0
 8004244:	ed97 7b00 	vldr	d7, [r7]
 8004248:	ee26 8b07 	vmul.f64	d8, d6, d7
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <vel_Car2World+0x9c>)
 800424e:	ed93 7b04 	vldr	d7, [r3, #16]
 8004252:	eeb0 0b47 	vmov.f64	d0, d7
 8004256:	f00a fbc7 	bl	800e9e8 <cos>
 800425a:	eeb0 6b40 	vmov.f64	d6, d0
 800425e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004262:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004266:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 800426a:	eeb0 0b47 	vmov.f64	d0, d7
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	ecbd 8b02 	vpop	{d8}
 8004276:	bd80      	pop	{r7, pc}
 8004278:	24001c70 	.word	0x24001c70

0800427c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <HAL_MspInit+0x3c>)
 8004284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004288:	4a0b      	ldr	r2, [pc, #44]	; (80042b8 <HAL_MspInit+0x3c>)
 800428a:	f043 0302 	orr.w	r3, r3, #2
 800428e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_MspInit+0x3c>)
 8004294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80042a0:	2200      	movs	r2, #0
 80042a2:	2100      	movs	r1, #0
 80042a4:	2005      	movs	r0, #5
 80042a6:	f001 f81c 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80042aa:	2005      	movs	r0, #5
 80042ac:	f001 f833 	bl	8005316 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	58024400 	.word	0x58024400

080042bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042cc:	d117      	bne.n	80042fe <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042ce:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <HAL_TIM_Base_MspInit+0x84>)
 80042d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042d4:	4a1a      	ldr	r2, [pc, #104]	; (8004340 <HAL_TIM_Base_MspInit+0x84>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <HAL_TIM_Base_MspInit+0x84>)
 80042e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042ec:	2200      	movs	r2, #0
 80042ee:	2100      	movs	r1, #0
 80042f0:	201c      	movs	r0, #28
 80042f2:	f000 fff6 	bl	80052e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042f6:	201c      	movs	r0, #28
 80042f8:	f001 f80d 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80042fc:	e01b      	b.n	8004336 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a10      	ldr	r2, [pc, #64]	; (8004344 <HAL_TIM_Base_MspInit+0x88>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d116      	bne.n	8004336 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004308:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <HAL_TIM_Base_MspInit+0x84>)
 800430a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800430e:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <HAL_TIM_Base_MspInit+0x84>)
 8004310:	f043 0308 	orr.w	r3, r3, #8
 8004314:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_TIM_Base_MspInit+0x84>)
 800431a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	2032      	movs	r0, #50	; 0x32
 800432c:	f000 ffd9 	bl	80052e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004330:	2032      	movs	r0, #50	; 0x32
 8004332:	f000 fff0 	bl	8005316 <HAL_NVIC_EnableIRQ>
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400
 8004344:	40000c00 	.word	0x40000c00

08004348 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b090      	sub	sp, #64	; 0x40
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a69      	ldr	r2, [pc, #420]	; (800450c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d12e      	bne.n	80043c8 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800436a:	4b69      	ldr	r3, [pc, #420]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800436c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004370:	4a67      	ldr	r2, [pc, #412]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800437a:	4b65      	ldr	r3, [pc, #404]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800437c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004388:	4b61      	ldr	r3, [pc, #388]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800438a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800438e:	4a60      	ldr	r2, [pc, #384]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004398:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800439a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043a6:	23c0      	movs	r3, #192	; 0xc0
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043aa:	2302      	movs	r3, #2
 80043ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b2:	2300      	movs	r3, #0
 80043b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043b6:	2302      	movs	r3, #2
 80043b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043be:	4619      	mov	r1, r3
 80043c0:	4854      	ldr	r0, [pc, #336]	; (8004514 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80043c2:	f003 ffc1 	bl	8008348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80043c6:	e09c      	b.n	8004502 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a52      	ldr	r2, [pc, #328]	; (8004518 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d12f      	bne.n	8004432 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043d2:	4b4f      	ldr	r3, [pc, #316]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043d8:	4a4d      	ldr	r2, [pc, #308]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043e2:	4b4b      	ldr	r3, [pc, #300]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043f0:	4b47      	ldr	r3, [pc, #284]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f6:	4a46      	ldr	r2, [pc, #280]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043f8:	f043 0308 	orr.w	r3, r3, #8
 80043fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004400:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800440e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004414:	2302      	movs	r3, #2
 8004416:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004418:	2300      	movs	r3, #0
 800441a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441c:	2300      	movs	r3, #0
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004420:	2302      	movs	r3, #2
 8004422:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004428:	4619      	mov	r1, r3
 800442a:	483c      	ldr	r0, [pc, #240]	; (800451c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800442c:	f003 ff8c 	bl	8008348 <HAL_GPIO_Init>
}
 8004430:	e067      	b.n	8004502 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a3a      	ldr	r2, [pc, #232]	; (8004520 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d12e      	bne.n	800449a <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800443c:	4b34      	ldr	r3, [pc, #208]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800443e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004442:	4a33      	ldr	r2, [pc, #204]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004444:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004448:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800444c:	4b30      	ldr	r3, [pc, #192]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800444e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800445a:	4b2d      	ldr	r3, [pc, #180]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800445c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004460:	4a2b      	ldr	r2, [pc, #172]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004462:	f043 0320 	orr.w	r3, r3, #32
 8004466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800446a:	4b29      	ldr	r3, [pc, #164]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800446c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004478:	2303      	movs	r3, #3
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447c:	2302      	movs	r3, #2
 800447e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	2300      	movs	r3, #0
 8004482:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004484:	2300      	movs	r3, #0
 8004486:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004488:	230d      	movs	r3, #13
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800448c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004490:	4619      	mov	r1, r3
 8004492:	4824      	ldr	r0, [pc, #144]	; (8004524 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8004494:	f003 ff58 	bl	8008348 <HAL_GPIO_Init>
}
 8004498:	e033      	b.n	8004502 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a22      	ldr	r2, [pc, #136]	; (8004528 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d12e      	bne.n	8004502 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80044aa:	4a19      	ldr	r2, [pc, #100]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044b0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044c8:	4a11      	ldr	r2, [pc, #68]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044ca:	f043 0320 	orr.w	r3, r3, #32
 80044ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044d2:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80044e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e6:	2302      	movs	r3, #2
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ee:	2300      	movs	r3, #0
 80044f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80044f2:	230e      	movs	r3, #14
 80044f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044fa:	4619      	mov	r1, r3
 80044fc:	4809      	ldr	r0, [pc, #36]	; (8004524 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80044fe:	f003 ff23 	bl	8008348 <HAL_GPIO_Init>
}
 8004502:	bf00      	nop
 8004504:	3740      	adds	r7, #64	; 0x40
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40000400 	.word	0x40000400
 8004510:	58024400 	.word	0x58024400
 8004514:	58020000 	.word	0x58020000
 8004518:	40000800 	.word	0x40000800
 800451c:	58020c00 	.word	0x58020c00
 8004520:	4000e000 	.word	0x4000e000
 8004524:	58021400 	.word	0x58021400
 8004528:	4000e400 	.word	0x4000e400

0800452c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a16      	ldr	r2, [pc, #88]	; (8004594 <HAL_TIM_PWM_MspInit+0x68>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10f      	bne.n	800455e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <HAL_TIM_PWM_MspInit+0x6c>)
 8004540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004544:	4a14      	ldr	r2, [pc, #80]	; (8004598 <HAL_TIM_PWM_MspInit+0x6c>)
 8004546:	f043 0302 	orr.w	r3, r3, #2
 800454a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_TIM_PWM_MspInit+0x6c>)
 8004550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800455c:	e013      	b.n	8004586 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a0e      	ldr	r2, [pc, #56]	; (800459c <HAL_TIM_PWM_MspInit+0x70>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10e      	bne.n	8004586 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_TIM_PWM_MspInit+0x6c>)
 800456a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_TIM_PWM_MspInit+0x6c>)
 8004570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004574:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004578:	4b07      	ldr	r3, [pc, #28]	; (8004598 <HAL_TIM_PWM_MspInit+0x6c>)
 800457a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800457e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010400 	.word	0x40010400
 8004598:	58024400 	.word	0x58024400
 800459c:	40014000 	.word	0x40014000

080045a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	f107 0314 	add.w	r3, r7, #20
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a35      	ldr	r2, [pc, #212]	; (8004694 <HAL_TIM_MspPostInit+0xf4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d120      	bne.n	8004604 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045c2:	4b35      	ldr	r3, [pc, #212]	; (8004698 <HAL_TIM_MspPostInit+0xf8>)
 80045c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045c8:	4a33      	ldr	r2, [pc, #204]	; (8004698 <HAL_TIM_MspPostInit+0xf8>)
 80045ca:	f043 0304 	orr.w	r3, r3, #4
 80045ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045d2:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_TIM_MspPostInit+0xf8>)
 80045d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e6:	2302      	movs	r3, #2
 80045e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80045f2:	2303      	movs	r3, #3
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045f6:	f107 0314 	add.w	r3, r7, #20
 80045fa:	4619      	mov	r1, r3
 80045fc:	4827      	ldr	r0, [pc, #156]	; (800469c <HAL_TIM_MspPostInit+0xfc>)
 80045fe:	f003 fea3 	bl	8008348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004602:	e042      	b.n	800468a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a25      	ldr	r2, [pc, #148]	; (80046a0 <HAL_TIM_MspPostInit+0x100>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d13d      	bne.n	800468a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800460e:	4b22      	ldr	r3, [pc, #136]	; (8004698 <HAL_TIM_MspPostInit+0xf8>)
 8004610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004614:	4a20      	ldr	r2, [pc, #128]	; (8004698 <HAL_TIM_MspPostInit+0xf8>)
 8004616:	f043 0310 	orr.w	r3, r3, #16
 800461a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800461e:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <HAL_TIM_MspPostInit+0xf8>)
 8004620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800462c:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <HAL_TIM_MspPostInit+0xf8>)
 800462e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004632:	4a19      	ldr	r2, [pc, #100]	; (8004698 <HAL_TIM_MspPostInit+0xf8>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800463c:	4b16      	ldr	r3, [pc, #88]	; (8004698 <HAL_TIM_MspPostInit+0xf8>)
 800463e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800464a:	2320      	movs	r3, #32
 800464c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464e:	2302      	movs	r3, #2
 8004650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800465a:	2304      	movs	r3, #4
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800465e:	f107 0314 	add.w	r3, r7, #20
 8004662:	4619      	mov	r1, r3
 8004664:	480f      	ldr	r0, [pc, #60]	; (80046a4 <HAL_TIM_MspPostInit+0x104>)
 8004666:	f003 fe6f 	bl	8008348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800466a:	2308      	movs	r3, #8
 800466c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466e:	2302      	movs	r3, #2
 8004670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004676:	2300      	movs	r3, #0
 8004678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800467a:	2304      	movs	r3, #4
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467e:	f107 0314 	add.w	r3, r7, #20
 8004682:	4619      	mov	r1, r3
 8004684:	4808      	ldr	r0, [pc, #32]	; (80046a8 <HAL_TIM_MspPostInit+0x108>)
 8004686:	f003 fe5f 	bl	8008348 <HAL_GPIO_Init>
}
 800468a:	bf00      	nop
 800468c:	3728      	adds	r7, #40	; 0x28
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40010400 	.word	0x40010400
 8004698:	58024400 	.word	0x58024400
 800469c:	58020800 	.word	0x58020800
 80046a0:	40014000 	.word	0x40014000
 80046a4:	58021000 	.word	0x58021000
 80046a8:	58020000 	.word	0x58020000

080046ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b0b6      	sub	sp, #216	; 0xd8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046c4:	f107 0310 	add.w	r3, r7, #16
 80046c8:	22b4      	movs	r2, #180	; 0xb4
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f00b f80d 	bl	800f6ec <memset>
  if(huart->Instance==USART10)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a62      	ldr	r2, [pc, #392]	; (8004860 <HAL_UART_MspInit+0x1b4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	f040 80bc 	bne.w	8004856 <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 80046de:	2301      	movs	r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046e8:	f107 0310 	add.w	r3, r7, #16
 80046ec:	4618      	mov	r0, r3
 80046ee:	f005 f887 	bl	8009800 <HAL_RCCEx_PeriphCLKConfig>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80046f8:	f7fc fe8c 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 80046fc:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_UART_MspInit+0x1b8>)
 80046fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004702:	4a58      	ldr	r2, [pc, #352]	; (8004864 <HAL_UART_MspInit+0x1b8>)
 8004704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004708:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800470c:	4b55      	ldr	r3, [pc, #340]	; (8004864 <HAL_UART_MspInit+0x1b8>)
 800470e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800471a:	4b52      	ldr	r3, [pc, #328]	; (8004864 <HAL_UART_MspInit+0x1b8>)
 800471c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004720:	4a50      	ldr	r2, [pc, #320]	; (8004864 <HAL_UART_MspInit+0x1b8>)
 8004722:	f043 0310 	orr.w	r3, r3, #16
 8004726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800472a:	4b4e      	ldr	r3, [pc, #312]	; (8004864 <HAL_UART_MspInit+0x1b8>)
 800472c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004738:	2304      	movs	r3, #4
 800473a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473e:	2302      	movs	r3, #2
 8004740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474a:	2300      	movs	r3, #0
 800474c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8004750:	2304      	movs	r3, #4
 8004752:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004756:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800475a:	4619      	mov	r1, r3
 800475c:	4842      	ldr	r0, [pc, #264]	; (8004868 <HAL_UART_MspInit+0x1bc>)
 800475e:	f003 fdf3 	bl	8008348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004762:	2308      	movs	r3, #8
 8004764:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004768:	2302      	movs	r3, #2
 800476a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 800477a:	230b      	movs	r3, #11
 800477c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004780:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004784:	4619      	mov	r1, r3
 8004786:	4838      	ldr	r0, [pc, #224]	; (8004868 <HAL_UART_MspInit+0x1bc>)
 8004788:	f003 fdde 	bl	8008348 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 800478c:	4b37      	ldr	r3, [pc, #220]	; (800486c <HAL_UART_MspInit+0x1c0>)
 800478e:	4a38      	ldr	r2, [pc, #224]	; (8004870 <HAL_UART_MspInit+0x1c4>)
 8004790:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 8004792:	4b36      	ldr	r3, [pc, #216]	; (800486c <HAL_UART_MspInit+0x1c0>)
 8004794:	2276      	movs	r2, #118	; 0x76
 8004796:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004798:	4b34      	ldr	r3, [pc, #208]	; (800486c <HAL_UART_MspInit+0x1c0>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800479e:	4b33      	ldr	r3, [pc, #204]	; (800486c <HAL_UART_MspInit+0x1c0>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047a4:	4b31      	ldr	r3, [pc, #196]	; (800486c <HAL_UART_MspInit+0x1c0>)
 80047a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047aa:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047ac:	4b2f      	ldr	r3, [pc, #188]	; (800486c <HAL_UART_MspInit+0x1c0>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <HAL_UART_MspInit+0x1c0>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 80047b8:	4b2c      	ldr	r3, [pc, #176]	; (800486c <HAL_UART_MspInit+0x1c0>)
 80047ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047be:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80047c0:	4b2a      	ldr	r3, [pc, #168]	; (800486c <HAL_UART_MspInit+0x1c0>)
 80047c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047c6:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047c8:	4b28      	ldr	r3, [pc, #160]	; (800486c <HAL_UART_MspInit+0x1c0>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 80047ce:	4827      	ldr	r0, [pc, #156]	; (800486c <HAL_UART_MspInit+0x1c0>)
 80047d0:	f000 fdca 	bl	8005368 <HAL_DMA_Init>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80047da:	f7fc fe1b 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a22      	ldr	r2, [pc, #136]	; (800486c <HAL_UART_MspInit+0x1c0>)
 80047e2:	67da      	str	r2, [r3, #124]	; 0x7c
 80047e4:	4a21      	ldr	r2, [pc, #132]	; (800486c <HAL_UART_MspInit+0x1c0>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 80047ea:	4b22      	ldr	r3, [pc, #136]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 80047ec:	4a22      	ldr	r2, [pc, #136]	; (8004878 <HAL_UART_MspInit+0x1cc>)
 80047ee:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 80047f0:	4b20      	ldr	r3, [pc, #128]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 80047f2:	2277      	movs	r2, #119	; 0x77
 80047f4:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047f6:	4b1f      	ldr	r3, [pc, #124]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 80047f8:	2240      	movs	r2, #64	; 0x40
 80047fa:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047fc:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 80047fe:	2200      	movs	r2, #0
 8004800:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 8004804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004808:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 800480c:	2200      	movs	r2, #0
 800480e:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004810:	4b18      	ldr	r3, [pc, #96]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 8004812:	2200      	movs	r2, #0
 8004814:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 8004818:	2200      	movs	r2, #0
 800481a:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800481c:	4b15      	ldr	r3, [pc, #84]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 800481e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004822:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 8004826:	2200      	movs	r2, #0
 8004828:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 800482a:	4812      	ldr	r0, [pc, #72]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 800482c:	f000 fd9c 	bl	8005368 <HAL_DMA_Init>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 8004836:	f7fc fded 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a0d      	ldr	r2, [pc, #52]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 800483e:	679a      	str	r2, [r3, #120]	; 0x78
 8004840:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <HAL_UART_MspInit+0x1c8>)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8004846:	2200      	movs	r2, #0
 8004848:	2100      	movs	r1, #0
 800484a:	209c      	movs	r0, #156	; 0x9c
 800484c:	f000 fd49 	bl	80052e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004850:	209c      	movs	r0, #156	; 0x9c
 8004852:	f000 fd60 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8004856:	bf00      	nop
 8004858:	37d8      	adds	r7, #216	; 0xd8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40011c00 	.word	0x40011c00
 8004864:	58024400 	.word	0x58024400
 8004868:	58021000 	.word	0x58021000
 800486c:	2400054c 	.word	0x2400054c
 8004870:	40020010 	.word	0x40020010
 8004874:	240005c4 	.word	0x240005c4
 8004878:	40020028 	.word	0x40020028

0800487c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <HAL_UART_MspDeInit+0x4c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d118      	bne.n	80048c0 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <HAL_UART_MspDeInit+0x50>)
 8004890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004894:	4a0d      	ldr	r2, [pc, #52]	; (80048cc <HAL_UART_MspDeInit+0x50>)
 8004896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800489a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 800489e:	210c      	movs	r1, #12
 80048a0:	480b      	ldr	r0, [pc, #44]	; (80048d0 <HAL_UART_MspDeInit+0x54>)
 80048a2:	f003 fef9 	bl	8008698 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048aa:	4618      	mov	r0, r3
 80048ac:	f001 f8b6 	bl	8005a1c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 f8b1 	bl	8005a1c <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 80048ba:	209c      	movs	r0, #156	; 0x9c
 80048bc:	f000 fd39 	bl	8005332 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 80048c0:	bf00      	nop
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40011c00 	.word	0x40011c00
 80048cc:	58024400 	.word	0x58024400
 80048d0:	58021000 	.word	0x58021000

080048d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048d8:	e7fe      	b.n	80048d8 <NMI_Handler+0x4>

080048da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048da:	b480      	push	{r7}
 80048dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048de:	e7fe      	b.n	80048de <HardFault_Handler+0x4>

080048e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048e4:	e7fe      	b.n	80048e4 <MemManage_Handler+0x4>

080048e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048e6:	b480      	push	{r7}
 80048e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048ea:	e7fe      	b.n	80048ea <BusFault_Handler+0x4>

080048ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048f0:	e7fe      	b.n	80048f0 <UsageFault_Handler+0x4>

080048f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048f2:	b480      	push	{r7}
 80048f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800490e:	b480      	push	{r7}
 8004910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004912:	bf00      	nop
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004920:	f000 fbc0 	bl	80050a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004924:	bf00      	nop
 8004926:	bd80      	pop	{r7, pc}

08004928 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800492c:	bf00      	nop
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
	...

08004938 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 800493c:	4802      	ldr	r0, [pc, #8]	; (8004948 <DMA1_Stream0_IRQHandler+0x10>)
 800493e:	f002 f9f1 	bl	8006d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	2400054c 	.word	0x2400054c

0800494c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8004950:	4802      	ldr	r0, [pc, #8]	; (800495c <DMA1_Stream1_IRQHandler+0x10>)
 8004952:	f002 f9e7 	bl	8006d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004956:	bf00      	nop
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	240005c4 	.word	0x240005c4

08004960 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004964:	4802      	ldr	r0, [pc, #8]	; (8004970 <TIM2_IRQHandler+0x10>)
 8004966:	f006 fded 	bl	800b544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	2400025c 	.word	0x2400025c

08004974 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004978:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800497c:	f003 ffa7 	bl	80088ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004980:	bf00      	nop
 8004982:	bd80      	pop	{r7, pc}

08004984 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004988:	4802      	ldr	r0, [pc, #8]	; (8004994 <TIM5_IRQHandler+0x10>)
 800498a:	f006 fddb 	bl	800b544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	24000340 	.word	0x24000340

08004998 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 800499c:	4802      	ldr	r0, [pc, #8]	; (80049a8 <USART10_IRQHandler+0x10>)
 800499e:	f008 f833 	bl	800ca08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	240004bc 	.word	0x240004bc

080049ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
	return 1;
 80049b0:	2301      	movs	r3, #1
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <_kill>:

int _kill(int pid, int sig)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049c6:	f00a fe59 	bl	800f67c <__errno>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2216      	movs	r2, #22
 80049ce:	601a      	str	r2, [r3, #0]
	return -1;
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <_exit>:

void _exit (int status)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049e4:	f04f 31ff 	mov.w	r1, #4294967295
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ffe7 	bl	80049bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80049ee:	e7fe      	b.n	80049ee <_exit+0x12>

080049f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049f8:	4a14      	ldr	r2, [pc, #80]	; (8004a4c <_sbrk+0x5c>)
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <_sbrk+0x60>)
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <_sbrk+0x64>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a0c:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <_sbrk+0x64>)
 8004a0e:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <_sbrk+0x68>)
 8004a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a12:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <_sbrk+0x64>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d207      	bcs.n	8004a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a20:	f00a fe2c 	bl	800f67c <__errno>
 8004a24:	4603      	mov	r3, r0
 8004a26:	220c      	movs	r2, #12
 8004a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2e:	e009      	b.n	8004a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <_sbrk+0x64>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a36:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <_sbrk+0x64>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <_sbrk+0x64>)
 8004a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	24050000 	.word	0x24050000
 8004a50:	00000400 	.word	0x00000400
 8004a54:	24001c88 	.word	0x24001c88
 8004a58:	24001ca0 	.word	0x24001ca0

08004a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a60:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <SystemInit+0xd0>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a66:	4a31      	ldr	r2, [pc, #196]	; (8004b2c <SystemInit+0xd0>)
 8004a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004a70:	4b2f      	ldr	r3, [pc, #188]	; (8004b30 <SystemInit+0xd4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	2b06      	cmp	r3, #6
 8004a7a:	d807      	bhi.n	8004a8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004a7c:	4b2c      	ldr	r3, [pc, #176]	; (8004b30 <SystemInit+0xd4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 030f 	bic.w	r3, r3, #15
 8004a84:	4a2a      	ldr	r2, [pc, #168]	; (8004b30 <SystemInit+0xd4>)
 8004a86:	f043 0307 	orr.w	r3, r3, #7
 8004a8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004a8c:	4b29      	ldr	r3, [pc, #164]	; (8004b34 <SystemInit+0xd8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <SystemInit+0xd8>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004a98:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <SystemInit+0xd8>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004a9e:	4b25      	ldr	r3, [pc, #148]	; (8004b34 <SystemInit+0xd8>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4924      	ldr	r1, [pc, #144]	; (8004b34 <SystemInit+0xd8>)
 8004aa4:	4b24      	ldr	r3, [pc, #144]	; (8004b38 <SystemInit+0xdc>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004aaa:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <SystemInit+0xd4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004ab6:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <SystemInit+0xd4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 030f 	bic.w	r3, r3, #15
 8004abe:	4a1c      	ldr	r2, [pc, #112]	; (8004b30 <SystemInit+0xd4>)
 8004ac0:	f043 0307 	orr.w	r3, r3, #7
 8004ac4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <SystemInit+0xd8>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004acc:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <SystemInit+0xd8>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004ad2:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <SystemInit+0xd8>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004ad8:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <SystemInit+0xd8>)
 8004ada:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <SystemInit+0xe0>)
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004ade:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <SystemInit+0xd8>)
 8004ae0:	4a17      	ldr	r2, [pc, #92]	; (8004b40 <SystemInit+0xe4>)
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <SystemInit+0xd8>)
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <SystemInit+0xe8>)
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004aea:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <SystemInit+0xd8>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004af0:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <SystemInit+0xd8>)
 8004af2:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <SystemInit+0xe8>)
 8004af4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004af6:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <SystemInit+0xd8>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <SystemInit+0xd8>)
 8004afe:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <SystemInit+0xe8>)
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <SystemInit+0xd8>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <SystemInit+0xd8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <SystemInit+0xd8>)
 8004b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <SystemInit+0xd8>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <SystemInit+0xec>)
 8004b1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004b20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004b22:	bf00      	nop
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	e000ed00 	.word	0xe000ed00
 8004b30:	52002000 	.word	0x52002000
 8004b34:	58024400 	.word	0x58024400
 8004b38:	eaf6ed7f 	.word	0xeaf6ed7f
 8004b3c:	02020200 	.word	0x02020200
 8004b40:	01ff0000 	.word	0x01ff0000
 8004b44:	01010280 	.word	0x01010280
 8004b48:	52004000 	.word	0x52004000

08004b4c <HAL_TIM_PeriodElapsedCallback>:

int ccc = 0;
double coeffab = 0.5 * (width + length);
double angle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	ed2d 8b02 	vpush	{d8}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_PeriodElapsedCallback+0x1a>
		interPub();
 8004b62:	f7fe fa6b 	bl	800303c <interPub>
	}
	if (htim->Instance == TIM5) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4aa6      	ldr	r2, [pc, #664]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	f040 81eb 	bne.w	8004f48 <HAL_TIM_PeriodElapsedCallback+0x3fc>
		Kpid[0].goalVel = Vy + Vx + (W * coeffab);
 8004b72:	4ba5      	ldr	r3, [pc, #660]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004b74:	ed93 6b00 	vldr	d6, [r3]
 8004b78:	4ba4      	ldr	r3, [pc, #656]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004b7a:	ed93 7b00 	vldr	d7, [r3]
 8004b7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004b82:	4ba3      	ldr	r3, [pc, #652]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004b84:	ed93 5b00 	vldr	d5, [r3]
 8004b88:	4ba2      	ldr	r3, [pc, #648]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004b8a:	ed93 7b00 	vldr	d7, [r3]
 8004b8e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004b92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b96:	4ba0      	ldr	r3, [pc, #640]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004b98:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vy - Vx - (W * coeffab);
 8004b9c:	4b9a      	ldr	r3, [pc, #616]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004b9e:	ed93 6b00 	vldr	d6, [r3]
 8004ba2:	4b9a      	ldr	r3, [pc, #616]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004ba4:	ed93 7b00 	vldr	d7, [r3]
 8004ba8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004bac:	4b98      	ldr	r3, [pc, #608]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004bae:	ed93 5b00 	vldr	d5, [r3]
 8004bb2:	4b98      	ldr	r3, [pc, #608]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004bb4:	ed93 7b00 	vldr	d7, [r3]
 8004bb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004bbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004bc0:	4b95      	ldr	r3, [pc, #596]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004bc2:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vy + Vx - (W * coeffab);
 8004bc6:	4b90      	ldr	r3, [pc, #576]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004bc8:	ed93 6b00 	vldr	d6, [r3]
 8004bcc:	4b8f      	ldr	r3, [pc, #572]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004bce:	ed93 7b00 	vldr	d7, [r3]
 8004bd2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004bd6:	4b8e      	ldr	r3, [pc, #568]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004bd8:	ed93 5b00 	vldr	d5, [r3]
 8004bdc:	4b8d      	ldr	r3, [pc, #564]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004bde:	ed93 7b00 	vldr	d7, [r3]
 8004be2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004be6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004bea:	4b8b      	ldr	r3, [pc, #556]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004bec:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vy - Vx + (W * coeffab);
 8004bf0:	4b85      	ldr	r3, [pc, #532]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004bf2:	ed93 6b00 	vldr	d6, [r3]
 8004bf6:	4b85      	ldr	r3, [pc, #532]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004bf8:	ed93 7b00 	vldr	d7, [r3]
 8004bfc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004c00:	4b83      	ldr	r3, [pc, #524]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004c02:	ed93 5b00 	vldr	d5, [r3]
 8004c06:	4b83      	ldr	r3, [pc, #524]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004c08:	ed93 7b00 	vldr	d7, [r3]
 8004c0c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004c10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c14:	4b80      	ldr	r3, [pc, #512]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004c16:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(&htim23);
 8004c1a:	4b80      	ldr	r3, [pc, #512]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	b21a      	sxth	r2, r3
 8004c22:	4b7d      	ldr	r3, [pc, #500]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004c24:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim4) * -1;
 8004c26:	4b7e      	ldr	r3, [pc, #504]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	425b      	negs	r3, r3
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	b21a      	sxth	r2, r3
 8004c34:	4b78      	ldr	r3, [pc, #480]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004c36:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim24);
 8004c3a:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	b21a      	sxth	r2, r3
 8004c42:	4b75      	ldr	r3, [pc, #468]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004c44:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim3);
 8004c48:	4b77      	ldr	r3, [pc, #476]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	b21a      	sxth	r2, r3
 8004c50:	4b71      	ldr	r3, [pc, #452]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004c52:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(&htim24, 0);
 8004c56:	4b73      	ldr	r3, [pc, #460]	; (8004e24 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 8004c5e:	4b6f      	ldr	r3, [pc, #444]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2200      	movs	r2, #0
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 8004c66:	4b70      	ldr	r3, [pc, #448]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 8004c6e:	4b6c      	ldr	r3, [pc, #432]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24

		for( int i = 0; i < 4; i ++){
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	dc06      	bgt.n	8004c8e <HAL_TIM_PeriodElapsedCallback+0x142>
			pidCtrl(i);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7fb fcfd 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e7f5      	b.n	8004c7a <HAL_TIM_PeriodElapsedCallback+0x12e>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, Kpid[0].pulse);
 8004c8e:	4b62      	ldr	r3, [pc, #392]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004c90:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8004c94:	4b65      	ldr	r3, [pc, #404]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004c9c:	ee17 2a90 	vmov	r2, s15
 8004ca0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, Kpid[1].pulse);
 8004ca2:	4b5d      	ldr	r3, [pc, #372]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004ca4:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004ca8:	4b60      	ldr	r3, [pc, #384]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004cb0:	ee17 2a90 	vmov	r2, s15
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[2].pulse);
 8004cb6:	4b58      	ldr	r3, [pc, #352]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004cb8:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8004cbc:	4b5c      	ldr	r3, [pc, #368]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004cc4:	ee17 2a90 	vmov	r2, s15
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[3].pulse);
 8004cca:	4b53      	ldr	r3, [pc, #332]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004ccc:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8004cd0:	4b57      	ldr	r3, [pc, #348]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004cd8:	ee17 2a90 	vmov	r2, s15
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ce4:	4853      	ldr	r0, [pc, #332]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004ce6:	f003 fdd9 	bl	800889c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8004cea:	2200      	movs	r2, #0
 8004cec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cf0:	4850      	ldr	r0, [pc, #320]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004cf2:	f003 fdd3 	bl	800889c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cfc:	484e      	ldr	r0, [pc, #312]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004cfe:	f003 fdcd 	bl	800889c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8004d02:	2200      	movs	r2, #0
 8004d04:	2140      	movs	r1, #64	; 0x40
 8004d06:	484c      	ldr	r0, [pc, #304]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004d08:	f003 fdc8 	bl	800889c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d12:	4849      	ldr	r0, [pc, #292]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004d14:	f003 fdc2 	bl	800889c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d1e:	4846      	ldr	r0, [pc, #280]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004d20:	f003 fdbc 	bl	800889c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8004d24:	2200      	movs	r2, #0
 8004d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d2a:	4843      	ldr	r0, [pc, #268]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004d2c:	f003 fdb6 	bl	800889c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8004d30:	2200      	movs	r2, #0
 8004d32:	2180      	movs	r1, #128	; 0x80
 8004d34:	4840      	ldr	r0, [pc, #256]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004d36:	f003 fdb1 	bl	800889c <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004d3a:	4b37      	ldr	r3, [pc, #220]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d3c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004d40:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d48:	dd06      	ble.n	8004d58 <HAL_TIM_PeriodElapsedCallback+0x20c>
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d50:	4838      	ldr	r0, [pc, #224]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004d52:	f003 fda3 	bl	800889c <HAL_GPIO_WritePin>
 8004d56:	e00d      	b.n	8004d74 <HAL_TIM_PeriodElapsedCallback+0x228>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004d58:	4b2f      	ldr	r3, [pc, #188]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d5a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004d5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	d505      	bpl.n	8004d74 <HAL_TIM_PeriodElapsedCallback+0x228>
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d6e:	4831      	ldr	r0, [pc, #196]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004d70:	f003 fd94 	bl	800889c <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8004d74:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d76:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004d7a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d82:	dd06      	ble.n	8004d92 <HAL_TIM_PeriodElapsedCallback+0x246>
 8004d84:	2201      	movs	r2, #1
 8004d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d8a:	482b      	ldr	r0, [pc, #172]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004d8c:	f003 fd86 	bl	800889c <HAL_GPIO_WritePin>
 8004d90:	e00c      	b.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x260>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8004d92:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d94:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004d98:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da0:	d504      	bpl.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x260>
 8004da2:	2201      	movs	r2, #1
 8004da4:	2140      	movs	r1, #64	; 0x40
 8004da6:	4824      	ldr	r0, [pc, #144]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004da8:	f003 fd78 	bl	800889c <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8004dac:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004dae:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8004db2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dba:	dd06      	ble.n	8004dca <HAL_TIM_PeriodElapsedCallback+0x27e>
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dc2:	481d      	ldr	r0, [pc, #116]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004dc4:	f003 fd6a 	bl	800889c <HAL_GPIO_WritePin>
 8004dc8:	e00d      	b.n	8004de6 <HAL_TIM_PeriodElapsedCallback+0x29a>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8004dca:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004dcc:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8004dd0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd8:	d505      	bpl.n	8004de6 <HAL_TIM_PeriodElapsedCallback+0x29a>
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004de0:	4815      	ldr	r0, [pc, #84]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004de2:	f003 fd5b 	bl	800889c <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004de8:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8004dec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df4:	dd22      	ble.n	8004e3c <HAL_TIM_PeriodElapsedCallback+0x2f0>
 8004df6:	2201      	movs	r2, #1
 8004df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dfc:	480e      	ldr	r0, [pc, #56]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004dfe:	f003 fd4d 	bl	800889c <HAL_GPIO_WritePin>
 8004e02:	e028      	b.n	8004e56 <HAL_TIM_PeriodElapsedCallback+0x30a>
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	24001b88 	.word	0x24001b88
 8004e0c:	24001b80 	.word	0x24001b80
 8004e10:	24001b90 	.word	0x24001b90
 8004e14:	240001c8 	.word	0x240001c8
 8004e18:	24000000 	.word	0x24000000
 8004e1c:	24000424 	.word	0x24000424
 8004e20:	240002f4 	.word	0x240002f4
 8004e24:	24000470 	.word	0x24000470
 8004e28:	240002a8 	.word	0x240002a8
 8004e2c:	2400038c 	.word	0x2400038c
 8004e30:	240003d8 	.word	0x240003d8
 8004e34:	58020400 	.word	0x58020400
 8004e38:	58021000 	.word	0x58021000
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8004e3c:	4b45      	ldr	r3, [pc, #276]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004e3e:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8004e42:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4a:	d504      	bpl.n	8004e56 <HAL_TIM_PeriodElapsedCallback+0x30a>
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2180      	movs	r1, #128	; 0x80
 8004e50:	4841      	ldr	r0, [pc, #260]	; (8004f58 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8004e52:	f003 fd23 	bl	800889c <HAL_GPIO_WritePin>

		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004e56:	4b3f      	ldr	r3, [pc, #252]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004e58:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004e5c:	4b3d      	ldr	r3, [pc, #244]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004e5e:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004e62:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ Kpid[2].insVel + Kpid[3].insVel );
 8004e66:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004e68:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004e6c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e70:	4b38      	ldr	r3, [pc, #224]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004e72:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004e76:	ee36 7b07 	vadd.f64	d7, d6, d7
		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004e7a:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004e7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e82:	4b36      	ldr	r3, [pc, #216]	; (8004f5c <HAL_TIM_PeriodElapsedCallback+0x410>)
 8004e84:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004e88:	4b32      	ldr	r3, [pc, #200]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004e8a:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004e8e:	4b31      	ldr	r3, [pc, #196]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004e90:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004e94:	ee36 6b47 	vsub.f64	d6, d6, d7
				+ Kpid[2].insVel - Kpid[3].insVel );
 8004e98:	4b2e      	ldr	r3, [pc, #184]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004e9a:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004e9e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004ea2:	4b2c      	ldr	r3, [pc, #176]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004ea4:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004ea8:	ee36 7b47 	vsub.f64	d7, d6, d7
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004eac:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004eb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004eb4:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8004eb6:	ed83 7b00 	vstr	d7, [r3]
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004eba:	4b26      	ldr	r3, [pc, #152]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004ebc:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004ec0:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004ec2:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004ec6:	ee36 6b47 	vsub.f64	d6, d6, d7
				- Kpid[2].insVel + Kpid[3].insVel ) / coeffab;
 8004eca:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004ecc:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004ed0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004ed4:	4b1f      	ldr	r3, [pc, #124]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004ed6:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004eda:	ee36 7b07 	vadd.f64	d7, d6, d7
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004ede:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004ee2:	ee27 5b06 	vmul.f64	d5, d7, d6
				- Kpid[2].insVel + Kpid[3].insVel ) / coeffab;
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8004ee8:	ed93 6b00 	vldr	d6, [r3]
 8004eec:	ee85 7b06 	vdiv.f64	d7, d5, d6
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8004ef2:	ed83 7b00 	vstr	d7, [r3]

		odom_update(vel_Car2World('x',rVx,rVy),vel_Car2World('y',rVx,rVy), rW);
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8004ef8:	ed93 7b00 	vldr	d7, [r3]
 8004efc:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <HAL_TIM_PeriodElapsedCallback+0x410>)
 8004efe:	ed93 6b00 	vldr	d6, [r3]
 8004f02:	eeb0 1b46 	vmov.f64	d1, d6
 8004f06:	eeb0 0b47 	vmov.f64	d0, d7
 8004f0a:	2078      	movs	r0, #120	; 0x78
 8004f0c:	f7ff f966 	bl	80041dc <vel_Car2World>
 8004f10:	eeb0 8b40 	vmov.f64	d8, d0
 8004f14:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8004f16:	ed93 7b00 	vldr	d7, [r3]
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_TIM_PeriodElapsedCallback+0x410>)
 8004f1c:	ed93 6b00 	vldr	d6, [r3]
 8004f20:	eeb0 1b46 	vmov.f64	d1, d6
 8004f24:	eeb0 0b47 	vmov.f64	d0, d7
 8004f28:	2079      	movs	r0, #121	; 0x79
 8004f2a:	f7ff f957 	bl	80041dc <vel_Car2World>
 8004f2e:	eeb0 6b40 	vmov.f64	d6, d0
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8004f34:	ed93 7b00 	vldr	d7, [r3]
 8004f38:	eeb0 2b47 	vmov.f64	d2, d7
 8004f3c:	eeb0 1b46 	vmov.f64	d1, d6
 8004f40:	eeb0 0b48 	vmov.f64	d0, d8
 8004f44:	f7ff f8d4 	bl	80040f0 <odom_update>
	}
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	ecbd 8b02 	vpop	{d8}
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	24000000 	.word	0x24000000
 8004f58:	58021000 	.word	0x58021000
 8004f5c:	24001ba0 	.word	0x24001ba0
 8004f60:	24001b98 	.word	0x24001b98
 8004f64:	240001c8 	.word	0x240001c8
 8004f68:	24001ba8 	.word	0x24001ba8

08004f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004f70:	f7ff fd74 	bl	8004a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f74:	480c      	ldr	r0, [pc, #48]	; (8004fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f76:	490d      	ldr	r1, [pc, #52]	; (8004fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f78:	4a0d      	ldr	r2, [pc, #52]	; (8004fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f7c:	e002      	b.n	8004f84 <LoopCopyDataInit>

08004f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f82:	3304      	adds	r3, #4

08004f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f88:	d3f9      	bcc.n	8004f7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f8c:	4c0a      	ldr	r4, [pc, #40]	; (8004fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f90:	e001      	b.n	8004f96 <LoopFillZerobss>

08004f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f94:	3204      	adds	r2, #4

08004f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f98:	d3fb      	bcc.n	8004f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f9a:	f00a fb75 	bl	800f688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f9e:	f7fb fd09 	bl	80009b4 <main>
  bx  lr
 8004fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fa4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004fa8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004fac:	24000240 	.word	0x24000240
  ldr r2, =_sidata
 8004fb0:	0800fefc 	.word	0x0800fefc
  ldr r2, =_sbss
 8004fb4:	24000240 	.word	0x24000240
  ldr r4, =_ebss
 8004fb8:	24001ca0 	.word	0x24001ca0

08004fbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fbc:	e7fe      	b.n	8004fbc <ADC3_IRQHandler>
	...

08004fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fc6:	2003      	movs	r0, #3
 8004fc8:	f000 f980 	bl	80052cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fcc:	f004 fa42 	bl	8009454 <HAL_RCC_GetSysClockFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <HAL_Init+0x68>)
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	4913      	ldr	r1, [pc, #76]	; (800502c <HAL_Init+0x6c>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fea:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <HAL_Init+0x68>)
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	4a0e      	ldr	r2, [pc, #56]	; (800502c <HAL_Init+0x6c>)
 8004ff4:	5cd3      	ldrb	r3, [r2, r3]
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	4a0b      	ldr	r2, [pc, #44]	; (8005030 <HAL_Init+0x70>)
 8005002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005004:	4a0b      	ldr	r2, [pc, #44]	; (8005034 <HAL_Init+0x74>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800500a:	200f      	movs	r0, #15
 800500c:	f000 f814 	bl	8005038 <HAL_InitTick>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e002      	b.n	8005020 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800501a:	f7ff f92f 	bl	800427c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	58024400 	.word	0x58024400
 800502c:	0800fcd0 	.word	0x0800fcd0
 8005030:	240001c4 	.word	0x240001c4
 8005034:	240001c0 	.word	0x240001c0

08005038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005040:	4b15      	ldr	r3, [pc, #84]	; (8005098 <HAL_InitTick+0x60>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e021      	b.n	8005090 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800504c:	4b13      	ldr	r3, [pc, #76]	; (800509c <HAL_InitTick+0x64>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <HAL_InitTick+0x60>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	4619      	mov	r1, r3
 8005056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800505a:	fbb3 f3f1 	udiv	r3, r3, r1
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	4618      	mov	r0, r3
 8005064:	f000 f973 	bl	800534e <HAL_SYSTICK_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e00e      	b.n	8005090 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b0f      	cmp	r3, #15
 8005076:	d80a      	bhi.n	800508e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005078:	2200      	movs	r2, #0
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	f000 f92f 	bl	80052e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005084:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <HAL_InitTick+0x68>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e000      	b.n	8005090 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	240001d4 	.word	0x240001d4
 800509c:	240001c0 	.word	0x240001c0
 80050a0:	240001d0 	.word	0x240001d0

080050a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050a8:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <HAL_IncTick+0x20>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_IncTick+0x24>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4413      	add	r3, r2
 80050b4:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <HAL_IncTick+0x24>)
 80050b6:	6013      	str	r3, [r2, #0]
}
 80050b8:	bf00      	nop
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	240001d4 	.word	0x240001d4
 80050c8:	24001c8c 	.word	0x24001c8c

080050cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return uwTick;
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <HAL_GetTick+0x14>)
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	24001c8c 	.word	0x24001c8c

080050e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <__NVIC_SetPriorityGrouping+0x40>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005100:	4013      	ands	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <__NVIC_SetPriorityGrouping+0x44>)
 800510e:	4313      	orrs	r3, r2
 8005110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005112:	4a04      	ldr	r2, [pc, #16]	; (8005124 <__NVIC_SetPriorityGrouping+0x40>)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	60d3      	str	r3, [r2, #12]
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	e000ed00 	.word	0xe000ed00
 8005128:	05fa0000 	.word	0x05fa0000

0800512c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <__NVIC_GetPriorityGrouping+0x18>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	f003 0307 	and.w	r3, r3, #7
}
 800513a:	4618      	mov	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	e000ed00 	.word	0xe000ed00

08005148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	db0b      	blt.n	8005172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	f003 021f 	and.w	r2, r3, #31
 8005160:	4907      	ldr	r1, [pc, #28]	; (8005180 <__NVIC_EnableIRQ+0x38>)
 8005162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	2001      	movs	r0, #1
 800516a:	fa00 f202 	lsl.w	r2, r0, r2
 800516e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	e000e100 	.word	0xe000e100

08005184 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800518e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005192:	2b00      	cmp	r3, #0
 8005194:	db12      	blt.n	80051bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	f003 021f 	and.w	r2, r3, #31
 800519c:	490a      	ldr	r1, [pc, #40]	; (80051c8 <__NVIC_DisableIRQ+0x44>)
 800519e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	2001      	movs	r0, #1
 80051a6:	fa00 f202 	lsl.w	r2, r0, r2
 80051aa:	3320      	adds	r3, #32
 80051ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80051b0:	f3bf 8f4f 	dsb	sy
}
 80051b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051b6:	f3bf 8f6f 	isb	sy
}
 80051ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	e000e100 	.word	0xe000e100

080051cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	6039      	str	r1, [r7, #0]
 80051d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	db0a      	blt.n	80051f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	490c      	ldr	r1, [pc, #48]	; (8005218 <__NVIC_SetPriority+0x4c>)
 80051e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ea:	0112      	lsls	r2, r2, #4
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	440b      	add	r3, r1
 80051f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051f4:	e00a      	b.n	800520c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	4908      	ldr	r1, [pc, #32]	; (800521c <__NVIC_SetPriority+0x50>)
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	3b04      	subs	r3, #4
 8005204:	0112      	lsls	r2, r2, #4
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	440b      	add	r3, r1
 800520a:	761a      	strb	r2, [r3, #24]
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	e000e100 	.word	0xe000e100
 800521c:	e000ed00 	.word	0xe000ed00

08005220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	; 0x24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f1c3 0307 	rsb	r3, r3, #7
 800523a:	2b04      	cmp	r3, #4
 800523c:	bf28      	it	cs
 800523e:	2304      	movcs	r3, #4
 8005240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3304      	adds	r3, #4
 8005246:	2b06      	cmp	r3, #6
 8005248:	d902      	bls.n	8005250 <NVIC_EncodePriority+0x30>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3b03      	subs	r3, #3
 800524e:	e000      	b.n	8005252 <NVIC_EncodePriority+0x32>
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005254:	f04f 32ff 	mov.w	r2, #4294967295
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43da      	mvns	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	401a      	ands	r2, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005268:	f04f 31ff 	mov.w	r1, #4294967295
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	fa01 f303 	lsl.w	r3, r1, r3
 8005272:	43d9      	mvns	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005278:	4313      	orrs	r3, r2
         );
}
 800527a:	4618      	mov	r0, r3
 800527c:	3724      	adds	r7, #36	; 0x24
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3b01      	subs	r3, #1
 8005294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005298:	d301      	bcc.n	800529e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800529a:	2301      	movs	r3, #1
 800529c:	e00f      	b.n	80052be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <SysTick_Config+0x40>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052a6:	210f      	movs	r1, #15
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	f7ff ff8e 	bl	80051cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <SysTick_Config+0x40>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052b6:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <SysTick_Config+0x40>)
 80052b8:	2207      	movs	r2, #7
 80052ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	e000e010 	.word	0xe000e010

080052cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff ff05 	bl	80050e4 <__NVIC_SetPriorityGrouping>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	4603      	mov	r3, r0
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052f0:	f7ff ff1c 	bl	800512c <__NVIC_GetPriorityGrouping>
 80052f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	6978      	ldr	r0, [r7, #20]
 80052fc:	f7ff ff90 	bl	8005220 <NVIC_EncodePriority>
 8005300:	4602      	mov	r2, r0
 8005302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff ff5f 	bl	80051cc <__NVIC_SetPriority>
}
 800530e:	bf00      	nop
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	4603      	mov	r3, r0
 800531e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff ff0f 	bl	8005148 <__NVIC_EnableIRQ>
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
 8005338:	4603      	mov	r3, r0
 800533a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800533c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff ff1f 	bl	8005184 <__NVIC_DisableIRQ>
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff ff96 	bl	8005288 <SysTick_Config>
 800535c:	4603      	mov	r3, r0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005370:	f7ff feac 	bl	80050cc <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e314      	b.n	80059aa <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a66      	ldr	r2, [pc, #408]	; (8005520 <HAL_DMA_Init+0x1b8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d04a      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a65      	ldr	r2, [pc, #404]	; (8005524 <HAL_DMA_Init+0x1bc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d045      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a63      	ldr	r2, [pc, #396]	; (8005528 <HAL_DMA_Init+0x1c0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d040      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a62      	ldr	r2, [pc, #392]	; (800552c <HAL_DMA_Init+0x1c4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d03b      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a60      	ldr	r2, [pc, #384]	; (8005530 <HAL_DMA_Init+0x1c8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d036      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a5f      	ldr	r2, [pc, #380]	; (8005534 <HAL_DMA_Init+0x1cc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d031      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a5d      	ldr	r2, [pc, #372]	; (8005538 <HAL_DMA_Init+0x1d0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02c      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a5c      	ldr	r2, [pc, #368]	; (800553c <HAL_DMA_Init+0x1d4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d027      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a5a      	ldr	r2, [pc, #360]	; (8005540 <HAL_DMA_Init+0x1d8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d022      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a59      	ldr	r2, [pc, #356]	; (8005544 <HAL_DMA_Init+0x1dc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d01d      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a57      	ldr	r2, [pc, #348]	; (8005548 <HAL_DMA_Init+0x1e0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d018      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a56      	ldr	r2, [pc, #344]	; (800554c <HAL_DMA_Init+0x1e4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a54      	ldr	r2, [pc, #336]	; (8005550 <HAL_DMA_Init+0x1e8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00e      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a53      	ldr	r2, [pc, #332]	; (8005554 <HAL_DMA_Init+0x1ec>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a51      	ldr	r2, [pc, #324]	; (8005558 <HAL_DMA_Init+0x1f0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_DMA_Init+0xb8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a50      	ldr	r2, [pc, #320]	; (800555c <HAL_DMA_Init+0x1f4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d101      	bne.n	8005424 <HAL_DMA_Init+0xbc>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <HAL_DMA_Init+0xbe>
 8005424:	2300      	movs	r3, #0
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 813c 	beq.w	80056a4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a37      	ldr	r2, [pc, #220]	; (8005520 <HAL_DMA_Init+0x1b8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d04a      	beq.n	80054dc <HAL_DMA_Init+0x174>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a36      	ldr	r2, [pc, #216]	; (8005524 <HAL_DMA_Init+0x1bc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d045      	beq.n	80054dc <HAL_DMA_Init+0x174>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a34      	ldr	r2, [pc, #208]	; (8005528 <HAL_DMA_Init+0x1c0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d040      	beq.n	80054dc <HAL_DMA_Init+0x174>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a33      	ldr	r2, [pc, #204]	; (800552c <HAL_DMA_Init+0x1c4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d03b      	beq.n	80054dc <HAL_DMA_Init+0x174>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a31      	ldr	r2, [pc, #196]	; (8005530 <HAL_DMA_Init+0x1c8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d036      	beq.n	80054dc <HAL_DMA_Init+0x174>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a30      	ldr	r2, [pc, #192]	; (8005534 <HAL_DMA_Init+0x1cc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d031      	beq.n	80054dc <HAL_DMA_Init+0x174>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2e      	ldr	r2, [pc, #184]	; (8005538 <HAL_DMA_Init+0x1d0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d02c      	beq.n	80054dc <HAL_DMA_Init+0x174>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a2d      	ldr	r2, [pc, #180]	; (800553c <HAL_DMA_Init+0x1d4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d027      	beq.n	80054dc <HAL_DMA_Init+0x174>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <HAL_DMA_Init+0x1d8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d022      	beq.n	80054dc <HAL_DMA_Init+0x174>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <HAL_DMA_Init+0x1dc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d01d      	beq.n	80054dc <HAL_DMA_Init+0x174>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a28      	ldr	r2, [pc, #160]	; (8005548 <HAL_DMA_Init+0x1e0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d018      	beq.n	80054dc <HAL_DMA_Init+0x174>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a27      	ldr	r2, [pc, #156]	; (800554c <HAL_DMA_Init+0x1e4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <HAL_DMA_Init+0x174>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <HAL_DMA_Init+0x1e8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00e      	beq.n	80054dc <HAL_DMA_Init+0x174>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a24      	ldr	r2, [pc, #144]	; (8005554 <HAL_DMA_Init+0x1ec>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d009      	beq.n	80054dc <HAL_DMA_Init+0x174>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <HAL_DMA_Init+0x1f0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d004      	beq.n	80054dc <HAL_DMA_Init+0x174>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	; (800555c <HAL_DMA_Init+0x1f4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <HAL_DMA_Init+0x186>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e007      	b.n	80054fe <HAL_DMA_Init+0x196>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054fe:	e02f      	b.n	8005560 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005500:	f7ff fde4 	bl	80050cc <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b05      	cmp	r3, #5
 800550c:	d928      	bls.n	8005560 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2203      	movs	r2, #3
 8005518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e244      	b.n	80059aa <HAL_DMA_Init+0x642>
 8005520:	40020010 	.word	0x40020010
 8005524:	40020028 	.word	0x40020028
 8005528:	40020040 	.word	0x40020040
 800552c:	40020058 	.word	0x40020058
 8005530:	40020070 	.word	0x40020070
 8005534:	40020088 	.word	0x40020088
 8005538:	400200a0 	.word	0x400200a0
 800553c:	400200b8 	.word	0x400200b8
 8005540:	40020410 	.word	0x40020410
 8005544:	40020428 	.word	0x40020428
 8005548:	40020440 	.word	0x40020440
 800554c:	40020458 	.word	0x40020458
 8005550:	40020470 	.word	0x40020470
 8005554:	40020488 	.word	0x40020488
 8005558:	400204a0 	.word	0x400204a0
 800555c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1c8      	bne.n	8005500 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4b84      	ldr	r3, [pc, #528]	; (800578c <HAL_DMA_Init+0x424>)
 800557a:	4013      	ands	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005586:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005592:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800559e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d107      	bne.n	80055c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	4313      	orrs	r3, r2
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b28      	cmp	r3, #40	; 0x28
 80055ca:	d903      	bls.n	80055d4 <HAL_DMA_Init+0x26c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b2e      	cmp	r3, #46	; 0x2e
 80055d2:	d91f      	bls.n	8005614 <HAL_DMA_Init+0x2ac>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b3e      	cmp	r3, #62	; 0x3e
 80055da:	d903      	bls.n	80055e4 <HAL_DMA_Init+0x27c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b42      	cmp	r3, #66	; 0x42
 80055e2:	d917      	bls.n	8005614 <HAL_DMA_Init+0x2ac>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b46      	cmp	r3, #70	; 0x46
 80055ea:	d903      	bls.n	80055f4 <HAL_DMA_Init+0x28c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b48      	cmp	r3, #72	; 0x48
 80055f2:	d90f      	bls.n	8005614 <HAL_DMA_Init+0x2ac>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b4e      	cmp	r3, #78	; 0x4e
 80055fa:	d903      	bls.n	8005604 <HAL_DMA_Init+0x29c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b52      	cmp	r3, #82	; 0x52
 8005602:	d907      	bls.n	8005614 <HAL_DMA_Init+0x2ac>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b73      	cmp	r3, #115	; 0x73
 800560a:	d905      	bls.n	8005618 <HAL_DMA_Init+0x2b0>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b77      	cmp	r3, #119	; 0x77
 8005612:	d801      	bhi.n	8005618 <HAL_DMA_Init+0x2b0>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <HAL_DMA_Init+0x2b2>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005624:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 0307 	bic.w	r3, r3, #7
 800563c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b04      	cmp	r3, #4
 800564e:	d117      	bne.n	8005680 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00e      	beq.n	8005680 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f002 fce6 	bl	8008034 <DMA_CheckFifoParam>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2240      	movs	r2, #64	; 0x40
 8005672:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e194      	b.n	80059aa <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f002 fc21 	bl	8007ed0 <DMA_CalcBaseAndBitshift>
 800568e:	4603      	mov	r3, r0
 8005690:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	223f      	movs	r2, #63	; 0x3f
 800569c:	409a      	lsls	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	609a      	str	r2, [r3, #8]
 80056a2:	e0ca      	b.n	800583a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a39      	ldr	r2, [pc, #228]	; (8005790 <HAL_DMA_Init+0x428>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d022      	beq.n	80056f4 <HAL_DMA_Init+0x38c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a38      	ldr	r2, [pc, #224]	; (8005794 <HAL_DMA_Init+0x42c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d01d      	beq.n	80056f4 <HAL_DMA_Init+0x38c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a36      	ldr	r2, [pc, #216]	; (8005798 <HAL_DMA_Init+0x430>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d018      	beq.n	80056f4 <HAL_DMA_Init+0x38c>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a35      	ldr	r2, [pc, #212]	; (800579c <HAL_DMA_Init+0x434>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <HAL_DMA_Init+0x38c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a33      	ldr	r2, [pc, #204]	; (80057a0 <HAL_DMA_Init+0x438>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <HAL_DMA_Init+0x38c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a32      	ldr	r2, [pc, #200]	; (80057a4 <HAL_DMA_Init+0x43c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d009      	beq.n	80056f4 <HAL_DMA_Init+0x38c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a30      	ldr	r2, [pc, #192]	; (80057a8 <HAL_DMA_Init+0x440>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_DMA_Init+0x38c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2f      	ldr	r2, [pc, #188]	; (80057ac <HAL_DMA_Init+0x444>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d101      	bne.n	80056f8 <HAL_DMA_Init+0x390>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_DMA_Init+0x392>
 80056f8:	2300      	movs	r3, #0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 8094 	beq.w	8005828 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a22      	ldr	r2, [pc, #136]	; (8005790 <HAL_DMA_Init+0x428>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d021      	beq.n	800574e <HAL_DMA_Init+0x3e6>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a21      	ldr	r2, [pc, #132]	; (8005794 <HAL_DMA_Init+0x42c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d01c      	beq.n	800574e <HAL_DMA_Init+0x3e6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1f      	ldr	r2, [pc, #124]	; (8005798 <HAL_DMA_Init+0x430>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d017      	beq.n	800574e <HAL_DMA_Init+0x3e6>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1e      	ldr	r2, [pc, #120]	; (800579c <HAL_DMA_Init+0x434>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d012      	beq.n	800574e <HAL_DMA_Init+0x3e6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <HAL_DMA_Init+0x438>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00d      	beq.n	800574e <HAL_DMA_Init+0x3e6>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <HAL_DMA_Init+0x43c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d008      	beq.n	800574e <HAL_DMA_Init+0x3e6>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a19      	ldr	r2, [pc, #100]	; (80057a8 <HAL_DMA_Init+0x440>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <HAL_DMA_Init+0x3e6>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a18      	ldr	r2, [pc, #96]	; (80057ac <HAL_DMA_Init+0x444>)
 800574c:	4293      	cmp	r3, r2
 800574e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <HAL_DMA_Init+0x448>)
 800576c:	4013      	ands	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d01d      	beq.n	80057b4 <HAL_DMA_Init+0x44c>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d102      	bne.n	8005786 <HAL_DMA_Init+0x41e>
 8005780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005784:	e017      	b.n	80057b6 <HAL_DMA_Init+0x44e>
 8005786:	2300      	movs	r3, #0
 8005788:	e015      	b.n	80057b6 <HAL_DMA_Init+0x44e>
 800578a:	bf00      	nop
 800578c:	fe10803f 	.word	0xfe10803f
 8005790:	58025408 	.word	0x58025408
 8005794:	5802541c 	.word	0x5802541c
 8005798:	58025430 	.word	0x58025430
 800579c:	58025444 	.word	0x58025444
 80057a0:	58025458 	.word	0x58025458
 80057a4:	5802546c 	.word	0x5802546c
 80057a8:	58025480 	.word	0x58025480
 80057ac:	58025494 	.word	0x58025494
 80057b0:	fffe000f 	.word	0xfffe000f
 80057b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68d2      	ldr	r2, [r2, #12]
 80057ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b6e      	ldr	r3, [pc, #440]	; (80059b4 <HAL_DMA_Init+0x64c>)
 80057fc:	4413      	add	r3, r2
 80057fe:	4a6e      	ldr	r2, [pc, #440]	; (80059b8 <HAL_DMA_Init+0x650>)
 8005800:	fba2 2303 	umull	r2, r3, r2, r3
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	009a      	lsls	r2, r3, #2
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f002 fb5f 	bl	8007ed0 <DMA_CalcBaseAndBitshift>
 8005812:	4603      	mov	r3, r0
 8005814:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	2201      	movs	r2, #1
 8005820:	409a      	lsls	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	605a      	str	r2, [r3, #4]
 8005826:	e008      	b.n	800583a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2240      	movs	r2, #64	; 0x40
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2203      	movs	r2, #3
 8005832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e0b7      	b.n	80059aa <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a5f      	ldr	r2, [pc, #380]	; (80059bc <HAL_DMA_Init+0x654>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d072      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a5d      	ldr	r2, [pc, #372]	; (80059c0 <HAL_DMA_Init+0x658>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d06d      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a5c      	ldr	r2, [pc, #368]	; (80059c4 <HAL_DMA_Init+0x65c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d068      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a5a      	ldr	r2, [pc, #360]	; (80059c8 <HAL_DMA_Init+0x660>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d063      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a59      	ldr	r2, [pc, #356]	; (80059cc <HAL_DMA_Init+0x664>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d05e      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a57      	ldr	r2, [pc, #348]	; (80059d0 <HAL_DMA_Init+0x668>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d059      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a56      	ldr	r2, [pc, #344]	; (80059d4 <HAL_DMA_Init+0x66c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d054      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a54      	ldr	r2, [pc, #336]	; (80059d8 <HAL_DMA_Init+0x670>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d04f      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a53      	ldr	r2, [pc, #332]	; (80059dc <HAL_DMA_Init+0x674>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d04a      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a51      	ldr	r2, [pc, #324]	; (80059e0 <HAL_DMA_Init+0x678>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d045      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a50      	ldr	r2, [pc, #320]	; (80059e4 <HAL_DMA_Init+0x67c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d040      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a4e      	ldr	r2, [pc, #312]	; (80059e8 <HAL_DMA_Init+0x680>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d03b      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a4d      	ldr	r2, [pc, #308]	; (80059ec <HAL_DMA_Init+0x684>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d036      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a4b      	ldr	r2, [pc, #300]	; (80059f0 <HAL_DMA_Init+0x688>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d031      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a4a      	ldr	r2, [pc, #296]	; (80059f4 <HAL_DMA_Init+0x68c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d02c      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a48      	ldr	r2, [pc, #288]	; (80059f8 <HAL_DMA_Init+0x690>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d027      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a47      	ldr	r2, [pc, #284]	; (80059fc <HAL_DMA_Init+0x694>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d022      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a45      	ldr	r2, [pc, #276]	; (8005a00 <HAL_DMA_Init+0x698>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d01d      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a44      	ldr	r2, [pc, #272]	; (8005a04 <HAL_DMA_Init+0x69c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d018      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a42      	ldr	r2, [pc, #264]	; (8005a08 <HAL_DMA_Init+0x6a0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a41      	ldr	r2, [pc, #260]	; (8005a0c <HAL_DMA_Init+0x6a4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00e      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a3f      	ldr	r2, [pc, #252]	; (8005a10 <HAL_DMA_Init+0x6a8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d009      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a3e      	ldr	r2, [pc, #248]	; (8005a14 <HAL_DMA_Init+0x6ac>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d004      	beq.n	800592a <HAL_DMA_Init+0x5c2>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a3c      	ldr	r2, [pc, #240]	; (8005a18 <HAL_DMA_Init+0x6b0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d101      	bne.n	800592e <HAL_DMA_Init+0x5c6>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <HAL_DMA_Init+0x5c8>
 800592e:	2300      	movs	r3, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d032      	beq.n	800599a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f002 fbf9 	bl	800812c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b80      	cmp	r3, #128	; 0x80
 8005940:	d102      	bne.n	8005948 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800595c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d010      	beq.n	8005988 <HAL_DMA_Init+0x620>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b08      	cmp	r3, #8
 800596c:	d80c      	bhi.n	8005988 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f002 fc76 	bl	8008260 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	e008      	b.n	800599a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	a7fdabf8 	.word	0xa7fdabf8
 80059b8:	cccccccd 	.word	0xcccccccd
 80059bc:	40020010 	.word	0x40020010
 80059c0:	40020028 	.word	0x40020028
 80059c4:	40020040 	.word	0x40020040
 80059c8:	40020058 	.word	0x40020058
 80059cc:	40020070 	.word	0x40020070
 80059d0:	40020088 	.word	0x40020088
 80059d4:	400200a0 	.word	0x400200a0
 80059d8:	400200b8 	.word	0x400200b8
 80059dc:	40020410 	.word	0x40020410
 80059e0:	40020428 	.word	0x40020428
 80059e4:	40020440 	.word	0x40020440
 80059e8:	40020458 	.word	0x40020458
 80059ec:	40020470 	.word	0x40020470
 80059f0:	40020488 	.word	0x40020488
 80059f4:	400204a0 	.word	0x400204a0
 80059f8:	400204b8 	.word	0x400204b8
 80059fc:	58025408 	.word	0x58025408
 8005a00:	5802541c 	.word	0x5802541c
 8005a04:	58025430 	.word	0x58025430
 8005a08:	58025444 	.word	0x58025444
 8005a0c:	58025458 	.word	0x58025458
 8005a10:	5802546c 	.word	0x5802546c
 8005a14:	58025480 	.word	0x58025480
 8005a18:	58025494 	.word	0x58025494

08005a1c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e1a8      	b.n	8005d80 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a82      	ldr	r2, [pc, #520]	; (8005c3c <HAL_DMA_DeInit+0x220>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d04a      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a80      	ldr	r2, [pc, #512]	; (8005c40 <HAL_DMA_DeInit+0x224>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d045      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a7f      	ldr	r2, [pc, #508]	; (8005c44 <HAL_DMA_DeInit+0x228>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d040      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a7d      	ldr	r2, [pc, #500]	; (8005c48 <HAL_DMA_DeInit+0x22c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d03b      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a7c      	ldr	r2, [pc, #496]	; (8005c4c <HAL_DMA_DeInit+0x230>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d036      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a7a      	ldr	r2, [pc, #488]	; (8005c50 <HAL_DMA_DeInit+0x234>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d031      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a79      	ldr	r2, [pc, #484]	; (8005c54 <HAL_DMA_DeInit+0x238>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d02c      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a77      	ldr	r2, [pc, #476]	; (8005c58 <HAL_DMA_DeInit+0x23c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d027      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a76      	ldr	r2, [pc, #472]	; (8005c5c <HAL_DMA_DeInit+0x240>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d022      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a74      	ldr	r2, [pc, #464]	; (8005c60 <HAL_DMA_DeInit+0x244>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01d      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a73      	ldr	r2, [pc, #460]	; (8005c64 <HAL_DMA_DeInit+0x248>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a71      	ldr	r2, [pc, #452]	; (8005c68 <HAL_DMA_DeInit+0x24c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a70      	ldr	r2, [pc, #448]	; (8005c6c <HAL_DMA_DeInit+0x250>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a6e      	ldr	r2, [pc, #440]	; (8005c70 <HAL_DMA_DeInit+0x254>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a6d      	ldr	r2, [pc, #436]	; (8005c74 <HAL_DMA_DeInit+0x258>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_DMA_DeInit+0xb2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a6b      	ldr	r2, [pc, #428]	; (8005c78 <HAL_DMA_DeInit+0x25c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d108      	bne.n	8005ae0 <HAL_DMA_DeInit+0xc4>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e007      	b.n	8005af0 <HAL_DMA_DeInit+0xd4>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a51      	ldr	r2, [pc, #324]	; (8005c3c <HAL_DMA_DeInit+0x220>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d04a      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a50      	ldr	r2, [pc, #320]	; (8005c40 <HAL_DMA_DeInit+0x224>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d045      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a4e      	ldr	r2, [pc, #312]	; (8005c44 <HAL_DMA_DeInit+0x228>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d040      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4d      	ldr	r2, [pc, #308]	; (8005c48 <HAL_DMA_DeInit+0x22c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d03b      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a4b      	ldr	r2, [pc, #300]	; (8005c4c <HAL_DMA_DeInit+0x230>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d036      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a4a      	ldr	r2, [pc, #296]	; (8005c50 <HAL_DMA_DeInit+0x234>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d031      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a48      	ldr	r2, [pc, #288]	; (8005c54 <HAL_DMA_DeInit+0x238>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d02c      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a47      	ldr	r2, [pc, #284]	; (8005c58 <HAL_DMA_DeInit+0x23c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d027      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a45      	ldr	r2, [pc, #276]	; (8005c5c <HAL_DMA_DeInit+0x240>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d022      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a44      	ldr	r2, [pc, #272]	; (8005c60 <HAL_DMA_DeInit+0x244>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d01d      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a42      	ldr	r2, [pc, #264]	; (8005c64 <HAL_DMA_DeInit+0x248>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d018      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a41      	ldr	r2, [pc, #260]	; (8005c68 <HAL_DMA_DeInit+0x24c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d013      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a3f      	ldr	r2, [pc, #252]	; (8005c6c <HAL_DMA_DeInit+0x250>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00e      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a3e      	ldr	r2, [pc, #248]	; (8005c70 <HAL_DMA_DeInit+0x254>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d009      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a3c      	ldr	r2, [pc, #240]	; (8005c74 <HAL_DMA_DeInit+0x258>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <HAL_DMA_DeInit+0x174>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a3b      	ldr	r2, [pc, #236]	; (8005c78 <HAL_DMA_DeInit+0x25c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d101      	bne.n	8005b94 <HAL_DMA_DeInit+0x178>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <HAL_DMA_DeInit+0x17a>
 8005b94:	2300      	movs	r3, #0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d025      	beq.n	8005be6 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2221      	movs	r2, #33	; 0x21
 8005bc8:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f002 f980 	bl	8007ed0 <DMA_CalcBaseAndBitshift>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd8:	f003 031f 	and.w	r3, r3, #31
 8005bdc:	223f      	movs	r2, #63	; 0x3f
 8005bde:	409a      	lsls	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	609a      	str	r2, [r3, #8]
 8005be4:	e081      	b.n	8005cea <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a24      	ldr	r2, [pc, #144]	; (8005c7c <HAL_DMA_DeInit+0x260>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d022      	beq.n	8005c36 <HAL_DMA_DeInit+0x21a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a22      	ldr	r2, [pc, #136]	; (8005c80 <HAL_DMA_DeInit+0x264>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <HAL_DMA_DeInit+0x21a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a21      	ldr	r2, [pc, #132]	; (8005c84 <HAL_DMA_DeInit+0x268>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d018      	beq.n	8005c36 <HAL_DMA_DeInit+0x21a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1f      	ldr	r2, [pc, #124]	; (8005c88 <HAL_DMA_DeInit+0x26c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_DMA_DeInit+0x21a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1e      	ldr	r2, [pc, #120]	; (8005c8c <HAL_DMA_DeInit+0x270>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00e      	beq.n	8005c36 <HAL_DMA_DeInit+0x21a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1c      	ldr	r2, [pc, #112]	; (8005c90 <HAL_DMA_DeInit+0x274>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <HAL_DMA_DeInit+0x21a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <HAL_DMA_DeInit+0x278>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d004      	beq.n	8005c36 <HAL_DMA_DeInit+0x21a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a19      	ldr	r2, [pc, #100]	; (8005c98 <HAL_DMA_DeInit+0x27c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d132      	bne.n	8005c9c <HAL_DMA_DeInit+0x280>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e031      	b.n	8005c9e <HAL_DMA_DeInit+0x282>
 8005c3a:	bf00      	nop
 8005c3c:	40020010 	.word	0x40020010
 8005c40:	40020028 	.word	0x40020028
 8005c44:	40020040 	.word	0x40020040
 8005c48:	40020058 	.word	0x40020058
 8005c4c:	40020070 	.word	0x40020070
 8005c50:	40020088 	.word	0x40020088
 8005c54:	400200a0 	.word	0x400200a0
 8005c58:	400200b8 	.word	0x400200b8
 8005c5c:	40020410 	.word	0x40020410
 8005c60:	40020428 	.word	0x40020428
 8005c64:	40020440 	.word	0x40020440
 8005c68:	40020458 	.word	0x40020458
 8005c6c:	40020470 	.word	0x40020470
 8005c70:	40020488 	.word	0x40020488
 8005c74:	400204a0 	.word	0x400204a0
 8005c78:	400204b8 	.word	0x400204b8
 8005c7c:	58025408 	.word	0x58025408
 8005c80:	5802541c 	.word	0x5802541c
 8005c84:	58025430 	.word	0x58025430
 8005c88:	58025444 	.word	0x58025444
 8005c8c:	58025458 	.word	0x58025458
 8005c90:	5802546c 	.word	0x5802546c
 8005c94:	58025480 	.word	0x58025480
 8005c98:	58025494 	.word	0x58025494
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d021      	beq.n	8005ce6 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f002 f900 	bl	8007ed0 <DMA_CalcBaseAndBitshift>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	2201      	movs	r2, #1
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	605a      	str	r2, [r3, #4]
 8005ce4:	e001      	b.n	8005cea <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e04a      	b.n	8005d80 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f002 fa1e 	bl	800812c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d08:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00f      	beq.n	8005d32 <HAL_DMA_DeInit+0x316>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d80b      	bhi.n	8005d32 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f002 faa0 	bl	8008260 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d30:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e226      	b.n	80061f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_DMA_Start_IT+0x2a>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e21f      	b.n	80061f2 <HAL_DMA_Start_IT+0x46a>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	f040 820a 	bne.w	80061dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a68      	ldr	r2, [pc, #416]	; (8005f7c <HAL_DMA_Start_IT+0x1f4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d04a      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a66      	ldr	r2, [pc, #408]	; (8005f80 <HAL_DMA_Start_IT+0x1f8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d045      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a65      	ldr	r2, [pc, #404]	; (8005f84 <HAL_DMA_Start_IT+0x1fc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d040      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a63      	ldr	r2, [pc, #396]	; (8005f88 <HAL_DMA_Start_IT+0x200>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d03b      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a62      	ldr	r2, [pc, #392]	; (8005f8c <HAL_DMA_Start_IT+0x204>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d036      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a60      	ldr	r2, [pc, #384]	; (8005f90 <HAL_DMA_Start_IT+0x208>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d031      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a5f      	ldr	r2, [pc, #380]	; (8005f94 <HAL_DMA_Start_IT+0x20c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d02c      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a5d      	ldr	r2, [pc, #372]	; (8005f98 <HAL_DMA_Start_IT+0x210>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d027      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a5c      	ldr	r2, [pc, #368]	; (8005f9c <HAL_DMA_Start_IT+0x214>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d022      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a5a      	ldr	r2, [pc, #360]	; (8005fa0 <HAL_DMA_Start_IT+0x218>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d01d      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a59      	ldr	r2, [pc, #356]	; (8005fa4 <HAL_DMA_Start_IT+0x21c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d018      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a57      	ldr	r2, [pc, #348]	; (8005fa8 <HAL_DMA_Start_IT+0x220>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a56      	ldr	r2, [pc, #344]	; (8005fac <HAL_DMA_Start_IT+0x224>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00e      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a54      	ldr	r2, [pc, #336]	; (8005fb0 <HAL_DMA_Start_IT+0x228>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d009      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a53      	ldr	r2, [pc, #332]	; (8005fb4 <HAL_DMA_Start_IT+0x22c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d004      	beq.n	8005e76 <HAL_DMA_Start_IT+0xee>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a51      	ldr	r2, [pc, #324]	; (8005fb8 <HAL_DMA_Start_IT+0x230>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d108      	bne.n	8005e88 <HAL_DMA_Start_IT+0x100>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0201 	bic.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e007      	b.n	8005e98 <HAL_DMA_Start_IT+0x110>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f001 fe6a 	bl	8007b78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a34      	ldr	r2, [pc, #208]	; (8005f7c <HAL_DMA_Start_IT+0x1f4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d04a      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a33      	ldr	r2, [pc, #204]	; (8005f80 <HAL_DMA_Start_IT+0x1f8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d045      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a31      	ldr	r2, [pc, #196]	; (8005f84 <HAL_DMA_Start_IT+0x1fc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d040      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a30      	ldr	r2, [pc, #192]	; (8005f88 <HAL_DMA_Start_IT+0x200>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d03b      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a2e      	ldr	r2, [pc, #184]	; (8005f8c <HAL_DMA_Start_IT+0x204>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d036      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a2d      	ldr	r2, [pc, #180]	; (8005f90 <HAL_DMA_Start_IT+0x208>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d031      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a2b      	ldr	r2, [pc, #172]	; (8005f94 <HAL_DMA_Start_IT+0x20c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d02c      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a2a      	ldr	r2, [pc, #168]	; (8005f98 <HAL_DMA_Start_IT+0x210>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d027      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a28      	ldr	r2, [pc, #160]	; (8005f9c <HAL_DMA_Start_IT+0x214>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d022      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a27      	ldr	r2, [pc, #156]	; (8005fa0 <HAL_DMA_Start_IT+0x218>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d01d      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a25      	ldr	r2, [pc, #148]	; (8005fa4 <HAL_DMA_Start_IT+0x21c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d018      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a24      	ldr	r2, [pc, #144]	; (8005fa8 <HAL_DMA_Start_IT+0x220>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a22      	ldr	r2, [pc, #136]	; (8005fac <HAL_DMA_Start_IT+0x224>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00e      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a21      	ldr	r2, [pc, #132]	; (8005fb0 <HAL_DMA_Start_IT+0x228>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <HAL_DMA_Start_IT+0x22c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_DMA_Start_IT+0x1bc>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1e      	ldr	r2, [pc, #120]	; (8005fb8 <HAL_DMA_Start_IT+0x230>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d101      	bne.n	8005f48 <HAL_DMA_Start_IT+0x1c0>
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <HAL_DMA_Start_IT+0x1c2>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d036      	beq.n	8005fbc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f023 021e 	bic.w	r2, r3, #30
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0216 	orr.w	r2, r2, #22
 8005f60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03e      	beq.n	8005fe8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0208 	orr.w	r2, r2, #8
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e035      	b.n	8005fe8 <HAL_DMA_Start_IT+0x260>
 8005f7c:	40020010 	.word	0x40020010
 8005f80:	40020028 	.word	0x40020028
 8005f84:	40020040 	.word	0x40020040
 8005f88:	40020058 	.word	0x40020058
 8005f8c:	40020070 	.word	0x40020070
 8005f90:	40020088 	.word	0x40020088
 8005f94:	400200a0 	.word	0x400200a0
 8005f98:	400200b8 	.word	0x400200b8
 8005f9c:	40020410 	.word	0x40020410
 8005fa0:	40020428 	.word	0x40020428
 8005fa4:	40020440 	.word	0x40020440
 8005fa8:	40020458 	.word	0x40020458
 8005fac:	40020470 	.word	0x40020470
 8005fb0:	40020488 	.word	0x40020488
 8005fb4:	400204a0 	.word	0x400204a0
 8005fb8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f023 020e 	bic.w	r2, r3, #14
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 020a 	orr.w	r2, r2, #10
 8005fce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0204 	orr.w	r2, r2, #4
 8005fe6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a83      	ldr	r2, [pc, #524]	; (80061fc <HAL_DMA_Start_IT+0x474>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d072      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a82      	ldr	r2, [pc, #520]	; (8006200 <HAL_DMA_Start_IT+0x478>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d06d      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a80      	ldr	r2, [pc, #512]	; (8006204 <HAL_DMA_Start_IT+0x47c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d068      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a7f      	ldr	r2, [pc, #508]	; (8006208 <HAL_DMA_Start_IT+0x480>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d063      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a7d      	ldr	r2, [pc, #500]	; (800620c <HAL_DMA_Start_IT+0x484>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d05e      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a7c      	ldr	r2, [pc, #496]	; (8006210 <HAL_DMA_Start_IT+0x488>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d059      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a7a      	ldr	r2, [pc, #488]	; (8006214 <HAL_DMA_Start_IT+0x48c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d054      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a79      	ldr	r2, [pc, #484]	; (8006218 <HAL_DMA_Start_IT+0x490>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d04f      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a77      	ldr	r2, [pc, #476]	; (800621c <HAL_DMA_Start_IT+0x494>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d04a      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a76      	ldr	r2, [pc, #472]	; (8006220 <HAL_DMA_Start_IT+0x498>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d045      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a74      	ldr	r2, [pc, #464]	; (8006224 <HAL_DMA_Start_IT+0x49c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d040      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a73      	ldr	r2, [pc, #460]	; (8006228 <HAL_DMA_Start_IT+0x4a0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d03b      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a71      	ldr	r2, [pc, #452]	; (800622c <HAL_DMA_Start_IT+0x4a4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d036      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a70      	ldr	r2, [pc, #448]	; (8006230 <HAL_DMA_Start_IT+0x4a8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d031      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a6e      	ldr	r2, [pc, #440]	; (8006234 <HAL_DMA_Start_IT+0x4ac>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d02c      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a6d      	ldr	r2, [pc, #436]	; (8006238 <HAL_DMA_Start_IT+0x4b0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d027      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a6b      	ldr	r2, [pc, #428]	; (800623c <HAL_DMA_Start_IT+0x4b4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d022      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a6a      	ldr	r2, [pc, #424]	; (8006240 <HAL_DMA_Start_IT+0x4b8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d01d      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a68      	ldr	r2, [pc, #416]	; (8006244 <HAL_DMA_Start_IT+0x4bc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d018      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a67      	ldr	r2, [pc, #412]	; (8006248 <HAL_DMA_Start_IT+0x4c0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d013      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a65      	ldr	r2, [pc, #404]	; (800624c <HAL_DMA_Start_IT+0x4c4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00e      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a64      	ldr	r2, [pc, #400]	; (8006250 <HAL_DMA_Start_IT+0x4c8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d009      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a62      	ldr	r2, [pc, #392]	; (8006254 <HAL_DMA_Start_IT+0x4cc>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_DMA_Start_IT+0x350>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a61      	ldr	r2, [pc, #388]	; (8006258 <HAL_DMA_Start_IT+0x4d0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d101      	bne.n	80060dc <HAL_DMA_Start_IT+0x354>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <HAL_DMA_Start_IT+0x356>
 80060dc:	2300      	movs	r3, #0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01a      	beq.n	8006118 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d007      	beq.n	8006100 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006116:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a37      	ldr	r2, [pc, #220]	; (80061fc <HAL_DMA_Start_IT+0x474>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d04a      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a36      	ldr	r2, [pc, #216]	; (8006200 <HAL_DMA_Start_IT+0x478>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d045      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a34      	ldr	r2, [pc, #208]	; (8006204 <HAL_DMA_Start_IT+0x47c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d040      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a33      	ldr	r2, [pc, #204]	; (8006208 <HAL_DMA_Start_IT+0x480>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d03b      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a31      	ldr	r2, [pc, #196]	; (800620c <HAL_DMA_Start_IT+0x484>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d036      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a30      	ldr	r2, [pc, #192]	; (8006210 <HAL_DMA_Start_IT+0x488>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d031      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2e      	ldr	r2, [pc, #184]	; (8006214 <HAL_DMA_Start_IT+0x48c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d02c      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2d      	ldr	r2, [pc, #180]	; (8006218 <HAL_DMA_Start_IT+0x490>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d027      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a2b      	ldr	r2, [pc, #172]	; (800621c <HAL_DMA_Start_IT+0x494>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d022      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2a      	ldr	r2, [pc, #168]	; (8006220 <HAL_DMA_Start_IT+0x498>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d01d      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a28      	ldr	r2, [pc, #160]	; (8006224 <HAL_DMA_Start_IT+0x49c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d018      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a27      	ldr	r2, [pc, #156]	; (8006228 <HAL_DMA_Start_IT+0x4a0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d013      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a25      	ldr	r2, [pc, #148]	; (800622c <HAL_DMA_Start_IT+0x4a4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00e      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a24      	ldr	r2, [pc, #144]	; (8006230 <HAL_DMA_Start_IT+0x4a8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d009      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a22      	ldr	r2, [pc, #136]	; (8006234 <HAL_DMA_Start_IT+0x4ac>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d004      	beq.n	80061b8 <HAL_DMA_Start_IT+0x430>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a21      	ldr	r2, [pc, #132]	; (8006238 <HAL_DMA_Start_IT+0x4b0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d108      	bne.n	80061ca <HAL_DMA_Start_IT+0x442>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e012      	b.n	80061f0 <HAL_DMA_Start_IT+0x468>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e009      	b.n	80061f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	40020010 	.word	0x40020010
 8006200:	40020028 	.word	0x40020028
 8006204:	40020040 	.word	0x40020040
 8006208:	40020058 	.word	0x40020058
 800620c:	40020070 	.word	0x40020070
 8006210:	40020088 	.word	0x40020088
 8006214:	400200a0 	.word	0x400200a0
 8006218:	400200b8 	.word	0x400200b8
 800621c:	40020410 	.word	0x40020410
 8006220:	40020428 	.word	0x40020428
 8006224:	40020440 	.word	0x40020440
 8006228:	40020458 	.word	0x40020458
 800622c:	40020470 	.word	0x40020470
 8006230:	40020488 	.word	0x40020488
 8006234:	400204a0 	.word	0x400204a0
 8006238:	400204b8 	.word	0x400204b8
 800623c:	58025408 	.word	0x58025408
 8006240:	5802541c 	.word	0x5802541c
 8006244:	58025430 	.word	0x58025430
 8006248:	58025444 	.word	0x58025444
 800624c:	58025458 	.word	0x58025458
 8006250:	5802546c 	.word	0x5802546c
 8006254:	58025480 	.word	0x58025480
 8006258:	58025494 	.word	0x58025494

0800625c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006264:	f7fe ff32 	bl	80050cc <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e2dc      	b.n	800682e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d008      	beq.n	8006292 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2280      	movs	r2, #128	; 0x80
 8006284:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e2cd      	b.n	800682e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a76      	ldr	r2, [pc, #472]	; (8006470 <HAL_DMA_Abort+0x214>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d04a      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a74      	ldr	r2, [pc, #464]	; (8006474 <HAL_DMA_Abort+0x218>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d045      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a73      	ldr	r2, [pc, #460]	; (8006478 <HAL_DMA_Abort+0x21c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d040      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a71      	ldr	r2, [pc, #452]	; (800647c <HAL_DMA_Abort+0x220>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d03b      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a70      	ldr	r2, [pc, #448]	; (8006480 <HAL_DMA_Abort+0x224>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d036      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a6e      	ldr	r2, [pc, #440]	; (8006484 <HAL_DMA_Abort+0x228>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d031      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a6d      	ldr	r2, [pc, #436]	; (8006488 <HAL_DMA_Abort+0x22c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d02c      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a6b      	ldr	r2, [pc, #428]	; (800648c <HAL_DMA_Abort+0x230>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d027      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a6a      	ldr	r2, [pc, #424]	; (8006490 <HAL_DMA_Abort+0x234>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d022      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a68      	ldr	r2, [pc, #416]	; (8006494 <HAL_DMA_Abort+0x238>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01d      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a67      	ldr	r2, [pc, #412]	; (8006498 <HAL_DMA_Abort+0x23c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d018      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a65      	ldr	r2, [pc, #404]	; (800649c <HAL_DMA_Abort+0x240>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a64      	ldr	r2, [pc, #400]	; (80064a0 <HAL_DMA_Abort+0x244>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00e      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a62      	ldr	r2, [pc, #392]	; (80064a4 <HAL_DMA_Abort+0x248>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d009      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a61      	ldr	r2, [pc, #388]	; (80064a8 <HAL_DMA_Abort+0x24c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d004      	beq.n	8006332 <HAL_DMA_Abort+0xd6>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a5f      	ldr	r2, [pc, #380]	; (80064ac <HAL_DMA_Abort+0x250>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d101      	bne.n	8006336 <HAL_DMA_Abort+0xda>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <HAL_DMA_Abort+0xdc>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d013      	beq.n	8006364 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 021e 	bic.w	r2, r2, #30
 800634a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695a      	ldr	r2, [r3, #20]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800635a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e00a      	b.n	800637a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 020e 	bic.w	r2, r2, #14
 8006372:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a3c      	ldr	r2, [pc, #240]	; (8006470 <HAL_DMA_Abort+0x214>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d072      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a3a      	ldr	r2, [pc, #232]	; (8006474 <HAL_DMA_Abort+0x218>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d06d      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a39      	ldr	r2, [pc, #228]	; (8006478 <HAL_DMA_Abort+0x21c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d068      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a37      	ldr	r2, [pc, #220]	; (800647c <HAL_DMA_Abort+0x220>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d063      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a36      	ldr	r2, [pc, #216]	; (8006480 <HAL_DMA_Abort+0x224>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d05e      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a34      	ldr	r2, [pc, #208]	; (8006484 <HAL_DMA_Abort+0x228>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d059      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a33      	ldr	r2, [pc, #204]	; (8006488 <HAL_DMA_Abort+0x22c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d054      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a31      	ldr	r2, [pc, #196]	; (800648c <HAL_DMA_Abort+0x230>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04f      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a30      	ldr	r2, [pc, #192]	; (8006490 <HAL_DMA_Abort+0x234>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d04a      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2e      	ldr	r2, [pc, #184]	; (8006494 <HAL_DMA_Abort+0x238>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d045      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2d      	ldr	r2, [pc, #180]	; (8006498 <HAL_DMA_Abort+0x23c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d040      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2b      	ldr	r2, [pc, #172]	; (800649c <HAL_DMA_Abort+0x240>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d03b      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2a      	ldr	r2, [pc, #168]	; (80064a0 <HAL_DMA_Abort+0x244>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d036      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a28      	ldr	r2, [pc, #160]	; (80064a4 <HAL_DMA_Abort+0x248>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d031      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a27      	ldr	r2, [pc, #156]	; (80064a8 <HAL_DMA_Abort+0x24c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d02c      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a25      	ldr	r2, [pc, #148]	; (80064ac <HAL_DMA_Abort+0x250>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d027      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a24      	ldr	r2, [pc, #144]	; (80064b0 <HAL_DMA_Abort+0x254>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d022      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a22      	ldr	r2, [pc, #136]	; (80064b4 <HAL_DMA_Abort+0x258>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01d      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a21      	ldr	r2, [pc, #132]	; (80064b8 <HAL_DMA_Abort+0x25c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d018      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1f      	ldr	r2, [pc, #124]	; (80064bc <HAL_DMA_Abort+0x260>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1e      	ldr	r2, [pc, #120]	; (80064c0 <HAL_DMA_Abort+0x264>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <HAL_DMA_Abort+0x268>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <HAL_DMA_Abort+0x26c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_DMA_Abort+0x20e>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a19      	ldr	r2, [pc, #100]	; (80064cc <HAL_DMA_Abort+0x270>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d132      	bne.n	80064d0 <HAL_DMA_Abort+0x274>
 800646a:	2301      	movs	r3, #1
 800646c:	e031      	b.n	80064d2 <HAL_DMA_Abort+0x276>
 800646e:	bf00      	nop
 8006470:	40020010 	.word	0x40020010
 8006474:	40020028 	.word	0x40020028
 8006478:	40020040 	.word	0x40020040
 800647c:	40020058 	.word	0x40020058
 8006480:	40020070 	.word	0x40020070
 8006484:	40020088 	.word	0x40020088
 8006488:	400200a0 	.word	0x400200a0
 800648c:	400200b8 	.word	0x400200b8
 8006490:	40020410 	.word	0x40020410
 8006494:	40020428 	.word	0x40020428
 8006498:	40020440 	.word	0x40020440
 800649c:	40020458 	.word	0x40020458
 80064a0:	40020470 	.word	0x40020470
 80064a4:	40020488 	.word	0x40020488
 80064a8:	400204a0 	.word	0x400204a0
 80064ac:	400204b8 	.word	0x400204b8
 80064b0:	58025408 	.word	0x58025408
 80064b4:	5802541c 	.word	0x5802541c
 80064b8:	58025430 	.word	0x58025430
 80064bc:	58025444 	.word	0x58025444
 80064c0:	58025458 	.word	0x58025458
 80064c4:	5802546c 	.word	0x5802546c
 80064c8:	58025480 	.word	0x58025480
 80064cc:	58025494 	.word	0x58025494
 80064d0:	2300      	movs	r3, #0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a6d      	ldr	r2, [pc, #436]	; (80066a0 <HAL_DMA_Abort+0x444>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d04a      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a6b      	ldr	r2, [pc, #428]	; (80066a4 <HAL_DMA_Abort+0x448>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d045      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a6a      	ldr	r2, [pc, #424]	; (80066a8 <HAL_DMA_Abort+0x44c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d040      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a68      	ldr	r2, [pc, #416]	; (80066ac <HAL_DMA_Abort+0x450>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d03b      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a67      	ldr	r2, [pc, #412]	; (80066b0 <HAL_DMA_Abort+0x454>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d036      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a65      	ldr	r2, [pc, #404]	; (80066b4 <HAL_DMA_Abort+0x458>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d031      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a64      	ldr	r2, [pc, #400]	; (80066b8 <HAL_DMA_Abort+0x45c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d02c      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a62      	ldr	r2, [pc, #392]	; (80066bc <HAL_DMA_Abort+0x460>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d027      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a61      	ldr	r2, [pc, #388]	; (80066c0 <HAL_DMA_Abort+0x464>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d022      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a5f      	ldr	r2, [pc, #380]	; (80066c4 <HAL_DMA_Abort+0x468>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01d      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a5e      	ldr	r2, [pc, #376]	; (80066c8 <HAL_DMA_Abort+0x46c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d018      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a5c      	ldr	r2, [pc, #368]	; (80066cc <HAL_DMA_Abort+0x470>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a5b      	ldr	r2, [pc, #364]	; (80066d0 <HAL_DMA_Abort+0x474>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a59      	ldr	r2, [pc, #356]	; (80066d4 <HAL_DMA_Abort+0x478>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a58      	ldr	r2, [pc, #352]	; (80066d8 <HAL_DMA_Abort+0x47c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_DMA_Abort+0x32a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a56      	ldr	r2, [pc, #344]	; (80066dc <HAL_DMA_Abort+0x480>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <HAL_DMA_Abort+0x33c>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	e007      	b.n	80065a8 <HAL_DMA_Abort+0x34c>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80065a8:	e013      	b.n	80065d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065aa:	f7fe fd8f 	bl	80050cc <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b05      	cmp	r3, #5
 80065b6:	d90c      	bls.n	80065d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2203      	movs	r2, #3
 80065c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e12d      	b.n	800682e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e5      	bne.n	80065aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a2f      	ldr	r2, [pc, #188]	; (80066a0 <HAL_DMA_Abort+0x444>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d04a      	beq.n	800667e <HAL_DMA_Abort+0x422>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a2d      	ldr	r2, [pc, #180]	; (80066a4 <HAL_DMA_Abort+0x448>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d045      	beq.n	800667e <HAL_DMA_Abort+0x422>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a2c      	ldr	r2, [pc, #176]	; (80066a8 <HAL_DMA_Abort+0x44c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d040      	beq.n	800667e <HAL_DMA_Abort+0x422>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a2a      	ldr	r2, [pc, #168]	; (80066ac <HAL_DMA_Abort+0x450>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d03b      	beq.n	800667e <HAL_DMA_Abort+0x422>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a29      	ldr	r2, [pc, #164]	; (80066b0 <HAL_DMA_Abort+0x454>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d036      	beq.n	800667e <HAL_DMA_Abort+0x422>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a27      	ldr	r2, [pc, #156]	; (80066b4 <HAL_DMA_Abort+0x458>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d031      	beq.n	800667e <HAL_DMA_Abort+0x422>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a26      	ldr	r2, [pc, #152]	; (80066b8 <HAL_DMA_Abort+0x45c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d02c      	beq.n	800667e <HAL_DMA_Abort+0x422>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a24      	ldr	r2, [pc, #144]	; (80066bc <HAL_DMA_Abort+0x460>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d027      	beq.n	800667e <HAL_DMA_Abort+0x422>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a23      	ldr	r2, [pc, #140]	; (80066c0 <HAL_DMA_Abort+0x464>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d022      	beq.n	800667e <HAL_DMA_Abort+0x422>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a21      	ldr	r2, [pc, #132]	; (80066c4 <HAL_DMA_Abort+0x468>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01d      	beq.n	800667e <HAL_DMA_Abort+0x422>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a20      	ldr	r2, [pc, #128]	; (80066c8 <HAL_DMA_Abort+0x46c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d018      	beq.n	800667e <HAL_DMA_Abort+0x422>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1e      	ldr	r2, [pc, #120]	; (80066cc <HAL_DMA_Abort+0x470>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <HAL_DMA_Abort+0x422>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1d      	ldr	r2, [pc, #116]	; (80066d0 <HAL_DMA_Abort+0x474>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00e      	beq.n	800667e <HAL_DMA_Abort+0x422>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1b      	ldr	r2, [pc, #108]	; (80066d4 <HAL_DMA_Abort+0x478>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_DMA_Abort+0x422>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <HAL_DMA_Abort+0x47c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <HAL_DMA_Abort+0x422>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a18      	ldr	r2, [pc, #96]	; (80066dc <HAL_DMA_Abort+0x480>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <HAL_DMA_Abort+0x426>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_DMA_Abort+0x428>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d02b      	beq.n	80066e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006692:	f003 031f 	and.w	r3, r3, #31
 8006696:	223f      	movs	r2, #63	; 0x3f
 8006698:	409a      	lsls	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	609a      	str	r2, [r3, #8]
 800669e:	e02a      	b.n	80066f6 <HAL_DMA_Abort+0x49a>
 80066a0:	40020010 	.word	0x40020010
 80066a4:	40020028 	.word	0x40020028
 80066a8:	40020040 	.word	0x40020040
 80066ac:	40020058 	.word	0x40020058
 80066b0:	40020070 	.word	0x40020070
 80066b4:	40020088 	.word	0x40020088
 80066b8:	400200a0 	.word	0x400200a0
 80066bc:	400200b8 	.word	0x400200b8
 80066c0:	40020410 	.word	0x40020410
 80066c4:	40020428 	.word	0x40020428
 80066c8:	40020440 	.word	0x40020440
 80066cc:	40020458 	.word	0x40020458
 80066d0:	40020470 	.word	0x40020470
 80066d4:	40020488 	.word	0x40020488
 80066d8:	400204a0 	.word	0x400204a0
 80066dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	2201      	movs	r2, #1
 80066f0:	409a      	lsls	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a4f      	ldr	r2, [pc, #316]	; (8006838 <HAL_DMA_Abort+0x5dc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d072      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a4d      	ldr	r2, [pc, #308]	; (800683c <HAL_DMA_Abort+0x5e0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d06d      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a4c      	ldr	r2, [pc, #304]	; (8006840 <HAL_DMA_Abort+0x5e4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d068      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a4a      	ldr	r2, [pc, #296]	; (8006844 <HAL_DMA_Abort+0x5e8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d063      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a49      	ldr	r2, [pc, #292]	; (8006848 <HAL_DMA_Abort+0x5ec>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d05e      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a47      	ldr	r2, [pc, #284]	; (800684c <HAL_DMA_Abort+0x5f0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d059      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a46      	ldr	r2, [pc, #280]	; (8006850 <HAL_DMA_Abort+0x5f4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d054      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a44      	ldr	r2, [pc, #272]	; (8006854 <HAL_DMA_Abort+0x5f8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d04f      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a43      	ldr	r2, [pc, #268]	; (8006858 <HAL_DMA_Abort+0x5fc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d04a      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a41      	ldr	r2, [pc, #260]	; (800685c <HAL_DMA_Abort+0x600>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d045      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a40      	ldr	r2, [pc, #256]	; (8006860 <HAL_DMA_Abort+0x604>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d040      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a3e      	ldr	r2, [pc, #248]	; (8006864 <HAL_DMA_Abort+0x608>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d03b      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a3d      	ldr	r2, [pc, #244]	; (8006868 <HAL_DMA_Abort+0x60c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d036      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a3b      	ldr	r2, [pc, #236]	; (800686c <HAL_DMA_Abort+0x610>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d031      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a3a      	ldr	r2, [pc, #232]	; (8006870 <HAL_DMA_Abort+0x614>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d02c      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a38      	ldr	r2, [pc, #224]	; (8006874 <HAL_DMA_Abort+0x618>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d027      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a37      	ldr	r2, [pc, #220]	; (8006878 <HAL_DMA_Abort+0x61c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d022      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a35      	ldr	r2, [pc, #212]	; (800687c <HAL_DMA_Abort+0x620>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01d      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a34      	ldr	r2, [pc, #208]	; (8006880 <HAL_DMA_Abort+0x624>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d018      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a32      	ldr	r2, [pc, #200]	; (8006884 <HAL_DMA_Abort+0x628>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a31      	ldr	r2, [pc, #196]	; (8006888 <HAL_DMA_Abort+0x62c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a2f      	ldr	r2, [pc, #188]	; (800688c <HAL_DMA_Abort+0x630>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a2e      	ldr	r2, [pc, #184]	; (8006890 <HAL_DMA_Abort+0x634>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_DMA_Abort+0x58a>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a2c      	ldr	r2, [pc, #176]	; (8006894 <HAL_DMA_Abort+0x638>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d101      	bne.n	80067ea <HAL_DMA_Abort+0x58e>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <HAL_DMA_Abort+0x590>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d015      	beq.n	800681c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80067f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00c      	beq.n	800681c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006810:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800681a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40020010 	.word	0x40020010
 800683c:	40020028 	.word	0x40020028
 8006840:	40020040 	.word	0x40020040
 8006844:	40020058 	.word	0x40020058
 8006848:	40020070 	.word	0x40020070
 800684c:	40020088 	.word	0x40020088
 8006850:	400200a0 	.word	0x400200a0
 8006854:	400200b8 	.word	0x400200b8
 8006858:	40020410 	.word	0x40020410
 800685c:	40020428 	.word	0x40020428
 8006860:	40020440 	.word	0x40020440
 8006864:	40020458 	.word	0x40020458
 8006868:	40020470 	.word	0x40020470
 800686c:	40020488 	.word	0x40020488
 8006870:	400204a0 	.word	0x400204a0
 8006874:	400204b8 	.word	0x400204b8
 8006878:	58025408 	.word	0x58025408
 800687c:	5802541c 	.word	0x5802541c
 8006880:	58025430 	.word	0x58025430
 8006884:	58025444 	.word	0x58025444
 8006888:	58025458 	.word	0x58025458
 800688c:	5802546c 	.word	0x5802546c
 8006890:	58025480 	.word	0x58025480
 8006894:	58025494 	.word	0x58025494

08006898 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e237      	b.n	8006d1a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d004      	beq.n	80068c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2280      	movs	r2, #128	; 0x80
 80068ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e22c      	b.n	8006d1a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a5c      	ldr	r2, [pc, #368]	; (8006a38 <HAL_DMA_Abort_IT+0x1a0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d04a      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a5b      	ldr	r2, [pc, #364]	; (8006a3c <HAL_DMA_Abort_IT+0x1a4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d045      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a59      	ldr	r2, [pc, #356]	; (8006a40 <HAL_DMA_Abort_IT+0x1a8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d040      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a58      	ldr	r2, [pc, #352]	; (8006a44 <HAL_DMA_Abort_IT+0x1ac>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d03b      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a56      	ldr	r2, [pc, #344]	; (8006a48 <HAL_DMA_Abort_IT+0x1b0>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d036      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a55      	ldr	r2, [pc, #340]	; (8006a4c <HAL_DMA_Abort_IT+0x1b4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d031      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a53      	ldr	r2, [pc, #332]	; (8006a50 <HAL_DMA_Abort_IT+0x1b8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d02c      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a52      	ldr	r2, [pc, #328]	; (8006a54 <HAL_DMA_Abort_IT+0x1bc>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d027      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a50      	ldr	r2, [pc, #320]	; (8006a58 <HAL_DMA_Abort_IT+0x1c0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d022      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a4f      	ldr	r2, [pc, #316]	; (8006a5c <HAL_DMA_Abort_IT+0x1c4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d01d      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a4d      	ldr	r2, [pc, #308]	; (8006a60 <HAL_DMA_Abort_IT+0x1c8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d018      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a4c      	ldr	r2, [pc, #304]	; (8006a64 <HAL_DMA_Abort_IT+0x1cc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d013      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a4a      	ldr	r2, [pc, #296]	; (8006a68 <HAL_DMA_Abort_IT+0x1d0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00e      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a49      	ldr	r2, [pc, #292]	; (8006a6c <HAL_DMA_Abort_IT+0x1d4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d009      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a47      	ldr	r2, [pc, #284]	; (8006a70 <HAL_DMA_Abort_IT+0x1d8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <HAL_DMA_Abort_IT+0xc8>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a46      	ldr	r2, [pc, #280]	; (8006a74 <HAL_DMA_Abort_IT+0x1dc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d101      	bne.n	8006964 <HAL_DMA_Abort_IT+0xcc>
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <HAL_DMA_Abort_IT+0xce>
 8006964:	2300      	movs	r3, #0
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 8086 	beq.w	8006a78 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2204      	movs	r2, #4
 8006970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2f      	ldr	r2, [pc, #188]	; (8006a38 <HAL_DMA_Abort_IT+0x1a0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d04a      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a2e      	ldr	r2, [pc, #184]	; (8006a3c <HAL_DMA_Abort_IT+0x1a4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d045      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a2c      	ldr	r2, [pc, #176]	; (8006a40 <HAL_DMA_Abort_IT+0x1a8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d040      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a2b      	ldr	r2, [pc, #172]	; (8006a44 <HAL_DMA_Abort_IT+0x1ac>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d03b      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a29      	ldr	r2, [pc, #164]	; (8006a48 <HAL_DMA_Abort_IT+0x1b0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d036      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a28      	ldr	r2, [pc, #160]	; (8006a4c <HAL_DMA_Abort_IT+0x1b4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d031      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a26      	ldr	r2, [pc, #152]	; (8006a50 <HAL_DMA_Abort_IT+0x1b8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d02c      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a25      	ldr	r2, [pc, #148]	; (8006a54 <HAL_DMA_Abort_IT+0x1bc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d027      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a23      	ldr	r2, [pc, #140]	; (8006a58 <HAL_DMA_Abort_IT+0x1c0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d022      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a22      	ldr	r2, [pc, #136]	; (8006a5c <HAL_DMA_Abort_IT+0x1c4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d01d      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a20      	ldr	r2, [pc, #128]	; (8006a60 <HAL_DMA_Abort_IT+0x1c8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d018      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1f      	ldr	r2, [pc, #124]	; (8006a64 <HAL_DMA_Abort_IT+0x1cc>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d013      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1d      	ldr	r2, [pc, #116]	; (8006a68 <HAL_DMA_Abort_IT+0x1d0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00e      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1c      	ldr	r2, [pc, #112]	; (8006a6c <HAL_DMA_Abort_IT+0x1d4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d009      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1a      	ldr	r2, [pc, #104]	; (8006a70 <HAL_DMA_Abort_IT+0x1d8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x17c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a19      	ldr	r2, [pc, #100]	; (8006a74 <HAL_DMA_Abort_IT+0x1dc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d108      	bne.n	8006a26 <HAL_DMA_Abort_IT+0x18e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0201 	bic.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e178      	b.n	8006d18 <HAL_DMA_Abort_IT+0x480>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e16f      	b.n	8006d18 <HAL_DMA_Abort_IT+0x480>
 8006a38:	40020010 	.word	0x40020010
 8006a3c:	40020028 	.word	0x40020028
 8006a40:	40020040 	.word	0x40020040
 8006a44:	40020058 	.word	0x40020058
 8006a48:	40020070 	.word	0x40020070
 8006a4c:	40020088 	.word	0x40020088
 8006a50:	400200a0 	.word	0x400200a0
 8006a54:	400200b8 	.word	0x400200b8
 8006a58:	40020410 	.word	0x40020410
 8006a5c:	40020428 	.word	0x40020428
 8006a60:	40020440 	.word	0x40020440
 8006a64:	40020458 	.word	0x40020458
 8006a68:	40020470 	.word	0x40020470
 8006a6c:	40020488 	.word	0x40020488
 8006a70:	400204a0 	.word	0x400204a0
 8006a74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 020e 	bic.w	r2, r2, #14
 8006a86:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a6c      	ldr	r2, [pc, #432]	; (8006c40 <HAL_DMA_Abort_IT+0x3a8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d04a      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6b      	ldr	r2, [pc, #428]	; (8006c44 <HAL_DMA_Abort_IT+0x3ac>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d045      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a69      	ldr	r2, [pc, #420]	; (8006c48 <HAL_DMA_Abort_IT+0x3b0>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d040      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a68      	ldr	r2, [pc, #416]	; (8006c4c <HAL_DMA_Abort_IT+0x3b4>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d03b      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a66      	ldr	r2, [pc, #408]	; (8006c50 <HAL_DMA_Abort_IT+0x3b8>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d036      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a65      	ldr	r2, [pc, #404]	; (8006c54 <HAL_DMA_Abort_IT+0x3bc>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d031      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a63      	ldr	r2, [pc, #396]	; (8006c58 <HAL_DMA_Abort_IT+0x3c0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d02c      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a62      	ldr	r2, [pc, #392]	; (8006c5c <HAL_DMA_Abort_IT+0x3c4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d027      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a60      	ldr	r2, [pc, #384]	; (8006c60 <HAL_DMA_Abort_IT+0x3c8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d022      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a5f      	ldr	r2, [pc, #380]	; (8006c64 <HAL_DMA_Abort_IT+0x3cc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d01d      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a5d      	ldr	r2, [pc, #372]	; (8006c68 <HAL_DMA_Abort_IT+0x3d0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d018      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a5c      	ldr	r2, [pc, #368]	; (8006c6c <HAL_DMA_Abort_IT+0x3d4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d013      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a5a      	ldr	r2, [pc, #360]	; (8006c70 <HAL_DMA_Abort_IT+0x3d8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00e      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a59      	ldr	r2, [pc, #356]	; (8006c74 <HAL_DMA_Abort_IT+0x3dc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d009      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a57      	ldr	r2, [pc, #348]	; (8006c78 <HAL_DMA_Abort_IT+0x3e0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x290>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a56      	ldr	r2, [pc, #344]	; (8006c7c <HAL_DMA_Abort_IT+0x3e4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d108      	bne.n	8006b3a <HAL_DMA_Abort_IT+0x2a2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0201 	bic.w	r2, r2, #1
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	e007      	b.n	8006b4a <HAL_DMA_Abort_IT+0x2b2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0201 	bic.w	r2, r2, #1
 8006b48:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a3c      	ldr	r2, [pc, #240]	; (8006c40 <HAL_DMA_Abort_IT+0x3a8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d072      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a3a      	ldr	r2, [pc, #232]	; (8006c44 <HAL_DMA_Abort_IT+0x3ac>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d06d      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a39      	ldr	r2, [pc, #228]	; (8006c48 <HAL_DMA_Abort_IT+0x3b0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d068      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a37      	ldr	r2, [pc, #220]	; (8006c4c <HAL_DMA_Abort_IT+0x3b4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d063      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a36      	ldr	r2, [pc, #216]	; (8006c50 <HAL_DMA_Abort_IT+0x3b8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d05e      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a34      	ldr	r2, [pc, #208]	; (8006c54 <HAL_DMA_Abort_IT+0x3bc>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d059      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a33      	ldr	r2, [pc, #204]	; (8006c58 <HAL_DMA_Abort_IT+0x3c0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d054      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a31      	ldr	r2, [pc, #196]	; (8006c5c <HAL_DMA_Abort_IT+0x3c4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d04f      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a30      	ldr	r2, [pc, #192]	; (8006c60 <HAL_DMA_Abort_IT+0x3c8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d04a      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2e      	ldr	r2, [pc, #184]	; (8006c64 <HAL_DMA_Abort_IT+0x3cc>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d045      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2d      	ldr	r2, [pc, #180]	; (8006c68 <HAL_DMA_Abort_IT+0x3d0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d040      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a2b      	ldr	r2, [pc, #172]	; (8006c6c <HAL_DMA_Abort_IT+0x3d4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d03b      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a2a      	ldr	r2, [pc, #168]	; (8006c70 <HAL_DMA_Abort_IT+0x3d8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d036      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a28      	ldr	r2, [pc, #160]	; (8006c74 <HAL_DMA_Abort_IT+0x3dc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d031      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a27      	ldr	r2, [pc, #156]	; (8006c78 <HAL_DMA_Abort_IT+0x3e0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d02c      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a25      	ldr	r2, [pc, #148]	; (8006c7c <HAL_DMA_Abort_IT+0x3e4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d027      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a24      	ldr	r2, [pc, #144]	; (8006c80 <HAL_DMA_Abort_IT+0x3e8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d022      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a22      	ldr	r2, [pc, #136]	; (8006c84 <HAL_DMA_Abort_IT+0x3ec>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01d      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a21      	ldr	r2, [pc, #132]	; (8006c88 <HAL_DMA_Abort_IT+0x3f0>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d018      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1f      	ldr	r2, [pc, #124]	; (8006c8c <HAL_DMA_Abort_IT+0x3f4>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <HAL_DMA_Abort_IT+0x3f8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00e      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1c      	ldr	r2, [pc, #112]	; (8006c94 <HAL_DMA_Abort_IT+0x3fc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d009      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a1b      	ldr	r2, [pc, #108]	; (8006c98 <HAL_DMA_Abort_IT+0x400>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d004      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x3a2>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <HAL_DMA_Abort_IT+0x404>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d132      	bne.n	8006ca0 <HAL_DMA_Abort_IT+0x408>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e031      	b.n	8006ca2 <HAL_DMA_Abort_IT+0x40a>
 8006c3e:	bf00      	nop
 8006c40:	40020010 	.word	0x40020010
 8006c44:	40020028 	.word	0x40020028
 8006c48:	40020040 	.word	0x40020040
 8006c4c:	40020058 	.word	0x40020058
 8006c50:	40020070 	.word	0x40020070
 8006c54:	40020088 	.word	0x40020088
 8006c58:	400200a0 	.word	0x400200a0
 8006c5c:	400200b8 	.word	0x400200b8
 8006c60:	40020410 	.word	0x40020410
 8006c64:	40020428 	.word	0x40020428
 8006c68:	40020440 	.word	0x40020440
 8006c6c:	40020458 	.word	0x40020458
 8006c70:	40020470 	.word	0x40020470
 8006c74:	40020488 	.word	0x40020488
 8006c78:	400204a0 	.word	0x400204a0
 8006c7c:	400204b8 	.word	0x400204b8
 8006c80:	58025408 	.word	0x58025408
 8006c84:	5802541c 	.word	0x5802541c
 8006c88:	58025430 	.word	0x58025430
 8006c8c:	58025444 	.word	0x58025444
 8006c90:	58025458 	.word	0x58025458
 8006c94:	5802546c 	.word	0x5802546c
 8006c98:	58025480 	.word	0x58025480
 8006c9c:	58025494 	.word	0x58025494
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d028      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cb4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	409a      	lsls	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006cd4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00c      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006cf6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop

08006d24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08a      	sub	sp, #40	; 0x28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d30:	4b67      	ldr	r3, [pc, #412]	; (8006ed0 <HAL_DMA_IRQHandler+0x1ac>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a67      	ldr	r2, [pc, #412]	; (8006ed4 <HAL_DMA_IRQHandler+0x1b0>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	0a9b      	lsrs	r3, r3, #10
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a5f      	ldr	r2, [pc, #380]	; (8006ed8 <HAL_DMA_IRQHandler+0x1b4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d04a      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a5d      	ldr	r2, [pc, #372]	; (8006edc <HAL_DMA_IRQHandler+0x1b8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d045      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a5c      	ldr	r2, [pc, #368]	; (8006ee0 <HAL_DMA_IRQHandler+0x1bc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d040      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a5a      	ldr	r2, [pc, #360]	; (8006ee4 <HAL_DMA_IRQHandler+0x1c0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d03b      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a59      	ldr	r2, [pc, #356]	; (8006ee8 <HAL_DMA_IRQHandler+0x1c4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d036      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a57      	ldr	r2, [pc, #348]	; (8006eec <HAL_DMA_IRQHandler+0x1c8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d031      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a56      	ldr	r2, [pc, #344]	; (8006ef0 <HAL_DMA_IRQHandler+0x1cc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d02c      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a54      	ldr	r2, [pc, #336]	; (8006ef4 <HAL_DMA_IRQHandler+0x1d0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d027      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a53      	ldr	r2, [pc, #332]	; (8006ef8 <HAL_DMA_IRQHandler+0x1d4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d022      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a51      	ldr	r2, [pc, #324]	; (8006efc <HAL_DMA_IRQHandler+0x1d8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d01d      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a50      	ldr	r2, [pc, #320]	; (8006f00 <HAL_DMA_IRQHandler+0x1dc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d018      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a4e      	ldr	r2, [pc, #312]	; (8006f04 <HAL_DMA_IRQHandler+0x1e0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a4d      	ldr	r2, [pc, #308]	; (8006f08 <HAL_DMA_IRQHandler+0x1e4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d00e      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a4b      	ldr	r2, [pc, #300]	; (8006f0c <HAL_DMA_IRQHandler+0x1e8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a4a      	ldr	r2, [pc, #296]	; (8006f10 <HAL_DMA_IRQHandler+0x1ec>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d004      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xd2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a48      	ldr	r2, [pc, #288]	; (8006f14 <HAL_DMA_IRQHandler+0x1f0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d101      	bne.n	8006dfa <HAL_DMA_IRQHandler+0xd6>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <HAL_DMA_IRQHandler+0xd8>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 842b 	beq.w	8007658 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e06:	f003 031f 	and.w	r3, r3, #31
 8006e0a:	2208      	movs	r2, #8
 8006e0c:	409a      	lsls	r2, r3
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 80a2 	beq.w	8006f5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a2e      	ldr	r2, [pc, #184]	; (8006ed8 <HAL_DMA_IRQHandler+0x1b4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d04a      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2d      	ldr	r2, [pc, #180]	; (8006edc <HAL_DMA_IRQHandler+0x1b8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d045      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a2b      	ldr	r2, [pc, #172]	; (8006ee0 <HAL_DMA_IRQHandler+0x1bc>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d040      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a2a      	ldr	r2, [pc, #168]	; (8006ee4 <HAL_DMA_IRQHandler+0x1c0>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d03b      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a28      	ldr	r2, [pc, #160]	; (8006ee8 <HAL_DMA_IRQHandler+0x1c4>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d036      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a27      	ldr	r2, [pc, #156]	; (8006eec <HAL_DMA_IRQHandler+0x1c8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d031      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a25      	ldr	r2, [pc, #148]	; (8006ef0 <HAL_DMA_IRQHandler+0x1cc>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d02c      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a24      	ldr	r2, [pc, #144]	; (8006ef4 <HAL_DMA_IRQHandler+0x1d0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d027      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a22      	ldr	r2, [pc, #136]	; (8006ef8 <HAL_DMA_IRQHandler+0x1d4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d022      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a21      	ldr	r2, [pc, #132]	; (8006efc <HAL_DMA_IRQHandler+0x1d8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d01d      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a1f      	ldr	r2, [pc, #124]	; (8006f00 <HAL_DMA_IRQHandler+0x1dc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d018      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a1e      	ldr	r2, [pc, #120]	; (8006f04 <HAL_DMA_IRQHandler+0x1e0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d013      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1c      	ldr	r2, [pc, #112]	; (8006f08 <HAL_DMA_IRQHandler+0x1e4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00e      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <HAL_DMA_IRQHandler+0x1e8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d009      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a19      	ldr	r2, [pc, #100]	; (8006f10 <HAL_DMA_IRQHandler+0x1ec>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d004      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x194>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a18      	ldr	r2, [pc, #96]	; (8006f14 <HAL_DMA_IRQHandler+0x1f0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d12f      	bne.n	8006f18 <HAL_DMA_IRQHandler+0x1f4>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0304 	and.w	r3, r3, #4
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bf14      	ite	ne
 8006ec6:	2301      	movne	r3, #1
 8006ec8:	2300      	moveq	r3, #0
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	e02e      	b.n	8006f2c <HAL_DMA_IRQHandler+0x208>
 8006ece:	bf00      	nop
 8006ed0:	240001c0 	.word	0x240001c0
 8006ed4:	1b4e81b5 	.word	0x1b4e81b5
 8006ed8:	40020010 	.word	0x40020010
 8006edc:	40020028 	.word	0x40020028
 8006ee0:	40020040 	.word	0x40020040
 8006ee4:	40020058 	.word	0x40020058
 8006ee8:	40020070 	.word	0x40020070
 8006eec:	40020088 	.word	0x40020088
 8006ef0:	400200a0 	.word	0x400200a0
 8006ef4:	400200b8 	.word	0x400200b8
 8006ef8:	40020410 	.word	0x40020410
 8006efc:	40020428 	.word	0x40020428
 8006f00:	40020440 	.word	0x40020440
 8006f04:	40020458 	.word	0x40020458
 8006f08:	40020470 	.word	0x40020470
 8006f0c:	40020488 	.word	0x40020488
 8006f10:	400204a0 	.word	0x400204a0
 8006f14:	400204b8 	.word	0x400204b8
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bf14      	ite	ne
 8006f26:	2301      	movne	r3, #1
 8006f28:	2300      	moveq	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d015      	beq.n	8006f5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0204 	bic.w	r2, r2, #4
 8006f3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	2208      	movs	r2, #8
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f54:	f043 0201 	orr.w	r2, r3, #1
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d06e      	beq.n	8007050 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a69      	ldr	r2, [pc, #420]	; (800711c <HAL_DMA_IRQHandler+0x3f8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d04a      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a67      	ldr	r2, [pc, #412]	; (8007120 <HAL_DMA_IRQHandler+0x3fc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d045      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a66      	ldr	r2, [pc, #408]	; (8007124 <HAL_DMA_IRQHandler+0x400>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d040      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a64      	ldr	r2, [pc, #400]	; (8007128 <HAL_DMA_IRQHandler+0x404>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d03b      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a63      	ldr	r2, [pc, #396]	; (800712c <HAL_DMA_IRQHandler+0x408>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d036      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a61      	ldr	r2, [pc, #388]	; (8007130 <HAL_DMA_IRQHandler+0x40c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d031      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a60      	ldr	r2, [pc, #384]	; (8007134 <HAL_DMA_IRQHandler+0x410>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d02c      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a5e      	ldr	r2, [pc, #376]	; (8007138 <HAL_DMA_IRQHandler+0x414>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d027      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a5d      	ldr	r2, [pc, #372]	; (800713c <HAL_DMA_IRQHandler+0x418>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d022      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a5b      	ldr	r2, [pc, #364]	; (8007140 <HAL_DMA_IRQHandler+0x41c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01d      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a5a      	ldr	r2, [pc, #360]	; (8007144 <HAL_DMA_IRQHandler+0x420>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d018      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a58      	ldr	r2, [pc, #352]	; (8007148 <HAL_DMA_IRQHandler+0x424>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a57      	ldr	r2, [pc, #348]	; (800714c <HAL_DMA_IRQHandler+0x428>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a55      	ldr	r2, [pc, #340]	; (8007150 <HAL_DMA_IRQHandler+0x42c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a54      	ldr	r2, [pc, #336]	; (8007154 <HAL_DMA_IRQHandler+0x430>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_DMA_IRQHandler+0x2ee>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a52      	ldr	r2, [pc, #328]	; (8007158 <HAL_DMA_IRQHandler+0x434>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d10a      	bne.n	8007028 <HAL_DMA_IRQHandler+0x304>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701c:	2b00      	cmp	r3, #0
 800701e:	bf14      	ite	ne
 8007020:	2301      	movne	r3, #1
 8007022:	2300      	moveq	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	e003      	b.n	8007030 <HAL_DMA_IRQHandler+0x30c>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2300      	movs	r3, #0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00d      	beq.n	8007050 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007038:	f003 031f 	and.w	r3, r3, #31
 800703c:	2201      	movs	r2, #1
 800703e:	409a      	lsls	r2, r3
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007048:	f043 0202 	orr.w	r2, r3, #2
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	2204      	movs	r2, #4
 800705a:	409a      	lsls	r2, r3
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	4013      	ands	r3, r2
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 808f 	beq.w	8007184 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a2c      	ldr	r2, [pc, #176]	; (800711c <HAL_DMA_IRQHandler+0x3f8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d04a      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a2a      	ldr	r2, [pc, #168]	; (8007120 <HAL_DMA_IRQHandler+0x3fc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d045      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a29      	ldr	r2, [pc, #164]	; (8007124 <HAL_DMA_IRQHandler+0x400>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d040      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a27      	ldr	r2, [pc, #156]	; (8007128 <HAL_DMA_IRQHandler+0x404>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d03b      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a26      	ldr	r2, [pc, #152]	; (800712c <HAL_DMA_IRQHandler+0x408>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d036      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a24      	ldr	r2, [pc, #144]	; (8007130 <HAL_DMA_IRQHandler+0x40c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d031      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a23      	ldr	r2, [pc, #140]	; (8007134 <HAL_DMA_IRQHandler+0x410>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d02c      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a21      	ldr	r2, [pc, #132]	; (8007138 <HAL_DMA_IRQHandler+0x414>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d027      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a20      	ldr	r2, [pc, #128]	; (800713c <HAL_DMA_IRQHandler+0x418>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <HAL_DMA_IRQHandler+0x41c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d01d      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <HAL_DMA_IRQHandler+0x420>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1b      	ldr	r2, [pc, #108]	; (8007148 <HAL_DMA_IRQHandler+0x424>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1a      	ldr	r2, [pc, #104]	; (800714c <HAL_DMA_IRQHandler+0x428>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a18      	ldr	r2, [pc, #96]	; (8007150 <HAL_DMA_IRQHandler+0x42c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a17      	ldr	r2, [pc, #92]	; (8007154 <HAL_DMA_IRQHandler+0x430>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_DMA_IRQHandler+0x3e2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a15      	ldr	r2, [pc, #84]	; (8007158 <HAL_DMA_IRQHandler+0x434>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d12a      	bne.n	800715c <HAL_DMA_IRQHandler+0x438>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	bf14      	ite	ne
 8007114:	2301      	movne	r3, #1
 8007116:	2300      	moveq	r3, #0
 8007118:	b2db      	uxtb	r3, r3
 800711a:	e023      	b.n	8007164 <HAL_DMA_IRQHandler+0x440>
 800711c:	40020010 	.word	0x40020010
 8007120:	40020028 	.word	0x40020028
 8007124:	40020040 	.word	0x40020040
 8007128:	40020058 	.word	0x40020058
 800712c:	40020070 	.word	0x40020070
 8007130:	40020088 	.word	0x40020088
 8007134:	400200a0 	.word	0x400200a0
 8007138:	400200b8 	.word	0x400200b8
 800713c:	40020410 	.word	0x40020410
 8007140:	40020428 	.word	0x40020428
 8007144:	40020440 	.word	0x40020440
 8007148:	40020458 	.word	0x40020458
 800714c:	40020470 	.word	0x40020470
 8007150:	40020488 	.word	0x40020488
 8007154:	400204a0 	.word	0x400204a0
 8007158:	400204b8 	.word	0x400204b8
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00d      	beq.n	8007184 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	2204      	movs	r2, #4
 8007172:	409a      	lsls	r2, r3
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717c:	f043 0204 	orr.w	r2, r3, #4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	2210      	movs	r2, #16
 800718e:	409a      	lsls	r2, r3
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	4013      	ands	r3, r2
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80a6 	beq.w	80072e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a85      	ldr	r2, [pc, #532]	; (80073b4 <HAL_DMA_IRQHandler+0x690>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d04a      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a83      	ldr	r2, [pc, #524]	; (80073b8 <HAL_DMA_IRQHandler+0x694>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d045      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a82      	ldr	r2, [pc, #520]	; (80073bc <HAL_DMA_IRQHandler+0x698>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d040      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a80      	ldr	r2, [pc, #512]	; (80073c0 <HAL_DMA_IRQHandler+0x69c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d03b      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a7f      	ldr	r2, [pc, #508]	; (80073c4 <HAL_DMA_IRQHandler+0x6a0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d036      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a7d      	ldr	r2, [pc, #500]	; (80073c8 <HAL_DMA_IRQHandler+0x6a4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d031      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a7c      	ldr	r2, [pc, #496]	; (80073cc <HAL_DMA_IRQHandler+0x6a8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d02c      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a7a      	ldr	r2, [pc, #488]	; (80073d0 <HAL_DMA_IRQHandler+0x6ac>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d027      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a79      	ldr	r2, [pc, #484]	; (80073d4 <HAL_DMA_IRQHandler+0x6b0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d022      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a77      	ldr	r2, [pc, #476]	; (80073d8 <HAL_DMA_IRQHandler+0x6b4>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d01d      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a76      	ldr	r2, [pc, #472]	; (80073dc <HAL_DMA_IRQHandler+0x6b8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d018      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a74      	ldr	r2, [pc, #464]	; (80073e0 <HAL_DMA_IRQHandler+0x6bc>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d013      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a73      	ldr	r2, [pc, #460]	; (80073e4 <HAL_DMA_IRQHandler+0x6c0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00e      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a71      	ldr	r2, [pc, #452]	; (80073e8 <HAL_DMA_IRQHandler+0x6c4>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d009      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a70      	ldr	r2, [pc, #448]	; (80073ec <HAL_DMA_IRQHandler+0x6c8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d004      	beq.n	800723a <HAL_DMA_IRQHandler+0x516>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a6e      	ldr	r2, [pc, #440]	; (80073f0 <HAL_DMA_IRQHandler+0x6cc>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d10a      	bne.n	8007250 <HAL_DMA_IRQHandler+0x52c>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b00      	cmp	r3, #0
 8007246:	bf14      	ite	ne
 8007248:	2301      	movne	r3, #1
 800724a:	2300      	moveq	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	e009      	b.n	8007264 <HAL_DMA_IRQHandler+0x540>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0304 	and.w	r3, r3, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	bf14      	ite	ne
 800725e:	2301      	movne	r3, #1
 8007260:	2300      	moveq	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d03e      	beq.n	80072e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	2210      	movs	r2, #16
 8007272:	409a      	lsls	r2, r3
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d018      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d108      	bne.n	80072a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	d024      	beq.n	80072e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	4798      	blx	r3
 80072a4:	e01f      	b.n	80072e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d01b      	beq.n	80072e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
 80072b6:	e016      	b.n	80072e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d107      	bne.n	80072d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0208 	bic.w	r2, r2, #8
 80072d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	2220      	movs	r2, #32
 80072f0:	409a      	lsls	r2, r3
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	4013      	ands	r3, r2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 8110 	beq.w	800751c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a2c      	ldr	r2, [pc, #176]	; (80073b4 <HAL_DMA_IRQHandler+0x690>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d04a      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a2b      	ldr	r2, [pc, #172]	; (80073b8 <HAL_DMA_IRQHandler+0x694>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d045      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a29      	ldr	r2, [pc, #164]	; (80073bc <HAL_DMA_IRQHandler+0x698>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d040      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a28      	ldr	r2, [pc, #160]	; (80073c0 <HAL_DMA_IRQHandler+0x69c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d03b      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a26      	ldr	r2, [pc, #152]	; (80073c4 <HAL_DMA_IRQHandler+0x6a0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d036      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a25      	ldr	r2, [pc, #148]	; (80073c8 <HAL_DMA_IRQHandler+0x6a4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d031      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a23      	ldr	r2, [pc, #140]	; (80073cc <HAL_DMA_IRQHandler+0x6a8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d02c      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a22      	ldr	r2, [pc, #136]	; (80073d0 <HAL_DMA_IRQHandler+0x6ac>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d027      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a20      	ldr	r2, [pc, #128]	; (80073d4 <HAL_DMA_IRQHandler+0x6b0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d022      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <HAL_DMA_IRQHandler+0x6b4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d01d      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1d      	ldr	r2, [pc, #116]	; (80073dc <HAL_DMA_IRQHandler+0x6b8>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d018      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1c      	ldr	r2, [pc, #112]	; (80073e0 <HAL_DMA_IRQHandler+0x6bc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d013      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a1a      	ldr	r2, [pc, #104]	; (80073e4 <HAL_DMA_IRQHandler+0x6c0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00e      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a19      	ldr	r2, [pc, #100]	; (80073e8 <HAL_DMA_IRQHandler+0x6c4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d009      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a17      	ldr	r2, [pc, #92]	; (80073ec <HAL_DMA_IRQHandler+0x6c8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d004      	beq.n	800739c <HAL_DMA_IRQHandler+0x678>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a16      	ldr	r2, [pc, #88]	; (80073f0 <HAL_DMA_IRQHandler+0x6cc>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d12b      	bne.n	80073f4 <HAL_DMA_IRQHandler+0x6d0>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	bf14      	ite	ne
 80073aa:	2301      	movne	r3, #1
 80073ac:	2300      	moveq	r3, #0
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	e02a      	b.n	8007408 <HAL_DMA_IRQHandler+0x6e4>
 80073b2:	bf00      	nop
 80073b4:	40020010 	.word	0x40020010
 80073b8:	40020028 	.word	0x40020028
 80073bc:	40020040 	.word	0x40020040
 80073c0:	40020058 	.word	0x40020058
 80073c4:	40020070 	.word	0x40020070
 80073c8:	40020088 	.word	0x40020088
 80073cc:	400200a0 	.word	0x400200a0
 80073d0:	400200b8 	.word	0x400200b8
 80073d4:	40020410 	.word	0x40020410
 80073d8:	40020428 	.word	0x40020428
 80073dc:	40020440 	.word	0x40020440
 80073e0:	40020458 	.word	0x40020458
 80073e4:	40020470 	.word	0x40020470
 80073e8:	40020488 	.word	0x40020488
 80073ec:	400204a0 	.word	0x400204a0
 80073f0:	400204b8 	.word	0x400204b8
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bf14      	ite	ne
 8007402:	2301      	movne	r3, #1
 8007404:	2300      	moveq	r3, #0
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8087 	beq.w	800751c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2220      	movs	r2, #32
 8007418:	409a      	lsls	r2, r3
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b04      	cmp	r3, #4
 8007428:	d139      	bne.n	800749e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0216 	bic.w	r2, r2, #22
 8007438:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695a      	ldr	r2, [r3, #20]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007448:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d103      	bne.n	800745a <HAL_DMA_IRQHandler+0x736>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0208 	bic.w	r2, r2, #8
 8007468:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	223f      	movs	r2, #63	; 0x3f
 8007474:	409a      	lsls	r2, r3
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 834a 	beq.w	8007b28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	4798      	blx	r3
          }
          return;
 800749c:	e344      	b.n	8007b28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d018      	beq.n	80074de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d108      	bne.n	80074cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d02c      	beq.n	800751c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
 80074ca:	e027      	b.n	800751c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d023      	beq.n	800751c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
 80074dc:	e01e      	b.n	800751c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10f      	bne.n	800750c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0210 	bic.w	r2, r2, #16
 80074fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8306 	beq.w	8007b32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 8088 	beq.w	8007644 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2204      	movs	r2, #4
 8007538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a7a      	ldr	r2, [pc, #488]	; (800772c <HAL_DMA_IRQHandler+0xa08>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d04a      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a79      	ldr	r2, [pc, #484]	; (8007730 <HAL_DMA_IRQHandler+0xa0c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d045      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a77      	ldr	r2, [pc, #476]	; (8007734 <HAL_DMA_IRQHandler+0xa10>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d040      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a76      	ldr	r2, [pc, #472]	; (8007738 <HAL_DMA_IRQHandler+0xa14>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d03b      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a74      	ldr	r2, [pc, #464]	; (800773c <HAL_DMA_IRQHandler+0xa18>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d036      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a73      	ldr	r2, [pc, #460]	; (8007740 <HAL_DMA_IRQHandler+0xa1c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d031      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a71      	ldr	r2, [pc, #452]	; (8007744 <HAL_DMA_IRQHandler+0xa20>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d02c      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a70      	ldr	r2, [pc, #448]	; (8007748 <HAL_DMA_IRQHandler+0xa24>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d027      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a6e      	ldr	r2, [pc, #440]	; (800774c <HAL_DMA_IRQHandler+0xa28>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d022      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a6d      	ldr	r2, [pc, #436]	; (8007750 <HAL_DMA_IRQHandler+0xa2c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d01d      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a6b      	ldr	r2, [pc, #428]	; (8007754 <HAL_DMA_IRQHandler+0xa30>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d018      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a6a      	ldr	r2, [pc, #424]	; (8007758 <HAL_DMA_IRQHandler+0xa34>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d013      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a68      	ldr	r2, [pc, #416]	; (800775c <HAL_DMA_IRQHandler+0xa38>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00e      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a67      	ldr	r2, [pc, #412]	; (8007760 <HAL_DMA_IRQHandler+0xa3c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d009      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a65      	ldr	r2, [pc, #404]	; (8007764 <HAL_DMA_IRQHandler+0xa40>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d004      	beq.n	80075dc <HAL_DMA_IRQHandler+0x8b8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a64      	ldr	r2, [pc, #400]	; (8007768 <HAL_DMA_IRQHandler+0xa44>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d108      	bne.n	80075ee <HAL_DMA_IRQHandler+0x8ca>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0201 	bic.w	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	e007      	b.n	80075fe <HAL_DMA_IRQHandler+0x8da>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0201 	bic.w	r2, r2, #1
 80075fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007606:	429a      	cmp	r2, r3
 8007608:	d307      	bcc.n	800761a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1f2      	bne.n	80075fe <HAL_DMA_IRQHandler+0x8da>
 8007618:	e000      	b.n	800761c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800761a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2203      	movs	r2, #3
 800762e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007632:	e003      	b.n	800763c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 8272 	beq.w	8007b32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
 8007656:	e26c      	b.n	8007b32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a43      	ldr	r2, [pc, #268]	; (800776c <HAL_DMA_IRQHandler+0xa48>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d022      	beq.n	80076a8 <HAL_DMA_IRQHandler+0x984>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a42      	ldr	r2, [pc, #264]	; (8007770 <HAL_DMA_IRQHandler+0xa4c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d01d      	beq.n	80076a8 <HAL_DMA_IRQHandler+0x984>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a40      	ldr	r2, [pc, #256]	; (8007774 <HAL_DMA_IRQHandler+0xa50>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d018      	beq.n	80076a8 <HAL_DMA_IRQHandler+0x984>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a3f      	ldr	r2, [pc, #252]	; (8007778 <HAL_DMA_IRQHandler+0xa54>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d013      	beq.n	80076a8 <HAL_DMA_IRQHandler+0x984>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a3d      	ldr	r2, [pc, #244]	; (800777c <HAL_DMA_IRQHandler+0xa58>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00e      	beq.n	80076a8 <HAL_DMA_IRQHandler+0x984>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a3c      	ldr	r2, [pc, #240]	; (8007780 <HAL_DMA_IRQHandler+0xa5c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d009      	beq.n	80076a8 <HAL_DMA_IRQHandler+0x984>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a3a      	ldr	r2, [pc, #232]	; (8007784 <HAL_DMA_IRQHandler+0xa60>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d004      	beq.n	80076a8 <HAL_DMA_IRQHandler+0x984>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a39      	ldr	r2, [pc, #228]	; (8007788 <HAL_DMA_IRQHandler+0xa64>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d101      	bne.n	80076ac <HAL_DMA_IRQHandler+0x988>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <HAL_DMA_IRQHandler+0x98a>
 80076ac:	2300      	movs	r3, #0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 823f 	beq.w	8007b32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	2204      	movs	r2, #4
 80076c6:	409a      	lsls	r2, r3
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 80cd 	beq.w	800786c <HAL_DMA_IRQHandler+0xb48>
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 80c7 	beq.w	800786c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	2204      	movs	r2, #4
 80076e8:	409a      	lsls	r2, r3
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d049      	beq.n	800778c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d109      	bne.n	8007716 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 8210 	beq.w	8007b2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007714:	e20a      	b.n	8007b2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 8206 	beq.w	8007b2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007728:	e200      	b.n	8007b2c <HAL_DMA_IRQHandler+0xe08>
 800772a:	bf00      	nop
 800772c:	40020010 	.word	0x40020010
 8007730:	40020028 	.word	0x40020028
 8007734:	40020040 	.word	0x40020040
 8007738:	40020058 	.word	0x40020058
 800773c:	40020070 	.word	0x40020070
 8007740:	40020088 	.word	0x40020088
 8007744:	400200a0 	.word	0x400200a0
 8007748:	400200b8 	.word	0x400200b8
 800774c:	40020410 	.word	0x40020410
 8007750:	40020428 	.word	0x40020428
 8007754:	40020440 	.word	0x40020440
 8007758:	40020458 	.word	0x40020458
 800775c:	40020470 	.word	0x40020470
 8007760:	40020488 	.word	0x40020488
 8007764:	400204a0 	.word	0x400204a0
 8007768:	400204b8 	.word	0x400204b8
 800776c:	58025408 	.word	0x58025408
 8007770:	5802541c 	.word	0x5802541c
 8007774:	58025430 	.word	0x58025430
 8007778:	58025444 	.word	0x58025444
 800777c:	58025458 	.word	0x58025458
 8007780:	5802546c 	.word	0x5802546c
 8007784:	58025480 	.word	0x58025480
 8007788:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d160      	bne.n	8007858 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a7f      	ldr	r2, [pc, #508]	; (8007998 <HAL_DMA_IRQHandler+0xc74>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d04a      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a7d      	ldr	r2, [pc, #500]	; (800799c <HAL_DMA_IRQHandler+0xc78>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d045      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a7c      	ldr	r2, [pc, #496]	; (80079a0 <HAL_DMA_IRQHandler+0xc7c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d040      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a7a      	ldr	r2, [pc, #488]	; (80079a4 <HAL_DMA_IRQHandler+0xc80>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d03b      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a79      	ldr	r2, [pc, #484]	; (80079a8 <HAL_DMA_IRQHandler+0xc84>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d036      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a77      	ldr	r2, [pc, #476]	; (80079ac <HAL_DMA_IRQHandler+0xc88>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d031      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a76      	ldr	r2, [pc, #472]	; (80079b0 <HAL_DMA_IRQHandler+0xc8c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d02c      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a74      	ldr	r2, [pc, #464]	; (80079b4 <HAL_DMA_IRQHandler+0xc90>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d027      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a73      	ldr	r2, [pc, #460]	; (80079b8 <HAL_DMA_IRQHandler+0xc94>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d022      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a71      	ldr	r2, [pc, #452]	; (80079bc <HAL_DMA_IRQHandler+0xc98>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d01d      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a70      	ldr	r2, [pc, #448]	; (80079c0 <HAL_DMA_IRQHandler+0xc9c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d018      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a6e      	ldr	r2, [pc, #440]	; (80079c4 <HAL_DMA_IRQHandler+0xca0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d013      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a6d      	ldr	r2, [pc, #436]	; (80079c8 <HAL_DMA_IRQHandler+0xca4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00e      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a6b      	ldr	r2, [pc, #428]	; (80079cc <HAL_DMA_IRQHandler+0xca8>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d009      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a6a      	ldr	r2, [pc, #424]	; (80079d0 <HAL_DMA_IRQHandler+0xcac>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d004      	beq.n	8007836 <HAL_DMA_IRQHandler+0xb12>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a68      	ldr	r2, [pc, #416]	; (80079d4 <HAL_DMA_IRQHandler+0xcb0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d108      	bne.n	8007848 <HAL_DMA_IRQHandler+0xb24>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0208 	bic.w	r2, r2, #8
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	e007      	b.n	8007858 <HAL_DMA_IRQHandler+0xb34>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0204 	bic.w	r2, r2, #4
 8007856:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8165 	beq.w	8007b2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800786a:	e15f      	b.n	8007b2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	2202      	movs	r2, #2
 8007876:	409a      	lsls	r2, r3
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	4013      	ands	r3, r2
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 80c5 	beq.w	8007a0c <HAL_DMA_IRQHandler+0xce8>
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80bf 	beq.w	8007a0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007892:	f003 031f 	and.w	r3, r3, #31
 8007896:	2202      	movs	r2, #2
 8007898:	409a      	lsls	r2, r3
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d018      	beq.n	80078da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 813a 	beq.w	8007b30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078c4:	e134      	b.n	8007b30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 8130 	beq.w	8007b30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078d8:	e12a      	b.n	8007b30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f040 8089 	bne.w	80079f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a2b      	ldr	r2, [pc, #172]	; (8007998 <HAL_DMA_IRQHandler+0xc74>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d04a      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a29      	ldr	r2, [pc, #164]	; (800799c <HAL_DMA_IRQHandler+0xc78>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d045      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a28      	ldr	r2, [pc, #160]	; (80079a0 <HAL_DMA_IRQHandler+0xc7c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d040      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a26      	ldr	r2, [pc, #152]	; (80079a4 <HAL_DMA_IRQHandler+0xc80>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d03b      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a25      	ldr	r2, [pc, #148]	; (80079a8 <HAL_DMA_IRQHandler+0xc84>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d036      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a23      	ldr	r2, [pc, #140]	; (80079ac <HAL_DMA_IRQHandler+0xc88>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d031      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a22      	ldr	r2, [pc, #136]	; (80079b0 <HAL_DMA_IRQHandler+0xc8c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d02c      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a20      	ldr	r2, [pc, #128]	; (80079b4 <HAL_DMA_IRQHandler+0xc90>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d027      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a1f      	ldr	r2, [pc, #124]	; (80079b8 <HAL_DMA_IRQHandler+0xc94>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d022      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a1d      	ldr	r2, [pc, #116]	; (80079bc <HAL_DMA_IRQHandler+0xc98>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01d      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a1c      	ldr	r2, [pc, #112]	; (80079c0 <HAL_DMA_IRQHandler+0xc9c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d018      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1a      	ldr	r2, [pc, #104]	; (80079c4 <HAL_DMA_IRQHandler+0xca0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d013      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a19      	ldr	r2, [pc, #100]	; (80079c8 <HAL_DMA_IRQHandler+0xca4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00e      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a17      	ldr	r2, [pc, #92]	; (80079cc <HAL_DMA_IRQHandler+0xca8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d009      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a16      	ldr	r2, [pc, #88]	; (80079d0 <HAL_DMA_IRQHandler+0xcac>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d004      	beq.n	8007986 <HAL_DMA_IRQHandler+0xc62>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a14      	ldr	r2, [pc, #80]	; (80079d4 <HAL_DMA_IRQHandler+0xcb0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d128      	bne.n	80079d8 <HAL_DMA_IRQHandler+0xcb4>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0214 	bic.w	r2, r2, #20
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e027      	b.n	80079e8 <HAL_DMA_IRQHandler+0xcc4>
 8007998:	40020010 	.word	0x40020010
 800799c:	40020028 	.word	0x40020028
 80079a0:	40020040 	.word	0x40020040
 80079a4:	40020058 	.word	0x40020058
 80079a8:	40020070 	.word	0x40020070
 80079ac:	40020088 	.word	0x40020088
 80079b0:	400200a0 	.word	0x400200a0
 80079b4:	400200b8 	.word	0x400200b8
 80079b8:	40020410 	.word	0x40020410
 80079bc:	40020428 	.word	0x40020428
 80079c0:	40020440 	.word	0x40020440
 80079c4:	40020458 	.word	0x40020458
 80079c8:	40020470 	.word	0x40020470
 80079cc:	40020488 	.word	0x40020488
 80079d0:	400204a0 	.word	0x400204a0
 80079d4:	400204b8 	.word	0x400204b8
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 020a 	bic.w	r2, r2, #10
 80079e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 8097 	beq.w	8007b30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a0a:	e091      	b.n	8007b30 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a10:	f003 031f 	and.w	r3, r3, #31
 8007a14:	2208      	movs	r2, #8
 8007a16:	409a      	lsls	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 8088 	beq.w	8007b32 <HAL_DMA_IRQHandler+0xe0e>
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8082 	beq.w	8007b32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a41      	ldr	r2, [pc, #260]	; (8007b38 <HAL_DMA_IRQHandler+0xe14>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d04a      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a3f      	ldr	r2, [pc, #252]	; (8007b3c <HAL_DMA_IRQHandler+0xe18>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d045      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a3e      	ldr	r2, [pc, #248]	; (8007b40 <HAL_DMA_IRQHandler+0xe1c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d040      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a3c      	ldr	r2, [pc, #240]	; (8007b44 <HAL_DMA_IRQHandler+0xe20>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d03b      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a3b      	ldr	r2, [pc, #236]	; (8007b48 <HAL_DMA_IRQHandler+0xe24>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d036      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a39      	ldr	r2, [pc, #228]	; (8007b4c <HAL_DMA_IRQHandler+0xe28>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d031      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a38      	ldr	r2, [pc, #224]	; (8007b50 <HAL_DMA_IRQHandler+0xe2c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d02c      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a36      	ldr	r2, [pc, #216]	; (8007b54 <HAL_DMA_IRQHandler+0xe30>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d027      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a35      	ldr	r2, [pc, #212]	; (8007b58 <HAL_DMA_IRQHandler+0xe34>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d022      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a33      	ldr	r2, [pc, #204]	; (8007b5c <HAL_DMA_IRQHandler+0xe38>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d01d      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a32      	ldr	r2, [pc, #200]	; (8007b60 <HAL_DMA_IRQHandler+0xe3c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d018      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a30      	ldr	r2, [pc, #192]	; (8007b64 <HAL_DMA_IRQHandler+0xe40>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d013      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a2f      	ldr	r2, [pc, #188]	; (8007b68 <HAL_DMA_IRQHandler+0xe44>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00e      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a2d      	ldr	r2, [pc, #180]	; (8007b6c <HAL_DMA_IRQHandler+0xe48>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d009      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a2c      	ldr	r2, [pc, #176]	; (8007b70 <HAL_DMA_IRQHandler+0xe4c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_DMA_IRQHandler+0xdaa>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a2a      	ldr	r2, [pc, #168]	; (8007b74 <HAL_DMA_IRQHandler+0xe50>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d108      	bne.n	8007ae0 <HAL_DMA_IRQHandler+0xdbc>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 021c 	bic.w	r2, r2, #28
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	e007      	b.n	8007af0 <HAL_DMA_IRQHandler+0xdcc>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 020e 	bic.w	r2, r2, #14
 8007aee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	2201      	movs	r2, #1
 8007afa:	409a      	lsls	r2, r3
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d009      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
 8007b26:	e004      	b.n	8007b32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007b28:	bf00      	nop
 8007b2a:	e002      	b.n	8007b32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b2c:	bf00      	nop
 8007b2e:	e000      	b.n	8007b32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007b32:	3728      	adds	r7, #40	; 0x28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40020010 	.word	0x40020010
 8007b3c:	40020028 	.word	0x40020028
 8007b40:	40020040 	.word	0x40020040
 8007b44:	40020058 	.word	0x40020058
 8007b48:	40020070 	.word	0x40020070
 8007b4c:	40020088 	.word	0x40020088
 8007b50:	400200a0 	.word	0x400200a0
 8007b54:	400200b8 	.word	0x400200b8
 8007b58:	40020410 	.word	0x40020410
 8007b5c:	40020428 	.word	0x40020428
 8007b60:	40020440 	.word	0x40020440
 8007b64:	40020458 	.word	0x40020458
 8007b68:	40020470 	.word	0x40020470
 8007b6c:	40020488 	.word	0x40020488
 8007b70:	400204a0 	.word	0x400204a0
 8007b74:	400204b8 	.word	0x400204b8

08007b78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a7f      	ldr	r2, [pc, #508]	; (8007d94 <DMA_SetConfig+0x21c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d072      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a7d      	ldr	r2, [pc, #500]	; (8007d98 <DMA_SetConfig+0x220>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d06d      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a7c      	ldr	r2, [pc, #496]	; (8007d9c <DMA_SetConfig+0x224>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d068      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a7a      	ldr	r2, [pc, #488]	; (8007da0 <DMA_SetConfig+0x228>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d063      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a79      	ldr	r2, [pc, #484]	; (8007da4 <DMA_SetConfig+0x22c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d05e      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a77      	ldr	r2, [pc, #476]	; (8007da8 <DMA_SetConfig+0x230>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d059      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a76      	ldr	r2, [pc, #472]	; (8007dac <DMA_SetConfig+0x234>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d054      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a74      	ldr	r2, [pc, #464]	; (8007db0 <DMA_SetConfig+0x238>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d04f      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a73      	ldr	r2, [pc, #460]	; (8007db4 <DMA_SetConfig+0x23c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d04a      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a71      	ldr	r2, [pc, #452]	; (8007db8 <DMA_SetConfig+0x240>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d045      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a70      	ldr	r2, [pc, #448]	; (8007dbc <DMA_SetConfig+0x244>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d040      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a6e      	ldr	r2, [pc, #440]	; (8007dc0 <DMA_SetConfig+0x248>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d03b      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a6d      	ldr	r2, [pc, #436]	; (8007dc4 <DMA_SetConfig+0x24c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d036      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a6b      	ldr	r2, [pc, #428]	; (8007dc8 <DMA_SetConfig+0x250>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d031      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a6a      	ldr	r2, [pc, #424]	; (8007dcc <DMA_SetConfig+0x254>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d02c      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a68      	ldr	r2, [pc, #416]	; (8007dd0 <DMA_SetConfig+0x258>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d027      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a67      	ldr	r2, [pc, #412]	; (8007dd4 <DMA_SetConfig+0x25c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d022      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a65      	ldr	r2, [pc, #404]	; (8007dd8 <DMA_SetConfig+0x260>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d01d      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a64      	ldr	r2, [pc, #400]	; (8007ddc <DMA_SetConfig+0x264>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d018      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a62      	ldr	r2, [pc, #392]	; (8007de0 <DMA_SetConfig+0x268>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d013      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a61      	ldr	r2, [pc, #388]	; (8007de4 <DMA_SetConfig+0x26c>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00e      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a5f      	ldr	r2, [pc, #380]	; (8007de8 <DMA_SetConfig+0x270>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d009      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a5e      	ldr	r2, [pc, #376]	; (8007dec <DMA_SetConfig+0x274>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d004      	beq.n	8007c82 <DMA_SetConfig+0x10a>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a5c      	ldr	r2, [pc, #368]	; (8007df0 <DMA_SetConfig+0x278>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d101      	bne.n	8007c86 <DMA_SetConfig+0x10e>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <DMA_SetConfig+0x110>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00d      	beq.n	8007ca8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007c94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d004      	beq.n	8007ca8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ca6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a39      	ldr	r2, [pc, #228]	; (8007d94 <DMA_SetConfig+0x21c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d04a      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a38      	ldr	r2, [pc, #224]	; (8007d98 <DMA_SetConfig+0x220>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d045      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a36      	ldr	r2, [pc, #216]	; (8007d9c <DMA_SetConfig+0x224>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d040      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a35      	ldr	r2, [pc, #212]	; (8007da0 <DMA_SetConfig+0x228>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d03b      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a33      	ldr	r2, [pc, #204]	; (8007da4 <DMA_SetConfig+0x22c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d036      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a32      	ldr	r2, [pc, #200]	; (8007da8 <DMA_SetConfig+0x230>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d031      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a30      	ldr	r2, [pc, #192]	; (8007dac <DMA_SetConfig+0x234>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d02c      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a2f      	ldr	r2, [pc, #188]	; (8007db0 <DMA_SetConfig+0x238>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d027      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a2d      	ldr	r2, [pc, #180]	; (8007db4 <DMA_SetConfig+0x23c>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d022      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a2c      	ldr	r2, [pc, #176]	; (8007db8 <DMA_SetConfig+0x240>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d01d      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a2a      	ldr	r2, [pc, #168]	; (8007dbc <DMA_SetConfig+0x244>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d018      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a29      	ldr	r2, [pc, #164]	; (8007dc0 <DMA_SetConfig+0x248>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d013      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a27      	ldr	r2, [pc, #156]	; (8007dc4 <DMA_SetConfig+0x24c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00e      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a26      	ldr	r2, [pc, #152]	; (8007dc8 <DMA_SetConfig+0x250>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d009      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a24      	ldr	r2, [pc, #144]	; (8007dcc <DMA_SetConfig+0x254>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d004      	beq.n	8007d48 <DMA_SetConfig+0x1d0>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a23      	ldr	r2, [pc, #140]	; (8007dd0 <DMA_SetConfig+0x258>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d101      	bne.n	8007d4c <DMA_SetConfig+0x1d4>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <DMA_SetConfig+0x1d6>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d059      	beq.n	8007e06 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d56:	f003 031f 	and.w	r3, r3, #31
 8007d5a:	223f      	movs	r2, #63	; 0x3f
 8007d5c:	409a      	lsls	r2, r3
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b40      	cmp	r3, #64	; 0x40
 8007d80:	d138      	bne.n	8007df4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007d92:	e086      	b.n	8007ea2 <DMA_SetConfig+0x32a>
 8007d94:	40020010 	.word	0x40020010
 8007d98:	40020028 	.word	0x40020028
 8007d9c:	40020040 	.word	0x40020040
 8007da0:	40020058 	.word	0x40020058
 8007da4:	40020070 	.word	0x40020070
 8007da8:	40020088 	.word	0x40020088
 8007dac:	400200a0 	.word	0x400200a0
 8007db0:	400200b8 	.word	0x400200b8
 8007db4:	40020410 	.word	0x40020410
 8007db8:	40020428 	.word	0x40020428
 8007dbc:	40020440 	.word	0x40020440
 8007dc0:	40020458 	.word	0x40020458
 8007dc4:	40020470 	.word	0x40020470
 8007dc8:	40020488 	.word	0x40020488
 8007dcc:	400204a0 	.word	0x400204a0
 8007dd0:	400204b8 	.word	0x400204b8
 8007dd4:	58025408 	.word	0x58025408
 8007dd8:	5802541c 	.word	0x5802541c
 8007ddc:	58025430 	.word	0x58025430
 8007de0:	58025444 	.word	0x58025444
 8007de4:	58025458 	.word	0x58025458
 8007de8:	5802546c 	.word	0x5802546c
 8007dec:	58025480 	.word	0x58025480
 8007df0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	60da      	str	r2, [r3, #12]
}
 8007e04:	e04d      	b.n	8007ea2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a29      	ldr	r2, [pc, #164]	; (8007eb0 <DMA_SetConfig+0x338>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d022      	beq.n	8007e56 <DMA_SetConfig+0x2de>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a27      	ldr	r2, [pc, #156]	; (8007eb4 <DMA_SetConfig+0x33c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d01d      	beq.n	8007e56 <DMA_SetConfig+0x2de>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a26      	ldr	r2, [pc, #152]	; (8007eb8 <DMA_SetConfig+0x340>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d018      	beq.n	8007e56 <DMA_SetConfig+0x2de>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a24      	ldr	r2, [pc, #144]	; (8007ebc <DMA_SetConfig+0x344>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d013      	beq.n	8007e56 <DMA_SetConfig+0x2de>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a23      	ldr	r2, [pc, #140]	; (8007ec0 <DMA_SetConfig+0x348>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d00e      	beq.n	8007e56 <DMA_SetConfig+0x2de>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a21      	ldr	r2, [pc, #132]	; (8007ec4 <DMA_SetConfig+0x34c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d009      	beq.n	8007e56 <DMA_SetConfig+0x2de>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a20      	ldr	r2, [pc, #128]	; (8007ec8 <DMA_SetConfig+0x350>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d004      	beq.n	8007e56 <DMA_SetConfig+0x2de>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a1e      	ldr	r2, [pc, #120]	; (8007ecc <DMA_SetConfig+0x354>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d101      	bne.n	8007e5a <DMA_SetConfig+0x2e2>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <DMA_SetConfig+0x2e4>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d020      	beq.n	8007ea2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e64:	f003 031f 	and.w	r3, r3, #31
 8007e68:	2201      	movs	r2, #1
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b40      	cmp	r3, #64	; 0x40
 8007e7e:	d108      	bne.n	8007e92 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	60da      	str	r2, [r3, #12]
}
 8007e90:	e007      	b.n	8007ea2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	60da      	str	r2, [r3, #12]
}
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	58025408 	.word	0x58025408
 8007eb4:	5802541c 	.word	0x5802541c
 8007eb8:	58025430 	.word	0x58025430
 8007ebc:	58025444 	.word	0x58025444
 8007ec0:	58025458 	.word	0x58025458
 8007ec4:	5802546c 	.word	0x5802546c
 8007ec8:	58025480 	.word	0x58025480
 8007ecc:	58025494 	.word	0x58025494

08007ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a42      	ldr	r2, [pc, #264]	; (8007fe8 <DMA_CalcBaseAndBitshift+0x118>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d04a      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a41      	ldr	r2, [pc, #260]	; (8007fec <DMA_CalcBaseAndBitshift+0x11c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d045      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a3f      	ldr	r2, [pc, #252]	; (8007ff0 <DMA_CalcBaseAndBitshift+0x120>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d040      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a3e      	ldr	r2, [pc, #248]	; (8007ff4 <DMA_CalcBaseAndBitshift+0x124>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d03b      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a3c      	ldr	r2, [pc, #240]	; (8007ff8 <DMA_CalcBaseAndBitshift+0x128>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d036      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a3b      	ldr	r2, [pc, #236]	; (8007ffc <DMA_CalcBaseAndBitshift+0x12c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d031      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a39      	ldr	r2, [pc, #228]	; (8008000 <DMA_CalcBaseAndBitshift+0x130>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d02c      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a38      	ldr	r2, [pc, #224]	; (8008004 <DMA_CalcBaseAndBitshift+0x134>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d027      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a36      	ldr	r2, [pc, #216]	; (8008008 <DMA_CalcBaseAndBitshift+0x138>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d022      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a35      	ldr	r2, [pc, #212]	; (800800c <DMA_CalcBaseAndBitshift+0x13c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d01d      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a33      	ldr	r2, [pc, #204]	; (8008010 <DMA_CalcBaseAndBitshift+0x140>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d018      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a32      	ldr	r2, [pc, #200]	; (8008014 <DMA_CalcBaseAndBitshift+0x144>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d013      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a30      	ldr	r2, [pc, #192]	; (8008018 <DMA_CalcBaseAndBitshift+0x148>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00e      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a2f      	ldr	r2, [pc, #188]	; (800801c <DMA_CalcBaseAndBitshift+0x14c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d009      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a2d      	ldr	r2, [pc, #180]	; (8008020 <DMA_CalcBaseAndBitshift+0x150>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d004      	beq.n	8007f78 <DMA_CalcBaseAndBitshift+0xa8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2c      	ldr	r2, [pc, #176]	; (8008024 <DMA_CalcBaseAndBitshift+0x154>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d101      	bne.n	8007f7c <DMA_CalcBaseAndBitshift+0xac>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <DMA_CalcBaseAndBitshift+0xae>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d024      	beq.n	8007fcc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	3b10      	subs	r3, #16
 8007f8a:	4a27      	ldr	r2, [pc, #156]	; (8008028 <DMA_CalcBaseAndBitshift+0x158>)
 8007f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	4a24      	ldr	r2, [pc, #144]	; (800802c <DMA_CalcBaseAndBitshift+0x15c>)
 8007f9c:	5cd3      	ldrb	r3, [r2, r3]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d908      	bls.n	8007fbc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	4b1f      	ldr	r3, [pc, #124]	; (8008030 <DMA_CalcBaseAndBitshift+0x160>)
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	1d1a      	adds	r2, r3, #4
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	659a      	str	r2, [r3, #88]	; 0x58
 8007fba:	e00d      	b.n	8007fd8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4b1b      	ldr	r3, [pc, #108]	; (8008030 <DMA_CalcBaseAndBitshift+0x160>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8007fca:	e005      	b.n	8007fd8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	40020010 	.word	0x40020010
 8007fec:	40020028 	.word	0x40020028
 8007ff0:	40020040 	.word	0x40020040
 8007ff4:	40020058 	.word	0x40020058
 8007ff8:	40020070 	.word	0x40020070
 8007ffc:	40020088 	.word	0x40020088
 8008000:	400200a0 	.word	0x400200a0
 8008004:	400200b8 	.word	0x400200b8
 8008008:	40020410 	.word	0x40020410
 800800c:	40020428 	.word	0x40020428
 8008010:	40020440 	.word	0x40020440
 8008014:	40020458 	.word	0x40020458
 8008018:	40020470 	.word	0x40020470
 800801c:	40020488 	.word	0x40020488
 8008020:	400204a0 	.word	0x400204a0
 8008024:	400204b8 	.word	0x400204b8
 8008028:	aaaaaaab 	.word	0xaaaaaaab
 800802c:	0800fce0 	.word	0x0800fce0
 8008030:	fffffc00 	.word	0xfffffc00

08008034 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d120      	bne.n	800808a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	2b03      	cmp	r3, #3
 800804e:	d858      	bhi.n	8008102 <DMA_CheckFifoParam+0xce>
 8008050:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <DMA_CheckFifoParam+0x24>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	08008069 	.word	0x08008069
 800805c:	0800807b 	.word	0x0800807b
 8008060:	08008069 	.word	0x08008069
 8008064:	08008103 	.word	0x08008103
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d048      	beq.n	8008106 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008078:	e045      	b.n	8008106 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008082:	d142      	bne.n	800810a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008088:	e03f      	b.n	800810a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008092:	d123      	bne.n	80080dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008098:	2b03      	cmp	r3, #3
 800809a:	d838      	bhi.n	800810e <DMA_CheckFifoParam+0xda>
 800809c:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <DMA_CheckFifoParam+0x70>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	080080b5 	.word	0x080080b5
 80080a8:	080080bb 	.word	0x080080bb
 80080ac:	080080b5 	.word	0x080080b5
 80080b0:	080080cd 	.word	0x080080cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
        break;
 80080b8:	e030      	b.n	800811c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d025      	beq.n	8008112 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80080ca:	e022      	b.n	8008112 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80080d4:	d11f      	bne.n	8008116 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80080da:	e01c      	b.n	8008116 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d902      	bls.n	80080ea <DMA_CheckFifoParam+0xb6>
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d003      	beq.n	80080f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80080e8:	e018      	b.n	800811c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	73fb      	strb	r3, [r7, #15]
        break;
 80080ee:	e015      	b.n	800811c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00e      	beq.n	800811a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008100:	e00b      	b.n	800811a <DMA_CheckFifoParam+0xe6>
        break;
 8008102:	bf00      	nop
 8008104:	e00a      	b.n	800811c <DMA_CheckFifoParam+0xe8>
        break;
 8008106:	bf00      	nop
 8008108:	e008      	b.n	800811c <DMA_CheckFifoParam+0xe8>
        break;
 800810a:	bf00      	nop
 800810c:	e006      	b.n	800811c <DMA_CheckFifoParam+0xe8>
        break;
 800810e:	bf00      	nop
 8008110:	e004      	b.n	800811c <DMA_CheckFifoParam+0xe8>
        break;
 8008112:	bf00      	nop
 8008114:	e002      	b.n	800811c <DMA_CheckFifoParam+0xe8>
        break;
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <DMA_CheckFifoParam+0xe8>
    break;
 800811a:	bf00      	nop
    }
  }

  return status;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop

0800812c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a38      	ldr	r2, [pc, #224]	; (8008220 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d022      	beq.n	800818a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a36      	ldr	r2, [pc, #216]	; (8008224 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d01d      	beq.n	800818a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a35      	ldr	r2, [pc, #212]	; (8008228 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d018      	beq.n	800818a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a33      	ldr	r2, [pc, #204]	; (800822c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d013      	beq.n	800818a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a32      	ldr	r2, [pc, #200]	; (8008230 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d00e      	beq.n	800818a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a30      	ldr	r2, [pc, #192]	; (8008234 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d009      	beq.n	800818a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a2f      	ldr	r2, [pc, #188]	; (8008238 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d004      	beq.n	800818a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a2d      	ldr	r2, [pc, #180]	; (800823c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d101      	bne.n	800818e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800818e:	2300      	movs	r3, #0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d01a      	beq.n	80081ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	b2db      	uxtb	r3, r3
 800819a:	3b08      	subs	r3, #8
 800819c:	4a28      	ldr	r2, [pc, #160]	; (8008240 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800819e:	fba2 2303 	umull	r2, r3, r2, r3
 80081a2:	091b      	lsrs	r3, r3, #4
 80081a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4b26      	ldr	r3, [pc, #152]	; (8008244 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	461a      	mov	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a24      	ldr	r2, [pc, #144]	; (8008248 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80081b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f003 031f 	and.w	r3, r3, #31
 80081c0:	2201      	movs	r2, #1
 80081c2:	409a      	lsls	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80081c8:	e024      	b.n	8008214 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	3b10      	subs	r3, #16
 80081d2:	4a1e      	ldr	r2, [pc, #120]	; (800824c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80081d4:	fba2 2303 	umull	r2, r3, r2, r3
 80081d8:	091b      	lsrs	r3, r3, #4
 80081da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4a1c      	ldr	r2, [pc, #112]	; (8008250 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d806      	bhi.n	80081f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4a1b      	ldr	r2, [pc, #108]	; (8008254 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d902      	bls.n	80081f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3308      	adds	r3, #8
 80081f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4b18      	ldr	r3, [pc, #96]	; (8008258 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a16      	ldr	r2, [pc, #88]	; (800825c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008204:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f003 031f 	and.w	r3, r3, #31
 800820c:	2201      	movs	r2, #1
 800820e:	409a      	lsls	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	58025408 	.word	0x58025408
 8008224:	5802541c 	.word	0x5802541c
 8008228:	58025430 	.word	0x58025430
 800822c:	58025444 	.word	0x58025444
 8008230:	58025458 	.word	0x58025458
 8008234:	5802546c 	.word	0x5802546c
 8008238:	58025480 	.word	0x58025480
 800823c:	58025494 	.word	0x58025494
 8008240:	cccccccd 	.word	0xcccccccd
 8008244:	16009600 	.word	0x16009600
 8008248:	58025880 	.word	0x58025880
 800824c:	aaaaaaab 	.word	0xaaaaaaab
 8008250:	400204b8 	.word	0x400204b8
 8008254:	4002040f 	.word	0x4002040f
 8008258:	10008200 	.word	0x10008200
 800825c:	40020880 	.word	0x40020880

08008260 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d04a      	beq.n	800830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b08      	cmp	r3, #8
 800827a:	d847      	bhi.n	800830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a25      	ldr	r2, [pc, #148]	; (8008318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d022      	beq.n	80082cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a24      	ldr	r2, [pc, #144]	; (800831c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d01d      	beq.n	80082cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a22      	ldr	r2, [pc, #136]	; (8008320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d018      	beq.n	80082cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a21      	ldr	r2, [pc, #132]	; (8008324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d013      	beq.n	80082cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a1f      	ldr	r2, [pc, #124]	; (8008328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00e      	beq.n	80082cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a1e      	ldr	r2, [pc, #120]	; (800832c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d009      	beq.n	80082cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a1c      	ldr	r2, [pc, #112]	; (8008330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d004      	beq.n	80082cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a1b      	ldr	r2, [pc, #108]	; (8008334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d101      	bne.n	80082d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80082cc:	2301      	movs	r3, #1
 80082ce:	e000      	b.n	80082d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80082d0:	2300      	movs	r3, #0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4b17      	ldr	r3, [pc, #92]	; (8008338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	461a      	mov	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a15      	ldr	r2, [pc, #84]	; (800833c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80082e8:	671a      	str	r2, [r3, #112]	; 0x70
 80082ea:	e009      	b.n	8008300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4b14      	ldr	r3, [pc, #80]	; (8008340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	461a      	mov	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a11      	ldr	r2, [pc, #68]	; (8008344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80082fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3b01      	subs	r3, #1
 8008304:	2201      	movs	r2, #1
 8008306:	409a      	lsls	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800830c:	bf00      	nop
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	58025408 	.word	0x58025408
 800831c:	5802541c 	.word	0x5802541c
 8008320:	58025430 	.word	0x58025430
 8008324:	58025444 	.word	0x58025444
 8008328:	58025458 	.word	0x58025458
 800832c:	5802546c 	.word	0x5802546c
 8008330:	58025480 	.word	0x58025480
 8008334:	58025494 	.word	0x58025494
 8008338:	1600963f 	.word	0x1600963f
 800833c:	58025940 	.word	0x58025940
 8008340:	1000823f 	.word	0x1000823f
 8008344:	40020940 	.word	0x40020940

08008348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008348:	b480      	push	{r7}
 800834a:	b089      	sub	sp, #36	; 0x24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008352:	2300      	movs	r3, #0
 8008354:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008356:	4b86      	ldr	r3, [pc, #536]	; (8008570 <HAL_GPIO_Init+0x228>)
 8008358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800835a:	e18c      	b.n	8008676 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	2101      	movs	r1, #1
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	fa01 f303 	lsl.w	r3, r1, r3
 8008368:	4013      	ands	r3, r2
 800836a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 817e 	beq.w	8008670 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	2b01      	cmp	r3, #1
 800837e:	d005      	beq.n	800838c <HAL_GPIO_Init+0x44>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d130      	bne.n	80083ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	2203      	movs	r2, #3
 8008398:	fa02 f303 	lsl.w	r3, r2, r3
 800839c:	43db      	mvns	r3, r3
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	4013      	ands	r3, r2
 80083a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	fa02 f303 	lsl.w	r3, r2, r3
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80083c2:	2201      	movs	r2, #1
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ca:	43db      	mvns	r3, r3
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	4013      	ands	r3, r2
 80083d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	091b      	lsrs	r3, r3, #4
 80083d8:	f003 0201 	and.w	r2, r3, #1
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	fa02 f303 	lsl.w	r3, r2, r3
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d017      	beq.n	800842a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	2203      	movs	r2, #3
 8008406:	fa02 f303 	lsl.w	r3, r2, r3
 800840a:	43db      	mvns	r3, r3
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	4013      	ands	r3, r2
 8008410:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	fa02 f303 	lsl.w	r3, r2, r3
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	4313      	orrs	r3, r2
 8008422:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	2b02      	cmp	r3, #2
 8008434:	d123      	bne.n	800847e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	08da      	lsrs	r2, r3, #3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3208      	adds	r2, #8
 800843e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	220f      	movs	r2, #15
 800844e:	fa02 f303 	lsl.w	r3, r2, r3
 8008452:	43db      	mvns	r3, r3
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	4013      	ands	r3, r2
 8008458:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	691a      	ldr	r2, [r3, #16]
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	f003 0307 	and.w	r3, r3, #7
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	4313      	orrs	r3, r2
 800846e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	08da      	lsrs	r2, r3, #3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3208      	adds	r2, #8
 8008478:	69b9      	ldr	r1, [r7, #24]
 800847a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	005b      	lsls	r3, r3, #1
 8008488:	2203      	movs	r2, #3
 800848a:	fa02 f303 	lsl.w	r3, r2, r3
 800848e:	43db      	mvns	r3, r3
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	4013      	ands	r3, r2
 8008494:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f003 0203 	and.w	r2, r3, #3
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	fa02 f303 	lsl.w	r3, r2, r3
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80d8 	beq.w	8008670 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084c0:	4b2c      	ldr	r3, [pc, #176]	; (8008574 <HAL_GPIO_Init+0x22c>)
 80084c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084c6:	4a2b      	ldr	r2, [pc, #172]	; (8008574 <HAL_GPIO_Init+0x22c>)
 80084c8:	f043 0302 	orr.w	r3, r3, #2
 80084cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80084d0:	4b28      	ldr	r3, [pc, #160]	; (8008574 <HAL_GPIO_Init+0x22c>)
 80084d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084de:	4a26      	ldr	r2, [pc, #152]	; (8008578 <HAL_GPIO_Init+0x230>)
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	089b      	lsrs	r3, r3, #2
 80084e4:	3302      	adds	r3, #2
 80084e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	220f      	movs	r2, #15
 80084f6:	fa02 f303 	lsl.w	r3, r2, r3
 80084fa:	43db      	mvns	r3, r3
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	4013      	ands	r3, r2
 8008500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a1d      	ldr	r2, [pc, #116]	; (800857c <HAL_GPIO_Init+0x234>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d04a      	beq.n	80085a0 <HAL_GPIO_Init+0x258>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a1c      	ldr	r2, [pc, #112]	; (8008580 <HAL_GPIO_Init+0x238>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d02b      	beq.n	800856a <HAL_GPIO_Init+0x222>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a1b      	ldr	r2, [pc, #108]	; (8008584 <HAL_GPIO_Init+0x23c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d025      	beq.n	8008566 <HAL_GPIO_Init+0x21e>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a1a      	ldr	r2, [pc, #104]	; (8008588 <HAL_GPIO_Init+0x240>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d01f      	beq.n	8008562 <HAL_GPIO_Init+0x21a>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a19      	ldr	r2, [pc, #100]	; (800858c <HAL_GPIO_Init+0x244>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d019      	beq.n	800855e <HAL_GPIO_Init+0x216>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a18      	ldr	r2, [pc, #96]	; (8008590 <HAL_GPIO_Init+0x248>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d013      	beq.n	800855a <HAL_GPIO_Init+0x212>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a17      	ldr	r2, [pc, #92]	; (8008594 <HAL_GPIO_Init+0x24c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d00d      	beq.n	8008556 <HAL_GPIO_Init+0x20e>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a16      	ldr	r2, [pc, #88]	; (8008598 <HAL_GPIO_Init+0x250>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d007      	beq.n	8008552 <HAL_GPIO_Init+0x20a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a15      	ldr	r2, [pc, #84]	; (800859c <HAL_GPIO_Init+0x254>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d101      	bne.n	800854e <HAL_GPIO_Init+0x206>
 800854a:	2309      	movs	r3, #9
 800854c:	e029      	b.n	80085a2 <HAL_GPIO_Init+0x25a>
 800854e:	230a      	movs	r3, #10
 8008550:	e027      	b.n	80085a2 <HAL_GPIO_Init+0x25a>
 8008552:	2307      	movs	r3, #7
 8008554:	e025      	b.n	80085a2 <HAL_GPIO_Init+0x25a>
 8008556:	2306      	movs	r3, #6
 8008558:	e023      	b.n	80085a2 <HAL_GPIO_Init+0x25a>
 800855a:	2305      	movs	r3, #5
 800855c:	e021      	b.n	80085a2 <HAL_GPIO_Init+0x25a>
 800855e:	2304      	movs	r3, #4
 8008560:	e01f      	b.n	80085a2 <HAL_GPIO_Init+0x25a>
 8008562:	2303      	movs	r3, #3
 8008564:	e01d      	b.n	80085a2 <HAL_GPIO_Init+0x25a>
 8008566:	2302      	movs	r3, #2
 8008568:	e01b      	b.n	80085a2 <HAL_GPIO_Init+0x25a>
 800856a:	2301      	movs	r3, #1
 800856c:	e019      	b.n	80085a2 <HAL_GPIO_Init+0x25a>
 800856e:	bf00      	nop
 8008570:	58000080 	.word	0x58000080
 8008574:	58024400 	.word	0x58024400
 8008578:	58000400 	.word	0x58000400
 800857c:	58020000 	.word	0x58020000
 8008580:	58020400 	.word	0x58020400
 8008584:	58020800 	.word	0x58020800
 8008588:	58020c00 	.word	0x58020c00
 800858c:	58021000 	.word	0x58021000
 8008590:	58021400 	.word	0x58021400
 8008594:	58021800 	.word	0x58021800
 8008598:	58021c00 	.word	0x58021c00
 800859c:	58022400 	.word	0x58022400
 80085a0:	2300      	movs	r3, #0
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	f002 0203 	and.w	r2, r2, #3
 80085a8:	0092      	lsls	r2, r2, #2
 80085aa:	4093      	lsls	r3, r2
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085b2:	4938      	ldr	r1, [pc, #224]	; (8008694 <HAL_GPIO_Init+0x34c>)
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	089b      	lsrs	r3, r3, #2
 80085b8:	3302      	adds	r3, #2
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	43db      	mvns	r3, r3
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	4013      	ands	r3, r2
 80085d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80085e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80085ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	43db      	mvns	r3, r3
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	4013      	ands	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	43db      	mvns	r3, r3
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	4013      	ands	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	43db      	mvns	r3, r3
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	4013      	ands	r3, r2
 8008654:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	3301      	adds	r3, #1
 8008674:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	fa22 f303 	lsr.w	r3, r2, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	f47f ae6b 	bne.w	800835c <HAL_GPIO_Init+0x14>
  }
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	3724      	adds	r7, #36	; 0x24
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	58000400 	.word	0x58000400

08008698 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80086a6:	4b72      	ldr	r3, [pc, #456]	; (8008870 <HAL_GPIO_DeInit+0x1d8>)
 80086a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80086aa:	e0d3      	b.n	8008854 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80086ac:	2201      	movs	r2, #1
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	4013      	ands	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 80c6 	beq.w	800884e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80086c2:	4a6c      	ldr	r2, [pc, #432]	; (8008874 <HAL_GPIO_DeInit+0x1dc>)
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	089b      	lsrs	r3, r3, #2
 80086c8:	3302      	adds	r3, #2
 80086ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ce:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	220f      	movs	r2, #15
 80086da:	fa02 f303 	lsl.w	r3, r2, r3
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	4013      	ands	r3, r2
 80086e2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a64      	ldr	r2, [pc, #400]	; (8008878 <HAL_GPIO_DeInit+0x1e0>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d031      	beq.n	8008750 <HAL_GPIO_DeInit+0xb8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a63      	ldr	r2, [pc, #396]	; (800887c <HAL_GPIO_DeInit+0x1e4>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d02b      	beq.n	800874c <HAL_GPIO_DeInit+0xb4>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a62      	ldr	r2, [pc, #392]	; (8008880 <HAL_GPIO_DeInit+0x1e8>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d025      	beq.n	8008748 <HAL_GPIO_DeInit+0xb0>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a61      	ldr	r2, [pc, #388]	; (8008884 <HAL_GPIO_DeInit+0x1ec>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d01f      	beq.n	8008744 <HAL_GPIO_DeInit+0xac>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a60      	ldr	r2, [pc, #384]	; (8008888 <HAL_GPIO_DeInit+0x1f0>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d019      	beq.n	8008740 <HAL_GPIO_DeInit+0xa8>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a5f      	ldr	r2, [pc, #380]	; (800888c <HAL_GPIO_DeInit+0x1f4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d013      	beq.n	800873c <HAL_GPIO_DeInit+0xa4>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a5e      	ldr	r2, [pc, #376]	; (8008890 <HAL_GPIO_DeInit+0x1f8>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d00d      	beq.n	8008738 <HAL_GPIO_DeInit+0xa0>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a5d      	ldr	r2, [pc, #372]	; (8008894 <HAL_GPIO_DeInit+0x1fc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d007      	beq.n	8008734 <HAL_GPIO_DeInit+0x9c>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a5c      	ldr	r2, [pc, #368]	; (8008898 <HAL_GPIO_DeInit+0x200>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d101      	bne.n	8008730 <HAL_GPIO_DeInit+0x98>
 800872c:	2309      	movs	r3, #9
 800872e:	e010      	b.n	8008752 <HAL_GPIO_DeInit+0xba>
 8008730:	230a      	movs	r3, #10
 8008732:	e00e      	b.n	8008752 <HAL_GPIO_DeInit+0xba>
 8008734:	2307      	movs	r3, #7
 8008736:	e00c      	b.n	8008752 <HAL_GPIO_DeInit+0xba>
 8008738:	2306      	movs	r3, #6
 800873a:	e00a      	b.n	8008752 <HAL_GPIO_DeInit+0xba>
 800873c:	2305      	movs	r3, #5
 800873e:	e008      	b.n	8008752 <HAL_GPIO_DeInit+0xba>
 8008740:	2304      	movs	r3, #4
 8008742:	e006      	b.n	8008752 <HAL_GPIO_DeInit+0xba>
 8008744:	2303      	movs	r3, #3
 8008746:	e004      	b.n	8008752 <HAL_GPIO_DeInit+0xba>
 8008748:	2302      	movs	r3, #2
 800874a:	e002      	b.n	8008752 <HAL_GPIO_DeInit+0xba>
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <HAL_GPIO_DeInit+0xba>
 8008750:	2300      	movs	r3, #0
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	f002 0203 	and.w	r2, r2, #3
 8008758:	0092      	lsls	r2, r2, #2
 800875a:	4093      	lsls	r3, r2
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	429a      	cmp	r2, r3
 8008760:	d136      	bne.n	80087d0 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	43db      	mvns	r3, r3
 800876a:	401a      	ands	r2, r3
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	43db      	mvns	r3, r3
 8008778:	401a      	ands	r2, r3
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800877e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	43db      	mvns	r3, r3
 8008788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800878c:	4013      	ands	r3, r2
 800878e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	43db      	mvns	r3, r3
 800879a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800879e:	4013      	ands	r3, r2
 80087a0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f003 0303 	and.w	r3, r3, #3
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	220f      	movs	r2, #15
 80087ac:	fa02 f303 	lsl.w	r3, r2, r3
 80087b0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80087b2:	4a30      	ldr	r2, [pc, #192]	; (8008874 <HAL_GPIO_DeInit+0x1dc>)
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	089b      	lsrs	r3, r3, #2
 80087b8:	3302      	adds	r3, #2
 80087ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	43da      	mvns	r2, r3
 80087c2:	482c      	ldr	r0, [pc, #176]	; (8008874 <HAL_GPIO_DeInit+0x1dc>)
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	089b      	lsrs	r3, r3, #2
 80087c8:	400a      	ands	r2, r1
 80087ca:	3302      	adds	r3, #2
 80087cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	2103      	movs	r1, #3
 80087da:	fa01 f303 	lsl.w	r3, r1, r3
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	08da      	lsrs	r2, r3, #3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3208      	adds	r2, #8
 80087ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	220f      	movs	r2, #15
 80087fa:	fa02 f303 	lsl.w	r3, r2, r3
 80087fe:	43db      	mvns	r3, r3
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	08d2      	lsrs	r2, r2, #3
 8008804:	4019      	ands	r1, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	3208      	adds	r2, #8
 800880a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	2103      	movs	r1, #3
 8008818:	fa01 f303 	lsl.w	r3, r1, r3
 800881c:	43db      	mvns	r3, r3
 800881e:	401a      	ands	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685a      	ldr	r2, [r3, #4]
 8008828:	2101      	movs	r1, #1
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	fa01 f303 	lsl.w	r3, r1, r3
 8008830:	43db      	mvns	r3, r3
 8008832:	401a      	ands	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	2103      	movs	r1, #3
 8008842:	fa01 f303 	lsl.w	r3, r1, r3
 8008846:	43db      	mvns	r3, r3
 8008848:	401a      	ands	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	3301      	adds	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	f47f af25 	bne.w	80086ac <HAL_GPIO_DeInit+0x14>
  }
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	371c      	adds	r7, #28
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	58000080 	.word	0x58000080
 8008874:	58000400 	.word	0x58000400
 8008878:	58020000 	.word	0x58020000
 800887c:	58020400 	.word	0x58020400
 8008880:	58020800 	.word	0x58020800
 8008884:	58020c00 	.word	0x58020c00
 8008888:	58021000 	.word	0x58021000
 800888c:	58021400 	.word	0x58021400
 8008890:	58021800 	.word	0x58021800
 8008894:	58021c00 	.word	0x58021c00
 8008898:	58022400 	.word	0x58022400

0800889c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	807b      	strh	r3, [r7, #2]
 80088a8:	4613      	mov	r3, r2
 80088aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80088ac:	787b      	ldrb	r3, [r7, #1]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088b2:	887a      	ldrh	r2, [r7, #2]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80088b8:	e003      	b.n	80088c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80088ba:	887b      	ldrh	r3, [r7, #2]
 80088bc:	041a      	lsls	r2, r3, #16
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	619a      	str	r2, [r3, #24]
}
 80088c2:	bf00      	nop
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	4603      	mov	r3, r0
 80088d6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80088d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088e0:	88fb      	ldrh	r3, [r7, #6]
 80088e2:	4013      	ands	r3, r2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d008      	beq.n	80088fa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80088e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088ec:	88fb      	ldrh	r3, [r7, #6]
 80088ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80088f2:	88fb      	ldrh	r3, [r7, #6]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f804 	bl	8008902 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	4603      	mov	r3, r0
 800890a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008920:	4b19      	ldr	r3, [pc, #100]	; (8008988 <HAL_PWREx_ConfigSupply+0x70>)
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b04      	cmp	r3, #4
 800892a:	d00a      	beq.n	8008942 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800892c:	4b16      	ldr	r3, [pc, #88]	; (8008988 <HAL_PWREx_ConfigSupply+0x70>)
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	429a      	cmp	r2, r3
 8008938:	d001      	beq.n	800893e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e01f      	b.n	800897e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	e01d      	b.n	800897e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008942:	4b11      	ldr	r3, [pc, #68]	; (8008988 <HAL_PWREx_ConfigSupply+0x70>)
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f023 0207 	bic.w	r2, r3, #7
 800894a:	490f      	ldr	r1, [pc, #60]	; (8008988 <HAL_PWREx_ConfigSupply+0x70>)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4313      	orrs	r3, r2
 8008950:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008952:	f7fc fbbb 	bl	80050cc <HAL_GetTick>
 8008956:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008958:	e009      	b.n	800896e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800895a:	f7fc fbb7 	bl	80050cc <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008968:	d901      	bls.n	800896e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e007      	b.n	800897e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <HAL_PWREx_ConfigSupply+0x70>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800897a:	d1ee      	bne.n	800895a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	58024800 	.word	0x58024800

0800898c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b08c      	sub	sp, #48	; 0x30
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e39d      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 8087 	beq.w	8008aba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089ac:	4b88      	ldr	r3, [pc, #544]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089b6:	4b86      	ldr	r3, [pc, #536]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	2b10      	cmp	r3, #16
 80089c0:	d007      	beq.n	80089d2 <HAL_RCC_OscConfig+0x46>
 80089c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c4:	2b18      	cmp	r3, #24
 80089c6:	d110      	bne.n	80089ea <HAL_RCC_OscConfig+0x5e>
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d10b      	bne.n	80089ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089d2:	4b7f      	ldr	r3, [pc, #508]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d06c      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x12c>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d168      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e377      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f2:	d106      	bne.n	8008a02 <HAL_RCC_OscConfig+0x76>
 80089f4:	4b76      	ldr	r3, [pc, #472]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a75      	ldr	r2, [pc, #468]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 80089fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	e02e      	b.n	8008a60 <HAL_RCC_OscConfig+0xd4>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10c      	bne.n	8008a24 <HAL_RCC_OscConfig+0x98>
 8008a0a:	4b71      	ldr	r3, [pc, #452]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a70      	ldr	r2, [pc, #448]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	4b6e      	ldr	r3, [pc, #440]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a6d      	ldr	r2, [pc, #436]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a20:	6013      	str	r3, [r2, #0]
 8008a22:	e01d      	b.n	8008a60 <HAL_RCC_OscConfig+0xd4>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a2c:	d10c      	bne.n	8008a48 <HAL_RCC_OscConfig+0xbc>
 8008a2e:	4b68      	ldr	r3, [pc, #416]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a67      	ldr	r2, [pc, #412]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	4b65      	ldr	r3, [pc, #404]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a64      	ldr	r2, [pc, #400]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	e00b      	b.n	8008a60 <HAL_RCC_OscConfig+0xd4>
 8008a48:	4b61      	ldr	r3, [pc, #388]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a60      	ldr	r2, [pc, #384]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a52:	6013      	str	r3, [r2, #0]
 8008a54:	4b5e      	ldr	r3, [pc, #376]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a5d      	ldr	r2, [pc, #372]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d013      	beq.n	8008a90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a68:	f7fc fb30 	bl	80050cc <HAL_GetTick>
 8008a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a6e:	e008      	b.n	8008a82 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a70:	f7fc fb2c 	bl	80050cc <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b64      	cmp	r3, #100	; 0x64
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e32b      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a82:	4b53      	ldr	r3, [pc, #332]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0f0      	beq.n	8008a70 <HAL_RCC_OscConfig+0xe4>
 8008a8e:	e014      	b.n	8008aba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a90:	f7fc fb1c 	bl	80050cc <HAL_GetTick>
 8008a94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a96:	e008      	b.n	8008aaa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a98:	f7fc fb18 	bl	80050cc <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b64      	cmp	r3, #100	; 0x64
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e317      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008aaa:	4b49      	ldr	r3, [pc, #292]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1f0      	bne.n	8008a98 <HAL_RCC_OscConfig+0x10c>
 8008ab6:	e000      	b.n	8008aba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 808c 	beq.w	8008be0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ac8:	4b41      	ldr	r3, [pc, #260]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ad0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ad2:	4b3f      	ldr	r3, [pc, #252]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d007      	beq.n	8008aee <HAL_RCC_OscConfig+0x162>
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	2b18      	cmp	r3, #24
 8008ae2:	d137      	bne.n	8008b54 <HAL_RCC_OscConfig+0x1c8>
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d132      	bne.n	8008b54 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008aee:	4b38      	ldr	r3, [pc, #224]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0304 	and.w	r3, r3, #4
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <HAL_RCC_OscConfig+0x17a>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e2e9      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b06:	4b32      	ldr	r3, [pc, #200]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f023 0219 	bic.w	r2, r3, #25
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	492f      	ldr	r1, [pc, #188]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b18:	f7fc fad8 	bl	80050cc <HAL_GetTick>
 8008b1c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b1e:	e008      	b.n	8008b32 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b20:	f7fc fad4 	bl	80050cc <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d901      	bls.n	8008b32 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e2d3      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b32:	4b27      	ldr	r3, [pc, #156]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0304 	and.w	r3, r3, #4
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0f0      	beq.n	8008b20 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b3e:	4b24      	ldr	r3, [pc, #144]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	061b      	lsls	r3, r3, #24
 8008b4c:	4920      	ldr	r1, [pc, #128]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b52:	e045      	b.n	8008be0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d026      	beq.n	8008baa <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b5c:	4b1c      	ldr	r3, [pc, #112]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f023 0219 	bic.w	r2, r3, #25
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	4919      	ldr	r1, [pc, #100]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b6e:	f7fc faad 	bl	80050cc <HAL_GetTick>
 8008b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b74:	e008      	b.n	8008b88 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b76:	f7fc faa9 	bl	80050cc <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d901      	bls.n	8008b88 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e2a8      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b88:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0f0      	beq.n	8008b76 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b94:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	061b      	lsls	r3, r3, #24
 8008ba2:	490b      	ldr	r1, [pc, #44]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	604b      	str	r3, [r1, #4]
 8008ba8:	e01a      	b.n	8008be0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008baa:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a08      	ldr	r2, [pc, #32]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008bb0:	f023 0301 	bic.w	r3, r3, #1
 8008bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb6:	f7fc fa89 	bl	80050cc <HAL_GetTick>
 8008bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008bbc:	e00a      	b.n	8008bd4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bbe:	f7fc fa85 	bl	80050cc <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d903      	bls.n	8008bd4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e284      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
 8008bd0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008bd4:	4b96      	ldr	r3, [pc, #600]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1ee      	bne.n	8008bbe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0310 	and.w	r3, r3, #16
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d06a      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bec:	4b90      	ldr	r3, [pc, #576]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bf4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bf6:	4b8e      	ldr	r3, [pc, #568]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	2b08      	cmp	r3, #8
 8008c00:	d007      	beq.n	8008c12 <HAL_RCC_OscConfig+0x286>
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b18      	cmp	r3, #24
 8008c06:	d11b      	bne.n	8008c40 <HAL_RCC_OscConfig+0x2b4>
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d116      	bne.n	8008c40 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c12:	4b87      	ldr	r3, [pc, #540]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <HAL_RCC_OscConfig+0x29e>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	2b80      	cmp	r3, #128	; 0x80
 8008c24:	d001      	beq.n	8008c2a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e257      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c2a:	4b81      	ldr	r3, [pc, #516]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	061b      	lsls	r3, r3, #24
 8008c38:	497d      	ldr	r1, [pc, #500]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c3e:	e040      	b.n	8008cc2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d023      	beq.n	8008c90 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008c48:	4b79      	ldr	r3, [pc, #484]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a78      	ldr	r2, [pc, #480]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c54:	f7fc fa3a 	bl	80050cc <HAL_GetTick>
 8008c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008c5c:	f7fc fa36 	bl	80050cc <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e235      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c6e:	4b70      	ldr	r3, [pc, #448]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0f0      	beq.n	8008c5c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c7a:	4b6d      	ldr	r3, [pc, #436]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	061b      	lsls	r3, r3, #24
 8008c88:	4969      	ldr	r1, [pc, #420]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60cb      	str	r3, [r1, #12]
 8008c8e:	e018      	b.n	8008cc2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c90:	4b67      	ldr	r3, [pc, #412]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a66      	ldr	r2, [pc, #408]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c9c:	f7fc fa16 	bl	80050cc <HAL_GetTick>
 8008ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ca2:	e008      	b.n	8008cb6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008ca4:	f7fc fa12 	bl	80050cc <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d901      	bls.n	8008cb6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e211      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008cb6:	4b5e      	ldr	r3, [pc, #376]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1f0      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0308 	and.w	r3, r3, #8
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d036      	beq.n	8008d3c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d019      	beq.n	8008d0a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cd6:	4b56      	ldr	r3, [pc, #344]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cda:	4a55      	ldr	r2, [pc, #340]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008cdc:	f043 0301 	orr.w	r3, r3, #1
 8008ce0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce2:	f7fc f9f3 	bl	80050cc <HAL_GetTick>
 8008ce6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ce8:	e008      	b.n	8008cfc <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cea:	f7fc f9ef 	bl	80050cc <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d901      	bls.n	8008cfc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e1ee      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cfc:	4b4c      	ldr	r3, [pc, #304]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0f0      	beq.n	8008cea <HAL_RCC_OscConfig+0x35e>
 8008d08:	e018      	b.n	8008d3c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d0a:	4b49      	ldr	r3, [pc, #292]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d0e:	4a48      	ldr	r2, [pc, #288]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008d10:	f023 0301 	bic.w	r3, r3, #1
 8008d14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d16:	f7fc f9d9 	bl	80050cc <HAL_GetTick>
 8008d1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d1c:	e008      	b.n	8008d30 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d1e:	f7fc f9d5 	bl	80050cc <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e1d4      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d30:	4b3f      	ldr	r3, [pc, #252]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1f0      	bne.n	8008d1e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0320 	and.w	r3, r3, #32
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d036      	beq.n	8008db6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d019      	beq.n	8008d84 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d50:	4b37      	ldr	r3, [pc, #220]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a36      	ldr	r2, [pc, #216]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008d56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d5c:	f7fc f9b6 	bl	80050cc <HAL_GetTick>
 8008d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d62:	e008      	b.n	8008d76 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d64:	f7fc f9b2 	bl	80050cc <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e1b1      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d76:	4b2e      	ldr	r3, [pc, #184]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0f0      	beq.n	8008d64 <HAL_RCC_OscConfig+0x3d8>
 8008d82:	e018      	b.n	8008db6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d84:	4b2a      	ldr	r3, [pc, #168]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a29      	ldr	r2, [pc, #164]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d90:	f7fc f99c 	bl	80050cc <HAL_GetTick>
 8008d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d98:	f7fc f998 	bl	80050cc <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e197      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008daa:	4b21      	ldr	r3, [pc, #132]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1f0      	bne.n	8008d98 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 8086 	beq.w	8008ed0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008dc4:	4b1b      	ldr	r3, [pc, #108]	; (8008e34 <HAL_RCC_OscConfig+0x4a8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a1a      	ldr	r2, [pc, #104]	; (8008e34 <HAL_RCC_OscConfig+0x4a8>)
 8008dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008dd0:	f7fc f97c 	bl	80050cc <HAL_GetTick>
 8008dd4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dd6:	e008      	b.n	8008dea <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008dd8:	f7fc f978 	bl	80050cc <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b64      	cmp	r3, #100	; 0x64
 8008de4:	d901      	bls.n	8008dea <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e177      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dea:	4b12      	ldr	r3, [pc, #72]	; (8008e34 <HAL_RCC_OscConfig+0x4a8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0f0      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d106      	bne.n	8008e0c <HAL_RCC_OscConfig+0x480>
 8008dfe:	4b0c      	ldr	r3, [pc, #48]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e02:	4a0b      	ldr	r2, [pc, #44]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008e04:	f043 0301 	orr.w	r3, r3, #1
 8008e08:	6713      	str	r3, [r2, #112]	; 0x70
 8008e0a:	e032      	b.n	8008e72 <HAL_RCC_OscConfig+0x4e6>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d111      	bne.n	8008e38 <HAL_RCC_OscConfig+0x4ac>
 8008e14:	4b06      	ldr	r3, [pc, #24]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e18:	4a05      	ldr	r2, [pc, #20]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008e1a:	f023 0301 	bic.w	r3, r3, #1
 8008e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e20:	4b03      	ldr	r3, [pc, #12]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e24:	4a02      	ldr	r2, [pc, #8]	; (8008e30 <HAL_RCC_OscConfig+0x4a4>)
 8008e26:	f023 0304 	bic.w	r3, r3, #4
 8008e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e2c:	e021      	b.n	8008e72 <HAL_RCC_OscConfig+0x4e6>
 8008e2e:	bf00      	nop
 8008e30:	58024400 	.word	0x58024400
 8008e34:	58024800 	.word	0x58024800
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	2b05      	cmp	r3, #5
 8008e3e:	d10c      	bne.n	8008e5a <HAL_RCC_OscConfig+0x4ce>
 8008e40:	4b83      	ldr	r3, [pc, #524]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e44:	4a82      	ldr	r2, [pc, #520]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008e46:	f043 0304 	orr.w	r3, r3, #4
 8008e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e4c:	4b80      	ldr	r3, [pc, #512]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e50:	4a7f      	ldr	r2, [pc, #508]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	6713      	str	r3, [r2, #112]	; 0x70
 8008e58:	e00b      	b.n	8008e72 <HAL_RCC_OscConfig+0x4e6>
 8008e5a:	4b7d      	ldr	r3, [pc, #500]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5e:	4a7c      	ldr	r2, [pc, #496]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008e60:	f023 0301 	bic.w	r3, r3, #1
 8008e64:	6713      	str	r3, [r2, #112]	; 0x70
 8008e66:	4b7a      	ldr	r3, [pc, #488]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6a:	4a79      	ldr	r2, [pc, #484]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008e6c:	f023 0304 	bic.w	r3, r3, #4
 8008e70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d015      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e7a:	f7fc f927 	bl	80050cc <HAL_GetTick>
 8008e7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e80:	e00a      	b.n	8008e98 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e82:	f7fc f923 	bl	80050cc <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d901      	bls.n	8008e98 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e120      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e98:	4b6d      	ldr	r3, [pc, #436]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9c:	f003 0302 	and.w	r3, r3, #2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0ee      	beq.n	8008e82 <HAL_RCC_OscConfig+0x4f6>
 8008ea4:	e014      	b.n	8008ed0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea6:	f7fc f911 	bl	80050cc <HAL_GetTick>
 8008eaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008eac:	e00a      	b.n	8008ec4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eae:	f7fc f90d 	bl	80050cc <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d901      	bls.n	8008ec4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e10a      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ec4:	4b62      	ldr	r3, [pc, #392]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1ee      	bne.n	8008eae <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 80ff 	beq.w	80090d8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008eda:	4b5d      	ldr	r3, [pc, #372]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ee2:	2b18      	cmp	r3, #24
 8008ee4:	f000 80ba 	beq.w	800905c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	f040 8095 	bne.w	800901c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ef2:	4b57      	ldr	r3, [pc, #348]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a56      	ldr	r2, [pc, #344]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008efe:	f7fc f8e5 	bl	80050cc <HAL_GetTick>
 8008f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f04:	e008      	b.n	8008f18 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f06:	f7fc f8e1 	bl	80050cc <HAL_GetTick>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d901      	bls.n	8008f18 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e0e0      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f18:	4b4d      	ldr	r3, [pc, #308]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1f0      	bne.n	8008f06 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f24:	4b4a      	ldr	r3, [pc, #296]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f28:	4b4a      	ldr	r3, [pc, #296]	; (8009054 <HAL_RCC_OscConfig+0x6c8>)
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008f34:	0112      	lsls	r2, r2, #4
 8008f36:	430a      	orrs	r2, r1
 8008f38:	4945      	ldr	r1, [pc, #276]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	628b      	str	r3, [r1, #40]	; 0x28
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f42:	3b01      	subs	r3, #1
 8008f44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	025b      	lsls	r3, r3, #9
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	041b      	lsls	r3, r3, #16
 8008f5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f66:	3b01      	subs	r3, #1
 8008f68:	061b      	lsls	r3, r3, #24
 8008f6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f6e:	4938      	ldr	r1, [pc, #224]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008f74:	4b36      	ldr	r3, [pc, #216]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	4a35      	ldr	r2, [pc, #212]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008f7a:	f023 0301 	bic.w	r3, r3, #1
 8008f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f80:	4b33      	ldr	r3, [pc, #204]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f84:	4b34      	ldr	r3, [pc, #208]	; (8009058 <HAL_RCC_OscConfig+0x6cc>)
 8008f86:	4013      	ands	r3, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f8c:	00d2      	lsls	r2, r2, #3
 8008f8e:	4930      	ldr	r1, [pc, #192]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f94:	4b2e      	ldr	r3, [pc, #184]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	f023 020c 	bic.w	r2, r3, #12
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa0:	492b      	ldr	r1, [pc, #172]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008fa6:	4b2a      	ldr	r3, [pc, #168]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	f023 0202 	bic.w	r2, r3, #2
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb2:	4927      	ldr	r1, [pc, #156]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008fb8:	4b25      	ldr	r3, [pc, #148]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	4a24      	ldr	r2, [pc, #144]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fc4:	4b22      	ldr	r3, [pc, #136]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	4a21      	ldr	r2, [pc, #132]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008fd0:	4b1f      	ldr	r3, [pc, #124]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	4a1e      	ldr	r2, [pc, #120]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008fdc:	4b1c      	ldr	r3, [pc, #112]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe0:	4a1b      	ldr	r2, [pc, #108]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fe2:	f043 0301 	orr.w	r3, r3, #1
 8008fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fe8:	4b19      	ldr	r3, [pc, #100]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a18      	ldr	r2, [pc, #96]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8008fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff4:	f7fc f86a 	bl	80050cc <HAL_GetTick>
 8008ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ffc:	f7fc f866 	bl	80050cc <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e065      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800900e:	4b10      	ldr	r3, [pc, #64]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0f0      	beq.n	8008ffc <HAL_RCC_OscConfig+0x670>
 800901a:	e05d      	b.n	80090d8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800901c:	4b0c      	ldr	r3, [pc, #48]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a0b      	ldr	r2, [pc, #44]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8009022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009028:	f7fc f850 	bl	80050cc <HAL_GetTick>
 800902c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800902e:	e008      	b.n	8009042 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009030:	f7fc f84c 	bl	80050cc <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	2b02      	cmp	r3, #2
 800903c:	d901      	bls.n	8009042 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e04b      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009042:	4b03      	ldr	r3, [pc, #12]	; (8009050 <HAL_RCC_OscConfig+0x6c4>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1f0      	bne.n	8009030 <HAL_RCC_OscConfig+0x6a4>
 800904e:	e043      	b.n	80090d8 <HAL_RCC_OscConfig+0x74c>
 8009050:	58024400 	.word	0x58024400
 8009054:	fffffc0c 	.word	0xfffffc0c
 8009058:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800905c:	4b21      	ldr	r3, [pc, #132]	; (80090e4 <HAL_RCC_OscConfig+0x758>)
 800905e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009060:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009062:	4b20      	ldr	r3, [pc, #128]	; (80090e4 <HAL_RCC_OscConfig+0x758>)
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	2b01      	cmp	r3, #1
 800906e:	d031      	beq.n	80090d4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	f003 0203 	and.w	r2, r3, #3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800907a:	429a      	cmp	r2, r3
 800907c:	d12a      	bne.n	80090d4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	091b      	lsrs	r3, r3, #4
 8009082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800908a:	429a      	cmp	r2, r3
 800908c:	d122      	bne.n	80090d4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800909a:	429a      	cmp	r2, r3
 800909c:	d11a      	bne.n	80090d4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	0a5b      	lsrs	r3, r3, #9
 80090a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d111      	bne.n	80090d4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	0c1b      	lsrs	r3, r3, #16
 80090b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80090be:	429a      	cmp	r2, r3
 80090c0:	d108      	bne.n	80090d4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	0e1b      	lsrs	r3, r3, #24
 80090c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d001      	beq.n	80090d8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e000      	b.n	80090da <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3730      	adds	r7, #48	; 0x30
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	58024400 	.word	0x58024400

080090e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e19c      	b.n	8009436 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090fc:	4b8a      	ldr	r3, [pc, #552]	; (8009328 <HAL_RCC_ClockConfig+0x240>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 030f 	and.w	r3, r3, #15
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d910      	bls.n	800912c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800910a:	4b87      	ldr	r3, [pc, #540]	; (8009328 <HAL_RCC_ClockConfig+0x240>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f023 020f 	bic.w	r2, r3, #15
 8009112:	4985      	ldr	r1, [pc, #532]	; (8009328 <HAL_RCC_ClockConfig+0x240>)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	4313      	orrs	r3, r2
 8009118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800911a:	4b83      	ldr	r3, [pc, #524]	; (8009328 <HAL_RCC_ClockConfig+0x240>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d001      	beq.n	800912c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e184      	b.n	8009436 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0304 	and.w	r3, r3, #4
 8009134:	2b00      	cmp	r3, #0
 8009136:	d010      	beq.n	800915a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691a      	ldr	r2, [r3, #16]
 800913c:	4b7b      	ldr	r3, [pc, #492]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009144:	429a      	cmp	r2, r3
 8009146:	d908      	bls.n	800915a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009148:	4b78      	ldr	r3, [pc, #480]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	4975      	ldr	r1, [pc, #468]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 8009156:	4313      	orrs	r3, r2
 8009158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0308 	and.w	r3, r3, #8
 8009162:	2b00      	cmp	r3, #0
 8009164:	d010      	beq.n	8009188 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695a      	ldr	r2, [r3, #20]
 800916a:	4b70      	ldr	r3, [pc, #448]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009172:	429a      	cmp	r2, r3
 8009174:	d908      	bls.n	8009188 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009176:	4b6d      	ldr	r3, [pc, #436]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	496a      	ldr	r1, [pc, #424]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 8009184:	4313      	orrs	r3, r2
 8009186:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0310 	and.w	r3, r3, #16
 8009190:	2b00      	cmp	r3, #0
 8009192:	d010      	beq.n	80091b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	699a      	ldr	r2, [r3, #24]
 8009198:	4b64      	ldr	r3, [pc, #400]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d908      	bls.n	80091b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091a4:	4b61      	ldr	r3, [pc, #388]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	495e      	ldr	r1, [pc, #376]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d010      	beq.n	80091e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	69da      	ldr	r2, [r3, #28]
 80091c6:	4b59      	ldr	r3, [pc, #356]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d908      	bls.n	80091e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80091d2:	4b56      	ldr	r3, [pc, #344]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	4953      	ldr	r1, [pc, #332]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d010      	beq.n	8009212 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68da      	ldr	r2, [r3, #12]
 80091f4:	4b4d      	ldr	r3, [pc, #308]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	f003 030f 	and.w	r3, r3, #15
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d908      	bls.n	8009212 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009200:	4b4a      	ldr	r3, [pc, #296]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f023 020f 	bic.w	r2, r3, #15
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	4947      	ldr	r1, [pc, #284]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 800920e:	4313      	orrs	r3, r2
 8009210:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b00      	cmp	r3, #0
 800921c:	d055      	beq.n	80092ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800921e:	4b43      	ldr	r3, [pc, #268]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	4940      	ldr	r1, [pc, #256]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 800922c:	4313      	orrs	r3, r2
 800922e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	2b02      	cmp	r3, #2
 8009236:	d107      	bne.n	8009248 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009238:	4b3c      	ldr	r3, [pc, #240]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d121      	bne.n	8009288 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e0f6      	b.n	8009436 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	2b03      	cmp	r3, #3
 800924e:	d107      	bne.n	8009260 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009250:	4b36      	ldr	r3, [pc, #216]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d115      	bne.n	8009288 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e0ea      	b.n	8009436 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d107      	bne.n	8009278 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009268:	4b30      	ldr	r3, [pc, #192]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009270:	2b00      	cmp	r3, #0
 8009272:	d109      	bne.n	8009288 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e0de      	b.n	8009436 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009278:	4b2c      	ldr	r3, [pc, #176]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e0d6      	b.n	8009436 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009288:	4b28      	ldr	r3, [pc, #160]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	f023 0207 	bic.w	r2, r3, #7
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	4925      	ldr	r1, [pc, #148]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 8009296:	4313      	orrs	r3, r2
 8009298:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800929a:	f7fb ff17 	bl	80050cc <HAL_GetTick>
 800929e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092a0:	e00a      	b.n	80092b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092a2:	f7fb ff13 	bl	80050cc <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d901      	bls.n	80092b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e0be      	b.n	8009436 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092b8:	4b1c      	ldr	r3, [pc, #112]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d1eb      	bne.n	80092a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d010      	beq.n	80092f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	4b14      	ldr	r3, [pc, #80]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d208      	bcs.n	80092f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092e6:	4b11      	ldr	r3, [pc, #68]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f023 020f 	bic.w	r2, r3, #15
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	490e      	ldr	r1, [pc, #56]	; (800932c <HAL_RCC_ClockConfig+0x244>)
 80092f4:	4313      	orrs	r3, r2
 80092f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80092f8:	4b0b      	ldr	r3, [pc, #44]	; (8009328 <HAL_RCC_ClockConfig+0x240>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 030f 	and.w	r3, r3, #15
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	429a      	cmp	r2, r3
 8009304:	d214      	bcs.n	8009330 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009306:	4b08      	ldr	r3, [pc, #32]	; (8009328 <HAL_RCC_ClockConfig+0x240>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f023 020f 	bic.w	r2, r3, #15
 800930e:	4906      	ldr	r1, [pc, #24]	; (8009328 <HAL_RCC_ClockConfig+0x240>)
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	4313      	orrs	r3, r2
 8009314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009316:	4b04      	ldr	r3, [pc, #16]	; (8009328 <HAL_RCC_ClockConfig+0x240>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 030f 	and.w	r3, r3, #15
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d005      	beq.n	8009330 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e086      	b.n	8009436 <HAL_RCC_ClockConfig+0x34e>
 8009328:	52002000 	.word	0x52002000
 800932c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d010      	beq.n	800935e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691a      	ldr	r2, [r3, #16]
 8009340:	4b3f      	ldr	r3, [pc, #252]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009348:	429a      	cmp	r2, r3
 800934a:	d208      	bcs.n	800935e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800934c:	4b3c      	ldr	r3, [pc, #240]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	4939      	ldr	r1, [pc, #228]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 800935a:	4313      	orrs	r3, r2
 800935c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0308 	and.w	r3, r3, #8
 8009366:	2b00      	cmp	r3, #0
 8009368:	d010      	beq.n	800938c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	695a      	ldr	r2, [r3, #20]
 800936e:	4b34      	ldr	r3, [pc, #208]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009376:	429a      	cmp	r2, r3
 8009378:	d208      	bcs.n	800938c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800937a:	4b31      	ldr	r3, [pc, #196]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	492e      	ldr	r1, [pc, #184]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 8009388:	4313      	orrs	r3, r2
 800938a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0310 	and.w	r3, r3, #16
 8009394:	2b00      	cmp	r3, #0
 8009396:	d010      	beq.n	80093ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	4b28      	ldr	r3, [pc, #160]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d208      	bcs.n	80093ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80093a8:	4b25      	ldr	r3, [pc, #148]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	4922      	ldr	r1, [pc, #136]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 0320 	and.w	r3, r3, #32
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d010      	beq.n	80093e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69da      	ldr	r2, [r3, #28]
 80093ca:	4b1d      	ldr	r3, [pc, #116]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d208      	bcs.n	80093e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80093d6:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	4917      	ldr	r1, [pc, #92]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093e8:	f000 f834 	bl	8009454 <HAL_RCC_GetSysClockFreq>
 80093ec:	4602      	mov	r2, r0
 80093ee:	4b14      	ldr	r3, [pc, #80]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	0a1b      	lsrs	r3, r3, #8
 80093f4:	f003 030f 	and.w	r3, r3, #15
 80093f8:	4912      	ldr	r1, [pc, #72]	; (8009444 <HAL_RCC_ClockConfig+0x35c>)
 80093fa:	5ccb      	ldrb	r3, [r1, r3]
 80093fc:	f003 031f 	and.w	r3, r3, #31
 8009400:	fa22 f303 	lsr.w	r3, r2, r3
 8009404:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009406:	4b0e      	ldr	r3, [pc, #56]	; (8009440 <HAL_RCC_ClockConfig+0x358>)
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	f003 030f 	and.w	r3, r3, #15
 800940e:	4a0d      	ldr	r2, [pc, #52]	; (8009444 <HAL_RCC_ClockConfig+0x35c>)
 8009410:	5cd3      	ldrb	r3, [r2, r3]
 8009412:	f003 031f 	and.w	r3, r3, #31
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	fa22 f303 	lsr.w	r3, r2, r3
 800941c:	4a0a      	ldr	r2, [pc, #40]	; (8009448 <HAL_RCC_ClockConfig+0x360>)
 800941e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009420:	4a0a      	ldr	r2, [pc, #40]	; (800944c <HAL_RCC_ClockConfig+0x364>)
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009426:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <HAL_RCC_ClockConfig+0x368>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4618      	mov	r0, r3
 800942c:	f7fb fe04 	bl	8005038 <HAL_InitTick>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009434:	7bfb      	ldrb	r3, [r7, #15]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	58024400 	.word	0x58024400
 8009444:	0800fcd0 	.word	0x0800fcd0
 8009448:	240001c4 	.word	0x240001c4
 800944c:	240001c0 	.word	0x240001c0
 8009450:	240001d0 	.word	0x240001d0

08009454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009454:	b480      	push	{r7}
 8009456:	b089      	sub	sp, #36	; 0x24
 8009458:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800945a:	4bb3      	ldr	r3, [pc, #716]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009462:	2b18      	cmp	r3, #24
 8009464:	f200 8155 	bhi.w	8009712 <HAL_RCC_GetSysClockFreq+0x2be>
 8009468:	a201      	add	r2, pc, #4	; (adr r2, 8009470 <HAL_RCC_GetSysClockFreq+0x1c>)
 800946a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946e:	bf00      	nop
 8009470:	080094d5 	.word	0x080094d5
 8009474:	08009713 	.word	0x08009713
 8009478:	08009713 	.word	0x08009713
 800947c:	08009713 	.word	0x08009713
 8009480:	08009713 	.word	0x08009713
 8009484:	08009713 	.word	0x08009713
 8009488:	08009713 	.word	0x08009713
 800948c:	08009713 	.word	0x08009713
 8009490:	080094fb 	.word	0x080094fb
 8009494:	08009713 	.word	0x08009713
 8009498:	08009713 	.word	0x08009713
 800949c:	08009713 	.word	0x08009713
 80094a0:	08009713 	.word	0x08009713
 80094a4:	08009713 	.word	0x08009713
 80094a8:	08009713 	.word	0x08009713
 80094ac:	08009713 	.word	0x08009713
 80094b0:	08009501 	.word	0x08009501
 80094b4:	08009713 	.word	0x08009713
 80094b8:	08009713 	.word	0x08009713
 80094bc:	08009713 	.word	0x08009713
 80094c0:	08009713 	.word	0x08009713
 80094c4:	08009713 	.word	0x08009713
 80094c8:	08009713 	.word	0x08009713
 80094cc:	08009713 	.word	0x08009713
 80094d0:	08009507 	.word	0x08009507
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094d4:	4b94      	ldr	r3, [pc, #592]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0320 	and.w	r3, r3, #32
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d009      	beq.n	80094f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094e0:	4b91      	ldr	r3, [pc, #580]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	08db      	lsrs	r3, r3, #3
 80094e6:	f003 0303 	and.w	r3, r3, #3
 80094ea:	4a90      	ldr	r2, [pc, #576]	; (800972c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094ec:	fa22 f303 	lsr.w	r3, r2, r3
 80094f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80094f2:	e111      	b.n	8009718 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094f4:	4b8d      	ldr	r3, [pc, #564]	; (800972c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094f6:	61bb      	str	r3, [r7, #24]
    break;
 80094f8:	e10e      	b.n	8009718 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80094fa:	4b8d      	ldr	r3, [pc, #564]	; (8009730 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094fc:	61bb      	str	r3, [r7, #24]
    break;
 80094fe:	e10b      	b.n	8009718 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009500:	4b8c      	ldr	r3, [pc, #560]	; (8009734 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009502:	61bb      	str	r3, [r7, #24]
    break;
 8009504:	e108      	b.n	8009718 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009506:	4b88      	ldr	r3, [pc, #544]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950a:	f003 0303 	and.w	r3, r3, #3
 800950e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009510:	4b85      	ldr	r3, [pc, #532]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009514:	091b      	lsrs	r3, r3, #4
 8009516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800951a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800951c:	4b82      	ldr	r3, [pc, #520]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800951e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009520:	f003 0301 	and.w	r3, r3, #1
 8009524:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009526:	4b80      	ldr	r3, [pc, #512]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952a:	08db      	lsrs	r3, r3, #3
 800952c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	fb02 f303 	mul.w	r3, r2, r3
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 80e1 	beq.w	800970c <HAL_RCC_GetSysClockFreq+0x2b8>
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b02      	cmp	r3, #2
 800954e:	f000 8083 	beq.w	8009658 <HAL_RCC_GetSysClockFreq+0x204>
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	2b02      	cmp	r3, #2
 8009556:	f200 80a1 	bhi.w	800969c <HAL_RCC_GetSysClockFreq+0x248>
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <HAL_RCC_GetSysClockFreq+0x114>
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d056      	beq.n	8009614 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009566:	e099      	b.n	800969c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009568:	4b6f      	ldr	r3, [pc, #444]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0320 	and.w	r3, r3, #32
 8009570:	2b00      	cmp	r3, #0
 8009572:	d02d      	beq.n	80095d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009574:	4b6c      	ldr	r3, [pc, #432]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	08db      	lsrs	r3, r3, #3
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	4a6b      	ldr	r2, [pc, #428]	; (800972c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009580:	fa22 f303 	lsr.w	r3, r2, r3
 8009584:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	ee07 3a90 	vmov	s15, r3
 800958c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	ee07 3a90 	vmov	s15, r3
 8009596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800959e:	4b62      	ldr	r3, [pc, #392]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80095b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80095ce:	e087      	b.n	80096e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800973c <HAL_RCC_GetSysClockFreq+0x2e8>
 80095de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095e2:	4b51      	ldr	r3, [pc, #324]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800960a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800960e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009612:	e065      	b.n	80096e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009740 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009626:	4b40      	ldr	r3, [pc, #256]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009636:	ed97 6a02 	vldr	s12, [r7, #8]
 800963a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009738 <HAL_RCC_GetSysClockFreq+0x2e4>
 800963e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800964a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009656:	e043      	b.n	80096e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009662:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009744 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966a:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800966c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967a:	ed97 6a02 	vldr	s12, [r7, #8]
 800967e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009738 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800968e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800969a:	e021      	b.n	80096e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009740 <HAL_RCC_GetSysClockFreq+0x2ec>
 80096aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ae:	4b1e      	ldr	r3, [pc, #120]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b6:	ee07 3a90 	vmov	s15, r3
 80096ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096be:	ed97 6a02 	vldr	s12, [r7, #8]
 80096c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80096e0:	4b11      	ldr	r3, [pc, #68]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e4:	0a5b      	lsrs	r3, r3, #9
 80096e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ea:	3301      	adds	r3, #1
 80096ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	ee07 3a90 	vmov	s15, r3
 80096f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009704:	ee17 3a90 	vmov	r3, s15
 8009708:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800970a:	e005      	b.n	8009718 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800970c:	2300      	movs	r3, #0
 800970e:	61bb      	str	r3, [r7, #24]
    break;
 8009710:	e002      	b.n	8009718 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009712:	4b07      	ldr	r3, [pc, #28]	; (8009730 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009714:	61bb      	str	r3, [r7, #24]
    break;
 8009716:	bf00      	nop
  }

  return sysclockfreq;
 8009718:	69bb      	ldr	r3, [r7, #24]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3724      	adds	r7, #36	; 0x24
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	58024400 	.word	0x58024400
 800972c:	03d09000 	.word	0x03d09000
 8009730:	003d0900 	.word	0x003d0900
 8009734:	007a1200 	.word	0x007a1200
 8009738:	46000000 	.word	0x46000000
 800973c:	4c742400 	.word	0x4c742400
 8009740:	4a742400 	.word	0x4a742400
 8009744:	4af42400 	.word	0x4af42400

08009748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800974e:	f7ff fe81 	bl	8009454 <HAL_RCC_GetSysClockFreq>
 8009752:	4602      	mov	r2, r0
 8009754:	4b10      	ldr	r3, [pc, #64]	; (8009798 <HAL_RCC_GetHCLKFreq+0x50>)
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	0a1b      	lsrs	r3, r3, #8
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	490f      	ldr	r1, [pc, #60]	; (800979c <HAL_RCC_GetHCLKFreq+0x54>)
 8009760:	5ccb      	ldrb	r3, [r1, r3]
 8009762:	f003 031f 	and.w	r3, r3, #31
 8009766:	fa22 f303 	lsr.w	r3, r2, r3
 800976a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800976c:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <HAL_RCC_GetHCLKFreq+0x50>)
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	f003 030f 	and.w	r3, r3, #15
 8009774:	4a09      	ldr	r2, [pc, #36]	; (800979c <HAL_RCC_GetHCLKFreq+0x54>)
 8009776:	5cd3      	ldrb	r3, [r2, r3]
 8009778:	f003 031f 	and.w	r3, r3, #31
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	fa22 f303 	lsr.w	r3, r2, r3
 8009782:	4a07      	ldr	r2, [pc, #28]	; (80097a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009784:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009786:	4a07      	ldr	r2, [pc, #28]	; (80097a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800978c:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800978e:	681b      	ldr	r3, [r3, #0]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	58024400 	.word	0x58024400
 800979c:	0800fcd0 	.word	0x0800fcd0
 80097a0:	240001c4 	.word	0x240001c4
 80097a4:	240001c0 	.word	0x240001c0

080097a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80097ac:	f7ff ffcc 	bl	8009748 <HAL_RCC_GetHCLKFreq>
 80097b0:	4602      	mov	r2, r0
 80097b2:	4b06      	ldr	r3, [pc, #24]	; (80097cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	091b      	lsrs	r3, r3, #4
 80097b8:	f003 0307 	and.w	r3, r3, #7
 80097bc:	4904      	ldr	r1, [pc, #16]	; (80097d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097be:	5ccb      	ldrb	r3, [r1, r3]
 80097c0:	f003 031f 	and.w	r3, r3, #31
 80097c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	58024400 	.word	0x58024400
 80097d0:	0800fcd0 	.word	0x0800fcd0

080097d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80097d8:	f7ff ffb6 	bl	8009748 <HAL_RCC_GetHCLKFreq>
 80097dc:	4602      	mov	r2, r0
 80097de:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	0a1b      	lsrs	r3, r3, #8
 80097e4:	f003 0307 	and.w	r3, r3, #7
 80097e8:	4904      	ldr	r1, [pc, #16]	; (80097fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80097ea:	5ccb      	ldrb	r3, [r1, r3]
 80097ec:	f003 031f 	and.w	r3, r3, #31
 80097f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	58024400 	.word	0x58024400
 80097fc:	0800fcd0 	.word	0x0800fcd0

08009800 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009808:	2300      	movs	r3, #0
 800980a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800980c:	2300      	movs	r3, #0
 800980e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d03f      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009820:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009824:	d02a      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009826:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800982a:	d824      	bhi.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800982c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009830:	d018      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009836:	d81e      	bhi.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800983c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009840:	d007      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009842:	e018      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009844:	4ba4      	ldr	r3, [pc, #656]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	4aa3      	ldr	r2, [pc, #652]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800984a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800984e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009850:	e015      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3304      	adds	r3, #4
 8009856:	2102      	movs	r1, #2
 8009858:	4618      	mov	r0, r3
 800985a:	f001 f989 	bl	800ab70 <RCCEx_PLL2_Config>
 800985e:	4603      	mov	r3, r0
 8009860:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009862:	e00c      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	3324      	adds	r3, #36	; 0x24
 8009868:	2102      	movs	r1, #2
 800986a:	4618      	mov	r0, r3
 800986c:	f001 fa32 	bl	800acd4 <RCCEx_PLL3_Config>
 8009870:	4603      	mov	r3, r0
 8009872:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009874:	e003      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	75fb      	strb	r3, [r7, #23]
      break;
 800987a:	e000      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800987c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d109      	bne.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009884:	4b94      	ldr	r3, [pc, #592]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009890:	4991      	ldr	r1, [pc, #580]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009892:	4313      	orrs	r3, r2
 8009894:	650b      	str	r3, [r1, #80]	; 0x50
 8009896:	e001      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d03d      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ac:	2b04      	cmp	r3, #4
 80098ae:	d826      	bhi.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80098b0:	a201      	add	r2, pc, #4	; (adr r2, 80098b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80098b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b6:	bf00      	nop
 80098b8:	080098cd 	.word	0x080098cd
 80098bc:	080098db 	.word	0x080098db
 80098c0:	080098ed 	.word	0x080098ed
 80098c4:	08009905 	.word	0x08009905
 80098c8:	08009905 	.word	0x08009905
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098cc:	4b82      	ldr	r3, [pc, #520]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d0:	4a81      	ldr	r2, [pc, #516]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098d8:	e015      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	3304      	adds	r3, #4
 80098de:	2100      	movs	r1, #0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f001 f945 	bl	800ab70 <RCCEx_PLL2_Config>
 80098e6:	4603      	mov	r3, r0
 80098e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098ea:	e00c      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3324      	adds	r3, #36	; 0x24
 80098f0:	2100      	movs	r1, #0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f001 f9ee 	bl	800acd4 <RCCEx_PLL3_Config>
 80098f8:	4603      	mov	r3, r0
 80098fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098fc:	e003      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	75fb      	strb	r3, [r7, #23]
      break;
 8009902:	e000      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d109      	bne.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800990c:	4b72      	ldr	r3, [pc, #456]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800990e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009910:	f023 0207 	bic.w	r2, r3, #7
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009918:	496f      	ldr	r1, [pc, #444]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800991a:	4313      	orrs	r3, r2
 800991c:	650b      	str	r3, [r1, #80]	; 0x50
 800991e:	e001      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009920:	7dfb      	ldrb	r3, [r7, #23]
 8009922:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800992c:	2b00      	cmp	r3, #0
 800992e:	d051      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009936:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800993a:	d036      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800993c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009940:	d830      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009942:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009946:	d032      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009948:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800994c:	d82a      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800994e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009952:	d02e      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009954:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009958:	d824      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800995a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800995e:	d018      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009964:	d81e      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800996a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800996e:	d007      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009970:	e018      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009972:	4b59      	ldr	r3, [pc, #356]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	4a58      	ldr	r2, [pc, #352]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800997c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800997e:	e019      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3304      	adds	r3, #4
 8009984:	2100      	movs	r1, #0
 8009986:	4618      	mov	r0, r3
 8009988:	f001 f8f2 	bl	800ab70 <RCCEx_PLL2_Config>
 800998c:	4603      	mov	r3, r0
 800998e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009990:	e010      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	3324      	adds	r3, #36	; 0x24
 8009996:	2100      	movs	r1, #0
 8009998:	4618      	mov	r0, r3
 800999a:	f001 f99b 	bl	800acd4 <RCCEx_PLL3_Config>
 800999e:	4603      	mov	r3, r0
 80099a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099a2:	e007      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	75fb      	strb	r3, [r7, #23]
      break;
 80099a8:	e004      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80099aa:	bf00      	nop
 80099ac:	e002      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80099ae:	bf00      	nop
 80099b0:	e000      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80099b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10a      	bne.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80099ba:	4b47      	ldr	r3, [pc, #284]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099be:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80099c8:	4943      	ldr	r1, [pc, #268]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	658b      	str	r3, [r1, #88]	; 0x58
 80099ce:	e001      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d051      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099e6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80099ea:	d036      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80099ec:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80099f0:	d830      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80099f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099f6:	d032      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80099f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099fc:	d82a      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80099fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a02:	d02e      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009a04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a08:	d824      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a0e:	d018      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a14:	d81e      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009a1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a1e:	d007      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009a20:	e018      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a22:	4b2d      	ldr	r3, [pc, #180]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	4a2c      	ldr	r2, [pc, #176]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a2e:	e019      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3304      	adds	r3, #4
 8009a34:	2100      	movs	r1, #0
 8009a36:	4618      	mov	r0, r3
 8009a38:	f001 f89a 	bl	800ab70 <RCCEx_PLL2_Config>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009a40:	e010      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	3324      	adds	r3, #36	; 0x24
 8009a46:	2100      	movs	r1, #0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f001 f943 	bl	800acd4 <RCCEx_PLL3_Config>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a52:	e007      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	75fb      	strb	r3, [r7, #23]
      break;
 8009a58:	e004      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009a5a:	bf00      	nop
 8009a5c:	e002      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009a5e:	bf00      	nop
 8009a60:	e000      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10a      	bne.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009a6a:	4b1b      	ldr	r3, [pc, #108]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a6e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a78:	4917      	ldr	r1, [pc, #92]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	658b      	str	r3, [r1, #88]	; 0x58
 8009a7e:	e001      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d035      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a94:	2b30      	cmp	r3, #48	; 0x30
 8009a96:	d01c      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a98:	2b30      	cmp	r3, #48	; 0x30
 8009a9a:	d817      	bhi.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	d00c      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009aa0:	2b20      	cmp	r3, #32
 8009aa2:	d813      	bhi.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d019      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009aa8:	2b10      	cmp	r3, #16
 8009aaa:	d10f      	bne.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aac:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab0:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009ab8:	e011      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3304      	adds	r3, #4
 8009abe:	2102      	movs	r1, #2
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f001 f855 	bl	800ab70 <RCCEx_PLL2_Config>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009aca:	e008      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad0:	e005      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009ad2:	bf00      	nop
 8009ad4:	e003      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009ad6:	bf00      	nop
 8009ad8:	58024400 	.word	0x58024400
      break;
 8009adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ade:	7dfb      	ldrb	r3, [r7, #23]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d109      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009ae4:	4ba3      	ldr	r3, [pc, #652]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af0:	49a0      	ldr	r1, [pc, #640]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009af6:	e001      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
 8009afa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d047      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b10:	d030      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b16:	d82a      	bhi.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009b18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b1c:	d02c      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009b1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b22:	d824      	bhi.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b28:	d018      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b2e:	d81e      	bhi.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b38:	d007      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b3a:	e018      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b3c:	4b8d      	ldr	r3, [pc, #564]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	4a8c      	ldr	r2, [pc, #560]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009b48:	e017      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 f80d 	bl	800ab70 <RCCEx_PLL2_Config>
 8009b56:	4603      	mov	r3, r0
 8009b58:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009b5a:	e00e      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3324      	adds	r3, #36	; 0x24
 8009b60:	2100      	movs	r1, #0
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 f8b6 	bl	800acd4 <RCCEx_PLL3_Config>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009b6c:	e005      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	75fb      	strb	r3, [r7, #23]
      break;
 8009b72:	e002      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009b74:	bf00      	nop
 8009b76:	e000      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d109      	bne.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b80:	4b7c      	ldr	r3, [pc, #496]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b84:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b8c:	4979      	ldr	r1, [pc, #484]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	650b      	str	r3, [r1, #80]	; 0x50
 8009b92:	e001      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d049      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bac:	d02e      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009bae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bb2:	d828      	bhi.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009bb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009bb8:	d02a      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009bba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009bbe:	d822      	bhi.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009bc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bc4:	d026      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009bc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bca:	d81c      	bhi.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bd0:	d010      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bd6:	d816      	bhi.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01d      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009be0:	d111      	bne.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3304      	adds	r3, #4
 8009be6:	2101      	movs	r1, #1
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 ffc1 	bl	800ab70 <RCCEx_PLL2_Config>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009bf2:	e012      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3324      	adds	r3, #36	; 0x24
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f001 f86a 	bl	800acd4 <RCCEx_PLL3_Config>
 8009c00:	4603      	mov	r3, r0
 8009c02:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009c04:	e009      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	75fb      	strb	r3, [r7, #23]
      break;
 8009c0a:	e006      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009c0c:	bf00      	nop
 8009c0e:	e004      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009c10:	bf00      	nop
 8009c12:	e002      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009c14:	bf00      	nop
 8009c16:	e000      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d109      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c20:	4b54      	ldr	r3, [pc, #336]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c2c:	4951      	ldr	r1, [pc, #324]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	650b      	str	r3, [r1, #80]	; 0x50
 8009c32:	e001      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
 8009c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d04b      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c4e:	d02e      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c54:	d828      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c5a:	d02a      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c60:	d822      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c66:	d026      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c6c:	d81c      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c72:	d010      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c78:	d816      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d01d      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c82:	d111      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	2101      	movs	r1, #1
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 ff70 	bl	800ab70 <RCCEx_PLL2_Config>
 8009c90:	4603      	mov	r3, r0
 8009c92:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009c94:	e012      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3324      	adds	r3, #36	; 0x24
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f001 f819 	bl	800acd4 <RCCEx_PLL3_Config>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009ca6:	e009      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cac:	e006      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009cae:	bf00      	nop
 8009cb0:	e004      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009cb2:	bf00      	nop
 8009cb4:	e002      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009cb6:	bf00      	nop
 8009cb8:	e000      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009cc2:	4b2c      	ldr	r3, [pc, #176]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009cd0:	4928      	ldr	r1, [pc, #160]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	658b      	str	r3, [r1, #88]	; 0x58
 8009cd6:	e001      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d02f      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cf0:	d00e      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cf6:	d814      	bhi.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d015      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009cfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d00:	d10f      	bne.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d02:	4b1c      	ldr	r3, [pc, #112]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d06:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009d0e:	e00c      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3304      	adds	r3, #4
 8009d14:	2101      	movs	r1, #1
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 ff2a 	bl	800ab70 <RCCEx_PLL2_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009d20:	e003      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	75fb      	strb	r3, [r7, #23]
      break;
 8009d26:	e000      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d109      	bne.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d30:	4b10      	ldr	r3, [pc, #64]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d3c:	490d      	ldr	r1, [pc, #52]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	650b      	str	r3, [r1, #80]	; 0x50
 8009d42:	e001      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d44:	7dfb      	ldrb	r3, [r7, #23]
 8009d46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d034      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d58:	2b03      	cmp	r3, #3
 8009d5a:	d81d      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009d5c:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d62:	bf00      	nop
 8009d64:	08009d9f 	.word	0x08009d9f
 8009d68:	08009d79 	.word	0x08009d79
 8009d6c:	08009d87 	.word	0x08009d87
 8009d70:	08009d9f 	.word	0x08009d9f
 8009d74:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d78:	4bb1      	ldr	r3, [pc, #708]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	4ab0      	ldr	r2, [pc, #704]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009d84:	e00c      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	2102      	movs	r1, #2
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 feef 	bl	800ab70 <RCCEx_PLL2_Config>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009d96:	e003      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d9c:	e000      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d109      	bne.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009da6:	4ba6      	ldr	r3, [pc, #664]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009daa:	f023 0203 	bic.w	r2, r3, #3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db2:	49a3      	ldr	r1, [pc, #652]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009db8:	e001      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 8086 	beq.w	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009dcc:	4b9d      	ldr	r3, [pc, #628]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a9c      	ldr	r2, [pc, #624]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009dd8:	f7fb f978 	bl	80050cc <HAL_GetTick>
 8009ddc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dde:	e009      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009de0:	f7fb f974 	bl	80050cc <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b64      	cmp	r3, #100	; 0x64
 8009dec:	d902      	bls.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	75fb      	strb	r3, [r7, #23]
        break;
 8009df2:	e005      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009df4:	4b93      	ldr	r3, [pc, #588]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0ef      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d166      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009e06:	4b8e      	ldr	r3, [pc, #568]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e10:	4053      	eors	r3, r2
 8009e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d013      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e1a:	4b89      	ldr	r3, [pc, #548]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e22:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e24:	4b86      	ldr	r3, [pc, #536]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e28:	4a85      	ldr	r2, [pc, #532]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e2e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e30:	4b83      	ldr	r3, [pc, #524]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e34:	4a82      	ldr	r2, [pc, #520]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e3a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009e3c:	4a80      	ldr	r2, [pc, #512]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4c:	d115      	bne.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e4e:	f7fb f93d 	bl	80050cc <HAL_GetTick>
 8009e52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e54:	e00b      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e56:	f7fb f939 	bl	80050cc <HAL_GetTick>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d902      	bls.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	75fb      	strb	r3, [r7, #23]
            break;
 8009e6c:	e005      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e6e:	4b74      	ldr	r3, [pc, #464]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0ed      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d126      	bne.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e8e:	d10d      	bne.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009e90:	4b6b      	ldr	r3, [pc, #428]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e9e:	0919      	lsrs	r1, r3, #4
 8009ea0:	4b69      	ldr	r3, [pc, #420]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009ea2:	400b      	ands	r3, r1
 8009ea4:	4966      	ldr	r1, [pc, #408]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	610b      	str	r3, [r1, #16]
 8009eaa:	e005      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009eac:	4b64      	ldr	r3, [pc, #400]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	4a63      	ldr	r2, [pc, #396]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009eb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009eb6:	6113      	str	r3, [r2, #16]
 8009eb8:	4b61      	ldr	r3, [pc, #388]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009eba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ec6:	495e      	ldr	r1, [pc, #376]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	670b      	str	r3, [r1, #112]	; 0x70
 8009ecc:	e004      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	75bb      	strb	r3, [r7, #22]
 8009ed2:	e001      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed4:	7dfb      	ldrb	r3, [r7, #23]
 8009ed6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d07e      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ee8:	2b28      	cmp	r3, #40	; 0x28
 8009eea:	d867      	bhi.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009fc3 	.word	0x08009fc3
 8009ef8:	08009fbd 	.word	0x08009fbd
 8009efc:	08009fbd 	.word	0x08009fbd
 8009f00:	08009fbd 	.word	0x08009fbd
 8009f04:	08009fbd 	.word	0x08009fbd
 8009f08:	08009fbd 	.word	0x08009fbd
 8009f0c:	08009fbd 	.word	0x08009fbd
 8009f10:	08009fbd 	.word	0x08009fbd
 8009f14:	08009f99 	.word	0x08009f99
 8009f18:	08009fbd 	.word	0x08009fbd
 8009f1c:	08009fbd 	.word	0x08009fbd
 8009f20:	08009fbd 	.word	0x08009fbd
 8009f24:	08009fbd 	.word	0x08009fbd
 8009f28:	08009fbd 	.word	0x08009fbd
 8009f2c:	08009fbd 	.word	0x08009fbd
 8009f30:	08009fbd 	.word	0x08009fbd
 8009f34:	08009fab 	.word	0x08009fab
 8009f38:	08009fbd 	.word	0x08009fbd
 8009f3c:	08009fbd 	.word	0x08009fbd
 8009f40:	08009fbd 	.word	0x08009fbd
 8009f44:	08009fbd 	.word	0x08009fbd
 8009f48:	08009fbd 	.word	0x08009fbd
 8009f4c:	08009fbd 	.word	0x08009fbd
 8009f50:	08009fbd 	.word	0x08009fbd
 8009f54:	08009fc3 	.word	0x08009fc3
 8009f58:	08009fbd 	.word	0x08009fbd
 8009f5c:	08009fbd 	.word	0x08009fbd
 8009f60:	08009fbd 	.word	0x08009fbd
 8009f64:	08009fbd 	.word	0x08009fbd
 8009f68:	08009fbd 	.word	0x08009fbd
 8009f6c:	08009fbd 	.word	0x08009fbd
 8009f70:	08009fbd 	.word	0x08009fbd
 8009f74:	08009fc3 	.word	0x08009fc3
 8009f78:	08009fbd 	.word	0x08009fbd
 8009f7c:	08009fbd 	.word	0x08009fbd
 8009f80:	08009fbd 	.word	0x08009fbd
 8009f84:	08009fbd 	.word	0x08009fbd
 8009f88:	08009fbd 	.word	0x08009fbd
 8009f8c:	08009fbd 	.word	0x08009fbd
 8009f90:	08009fbd 	.word	0x08009fbd
 8009f94:	08009fc3 	.word	0x08009fc3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 fde6 	bl	800ab70 <RCCEx_PLL2_Config>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009fa8:	e00c      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3324      	adds	r3, #36	; 0x24
 8009fae:	2101      	movs	r1, #1
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 fe8f 	bl	800acd4 <RCCEx_PLL3_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009fba:	e003      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009fc0:	e000      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d109      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009fca:	4b1d      	ldr	r3, [pc, #116]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd6:	491a      	ldr	r1, [pc, #104]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	654b      	str	r3, [r1, #84]	; 0x54
 8009fdc:	e001      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
 8009fe0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d03e      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff2:	2b05      	cmp	r3, #5
 8009ff4:	d820      	bhi.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009ff6:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffc:	0800a04d 	.word	0x0800a04d
 800a000:	0800a015 	.word	0x0800a015
 800a004:	0800a027 	.word	0x0800a027
 800a008:	0800a04d 	.word	0x0800a04d
 800a00c:	0800a04d 	.word	0x0800a04d
 800a010:	0800a04d 	.word	0x0800a04d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3304      	adds	r3, #4
 800a018:	2101      	movs	r1, #1
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 fda8 	bl	800ab70 <RCCEx_PLL2_Config>
 800a020:	4603      	mov	r3, r0
 800a022:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a024:	e013      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3324      	adds	r3, #36	; 0x24
 800a02a:	2101      	movs	r1, #1
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fe51 	bl	800acd4 <RCCEx_PLL3_Config>
 800a032:	4603      	mov	r3, r0
 800a034:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a036:	e00a      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	75fb      	strb	r3, [r7, #23]
      break;
 800a03c:	e007      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a03e:	bf00      	nop
 800a040:	58024400 	.word	0x58024400
 800a044:	58024800 	.word	0x58024800
 800a048:	00ffffcf 	.word	0x00ffffcf
      break;
 800a04c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d109      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a054:	4b9f      	ldr	r3, [pc, #636]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a058:	f023 0207 	bic.w	r2, r3, #7
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a060:	499c      	ldr	r1, [pc, #624]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a062:	4313      	orrs	r3, r2
 800a064:	654b      	str	r3, [r1, #84]	; 0x54
 800a066:	e001      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0304 	and.w	r3, r3, #4
 800a074:	2b00      	cmp	r3, #0
 800a076:	d039      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a07e:	2b05      	cmp	r3, #5
 800a080:	d820      	bhi.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a082:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a088:	0800a0cb 	.word	0x0800a0cb
 800a08c:	0800a0a1 	.word	0x0800a0a1
 800a090:	0800a0b3 	.word	0x0800a0b3
 800a094:	0800a0cb 	.word	0x0800a0cb
 800a098:	0800a0cb 	.word	0x0800a0cb
 800a09c:	0800a0cb 	.word	0x0800a0cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fd62 	bl	800ab70 <RCCEx_PLL2_Config>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a0b0:	e00c      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3324      	adds	r3, #36	; 0x24
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f000 fe0b 	bl	800acd4 <RCCEx_PLL3_Config>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a0c2:	e003      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c8:	e000      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a0ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10a      	bne.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0d2:	4b80      	ldr	r3, [pc, #512]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d6:	f023 0207 	bic.w	r2, r3, #7
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e0:	497c      	ldr	r1, [pc, #496]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	658b      	str	r3, [r1, #88]	; 0x58
 800a0e6:	e001      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0320 	and.w	r3, r3, #32
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d04b      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a102:	d02e      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a108:	d828      	bhi.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a10e:	d02a      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a114:	d822      	bhi.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a11a:	d026      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a11c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a120:	d81c      	bhi.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a126:	d010      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a12c:	d816      	bhi.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d01d      	beq.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a136:	d111      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3304      	adds	r3, #4
 800a13c:	2100      	movs	r1, #0
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 fd16 	bl	800ab70 <RCCEx_PLL2_Config>
 800a144:	4603      	mov	r3, r0
 800a146:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a148:	e012      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3324      	adds	r3, #36	; 0x24
 800a14e:	2102      	movs	r1, #2
 800a150:	4618      	mov	r0, r3
 800a152:	f000 fdbf 	bl	800acd4 <RCCEx_PLL3_Config>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a15a:	e009      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	75fb      	strb	r3, [r7, #23]
      break;
 800a160:	e006      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a162:	bf00      	nop
 800a164:	e004      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a166:	bf00      	nop
 800a168:	e002      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a16a:	bf00      	nop
 800a16c:	e000      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a16e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10a      	bne.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a176:	4b57      	ldr	r3, [pc, #348]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a17a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a184:	4953      	ldr	r1, [pc, #332]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a186:	4313      	orrs	r3, r2
 800a188:	654b      	str	r3, [r1, #84]	; 0x54
 800a18a:	e001      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d04b      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1a6:	d02e      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a1a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1ac:	d828      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a1ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b2:	d02a      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a1b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b8:	d822      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a1ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1be:	d026      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a1c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1c4:	d81c      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a1c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ca:	d010      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a1cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1d0:	d816      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d01d      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a1d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1da:	d111      	bne.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	3304      	adds	r3, #4
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fcc4 	bl	800ab70 <RCCEx_PLL2_Config>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a1ec:	e012      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	3324      	adds	r3, #36	; 0x24
 800a1f2:	2102      	movs	r1, #2
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 fd6d 	bl	800acd4 <RCCEx_PLL3_Config>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a1fe:	e009      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	75fb      	strb	r3, [r7, #23]
      break;
 800a204:	e006      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a206:	bf00      	nop
 800a208:	e004      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a20a:	bf00      	nop
 800a20c:	e002      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a20e:	bf00      	nop
 800a210:	e000      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a212:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10a      	bne.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a21a:	4b2e      	ldr	r3, [pc, #184]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a228:	492a      	ldr	r1, [pc, #168]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a22a:	4313      	orrs	r3, r2
 800a22c:	658b      	str	r3, [r1, #88]	; 0x58
 800a22e:	e001      	b.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a230:	7dfb      	ldrb	r3, [r7, #23]
 800a232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d04d      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a246:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a24a:	d02e      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a24c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a250:	d828      	bhi.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a256:	d02a      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a25c:	d822      	bhi.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a25e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a262:	d026      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a264:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a268:	d81c      	bhi.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a26a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a26e:	d010      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a274:	d816      	bhi.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01d      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a27a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a27e:	d111      	bne.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3304      	adds	r3, #4
 800a284:	2100      	movs	r1, #0
 800a286:	4618      	mov	r0, r3
 800a288:	f000 fc72 	bl	800ab70 <RCCEx_PLL2_Config>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a290:	e012      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3324      	adds	r3, #36	; 0x24
 800a296:	2102      	movs	r1, #2
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 fd1b 	bl	800acd4 <RCCEx_PLL3_Config>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a2a2:	e009      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2a8:	e006      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a2aa:	bf00      	nop
 800a2ac:	e004      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a2ae:	bf00      	nop
 800a2b0:	e002      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a2b2:	bf00      	nop
 800a2b4:	e000      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a2b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10c      	bne.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a2be:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2cc:	4901      	ldr	r1, [pc, #4]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	658b      	str	r3, [r1, #88]	; 0x58
 800a2d2:	e003      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a2d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
 800a2da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0308 	and.w	r3, r3, #8
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d018      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2f0:	d10a      	bne.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	3324      	adds	r3, #36	; 0x24
 800a2f6:	2102      	movs	r1, #2
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 fceb 	bl	800acd4 <RCCEx_PLL3_Config>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a308:	4b8a      	ldr	r3, [pc, #552]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a30a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a314:	4987      	ldr	r1, [pc, #540]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a316:	4313      	orrs	r3, r2
 800a318:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0310 	and.w	r3, r3, #16
 800a322:	2b00      	cmp	r3, #0
 800a324:	d01a      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a32c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a330:	d10a      	bne.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	3324      	adds	r3, #36	; 0x24
 800a336:	2102      	movs	r1, #2
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 fccb 	bl	800acd4 <RCCEx_PLL3_Config>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a348:	4b7a      	ldr	r3, [pc, #488]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a34a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a34c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a356:	4977      	ldr	r1, [pc, #476]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a358:	4313      	orrs	r3, r2
 800a35a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d034      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a36e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a372:	d01d      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a378:	d817      	bhi.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a37e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a382:	d009      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a384:	e011      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	3304      	adds	r3, #4
 800a38a:	2100      	movs	r1, #0
 800a38c:	4618      	mov	r0, r3
 800a38e:	f000 fbef 	bl	800ab70 <RCCEx_PLL2_Config>
 800a392:	4603      	mov	r3, r0
 800a394:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a396:	e00c      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3324      	adds	r3, #36	; 0x24
 800a39c:	2102      	movs	r1, #2
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 fc98 	bl	800acd4 <RCCEx_PLL3_Config>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a3a8:	e003      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ae:	e000      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a3b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10a      	bne.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3b8:	4b5e      	ldr	r3, [pc, #376]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3c6:	495b      	ldr	r1, [pc, #364]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	658b      	str	r3, [r1, #88]	; 0x58
 800a3cc:	e001      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d033      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a3e8:	d01c      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a3ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a3ee:	d816      	bhi.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a3f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3f4:	d003      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a3f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3fa:	d007      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a3fc:	e00f      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3fe:	4b4d      	ldr	r3, [pc, #308]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a402:	4a4c      	ldr	r2, [pc, #304]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a40a:	e00c      	b.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	3324      	adds	r3, #36	; 0x24
 800a410:	2101      	movs	r1, #1
 800a412:	4618      	mov	r0, r3
 800a414:	f000 fc5e 	bl	800acd4 <RCCEx_PLL3_Config>
 800a418:	4603      	mov	r3, r0
 800a41a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a41c:	e003      	b.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	75fb      	strb	r3, [r7, #23]
      break;
 800a422:	e000      	b.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a424:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10a      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a42c:	4b41      	ldr	r3, [pc, #260]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a430:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a43a:	493e      	ldr	r1, [pc, #248]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	654b      	str	r3, [r1, #84]	; 0x54
 800a440:	e001      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d029      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a45a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a45e:	d007      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a460:	e00f      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a462:	4b34      	ldr	r3, [pc, #208]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	4a33      	ldr	r2, [pc, #204]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a46c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a46e:	e00b      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	3304      	adds	r3, #4
 800a474:	2102      	movs	r1, #2
 800a476:	4618      	mov	r0, r3
 800a478:	f000 fb7a 	bl	800ab70 <RCCEx_PLL2_Config>
 800a47c:	4603      	mov	r3, r0
 800a47e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a480:	e002      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	75fb      	strb	r3, [r7, #23]
      break;
 800a486:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d109      	bne.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a48e:	4b29      	ldr	r3, [pc, #164]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a492:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a49a:	4926      	ldr	r1, [pc, #152]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a49c:	4313      	orrs	r3, r2
 800a49e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a4a0:	e001      	b.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a2:	7dfb      	ldrb	r3, [r7, #23]
 800a4a4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00a      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3324      	adds	r3, #36	; 0x24
 800a4b6:	2102      	movs	r1, #2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 fc0b 	bl	800acd4 <RCCEx_PLL3_Config>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d033      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4dc:	d017      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a4de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4e2:	d811      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4e8:	d013      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a4ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4ee:	d80b      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d010      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a4f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4f8:	d106      	bne.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4fa:	4b0e      	ldr	r3, [pc, #56]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fe:	4a0d      	ldr	r2, [pc, #52]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a506:	e007      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	75fb      	strb	r3, [r7, #23]
      break;
 800a50c:	e004      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a50e:	bf00      	nop
 800a510:	e002      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a512:	bf00      	nop
 800a514:	e000      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a516:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10c      	bne.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a52a:	4902      	ldr	r1, [pc, #8]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a52c:	4313      	orrs	r3, r2
 800a52e:	654b      	str	r3, [r1, #84]	; 0x54
 800a530:	e004      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a532:	bf00      	nop
 800a534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a538:	7dfb      	ldrb	r3, [r7, #23]
 800a53a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d008      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a548:	4b29      	ldr	r3, [pc, #164]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a54a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a554:	4926      	ldr	r1, [pc, #152]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a556:	4313      	orrs	r3, r2
 800a558:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d008      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a566:	4b22      	ldr	r3, [pc, #136]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a572:	491f      	ldr	r1, [pc, #124]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a574:	4313      	orrs	r3, r2
 800a576:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00d      	beq.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a584:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	4a19      	ldr	r2, [pc, #100]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a58a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a58e:	6113      	str	r3, [r2, #16]
 800a590:	4b17      	ldr	r3, [pc, #92]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a592:	691a      	ldr	r2, [r3, #16]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a59a:	4915      	ldr	r1, [pc, #84]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	da08      	bge.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a5a8:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a5aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b4:	490e      	ldr	r1, [pc, #56]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d009      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a5c6:	4b0a      	ldr	r3, [pc, #40]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5d4:	4906      	ldr	r1, [pc, #24]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a5da:	7dbb      	ldrb	r3, [r7, #22]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e000      	b.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	58024400 	.word	0x58024400

0800a5f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a5f8:	f7ff f8a6 	bl	8009748 <HAL_RCC_GetHCLKFreq>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	4b06      	ldr	r3, [pc, #24]	; (800a618 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	091b      	lsrs	r3, r3, #4
 800a604:	f003 0307 	and.w	r3, r3, #7
 800a608:	4904      	ldr	r1, [pc, #16]	; (800a61c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a60a:	5ccb      	ldrb	r3, [r1, r3]
 800a60c:	f003 031f 	and.w	r3, r3, #31
 800a610:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a614:	4618      	mov	r0, r3
 800a616:	bd80      	pop	{r7, pc}
 800a618:	58024400 	.word	0x58024400
 800a61c:	0800fcd0 	.word	0x0800fcd0

0800a620 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a620:	b480      	push	{r7}
 800a622:	b089      	sub	sp, #36	; 0x24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a628:	4ba1      	ldr	r3, [pc, #644]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62c:	f003 0303 	and.w	r3, r3, #3
 800a630:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a632:	4b9f      	ldr	r3, [pc, #636]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a636:	0b1b      	lsrs	r3, r3, #12
 800a638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a63c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a63e:	4b9c      	ldr	r3, [pc, #624]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a642:	091b      	lsrs	r3, r3, #4
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a64a:	4b99      	ldr	r3, [pc, #612]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64e:	08db      	lsrs	r3, r3, #3
 800a650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	fb02 f303 	mul.w	r3, r2, r3
 800a65a:	ee07 3a90 	vmov	s15, r3
 800a65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a662:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 8111 	beq.w	800a890 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	2b02      	cmp	r3, #2
 800a672:	f000 8083 	beq.w	800a77c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	2b02      	cmp	r3, #2
 800a67a:	f200 80a1 	bhi.w	800a7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d003      	beq.n	800a68c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d056      	beq.n	800a738 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a68a:	e099      	b.n	800a7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a68c:	4b88      	ldr	r3, [pc, #544]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0320 	and.w	r3, r3, #32
 800a694:	2b00      	cmp	r3, #0
 800a696:	d02d      	beq.n	800a6f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a698:	4b85      	ldr	r3, [pc, #532]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	08db      	lsrs	r3, r3, #3
 800a69e:	f003 0303 	and.w	r3, r3, #3
 800a6a2:	4a84      	ldr	r2, [pc, #528]	; (800a8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a6a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	ee07 3a90 	vmov	s15, r3
 800a6b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6c2:	4b7b      	ldr	r3, [pc, #492]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ca:	ee07 3a90 	vmov	s15, r3
 800a6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a6f2:	e087      	b.n	800a804 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a8bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a706:	4b6a      	ldr	r3, [pc, #424]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a70e:	ee07 3a90 	vmov	s15, r3
 800a712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a716:	ed97 6a03 	vldr	s12, [r7, #12]
 800a71a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a736:	e065      	b.n	800a804 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	ee07 3a90 	vmov	s15, r3
 800a73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a742:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a74a:	4b59      	ldr	r3, [pc, #356]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a75a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a75e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a76a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a77a:	e043      	b.n	800a804 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a786:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a78a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a78e:	4b48      	ldr	r3, [pc, #288]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a796:	ee07 3a90 	vmov	s15, r3
 800a79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a79e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7be:	e021      	b.n	800a804 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a7ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d2:	4b37      	ldr	r3, [pc, #220]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7da:	ee07 3a90 	vmov	s15, r3
 800a7de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a802:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a804:	4b2a      	ldr	r3, [pc, #168]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a808:	0a5b      	lsrs	r3, r3, #9
 800a80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a80e:	ee07 3a90 	vmov	s15, r3
 800a812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a81a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a81e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a82a:	ee17 2a90 	vmov	r2, s15
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a832:	4b1f      	ldr	r3, [pc, #124]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a836:	0c1b      	lsrs	r3, r3, #16
 800a838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83c:	ee07 3a90 	vmov	s15, r3
 800a840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a848:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a84c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a858:	ee17 2a90 	vmov	r2, s15
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a860:	4b13      	ldr	r3, [pc, #76]	; (800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a864:	0e1b      	lsrs	r3, r3, #24
 800a866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86a:	ee07 3a90 	vmov	s15, r3
 800a86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a87a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a87e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a886:	ee17 2a90 	vmov	r2, s15
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a88e:	e008      	b.n	800a8a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	609a      	str	r2, [r3, #8]
}
 800a8a2:	bf00      	nop
 800a8a4:	3724      	adds	r7, #36	; 0x24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	58024400 	.word	0x58024400
 800a8b4:	03d09000 	.word	0x03d09000
 800a8b8:	46000000 	.word	0x46000000
 800a8bc:	4c742400 	.word	0x4c742400
 800a8c0:	4a742400 	.word	0x4a742400
 800a8c4:	4af42400 	.word	0x4af42400

0800a8c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b089      	sub	sp, #36	; 0x24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8d0:	4ba1      	ldr	r3, [pc, #644]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a8da:	4b9f      	ldr	r3, [pc, #636]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8de:	0d1b      	lsrs	r3, r3, #20
 800a8e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a8e6:	4b9c      	ldr	r3, [pc, #624]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ea:	0a1b      	lsrs	r3, r3, #8
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a8f2:	4b99      	ldr	r3, [pc, #612]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f6:	08db      	lsrs	r3, r3, #3
 800a8f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	fb02 f303 	mul.w	r3, r2, r3
 800a902:	ee07 3a90 	vmov	s15, r3
 800a906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 8111 	beq.w	800ab38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	2b02      	cmp	r3, #2
 800a91a:	f000 8083 	beq.w	800aa24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	2b02      	cmp	r3, #2
 800a922:	f200 80a1 	bhi.w	800aa68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d056      	beq.n	800a9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a932:	e099      	b.n	800aa68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a934:	4b88      	ldr	r3, [pc, #544]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0320 	and.w	r3, r3, #32
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d02d      	beq.n	800a99c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a940:	4b85      	ldr	r3, [pc, #532]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	08db      	lsrs	r3, r3, #3
 800a946:	f003 0303 	and.w	r3, r3, #3
 800a94a:	4a84      	ldr	r2, [pc, #528]	; (800ab5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a94c:	fa22 f303 	lsr.w	r3, r2, r3
 800a950:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	ee07 3a90 	vmov	s15, r3
 800a958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	ee07 3a90 	vmov	s15, r3
 800a962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a96a:	4b7b      	ldr	r3, [pc, #492]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a972:	ee07 3a90 	vmov	s15, r3
 800a976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a97a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a97e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a98a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a98e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a996:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a99a:	e087      	b.n	800aaac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ae:	4b6a      	ldr	r3, [pc, #424]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b6:	ee07 3a90 	vmov	s15, r3
 800a9ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9de:	e065      	b.n	800aaac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f2:	4b59      	ldr	r3, [pc, #356]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa02:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa06:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa22:	e043      	b.n	800aaac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ab6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aa32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa36:	4b48      	ldr	r3, [pc, #288]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa46:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa66:	e021      	b.n	800aaac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ab68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa7a:	4b37      	ldr	r3, [pc, #220]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa82:	ee07 3a90 	vmov	s15, r3
 800aa86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aaaa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aaac:	4b2a      	ldr	r3, [pc, #168]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab0:	0a5b      	lsrs	r3, r3, #9
 800aab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aac6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aad2:	ee17 2a90 	vmov	r2, s15
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aada:	4b1f      	ldr	r3, [pc, #124]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aade:	0c1b      	lsrs	r3, r3, #16
 800aae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae4:	ee07 3a90 	vmov	s15, r3
 800aae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aafc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab00:	ee17 2a90 	vmov	r2, s15
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ab08:	4b13      	ldr	r3, [pc, #76]	; (800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0c:	0e1b      	lsrs	r3, r3, #24
 800ab0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab2e:	ee17 2a90 	vmov	r2, s15
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ab36:	e008      	b.n	800ab4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	609a      	str	r2, [r3, #8]
}
 800ab4a:	bf00      	nop
 800ab4c:	3724      	adds	r7, #36	; 0x24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	58024400 	.word	0x58024400
 800ab5c:	03d09000 	.word	0x03d09000
 800ab60:	46000000 	.word	0x46000000
 800ab64:	4c742400 	.word	0x4c742400
 800ab68:	4a742400 	.word	0x4a742400
 800ab6c:	4af42400 	.word	0x4af42400

0800ab70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab7e:	4b53      	ldr	r3, [pc, #332]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ab80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab82:	f003 0303 	and.w	r3, r3, #3
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d101      	bne.n	800ab8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e099      	b.n	800acc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ab8e:	4b4f      	ldr	r3, [pc, #316]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a4e      	ldr	r2, [pc, #312]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ab94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ab98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab9a:	f7fa fa97 	bl	80050cc <HAL_GetTick>
 800ab9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aba0:	e008      	b.n	800abb4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aba2:	f7fa fa93 	bl	80050cc <HAL_GetTick>
 800aba6:	4602      	mov	r2, r0
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	2b02      	cmp	r3, #2
 800abae:	d901      	bls.n	800abb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e086      	b.n	800acc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800abb4:	4b45      	ldr	r3, [pc, #276]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1f0      	bne.n	800aba2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800abc0:	4b42      	ldr	r3, [pc, #264]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800abc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	031b      	lsls	r3, r3, #12
 800abce:	493f      	ldr	r1, [pc, #252]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800abd0:	4313      	orrs	r3, r2
 800abd2:	628b      	str	r3, [r1, #40]	; 0x28
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	3b01      	subs	r3, #1
 800abda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	3b01      	subs	r3, #1
 800abe4:	025b      	lsls	r3, r3, #9
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	431a      	orrs	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	3b01      	subs	r3, #1
 800abf0:	041b      	lsls	r3, r3, #16
 800abf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800abf6:	431a      	orrs	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	061b      	lsls	r3, r3, #24
 800ac00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac04:	4931      	ldr	r1, [pc, #196]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac06:	4313      	orrs	r3, r2
 800ac08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ac0a:	4b30      	ldr	r3, [pc, #192]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	492d      	ldr	r1, [pc, #180]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ac1c:	4b2b      	ldr	r3, [pc, #172]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac20:	f023 0220 	bic.w	r2, r3, #32
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	4928      	ldr	r1, [pc, #160]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ac2e:	4b27      	ldr	r3, [pc, #156]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac32:	4a26      	ldr	r2, [pc, #152]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac34:	f023 0310 	bic.w	r3, r3, #16
 800ac38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ac3a:	4b24      	ldr	r3, [pc, #144]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac3e:	4b24      	ldr	r3, [pc, #144]	; (800acd0 <RCCEx_PLL2_Config+0x160>)
 800ac40:	4013      	ands	r3, r2
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	69d2      	ldr	r2, [r2, #28]
 800ac46:	00d2      	lsls	r2, r2, #3
 800ac48:	4920      	ldr	r1, [pc, #128]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ac4e:	4b1f      	ldr	r3, [pc, #124]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac52:	4a1e      	ldr	r2, [pc, #120]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac54:	f043 0310 	orr.w	r3, r3, #16
 800ac58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ac60:	4b1a      	ldr	r3, [pc, #104]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	4a19      	ldr	r2, [pc, #100]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac6c:	e00f      	b.n	800ac8e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d106      	bne.n	800ac82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ac74:	4b15      	ldr	r3, [pc, #84]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	4a14      	ldr	r2, [pc, #80]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac80:	e005      	b.n	800ac8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ac82:	4b12      	ldr	r3, [pc, #72]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac86:	4a11      	ldr	r2, [pc, #68]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ac8e:	4b0f      	ldr	r3, [pc, #60]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a0e      	ldr	r2, [pc, #56]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800ac94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac9a:	f7fa fa17 	bl	80050cc <HAL_GetTick>
 800ac9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aca0:	e008      	b.n	800acb4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aca2:	f7fa fa13 	bl	80050cc <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	2b02      	cmp	r3, #2
 800acae:	d901      	bls.n	800acb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e006      	b.n	800acc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800acb4:	4b05      	ldr	r3, [pc, #20]	; (800accc <RCCEx_PLL2_Config+0x15c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d0f0      	beq.n	800aca2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	58024400 	.word	0x58024400
 800acd0:	ffff0007 	.word	0xffff0007

0800acd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ace2:	4b53      	ldr	r3, [pc, #332]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ace4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace6:	f003 0303 	and.w	r3, r3, #3
 800acea:	2b03      	cmp	r3, #3
 800acec:	d101      	bne.n	800acf2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e099      	b.n	800ae26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800acf2:	4b4f      	ldr	r3, [pc, #316]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a4e      	ldr	r2, [pc, #312]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800acf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acfe:	f7fa f9e5 	bl	80050cc <HAL_GetTick>
 800ad02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad04:	e008      	b.n	800ad18 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ad06:	f7fa f9e1 	bl	80050cc <HAL_GetTick>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d901      	bls.n	800ad18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ad14:	2303      	movs	r3, #3
 800ad16:	e086      	b.n	800ae26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad18:	4b45      	ldr	r3, [pc, #276]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1f0      	bne.n	800ad06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ad24:	4b42      	ldr	r3, [pc, #264]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ad26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	051b      	lsls	r3, r3, #20
 800ad32:	493f      	ldr	r1, [pc, #252]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ad34:	4313      	orrs	r3, r2
 800ad36:	628b      	str	r3, [r1, #40]	; 0x28
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	025b      	lsls	r3, r3, #9
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	431a      	orrs	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	3b01      	subs	r3, #1
 800ad54:	041b      	lsls	r3, r3, #16
 800ad56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	061b      	lsls	r3, r3, #24
 800ad64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad68:	4931      	ldr	r1, [pc, #196]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ad6e:	4b30      	ldr	r3, [pc, #192]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ad70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	492d      	ldr	r1, [pc, #180]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ad80:	4b2b      	ldr	r3, [pc, #172]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	4928      	ldr	r1, [pc, #160]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ad92:	4b27      	ldr	r3, [pc, #156]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ad94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad96:	4a26      	ldr	r2, [pc, #152]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ad98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ad9e:	4b24      	ldr	r3, [pc, #144]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ada0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ada2:	4b24      	ldr	r3, [pc, #144]	; (800ae34 <RCCEx_PLL3_Config+0x160>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	69d2      	ldr	r2, [r2, #28]
 800adaa:	00d2      	lsls	r2, r2, #3
 800adac:	4920      	ldr	r1, [pc, #128]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800adae:	4313      	orrs	r3, r2
 800adb0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800adb2:	4b1f      	ldr	r3, [pc, #124]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800adb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb6:	4a1e      	ldr	r2, [pc, #120]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800adb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d106      	bne.n	800add2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800adc4:	4b1a      	ldr	r3, [pc, #104]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc8:	4a19      	ldr	r2, [pc, #100]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800adca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800adce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800add0:	e00f      	b.n	800adf2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d106      	bne.n	800ade6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800add8:	4b15      	ldr	r3, [pc, #84]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800addc:	4a14      	ldr	r2, [pc, #80]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800adde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ade2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ade4:	e005      	b.n	800adf2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ade6:	4b12      	ldr	r3, [pc, #72]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ade8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adea:	4a11      	ldr	r2, [pc, #68]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800adec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800adf2:	4b0f      	ldr	r3, [pc, #60]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a0e      	ldr	r2, [pc, #56]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800adf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adfe:	f7fa f965 	bl	80050cc <HAL_GetTick>
 800ae02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae04:	e008      	b.n	800ae18 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ae06:	f7fa f961 	bl	80050cc <HAL_GetTick>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d901      	bls.n	800ae18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ae14:	2303      	movs	r3, #3
 800ae16:	e006      	b.n	800ae26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae18:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <RCCEx_PLL3_Config+0x15c>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d0f0      	beq.n	800ae06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	58024400 	.word	0x58024400
 800ae34:	ffff0007 	.word	0xffff0007

0800ae38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e049      	b.n	800aede <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d106      	bne.n	800ae64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7f9 fa2c 	bl	80042bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2202      	movs	r2, #2
 800ae68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3304      	adds	r3, #4
 800ae74:	4619      	mov	r1, r3
 800ae76:	4610      	mov	r0, r2
 800ae78:	f000 feb8 	bl	800bbec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
	...

0800aee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d001      	beq.n	800af00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e05e      	b.n	800afbe <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2202      	movs	r2, #2
 800af04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68da      	ldr	r2, [r3, #12]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f042 0201 	orr.w	r2, r2, #1
 800af16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a2b      	ldr	r2, [pc, #172]	; (800afcc <HAL_TIM_Base_Start_IT+0xe4>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d02c      	beq.n	800af7c <HAL_TIM_Base_Start_IT+0x94>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af2a:	d027      	beq.n	800af7c <HAL_TIM_Base_Start_IT+0x94>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a27      	ldr	r2, [pc, #156]	; (800afd0 <HAL_TIM_Base_Start_IT+0xe8>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d022      	beq.n	800af7c <HAL_TIM_Base_Start_IT+0x94>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a26      	ldr	r2, [pc, #152]	; (800afd4 <HAL_TIM_Base_Start_IT+0xec>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d01d      	beq.n	800af7c <HAL_TIM_Base_Start_IT+0x94>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a24      	ldr	r2, [pc, #144]	; (800afd8 <HAL_TIM_Base_Start_IT+0xf0>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d018      	beq.n	800af7c <HAL_TIM_Base_Start_IT+0x94>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a23      	ldr	r2, [pc, #140]	; (800afdc <HAL_TIM_Base_Start_IT+0xf4>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d013      	beq.n	800af7c <HAL_TIM_Base_Start_IT+0x94>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a21      	ldr	r2, [pc, #132]	; (800afe0 <HAL_TIM_Base_Start_IT+0xf8>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d00e      	beq.n	800af7c <HAL_TIM_Base_Start_IT+0x94>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a20      	ldr	r2, [pc, #128]	; (800afe4 <HAL_TIM_Base_Start_IT+0xfc>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d009      	beq.n	800af7c <HAL_TIM_Base_Start_IT+0x94>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a1e      	ldr	r2, [pc, #120]	; (800afe8 <HAL_TIM_Base_Start_IT+0x100>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d004      	beq.n	800af7c <HAL_TIM_Base_Start_IT+0x94>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a1d      	ldr	r2, [pc, #116]	; (800afec <HAL_TIM_Base_Start_IT+0x104>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d115      	bne.n	800afa8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	4b1b      	ldr	r3, [pc, #108]	; (800aff0 <HAL_TIM_Base_Start_IT+0x108>)
 800af84:	4013      	ands	r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2b06      	cmp	r3, #6
 800af8c:	d015      	beq.n	800afba <HAL_TIM_Base_Start_IT+0xd2>
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af94:	d011      	beq.n	800afba <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f042 0201 	orr.w	r2, r2, #1
 800afa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afa6:	e008      	b.n	800afba <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f042 0201 	orr.w	r2, r2, #1
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	e000      	b.n	800afbc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	40010000 	.word	0x40010000
 800afd0:	40000400 	.word	0x40000400
 800afd4:	40000800 	.word	0x40000800
 800afd8:	40000c00 	.word	0x40000c00
 800afdc:	40010400 	.word	0x40010400
 800afe0:	40001800 	.word	0x40001800
 800afe4:	40014000 	.word	0x40014000
 800afe8:	4000e000 	.word	0x4000e000
 800afec:	4000e400 	.word	0x4000e400
 800aff0:	00010007 	.word	0x00010007

0800aff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e049      	b.n	800b09a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d106      	bne.n	800b020 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7f9 fa86 	bl	800452c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2202      	movs	r2, #2
 800b024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3304      	adds	r3, #4
 800b030:	4619      	mov	r1, r3
 800b032:	4610      	mov	r0, r2
 800b034:	f000 fdda 	bl	800bbec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
	...

0800b0a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d109      	bne.n	800b0c8 <HAL_TIM_PWM_Start+0x24>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	bf14      	ite	ne
 800b0c0:	2301      	movne	r3, #1
 800b0c2:	2300      	moveq	r3, #0
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	e03c      	b.n	800b142 <HAL_TIM_PWM_Start+0x9e>
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2b04      	cmp	r3, #4
 800b0cc:	d109      	bne.n	800b0e2 <HAL_TIM_PWM_Start+0x3e>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	bf14      	ite	ne
 800b0da:	2301      	movne	r3, #1
 800b0dc:	2300      	moveq	r3, #0
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	e02f      	b.n	800b142 <HAL_TIM_PWM_Start+0x9e>
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b08      	cmp	r3, #8
 800b0e6:	d109      	bne.n	800b0fc <HAL_TIM_PWM_Start+0x58>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	bf14      	ite	ne
 800b0f4:	2301      	movne	r3, #1
 800b0f6:	2300      	moveq	r3, #0
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	e022      	b.n	800b142 <HAL_TIM_PWM_Start+0x9e>
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	2b0c      	cmp	r3, #12
 800b100:	d109      	bne.n	800b116 <HAL_TIM_PWM_Start+0x72>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	bf14      	ite	ne
 800b10e:	2301      	movne	r3, #1
 800b110:	2300      	moveq	r3, #0
 800b112:	b2db      	uxtb	r3, r3
 800b114:	e015      	b.n	800b142 <HAL_TIM_PWM_Start+0x9e>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b10      	cmp	r3, #16
 800b11a:	d109      	bne.n	800b130 <HAL_TIM_PWM_Start+0x8c>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b01      	cmp	r3, #1
 800b126:	bf14      	ite	ne
 800b128:	2301      	movne	r3, #1
 800b12a:	2300      	moveq	r3, #0
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	e008      	b.n	800b142 <HAL_TIM_PWM_Start+0x9e>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b01      	cmp	r3, #1
 800b13a:	bf14      	ite	ne
 800b13c:	2301      	movne	r3, #1
 800b13e:	2300      	moveq	r3, #0
 800b140:	b2db      	uxtb	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e0ab      	b.n	800b2a2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d104      	bne.n	800b15a <HAL_TIM_PWM_Start+0xb6>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b158:	e023      	b.n	800b1a2 <HAL_TIM_PWM_Start+0xfe>
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b04      	cmp	r3, #4
 800b15e:	d104      	bne.n	800b16a <HAL_TIM_PWM_Start+0xc6>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2202      	movs	r2, #2
 800b164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b168:	e01b      	b.n	800b1a2 <HAL_TIM_PWM_Start+0xfe>
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2b08      	cmp	r3, #8
 800b16e:	d104      	bne.n	800b17a <HAL_TIM_PWM_Start+0xd6>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2202      	movs	r2, #2
 800b174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b178:	e013      	b.n	800b1a2 <HAL_TIM_PWM_Start+0xfe>
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b0c      	cmp	r3, #12
 800b17e:	d104      	bne.n	800b18a <HAL_TIM_PWM_Start+0xe6>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2202      	movs	r2, #2
 800b184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b188:	e00b      	b.n	800b1a2 <HAL_TIM_PWM_Start+0xfe>
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b10      	cmp	r3, #16
 800b18e:	d104      	bne.n	800b19a <HAL_TIM_PWM_Start+0xf6>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2202      	movs	r2, #2
 800b194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b198:	e003      	b.n	800b1a2 <HAL_TIM_PWM_Start+0xfe>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2202      	movs	r2, #2
 800b19e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 f938 	bl	800c420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a3d      	ldr	r2, [pc, #244]	; (800b2ac <HAL_TIM_PWM_Start+0x208>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d013      	beq.n	800b1e2 <HAL_TIM_PWM_Start+0x13e>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a3c      	ldr	r2, [pc, #240]	; (800b2b0 <HAL_TIM_PWM_Start+0x20c>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d00e      	beq.n	800b1e2 <HAL_TIM_PWM_Start+0x13e>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a3a      	ldr	r2, [pc, #232]	; (800b2b4 <HAL_TIM_PWM_Start+0x210>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d009      	beq.n	800b1e2 <HAL_TIM_PWM_Start+0x13e>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a39      	ldr	r2, [pc, #228]	; (800b2b8 <HAL_TIM_PWM_Start+0x214>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d004      	beq.n	800b1e2 <HAL_TIM_PWM_Start+0x13e>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a37      	ldr	r2, [pc, #220]	; (800b2bc <HAL_TIM_PWM_Start+0x218>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d101      	bne.n	800b1e6 <HAL_TIM_PWM_Start+0x142>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e000      	b.n	800b1e8 <HAL_TIM_PWM_Start+0x144>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d007      	beq.n	800b1fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a2a      	ldr	r2, [pc, #168]	; (800b2ac <HAL_TIM_PWM_Start+0x208>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d02c      	beq.n	800b260 <HAL_TIM_PWM_Start+0x1bc>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b20e:	d027      	beq.n	800b260 <HAL_TIM_PWM_Start+0x1bc>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a2a      	ldr	r2, [pc, #168]	; (800b2c0 <HAL_TIM_PWM_Start+0x21c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d022      	beq.n	800b260 <HAL_TIM_PWM_Start+0x1bc>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a29      	ldr	r2, [pc, #164]	; (800b2c4 <HAL_TIM_PWM_Start+0x220>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d01d      	beq.n	800b260 <HAL_TIM_PWM_Start+0x1bc>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a27      	ldr	r2, [pc, #156]	; (800b2c8 <HAL_TIM_PWM_Start+0x224>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d018      	beq.n	800b260 <HAL_TIM_PWM_Start+0x1bc>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a1f      	ldr	r2, [pc, #124]	; (800b2b0 <HAL_TIM_PWM_Start+0x20c>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d013      	beq.n	800b260 <HAL_TIM_PWM_Start+0x1bc>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a23      	ldr	r2, [pc, #140]	; (800b2cc <HAL_TIM_PWM_Start+0x228>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d00e      	beq.n	800b260 <HAL_TIM_PWM_Start+0x1bc>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a1b      	ldr	r2, [pc, #108]	; (800b2b4 <HAL_TIM_PWM_Start+0x210>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d009      	beq.n	800b260 <HAL_TIM_PWM_Start+0x1bc>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1f      	ldr	r2, [pc, #124]	; (800b2d0 <HAL_TIM_PWM_Start+0x22c>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d004      	beq.n	800b260 <HAL_TIM_PWM_Start+0x1bc>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a1e      	ldr	r2, [pc, #120]	; (800b2d4 <HAL_TIM_PWM_Start+0x230>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d115      	bne.n	800b28c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	689a      	ldr	r2, [r3, #8]
 800b266:	4b1c      	ldr	r3, [pc, #112]	; (800b2d8 <HAL_TIM_PWM_Start+0x234>)
 800b268:	4013      	ands	r3, r2
 800b26a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2b06      	cmp	r3, #6
 800b270:	d015      	beq.n	800b29e <HAL_TIM_PWM_Start+0x1fa>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b278:	d011      	beq.n	800b29e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f042 0201 	orr.w	r2, r2, #1
 800b288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b28a:	e008      	b.n	800b29e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f042 0201 	orr.w	r2, r2, #1
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	e000      	b.n	800b2a0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b29e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	40010000 	.word	0x40010000
 800b2b0:	40010400 	.word	0x40010400
 800b2b4:	40014000 	.word	0x40014000
 800b2b8:	40014400 	.word	0x40014400
 800b2bc:	40014800 	.word	0x40014800
 800b2c0:	40000400 	.word	0x40000400
 800b2c4:	40000800 	.word	0x40000800
 800b2c8:	40000c00 	.word	0x40000c00
 800b2cc:	40001800 	.word	0x40001800
 800b2d0:	4000e000 	.word	0x4000e000
 800b2d4:	4000e400 	.word	0x4000e400
 800b2d8:	00010007 	.word	0x00010007

0800b2dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d101      	bne.n	800b2f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e08f      	b.n	800b410 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f7f9 f81f 	bl	8004348 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2202      	movs	r2, #2
 800b30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6899      	ldr	r1, [r3, #8]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	4b3e      	ldr	r3, [pc, #248]	; (800b418 <HAL_TIM_Encoder_Init+0x13c>)
 800b31e:	400b      	ands	r3, r1
 800b320:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	3304      	adds	r3, #4
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f000 fc5d 	bl	800bbec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	4313      	orrs	r3, r2
 800b352:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	4b31      	ldr	r3, [pc, #196]	; (800b41c <HAL_TIM_Encoder_Init+0x140>)
 800b358:	4013      	ands	r3, r2
 800b35a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	689a      	ldr	r2, [r3, #8]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	021b      	lsls	r3, r3, #8
 800b366:	4313      	orrs	r3, r2
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	4b2b      	ldr	r3, [pc, #172]	; (800b420 <HAL_TIM_Encoder_Init+0x144>)
 800b372:	4013      	ands	r3, r2
 800b374:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	4b2a      	ldr	r3, [pc, #168]	; (800b424 <HAL_TIM_Encoder_Init+0x148>)
 800b37a:	4013      	ands	r3, r2
 800b37c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	68da      	ldr	r2, [r3, #12]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	021b      	lsls	r3, r3, #8
 800b388:	4313      	orrs	r3, r2
 800b38a:	693a      	ldr	r2, [r7, #16]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	011a      	lsls	r2, r3, #4
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	031b      	lsls	r3, r3, #12
 800b39c:	4313      	orrs	r3, r2
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b3aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b3b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	011b      	lsls	r3, r3, #4
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	fffebff8 	.word	0xfffebff8
 800b41c:	fffffcfc 	.word	0xfffffcfc
 800b420:	fffff3f3 	.word	0xfffff3f3
 800b424:	ffff0f0f 	.word	0xffff0f0f

0800b428 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b438:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b440:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b448:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b450:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d110      	bne.n	800b47a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b458:	7bfb      	ldrb	r3, [r7, #15]
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d102      	bne.n	800b464 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b45e:	7b7b      	ldrb	r3, [r7, #13]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d001      	beq.n	800b468 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e069      	b.n	800b53c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2202      	movs	r2, #2
 800b46c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b478:	e031      	b.n	800b4de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	2b04      	cmp	r3, #4
 800b47e:	d110      	bne.n	800b4a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d102      	bne.n	800b48c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b486:	7b3b      	ldrb	r3, [r7, #12]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d001      	beq.n	800b490 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e055      	b.n	800b53c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2202      	movs	r2, #2
 800b494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2202      	movs	r2, #2
 800b49c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4a0:	e01d      	b.n	800b4de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d108      	bne.n	800b4ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4a8:	7bbb      	ldrb	r3, [r7, #14]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d105      	bne.n	800b4ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4ae:	7b7b      	ldrb	r3, [r7, #13]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d102      	bne.n	800b4ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b4b4:	7b3b      	ldrb	r3, [r7, #12]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d001      	beq.n	800b4be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e03e      	b.n	800b53c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2202      	movs	r2, #2
 800b4ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2202      	movs	r2, #2
 800b4da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d003      	beq.n	800b4ec <HAL_TIM_Encoder_Start+0xc4>
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	2b04      	cmp	r3, #4
 800b4e8:	d008      	beq.n	800b4fc <HAL_TIM_Encoder_Start+0xd4>
 800b4ea:	e00f      	b.n	800b50c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 ff93 	bl	800c420 <TIM_CCxChannelCmd>
      break;
 800b4fa:	e016      	b.n	800b52a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2201      	movs	r2, #1
 800b502:	2104      	movs	r1, #4
 800b504:	4618      	mov	r0, r3
 800b506:	f000 ff8b 	bl	800c420 <TIM_CCxChannelCmd>
      break;
 800b50a:	e00e      	b.n	800b52a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2201      	movs	r2, #1
 800b512:	2100      	movs	r1, #0
 800b514:	4618      	mov	r0, r3
 800b516:	f000 ff83 	bl	800c420 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2201      	movs	r2, #1
 800b520:	2104      	movs	r1, #4
 800b522:	4618      	mov	r0, r3
 800b524:	f000 ff7c 	bl	800c420 <TIM_CCxChannelCmd>
      break;
 800b528:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f042 0201 	orr.w	r2, r2, #1
 800b538:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b02      	cmp	r3, #2
 800b558:	d122      	bne.n	800b5a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b02      	cmp	r3, #2
 800b566:	d11b      	bne.n	800b5a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f06f 0202 	mvn.w	r2, #2
 800b570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	f003 0303 	and.w	r3, r3, #3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fb12 	bl	800bbb0 <HAL_TIM_IC_CaptureCallback>
 800b58c:	e005      	b.n	800b59a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fb04 	bl	800bb9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fb15 	bl	800bbc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	f003 0304 	and.w	r3, r3, #4
 800b5aa:	2b04      	cmp	r3, #4
 800b5ac:	d122      	bne.n	800b5f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	f003 0304 	and.w	r3, r3, #4
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	d11b      	bne.n	800b5f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f06f 0204 	mvn.w	r2, #4
 800b5c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fae8 	bl	800bbb0 <HAL_TIM_IC_CaptureCallback>
 800b5e0:	e005      	b.n	800b5ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fada 	bl	800bb9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 faeb 	bl	800bbc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	f003 0308 	and.w	r3, r3, #8
 800b5fe:	2b08      	cmp	r3, #8
 800b600:	d122      	bne.n	800b648 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	f003 0308 	and.w	r3, r3, #8
 800b60c:	2b08      	cmp	r3, #8
 800b60e:	d11b      	bne.n	800b648 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f06f 0208 	mvn.w	r2, #8
 800b618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2204      	movs	r2, #4
 800b61e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	69db      	ldr	r3, [r3, #28]
 800b626:	f003 0303 	and.w	r3, r3, #3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fabe 	bl	800bbb0 <HAL_TIM_IC_CaptureCallback>
 800b634:	e005      	b.n	800b642 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fab0 	bl	800bb9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 fac1 	bl	800bbc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	f003 0310 	and.w	r3, r3, #16
 800b652:	2b10      	cmp	r3, #16
 800b654:	d122      	bne.n	800b69c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	f003 0310 	and.w	r3, r3, #16
 800b660:	2b10      	cmp	r3, #16
 800b662:	d11b      	bne.n	800b69c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f06f 0210 	mvn.w	r2, #16
 800b66c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2208      	movs	r2, #8
 800b672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	69db      	ldr	r3, [r3, #28]
 800b67a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d003      	beq.n	800b68a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fa94 	bl	800bbb0 <HAL_TIM_IC_CaptureCallback>
 800b688:	e005      	b.n	800b696 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fa86 	bl	800bb9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fa97 	bl	800bbc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d10e      	bne.n	800b6c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d107      	bne.n	800b6c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f06f 0201 	mvn.w	r2, #1
 800b6c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7f9 fa42 	bl	8004b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d2:	2b80      	cmp	r3, #128	; 0x80
 800b6d4:	d10e      	bne.n	800b6f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e0:	2b80      	cmp	r3, #128	; 0x80
 800b6e2:	d107      	bne.n	800b6f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f001 f802 	bl	800c6f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b702:	d10e      	bne.n	800b722 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b70e:	2b80      	cmp	r3, #128	; 0x80
 800b710:	d107      	bne.n	800b722 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b71a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fff5 	bl	800c70c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b72c:	2b40      	cmp	r3, #64	; 0x40
 800b72e:	d10e      	bne.n	800b74e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b73a:	2b40      	cmp	r3, #64	; 0x40
 800b73c:	d107      	bne.n	800b74e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fa45 	bl	800bbd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	f003 0320 	and.w	r3, r3, #32
 800b758:	2b20      	cmp	r3, #32
 800b75a:	d10e      	bne.n	800b77a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	f003 0320 	and.w	r3, r3, #32
 800b766:	2b20      	cmp	r3, #32
 800b768:	d107      	bne.n	800b77a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f06f 0220 	mvn.w	r2, #32
 800b772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 ffb5 	bl	800c6e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b77a:	bf00      	nop
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
	...

0800b784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b790:	2300      	movs	r3, #0
 800b792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d101      	bne.n	800b7a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b79e:	2302      	movs	r3, #2
 800b7a0:	e0ff      	b.n	800b9a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b14      	cmp	r3, #20
 800b7ae:	f200 80f0 	bhi.w	800b992 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b7b2:	a201      	add	r2, pc, #4	; (adr r2, 800b7b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b8:	0800b80d 	.word	0x0800b80d
 800b7bc:	0800b993 	.word	0x0800b993
 800b7c0:	0800b993 	.word	0x0800b993
 800b7c4:	0800b993 	.word	0x0800b993
 800b7c8:	0800b84d 	.word	0x0800b84d
 800b7cc:	0800b993 	.word	0x0800b993
 800b7d0:	0800b993 	.word	0x0800b993
 800b7d4:	0800b993 	.word	0x0800b993
 800b7d8:	0800b88f 	.word	0x0800b88f
 800b7dc:	0800b993 	.word	0x0800b993
 800b7e0:	0800b993 	.word	0x0800b993
 800b7e4:	0800b993 	.word	0x0800b993
 800b7e8:	0800b8cf 	.word	0x0800b8cf
 800b7ec:	0800b993 	.word	0x0800b993
 800b7f0:	0800b993 	.word	0x0800b993
 800b7f4:	0800b993 	.word	0x0800b993
 800b7f8:	0800b911 	.word	0x0800b911
 800b7fc:	0800b993 	.word	0x0800b993
 800b800:	0800b993 	.word	0x0800b993
 800b804:	0800b993 	.word	0x0800b993
 800b808:	0800b951 	.word	0x0800b951
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68b9      	ldr	r1, [r7, #8]
 800b812:	4618      	mov	r0, r3
 800b814:	f000 fa90 	bl	800bd38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	699a      	ldr	r2, [r3, #24]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f042 0208 	orr.w	r2, r2, #8
 800b826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	699a      	ldr	r2, [r3, #24]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f022 0204 	bic.w	r2, r2, #4
 800b836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6999      	ldr	r1, [r3, #24]
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	691a      	ldr	r2, [r3, #16]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	430a      	orrs	r2, r1
 800b848:	619a      	str	r2, [r3, #24]
      break;
 800b84a:	e0a5      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68b9      	ldr	r1, [r7, #8]
 800b852:	4618      	mov	r0, r3
 800b854:	f000 fb00 	bl	800be58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	699a      	ldr	r2, [r3, #24]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	699a      	ldr	r2, [r3, #24]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6999      	ldr	r1, [r3, #24]
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	021a      	lsls	r2, r3, #8
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	430a      	orrs	r2, r1
 800b88a:	619a      	str	r2, [r3, #24]
      break;
 800b88c:	e084      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68b9      	ldr	r1, [r7, #8]
 800b894:	4618      	mov	r0, r3
 800b896:	f000 fb69 	bl	800bf6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	69da      	ldr	r2, [r3, #28]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f042 0208 	orr.w	r2, r2, #8
 800b8a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	69da      	ldr	r2, [r3, #28]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f022 0204 	bic.w	r2, r2, #4
 800b8b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	69d9      	ldr	r1, [r3, #28]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	691a      	ldr	r2, [r3, #16]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	430a      	orrs	r2, r1
 800b8ca:	61da      	str	r2, [r3, #28]
      break;
 800b8cc:	e064      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68b9      	ldr	r1, [r7, #8]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 fbd1 	bl	800c07c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	69da      	ldr	r2, [r3, #28]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	69da      	ldr	r2, [r3, #28]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69d9      	ldr	r1, [r3, #28]
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	021a      	lsls	r2, r3, #8
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	430a      	orrs	r2, r1
 800b90c:	61da      	str	r2, [r3, #28]
      break;
 800b90e:	e043      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68b9      	ldr	r1, [r7, #8]
 800b916:	4618      	mov	r0, r3
 800b918:	f000 fc1a 	bl	800c150 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f042 0208 	orr.w	r2, r2, #8
 800b92a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f022 0204 	bic.w	r2, r2, #4
 800b93a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	691a      	ldr	r2, [r3, #16]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	430a      	orrs	r2, r1
 800b94c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b94e:	e023      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68b9      	ldr	r1, [r7, #8]
 800b956:	4618      	mov	r0, r3
 800b958:	f000 fc5e 	bl	800c218 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b96a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b97a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	021a      	lsls	r2, r3, #8
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	430a      	orrs	r2, r1
 800b98e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b990:	e002      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	75fb      	strb	r3, [r7, #23]
      break;
 800b996:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3718      	adds	r7, #24
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop

0800b9ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d101      	bne.n	800b9c8 <HAL_TIM_ConfigClockSource+0x1c>
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	e0dc      	b.n	800bb82 <HAL_TIM_ConfigClockSource+0x1d6>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	4b6a      	ldr	r3, [pc, #424]	; (800bb8c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a64      	ldr	r2, [pc, #400]	; (800bb90 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	f000 80a9 	beq.w	800bb56 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba04:	4a62      	ldr	r2, [pc, #392]	; (800bb90 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	f200 80ae 	bhi.w	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba0c:	4a61      	ldr	r2, [pc, #388]	; (800bb94 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	f000 80a1 	beq.w	800bb56 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba14:	4a5f      	ldr	r2, [pc, #380]	; (800bb94 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	f200 80a6 	bhi.w	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba1c:	4a5e      	ldr	r2, [pc, #376]	; (800bb98 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	f000 8099 	beq.w	800bb56 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba24:	4a5c      	ldr	r2, [pc, #368]	; (800bb98 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	f200 809e 	bhi.w	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba30:	f000 8091 	beq.w	800bb56 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba38:	f200 8096 	bhi.w	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba40:	f000 8089 	beq.w	800bb56 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba48:	f200 808e 	bhi.w	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba50:	d03e      	beq.n	800bad0 <HAL_TIM_ConfigClockSource+0x124>
 800ba52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba56:	f200 8087 	bhi.w	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba5e:	f000 8086 	beq.w	800bb6e <HAL_TIM_ConfigClockSource+0x1c2>
 800ba62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba66:	d87f      	bhi.n	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba68:	2b70      	cmp	r3, #112	; 0x70
 800ba6a:	d01a      	beq.n	800baa2 <HAL_TIM_ConfigClockSource+0xf6>
 800ba6c:	2b70      	cmp	r3, #112	; 0x70
 800ba6e:	d87b      	bhi.n	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba70:	2b60      	cmp	r3, #96	; 0x60
 800ba72:	d050      	beq.n	800bb16 <HAL_TIM_ConfigClockSource+0x16a>
 800ba74:	2b60      	cmp	r3, #96	; 0x60
 800ba76:	d877      	bhi.n	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba78:	2b50      	cmp	r3, #80	; 0x50
 800ba7a:	d03c      	beq.n	800baf6 <HAL_TIM_ConfigClockSource+0x14a>
 800ba7c:	2b50      	cmp	r3, #80	; 0x50
 800ba7e:	d873      	bhi.n	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba80:	2b40      	cmp	r3, #64	; 0x40
 800ba82:	d058      	beq.n	800bb36 <HAL_TIM_ConfigClockSource+0x18a>
 800ba84:	2b40      	cmp	r3, #64	; 0x40
 800ba86:	d86f      	bhi.n	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba88:	2b30      	cmp	r3, #48	; 0x30
 800ba8a:	d064      	beq.n	800bb56 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba8c:	2b30      	cmp	r3, #48	; 0x30
 800ba8e:	d86b      	bhi.n	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba90:	2b20      	cmp	r3, #32
 800ba92:	d060      	beq.n	800bb56 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba94:	2b20      	cmp	r3, #32
 800ba96:	d867      	bhi.n	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d05c      	beq.n	800bb56 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba9c:	2b10      	cmp	r3, #16
 800ba9e:	d05a      	beq.n	800bb56 <HAL_TIM_ConfigClockSource+0x1aa>
 800baa0:	e062      	b.n	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6818      	ldr	r0, [r3, #0]
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	6899      	ldr	r1, [r3, #8]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	f000 fc95 	bl	800c3e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	609a      	str	r2, [r3, #8]
      break;
 800bace:	e04f      	b.n	800bb70 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6818      	ldr	r0, [r3, #0]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	6899      	ldr	r1, [r3, #8]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	685a      	ldr	r2, [r3, #4]
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	f000 fc7e 	bl	800c3e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	689a      	ldr	r2, [r3, #8]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800baf2:	609a      	str	r2, [r3, #8]
      break;
 800baf4:	e03c      	b.n	800bb70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6818      	ldr	r0, [r3, #0]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	6859      	ldr	r1, [r3, #4]
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	461a      	mov	r2, r3
 800bb04:	f000 fbee 	bl	800c2e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2150      	movs	r1, #80	; 0x50
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 fc48 	bl	800c3a4 <TIM_ITRx_SetConfig>
      break;
 800bb14:	e02c      	b.n	800bb70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6818      	ldr	r0, [r3, #0]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	6859      	ldr	r1, [r3, #4]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	461a      	mov	r2, r3
 800bb24:	f000 fc0d 	bl	800c342 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2160      	movs	r1, #96	; 0x60
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 fc38 	bl	800c3a4 <TIM_ITRx_SetConfig>
      break;
 800bb34:	e01c      	b.n	800bb70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6818      	ldr	r0, [r3, #0]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	6859      	ldr	r1, [r3, #4]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	461a      	mov	r2, r3
 800bb44:	f000 fbce 	bl	800c2e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2140      	movs	r1, #64	; 0x40
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 fc28 	bl	800c3a4 <TIM_ITRx_SetConfig>
      break;
 800bb54:	e00c      	b.n	800bb70 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4619      	mov	r1, r3
 800bb60:	4610      	mov	r0, r2
 800bb62:	f000 fc1f 	bl	800c3a4 <TIM_ITRx_SetConfig>
      break;
 800bb66:	e003      	b.n	800bb70 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb6c:	e000      	b.n	800bb70 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bb6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	ffceff88 	.word	0xffceff88
 800bb90:	00100040 	.word	0x00100040
 800bb94:	00100030 	.word	0x00100030
 800bb98:	00100020 	.word	0x00100020

0800bb9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbb8:	bf00      	nop
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbcc:	bf00      	nop
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a44      	ldr	r2, [pc, #272]	; (800bd10 <TIM_Base_SetConfig+0x124>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d013      	beq.n	800bc2c <TIM_Base_SetConfig+0x40>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc0a:	d00f      	beq.n	800bc2c <TIM_Base_SetConfig+0x40>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a41      	ldr	r2, [pc, #260]	; (800bd14 <TIM_Base_SetConfig+0x128>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d00b      	beq.n	800bc2c <TIM_Base_SetConfig+0x40>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a40      	ldr	r2, [pc, #256]	; (800bd18 <TIM_Base_SetConfig+0x12c>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d007      	beq.n	800bc2c <TIM_Base_SetConfig+0x40>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a3f      	ldr	r2, [pc, #252]	; (800bd1c <TIM_Base_SetConfig+0x130>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d003      	beq.n	800bc2c <TIM_Base_SetConfig+0x40>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a3e      	ldr	r2, [pc, #248]	; (800bd20 <TIM_Base_SetConfig+0x134>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d108      	bne.n	800bc3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a33      	ldr	r2, [pc, #204]	; (800bd10 <TIM_Base_SetConfig+0x124>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d027      	beq.n	800bc96 <TIM_Base_SetConfig+0xaa>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc4c:	d023      	beq.n	800bc96 <TIM_Base_SetConfig+0xaa>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a30      	ldr	r2, [pc, #192]	; (800bd14 <TIM_Base_SetConfig+0x128>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d01f      	beq.n	800bc96 <TIM_Base_SetConfig+0xaa>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a2f      	ldr	r2, [pc, #188]	; (800bd18 <TIM_Base_SetConfig+0x12c>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d01b      	beq.n	800bc96 <TIM_Base_SetConfig+0xaa>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a2e      	ldr	r2, [pc, #184]	; (800bd1c <TIM_Base_SetConfig+0x130>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d017      	beq.n	800bc96 <TIM_Base_SetConfig+0xaa>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a2d      	ldr	r2, [pc, #180]	; (800bd20 <TIM_Base_SetConfig+0x134>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d013      	beq.n	800bc96 <TIM_Base_SetConfig+0xaa>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4a2c      	ldr	r2, [pc, #176]	; (800bd24 <TIM_Base_SetConfig+0x138>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d00f      	beq.n	800bc96 <TIM_Base_SetConfig+0xaa>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4a2b      	ldr	r2, [pc, #172]	; (800bd28 <TIM_Base_SetConfig+0x13c>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d00b      	beq.n	800bc96 <TIM_Base_SetConfig+0xaa>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4a2a      	ldr	r2, [pc, #168]	; (800bd2c <TIM_Base_SetConfig+0x140>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d007      	beq.n	800bc96 <TIM_Base_SetConfig+0xaa>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	4a29      	ldr	r2, [pc, #164]	; (800bd30 <TIM_Base_SetConfig+0x144>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d003      	beq.n	800bc96 <TIM_Base_SetConfig+0xaa>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a28      	ldr	r2, [pc, #160]	; (800bd34 <TIM_Base_SetConfig+0x148>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d108      	bne.n	800bca8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	689a      	ldr	r2, [r3, #8]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a10      	ldr	r2, [pc, #64]	; (800bd10 <TIM_Base_SetConfig+0x124>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d00f      	beq.n	800bcf4 <TIM_Base_SetConfig+0x108>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a12      	ldr	r2, [pc, #72]	; (800bd20 <TIM_Base_SetConfig+0x134>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d00b      	beq.n	800bcf4 <TIM_Base_SetConfig+0x108>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a11      	ldr	r2, [pc, #68]	; (800bd24 <TIM_Base_SetConfig+0x138>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d007      	beq.n	800bcf4 <TIM_Base_SetConfig+0x108>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a10      	ldr	r2, [pc, #64]	; (800bd28 <TIM_Base_SetConfig+0x13c>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d003      	beq.n	800bcf4 <TIM_Base_SetConfig+0x108>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a0f      	ldr	r2, [pc, #60]	; (800bd2c <TIM_Base_SetConfig+0x140>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d103      	bne.n	800bcfc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	691a      	ldr	r2, [r3, #16]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	615a      	str	r2, [r3, #20]
}
 800bd02:	bf00      	nop
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	40010000 	.word	0x40010000
 800bd14:	40000400 	.word	0x40000400
 800bd18:	40000800 	.word	0x40000800
 800bd1c:	40000c00 	.word	0x40000c00
 800bd20:	40010400 	.word	0x40010400
 800bd24:	40014000 	.word	0x40014000
 800bd28:	40014400 	.word	0x40014400
 800bd2c:	40014800 	.word	0x40014800
 800bd30:	4000e000 	.word	0x4000e000
 800bd34:	4000e400 	.word	0x4000e400

0800bd38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b087      	sub	sp, #28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	f023 0201 	bic.w	r2, r3, #1
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	4b37      	ldr	r3, [pc, #220]	; (800be40 <TIM_OC1_SetConfig+0x108>)
 800bd64:	4013      	ands	r3, r2
 800bd66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f023 0303 	bic.w	r3, r3, #3
 800bd6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f023 0302 	bic.w	r3, r3, #2
 800bd80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a2d      	ldr	r2, [pc, #180]	; (800be44 <TIM_OC1_SetConfig+0x10c>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d00f      	beq.n	800bdb4 <TIM_OC1_SetConfig+0x7c>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a2c      	ldr	r2, [pc, #176]	; (800be48 <TIM_OC1_SetConfig+0x110>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d00b      	beq.n	800bdb4 <TIM_OC1_SetConfig+0x7c>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a2b      	ldr	r2, [pc, #172]	; (800be4c <TIM_OC1_SetConfig+0x114>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d007      	beq.n	800bdb4 <TIM_OC1_SetConfig+0x7c>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a2a      	ldr	r2, [pc, #168]	; (800be50 <TIM_OC1_SetConfig+0x118>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d003      	beq.n	800bdb4 <TIM_OC1_SetConfig+0x7c>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a29      	ldr	r2, [pc, #164]	; (800be54 <TIM_OC1_SetConfig+0x11c>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d10c      	bne.n	800bdce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f023 0308 	bic.w	r3, r3, #8
 800bdba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	697a      	ldr	r2, [r7, #20]
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	f023 0304 	bic.w	r3, r3, #4
 800bdcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4a1c      	ldr	r2, [pc, #112]	; (800be44 <TIM_OC1_SetConfig+0x10c>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d00f      	beq.n	800bdf6 <TIM_OC1_SetConfig+0xbe>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a1b      	ldr	r2, [pc, #108]	; (800be48 <TIM_OC1_SetConfig+0x110>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d00b      	beq.n	800bdf6 <TIM_OC1_SetConfig+0xbe>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a1a      	ldr	r2, [pc, #104]	; (800be4c <TIM_OC1_SetConfig+0x114>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d007      	beq.n	800bdf6 <TIM_OC1_SetConfig+0xbe>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a19      	ldr	r2, [pc, #100]	; (800be50 <TIM_OC1_SetConfig+0x118>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d003      	beq.n	800bdf6 <TIM_OC1_SetConfig+0xbe>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a18      	ldr	r2, [pc, #96]	; (800be54 <TIM_OC1_SetConfig+0x11c>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d111      	bne.n	800be1a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	695b      	ldr	r3, [r3, #20]
 800be0a:	693a      	ldr	r2, [r7, #16]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	4313      	orrs	r3, r2
 800be18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	697a      	ldr	r2, [r7, #20]
 800be32:	621a      	str	r2, [r3, #32]
}
 800be34:	bf00      	nop
 800be36:	371c      	adds	r7, #28
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	fffeff8f 	.word	0xfffeff8f
 800be44:	40010000 	.word	0x40010000
 800be48:	40010400 	.word	0x40010400
 800be4c:	40014000 	.word	0x40014000
 800be50:	40014400 	.word	0x40014400
 800be54:	40014800 	.word	0x40014800

0800be58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be58:	b480      	push	{r7}
 800be5a:	b087      	sub	sp, #28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	f023 0210 	bic.w	r2, r3, #16
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4b34      	ldr	r3, [pc, #208]	; (800bf54 <TIM_OC2_SetConfig+0xfc>)
 800be84:	4013      	ands	r3, r2
 800be86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	021b      	lsls	r3, r3, #8
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	4313      	orrs	r3, r2
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f023 0320 	bic.w	r3, r3, #32
 800bea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	011b      	lsls	r3, r3, #4
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	4313      	orrs	r3, r2
 800beae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a29      	ldr	r2, [pc, #164]	; (800bf58 <TIM_OC2_SetConfig+0x100>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d003      	beq.n	800bec0 <TIM_OC2_SetConfig+0x68>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a28      	ldr	r2, [pc, #160]	; (800bf5c <TIM_OC2_SetConfig+0x104>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d10d      	bne.n	800bedc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	011b      	lsls	r3, r3, #4
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a1e      	ldr	r2, [pc, #120]	; (800bf58 <TIM_OC2_SetConfig+0x100>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d00f      	beq.n	800bf04 <TIM_OC2_SetConfig+0xac>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a1d      	ldr	r2, [pc, #116]	; (800bf5c <TIM_OC2_SetConfig+0x104>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d00b      	beq.n	800bf04 <TIM_OC2_SetConfig+0xac>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a1c      	ldr	r2, [pc, #112]	; (800bf60 <TIM_OC2_SetConfig+0x108>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d007      	beq.n	800bf04 <TIM_OC2_SetConfig+0xac>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a1b      	ldr	r2, [pc, #108]	; (800bf64 <TIM_OC2_SetConfig+0x10c>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d003      	beq.n	800bf04 <TIM_OC2_SetConfig+0xac>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a1a      	ldr	r2, [pc, #104]	; (800bf68 <TIM_OC2_SetConfig+0x110>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d113      	bne.n	800bf2c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	685a      	ldr	r2, [r3, #4]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	621a      	str	r2, [r3, #32]
}
 800bf46:	bf00      	nop
 800bf48:	371c      	adds	r7, #28
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	feff8fff 	.word	0xfeff8fff
 800bf58:	40010000 	.word	0x40010000
 800bf5c:	40010400 	.word	0x40010400
 800bf60:	40014000 	.word	0x40014000
 800bf64:	40014400 	.word	0x40014400
 800bf68:	40014800 	.word	0x40014800

0800bf6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b087      	sub	sp, #28
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	69db      	ldr	r3, [r3, #28]
 800bf92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	4b33      	ldr	r3, [pc, #204]	; (800c064 <TIM_OC3_SetConfig+0xf8>)
 800bf98:	4013      	ands	r3, r2
 800bf9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f023 0303 	bic.w	r3, r3, #3
 800bfa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	697a      	ldr	r2, [r7, #20]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4a28      	ldr	r2, [pc, #160]	; (800c068 <TIM_OC3_SetConfig+0xfc>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d003      	beq.n	800bfd2 <TIM_OC3_SetConfig+0x66>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a27      	ldr	r2, [pc, #156]	; (800c06c <TIM_OC3_SetConfig+0x100>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d10d      	bne.n	800bfee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	021b      	lsls	r3, r3, #8
 800bfe0:	697a      	ldr	r2, [r7, #20]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a1d      	ldr	r2, [pc, #116]	; (800c068 <TIM_OC3_SetConfig+0xfc>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d00f      	beq.n	800c016 <TIM_OC3_SetConfig+0xaa>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a1c      	ldr	r2, [pc, #112]	; (800c06c <TIM_OC3_SetConfig+0x100>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d00b      	beq.n	800c016 <TIM_OC3_SetConfig+0xaa>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a1b      	ldr	r2, [pc, #108]	; (800c070 <TIM_OC3_SetConfig+0x104>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d007      	beq.n	800c016 <TIM_OC3_SetConfig+0xaa>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a1a      	ldr	r2, [pc, #104]	; (800c074 <TIM_OC3_SetConfig+0x108>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d003      	beq.n	800c016 <TIM_OC3_SetConfig+0xaa>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a19      	ldr	r2, [pc, #100]	; (800c078 <TIM_OC3_SetConfig+0x10c>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d113      	bne.n	800c03e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c01c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	011b      	lsls	r3, r3, #4
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	4313      	orrs	r3, r2
 800c030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	011b      	lsls	r3, r3, #4
 800c038:	693a      	ldr	r2, [r7, #16]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	685a      	ldr	r2, [r3, #4]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	697a      	ldr	r2, [r7, #20]
 800c056:	621a      	str	r2, [r3, #32]
}
 800c058:	bf00      	nop
 800c05a:	371c      	adds	r7, #28
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr
 800c064:	fffeff8f 	.word	0xfffeff8f
 800c068:	40010000 	.word	0x40010000
 800c06c:	40010400 	.word	0x40010400
 800c070:	40014000 	.word	0x40014000
 800c074:	40014400 	.word	0x40014400
 800c078:	40014800 	.word	0x40014800

0800c07c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b087      	sub	sp, #28
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	4b24      	ldr	r3, [pc, #144]	; (800c138 <TIM_OC4_SetConfig+0xbc>)
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	021b      	lsls	r3, r3, #8
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	031b      	lsls	r3, r3, #12
 800c0ce:	693a      	ldr	r2, [r7, #16]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a19      	ldr	r2, [pc, #100]	; (800c13c <TIM_OC4_SetConfig+0xc0>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d00f      	beq.n	800c0fc <TIM_OC4_SetConfig+0x80>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a18      	ldr	r2, [pc, #96]	; (800c140 <TIM_OC4_SetConfig+0xc4>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d00b      	beq.n	800c0fc <TIM_OC4_SetConfig+0x80>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a17      	ldr	r2, [pc, #92]	; (800c144 <TIM_OC4_SetConfig+0xc8>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d007      	beq.n	800c0fc <TIM_OC4_SetConfig+0x80>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a16      	ldr	r2, [pc, #88]	; (800c148 <TIM_OC4_SetConfig+0xcc>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d003      	beq.n	800c0fc <TIM_OC4_SetConfig+0x80>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a15      	ldr	r2, [pc, #84]	; (800c14c <TIM_OC4_SetConfig+0xd0>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d109      	bne.n	800c110 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	019b      	lsls	r3, r3, #6
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	621a      	str	r2, [r3, #32]
}
 800c12a:	bf00      	nop
 800c12c:	371c      	adds	r7, #28
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	feff8fff 	.word	0xfeff8fff
 800c13c:	40010000 	.word	0x40010000
 800c140:	40010400 	.word	0x40010400
 800c144:	40014000 	.word	0x40014000
 800c148:	40014400 	.word	0x40014400
 800c14c:	40014800 	.word	0x40014800

0800c150 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	4b21      	ldr	r3, [pc, #132]	; (800c200 <TIM_OC5_SetConfig+0xb0>)
 800c17c:	4013      	ands	r3, r2
 800c17e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	4313      	orrs	r3, r2
 800c188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c190:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	041b      	lsls	r3, r3, #16
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a18      	ldr	r2, [pc, #96]	; (800c204 <TIM_OC5_SetConfig+0xb4>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d00f      	beq.n	800c1c6 <TIM_OC5_SetConfig+0x76>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a17      	ldr	r2, [pc, #92]	; (800c208 <TIM_OC5_SetConfig+0xb8>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d00b      	beq.n	800c1c6 <TIM_OC5_SetConfig+0x76>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4a16      	ldr	r2, [pc, #88]	; (800c20c <TIM_OC5_SetConfig+0xbc>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d007      	beq.n	800c1c6 <TIM_OC5_SetConfig+0x76>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a15      	ldr	r2, [pc, #84]	; (800c210 <TIM_OC5_SetConfig+0xc0>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d003      	beq.n	800c1c6 <TIM_OC5_SetConfig+0x76>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a14      	ldr	r2, [pc, #80]	; (800c214 <TIM_OC5_SetConfig+0xc4>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d109      	bne.n	800c1da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	021b      	lsls	r3, r3, #8
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	621a      	str	r2, [r3, #32]
}
 800c1f4:	bf00      	nop
 800c1f6:	371c      	adds	r7, #28
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr
 800c200:	fffeff8f 	.word	0xfffeff8f
 800c204:	40010000 	.word	0x40010000
 800c208:	40010400 	.word	0x40010400
 800c20c:	40014000 	.word	0x40014000
 800c210:	40014400 	.word	0x40014400
 800c214:	40014800 	.word	0x40014800

0800c218 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c218:	b480      	push	{r7}
 800c21a:	b087      	sub	sp, #28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	4b22      	ldr	r3, [pc, #136]	; (800c2cc <TIM_OC6_SetConfig+0xb4>)
 800c244:	4013      	ands	r3, r2
 800c246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	021b      	lsls	r3, r3, #8
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	4313      	orrs	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c25a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	051b      	lsls	r3, r3, #20
 800c262:	693a      	ldr	r2, [r7, #16]
 800c264:	4313      	orrs	r3, r2
 800c266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a19      	ldr	r2, [pc, #100]	; (800c2d0 <TIM_OC6_SetConfig+0xb8>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d00f      	beq.n	800c290 <TIM_OC6_SetConfig+0x78>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a18      	ldr	r2, [pc, #96]	; (800c2d4 <TIM_OC6_SetConfig+0xbc>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d00b      	beq.n	800c290 <TIM_OC6_SetConfig+0x78>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a17      	ldr	r2, [pc, #92]	; (800c2d8 <TIM_OC6_SetConfig+0xc0>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d007      	beq.n	800c290 <TIM_OC6_SetConfig+0x78>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a16      	ldr	r2, [pc, #88]	; (800c2dc <TIM_OC6_SetConfig+0xc4>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d003      	beq.n	800c290 <TIM_OC6_SetConfig+0x78>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a15      	ldr	r2, [pc, #84]	; (800c2e0 <TIM_OC6_SetConfig+0xc8>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d109      	bne.n	800c2a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c296:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	029b      	lsls	r3, r3, #10
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	693a      	ldr	r2, [r7, #16]
 800c2bc:	621a      	str	r2, [r3, #32]
}
 800c2be:	bf00      	nop
 800c2c0:	371c      	adds	r7, #28
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	feff8fff 	.word	0xfeff8fff
 800c2d0:	40010000 	.word	0x40010000
 800c2d4:	40010400 	.word	0x40010400
 800c2d8:	40014000 	.word	0x40014000
 800c2dc:	40014400 	.word	0x40014400
 800c2e0:	40014800 	.word	0x40014800

0800c2e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b087      	sub	sp, #28
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6a1b      	ldr	r3, [r3, #32]
 800c2f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	f023 0201 	bic.w	r2, r3, #1
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c30e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	011b      	lsls	r3, r3, #4
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	4313      	orrs	r3, r2
 800c318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f023 030a 	bic.w	r3, r3, #10
 800c320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	4313      	orrs	r3, r2
 800c328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	693a      	ldr	r2, [r7, #16]
 800c32e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	621a      	str	r2, [r3, #32]
}
 800c336:	bf00      	nop
 800c338:	371c      	adds	r7, #28
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr

0800c342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c342:	b480      	push	{r7}
 800c344:	b087      	sub	sp, #28
 800c346:	af00      	add	r7, sp, #0
 800c348:	60f8      	str	r0, [r7, #12]
 800c34a:	60b9      	str	r1, [r7, #8]
 800c34c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	f023 0210 	bic.w	r2, r3, #16
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	699b      	ldr	r3, [r3, #24]
 800c35e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6a1b      	ldr	r3, [r3, #32]
 800c364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c36c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	031b      	lsls	r3, r3, #12
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	4313      	orrs	r3, r2
 800c376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c37e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	011b      	lsls	r3, r3, #4
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	4313      	orrs	r3, r2
 800c388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	693a      	ldr	r2, [r7, #16]
 800c394:	621a      	str	r2, [r3, #32]
}
 800c396:	bf00      	nop
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
	...

0800c3a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	4b09      	ldr	r3, [pc, #36]	; (800c3dc <TIM_ITRx_SetConfig+0x38>)
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c3bc:	683a      	ldr	r2, [r7, #0]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	f043 0307 	orr.w	r3, r3, #7
 800c3c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68fa      	ldr	r2, [r7, #12]
 800c3cc:	609a      	str	r2, [r3, #8]
}
 800c3ce:	bf00      	nop
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	ffcfff8f 	.word	0xffcfff8f

0800c3e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b087      	sub	sp, #28
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	021a      	lsls	r2, r3, #8
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	431a      	orrs	r2, r3
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	4313      	orrs	r3, r2
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	609a      	str	r2, [r3, #8]
}
 800c414:	bf00      	nop
 800c416:	371c      	adds	r7, #28
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	f003 031f 	and.w	r3, r3, #31
 800c432:	2201      	movs	r2, #1
 800c434:	fa02 f303 	lsl.w	r3, r2, r3
 800c438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6a1a      	ldr	r2, [r3, #32]
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	43db      	mvns	r3, r3
 800c442:	401a      	ands	r2, r3
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6a1a      	ldr	r2, [r3, #32]
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	f003 031f 	and.w	r3, r3, #31
 800c452:	6879      	ldr	r1, [r7, #4]
 800c454:	fa01 f303 	lsl.w	r3, r1, r3
 800c458:	431a      	orrs	r2, r3
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	621a      	str	r2, [r3, #32]
}
 800c45e:	bf00      	nop
 800c460:	371c      	adds	r7, #28
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
	...

0800c46c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d101      	bne.n	800c484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c480:	2302      	movs	r3, #2
 800c482:	e077      	b.n	800c574 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2202      	movs	r2, #2
 800c490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a35      	ldr	r2, [pc, #212]	; (800c580 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d004      	beq.n	800c4b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a34      	ldr	r2, [pc, #208]	; (800c584 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d108      	bne.n	800c4ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c4be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a25      	ldr	r2, [pc, #148]	; (800c580 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d02c      	beq.n	800c548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4f6:	d027      	beq.n	800c548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a22      	ldr	r2, [pc, #136]	; (800c588 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d022      	beq.n	800c548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a21      	ldr	r2, [pc, #132]	; (800c58c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d01d      	beq.n	800c548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a1f      	ldr	r2, [pc, #124]	; (800c590 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d018      	beq.n	800c548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a1a      	ldr	r2, [pc, #104]	; (800c584 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d013      	beq.n	800c548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a1b      	ldr	r2, [pc, #108]	; (800c594 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d00e      	beq.n	800c548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a1a      	ldr	r2, [pc, #104]	; (800c598 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d009      	beq.n	800c548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a18      	ldr	r2, [pc, #96]	; (800c59c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d004      	beq.n	800c548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a17      	ldr	r2, [pc, #92]	; (800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d10c      	bne.n	800c562 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c54e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	4313      	orrs	r3, r2
 800c558:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2201      	movs	r2, #1
 800c566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	40010000 	.word	0x40010000
 800c584:	40010400 	.word	0x40010400
 800c588:	40000400 	.word	0x40000400
 800c58c:	40000800 	.word	0x40000800
 800c590:	40000c00 	.word	0x40000c00
 800c594:	40001800 	.word	0x40001800
 800c598:	40014000 	.word	0x40014000
 800c59c:	4000e000 	.word	0x4000e000
 800c5a0:	4000e400 	.word	0x4000e400

0800c5a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d101      	bne.n	800c5c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c5bc:	2302      	movs	r3, #2
 800c5be:	e087      	b.n	800c6d0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	695b      	ldr	r3, [r3, #20]
 800c618:	4313      	orrs	r3, r2
 800c61a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c626:	4313      	orrs	r3, r2
 800c628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	041b      	lsls	r3, r3, #16
 800c636:	4313      	orrs	r3, r2
 800c638:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a27      	ldr	r2, [pc, #156]	; (800c6dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d004      	beq.n	800c64e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a25      	ldr	r2, [pc, #148]	; (800c6e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d106      	bne.n	800c65c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	69db      	ldr	r3, [r3, #28]
 800c658:	4313      	orrs	r3, r2
 800c65a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a1e      	ldr	r2, [pc, #120]	; (800c6dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d004      	beq.n	800c670 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a1d      	ldr	r2, [pc, #116]	; (800c6e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d126      	bne.n	800c6be <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67a:	051b      	lsls	r3, r3, #20
 800c67c:	4313      	orrs	r3, r2
 800c67e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	6a1b      	ldr	r3, [r3, #32]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c698:	4313      	orrs	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a0e      	ldr	r2, [pc, #56]	; (800c6dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d004      	beq.n	800c6b0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a0d      	ldr	r2, [pc, #52]	; (800c6e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d106      	bne.n	800c6be <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr
 800c6dc:	40010000 	.word	0x40010000
 800c6e0:	40010400 	.word	0x40010400

0800c6e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d101      	bne.n	800c732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e042      	b.n	800c7b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d106      	bne.n	800c74a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7f7 ffb1 	bl	80046ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2224      	movs	r2, #36	; 0x24
 800c74e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f022 0201 	bic.w	r2, r2, #1
 800c760:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 fd0e 	bl	800d184 <UART_SetConfig>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d101      	bne.n	800c772 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e022      	b.n	800c7b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f001 fb6e 	bl	800de5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c78e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	689a      	ldr	r2, [r3, #8]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c79e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f042 0201 	orr.w	r2, r2, #1
 800c7ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f001 fbf5 	bl	800dfa0 <UART_CheckIdleState>
 800c7b6:	4603      	mov	r3, r0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d101      	bne.n	800c7d2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e02e      	b.n	800c830 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2224      	movs	r2, #36	; 0x24
 800c7d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f022 0201 	bic.w	r2, r2, #1
 800c7e8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2200      	movs	r2, #0
 800c800:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7f8 f83a 	bl	800487c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08a      	sub	sp, #40	; 0x28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	4613      	mov	r3, r2
 800c844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c84c:	2b20      	cmp	r3, #32
 800c84e:	d17a      	bne.n	800c946 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d002      	beq.n	800c85c <HAL_UART_Transmit_DMA+0x24>
 800c856:	88fb      	ldrh	r3, [r7, #6]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	e073      	b.n	800c948 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c866:	2b01      	cmp	r3, #1
 800c868:	d101      	bne.n	800c86e <HAL_UART_Transmit_DMA+0x36>
 800c86a:	2302      	movs	r3, #2
 800c86c:	e06c      	b.n	800c948 <HAL_UART_Transmit_DMA+0x110>
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	88fa      	ldrh	r2, [r7, #6]
 800c880:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	88fa      	ldrh	r2, [r7, #6]
 800c888:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2221      	movs	r2, #33	; 0x21
 800c898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d02c      	beq.n	800c8fe <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8a8:	4a29      	ldr	r2, [pc, #164]	; (800c950 <HAL_UART_Transmit_DMA+0x118>)
 800c8aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8b0:	4a28      	ldr	r2, [pc, #160]	; (800c954 <HAL_UART_Transmit_DMA+0x11c>)
 800c8b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8b8:	4a27      	ldr	r2, [pc, #156]	; (800c958 <HAL_UART_Transmit_DMA+0x120>)
 800c8ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	3328      	adds	r3, #40	; 0x28
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	88fb      	ldrh	r3, [r7, #6]
 800c8d8:	f7f9 fa56 	bl	8005d88 <HAL_DMA_Start_IT>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00d      	beq.n	800c8fe <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2210      	movs	r2, #16
 800c8e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e024      	b.n	800c948 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2240      	movs	r2, #64	; 0x40
 800c904:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3308      	adds	r3, #8
 800c914:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	e853 3f00 	ldrex	r3, [r3]
 800c91c:	613b      	str	r3, [r7, #16]
   return(result);
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c924:	627b      	str	r3, [r7, #36]	; 0x24
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3308      	adds	r3, #8
 800c92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c92e:	623a      	str	r2, [r7, #32]
 800c930:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c932:	69f9      	ldr	r1, [r7, #28]
 800c934:	6a3a      	ldr	r2, [r7, #32]
 800c936:	e841 2300 	strex	r3, r2, [r1]
 800c93a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1e5      	bne.n	800c90e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	e000      	b.n	800c948 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c946:	2302      	movs	r3, #2
  }
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3728      	adds	r7, #40	; 0x28
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	0800e469 	.word	0x0800e469
 800c954:	0800e4ff 	.word	0x0800e4ff
 800c958:	0800e675 	.word	0x0800e675

0800c95c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b08a      	sub	sp, #40	; 0x28
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	4613      	mov	r3, r2
 800c968:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c970:	2b20      	cmp	r3, #32
 800c972:	d142      	bne.n	800c9fa <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <HAL_UART_Receive_DMA+0x24>
 800c97a:	88fb      	ldrh	r3, [r7, #6]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c980:	2301      	movs	r3, #1
 800c982:	e03b      	b.n	800c9fc <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d101      	bne.n	800c992 <HAL_UART_Receive_DMA+0x36>
 800c98e:	2302      	movs	r3, #2
 800c990:	e034      	b.n	800c9fc <HAL_UART_Receive_DMA+0xa0>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2201      	movs	r2, #1
 800c996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2200      	movs	r2, #0
 800c99e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a17      	ldr	r2, [pc, #92]	; (800ca04 <HAL_UART_Receive_DMA+0xa8>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d01f      	beq.n	800c9ea <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d018      	beq.n	800c9ea <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	e853 3f00 	ldrex	r3, [r3]
 800c9c4:	613b      	str	r3, [r7, #16]
   return(result);
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c9cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	623b      	str	r3, [r7, #32]
 800c9d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9da:	69f9      	ldr	r1, [r7, #28]
 800c9dc:	6a3a      	ldr	r2, [r7, #32]
 800c9de:	e841 2300 	strex	r3, r2, [r1]
 800c9e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1e6      	bne.n	800c9b8 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c9ea:	88fb      	ldrh	r3, [r7, #6]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f001 fbe9 	bl	800e1c8 <UART_Start_Receive_DMA>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	e000      	b.n	800c9fc <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c9fa:	2302      	movs	r3, #2
  }
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3728      	adds	r7, #40	; 0x28
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	58000c00 	.word	0x58000c00

0800ca08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b0ba      	sub	sp, #232	; 0xe8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	69db      	ldr	r3, [r3, #28]
 800ca16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ca32:	f640 030f 	movw	r3, #2063	; 0x80f
 800ca36:	4013      	ands	r3, r2
 800ca38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ca3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d11b      	bne.n	800ca7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca48:	f003 0320 	and.w	r3, r3, #32
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d015      	beq.n	800ca7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca54:	f003 0320 	and.w	r3, r3, #32
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d105      	bne.n	800ca68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d009      	beq.n	800ca7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 835a 	beq.w	800d126 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	4798      	blx	r3
      }
      return;
 800ca7a:	e354      	b.n	800d126 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ca7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 811f 	beq.w	800ccc4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ca86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ca8a:	4b8b      	ldr	r3, [pc, #556]	; (800ccb8 <HAL_UART_IRQHandler+0x2b0>)
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d106      	bne.n	800caa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ca92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ca96:	4b89      	ldr	r3, [pc, #548]	; (800ccbc <HAL_UART_IRQHandler+0x2b4>)
 800ca98:	4013      	ands	r3, r2
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 8112 	beq.w	800ccc4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800caa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caa4:	f003 0301 	and.w	r3, r3, #1
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d011      	beq.n	800cad0 <HAL_UART_IRQHandler+0xc8>
 800caac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00b      	beq.n	800cad0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2201      	movs	r2, #1
 800cabe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cac6:	f043 0201 	orr.w	r2, r3, #1
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cad4:	f003 0302 	and.w	r3, r3, #2
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d011      	beq.n	800cb00 <HAL_UART_IRQHandler+0xf8>
 800cadc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cae0:	f003 0301 	and.w	r3, r3, #1
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00b      	beq.n	800cb00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2202      	movs	r2, #2
 800caee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caf6:	f043 0204 	orr.w	r2, r3, #4
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb04:	f003 0304 	and.w	r3, r3, #4
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d011      	beq.n	800cb30 <HAL_UART_IRQHandler+0x128>
 800cb0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb10:	f003 0301 	and.w	r3, r3, #1
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00b      	beq.n	800cb30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2204      	movs	r2, #4
 800cb1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb26:	f043 0202 	orr.w	r2, r3, #2
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb34:	f003 0308 	and.w	r3, r3, #8
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d017      	beq.n	800cb6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb40:	f003 0320 	and.w	r3, r3, #32
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d105      	bne.n	800cb54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cb48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cb4c:	4b5a      	ldr	r3, [pc, #360]	; (800ccb8 <HAL_UART_IRQHandler+0x2b0>)
 800cb4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00b      	beq.n	800cb6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2208      	movs	r2, #8
 800cb5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb62:	f043 0208 	orr.w	r2, r3, #8
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d012      	beq.n	800cb9e <HAL_UART_IRQHandler+0x196>
 800cb78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00c      	beq.n	800cb9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb94:	f043 0220 	orr.w	r2, r3, #32
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f000 82c0 	beq.w	800d12a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbae:	f003 0320 	and.w	r3, r3, #32
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d013      	beq.n	800cbde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbba:	f003 0320 	and.w	r3, r3, #32
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d105      	bne.n	800cbce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d007      	beq.n	800cbde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d003      	beq.n	800cbde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbe4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	689b      	ldr	r3, [r3, #8]
 800cbee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbf2:	2b40      	cmp	r3, #64	; 0x40
 800cbf4:	d005      	beq.n	800cc02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cbf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cbfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d04f      	beq.n	800cca2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f001 fbca 	bl	800e39c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc12:	2b40      	cmp	r3, #64	; 0x40
 800cc14:	d141      	bne.n	800cc9a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cc24:	e853 3f00 	ldrex	r3, [r3]
 800cc28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cc2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	3308      	adds	r3, #8
 800cc3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cc42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cc46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cc4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cc52:	e841 2300 	strex	r3, r2, [r1]
 800cc56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cc5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1d9      	bne.n	800cc16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d013      	beq.n	800cc92 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc6e:	4a14      	ldr	r2, [pc, #80]	; (800ccc0 <HAL_UART_IRQHandler+0x2b8>)
 800cc70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7f9 fe0e 	bl	8006898 <HAL_DMA_Abort_IT>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d017      	beq.n	800ccb2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc90:	e00f      	b.n	800ccb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f7f6 fa7a 	bl	800318c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc98:	e00b      	b.n	800ccb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f7f6 fa76 	bl	800318c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cca0:	e007      	b.n	800ccb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7f6 fa72 	bl	800318c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ccb0:	e23b      	b.n	800d12a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccb2:	bf00      	nop
    return;
 800ccb4:	e239      	b.n	800d12a <HAL_UART_IRQHandler+0x722>
 800ccb6:	bf00      	nop
 800ccb8:	10000001 	.word	0x10000001
 800ccbc:	04000120 	.word	0x04000120
 800ccc0:	0800e6f5 	.word	0x0800e6f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	f040 81ce 	bne.w	800d06a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ccce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccd2:	f003 0310 	and.w	r3, r3, #16
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 81c7 	beq.w	800d06a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ccdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cce0:	f003 0310 	and.w	r3, r3, #16
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 81c0 	beq.w	800d06a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2210      	movs	r2, #16
 800ccf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccfc:	2b40      	cmp	r3, #64	; 0x40
 800ccfe:	f040 813b 	bne.w	800cf78 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a8b      	ldr	r2, [pc, #556]	; (800cf38 <HAL_UART_IRQHandler+0x530>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d059      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a89      	ldr	r2, [pc, #548]	; (800cf3c <HAL_UART_IRQHandler+0x534>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d053      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a87      	ldr	r2, [pc, #540]	; (800cf40 <HAL_UART_IRQHandler+0x538>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d04d      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a85      	ldr	r2, [pc, #532]	; (800cf44 <HAL_UART_IRQHandler+0x53c>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d047      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a83      	ldr	r2, [pc, #524]	; (800cf48 <HAL_UART_IRQHandler+0x540>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d041      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a81      	ldr	r2, [pc, #516]	; (800cf4c <HAL_UART_IRQHandler+0x544>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d03b      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a7f      	ldr	r2, [pc, #508]	; (800cf50 <HAL_UART_IRQHandler+0x548>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d035      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a7d      	ldr	r2, [pc, #500]	; (800cf54 <HAL_UART_IRQHandler+0x54c>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d02f      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a7b      	ldr	r2, [pc, #492]	; (800cf58 <HAL_UART_IRQHandler+0x550>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d029      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a79      	ldr	r2, [pc, #484]	; (800cf5c <HAL_UART_IRQHandler+0x554>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d023      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a77      	ldr	r2, [pc, #476]	; (800cf60 <HAL_UART_IRQHandler+0x558>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d01d      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a75      	ldr	r2, [pc, #468]	; (800cf64 <HAL_UART_IRQHandler+0x55c>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d017      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a73      	ldr	r2, [pc, #460]	; (800cf68 <HAL_UART_IRQHandler+0x560>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d011      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a71      	ldr	r2, [pc, #452]	; (800cf6c <HAL_UART_IRQHandler+0x564>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d00b      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a6f      	ldr	r2, [pc, #444]	; (800cf70 <HAL_UART_IRQHandler+0x568>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d005      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x3ba>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a6d      	ldr	r2, [pc, #436]	; (800cf74 <HAL_UART_IRQHandler+0x56c>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d105      	bne.n	800cdce <HAL_UART_IRQHandler+0x3c6>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	e004      	b.n	800cdd8 <HAL_UART_IRQHandler+0x3d0>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cddc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 81a4 	beq.w	800d12e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cdec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	f080 819c 	bcs.w	800d12e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cdfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce04:	69db      	ldr	r3, [r3, #28]
 800ce06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce0a:	f000 8086 	beq.w	800cf1a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce1a:	e853 3f00 	ldrex	r3, [r3]
 800ce1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ce22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ce26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	461a      	mov	r2, r3
 800ce34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ce38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce3c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce40:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ce44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ce48:	e841 2300 	strex	r3, r2, [r1]
 800ce4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ce50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1da      	bne.n	800ce0e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce62:	e853 3f00 	ldrex	r3, [r3]
 800ce66:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ce68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce6a:	f023 0301 	bic.w	r3, r3, #1
 800ce6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3308      	adds	r3, #8
 800ce78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ce7c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ce80:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce82:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ce84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ce88:	e841 2300 	strex	r3, r2, [r1]
 800ce8c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ce8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1e1      	bne.n	800ce58 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	3308      	adds	r3, #8
 800ce9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce9e:	e853 3f00 	ldrex	r3, [r3]
 800cea2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3308      	adds	r3, #8
 800ceb4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ceb8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ceba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cebc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cebe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cec0:	e841 2300 	strex	r3, r2, [r1]
 800cec4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1e3      	bne.n	800ce94 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2220      	movs	r2, #32
 800ced0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cee2:	e853 3f00 	ldrex	r3, [r3]
 800cee6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ceea:	f023 0310 	bic.w	r3, r3, #16
 800ceee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	461a      	mov	r2, r3
 800cef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cefc:	65bb      	str	r3, [r7, #88]	; 0x58
 800cefe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf04:	e841 2300 	strex	r3, r2, [r1]
 800cf08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cf0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1e4      	bne.n	800ceda <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7f9 f9a1 	bl	800625c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f91c 	bl	800d16c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf34:	e0fb      	b.n	800d12e <HAL_UART_IRQHandler+0x726>
 800cf36:	bf00      	nop
 800cf38:	40020010 	.word	0x40020010
 800cf3c:	40020028 	.word	0x40020028
 800cf40:	40020040 	.word	0x40020040
 800cf44:	40020058 	.word	0x40020058
 800cf48:	40020070 	.word	0x40020070
 800cf4c:	40020088 	.word	0x40020088
 800cf50:	400200a0 	.word	0x400200a0
 800cf54:	400200b8 	.word	0x400200b8
 800cf58:	40020410 	.word	0x40020410
 800cf5c:	40020428 	.word	0x40020428
 800cf60:	40020440 	.word	0x40020440
 800cf64:	40020458 	.word	0x40020458
 800cf68:	40020470 	.word	0x40020470
 800cf6c:	40020488 	.word	0x40020488
 800cf70:	400204a0 	.word	0x400204a0
 800cf74:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f000 80cc 	beq.w	800d132 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800cf9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f000 80c7 	beq.w	800d132 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	e853 3f00 	ldrex	r3, [r3]
 800cfb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cfb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cfb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cfc6:	647b      	str	r3, [r7, #68]	; 0x44
 800cfc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cfcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfce:	e841 2300 	strex	r3, r2, [r1]
 800cfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cfd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1e4      	bne.n	800cfa4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	3308      	adds	r3, #8
 800cfe0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe4:	e853 3f00 	ldrex	r3, [r3]
 800cfe8:	623b      	str	r3, [r7, #32]
   return(result);
 800cfea:	6a3a      	ldr	r2, [r7, #32]
 800cfec:	4b54      	ldr	r3, [pc, #336]	; (800d140 <HAL_UART_IRQHandler+0x738>)
 800cfee:	4013      	ands	r3, r2
 800cff0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	3308      	adds	r3, #8
 800cffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cffe:	633a      	str	r2, [r7, #48]	; 0x30
 800d000:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d006:	e841 2300 	strex	r3, r2, [r1]
 800d00a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1e3      	bne.n	800cfda <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2220      	movs	r2, #32
 800d016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	e853 3f00 	ldrex	r3, [r3]
 800d032:	60fb      	str	r3, [r7, #12]
   return(result);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f023 0310 	bic.w	r3, r3, #16
 800d03a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	461a      	mov	r2, r3
 800d044:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d048:	61fb      	str	r3, [r7, #28]
 800d04a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04c:	69b9      	ldr	r1, [r7, #24]
 800d04e:	69fa      	ldr	r2, [r7, #28]
 800d050:	e841 2300 	strex	r3, r2, [r1]
 800d054:	617b      	str	r3, [r7, #20]
   return(result);
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1e4      	bne.n	800d026 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d05c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d060:	4619      	mov	r1, r3
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f882 	bl	800d16c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d068:	e063      	b.n	800d132 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d06e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00e      	beq.n	800d094 <HAL_UART_IRQHandler+0x68c>
 800d076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d07a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d008      	beq.n	800d094 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d08a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f001 fb72 	bl	800e776 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d092:	e051      	b.n	800d138 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d014      	beq.n	800d0ca <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d105      	bne.n	800d0b8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d0ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d008      	beq.n	800d0ca <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d03a      	beq.n	800d136 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	4798      	blx	r3
    }
    return;
 800d0c8:	e035      	b.n	800d136 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d009      	beq.n	800d0ea <HAL_UART_IRQHandler+0x6e2>
 800d0d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d003      	beq.n	800d0ea <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f001 fb1c 	bl	800e720 <UART_EndTransmit_IT>
    return;
 800d0e8:	e026      	b.n	800d138 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d009      	beq.n	800d10a <HAL_UART_IRQHandler+0x702>
 800d0f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f001 fb4b 	bl	800e79e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d108:	e016      	b.n	800d138 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d10e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d010      	beq.n	800d138 <HAL_UART_IRQHandler+0x730>
 800d116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	da0c      	bge.n	800d138 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f001 fb33 	bl	800e78a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d124:	e008      	b.n	800d138 <HAL_UART_IRQHandler+0x730>
      return;
 800d126:	bf00      	nop
 800d128:	e006      	b.n	800d138 <HAL_UART_IRQHandler+0x730>
    return;
 800d12a:	bf00      	nop
 800d12c:	e004      	b.n	800d138 <HAL_UART_IRQHandler+0x730>
      return;
 800d12e:	bf00      	nop
 800d130:	e002      	b.n	800d138 <HAL_UART_IRQHandler+0x730>
      return;
 800d132:	bf00      	nop
 800d134:	e000      	b.n	800d138 <HAL_UART_IRQHandler+0x730>
    return;
 800d136:	bf00      	nop
  }
}
 800d138:	37e8      	adds	r7, #232	; 0xe8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	effffffe 	.word	0xeffffffe

0800d144 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d14c:	bf00      	nop
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d188:	b092      	sub	sp, #72	; 0x48
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	689a      	ldr	r2, [r3, #8]
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	691b      	ldr	r3, [r3, #16]
 800d19c:	431a      	orrs	r2, r3
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	695b      	ldr	r3, [r3, #20]
 800d1a2:	431a      	orrs	r2, r3
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	69db      	ldr	r3, [r3, #28]
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	4bbe      	ldr	r3, [pc, #760]	; (800d4ac <UART_SetConfig+0x328>)
 800d1b4:	4013      	ands	r3, r2
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	6812      	ldr	r2, [r2, #0]
 800d1ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1bc:	430b      	orrs	r3, r1
 800d1be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	68da      	ldr	r2, [r3, #12]
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	430a      	orrs	r2, r1
 800d1d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4ab3      	ldr	r2, [pc, #716]	; (800d4b0 <UART_SetConfig+0x32c>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d004      	beq.n	800d1f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	689a      	ldr	r2, [r3, #8]
 800d1f6:	4baf      	ldr	r3, [pc, #700]	; (800d4b4 <UART_SetConfig+0x330>)
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	697a      	ldr	r2, [r7, #20]
 800d1fc:	6812      	ldr	r2, [r2, #0]
 800d1fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d200:	430b      	orrs	r3, r1
 800d202:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20a:	f023 010f 	bic.w	r1, r3, #15
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	430a      	orrs	r2, r1
 800d218:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4aa6      	ldr	r2, [pc, #664]	; (800d4b8 <UART_SetConfig+0x334>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d177      	bne.n	800d314 <UART_SetConfig+0x190>
 800d224:	4ba5      	ldr	r3, [pc, #660]	; (800d4bc <UART_SetConfig+0x338>)
 800d226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d22c:	2b28      	cmp	r3, #40	; 0x28
 800d22e:	d86d      	bhi.n	800d30c <UART_SetConfig+0x188>
 800d230:	a201      	add	r2, pc, #4	; (adr r2, 800d238 <UART_SetConfig+0xb4>)
 800d232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d236:	bf00      	nop
 800d238:	0800d2dd 	.word	0x0800d2dd
 800d23c:	0800d30d 	.word	0x0800d30d
 800d240:	0800d30d 	.word	0x0800d30d
 800d244:	0800d30d 	.word	0x0800d30d
 800d248:	0800d30d 	.word	0x0800d30d
 800d24c:	0800d30d 	.word	0x0800d30d
 800d250:	0800d30d 	.word	0x0800d30d
 800d254:	0800d30d 	.word	0x0800d30d
 800d258:	0800d2e5 	.word	0x0800d2e5
 800d25c:	0800d30d 	.word	0x0800d30d
 800d260:	0800d30d 	.word	0x0800d30d
 800d264:	0800d30d 	.word	0x0800d30d
 800d268:	0800d30d 	.word	0x0800d30d
 800d26c:	0800d30d 	.word	0x0800d30d
 800d270:	0800d30d 	.word	0x0800d30d
 800d274:	0800d30d 	.word	0x0800d30d
 800d278:	0800d2ed 	.word	0x0800d2ed
 800d27c:	0800d30d 	.word	0x0800d30d
 800d280:	0800d30d 	.word	0x0800d30d
 800d284:	0800d30d 	.word	0x0800d30d
 800d288:	0800d30d 	.word	0x0800d30d
 800d28c:	0800d30d 	.word	0x0800d30d
 800d290:	0800d30d 	.word	0x0800d30d
 800d294:	0800d30d 	.word	0x0800d30d
 800d298:	0800d2f5 	.word	0x0800d2f5
 800d29c:	0800d30d 	.word	0x0800d30d
 800d2a0:	0800d30d 	.word	0x0800d30d
 800d2a4:	0800d30d 	.word	0x0800d30d
 800d2a8:	0800d30d 	.word	0x0800d30d
 800d2ac:	0800d30d 	.word	0x0800d30d
 800d2b0:	0800d30d 	.word	0x0800d30d
 800d2b4:	0800d30d 	.word	0x0800d30d
 800d2b8:	0800d2fd 	.word	0x0800d2fd
 800d2bc:	0800d30d 	.word	0x0800d30d
 800d2c0:	0800d30d 	.word	0x0800d30d
 800d2c4:	0800d30d 	.word	0x0800d30d
 800d2c8:	0800d30d 	.word	0x0800d30d
 800d2cc:	0800d30d 	.word	0x0800d30d
 800d2d0:	0800d30d 	.word	0x0800d30d
 800d2d4:	0800d30d 	.word	0x0800d30d
 800d2d8:	0800d305 	.word	0x0800d305
 800d2dc:	2301      	movs	r3, #1
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e2:	e326      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d2e4:	2304      	movs	r3, #4
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ea:	e322      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d2ec:	2308      	movs	r3, #8
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2f2:	e31e      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d2f4:	2310      	movs	r3, #16
 800d2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2fa:	e31a      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d2fc:	2320      	movs	r3, #32
 800d2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d302:	e316      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d304:	2340      	movs	r3, #64	; 0x40
 800d306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d30a:	e312      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d30c:	2380      	movs	r3, #128	; 0x80
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d312:	e30e      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a69      	ldr	r2, [pc, #420]	; (800d4c0 <UART_SetConfig+0x33c>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d130      	bne.n	800d380 <UART_SetConfig+0x1fc>
 800d31e:	4b67      	ldr	r3, [pc, #412]	; (800d4bc <UART_SetConfig+0x338>)
 800d320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d322:	f003 0307 	and.w	r3, r3, #7
 800d326:	2b05      	cmp	r3, #5
 800d328:	d826      	bhi.n	800d378 <UART_SetConfig+0x1f4>
 800d32a:	a201      	add	r2, pc, #4	; (adr r2, 800d330 <UART_SetConfig+0x1ac>)
 800d32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d330:	0800d349 	.word	0x0800d349
 800d334:	0800d351 	.word	0x0800d351
 800d338:	0800d359 	.word	0x0800d359
 800d33c:	0800d361 	.word	0x0800d361
 800d340:	0800d369 	.word	0x0800d369
 800d344:	0800d371 	.word	0x0800d371
 800d348:	2300      	movs	r3, #0
 800d34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d34e:	e2f0      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d350:	2304      	movs	r3, #4
 800d352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d356:	e2ec      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d358:	2308      	movs	r3, #8
 800d35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d35e:	e2e8      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d360:	2310      	movs	r3, #16
 800d362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d366:	e2e4      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d368:	2320      	movs	r3, #32
 800d36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d36e:	e2e0      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d370:	2340      	movs	r3, #64	; 0x40
 800d372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d376:	e2dc      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d378:	2380      	movs	r3, #128	; 0x80
 800d37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d37e:	e2d8      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a4f      	ldr	r2, [pc, #316]	; (800d4c4 <UART_SetConfig+0x340>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d130      	bne.n	800d3ec <UART_SetConfig+0x268>
 800d38a:	4b4c      	ldr	r3, [pc, #304]	; (800d4bc <UART_SetConfig+0x338>)
 800d38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d38e:	f003 0307 	and.w	r3, r3, #7
 800d392:	2b05      	cmp	r3, #5
 800d394:	d826      	bhi.n	800d3e4 <UART_SetConfig+0x260>
 800d396:	a201      	add	r2, pc, #4	; (adr r2, 800d39c <UART_SetConfig+0x218>)
 800d398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39c:	0800d3b5 	.word	0x0800d3b5
 800d3a0:	0800d3bd 	.word	0x0800d3bd
 800d3a4:	0800d3c5 	.word	0x0800d3c5
 800d3a8:	0800d3cd 	.word	0x0800d3cd
 800d3ac:	0800d3d5 	.word	0x0800d3d5
 800d3b0:	0800d3dd 	.word	0x0800d3dd
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ba:	e2ba      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d3bc:	2304      	movs	r3, #4
 800d3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3c2:	e2b6      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d3c4:	2308      	movs	r3, #8
 800d3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ca:	e2b2      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d3cc:	2310      	movs	r3, #16
 800d3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d2:	e2ae      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d3d4:	2320      	movs	r3, #32
 800d3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3da:	e2aa      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d3dc:	2340      	movs	r3, #64	; 0x40
 800d3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e2:	e2a6      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d3e4:	2380      	movs	r3, #128	; 0x80
 800d3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ea:	e2a2      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a35      	ldr	r2, [pc, #212]	; (800d4c8 <UART_SetConfig+0x344>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d130      	bne.n	800d458 <UART_SetConfig+0x2d4>
 800d3f6:	4b31      	ldr	r3, [pc, #196]	; (800d4bc <UART_SetConfig+0x338>)
 800d3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3fa:	f003 0307 	and.w	r3, r3, #7
 800d3fe:	2b05      	cmp	r3, #5
 800d400:	d826      	bhi.n	800d450 <UART_SetConfig+0x2cc>
 800d402:	a201      	add	r2, pc, #4	; (adr r2, 800d408 <UART_SetConfig+0x284>)
 800d404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d408:	0800d421 	.word	0x0800d421
 800d40c:	0800d429 	.word	0x0800d429
 800d410:	0800d431 	.word	0x0800d431
 800d414:	0800d439 	.word	0x0800d439
 800d418:	0800d441 	.word	0x0800d441
 800d41c:	0800d449 	.word	0x0800d449
 800d420:	2300      	movs	r3, #0
 800d422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d426:	e284      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d428:	2304      	movs	r3, #4
 800d42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d42e:	e280      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d430:	2308      	movs	r3, #8
 800d432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d436:	e27c      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d438:	2310      	movs	r3, #16
 800d43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43e:	e278      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d440:	2320      	movs	r3, #32
 800d442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d446:	e274      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d448:	2340      	movs	r3, #64	; 0x40
 800d44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44e:	e270      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d450:	2380      	movs	r3, #128	; 0x80
 800d452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d456:	e26c      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a1b      	ldr	r2, [pc, #108]	; (800d4cc <UART_SetConfig+0x348>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d142      	bne.n	800d4e8 <UART_SetConfig+0x364>
 800d462:	4b16      	ldr	r3, [pc, #88]	; (800d4bc <UART_SetConfig+0x338>)
 800d464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	2b05      	cmp	r3, #5
 800d46c:	d838      	bhi.n	800d4e0 <UART_SetConfig+0x35c>
 800d46e:	a201      	add	r2, pc, #4	; (adr r2, 800d474 <UART_SetConfig+0x2f0>)
 800d470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d474:	0800d48d 	.word	0x0800d48d
 800d478:	0800d495 	.word	0x0800d495
 800d47c:	0800d49d 	.word	0x0800d49d
 800d480:	0800d4a5 	.word	0x0800d4a5
 800d484:	0800d4d1 	.word	0x0800d4d1
 800d488:	0800d4d9 	.word	0x0800d4d9
 800d48c:	2300      	movs	r3, #0
 800d48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d492:	e24e      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d494:	2304      	movs	r3, #4
 800d496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d49a:	e24a      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d49c:	2308      	movs	r3, #8
 800d49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a2:	e246      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d4a4:	2310      	movs	r3, #16
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4aa:	e242      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d4ac:	cfff69f3 	.word	0xcfff69f3
 800d4b0:	58000c00 	.word	0x58000c00
 800d4b4:	11fff4ff 	.word	0x11fff4ff
 800d4b8:	40011000 	.word	0x40011000
 800d4bc:	58024400 	.word	0x58024400
 800d4c0:	40004400 	.word	0x40004400
 800d4c4:	40004800 	.word	0x40004800
 800d4c8:	40004c00 	.word	0x40004c00
 800d4cc:	40005000 	.word	0x40005000
 800d4d0:	2320      	movs	r3, #32
 800d4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d6:	e22c      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d4d8:	2340      	movs	r3, #64	; 0x40
 800d4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4de:	e228      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d4e0:	2380      	movs	r3, #128	; 0x80
 800d4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4e6:	e224      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4ab1      	ldr	r2, [pc, #708]	; (800d7b4 <UART_SetConfig+0x630>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d176      	bne.n	800d5e0 <UART_SetConfig+0x45c>
 800d4f2:	4bb1      	ldr	r3, [pc, #708]	; (800d7b8 <UART_SetConfig+0x634>)
 800d4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d4fa:	2b28      	cmp	r3, #40	; 0x28
 800d4fc:	d86c      	bhi.n	800d5d8 <UART_SetConfig+0x454>
 800d4fe:	a201      	add	r2, pc, #4	; (adr r2, 800d504 <UART_SetConfig+0x380>)
 800d500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d504:	0800d5a9 	.word	0x0800d5a9
 800d508:	0800d5d9 	.word	0x0800d5d9
 800d50c:	0800d5d9 	.word	0x0800d5d9
 800d510:	0800d5d9 	.word	0x0800d5d9
 800d514:	0800d5d9 	.word	0x0800d5d9
 800d518:	0800d5d9 	.word	0x0800d5d9
 800d51c:	0800d5d9 	.word	0x0800d5d9
 800d520:	0800d5d9 	.word	0x0800d5d9
 800d524:	0800d5b1 	.word	0x0800d5b1
 800d528:	0800d5d9 	.word	0x0800d5d9
 800d52c:	0800d5d9 	.word	0x0800d5d9
 800d530:	0800d5d9 	.word	0x0800d5d9
 800d534:	0800d5d9 	.word	0x0800d5d9
 800d538:	0800d5d9 	.word	0x0800d5d9
 800d53c:	0800d5d9 	.word	0x0800d5d9
 800d540:	0800d5d9 	.word	0x0800d5d9
 800d544:	0800d5b9 	.word	0x0800d5b9
 800d548:	0800d5d9 	.word	0x0800d5d9
 800d54c:	0800d5d9 	.word	0x0800d5d9
 800d550:	0800d5d9 	.word	0x0800d5d9
 800d554:	0800d5d9 	.word	0x0800d5d9
 800d558:	0800d5d9 	.word	0x0800d5d9
 800d55c:	0800d5d9 	.word	0x0800d5d9
 800d560:	0800d5d9 	.word	0x0800d5d9
 800d564:	0800d5c1 	.word	0x0800d5c1
 800d568:	0800d5d9 	.word	0x0800d5d9
 800d56c:	0800d5d9 	.word	0x0800d5d9
 800d570:	0800d5d9 	.word	0x0800d5d9
 800d574:	0800d5d9 	.word	0x0800d5d9
 800d578:	0800d5d9 	.word	0x0800d5d9
 800d57c:	0800d5d9 	.word	0x0800d5d9
 800d580:	0800d5d9 	.word	0x0800d5d9
 800d584:	0800d5c9 	.word	0x0800d5c9
 800d588:	0800d5d9 	.word	0x0800d5d9
 800d58c:	0800d5d9 	.word	0x0800d5d9
 800d590:	0800d5d9 	.word	0x0800d5d9
 800d594:	0800d5d9 	.word	0x0800d5d9
 800d598:	0800d5d9 	.word	0x0800d5d9
 800d59c:	0800d5d9 	.word	0x0800d5d9
 800d5a0:	0800d5d9 	.word	0x0800d5d9
 800d5a4:	0800d5d1 	.word	0x0800d5d1
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ae:	e1c0      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d5b0:	2304      	movs	r3, #4
 800d5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5b6:	e1bc      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d5b8:	2308      	movs	r3, #8
 800d5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5be:	e1b8      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d5c0:	2310      	movs	r3, #16
 800d5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5c6:	e1b4      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d5c8:	2320      	movs	r3, #32
 800d5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ce:	e1b0      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d5d0:	2340      	movs	r3, #64	; 0x40
 800d5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5d6:	e1ac      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d5d8:	2380      	movs	r3, #128	; 0x80
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5de:	e1a8      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a75      	ldr	r2, [pc, #468]	; (800d7bc <UART_SetConfig+0x638>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d130      	bne.n	800d64c <UART_SetConfig+0x4c8>
 800d5ea:	4b73      	ldr	r3, [pc, #460]	; (800d7b8 <UART_SetConfig+0x634>)
 800d5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ee:	f003 0307 	and.w	r3, r3, #7
 800d5f2:	2b05      	cmp	r3, #5
 800d5f4:	d826      	bhi.n	800d644 <UART_SetConfig+0x4c0>
 800d5f6:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <UART_SetConfig+0x478>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d615 	.word	0x0800d615
 800d600:	0800d61d 	.word	0x0800d61d
 800d604:	0800d625 	.word	0x0800d625
 800d608:	0800d62d 	.word	0x0800d62d
 800d60c:	0800d635 	.word	0x0800d635
 800d610:	0800d63d 	.word	0x0800d63d
 800d614:	2300      	movs	r3, #0
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61a:	e18a      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d61c:	2304      	movs	r3, #4
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d622:	e186      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d624:	2308      	movs	r3, #8
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62a:	e182      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d62c:	2310      	movs	r3, #16
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d632:	e17e      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d634:	2320      	movs	r3, #32
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63a:	e17a      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d63c:	2340      	movs	r3, #64	; 0x40
 800d63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d642:	e176      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d644:	2380      	movs	r3, #128	; 0x80
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d64a:	e172      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a5b      	ldr	r2, [pc, #364]	; (800d7c0 <UART_SetConfig+0x63c>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d130      	bne.n	800d6b8 <UART_SetConfig+0x534>
 800d656:	4b58      	ldr	r3, [pc, #352]	; (800d7b8 <UART_SetConfig+0x634>)
 800d658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d65a:	f003 0307 	and.w	r3, r3, #7
 800d65e:	2b05      	cmp	r3, #5
 800d660:	d826      	bhi.n	800d6b0 <UART_SetConfig+0x52c>
 800d662:	a201      	add	r2, pc, #4	; (adr r2, 800d668 <UART_SetConfig+0x4e4>)
 800d664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d668:	0800d681 	.word	0x0800d681
 800d66c:	0800d689 	.word	0x0800d689
 800d670:	0800d691 	.word	0x0800d691
 800d674:	0800d699 	.word	0x0800d699
 800d678:	0800d6a1 	.word	0x0800d6a1
 800d67c:	0800d6a9 	.word	0x0800d6a9
 800d680:	2300      	movs	r3, #0
 800d682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d686:	e154      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d688:	2304      	movs	r3, #4
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68e:	e150      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d690:	2308      	movs	r3, #8
 800d692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d696:	e14c      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d698:	2310      	movs	r3, #16
 800d69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69e:	e148      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d6a0:	2320      	movs	r3, #32
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a6:	e144      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d6a8:	2340      	movs	r3, #64	; 0x40
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ae:	e140      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d6b0:	2380      	movs	r3, #128	; 0x80
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b6:	e13c      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a41      	ldr	r2, [pc, #260]	; (800d7c4 <UART_SetConfig+0x640>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	f040 8082 	bne.w	800d7c8 <UART_SetConfig+0x644>
 800d6c4:	4b3c      	ldr	r3, [pc, #240]	; (800d7b8 <UART_SetConfig+0x634>)
 800d6c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6cc:	2b28      	cmp	r3, #40	; 0x28
 800d6ce:	d86d      	bhi.n	800d7ac <UART_SetConfig+0x628>
 800d6d0:	a201      	add	r2, pc, #4	; (adr r2, 800d6d8 <UART_SetConfig+0x554>)
 800d6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d6:	bf00      	nop
 800d6d8:	0800d77d 	.word	0x0800d77d
 800d6dc:	0800d7ad 	.word	0x0800d7ad
 800d6e0:	0800d7ad 	.word	0x0800d7ad
 800d6e4:	0800d7ad 	.word	0x0800d7ad
 800d6e8:	0800d7ad 	.word	0x0800d7ad
 800d6ec:	0800d7ad 	.word	0x0800d7ad
 800d6f0:	0800d7ad 	.word	0x0800d7ad
 800d6f4:	0800d7ad 	.word	0x0800d7ad
 800d6f8:	0800d785 	.word	0x0800d785
 800d6fc:	0800d7ad 	.word	0x0800d7ad
 800d700:	0800d7ad 	.word	0x0800d7ad
 800d704:	0800d7ad 	.word	0x0800d7ad
 800d708:	0800d7ad 	.word	0x0800d7ad
 800d70c:	0800d7ad 	.word	0x0800d7ad
 800d710:	0800d7ad 	.word	0x0800d7ad
 800d714:	0800d7ad 	.word	0x0800d7ad
 800d718:	0800d78d 	.word	0x0800d78d
 800d71c:	0800d7ad 	.word	0x0800d7ad
 800d720:	0800d7ad 	.word	0x0800d7ad
 800d724:	0800d7ad 	.word	0x0800d7ad
 800d728:	0800d7ad 	.word	0x0800d7ad
 800d72c:	0800d7ad 	.word	0x0800d7ad
 800d730:	0800d7ad 	.word	0x0800d7ad
 800d734:	0800d7ad 	.word	0x0800d7ad
 800d738:	0800d795 	.word	0x0800d795
 800d73c:	0800d7ad 	.word	0x0800d7ad
 800d740:	0800d7ad 	.word	0x0800d7ad
 800d744:	0800d7ad 	.word	0x0800d7ad
 800d748:	0800d7ad 	.word	0x0800d7ad
 800d74c:	0800d7ad 	.word	0x0800d7ad
 800d750:	0800d7ad 	.word	0x0800d7ad
 800d754:	0800d7ad 	.word	0x0800d7ad
 800d758:	0800d79d 	.word	0x0800d79d
 800d75c:	0800d7ad 	.word	0x0800d7ad
 800d760:	0800d7ad 	.word	0x0800d7ad
 800d764:	0800d7ad 	.word	0x0800d7ad
 800d768:	0800d7ad 	.word	0x0800d7ad
 800d76c:	0800d7ad 	.word	0x0800d7ad
 800d770:	0800d7ad 	.word	0x0800d7ad
 800d774:	0800d7ad 	.word	0x0800d7ad
 800d778:	0800d7a5 	.word	0x0800d7a5
 800d77c:	2301      	movs	r3, #1
 800d77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d782:	e0d6      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d784:	2304      	movs	r3, #4
 800d786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78a:	e0d2      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d78c:	2308      	movs	r3, #8
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d792:	e0ce      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d794:	2310      	movs	r3, #16
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e0ca      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d79c:	2320      	movs	r3, #32
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e0c6      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d7a4:	2340      	movs	r3, #64	; 0x40
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7aa:	e0c2      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d7ac:	2380      	movs	r3, #128	; 0x80
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b2:	e0be      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d7b4:	40011400 	.word	0x40011400
 800d7b8:	58024400 	.word	0x58024400
 800d7bc:	40007800 	.word	0x40007800
 800d7c0:	40007c00 	.word	0x40007c00
 800d7c4:	40011800 	.word	0x40011800
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4aad      	ldr	r2, [pc, #692]	; (800da84 <UART_SetConfig+0x900>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d176      	bne.n	800d8c0 <UART_SetConfig+0x73c>
 800d7d2:	4bad      	ldr	r3, [pc, #692]	; (800da88 <UART_SetConfig+0x904>)
 800d7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7da:	2b28      	cmp	r3, #40	; 0x28
 800d7dc:	d86c      	bhi.n	800d8b8 <UART_SetConfig+0x734>
 800d7de:	a201      	add	r2, pc, #4	; (adr r2, 800d7e4 <UART_SetConfig+0x660>)
 800d7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e4:	0800d889 	.word	0x0800d889
 800d7e8:	0800d8b9 	.word	0x0800d8b9
 800d7ec:	0800d8b9 	.word	0x0800d8b9
 800d7f0:	0800d8b9 	.word	0x0800d8b9
 800d7f4:	0800d8b9 	.word	0x0800d8b9
 800d7f8:	0800d8b9 	.word	0x0800d8b9
 800d7fc:	0800d8b9 	.word	0x0800d8b9
 800d800:	0800d8b9 	.word	0x0800d8b9
 800d804:	0800d891 	.word	0x0800d891
 800d808:	0800d8b9 	.word	0x0800d8b9
 800d80c:	0800d8b9 	.word	0x0800d8b9
 800d810:	0800d8b9 	.word	0x0800d8b9
 800d814:	0800d8b9 	.word	0x0800d8b9
 800d818:	0800d8b9 	.word	0x0800d8b9
 800d81c:	0800d8b9 	.word	0x0800d8b9
 800d820:	0800d8b9 	.word	0x0800d8b9
 800d824:	0800d899 	.word	0x0800d899
 800d828:	0800d8b9 	.word	0x0800d8b9
 800d82c:	0800d8b9 	.word	0x0800d8b9
 800d830:	0800d8b9 	.word	0x0800d8b9
 800d834:	0800d8b9 	.word	0x0800d8b9
 800d838:	0800d8b9 	.word	0x0800d8b9
 800d83c:	0800d8b9 	.word	0x0800d8b9
 800d840:	0800d8b9 	.word	0x0800d8b9
 800d844:	0800d8a1 	.word	0x0800d8a1
 800d848:	0800d8b9 	.word	0x0800d8b9
 800d84c:	0800d8b9 	.word	0x0800d8b9
 800d850:	0800d8b9 	.word	0x0800d8b9
 800d854:	0800d8b9 	.word	0x0800d8b9
 800d858:	0800d8b9 	.word	0x0800d8b9
 800d85c:	0800d8b9 	.word	0x0800d8b9
 800d860:	0800d8b9 	.word	0x0800d8b9
 800d864:	0800d8a9 	.word	0x0800d8a9
 800d868:	0800d8b9 	.word	0x0800d8b9
 800d86c:	0800d8b9 	.word	0x0800d8b9
 800d870:	0800d8b9 	.word	0x0800d8b9
 800d874:	0800d8b9 	.word	0x0800d8b9
 800d878:	0800d8b9 	.word	0x0800d8b9
 800d87c:	0800d8b9 	.word	0x0800d8b9
 800d880:	0800d8b9 	.word	0x0800d8b9
 800d884:	0800d8b1 	.word	0x0800d8b1
 800d888:	2301      	movs	r3, #1
 800d88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88e:	e050      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d890:	2304      	movs	r3, #4
 800d892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d896:	e04c      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d898:	2308      	movs	r3, #8
 800d89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89e:	e048      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d8a0:	2310      	movs	r3, #16
 800d8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8a6:	e044      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d8a8:	2320      	movs	r3, #32
 800d8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ae:	e040      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d8b0:	2340      	movs	r3, #64	; 0x40
 800d8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b6:	e03c      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d8b8:	2380      	movs	r3, #128	; 0x80
 800d8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8be:	e038      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a71      	ldr	r2, [pc, #452]	; (800da8c <UART_SetConfig+0x908>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d130      	bne.n	800d92c <UART_SetConfig+0x7a8>
 800d8ca:	4b6f      	ldr	r3, [pc, #444]	; (800da88 <UART_SetConfig+0x904>)
 800d8cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8ce:	f003 0307 	and.w	r3, r3, #7
 800d8d2:	2b05      	cmp	r3, #5
 800d8d4:	d826      	bhi.n	800d924 <UART_SetConfig+0x7a0>
 800d8d6:	a201      	add	r2, pc, #4	; (adr r2, 800d8dc <UART_SetConfig+0x758>)
 800d8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8dc:	0800d8f5 	.word	0x0800d8f5
 800d8e0:	0800d8fd 	.word	0x0800d8fd
 800d8e4:	0800d905 	.word	0x0800d905
 800d8e8:	0800d90d 	.word	0x0800d90d
 800d8ec:	0800d915 	.word	0x0800d915
 800d8f0:	0800d91d 	.word	0x0800d91d
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fa:	e01a      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d8fc:	2304      	movs	r3, #4
 800d8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d902:	e016      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d904:	2308      	movs	r3, #8
 800d906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90a:	e012      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d90c:	2310      	movs	r3, #16
 800d90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d912:	e00e      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d914:	2320      	movs	r3, #32
 800d916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91a:	e00a      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d91c:	2340      	movs	r3, #64	; 0x40
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d922:	e006      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d924:	2380      	movs	r3, #128	; 0x80
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92a:	e002      	b.n	800d932 <UART_SetConfig+0x7ae>
 800d92c:	2380      	movs	r3, #128	; 0x80
 800d92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a55      	ldr	r2, [pc, #340]	; (800da8c <UART_SetConfig+0x908>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	f040 80f8 	bne.w	800db2e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d93e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d942:	2b20      	cmp	r3, #32
 800d944:	dc46      	bgt.n	800d9d4 <UART_SetConfig+0x850>
 800d946:	2b02      	cmp	r3, #2
 800d948:	db75      	blt.n	800da36 <UART_SetConfig+0x8b2>
 800d94a:	3b02      	subs	r3, #2
 800d94c:	2b1e      	cmp	r3, #30
 800d94e:	d872      	bhi.n	800da36 <UART_SetConfig+0x8b2>
 800d950:	a201      	add	r2, pc, #4	; (adr r2, 800d958 <UART_SetConfig+0x7d4>)
 800d952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d956:	bf00      	nop
 800d958:	0800d9db 	.word	0x0800d9db
 800d95c:	0800da37 	.word	0x0800da37
 800d960:	0800d9e3 	.word	0x0800d9e3
 800d964:	0800da37 	.word	0x0800da37
 800d968:	0800da37 	.word	0x0800da37
 800d96c:	0800da37 	.word	0x0800da37
 800d970:	0800d9f3 	.word	0x0800d9f3
 800d974:	0800da37 	.word	0x0800da37
 800d978:	0800da37 	.word	0x0800da37
 800d97c:	0800da37 	.word	0x0800da37
 800d980:	0800da37 	.word	0x0800da37
 800d984:	0800da37 	.word	0x0800da37
 800d988:	0800da37 	.word	0x0800da37
 800d98c:	0800da37 	.word	0x0800da37
 800d990:	0800da03 	.word	0x0800da03
 800d994:	0800da37 	.word	0x0800da37
 800d998:	0800da37 	.word	0x0800da37
 800d99c:	0800da37 	.word	0x0800da37
 800d9a0:	0800da37 	.word	0x0800da37
 800d9a4:	0800da37 	.word	0x0800da37
 800d9a8:	0800da37 	.word	0x0800da37
 800d9ac:	0800da37 	.word	0x0800da37
 800d9b0:	0800da37 	.word	0x0800da37
 800d9b4:	0800da37 	.word	0x0800da37
 800d9b8:	0800da37 	.word	0x0800da37
 800d9bc:	0800da37 	.word	0x0800da37
 800d9c0:	0800da37 	.word	0x0800da37
 800d9c4:	0800da37 	.word	0x0800da37
 800d9c8:	0800da37 	.word	0x0800da37
 800d9cc:	0800da37 	.word	0x0800da37
 800d9d0:	0800da29 	.word	0x0800da29
 800d9d4:	2b40      	cmp	r3, #64	; 0x40
 800d9d6:	d02a      	beq.n	800da2e <UART_SetConfig+0x8aa>
 800d9d8:	e02d      	b.n	800da36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d9da:	f7fc fe0b 	bl	800a5f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800d9de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9e0:	e02f      	b.n	800da42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fc fe1a 	bl	800a620 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9f0:	e027      	b.n	800da42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9f2:	f107 0318 	add.w	r3, r7, #24
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fc ff66 	bl	800a8c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da00:	e01f      	b.n	800da42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da02:	4b21      	ldr	r3, [pc, #132]	; (800da88 <UART_SetConfig+0x904>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f003 0320 	and.w	r3, r3, #32
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d009      	beq.n	800da22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da0e:	4b1e      	ldr	r3, [pc, #120]	; (800da88 <UART_SetConfig+0x904>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	08db      	lsrs	r3, r3, #3
 800da14:	f003 0303 	and.w	r3, r3, #3
 800da18:	4a1d      	ldr	r2, [pc, #116]	; (800da90 <UART_SetConfig+0x90c>)
 800da1a:	fa22 f303 	lsr.w	r3, r2, r3
 800da1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da20:	e00f      	b.n	800da42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800da22:	4b1b      	ldr	r3, [pc, #108]	; (800da90 <UART_SetConfig+0x90c>)
 800da24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da26:	e00c      	b.n	800da42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da28:	4b1a      	ldr	r3, [pc, #104]	; (800da94 <UART_SetConfig+0x910>)
 800da2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da2c:	e009      	b.n	800da42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da34:	e005      	b.n	800da42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800da36:	2300      	movs	r3, #0
 800da38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800da40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800da42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da44:	2b00      	cmp	r3, #0
 800da46:	f000 81ee 	beq.w	800de26 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4e:	4a12      	ldr	r2, [pc, #72]	; (800da98 <UART_SetConfig+0x914>)
 800da50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da54:	461a      	mov	r2, r3
 800da56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da58:	fbb3 f3f2 	udiv	r3, r3, r2
 800da5c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	685a      	ldr	r2, [r3, #4]
 800da62:	4613      	mov	r3, r2
 800da64:	005b      	lsls	r3, r3, #1
 800da66:	4413      	add	r3, r2
 800da68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d305      	bcc.n	800da7a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da76:	429a      	cmp	r2, r3
 800da78:	d910      	bls.n	800da9c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800da80:	e1d1      	b.n	800de26 <UART_SetConfig+0xca2>
 800da82:	bf00      	nop
 800da84:	40011c00 	.word	0x40011c00
 800da88:	58024400 	.word	0x58024400
 800da8c:	58000c00 	.word	0x58000c00
 800da90:	03d09000 	.word	0x03d09000
 800da94:	003d0900 	.word	0x003d0900
 800da98:	0800fce8 	.word	0x0800fce8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da9e:	2200      	movs	r2, #0
 800daa0:	60bb      	str	r3, [r7, #8]
 800daa2:	60fa      	str	r2, [r7, #12]
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa8:	4ac0      	ldr	r2, [pc, #768]	; (800ddac <UART_SetConfig+0xc28>)
 800daaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daae:	b29b      	uxth	r3, r3
 800dab0:	2200      	movs	r2, #0
 800dab2:	603b      	str	r3, [r7, #0]
 800dab4:	607a      	str	r2, [r7, #4]
 800dab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dabe:	f7f2 fc2f 	bl	8000320 <__aeabi_uldivmod>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	4610      	mov	r0, r2
 800dac8:	4619      	mov	r1, r3
 800daca:	f04f 0200 	mov.w	r2, #0
 800dace:	f04f 0300 	mov.w	r3, #0
 800dad2:	020b      	lsls	r3, r1, #8
 800dad4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dad8:	0202      	lsls	r2, r0, #8
 800dada:	6979      	ldr	r1, [r7, #20]
 800dadc:	6849      	ldr	r1, [r1, #4]
 800dade:	0849      	lsrs	r1, r1, #1
 800dae0:	2000      	movs	r0, #0
 800dae2:	460c      	mov	r4, r1
 800dae4:	4605      	mov	r5, r0
 800dae6:	eb12 0804 	adds.w	r8, r2, r4
 800daea:	eb43 0905 	adc.w	r9, r3, r5
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	469a      	mov	sl, r3
 800daf6:	4693      	mov	fp, r2
 800daf8:	4652      	mov	r2, sl
 800dafa:	465b      	mov	r3, fp
 800dafc:	4640      	mov	r0, r8
 800dafe:	4649      	mov	r1, r9
 800db00:	f7f2 fc0e 	bl	8000320 <__aeabi_uldivmod>
 800db04:	4602      	mov	r2, r0
 800db06:	460b      	mov	r3, r1
 800db08:	4613      	mov	r3, r2
 800db0a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800db0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db12:	d308      	bcc.n	800db26 <UART_SetConfig+0x9a2>
 800db14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db1a:	d204      	bcs.n	800db26 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db22:	60da      	str	r2, [r3, #12]
 800db24:	e17f      	b.n	800de26 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800db2c:	e17b      	b.n	800de26 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	69db      	ldr	r3, [r3, #28]
 800db32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db36:	f040 80bd 	bne.w	800dcb4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800db3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db3e:	2b20      	cmp	r3, #32
 800db40:	dc48      	bgt.n	800dbd4 <UART_SetConfig+0xa50>
 800db42:	2b00      	cmp	r3, #0
 800db44:	db7b      	blt.n	800dc3e <UART_SetConfig+0xaba>
 800db46:	2b20      	cmp	r3, #32
 800db48:	d879      	bhi.n	800dc3e <UART_SetConfig+0xaba>
 800db4a:	a201      	add	r2, pc, #4	; (adr r2, 800db50 <UART_SetConfig+0x9cc>)
 800db4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db50:	0800dbdb 	.word	0x0800dbdb
 800db54:	0800dbe3 	.word	0x0800dbe3
 800db58:	0800dc3f 	.word	0x0800dc3f
 800db5c:	0800dc3f 	.word	0x0800dc3f
 800db60:	0800dbeb 	.word	0x0800dbeb
 800db64:	0800dc3f 	.word	0x0800dc3f
 800db68:	0800dc3f 	.word	0x0800dc3f
 800db6c:	0800dc3f 	.word	0x0800dc3f
 800db70:	0800dbfb 	.word	0x0800dbfb
 800db74:	0800dc3f 	.word	0x0800dc3f
 800db78:	0800dc3f 	.word	0x0800dc3f
 800db7c:	0800dc3f 	.word	0x0800dc3f
 800db80:	0800dc3f 	.word	0x0800dc3f
 800db84:	0800dc3f 	.word	0x0800dc3f
 800db88:	0800dc3f 	.word	0x0800dc3f
 800db8c:	0800dc3f 	.word	0x0800dc3f
 800db90:	0800dc0b 	.word	0x0800dc0b
 800db94:	0800dc3f 	.word	0x0800dc3f
 800db98:	0800dc3f 	.word	0x0800dc3f
 800db9c:	0800dc3f 	.word	0x0800dc3f
 800dba0:	0800dc3f 	.word	0x0800dc3f
 800dba4:	0800dc3f 	.word	0x0800dc3f
 800dba8:	0800dc3f 	.word	0x0800dc3f
 800dbac:	0800dc3f 	.word	0x0800dc3f
 800dbb0:	0800dc3f 	.word	0x0800dc3f
 800dbb4:	0800dc3f 	.word	0x0800dc3f
 800dbb8:	0800dc3f 	.word	0x0800dc3f
 800dbbc:	0800dc3f 	.word	0x0800dc3f
 800dbc0:	0800dc3f 	.word	0x0800dc3f
 800dbc4:	0800dc3f 	.word	0x0800dc3f
 800dbc8:	0800dc3f 	.word	0x0800dc3f
 800dbcc:	0800dc3f 	.word	0x0800dc3f
 800dbd0:	0800dc31 	.word	0x0800dc31
 800dbd4:	2b40      	cmp	r3, #64	; 0x40
 800dbd6:	d02e      	beq.n	800dc36 <UART_SetConfig+0xab2>
 800dbd8:	e031      	b.n	800dc3e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dbda:	f7fb fde5 	bl	80097a8 <HAL_RCC_GetPCLK1Freq>
 800dbde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbe0:	e033      	b.n	800dc4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dbe2:	f7fb fdf7 	bl	80097d4 <HAL_RCC_GetPCLK2Freq>
 800dbe6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbe8:	e02f      	b.n	800dc4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fc fd16 	bl	800a620 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbf8:	e027      	b.n	800dc4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbfa:	f107 0318 	add.w	r3, r7, #24
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fc fe62 	bl	800a8c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc08:	e01f      	b.n	800dc4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc0a:	4b69      	ldr	r3, [pc, #420]	; (800ddb0 <UART_SetConfig+0xc2c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0320 	and.w	r3, r3, #32
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d009      	beq.n	800dc2a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc16:	4b66      	ldr	r3, [pc, #408]	; (800ddb0 <UART_SetConfig+0xc2c>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	08db      	lsrs	r3, r3, #3
 800dc1c:	f003 0303 	and.w	r3, r3, #3
 800dc20:	4a64      	ldr	r2, [pc, #400]	; (800ddb4 <UART_SetConfig+0xc30>)
 800dc22:	fa22 f303 	lsr.w	r3, r2, r3
 800dc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc28:	e00f      	b.n	800dc4a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800dc2a:	4b62      	ldr	r3, [pc, #392]	; (800ddb4 <UART_SetConfig+0xc30>)
 800dc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc2e:	e00c      	b.n	800dc4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc30:	4b61      	ldr	r3, [pc, #388]	; (800ddb8 <UART_SetConfig+0xc34>)
 800dc32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc34:	e009      	b.n	800dc4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc3c:	e005      	b.n	800dc4a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dc42:	2301      	movs	r3, #1
 800dc44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dc48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dc4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f000 80ea 	beq.w	800de26 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc56:	4a55      	ldr	r2, [pc, #340]	; (800ddac <UART_SetConfig+0xc28>)
 800dc58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc60:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc64:	005a      	lsls	r2, r3, #1
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	085b      	lsrs	r3, r3, #1
 800dc6c:	441a      	add	r2, r3
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	2b0f      	cmp	r3, #15
 800dc7c:	d916      	bls.n	800dcac <UART_SetConfig+0xb28>
 800dc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc84:	d212      	bcs.n	800dcac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	f023 030f 	bic.w	r3, r3, #15
 800dc8e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc92:	085b      	lsrs	r3, r3, #1
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	f003 0307 	and.w	r3, r3, #7
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dca8:	60da      	str	r2, [r3, #12]
 800dcaa:	e0bc      	b.n	800de26 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dcac:	2301      	movs	r3, #1
 800dcae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dcb2:	e0b8      	b.n	800de26 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dcb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dcb8:	2b20      	cmp	r3, #32
 800dcba:	dc4b      	bgt.n	800dd54 <UART_SetConfig+0xbd0>
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	f2c0 8087 	blt.w	800ddd0 <UART_SetConfig+0xc4c>
 800dcc2:	2b20      	cmp	r3, #32
 800dcc4:	f200 8084 	bhi.w	800ddd0 <UART_SetConfig+0xc4c>
 800dcc8:	a201      	add	r2, pc, #4	; (adr r2, 800dcd0 <UART_SetConfig+0xb4c>)
 800dcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcce:	bf00      	nop
 800dcd0:	0800dd5b 	.word	0x0800dd5b
 800dcd4:	0800dd63 	.word	0x0800dd63
 800dcd8:	0800ddd1 	.word	0x0800ddd1
 800dcdc:	0800ddd1 	.word	0x0800ddd1
 800dce0:	0800dd6b 	.word	0x0800dd6b
 800dce4:	0800ddd1 	.word	0x0800ddd1
 800dce8:	0800ddd1 	.word	0x0800ddd1
 800dcec:	0800ddd1 	.word	0x0800ddd1
 800dcf0:	0800dd7b 	.word	0x0800dd7b
 800dcf4:	0800ddd1 	.word	0x0800ddd1
 800dcf8:	0800ddd1 	.word	0x0800ddd1
 800dcfc:	0800ddd1 	.word	0x0800ddd1
 800dd00:	0800ddd1 	.word	0x0800ddd1
 800dd04:	0800ddd1 	.word	0x0800ddd1
 800dd08:	0800ddd1 	.word	0x0800ddd1
 800dd0c:	0800ddd1 	.word	0x0800ddd1
 800dd10:	0800dd8b 	.word	0x0800dd8b
 800dd14:	0800ddd1 	.word	0x0800ddd1
 800dd18:	0800ddd1 	.word	0x0800ddd1
 800dd1c:	0800ddd1 	.word	0x0800ddd1
 800dd20:	0800ddd1 	.word	0x0800ddd1
 800dd24:	0800ddd1 	.word	0x0800ddd1
 800dd28:	0800ddd1 	.word	0x0800ddd1
 800dd2c:	0800ddd1 	.word	0x0800ddd1
 800dd30:	0800ddd1 	.word	0x0800ddd1
 800dd34:	0800ddd1 	.word	0x0800ddd1
 800dd38:	0800ddd1 	.word	0x0800ddd1
 800dd3c:	0800ddd1 	.word	0x0800ddd1
 800dd40:	0800ddd1 	.word	0x0800ddd1
 800dd44:	0800ddd1 	.word	0x0800ddd1
 800dd48:	0800ddd1 	.word	0x0800ddd1
 800dd4c:	0800ddd1 	.word	0x0800ddd1
 800dd50:	0800ddc3 	.word	0x0800ddc3
 800dd54:	2b40      	cmp	r3, #64	; 0x40
 800dd56:	d037      	beq.n	800ddc8 <UART_SetConfig+0xc44>
 800dd58:	e03a      	b.n	800ddd0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd5a:	f7fb fd25 	bl	80097a8 <HAL_RCC_GetPCLK1Freq>
 800dd5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd60:	e03c      	b.n	800dddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd62:	f7fb fd37 	bl	80097d4 <HAL_RCC_GetPCLK2Freq>
 800dd66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd68:	e038      	b.n	800dddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fc fc56 	bl	800a620 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd78:	e030      	b.n	800dddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd7a:	f107 0318 	add.w	r3, r7, #24
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fc fda2 	bl	800a8c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd88:	e028      	b.n	800dddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd8a:	4b09      	ldr	r3, [pc, #36]	; (800ddb0 <UART_SetConfig+0xc2c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f003 0320 	and.w	r3, r3, #32
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d012      	beq.n	800ddbc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd96:	4b06      	ldr	r3, [pc, #24]	; (800ddb0 <UART_SetConfig+0xc2c>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	08db      	lsrs	r3, r3, #3
 800dd9c:	f003 0303 	and.w	r3, r3, #3
 800dda0:	4a04      	ldr	r2, [pc, #16]	; (800ddb4 <UART_SetConfig+0xc30>)
 800dda2:	fa22 f303 	lsr.w	r3, r2, r3
 800dda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dda8:	e018      	b.n	800dddc <UART_SetConfig+0xc58>
 800ddaa:	bf00      	nop
 800ddac:	0800fce8 	.word	0x0800fce8
 800ddb0:	58024400 	.word	0x58024400
 800ddb4:	03d09000 	.word	0x03d09000
 800ddb8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ddbc:	4b24      	ldr	r3, [pc, #144]	; (800de50 <UART_SetConfig+0xccc>)
 800ddbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddc0:	e00c      	b.n	800dddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ddc2:	4b24      	ldr	r3, [pc, #144]	; (800de54 <UART_SetConfig+0xcd0>)
 800ddc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddc6:	e009      	b.n	800dddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddce:	e005      	b.n	800dddc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ddda:	bf00      	nop
    }

    if (pclk != 0U)
 800dddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d021      	beq.n	800de26 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde6:	4a1c      	ldr	r2, [pc, #112]	; (800de58 <UART_SetConfig+0xcd4>)
 800dde8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddec:	461a      	mov	r2, r3
 800ddee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddf0:	fbb3 f2f2 	udiv	r2, r3, r2
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	085b      	lsrs	r3, r3, #1
 800ddfa:	441a      	add	r2, r3
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	fbb2 f3f3 	udiv	r3, r2, r3
 800de04:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de08:	2b0f      	cmp	r3, #15
 800de0a:	d909      	bls.n	800de20 <UART_SetConfig+0xc9c>
 800de0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de12:	d205      	bcs.n	800de20 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de16:	b29a      	uxth	r2, r3
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	60da      	str	r2, [r3, #12]
 800de1e:	e002      	b.n	800de26 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800de20:	2301      	movs	r3, #1
 800de22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	2201      	movs	r2, #1
 800de2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	2201      	movs	r2, #1
 800de32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2200      	movs	r2, #0
 800de3a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	2200      	movs	r2, #0
 800de40:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800de42:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800de46:	4618      	mov	r0, r3
 800de48:	3748      	adds	r7, #72	; 0x48
 800de4a:	46bd      	mov	sp, r7
 800de4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800de50:	03d09000 	.word	0x03d09000
 800de54:	003d0900 	.word	0x003d0900
 800de58:	0800fce8 	.word	0x0800fce8

0800de5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de68:	f003 0301 	and.w	r3, r3, #1
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d00a      	beq.n	800de86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	430a      	orrs	r2, r1
 800de84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de8a:	f003 0302 	and.w	r3, r3, #2
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00a      	beq.n	800dea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	430a      	orrs	r2, r1
 800dea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deac:	f003 0304 	and.w	r3, r3, #4
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00a      	beq.n	800deca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	430a      	orrs	r2, r1
 800dec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dece:	f003 0308 	and.w	r3, r3, #8
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d00a      	beq.n	800deec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	430a      	orrs	r2, r1
 800deea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800def0:	f003 0310 	and.w	r3, r3, #16
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00a      	beq.n	800df0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	430a      	orrs	r2, r1
 800df0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df12:	f003 0320 	and.w	r3, r3, #32
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00a      	beq.n	800df30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	430a      	orrs	r2, r1
 800df2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d01a      	beq.n	800df72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	430a      	orrs	r2, r1
 800df50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df5a:	d10a      	bne.n	800df72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	430a      	orrs	r2, r1
 800df70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00a      	beq.n	800df94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	430a      	orrs	r2, r1
 800df92:	605a      	str	r2, [r3, #4]
  }
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af02      	add	r7, sp, #8
 800dfa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dfb0:	f7f7 f88c 	bl	80050cc <HAL_GetTick>
 800dfb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f003 0308 	and.w	r3, r3, #8
 800dfc0:	2b08      	cmp	r3, #8
 800dfc2:	d10e      	bne.n	800dfe2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dfc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 f82f 	bl	800e036 <UART_WaitOnFlagUntilTimeout>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d001      	beq.n	800dfe2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	e025      	b.n	800e02e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f003 0304 	and.w	r3, r3, #4
 800dfec:	2b04      	cmp	r3, #4
 800dfee:	d10e      	bne.n	800e00e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f819 	bl	800e036 <UART_WaitOnFlagUntilTimeout>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d001      	beq.n	800e00e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e00a:	2303      	movs	r3, #3
 800e00c:	e00f      	b.n	800e02e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2220      	movs	r2, #32
 800e012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2220      	movs	r2, #32
 800e01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b09c      	sub	sp, #112	; 0x70
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	60f8      	str	r0, [r7, #12]
 800e03e:	60b9      	str	r1, [r7, #8]
 800e040:	603b      	str	r3, [r7, #0]
 800e042:	4613      	mov	r3, r2
 800e044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e046:	e0a9      	b.n	800e19c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e04e:	f000 80a5 	beq.w	800e19c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e052:	f7f7 f83b 	bl	80050cc <HAL_GetTick>
 800e056:	4602      	mov	r2, r0
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	1ad3      	subs	r3, r2, r3
 800e05c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e05e:	429a      	cmp	r2, r3
 800e060:	d302      	bcc.n	800e068 <UART_WaitOnFlagUntilTimeout+0x32>
 800e062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e064:	2b00      	cmp	r3, #0
 800e066:	d140      	bne.n	800e0ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e070:	e853 3f00 	ldrex	r3, [r3]
 800e074:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e078:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e07c:	667b      	str	r3, [r7, #100]	; 0x64
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	461a      	mov	r2, r3
 800e084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e086:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e088:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e08a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e08c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e08e:	e841 2300 	strex	r3, r2, [r1]
 800e092:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e096:	2b00      	cmp	r3, #0
 800e098:	d1e6      	bne.n	800e068 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	3308      	adds	r3, #8
 800e0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a4:	e853 3f00 	ldrex	r3, [r3]
 800e0a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ac:	f023 0301 	bic.w	r3, r3, #1
 800e0b0:	663b      	str	r3, [r7, #96]	; 0x60
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	3308      	adds	r3, #8
 800e0b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e0ba:	64ba      	str	r2, [r7, #72]	; 0x48
 800e0bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0c2:	e841 2300 	strex	r3, r2, [r1]
 800e0c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d1e5      	bne.n	800e09a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2220      	movs	r2, #32
 800e0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2220      	movs	r2, #32
 800e0da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	e069      	b.n	800e1be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f003 0304 	and.w	r3, r3, #4
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d051      	beq.n	800e19c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	69db      	ldr	r3, [r3, #28]
 800e0fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e106:	d149      	bne.n	800e19c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e110:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	e853 3f00 	ldrex	r3, [r3]
 800e11e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e126:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	461a      	mov	r2, r3
 800e12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e130:	637b      	str	r3, [r7, #52]	; 0x34
 800e132:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e138:	e841 2300 	strex	r3, r2, [r1]
 800e13c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e140:	2b00      	cmp	r3, #0
 800e142:	d1e6      	bne.n	800e112 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	3308      	adds	r3, #8
 800e14a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	e853 3f00 	ldrex	r3, [r3]
 800e152:	613b      	str	r3, [r7, #16]
   return(result);
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	f023 0301 	bic.w	r3, r3, #1
 800e15a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	3308      	adds	r3, #8
 800e162:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e164:	623a      	str	r2, [r7, #32]
 800e166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e168:	69f9      	ldr	r1, [r7, #28]
 800e16a:	6a3a      	ldr	r2, [r7, #32]
 800e16c:	e841 2300 	strex	r3, r2, [r1]
 800e170:	61bb      	str	r3, [r7, #24]
   return(result);
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1e5      	bne.n	800e144 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2220      	movs	r2, #32
 800e17c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2220      	movs	r2, #32
 800e184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2220      	movs	r2, #32
 800e18c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2200      	movs	r2, #0
 800e194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e198:	2303      	movs	r3, #3
 800e19a:	e010      	b.n	800e1be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	69da      	ldr	r2, [r3, #28]
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	4013      	ands	r3, r2
 800e1a6:	68ba      	ldr	r2, [r7, #8]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	bf0c      	ite	eq
 800e1ac:	2301      	moveq	r3, #1
 800e1ae:	2300      	movne	r3, #0
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	79fb      	ldrb	r3, [r7, #7]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	f43f af46 	beq.w	800e048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3770      	adds	r7, #112	; 0x70
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
	...

0800e1c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b096      	sub	sp, #88	; 0x58
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	88fa      	ldrh	r2, [r7, #6]
 800e1e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2222      	movs	r2, #34	; 0x22
 800e1f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d02c      	beq.n	800e256 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e200:	4a42      	ldr	r2, [pc, #264]	; (800e30c <UART_Start_Receive_DMA+0x144>)
 800e202:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e208:	4a41      	ldr	r2, [pc, #260]	; (800e310 <UART_Start_Receive_DMA+0x148>)
 800e20a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e210:	4a40      	ldr	r2, [pc, #256]	; (800e314 <UART_Start_Receive_DMA+0x14c>)
 800e212:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e218:	2200      	movs	r2, #0
 800e21a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	3324      	adds	r3, #36	; 0x24
 800e226:	4619      	mov	r1, r3
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e22c:	461a      	mov	r2, r3
 800e22e:	88fb      	ldrh	r3, [r7, #6]
 800e230:	f7f7 fdaa 	bl	8005d88 <HAL_DMA_Start_IT>
 800e234:	4603      	mov	r3, r0
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00d      	beq.n	800e256 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2210      	movs	r2, #16
 800e23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2200      	movs	r2, #0
 800e246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2220      	movs	r2, #32
 800e24e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	e055      	b.n	800e302 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	691b      	ldr	r3, [r3, #16]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d018      	beq.n	800e298 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26e:	e853 3f00 	ldrex	r3, [r3]
 800e272:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e27a:	657b      	str	r3, [r7, #84]	; 0x54
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	461a      	mov	r2, r3
 800e282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e284:	64bb      	str	r3, [r7, #72]	; 0x48
 800e286:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e288:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e28a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e28c:	e841 2300 	strex	r3, r2, [r1]
 800e290:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1e6      	bne.n	800e266 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	3308      	adds	r3, #8
 800e29e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	e853 3f00 	ldrex	r3, [r3]
 800e2a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2aa:	f043 0301 	orr.w	r3, r3, #1
 800e2ae:	653b      	str	r3, [r7, #80]	; 0x50
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	3308      	adds	r3, #8
 800e2b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e2b8:	637a      	str	r2, [r7, #52]	; 0x34
 800e2ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e2be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2c0:	e841 2300 	strex	r3, r2, [r1]
 800e2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1e5      	bne.n	800e298 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3308      	adds	r3, #8
 800e2d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	e853 3f00 	ldrex	r3, [r3]
 800e2da:	613b      	str	r3, [r7, #16]
   return(result);
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	3308      	adds	r3, #8
 800e2ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2ec:	623a      	str	r2, [r7, #32]
 800e2ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f0:	69f9      	ldr	r1, [r7, #28]
 800e2f2:	6a3a      	ldr	r2, [r7, #32]
 800e2f4:	e841 2300 	strex	r3, r2, [r1]
 800e2f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2fa:	69bb      	ldr	r3, [r7, #24]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d1e5      	bne.n	800e2cc <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3758      	adds	r7, #88	; 0x58
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	0800e51b 	.word	0x0800e51b
 800e310:	0800e63d 	.word	0x0800e63d
 800e314:	0800e675 	.word	0x0800e675

0800e318 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e318:	b480      	push	{r7}
 800e31a:	b08f      	sub	sp, #60	; 0x3c
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e326:	6a3b      	ldr	r3, [r7, #32]
 800e328:	e853 3f00 	ldrex	r3, [r3]
 800e32c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e334:	637b      	str	r3, [r7, #52]	; 0x34
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	461a      	mov	r2, r3
 800e33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e33e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e340:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e346:	e841 2300 	strex	r3, r2, [r1]
 800e34a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1e6      	bne.n	800e320 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	3308      	adds	r3, #8
 800e358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	e853 3f00 	ldrex	r3, [r3]
 800e360:	60bb      	str	r3, [r7, #8]
   return(result);
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e368:	633b      	str	r3, [r7, #48]	; 0x30
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3308      	adds	r3, #8
 800e370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e372:	61ba      	str	r2, [r7, #24]
 800e374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e376:	6979      	ldr	r1, [r7, #20]
 800e378:	69ba      	ldr	r2, [r7, #24]
 800e37a:	e841 2300 	strex	r3, r2, [r1]
 800e37e:	613b      	str	r3, [r7, #16]
   return(result);
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1e5      	bne.n	800e352 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2220      	movs	r2, #32
 800e38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e38e:	bf00      	nop
 800e390:	373c      	adds	r7, #60	; 0x3c
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
	...

0800e39c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b095      	sub	sp, #84	; 0x54
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ac:	e853 3f00 	ldrex	r3, [r3]
 800e3b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3c2:	643b      	str	r3, [r7, #64]	; 0x40
 800e3c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e3c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3ca:	e841 2300 	strex	r3, r2, [r1]
 800e3ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d1e6      	bne.n	800e3a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	3308      	adds	r3, #8
 800e3dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	e853 3f00 	ldrex	r3, [r3]
 800e3e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3e6:	69fa      	ldr	r2, [r7, #28]
 800e3e8:	4b1e      	ldr	r3, [pc, #120]	; (800e464 <UART_EndRxTransfer+0xc8>)
 800e3ea:	4013      	ands	r3, r2
 800e3ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	3308      	adds	r3, #8
 800e3f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e3f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3fe:	e841 2300 	strex	r3, r2, [r1]
 800e402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1e5      	bne.n	800e3d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d118      	bne.n	800e444 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	e853 3f00 	ldrex	r3, [r3]
 800e41e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	f023 0310 	bic.w	r3, r3, #16
 800e426:	647b      	str	r3, [r7, #68]	; 0x44
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	461a      	mov	r2, r3
 800e42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e430:	61bb      	str	r3, [r7, #24]
 800e432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e434:	6979      	ldr	r1, [r7, #20]
 800e436:	69ba      	ldr	r2, [r7, #24]
 800e438:	e841 2300 	strex	r3, r2, [r1]
 800e43c:	613b      	str	r3, [r7, #16]
   return(result);
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1e6      	bne.n	800e412 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2220      	movs	r2, #32
 800e448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e458:	bf00      	nop
 800e45a:	3754      	adds	r7, #84	; 0x54
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr
 800e464:	effffffe 	.word	0xeffffffe

0800e468 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b090      	sub	sp, #64	; 0x40
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e474:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	69db      	ldr	r3, [r3, #28]
 800e47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e47e:	d037      	beq.n	800e4f0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e482:	2200      	movs	r2, #0
 800e484:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	3308      	adds	r3, #8
 800e48e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	e853 3f00 	ldrex	r3, [r3]
 800e496:	623b      	str	r3, [r7, #32]
   return(result);
 800e498:	6a3b      	ldr	r3, [r7, #32]
 800e49a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e49e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3308      	adds	r3, #8
 800e4a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4a8:	633a      	str	r2, [r7, #48]	; 0x30
 800e4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4b0:	e841 2300 	strex	r3, r2, [r1]
 800e4b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1e5      	bne.n	800e488 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	e853 3f00 	ldrex	r3, [r3]
 800e4c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4d0:	637b      	str	r3, [r7, #52]	; 0x34
 800e4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4da:	61fb      	str	r3, [r7, #28]
 800e4dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4de:	69b9      	ldr	r1, [r7, #24]
 800e4e0:	69fa      	ldr	r2, [r7, #28]
 800e4e2:	e841 2300 	strex	r3, r2, [r1]
 800e4e6:	617b      	str	r3, [r7, #20]
   return(result);
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1e6      	bne.n	800e4bc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4ee:	e002      	b.n	800e4f6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e4f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e4f2:	f7f4 fe83 	bl	80031fc <HAL_UART_TxCpltCallback>
}
 800e4f6:	bf00      	nop
 800e4f8:	3740      	adds	r7, #64	; 0x40
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b084      	sub	sp, #16
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e50a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7fe fe19 	bl	800d144 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e512:	bf00      	nop
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b09c      	sub	sp, #112	; 0x70
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e526:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	69db      	ldr	r3, [r3, #28]
 800e52c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e530:	d071      	beq.n	800e616 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e534:	2200      	movs	r2, #0
 800e536:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e542:	e853 3f00 	ldrex	r3, [r3]
 800e546:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e54a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e54e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	461a      	mov	r2, r3
 800e556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e558:	65bb      	str	r3, [r7, #88]	; 0x58
 800e55a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e55e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e560:	e841 2300 	strex	r3, r2, [r1]
 800e564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1e6      	bne.n	800e53a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	3308      	adds	r3, #8
 800e572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e576:	e853 3f00 	ldrex	r3, [r3]
 800e57a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57e:	f023 0301 	bic.w	r3, r3, #1
 800e582:	667b      	str	r3, [r7, #100]	; 0x64
 800e584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3308      	adds	r3, #8
 800e58a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e58c:	647a      	str	r2, [r7, #68]	; 0x44
 800e58e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e594:	e841 2300 	strex	r3, r2, [r1]
 800e598:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1e5      	bne.n	800e56c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3308      	adds	r3, #8
 800e5a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	e853 3f00 	ldrex	r3, [r3]
 800e5ae:	623b      	str	r3, [r7, #32]
   return(result);
 800e5b0:	6a3b      	ldr	r3, [r7, #32]
 800e5b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5b6:	663b      	str	r3, [r7, #96]	; 0x60
 800e5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	3308      	adds	r3, #8
 800e5be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e5c0:	633a      	str	r2, [r7, #48]	; 0x30
 800e5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5c8:	e841 2300 	strex	r3, r2, [r1]
 800e5cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1e5      	bne.n	800e5a0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e5d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5d6:	2220      	movs	r2, #32
 800e5d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d118      	bne.n	800e616 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	e853 3f00 	ldrex	r3, [r3]
 800e5f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f023 0310 	bic.w	r3, r3, #16
 800e5f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	461a      	mov	r2, r3
 800e600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e602:	61fb      	str	r3, [r7, #28]
 800e604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e606:	69b9      	ldr	r1, [r7, #24]
 800e608:	69fa      	ldr	r2, [r7, #28]
 800e60a:	e841 2300 	strex	r3, r2, [r1]
 800e60e:	617b      	str	r3, [r7, #20]
   return(result);
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1e6      	bne.n	800e5e4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d107      	bne.n	800e62e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e61e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e624:	4619      	mov	r1, r3
 800e626:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e628:	f7fe fda0 	bl	800d16c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e62c:	e002      	b.n	800e634 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e62e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e630:	f7f4 fdf6 	bl	8003220 <HAL_UART_RxCpltCallback>
}
 800e634:	bf00      	nop
 800e636:	3770      	adds	r7, #112	; 0x70
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e648:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d109      	bne.n	800e666 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e658:	085b      	lsrs	r3, r3, #1
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	4619      	mov	r1, r3
 800e65e:	68f8      	ldr	r0, [r7, #12]
 800e660:	f7fe fd84 	bl	800d16c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e664:	e002      	b.n	800e66c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e666:	68f8      	ldr	r0, [r7, #12]
 800e668:	f7fe fd76 	bl	800d158 <HAL_UART_RxHalfCpltCallback>
}
 800e66c:	bf00      	nop
 800e66e:	3710      	adds	r7, #16
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b086      	sub	sp, #24
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e680:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e688:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e690:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e69c:	2b80      	cmp	r3, #128	; 0x80
 800e69e:	d109      	bne.n	800e6b4 <UART_DMAError+0x40>
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	2b21      	cmp	r3, #33	; 0x21
 800e6a4:	d106      	bne.n	800e6b4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e6ae:	6978      	ldr	r0, [r7, #20]
 800e6b0:	f7ff fe32 	bl	800e318 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6be:	2b40      	cmp	r3, #64	; 0x40
 800e6c0:	d109      	bne.n	800e6d6 <UART_DMAError+0x62>
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2b22      	cmp	r3, #34	; 0x22
 800e6c6:	d106      	bne.n	800e6d6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e6d0:	6978      	ldr	r0, [r7, #20]
 800e6d2:	f7ff fe63 	bl	800e39c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6dc:	f043 0210 	orr.w	r2, r3, #16
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6e6:	6978      	ldr	r0, [r7, #20]
 800e6e8:	f7f4 fd50 	bl	800318c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6ec:	bf00      	nop
 800e6ee:	3718      	adds	r7, #24
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2200      	movs	r2, #0
 800e706:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f7f4 fd3a 	bl	800318c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e718:	bf00      	nop
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b088      	sub	sp, #32
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	e853 3f00 	ldrex	r3, [r3]
 800e734:	60bb      	str	r3, [r7, #8]
   return(result);
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e73c:	61fb      	str	r3, [r7, #28]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	461a      	mov	r2, r3
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	61bb      	str	r3, [r7, #24]
 800e748:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74a:	6979      	ldr	r1, [r7, #20]
 800e74c:	69ba      	ldr	r2, [r7, #24]
 800e74e:	e841 2300 	strex	r3, r2, [r1]
 800e752:	613b      	str	r3, [r7, #16]
   return(result);
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d1e6      	bne.n	800e728 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2220      	movs	r2, #32
 800e75e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7f4 fd47 	bl	80031fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e76e:	bf00      	nop
 800e770:	3720      	adds	r7, #32
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e776:	b480      	push	{r7}
 800e778:	b083      	sub	sp, #12
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e77e:	bf00      	nop
 800e780:	370c      	adds	r7, #12
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr

0800e78a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e78a:	b480      	push	{r7}
 800e78c:	b083      	sub	sp, #12
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e792:	bf00      	nop
 800e794:	370c      	adds	r7, #12
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b083      	sub	sp, #12
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e7a6:	bf00      	nop
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e7b2:	b480      	push	{r7}
 800e7b4:	b085      	sub	sp, #20
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d101      	bne.n	800e7c8 <HAL_UARTEx_DisableFifoMode+0x16>
 800e7c4:	2302      	movs	r3, #2
 800e7c6:	e027      	b.n	800e818 <HAL_UARTEx_DisableFifoMode+0x66>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2224      	movs	r2, #36	; 0x24
 800e7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f022 0201 	bic.w	r2, r2, #1
 800e7ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e7f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2220      	movs	r2, #32
 800e80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2200      	movs	r2, #0
 800e812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e834:	2b01      	cmp	r3, #1
 800e836:	d101      	bne.n	800e83c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e838:	2302      	movs	r3, #2
 800e83a:	e02d      	b.n	800e898 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2201      	movs	r2, #1
 800e840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2224      	movs	r2, #36	; 0x24
 800e848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f022 0201 	bic.w	r2, r2, #1
 800e862:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	430a      	orrs	r2, r1
 800e876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 f84f 	bl	800e91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2220      	movs	r2, #32
 800e88a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d101      	bne.n	800e8b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e8b4:	2302      	movs	r3, #2
 800e8b6:	e02d      	b.n	800e914 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2224      	movs	r2, #36	; 0x24
 800e8c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f022 0201 	bic.w	r2, r2, #1
 800e8de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	683a      	ldr	r2, [r7, #0]
 800e8f0:	430a      	orrs	r2, r1
 800e8f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 f811 	bl	800e91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2220      	movs	r2, #32
 800e906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2200      	movs	r2, #0
 800e90e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	3710      	adds	r7, #16
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d108      	bne.n	800e93e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e93c:	e031      	b.n	800e9a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e93e:	2310      	movs	r3, #16
 800e940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e942:	2310      	movs	r3, #16
 800e944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	0e5b      	lsrs	r3, r3, #25
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	f003 0307 	and.w	r3, r3, #7
 800e954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	0f5b      	lsrs	r3, r3, #29
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	f003 0307 	and.w	r3, r3, #7
 800e964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e966:	7bbb      	ldrb	r3, [r7, #14]
 800e968:	7b3a      	ldrb	r2, [r7, #12]
 800e96a:	4911      	ldr	r1, [pc, #68]	; (800e9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800e96c:	5c8a      	ldrb	r2, [r1, r2]
 800e96e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e972:	7b3a      	ldrb	r2, [r7, #12]
 800e974:	490f      	ldr	r1, [pc, #60]	; (800e9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800e976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e978:	fb93 f3f2 	sdiv	r3, r3, r2
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e984:	7bfb      	ldrb	r3, [r7, #15]
 800e986:	7b7a      	ldrb	r2, [r7, #13]
 800e988:	4909      	ldr	r1, [pc, #36]	; (800e9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800e98a:	5c8a      	ldrb	r2, [r1, r2]
 800e98c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e990:	7b7a      	ldrb	r2, [r7, #13]
 800e992:	4908      	ldr	r1, [pc, #32]	; (800e9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800e994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e996:	fb93 f3f2 	sdiv	r3, r3, r2
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e9a2:	bf00      	nop
 800e9a4:	3714      	adds	r7, #20
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop
 800e9b0:	0800fd00 	.word	0x0800fd00
 800e9b4:	0800fd08 	.word	0x0800fd08

0800e9b8 <__cxa_pure_virtual>:
 800e9b8:	b508      	push	{r3, lr}
 800e9ba:	f000 f80d 	bl	800e9d8 <_ZSt9terminatev>

0800e9be <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e9be:	b508      	push	{r3, lr}
 800e9c0:	4780      	blx	r0
 800e9c2:	f000 fe53 	bl	800f66c <abort>
	...

0800e9c8 <_ZSt13get_terminatev>:
 800e9c8:	4b02      	ldr	r3, [pc, #8]	; (800e9d4 <_ZSt13get_terminatev+0xc>)
 800e9ca:	6818      	ldr	r0, [r3, #0]
 800e9cc:	f3bf 8f5b 	dmb	ish
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	240001d8 	.word	0x240001d8

0800e9d8 <_ZSt9terminatev>:
 800e9d8:	b508      	push	{r3, lr}
 800e9da:	f7ff fff5 	bl	800e9c8 <_ZSt13get_terminatev>
 800e9de:	f7ff ffee 	bl	800e9be <_ZN10__cxxabiv111__terminateEPFvvE>
 800e9e2:	0000      	movs	r0, r0
 800e9e4:	0000      	movs	r0, r0
	...

0800e9e8 <cos>:
 800e9e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9ea:	eeb0 7b40 	vmov.f64	d7, d0
 800e9ee:	ee17 3a90 	vmov	r3, s15
 800e9f2:	4a21      	ldr	r2, [pc, #132]	; (800ea78 <cos+0x90>)
 800e9f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	dc06      	bgt.n	800ea0a <cos+0x22>
 800e9fc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800ea70 <cos+0x88>
 800ea00:	b005      	add	sp, #20
 800ea02:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea06:	f000 b9cb 	b.w	800eda0 <__kernel_cos>
 800ea0a:	4a1c      	ldr	r2, [pc, #112]	; (800ea7c <cos+0x94>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	dd04      	ble.n	800ea1a <cos+0x32>
 800ea10:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ea14:	b005      	add	sp, #20
 800ea16:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea1a:	4668      	mov	r0, sp
 800ea1c:	f000 f87c 	bl	800eb18 <__ieee754_rem_pio2>
 800ea20:	f000 0003 	and.w	r0, r0, #3
 800ea24:	2801      	cmp	r0, #1
 800ea26:	d009      	beq.n	800ea3c <cos+0x54>
 800ea28:	2802      	cmp	r0, #2
 800ea2a:	d010      	beq.n	800ea4e <cos+0x66>
 800ea2c:	b9b0      	cbnz	r0, 800ea5c <cos+0x74>
 800ea2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea32:	ed9d 0b00 	vldr	d0, [sp]
 800ea36:	f000 f9b3 	bl	800eda0 <__kernel_cos>
 800ea3a:	e7eb      	b.n	800ea14 <cos+0x2c>
 800ea3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea40:	ed9d 0b00 	vldr	d0, [sp]
 800ea44:	f000 fcb0 	bl	800f3a8 <__kernel_sin>
 800ea48:	eeb1 0b40 	vneg.f64	d0, d0
 800ea4c:	e7e2      	b.n	800ea14 <cos+0x2c>
 800ea4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea52:	ed9d 0b00 	vldr	d0, [sp]
 800ea56:	f000 f9a3 	bl	800eda0 <__kernel_cos>
 800ea5a:	e7f5      	b.n	800ea48 <cos+0x60>
 800ea5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea60:	ed9d 0b00 	vldr	d0, [sp]
 800ea64:	2001      	movs	r0, #1
 800ea66:	f000 fc9f 	bl	800f3a8 <__kernel_sin>
 800ea6a:	e7d3      	b.n	800ea14 <cos+0x2c>
 800ea6c:	f3af 8000 	nop.w
	...
 800ea78:	3fe921fb 	.word	0x3fe921fb
 800ea7c:	7fefffff 	.word	0x7fefffff

0800ea80 <sin>:
 800ea80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea82:	eeb0 7b40 	vmov.f64	d7, d0
 800ea86:	ee17 3a90 	vmov	r3, s15
 800ea8a:	4a21      	ldr	r2, [pc, #132]	; (800eb10 <sin+0x90>)
 800ea8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea90:	4293      	cmp	r3, r2
 800ea92:	dc07      	bgt.n	800eaa4 <sin+0x24>
 800ea94:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800eb08 <sin+0x88>
 800ea98:	2000      	movs	r0, #0
 800ea9a:	b005      	add	sp, #20
 800ea9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaa0:	f000 bc82 	b.w	800f3a8 <__kernel_sin>
 800eaa4:	4a1b      	ldr	r2, [pc, #108]	; (800eb14 <sin+0x94>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	dd04      	ble.n	800eab4 <sin+0x34>
 800eaaa:	ee30 0b40 	vsub.f64	d0, d0, d0
 800eaae:	b005      	add	sp, #20
 800eab0:	f85d fb04 	ldr.w	pc, [sp], #4
 800eab4:	4668      	mov	r0, sp
 800eab6:	f000 f82f 	bl	800eb18 <__ieee754_rem_pio2>
 800eaba:	f000 0003 	and.w	r0, r0, #3
 800eabe:	2801      	cmp	r0, #1
 800eac0:	d00a      	beq.n	800ead8 <sin+0x58>
 800eac2:	2802      	cmp	r0, #2
 800eac4:	d00f      	beq.n	800eae6 <sin+0x66>
 800eac6:	b9c0      	cbnz	r0, 800eafa <sin+0x7a>
 800eac8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eacc:	ed9d 0b00 	vldr	d0, [sp]
 800ead0:	2001      	movs	r0, #1
 800ead2:	f000 fc69 	bl	800f3a8 <__kernel_sin>
 800ead6:	e7ea      	b.n	800eaae <sin+0x2e>
 800ead8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eadc:	ed9d 0b00 	vldr	d0, [sp]
 800eae0:	f000 f95e 	bl	800eda0 <__kernel_cos>
 800eae4:	e7e3      	b.n	800eaae <sin+0x2e>
 800eae6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eaea:	ed9d 0b00 	vldr	d0, [sp]
 800eaee:	2001      	movs	r0, #1
 800eaf0:	f000 fc5a 	bl	800f3a8 <__kernel_sin>
 800eaf4:	eeb1 0b40 	vneg.f64	d0, d0
 800eaf8:	e7d9      	b.n	800eaae <sin+0x2e>
 800eafa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eafe:	ed9d 0b00 	vldr	d0, [sp]
 800eb02:	f000 f94d 	bl	800eda0 <__kernel_cos>
 800eb06:	e7f5      	b.n	800eaf4 <sin+0x74>
	...
 800eb10:	3fe921fb 	.word	0x3fe921fb
 800eb14:	7fefffff 	.word	0x7fefffff

0800eb18 <__ieee754_rem_pio2>:
 800eb18:	b570      	push	{r4, r5, r6, lr}
 800eb1a:	eeb0 7b40 	vmov.f64	d7, d0
 800eb1e:	ee17 5a90 	vmov	r5, s15
 800eb22:	4b99      	ldr	r3, [pc, #612]	; (800ed88 <__ieee754_rem_pio2+0x270>)
 800eb24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eb28:	429e      	cmp	r6, r3
 800eb2a:	b088      	sub	sp, #32
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	dc07      	bgt.n	800eb40 <__ieee754_rem_pio2+0x28>
 800eb30:	2200      	movs	r2, #0
 800eb32:	2300      	movs	r3, #0
 800eb34:	ed84 0b00 	vstr	d0, [r4]
 800eb38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	e01b      	b.n	800eb78 <__ieee754_rem_pio2+0x60>
 800eb40:	4b92      	ldr	r3, [pc, #584]	; (800ed8c <__ieee754_rem_pio2+0x274>)
 800eb42:	429e      	cmp	r6, r3
 800eb44:	dc3b      	bgt.n	800ebbe <__ieee754_rem_pio2+0xa6>
 800eb46:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800eb4a:	2d00      	cmp	r5, #0
 800eb4c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800ed48 <__ieee754_rem_pio2+0x230>
 800eb50:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800eb54:	dd19      	ble.n	800eb8a <__ieee754_rem_pio2+0x72>
 800eb56:	ee30 7b46 	vsub.f64	d7, d0, d6
 800eb5a:	429e      	cmp	r6, r3
 800eb5c:	d00e      	beq.n	800eb7c <__ieee754_rem_pio2+0x64>
 800eb5e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800ed50 <__ieee754_rem_pio2+0x238>
 800eb62:	ee37 5b46 	vsub.f64	d5, d7, d6
 800eb66:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eb6a:	ed84 5b00 	vstr	d5, [r4]
 800eb6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb72:	ed84 7b02 	vstr	d7, [r4, #8]
 800eb76:	2001      	movs	r0, #1
 800eb78:	b008      	add	sp, #32
 800eb7a:	bd70      	pop	{r4, r5, r6, pc}
 800eb7c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800ed58 <__ieee754_rem_pio2+0x240>
 800eb80:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb84:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800ed60 <__ieee754_rem_pio2+0x248>
 800eb88:	e7eb      	b.n	800eb62 <__ieee754_rem_pio2+0x4a>
 800eb8a:	429e      	cmp	r6, r3
 800eb8c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800eb90:	d00e      	beq.n	800ebb0 <__ieee754_rem_pio2+0x98>
 800eb92:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800ed50 <__ieee754_rem_pio2+0x238>
 800eb96:	ee37 5b06 	vadd.f64	d5, d7, d6
 800eb9a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eb9e:	ed84 5b00 	vstr	d5, [r4]
 800eba2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800eba6:	f04f 30ff 	mov.w	r0, #4294967295
 800ebaa:	ed84 7b02 	vstr	d7, [r4, #8]
 800ebae:	e7e3      	b.n	800eb78 <__ieee754_rem_pio2+0x60>
 800ebb0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ed58 <__ieee754_rem_pio2+0x240>
 800ebb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ebb8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ed60 <__ieee754_rem_pio2+0x248>
 800ebbc:	e7eb      	b.n	800eb96 <__ieee754_rem_pio2+0x7e>
 800ebbe:	4b74      	ldr	r3, [pc, #464]	; (800ed90 <__ieee754_rem_pio2+0x278>)
 800ebc0:	429e      	cmp	r6, r3
 800ebc2:	dc70      	bgt.n	800eca6 <__ieee754_rem_pio2+0x18e>
 800ebc4:	f000 fc48 	bl	800f458 <fabs>
 800ebc8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ebcc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800ed68 <__ieee754_rem_pio2+0x250>
 800ebd0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ebd4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ebd8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ebdc:	ee17 0a90 	vmov	r0, s15
 800ebe0:	eeb1 4b45 	vneg.f64	d4, d5
 800ebe4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800ed48 <__ieee754_rem_pio2+0x230>
 800ebe8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ebec:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800ed50 <__ieee754_rem_pio2+0x238>
 800ebf0:	281f      	cmp	r0, #31
 800ebf2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ebf6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ebfa:	dc08      	bgt.n	800ec0e <__ieee754_rem_pio2+0xf6>
 800ebfc:	4b65      	ldr	r3, [pc, #404]	; (800ed94 <__ieee754_rem_pio2+0x27c>)
 800ebfe:	1e42      	subs	r2, r0, #1
 800ec00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec04:	42b3      	cmp	r3, r6
 800ec06:	d002      	beq.n	800ec0e <__ieee754_rem_pio2+0xf6>
 800ec08:	ed84 6b00 	vstr	d6, [r4]
 800ec0c:	e026      	b.n	800ec5c <__ieee754_rem_pio2+0x144>
 800ec0e:	ee16 3a90 	vmov	r3, s13
 800ec12:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ec16:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ec1a:	2b10      	cmp	r3, #16
 800ec1c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ec20:	ddf2      	ble.n	800ec08 <__ieee754_rem_pio2+0xf0>
 800ec22:	eeb0 6b40 	vmov.f64	d6, d0
 800ec26:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800ed58 <__ieee754_rem_pio2+0x240>
 800ec2a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800ed60 <__ieee754_rem_pio2+0x248>
 800ec2e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ec32:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ec36:	eea4 0b07 	vfma.f64	d0, d4, d7
 800ec3a:	eeb0 7b40 	vmov.f64	d7, d0
 800ec3e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800ec42:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ec46:	ee13 3a90 	vmov	r3, s7
 800ec4a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ec4e:	1ad3      	subs	r3, r2, r3
 800ec50:	2b31      	cmp	r3, #49	; 0x31
 800ec52:	dc17      	bgt.n	800ec84 <__ieee754_rem_pio2+0x16c>
 800ec54:	eeb0 0b46 	vmov.f64	d0, d6
 800ec58:	ed84 3b00 	vstr	d3, [r4]
 800ec5c:	ed94 6b00 	vldr	d6, [r4]
 800ec60:	2d00      	cmp	r5, #0
 800ec62:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ec66:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ec6a:	ed84 0b02 	vstr	d0, [r4, #8]
 800ec6e:	da83      	bge.n	800eb78 <__ieee754_rem_pio2+0x60>
 800ec70:	eeb1 6b46 	vneg.f64	d6, d6
 800ec74:	eeb1 0b40 	vneg.f64	d0, d0
 800ec78:	ed84 6b00 	vstr	d6, [r4]
 800ec7c:	ed84 0b02 	vstr	d0, [r4, #8]
 800ec80:	4240      	negs	r0, r0
 800ec82:	e779      	b.n	800eb78 <__ieee754_rem_pio2+0x60>
 800ec84:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800ed70 <__ieee754_rem_pio2+0x258>
 800ec88:	eeb0 0b46 	vmov.f64	d0, d6
 800ec8c:	eea4 0b03 	vfma.f64	d0, d4, d3
 800ec90:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ec94:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800ed78 <__ieee754_rem_pio2+0x260>
 800ec98:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ec9c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800eca0:	ee30 6b47 	vsub.f64	d6, d0, d7
 800eca4:	e7b0      	b.n	800ec08 <__ieee754_rem_pio2+0xf0>
 800eca6:	4b3c      	ldr	r3, [pc, #240]	; (800ed98 <__ieee754_rem_pio2+0x280>)
 800eca8:	429e      	cmp	r6, r3
 800ecaa:	dd06      	ble.n	800ecba <__ieee754_rem_pio2+0x1a2>
 800ecac:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ecb0:	ed80 7b02 	vstr	d7, [r0, #8]
 800ecb4:	ed80 7b00 	vstr	d7, [r0]
 800ecb8:	e740      	b.n	800eb3c <__ieee754_rem_pio2+0x24>
 800ecba:	1532      	asrs	r2, r6, #20
 800ecbc:	ee10 0a10 	vmov	r0, s0
 800ecc0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ecc4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ecc8:	ec41 0b17 	vmov	d7, r0, r1
 800eccc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ecd0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800ed80 <__ieee754_rem_pio2+0x268>
 800ecd4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ecd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ecdc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ece0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ece4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ece8:	a902      	add	r1, sp, #8
 800ecea:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ecee:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ecf2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ecf6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ecfa:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ecfe:	2603      	movs	r6, #3
 800ed00:	4608      	mov	r0, r1
 800ed02:	ed91 7b04 	vldr	d7, [r1, #16]
 800ed06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0e:	4633      	mov	r3, r6
 800ed10:	f1a1 0108 	sub.w	r1, r1, #8
 800ed14:	f106 36ff 	add.w	r6, r6, #4294967295
 800ed18:	d0f3      	beq.n	800ed02 <__ieee754_rem_pio2+0x1ea>
 800ed1a:	4920      	ldr	r1, [pc, #128]	; (800ed9c <__ieee754_rem_pio2+0x284>)
 800ed1c:	9101      	str	r1, [sp, #4]
 800ed1e:	2102      	movs	r1, #2
 800ed20:	9100      	str	r1, [sp, #0]
 800ed22:	4621      	mov	r1, r4
 800ed24:	f000 f8a8 	bl	800ee78 <__kernel_rem_pio2>
 800ed28:	2d00      	cmp	r5, #0
 800ed2a:	f6bf af25 	bge.w	800eb78 <__ieee754_rem_pio2+0x60>
 800ed2e:	ed94 7b00 	vldr	d7, [r4]
 800ed32:	eeb1 7b47 	vneg.f64	d7, d7
 800ed36:	ed84 7b00 	vstr	d7, [r4]
 800ed3a:	ed94 7b02 	vldr	d7, [r4, #8]
 800ed3e:	eeb1 7b47 	vneg.f64	d7, d7
 800ed42:	ed84 7b02 	vstr	d7, [r4, #8]
 800ed46:	e79b      	b.n	800ec80 <__ieee754_rem_pio2+0x168>
 800ed48:	54400000 	.word	0x54400000
 800ed4c:	3ff921fb 	.word	0x3ff921fb
 800ed50:	1a626331 	.word	0x1a626331
 800ed54:	3dd0b461 	.word	0x3dd0b461
 800ed58:	1a600000 	.word	0x1a600000
 800ed5c:	3dd0b461 	.word	0x3dd0b461
 800ed60:	2e037073 	.word	0x2e037073
 800ed64:	3ba3198a 	.word	0x3ba3198a
 800ed68:	6dc9c883 	.word	0x6dc9c883
 800ed6c:	3fe45f30 	.word	0x3fe45f30
 800ed70:	2e000000 	.word	0x2e000000
 800ed74:	3ba3198a 	.word	0x3ba3198a
 800ed78:	252049c1 	.word	0x252049c1
 800ed7c:	397b839a 	.word	0x397b839a
 800ed80:	00000000 	.word	0x00000000
 800ed84:	41700000 	.word	0x41700000
 800ed88:	3fe921fb 	.word	0x3fe921fb
 800ed8c:	4002d97b 	.word	0x4002d97b
 800ed90:	413921fb 	.word	0x413921fb
 800ed94:	0800fd10 	.word	0x0800fd10
 800ed98:	7fefffff 	.word	0x7fefffff
 800ed9c:	0800fd90 	.word	0x0800fd90

0800eda0 <__kernel_cos>:
 800eda0:	ee10 1a90 	vmov	r1, s1
 800eda4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800eda8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800edac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800edb0:	da05      	bge.n	800edbe <__kernel_cos+0x1e>
 800edb2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800edb6:	ee17 3a90 	vmov	r3, s15
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d03d      	beq.n	800ee3a <__kernel_cos+0x9a>
 800edbe:	ee20 3b00 	vmul.f64	d3, d0, d0
 800edc2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ee40 <__kernel_cos+0xa0>
 800edc6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ee48 <__kernel_cos+0xa8>
 800edca:	eea3 6b07 	vfma.f64	d6, d3, d7
 800edce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ee50 <__kernel_cos+0xb0>
 800edd2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800edd6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ee58 <__kernel_cos+0xb8>
 800edda:	eea7 6b03 	vfma.f64	d6, d7, d3
 800edde:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ee60 <__kernel_cos+0xc0>
 800ede2:	4b23      	ldr	r3, [pc, #140]	; (800ee70 <__kernel_cos+0xd0>)
 800ede4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ede8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ee68 <__kernel_cos+0xc8>
 800edec:	4299      	cmp	r1, r3
 800edee:	eea7 6b03 	vfma.f64	d6, d7, d3
 800edf2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800edf6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800edfa:	ee23 7b07 	vmul.f64	d7, d3, d7
 800edfe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800ee02:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ee06:	dc04      	bgt.n	800ee12 <__kernel_cos+0x72>
 800ee08:	ee37 6b46 	vsub.f64	d6, d7, d6
 800ee0c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800ee10:	4770      	bx	lr
 800ee12:	4b18      	ldr	r3, [pc, #96]	; (800ee74 <__kernel_cos+0xd4>)
 800ee14:	4299      	cmp	r1, r3
 800ee16:	dc0d      	bgt.n	800ee34 <__kernel_cos+0x94>
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ee1e:	ec43 2b15 	vmov	d5, r2, r3
 800ee22:	ee34 0b45 	vsub.f64	d0, d4, d5
 800ee26:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ee2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee2e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ee32:	4770      	bx	lr
 800ee34:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ee38:	e7f3      	b.n	800ee22 <__kernel_cos+0x82>
 800ee3a:	eeb0 0b44 	vmov.f64	d0, d4
 800ee3e:	4770      	bx	lr
 800ee40:	be8838d4 	.word	0xbe8838d4
 800ee44:	bda8fae9 	.word	0xbda8fae9
 800ee48:	bdb4b1c4 	.word	0xbdb4b1c4
 800ee4c:	3e21ee9e 	.word	0x3e21ee9e
 800ee50:	809c52ad 	.word	0x809c52ad
 800ee54:	be927e4f 	.word	0xbe927e4f
 800ee58:	19cb1590 	.word	0x19cb1590
 800ee5c:	3efa01a0 	.word	0x3efa01a0
 800ee60:	16c15177 	.word	0x16c15177
 800ee64:	bf56c16c 	.word	0xbf56c16c
 800ee68:	5555554c 	.word	0x5555554c
 800ee6c:	3fa55555 	.word	0x3fa55555
 800ee70:	3fd33332 	.word	0x3fd33332
 800ee74:	3fe90000 	.word	0x3fe90000

0800ee78 <__kernel_rem_pio2>:
 800ee78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7c:	ed2d 8b06 	vpush	{d8-d10}
 800ee80:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800ee84:	460f      	mov	r7, r1
 800ee86:	9002      	str	r0, [sp, #8]
 800ee88:	49c5      	ldr	r1, [pc, #788]	; (800f1a0 <__kernel_rem_pio2+0x328>)
 800ee8a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800ee8c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800ee90:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800ee94:	9301      	str	r3, [sp, #4]
 800ee96:	f112 0f14 	cmn.w	r2, #20
 800ee9a:	bfa8      	it	ge
 800ee9c:	2018      	movge	r0, #24
 800ee9e:	f103 31ff 	add.w	r1, r3, #4294967295
 800eea2:	bfb8      	it	lt
 800eea4:	2000      	movlt	r0, #0
 800eea6:	f06f 0417 	mvn.w	r4, #23
 800eeaa:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800f188 <__kernel_rem_pio2+0x310>
 800eeae:	bfa4      	itt	ge
 800eeb0:	f1a2 0a03 	subge.w	sl, r2, #3
 800eeb4:	fb9a f0f0 	sdivge	r0, sl, r0
 800eeb8:	fb00 4404 	mla	r4, r0, r4, r4
 800eebc:	1a46      	subs	r6, r0, r1
 800eebe:	4414      	add	r4, r2
 800eec0:	eb09 0c01 	add.w	ip, r9, r1
 800eec4:	ad1a      	add	r5, sp, #104	; 0x68
 800eec6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800eeca:	2200      	movs	r2, #0
 800eecc:	4562      	cmp	r2, ip
 800eece:	dd10      	ble.n	800eef2 <__kernel_rem_pio2+0x7a>
 800eed0:	9a01      	ldr	r2, [sp, #4]
 800eed2:	ab1a      	add	r3, sp, #104	; 0x68
 800eed4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800eed8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800eedc:	f04f 0c00 	mov.w	ip, #0
 800eee0:	45cc      	cmp	ip, r9
 800eee2:	dc26      	bgt.n	800ef32 <__kernel_rem_pio2+0xba>
 800eee4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800f188 <__kernel_rem_pio2+0x310>
 800eee8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800eeec:	4616      	mov	r6, r2
 800eeee:	2500      	movs	r5, #0
 800eef0:	e015      	b.n	800ef1e <__kernel_rem_pio2+0xa6>
 800eef2:	42d6      	cmn	r6, r2
 800eef4:	d409      	bmi.n	800ef0a <__kernel_rem_pio2+0x92>
 800eef6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800eefa:	ee07 3a90 	vmov	s15, r3
 800eefe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ef02:	eca5 7b02 	vstmia	r5!, {d7}
 800ef06:	3201      	adds	r2, #1
 800ef08:	e7e0      	b.n	800eecc <__kernel_rem_pio2+0x54>
 800ef0a:	eeb0 7b46 	vmov.f64	d7, d6
 800ef0e:	e7f8      	b.n	800ef02 <__kernel_rem_pio2+0x8a>
 800ef10:	ecb8 5b02 	vldmia	r8!, {d5}
 800ef14:	ed96 6b00 	vldr	d6, [r6]
 800ef18:	3501      	adds	r5, #1
 800ef1a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ef1e:	428d      	cmp	r5, r1
 800ef20:	f1a6 0608 	sub.w	r6, r6, #8
 800ef24:	ddf4      	ble.n	800ef10 <__kernel_rem_pio2+0x98>
 800ef26:	ecaa 7b02 	vstmia	sl!, {d7}
 800ef2a:	f10c 0c01 	add.w	ip, ip, #1
 800ef2e:	3208      	adds	r2, #8
 800ef30:	e7d6      	b.n	800eee0 <__kernel_rem_pio2+0x68>
 800ef32:	ab06      	add	r3, sp, #24
 800ef34:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800f190 <__kernel_rem_pio2+0x318>
 800ef38:	ed9f ab97 	vldr	d10, [pc, #604]	; 800f198 <__kernel_rem_pio2+0x320>
 800ef3c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ef40:	9303      	str	r3, [sp, #12]
 800ef42:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800ef46:	464d      	mov	r5, r9
 800ef48:	00eb      	lsls	r3, r5, #3
 800ef4a:	9304      	str	r3, [sp, #16]
 800ef4c:	ab92      	add	r3, sp, #584	; 0x248
 800ef4e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ef52:	f10d 0b18 	add.w	fp, sp, #24
 800ef56:	ab6a      	add	r3, sp, #424	; 0x1a8
 800ef58:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800ef5c:	465e      	mov	r6, fp
 800ef5e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ef62:	4628      	mov	r0, r5
 800ef64:	2800      	cmp	r0, #0
 800ef66:	f1a2 0208 	sub.w	r2, r2, #8
 800ef6a:	dc4c      	bgt.n	800f006 <__kernel_rem_pio2+0x18e>
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	9105      	str	r1, [sp, #20]
 800ef70:	f000 faf2 	bl	800f558 <scalbn>
 800ef74:	eeb0 8b40 	vmov.f64	d8, d0
 800ef78:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800ef7c:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ef80:	f000 fa76 	bl	800f470 <floor>
 800ef84:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800ef88:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ef8c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ef90:	2c00      	cmp	r4, #0
 800ef92:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800ef96:	ee17 8a90 	vmov	r8, s15
 800ef9a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ef9e:	9905      	ldr	r1, [sp, #20]
 800efa0:	dd43      	ble.n	800f02a <__kernel_rem_pio2+0x1b2>
 800efa2:	1e68      	subs	r0, r5, #1
 800efa4:	ab06      	add	r3, sp, #24
 800efa6:	f1c4 0c18 	rsb	ip, r4, #24
 800efaa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800efae:	fa46 f20c 	asr.w	r2, r6, ip
 800efb2:	4490      	add	r8, r2
 800efb4:	fa02 f20c 	lsl.w	r2, r2, ip
 800efb8:	1ab6      	subs	r6, r6, r2
 800efba:	f1c4 0217 	rsb	r2, r4, #23
 800efbe:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800efc2:	4116      	asrs	r6, r2
 800efc4:	2e00      	cmp	r6, #0
 800efc6:	dd3f      	ble.n	800f048 <__kernel_rem_pio2+0x1d0>
 800efc8:	f04f 0c00 	mov.w	ip, #0
 800efcc:	f108 0801 	add.w	r8, r8, #1
 800efd0:	4660      	mov	r0, ip
 800efd2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800efd6:	4565      	cmp	r5, ip
 800efd8:	dc6e      	bgt.n	800f0b8 <__kernel_rem_pio2+0x240>
 800efda:	2c00      	cmp	r4, #0
 800efdc:	dd04      	ble.n	800efe8 <__kernel_rem_pio2+0x170>
 800efde:	2c01      	cmp	r4, #1
 800efe0:	d07f      	beq.n	800f0e2 <__kernel_rem_pio2+0x26a>
 800efe2:	2c02      	cmp	r4, #2
 800efe4:	f000 8087 	beq.w	800f0f6 <__kernel_rem_pio2+0x27e>
 800efe8:	2e02      	cmp	r6, #2
 800efea:	d12d      	bne.n	800f048 <__kernel_rem_pio2+0x1d0>
 800efec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800eff0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800eff4:	b340      	cbz	r0, 800f048 <__kernel_rem_pio2+0x1d0>
 800eff6:	4620      	mov	r0, r4
 800eff8:	9105      	str	r1, [sp, #20]
 800effa:	f000 faad 	bl	800f558 <scalbn>
 800effe:	9905      	ldr	r1, [sp, #20]
 800f000:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f004:	e020      	b.n	800f048 <__kernel_rem_pio2+0x1d0>
 800f006:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f00a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f00e:	3801      	subs	r0, #1
 800f010:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f014:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f018:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f01c:	eca6 0a01 	vstmia	r6!, {s0}
 800f020:	ed92 0b00 	vldr	d0, [r2]
 800f024:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f028:	e79c      	b.n	800ef64 <__kernel_rem_pio2+0xec>
 800f02a:	d105      	bne.n	800f038 <__kernel_rem_pio2+0x1c0>
 800f02c:	1e6a      	subs	r2, r5, #1
 800f02e:	ab06      	add	r3, sp, #24
 800f030:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800f034:	15f6      	asrs	r6, r6, #23
 800f036:	e7c5      	b.n	800efc4 <__kernel_rem_pio2+0x14c>
 800f038:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f03c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f044:	da36      	bge.n	800f0b4 <__kernel_rem_pio2+0x23c>
 800f046:	2600      	movs	r6, #0
 800f048:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f050:	f040 80aa 	bne.w	800f1a8 <__kernel_rem_pio2+0x330>
 800f054:	f105 3bff 	add.w	fp, r5, #4294967295
 800f058:	4658      	mov	r0, fp
 800f05a:	2200      	movs	r2, #0
 800f05c:	4548      	cmp	r0, r9
 800f05e:	da52      	bge.n	800f106 <__kernel_rem_pio2+0x28e>
 800f060:	2a00      	cmp	r2, #0
 800f062:	f000 8081 	beq.w	800f168 <__kernel_rem_pio2+0x2f0>
 800f066:	ab06      	add	r3, sp, #24
 800f068:	3c18      	subs	r4, #24
 800f06a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	f000 8087 	beq.w	800f182 <__kernel_rem_pio2+0x30a>
 800f074:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f078:	4620      	mov	r0, r4
 800f07a:	f000 fa6d 	bl	800f558 <scalbn>
 800f07e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f082:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800f190 <__kernel_rem_pio2+0x318>
 800f086:	a96a      	add	r1, sp, #424	; 0x1a8
 800f088:	f103 0208 	add.w	r2, r3, #8
 800f08c:	1888      	adds	r0, r1, r2
 800f08e:	4659      	mov	r1, fp
 800f090:	2900      	cmp	r1, #0
 800f092:	f280 80b7 	bge.w	800f204 <__kernel_rem_pio2+0x38c>
 800f096:	4659      	mov	r1, fp
 800f098:	2900      	cmp	r1, #0
 800f09a:	f2c0 80d5 	blt.w	800f248 <__kernel_rem_pio2+0x3d0>
 800f09e:	a86a      	add	r0, sp, #424	; 0x1a8
 800f0a0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800f0a4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800f188 <__kernel_rem_pio2+0x310>
 800f0a8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800f1a4 <__kernel_rem_pio2+0x32c>
 800f0ac:	2400      	movs	r4, #0
 800f0ae:	ebab 0001 	sub.w	r0, fp, r1
 800f0b2:	e0be      	b.n	800f232 <__kernel_rem_pio2+0x3ba>
 800f0b4:	2602      	movs	r6, #2
 800f0b6:	e787      	b.n	800efc8 <__kernel_rem_pio2+0x150>
 800f0b8:	f8db 2000 	ldr.w	r2, [fp]
 800f0bc:	b958      	cbnz	r0, 800f0d6 <__kernel_rem_pio2+0x25e>
 800f0be:	b122      	cbz	r2, 800f0ca <__kernel_rem_pio2+0x252>
 800f0c0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800f0c4:	f8cb 2000 	str.w	r2, [fp]
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	f10c 0c01 	add.w	ip, ip, #1
 800f0ce:	f10b 0b04 	add.w	fp, fp, #4
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	e77f      	b.n	800efd6 <__kernel_rem_pio2+0x15e>
 800f0d6:	ebae 0202 	sub.w	r2, lr, r2
 800f0da:	f8cb 2000 	str.w	r2, [fp]
 800f0de:	4602      	mov	r2, r0
 800f0e0:	e7f3      	b.n	800f0ca <__kernel_rem_pio2+0x252>
 800f0e2:	f105 3cff 	add.w	ip, r5, #4294967295
 800f0e6:	ab06      	add	r3, sp, #24
 800f0e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f0ec:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f0f0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800f0f4:	e778      	b.n	800efe8 <__kernel_rem_pio2+0x170>
 800f0f6:	f105 3cff 	add.w	ip, r5, #4294967295
 800f0fa:	ab06      	add	r3, sp, #24
 800f0fc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f100:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800f104:	e7f4      	b.n	800f0f0 <__kernel_rem_pio2+0x278>
 800f106:	ab06      	add	r3, sp, #24
 800f108:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f10c:	3801      	subs	r0, #1
 800f10e:	431a      	orrs	r2, r3
 800f110:	e7a4      	b.n	800f05c <__kernel_rem_pio2+0x1e4>
 800f112:	f10c 0c01 	add.w	ip, ip, #1
 800f116:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800f11a:	2800      	cmp	r0, #0
 800f11c:	d0f9      	beq.n	800f112 <__kernel_rem_pio2+0x29a>
 800f11e:	9b04      	ldr	r3, [sp, #16]
 800f120:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f124:	eb0d 0203 	add.w	r2, sp, r3
 800f128:	9b01      	ldr	r3, [sp, #4]
 800f12a:	18e8      	adds	r0, r5, r3
 800f12c:	ab1a      	add	r3, sp, #104	; 0x68
 800f12e:	1c6e      	adds	r6, r5, #1
 800f130:	3a98      	subs	r2, #152	; 0x98
 800f132:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f136:	4465      	add	r5, ip
 800f138:	42b5      	cmp	r5, r6
 800f13a:	f6ff af05 	blt.w	800ef48 <__kernel_rem_pio2+0xd0>
 800f13e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800f142:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f146:	ee07 3a90 	vmov	s15, r3
 800f14a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f14e:	f04f 0c00 	mov.w	ip, #0
 800f152:	eca0 7b02 	vstmia	r0!, {d7}
 800f156:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f188 <__kernel_rem_pio2+0x310>
 800f15a:	4680      	mov	r8, r0
 800f15c:	458c      	cmp	ip, r1
 800f15e:	dd07      	ble.n	800f170 <__kernel_rem_pio2+0x2f8>
 800f160:	eca2 7b02 	vstmia	r2!, {d7}
 800f164:	3601      	adds	r6, #1
 800f166:	e7e7      	b.n	800f138 <__kernel_rem_pio2+0x2c0>
 800f168:	9a03      	ldr	r2, [sp, #12]
 800f16a:	f04f 0c01 	mov.w	ip, #1
 800f16e:	e7d2      	b.n	800f116 <__kernel_rem_pio2+0x29e>
 800f170:	ecbe 5b02 	vldmia	lr!, {d5}
 800f174:	ed38 6b02 	vldmdb	r8!, {d6}
 800f178:	f10c 0c01 	add.w	ip, ip, #1
 800f17c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f180:	e7ec      	b.n	800f15c <__kernel_rem_pio2+0x2e4>
 800f182:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f186:	e76e      	b.n	800f066 <__kernel_rem_pio2+0x1ee>
	...
 800f194:	3e700000 	.word	0x3e700000
 800f198:	00000000 	.word	0x00000000
 800f19c:	41700000 	.word	0x41700000
 800f1a0:	0800fed8 	.word	0x0800fed8
 800f1a4:	0800fe98 	.word	0x0800fe98
 800f1a8:	4260      	negs	r0, r4
 800f1aa:	eeb0 0b48 	vmov.f64	d0, d8
 800f1ae:	f000 f9d3 	bl	800f558 <scalbn>
 800f1b2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f390 <__kernel_rem_pio2+0x518>
 800f1b6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1be:	db18      	blt.n	800f1f2 <__kernel_rem_pio2+0x37a>
 800f1c0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800f398 <__kernel_rem_pio2+0x520>
 800f1c4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f1c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f1cc:	aa06      	add	r2, sp, #24
 800f1ce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f1d2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f1d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f1da:	f105 0b01 	add.w	fp, r5, #1
 800f1de:	ee10 3a10 	vmov	r3, s0
 800f1e2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f1e6:	ee17 3a10 	vmov	r3, s14
 800f1ea:	3418      	adds	r4, #24
 800f1ec:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800f1f0:	e740      	b.n	800f074 <__kernel_rem_pio2+0x1fc>
 800f1f2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f1f6:	aa06      	add	r2, sp, #24
 800f1f8:	ee10 3a10 	vmov	r3, s0
 800f1fc:	46ab      	mov	fp, r5
 800f1fe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f202:	e737      	b.n	800f074 <__kernel_rem_pio2+0x1fc>
 800f204:	ac06      	add	r4, sp, #24
 800f206:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800f20a:	9401      	str	r4, [sp, #4]
 800f20c:	ee07 4a90 	vmov	s15, r4
 800f210:	3901      	subs	r1, #1
 800f212:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f216:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f21a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f21e:	ed20 7b02 	vstmdb	r0!, {d7}
 800f222:	e735      	b.n	800f090 <__kernel_rem_pio2+0x218>
 800f224:	ecbc 5b02 	vldmia	ip!, {d5}
 800f228:	ecb5 6b02 	vldmia	r5!, {d6}
 800f22c:	3401      	adds	r4, #1
 800f22e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f232:	454c      	cmp	r4, r9
 800f234:	dc01      	bgt.n	800f23a <__kernel_rem_pio2+0x3c2>
 800f236:	4284      	cmp	r4, r0
 800f238:	ddf4      	ble.n	800f224 <__kernel_rem_pio2+0x3ac>
 800f23a:	ac42      	add	r4, sp, #264	; 0x108
 800f23c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800f240:	ed80 7b00 	vstr	d7, [r0]
 800f244:	3901      	subs	r1, #1
 800f246:	e727      	b.n	800f098 <__kernel_rem_pio2+0x220>
 800f248:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800f24a:	2902      	cmp	r1, #2
 800f24c:	dc0a      	bgt.n	800f264 <__kernel_rem_pio2+0x3ec>
 800f24e:	2900      	cmp	r1, #0
 800f250:	dc2c      	bgt.n	800f2ac <__kernel_rem_pio2+0x434>
 800f252:	d045      	beq.n	800f2e0 <__kernel_rem_pio2+0x468>
 800f254:	f008 0007 	and.w	r0, r8, #7
 800f258:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800f25c:	ecbd 8b06 	vpop	{d8-d10}
 800f260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f264:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800f266:	2a03      	cmp	r2, #3
 800f268:	d1f4      	bne.n	800f254 <__kernel_rem_pio2+0x3dc>
 800f26a:	aa42      	add	r2, sp, #264	; 0x108
 800f26c:	4413      	add	r3, r2
 800f26e:	461a      	mov	r2, r3
 800f270:	4619      	mov	r1, r3
 800f272:	4658      	mov	r0, fp
 800f274:	2800      	cmp	r0, #0
 800f276:	f1a1 0108 	sub.w	r1, r1, #8
 800f27a:	dc54      	bgt.n	800f326 <__kernel_rem_pio2+0x4ae>
 800f27c:	4659      	mov	r1, fp
 800f27e:	2901      	cmp	r1, #1
 800f280:	f1a2 0208 	sub.w	r2, r2, #8
 800f284:	dc5f      	bgt.n	800f346 <__kernel_rem_pio2+0x4ce>
 800f286:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800f3a0 <__kernel_rem_pio2+0x528>
 800f28a:	3308      	adds	r3, #8
 800f28c:	f1bb 0f01 	cmp.w	fp, #1
 800f290:	dc69      	bgt.n	800f366 <__kernel_rem_pio2+0x4ee>
 800f292:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800f296:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800f29a:	2e00      	cmp	r6, #0
 800f29c:	d16a      	bne.n	800f374 <__kernel_rem_pio2+0x4fc>
 800f29e:	ed87 5b00 	vstr	d5, [r7]
 800f2a2:	ed87 6b02 	vstr	d6, [r7, #8]
 800f2a6:	ed87 7b04 	vstr	d7, [r7, #16]
 800f2aa:	e7d3      	b.n	800f254 <__kernel_rem_pio2+0x3dc>
 800f2ac:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f3a0 <__kernel_rem_pio2+0x528>
 800f2b0:	ab42      	add	r3, sp, #264	; 0x108
 800f2b2:	441a      	add	r2, r3
 800f2b4:	465b      	mov	r3, fp
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	da26      	bge.n	800f308 <__kernel_rem_pio2+0x490>
 800f2ba:	b35e      	cbz	r6, 800f314 <__kernel_rem_pio2+0x49c>
 800f2bc:	eeb1 7b46 	vneg.f64	d7, d6
 800f2c0:	ed87 7b00 	vstr	d7, [r7]
 800f2c4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800f2c8:	aa44      	add	r2, sp, #272	; 0x110
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f2d0:	459b      	cmp	fp, r3
 800f2d2:	da22      	bge.n	800f31a <__kernel_rem_pio2+0x4a2>
 800f2d4:	b10e      	cbz	r6, 800f2da <__kernel_rem_pio2+0x462>
 800f2d6:	eeb1 7b47 	vneg.f64	d7, d7
 800f2da:	ed87 7b02 	vstr	d7, [r7, #8]
 800f2de:	e7b9      	b.n	800f254 <__kernel_rem_pio2+0x3dc>
 800f2e0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800f3a0 <__kernel_rem_pio2+0x528>
 800f2e4:	ab42      	add	r3, sp, #264	; 0x108
 800f2e6:	441a      	add	r2, r3
 800f2e8:	f1bb 0f00 	cmp.w	fp, #0
 800f2ec:	da05      	bge.n	800f2fa <__kernel_rem_pio2+0x482>
 800f2ee:	b10e      	cbz	r6, 800f2f4 <__kernel_rem_pio2+0x47c>
 800f2f0:	eeb1 7b47 	vneg.f64	d7, d7
 800f2f4:	ed87 7b00 	vstr	d7, [r7]
 800f2f8:	e7ac      	b.n	800f254 <__kernel_rem_pio2+0x3dc>
 800f2fa:	ed32 6b02 	vldmdb	r2!, {d6}
 800f2fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f302:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f306:	e7ef      	b.n	800f2e8 <__kernel_rem_pio2+0x470>
 800f308:	ed32 7b02 	vldmdb	r2!, {d7}
 800f30c:	3b01      	subs	r3, #1
 800f30e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f312:	e7d0      	b.n	800f2b6 <__kernel_rem_pio2+0x43e>
 800f314:	eeb0 7b46 	vmov.f64	d7, d6
 800f318:	e7d2      	b.n	800f2c0 <__kernel_rem_pio2+0x448>
 800f31a:	ecb2 6b02 	vldmia	r2!, {d6}
 800f31e:	3301      	adds	r3, #1
 800f320:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f324:	e7d4      	b.n	800f2d0 <__kernel_rem_pio2+0x458>
 800f326:	ed91 7b00 	vldr	d7, [r1]
 800f32a:	ed91 5b02 	vldr	d5, [r1, #8]
 800f32e:	3801      	subs	r0, #1
 800f330:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f334:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f338:	ed81 6b00 	vstr	d6, [r1]
 800f33c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f340:	ed81 7b02 	vstr	d7, [r1, #8]
 800f344:	e796      	b.n	800f274 <__kernel_rem_pio2+0x3fc>
 800f346:	ed92 7b00 	vldr	d7, [r2]
 800f34a:	ed92 5b02 	vldr	d5, [r2, #8]
 800f34e:	3901      	subs	r1, #1
 800f350:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f354:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f358:	ed82 6b00 	vstr	d6, [r2]
 800f35c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f360:	ed82 7b02 	vstr	d7, [r2, #8]
 800f364:	e78b      	b.n	800f27e <__kernel_rem_pio2+0x406>
 800f366:	ed33 6b02 	vldmdb	r3!, {d6}
 800f36a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f36e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f372:	e78b      	b.n	800f28c <__kernel_rem_pio2+0x414>
 800f374:	eeb1 5b45 	vneg.f64	d5, d5
 800f378:	eeb1 6b46 	vneg.f64	d6, d6
 800f37c:	ed87 5b00 	vstr	d5, [r7]
 800f380:	eeb1 7b47 	vneg.f64	d7, d7
 800f384:	ed87 6b02 	vstr	d6, [r7, #8]
 800f388:	e78d      	b.n	800f2a6 <__kernel_rem_pio2+0x42e>
 800f38a:	bf00      	nop
 800f38c:	f3af 8000 	nop.w
 800f390:	00000000 	.word	0x00000000
 800f394:	41700000 	.word	0x41700000
 800f398:	00000000 	.word	0x00000000
 800f39c:	3e700000 	.word	0x3e700000
	...

0800f3a8 <__kernel_sin>:
 800f3a8:	ee10 3a90 	vmov	r3, s1
 800f3ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3b0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f3b4:	da04      	bge.n	800f3c0 <__kernel_sin+0x18>
 800f3b6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f3ba:	ee17 3a90 	vmov	r3, s15
 800f3be:	b35b      	cbz	r3, 800f418 <__kernel_sin+0x70>
 800f3c0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f3c4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f3c8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f420 <__kernel_sin+0x78>
 800f3cc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f428 <__kernel_sin+0x80>
 800f3d0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f3d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f430 <__kernel_sin+0x88>
 800f3d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f3dc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f438 <__kernel_sin+0x90>
 800f3e0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f3e4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f440 <__kernel_sin+0x98>
 800f3e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f3ec:	b930      	cbnz	r0, 800f3fc <__kernel_sin+0x54>
 800f3ee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f448 <__kernel_sin+0xa0>
 800f3f2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f3f6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f3fa:	4770      	bx	lr
 800f3fc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f400:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f404:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f408:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f40c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f450 <__kernel_sin+0xa8>
 800f410:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f414:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop
 800f41c:	f3af 8000 	nop.w
 800f420:	5acfd57c 	.word	0x5acfd57c
 800f424:	3de5d93a 	.word	0x3de5d93a
 800f428:	8a2b9ceb 	.word	0x8a2b9ceb
 800f42c:	be5ae5e6 	.word	0xbe5ae5e6
 800f430:	57b1fe7d 	.word	0x57b1fe7d
 800f434:	3ec71de3 	.word	0x3ec71de3
 800f438:	19c161d5 	.word	0x19c161d5
 800f43c:	bf2a01a0 	.word	0xbf2a01a0
 800f440:	1110f8a6 	.word	0x1110f8a6
 800f444:	3f811111 	.word	0x3f811111
 800f448:	55555549 	.word	0x55555549
 800f44c:	bfc55555 	.word	0xbfc55555
 800f450:	55555549 	.word	0x55555549
 800f454:	3fc55555 	.word	0x3fc55555

0800f458 <fabs>:
 800f458:	ec51 0b10 	vmov	r0, r1, d0
 800f45c:	ee10 2a10 	vmov	r2, s0
 800f460:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f464:	ec43 2b10 	vmov	d0, r2, r3
 800f468:	4770      	bx	lr
 800f46a:	0000      	movs	r0, r0
 800f46c:	0000      	movs	r0, r0
	...

0800f470 <floor>:
 800f470:	ee10 1a90 	vmov	r1, s1
 800f474:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f478:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f47c:	2b13      	cmp	r3, #19
 800f47e:	b530      	push	{r4, r5, lr}
 800f480:	ee10 0a10 	vmov	r0, s0
 800f484:	ee10 5a10 	vmov	r5, s0
 800f488:	dc31      	bgt.n	800f4ee <floor+0x7e>
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	da15      	bge.n	800f4ba <floor+0x4a>
 800f48e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f548 <floor+0xd8>
 800f492:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f496:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49e:	dd07      	ble.n	800f4b0 <floor+0x40>
 800f4a0:	2900      	cmp	r1, #0
 800f4a2:	da4e      	bge.n	800f542 <floor+0xd2>
 800f4a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f4a8:	4318      	orrs	r0, r3
 800f4aa:	d001      	beq.n	800f4b0 <floor+0x40>
 800f4ac:	4928      	ldr	r1, [pc, #160]	; (800f550 <floor+0xe0>)
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	ec43 2b10 	vmov	d0, r2, r3
 800f4b8:	e020      	b.n	800f4fc <floor+0x8c>
 800f4ba:	4a26      	ldr	r2, [pc, #152]	; (800f554 <floor+0xe4>)
 800f4bc:	411a      	asrs	r2, r3
 800f4be:	ea01 0402 	and.w	r4, r1, r2
 800f4c2:	4304      	orrs	r4, r0
 800f4c4:	d01a      	beq.n	800f4fc <floor+0x8c>
 800f4c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f548 <floor+0xd8>
 800f4ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f4ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d6:	ddeb      	ble.n	800f4b0 <floor+0x40>
 800f4d8:	2900      	cmp	r1, #0
 800f4da:	bfbe      	ittt	lt
 800f4dc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f4e0:	fa40 f303 	asrlt.w	r3, r0, r3
 800f4e4:	18c9      	addlt	r1, r1, r3
 800f4e6:	ea21 0102 	bic.w	r1, r1, r2
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	e7e0      	b.n	800f4b0 <floor+0x40>
 800f4ee:	2b33      	cmp	r3, #51	; 0x33
 800f4f0:	dd05      	ble.n	800f4fe <floor+0x8e>
 800f4f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4f6:	d101      	bne.n	800f4fc <floor+0x8c>
 800f4f8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f4fc:	bd30      	pop	{r4, r5, pc}
 800f4fe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f502:	f04f 32ff 	mov.w	r2, #4294967295
 800f506:	40e2      	lsrs	r2, r4
 800f508:	4202      	tst	r2, r0
 800f50a:	d0f7      	beq.n	800f4fc <floor+0x8c>
 800f50c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f548 <floor+0xd8>
 800f510:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f514:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51c:	ddc8      	ble.n	800f4b0 <floor+0x40>
 800f51e:	2900      	cmp	r1, #0
 800f520:	da02      	bge.n	800f528 <floor+0xb8>
 800f522:	2b14      	cmp	r3, #20
 800f524:	d103      	bne.n	800f52e <floor+0xbe>
 800f526:	3101      	adds	r1, #1
 800f528:	ea20 0002 	bic.w	r0, r0, r2
 800f52c:	e7c0      	b.n	800f4b0 <floor+0x40>
 800f52e:	2401      	movs	r4, #1
 800f530:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f534:	fa04 f303 	lsl.w	r3, r4, r3
 800f538:	4418      	add	r0, r3
 800f53a:	42a8      	cmp	r0, r5
 800f53c:	bf38      	it	cc
 800f53e:	1909      	addcc	r1, r1, r4
 800f540:	e7f2      	b.n	800f528 <floor+0xb8>
 800f542:	2000      	movs	r0, #0
 800f544:	4601      	mov	r1, r0
 800f546:	e7b3      	b.n	800f4b0 <floor+0x40>
 800f548:	8800759c 	.word	0x8800759c
 800f54c:	7e37e43c 	.word	0x7e37e43c
 800f550:	bff00000 	.word	0xbff00000
 800f554:	000fffff 	.word	0x000fffff

0800f558 <scalbn>:
 800f558:	ee10 1a90 	vmov	r1, s1
 800f55c:	b510      	push	{r4, lr}
 800f55e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f562:	b98c      	cbnz	r4, 800f588 <scalbn+0x30>
 800f564:	ee10 3a10 	vmov	r3, s0
 800f568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f56c:	430b      	orrs	r3, r1
 800f56e:	d011      	beq.n	800f594 <scalbn+0x3c>
 800f570:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800f638 <scalbn+0xe0>
 800f574:	4b3c      	ldr	r3, [pc, #240]	; (800f668 <scalbn+0x110>)
 800f576:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f57a:	4298      	cmp	r0, r3
 800f57c:	da0b      	bge.n	800f596 <scalbn+0x3e>
 800f57e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f640 <scalbn+0xe8>
 800f582:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f586:	e005      	b.n	800f594 <scalbn+0x3c>
 800f588:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800f58c:	429c      	cmp	r4, r3
 800f58e:	d107      	bne.n	800f5a0 <scalbn+0x48>
 800f590:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f594:	bd10      	pop	{r4, pc}
 800f596:	ee10 1a90 	vmov	r1, s1
 800f59a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f59e:	3c36      	subs	r4, #54	; 0x36
 800f5a0:	4404      	add	r4, r0
 800f5a2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800f5a6:	429c      	cmp	r4, r3
 800f5a8:	dd0d      	ble.n	800f5c6 <scalbn+0x6e>
 800f5aa:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f648 <scalbn+0xf0>
 800f5ae:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f650 <scalbn+0xf8>
 800f5b2:	eeb0 6b47 	vmov.f64	d6, d7
 800f5b6:	ee10 3a90 	vmov	r3, s1
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f5c0:	ee27 0b06 	vmul.f64	d0, d7, d6
 800f5c4:	e7e6      	b.n	800f594 <scalbn+0x3c>
 800f5c6:	2c00      	cmp	r4, #0
 800f5c8:	dd0a      	ble.n	800f5e0 <scalbn+0x88>
 800f5ca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f5ce:	ec53 2b10 	vmov	r2, r3, d0
 800f5d2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f5d6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f5da:	ec43 2b10 	vmov	d0, r2, r3
 800f5de:	e7d9      	b.n	800f594 <scalbn+0x3c>
 800f5e0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800f5e4:	da19      	bge.n	800f61a <scalbn+0xc2>
 800f5e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f5ea:	4298      	cmp	r0, r3
 800f5ec:	ee10 3a90 	vmov	r3, s1
 800f5f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f5f4:	dd09      	ble.n	800f60a <scalbn+0xb2>
 800f5f6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800f648 <scalbn+0xf0>
 800f5fa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800f650 <scalbn+0xf8>
 800f5fe:	eeb0 7b40 	vmov.f64	d7, d0
 800f602:	2b00      	cmp	r3, #0
 800f604:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800f608:	e7bb      	b.n	800f582 <scalbn+0x2a>
 800f60a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800f640 <scalbn+0xe8>
 800f60e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800f658 <scalbn+0x100>
 800f612:	eeb0 7b40 	vmov.f64	d7, d0
 800f616:	2b00      	cmp	r3, #0
 800f618:	e7f4      	b.n	800f604 <scalbn+0xac>
 800f61a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f61e:	ec53 2b10 	vmov	r2, r3, d0
 800f622:	3436      	adds	r4, #54	; 0x36
 800f624:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f628:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f62c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f660 <scalbn+0x108>
 800f630:	ec43 2b10 	vmov	d0, r2, r3
 800f634:	e7a5      	b.n	800f582 <scalbn+0x2a>
 800f636:	bf00      	nop
 800f638:	00000000 	.word	0x00000000
 800f63c:	43500000 	.word	0x43500000
 800f640:	c2f8f359 	.word	0xc2f8f359
 800f644:	01a56e1f 	.word	0x01a56e1f
 800f648:	8800759c 	.word	0x8800759c
 800f64c:	7e37e43c 	.word	0x7e37e43c
 800f650:	8800759c 	.word	0x8800759c
 800f654:	fe37e43c 	.word	0xfe37e43c
 800f658:	c2f8f359 	.word	0xc2f8f359
 800f65c:	81a56e1f 	.word	0x81a56e1f
 800f660:	00000000 	.word	0x00000000
 800f664:	3c900000 	.word	0x3c900000
 800f668:	ffff3cb0 	.word	0xffff3cb0

0800f66c <abort>:
 800f66c:	b508      	push	{r3, lr}
 800f66e:	2006      	movs	r0, #6
 800f670:	f000 f874 	bl	800f75c <raise>
 800f674:	2001      	movs	r0, #1
 800f676:	f7f5 f9b1 	bl	80049dc <_exit>
	...

0800f67c <__errno>:
 800f67c:	4b01      	ldr	r3, [pc, #4]	; (800f684 <__errno+0x8>)
 800f67e:	6818      	ldr	r0, [r3, #0]
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	240001dc 	.word	0x240001dc

0800f688 <__libc_init_array>:
 800f688:	b570      	push	{r4, r5, r6, lr}
 800f68a:	4d0d      	ldr	r5, [pc, #52]	; (800f6c0 <__libc_init_array+0x38>)
 800f68c:	4c0d      	ldr	r4, [pc, #52]	; (800f6c4 <__libc_init_array+0x3c>)
 800f68e:	1b64      	subs	r4, r4, r5
 800f690:	10a4      	asrs	r4, r4, #2
 800f692:	2600      	movs	r6, #0
 800f694:	42a6      	cmp	r6, r4
 800f696:	d109      	bne.n	800f6ac <__libc_init_array+0x24>
 800f698:	4d0b      	ldr	r5, [pc, #44]	; (800f6c8 <__libc_init_array+0x40>)
 800f69a:	4c0c      	ldr	r4, [pc, #48]	; (800f6cc <__libc_init_array+0x44>)
 800f69c:	f000 f9b0 	bl	800fa00 <_init>
 800f6a0:	1b64      	subs	r4, r4, r5
 800f6a2:	10a4      	asrs	r4, r4, #2
 800f6a4:	2600      	movs	r6, #0
 800f6a6:	42a6      	cmp	r6, r4
 800f6a8:	d105      	bne.n	800f6b6 <__libc_init_array+0x2e>
 800f6aa:	bd70      	pop	{r4, r5, r6, pc}
 800f6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6b0:	4798      	blx	r3
 800f6b2:	3601      	adds	r6, #1
 800f6b4:	e7ee      	b.n	800f694 <__libc_init_array+0xc>
 800f6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6ba:	4798      	blx	r3
 800f6bc:	3601      	adds	r6, #1
 800f6be:	e7f2      	b.n	800f6a6 <__libc_init_array+0x1e>
 800f6c0:	0800fef0 	.word	0x0800fef0
 800f6c4:	0800fef0 	.word	0x0800fef0
 800f6c8:	0800fef0 	.word	0x0800fef0
 800f6cc:	0800fef8 	.word	0x0800fef8

0800f6d0 <memcpy>:
 800f6d0:	440a      	add	r2, r1
 800f6d2:	4291      	cmp	r1, r2
 800f6d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6d8:	d100      	bne.n	800f6dc <memcpy+0xc>
 800f6da:	4770      	bx	lr
 800f6dc:	b510      	push	{r4, lr}
 800f6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6e6:	4291      	cmp	r1, r2
 800f6e8:	d1f9      	bne.n	800f6de <memcpy+0xe>
 800f6ea:	bd10      	pop	{r4, pc}

0800f6ec <memset>:
 800f6ec:	4402      	add	r2, r0
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d100      	bne.n	800f6f6 <memset+0xa>
 800f6f4:	4770      	bx	lr
 800f6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800f6fa:	e7f9      	b.n	800f6f0 <memset+0x4>

0800f6fc <realloc>:
 800f6fc:	4b02      	ldr	r3, [pc, #8]	; (800f708 <realloc+0xc>)
 800f6fe:	460a      	mov	r2, r1
 800f700:	4601      	mov	r1, r0
 800f702:	6818      	ldr	r0, [r3, #0]
 800f704:	f000 b8da 	b.w	800f8bc <_realloc_r>
 800f708:	240001dc 	.word	0x240001dc

0800f70c <_raise_r>:
 800f70c:	291f      	cmp	r1, #31
 800f70e:	b538      	push	{r3, r4, r5, lr}
 800f710:	4604      	mov	r4, r0
 800f712:	460d      	mov	r5, r1
 800f714:	d904      	bls.n	800f720 <_raise_r+0x14>
 800f716:	2316      	movs	r3, #22
 800f718:	6003      	str	r3, [r0, #0]
 800f71a:	f04f 30ff 	mov.w	r0, #4294967295
 800f71e:	bd38      	pop	{r3, r4, r5, pc}
 800f720:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f722:	b112      	cbz	r2, 800f72a <_raise_r+0x1e>
 800f724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f728:	b94b      	cbnz	r3, 800f73e <_raise_r+0x32>
 800f72a:	4620      	mov	r0, r4
 800f72c:	f000 f830 	bl	800f790 <_getpid_r>
 800f730:	462a      	mov	r2, r5
 800f732:	4601      	mov	r1, r0
 800f734:	4620      	mov	r0, r4
 800f736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f73a:	f000 b817 	b.w	800f76c <_kill_r>
 800f73e:	2b01      	cmp	r3, #1
 800f740:	d00a      	beq.n	800f758 <_raise_r+0x4c>
 800f742:	1c59      	adds	r1, r3, #1
 800f744:	d103      	bne.n	800f74e <_raise_r+0x42>
 800f746:	2316      	movs	r3, #22
 800f748:	6003      	str	r3, [r0, #0]
 800f74a:	2001      	movs	r0, #1
 800f74c:	e7e7      	b.n	800f71e <_raise_r+0x12>
 800f74e:	2400      	movs	r4, #0
 800f750:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f754:	4628      	mov	r0, r5
 800f756:	4798      	blx	r3
 800f758:	2000      	movs	r0, #0
 800f75a:	e7e0      	b.n	800f71e <_raise_r+0x12>

0800f75c <raise>:
 800f75c:	4b02      	ldr	r3, [pc, #8]	; (800f768 <raise+0xc>)
 800f75e:	4601      	mov	r1, r0
 800f760:	6818      	ldr	r0, [r3, #0]
 800f762:	f7ff bfd3 	b.w	800f70c <_raise_r>
 800f766:	bf00      	nop
 800f768:	240001dc 	.word	0x240001dc

0800f76c <_kill_r>:
 800f76c:	b538      	push	{r3, r4, r5, lr}
 800f76e:	4d07      	ldr	r5, [pc, #28]	; (800f78c <_kill_r+0x20>)
 800f770:	2300      	movs	r3, #0
 800f772:	4604      	mov	r4, r0
 800f774:	4608      	mov	r0, r1
 800f776:	4611      	mov	r1, r2
 800f778:	602b      	str	r3, [r5, #0]
 800f77a:	f7f5 f91f 	bl	80049bc <_kill>
 800f77e:	1c43      	adds	r3, r0, #1
 800f780:	d102      	bne.n	800f788 <_kill_r+0x1c>
 800f782:	682b      	ldr	r3, [r5, #0]
 800f784:	b103      	cbz	r3, 800f788 <_kill_r+0x1c>
 800f786:	6023      	str	r3, [r4, #0]
 800f788:	bd38      	pop	{r3, r4, r5, pc}
 800f78a:	bf00      	nop
 800f78c:	24001c98 	.word	0x24001c98

0800f790 <_getpid_r>:
 800f790:	f7f5 b90c 	b.w	80049ac <_getpid>

0800f794 <sbrk_aligned>:
 800f794:	b570      	push	{r4, r5, r6, lr}
 800f796:	4e0e      	ldr	r6, [pc, #56]	; (800f7d0 <sbrk_aligned+0x3c>)
 800f798:	460c      	mov	r4, r1
 800f79a:	6831      	ldr	r1, [r6, #0]
 800f79c:	4605      	mov	r5, r0
 800f79e:	b911      	cbnz	r1, 800f7a6 <sbrk_aligned+0x12>
 800f7a0:	f000 f8bc 	bl	800f91c <_sbrk_r>
 800f7a4:	6030      	str	r0, [r6, #0]
 800f7a6:	4621      	mov	r1, r4
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	f000 f8b7 	bl	800f91c <_sbrk_r>
 800f7ae:	1c43      	adds	r3, r0, #1
 800f7b0:	d00a      	beq.n	800f7c8 <sbrk_aligned+0x34>
 800f7b2:	1cc4      	adds	r4, r0, #3
 800f7b4:	f024 0403 	bic.w	r4, r4, #3
 800f7b8:	42a0      	cmp	r0, r4
 800f7ba:	d007      	beq.n	800f7cc <sbrk_aligned+0x38>
 800f7bc:	1a21      	subs	r1, r4, r0
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f000 f8ac 	bl	800f91c <_sbrk_r>
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	d101      	bne.n	800f7cc <sbrk_aligned+0x38>
 800f7c8:	f04f 34ff 	mov.w	r4, #4294967295
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	bd70      	pop	{r4, r5, r6, pc}
 800f7d0:	24001c94 	.word	0x24001c94

0800f7d4 <_malloc_r>:
 800f7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d8:	1ccd      	adds	r5, r1, #3
 800f7da:	f025 0503 	bic.w	r5, r5, #3
 800f7de:	3508      	adds	r5, #8
 800f7e0:	2d0c      	cmp	r5, #12
 800f7e2:	bf38      	it	cc
 800f7e4:	250c      	movcc	r5, #12
 800f7e6:	2d00      	cmp	r5, #0
 800f7e8:	4607      	mov	r7, r0
 800f7ea:	db01      	blt.n	800f7f0 <_malloc_r+0x1c>
 800f7ec:	42a9      	cmp	r1, r5
 800f7ee:	d905      	bls.n	800f7fc <_malloc_r+0x28>
 800f7f0:	230c      	movs	r3, #12
 800f7f2:	603b      	str	r3, [r7, #0]
 800f7f4:	2600      	movs	r6, #0
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7fc:	4e2e      	ldr	r6, [pc, #184]	; (800f8b8 <_malloc_r+0xe4>)
 800f7fe:	f000 f89d 	bl	800f93c <__malloc_lock>
 800f802:	6833      	ldr	r3, [r6, #0]
 800f804:	461c      	mov	r4, r3
 800f806:	bb34      	cbnz	r4, 800f856 <_malloc_r+0x82>
 800f808:	4629      	mov	r1, r5
 800f80a:	4638      	mov	r0, r7
 800f80c:	f7ff ffc2 	bl	800f794 <sbrk_aligned>
 800f810:	1c43      	adds	r3, r0, #1
 800f812:	4604      	mov	r4, r0
 800f814:	d14d      	bne.n	800f8b2 <_malloc_r+0xde>
 800f816:	6834      	ldr	r4, [r6, #0]
 800f818:	4626      	mov	r6, r4
 800f81a:	2e00      	cmp	r6, #0
 800f81c:	d140      	bne.n	800f8a0 <_malloc_r+0xcc>
 800f81e:	6823      	ldr	r3, [r4, #0]
 800f820:	4631      	mov	r1, r6
 800f822:	4638      	mov	r0, r7
 800f824:	eb04 0803 	add.w	r8, r4, r3
 800f828:	f000 f878 	bl	800f91c <_sbrk_r>
 800f82c:	4580      	cmp	r8, r0
 800f82e:	d13a      	bne.n	800f8a6 <_malloc_r+0xd2>
 800f830:	6821      	ldr	r1, [r4, #0]
 800f832:	3503      	adds	r5, #3
 800f834:	1a6d      	subs	r5, r5, r1
 800f836:	f025 0503 	bic.w	r5, r5, #3
 800f83a:	3508      	adds	r5, #8
 800f83c:	2d0c      	cmp	r5, #12
 800f83e:	bf38      	it	cc
 800f840:	250c      	movcc	r5, #12
 800f842:	4629      	mov	r1, r5
 800f844:	4638      	mov	r0, r7
 800f846:	f7ff ffa5 	bl	800f794 <sbrk_aligned>
 800f84a:	3001      	adds	r0, #1
 800f84c:	d02b      	beq.n	800f8a6 <_malloc_r+0xd2>
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	442b      	add	r3, r5
 800f852:	6023      	str	r3, [r4, #0]
 800f854:	e00e      	b.n	800f874 <_malloc_r+0xa0>
 800f856:	6822      	ldr	r2, [r4, #0]
 800f858:	1b52      	subs	r2, r2, r5
 800f85a:	d41e      	bmi.n	800f89a <_malloc_r+0xc6>
 800f85c:	2a0b      	cmp	r2, #11
 800f85e:	d916      	bls.n	800f88e <_malloc_r+0xba>
 800f860:	1961      	adds	r1, r4, r5
 800f862:	42a3      	cmp	r3, r4
 800f864:	6025      	str	r5, [r4, #0]
 800f866:	bf18      	it	ne
 800f868:	6059      	strne	r1, [r3, #4]
 800f86a:	6863      	ldr	r3, [r4, #4]
 800f86c:	bf08      	it	eq
 800f86e:	6031      	streq	r1, [r6, #0]
 800f870:	5162      	str	r2, [r4, r5]
 800f872:	604b      	str	r3, [r1, #4]
 800f874:	4638      	mov	r0, r7
 800f876:	f104 060b 	add.w	r6, r4, #11
 800f87a:	f000 f865 	bl	800f948 <__malloc_unlock>
 800f87e:	f026 0607 	bic.w	r6, r6, #7
 800f882:	1d23      	adds	r3, r4, #4
 800f884:	1af2      	subs	r2, r6, r3
 800f886:	d0b6      	beq.n	800f7f6 <_malloc_r+0x22>
 800f888:	1b9b      	subs	r3, r3, r6
 800f88a:	50a3      	str	r3, [r4, r2]
 800f88c:	e7b3      	b.n	800f7f6 <_malloc_r+0x22>
 800f88e:	6862      	ldr	r2, [r4, #4]
 800f890:	42a3      	cmp	r3, r4
 800f892:	bf0c      	ite	eq
 800f894:	6032      	streq	r2, [r6, #0]
 800f896:	605a      	strne	r2, [r3, #4]
 800f898:	e7ec      	b.n	800f874 <_malloc_r+0xa0>
 800f89a:	4623      	mov	r3, r4
 800f89c:	6864      	ldr	r4, [r4, #4]
 800f89e:	e7b2      	b.n	800f806 <_malloc_r+0x32>
 800f8a0:	4634      	mov	r4, r6
 800f8a2:	6876      	ldr	r6, [r6, #4]
 800f8a4:	e7b9      	b.n	800f81a <_malloc_r+0x46>
 800f8a6:	230c      	movs	r3, #12
 800f8a8:	603b      	str	r3, [r7, #0]
 800f8aa:	4638      	mov	r0, r7
 800f8ac:	f000 f84c 	bl	800f948 <__malloc_unlock>
 800f8b0:	e7a1      	b.n	800f7f6 <_malloc_r+0x22>
 800f8b2:	6025      	str	r5, [r4, #0]
 800f8b4:	e7de      	b.n	800f874 <_malloc_r+0xa0>
 800f8b6:	bf00      	nop
 800f8b8:	24001c90 	.word	0x24001c90

0800f8bc <_realloc_r>:
 800f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	4680      	mov	r8, r0
 800f8c2:	4614      	mov	r4, r2
 800f8c4:	460e      	mov	r6, r1
 800f8c6:	b921      	cbnz	r1, 800f8d2 <_realloc_r+0x16>
 800f8c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8cc:	4611      	mov	r1, r2
 800f8ce:	f7ff bf81 	b.w	800f7d4 <_malloc_r>
 800f8d2:	b92a      	cbnz	r2, 800f8e0 <_realloc_r+0x24>
 800f8d4:	f000 f83e 	bl	800f954 <_free_r>
 800f8d8:	4625      	mov	r5, r4
 800f8da:	4628      	mov	r0, r5
 800f8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e0:	f000 f884 	bl	800f9ec <_malloc_usable_size_r>
 800f8e4:	4284      	cmp	r4, r0
 800f8e6:	4607      	mov	r7, r0
 800f8e8:	d802      	bhi.n	800f8f0 <_realloc_r+0x34>
 800f8ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8ee:	d812      	bhi.n	800f916 <_realloc_r+0x5a>
 800f8f0:	4621      	mov	r1, r4
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	f7ff ff6e 	bl	800f7d4 <_malloc_r>
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d0ed      	beq.n	800f8da <_realloc_r+0x1e>
 800f8fe:	42bc      	cmp	r4, r7
 800f900:	4622      	mov	r2, r4
 800f902:	4631      	mov	r1, r6
 800f904:	bf28      	it	cs
 800f906:	463a      	movcs	r2, r7
 800f908:	f7ff fee2 	bl	800f6d0 <memcpy>
 800f90c:	4631      	mov	r1, r6
 800f90e:	4640      	mov	r0, r8
 800f910:	f000 f820 	bl	800f954 <_free_r>
 800f914:	e7e1      	b.n	800f8da <_realloc_r+0x1e>
 800f916:	4635      	mov	r5, r6
 800f918:	e7df      	b.n	800f8da <_realloc_r+0x1e>
	...

0800f91c <_sbrk_r>:
 800f91c:	b538      	push	{r3, r4, r5, lr}
 800f91e:	4d06      	ldr	r5, [pc, #24]	; (800f938 <_sbrk_r+0x1c>)
 800f920:	2300      	movs	r3, #0
 800f922:	4604      	mov	r4, r0
 800f924:	4608      	mov	r0, r1
 800f926:	602b      	str	r3, [r5, #0]
 800f928:	f7f5 f862 	bl	80049f0 <_sbrk>
 800f92c:	1c43      	adds	r3, r0, #1
 800f92e:	d102      	bne.n	800f936 <_sbrk_r+0x1a>
 800f930:	682b      	ldr	r3, [r5, #0]
 800f932:	b103      	cbz	r3, 800f936 <_sbrk_r+0x1a>
 800f934:	6023      	str	r3, [r4, #0]
 800f936:	bd38      	pop	{r3, r4, r5, pc}
 800f938:	24001c98 	.word	0x24001c98

0800f93c <__malloc_lock>:
 800f93c:	4801      	ldr	r0, [pc, #4]	; (800f944 <__malloc_lock+0x8>)
 800f93e:	f000 b85d 	b.w	800f9fc <__retarget_lock_acquire_recursive>
 800f942:	bf00      	nop
 800f944:	24001c9c 	.word	0x24001c9c

0800f948 <__malloc_unlock>:
 800f948:	4801      	ldr	r0, [pc, #4]	; (800f950 <__malloc_unlock+0x8>)
 800f94a:	f000 b858 	b.w	800f9fe <__retarget_lock_release_recursive>
 800f94e:	bf00      	nop
 800f950:	24001c9c 	.word	0x24001c9c

0800f954 <_free_r>:
 800f954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f956:	2900      	cmp	r1, #0
 800f958:	d044      	beq.n	800f9e4 <_free_r+0x90>
 800f95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f95e:	9001      	str	r0, [sp, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	f1a1 0404 	sub.w	r4, r1, #4
 800f966:	bfb8      	it	lt
 800f968:	18e4      	addlt	r4, r4, r3
 800f96a:	f7ff ffe7 	bl	800f93c <__malloc_lock>
 800f96e:	4a1e      	ldr	r2, [pc, #120]	; (800f9e8 <_free_r+0x94>)
 800f970:	9801      	ldr	r0, [sp, #4]
 800f972:	6813      	ldr	r3, [r2, #0]
 800f974:	b933      	cbnz	r3, 800f984 <_free_r+0x30>
 800f976:	6063      	str	r3, [r4, #4]
 800f978:	6014      	str	r4, [r2, #0]
 800f97a:	b003      	add	sp, #12
 800f97c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f980:	f7ff bfe2 	b.w	800f948 <__malloc_unlock>
 800f984:	42a3      	cmp	r3, r4
 800f986:	d908      	bls.n	800f99a <_free_r+0x46>
 800f988:	6825      	ldr	r5, [r4, #0]
 800f98a:	1961      	adds	r1, r4, r5
 800f98c:	428b      	cmp	r3, r1
 800f98e:	bf01      	itttt	eq
 800f990:	6819      	ldreq	r1, [r3, #0]
 800f992:	685b      	ldreq	r3, [r3, #4]
 800f994:	1949      	addeq	r1, r1, r5
 800f996:	6021      	streq	r1, [r4, #0]
 800f998:	e7ed      	b.n	800f976 <_free_r+0x22>
 800f99a:	461a      	mov	r2, r3
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	b10b      	cbz	r3, 800f9a4 <_free_r+0x50>
 800f9a0:	42a3      	cmp	r3, r4
 800f9a2:	d9fa      	bls.n	800f99a <_free_r+0x46>
 800f9a4:	6811      	ldr	r1, [r2, #0]
 800f9a6:	1855      	adds	r5, r2, r1
 800f9a8:	42a5      	cmp	r5, r4
 800f9aa:	d10b      	bne.n	800f9c4 <_free_r+0x70>
 800f9ac:	6824      	ldr	r4, [r4, #0]
 800f9ae:	4421      	add	r1, r4
 800f9b0:	1854      	adds	r4, r2, r1
 800f9b2:	42a3      	cmp	r3, r4
 800f9b4:	6011      	str	r1, [r2, #0]
 800f9b6:	d1e0      	bne.n	800f97a <_free_r+0x26>
 800f9b8:	681c      	ldr	r4, [r3, #0]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	6053      	str	r3, [r2, #4]
 800f9be:	4421      	add	r1, r4
 800f9c0:	6011      	str	r1, [r2, #0]
 800f9c2:	e7da      	b.n	800f97a <_free_r+0x26>
 800f9c4:	d902      	bls.n	800f9cc <_free_r+0x78>
 800f9c6:	230c      	movs	r3, #12
 800f9c8:	6003      	str	r3, [r0, #0]
 800f9ca:	e7d6      	b.n	800f97a <_free_r+0x26>
 800f9cc:	6825      	ldr	r5, [r4, #0]
 800f9ce:	1961      	adds	r1, r4, r5
 800f9d0:	428b      	cmp	r3, r1
 800f9d2:	bf04      	itt	eq
 800f9d4:	6819      	ldreq	r1, [r3, #0]
 800f9d6:	685b      	ldreq	r3, [r3, #4]
 800f9d8:	6063      	str	r3, [r4, #4]
 800f9da:	bf04      	itt	eq
 800f9dc:	1949      	addeq	r1, r1, r5
 800f9de:	6021      	streq	r1, [r4, #0]
 800f9e0:	6054      	str	r4, [r2, #4]
 800f9e2:	e7ca      	b.n	800f97a <_free_r+0x26>
 800f9e4:	b003      	add	sp, #12
 800f9e6:	bd30      	pop	{r4, r5, pc}
 800f9e8:	24001c90 	.word	0x24001c90

0800f9ec <_malloc_usable_size_r>:
 800f9ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9f0:	1f18      	subs	r0, r3, #4
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	bfbc      	itt	lt
 800f9f6:	580b      	ldrlt	r3, [r1, r0]
 800f9f8:	18c0      	addlt	r0, r0, r3
 800f9fa:	4770      	bx	lr

0800f9fc <__retarget_lock_acquire_recursive>:
 800f9fc:	4770      	bx	lr

0800f9fe <__retarget_lock_release_recursive>:
 800f9fe:	4770      	bx	lr

0800fa00 <_init>:
 800fa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa02:	bf00      	nop
 800fa04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa06:	bc08      	pop	{r3}
 800fa08:	469e      	mov	lr, r3
 800fa0a:	4770      	bx	lr

0800fa0c <_fini>:
 800fa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa0e:	bf00      	nop
 800fa10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa12:	bc08      	pop	{r3}
 800fa14:	469e      	mov	lr, r3
 800fa16:	4770      	bx	lr
