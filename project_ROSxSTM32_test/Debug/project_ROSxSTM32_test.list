
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8a8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800fb78  0800fb78  0001fb78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010048  08010048  00020048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08010050  08010050  00020050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010058  08010058  00020058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000240  24000000  0801005c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a80  24000240  0801029c  00030240  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001cc0  0801029c  00031cc0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022ed6  00000000  00000000  0003026e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000394d  00000000  00000000  00053144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e0  00000000  00000000  00056a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c0  00000000  00000000  00057f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034f9b  00000000  00000000  00059338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bfef  00000000  00000000  0008e2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015373a  00000000  00000000  000aa2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fd9fc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ecc  00000000  00000000  001fda4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000240 	.word	0x24000240
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800fb60 	.word	0x0800fb60

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000244 	.word	0x24000244
 800030c:	0800fb60 	.word	0x0800fb60

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[1]},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[2]},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[3]}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	49c7      	ldr	r1, [pc, #796]	; (80009a8 <pidCtrl+0x328>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	440b      	add	r3, r1
 8000696:	3318      	adds	r3, #24
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000980 <pidCtrl+0x300>
 80006a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006ac:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000988 <pidCtrl+0x308>
 80006b0:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 80006b4:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8000990 <pidCtrl+0x310>
 80006b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006bc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000998 <pidCtrl+0x318>
 80006c0:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c4:	49b8      	ldr	r1, [pc, #736]	; (80009a8 <pidCtrl+0x328>)
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	440b      	add	r3, r1
 80006d2:	3328      	adds	r3, #40	; 0x28
 80006d4:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d8:	49b3      	ldr	r1, [pc, #716]	; (80009a8 <pidCtrl+0x328>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4613      	mov	r3, r2
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	440b      	add	r3, r1
 80006e6:	3320      	adds	r3, #32
 80006e8:	ed93 6b00 	vldr	d6, [r3]
 80006ec:	49ae      	ldr	r1, [pc, #696]	; (80009a8 <pidCtrl+0x328>)
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4613      	mov	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	440b      	add	r3, r1
 80006fa:	3328      	adds	r3, #40	; 0x28
 80006fc:	ed93 7b00 	vldr	d7, [r3]
 8000700:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000704:	49a8      	ldr	r1, [pc, #672]	; (80009a8 <pidCtrl+0x328>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	440b      	add	r3, r1
 8000712:	3330      	adds	r3, #48	; 0x30
 8000714:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000718:	49a3      	ldr	r1, [pc, #652]	; (80009a8 <pidCtrl+0x328>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	440b      	add	r3, r1
 8000726:	ed93 6b00 	vldr	d6, [r3]
 800072a:	499f      	ldr	r1, [pc, #636]	; (80009a8 <pidCtrl+0x328>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	440b      	add	r3, r1
 8000738:	3330      	adds	r3, #48	; 0x30
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000742:	4999      	ldr	r1, [pc, #612]	; (80009a8 <pidCtrl+0x328>)
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4613      	mov	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	1a9b      	subs	r3, r3, r2
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	440b      	add	r3, r1
 8000750:	3348      	adds	r3, #72	; 0x48
 8000752:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000756:	4994      	ldr	r1, [pc, #592]	; (80009a8 <pidCtrl+0x328>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	1a9b      	subs	r3, r3, r2
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	440b      	add	r3, r1
 8000764:	3350      	adds	r3, #80	; 0x50
 8000766:	ed93 6b00 	vldr	d6, [r3]
 800076a:	498f      	ldr	r1, [pc, #572]	; (80009a8 <pidCtrl+0x328>)
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	440b      	add	r3, r1
 8000778:	3308      	adds	r3, #8
 800077a:	ed93 5b00 	vldr	d5, [r3]
 800077e:	498a      	ldr	r1, [pc, #552]	; (80009a8 <pidCtrl+0x328>)
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	440b      	add	r3, r1
 800078c:	3338      	adds	r3, #56	; 0x38
 800078e:	ed93 7b00 	vldr	d7, [r3]
 8000792:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000796:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8000998 <pidCtrl+0x318>
 800079a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800079e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007a2:	4981      	ldr	r1, [pc, #516]	; (80009a8 <pidCtrl+0x328>)
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	440b      	add	r3, r1
 80007b0:	3350      	adds	r3, #80	; 0x50
 80007b2:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007b6:	497c      	ldr	r1, [pc, #496]	; (80009a8 <pidCtrl+0x328>)
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	440b      	add	r3, r1
 80007c4:	3310      	adds	r3, #16
 80007c6:	ed93 6b00 	vldr	d6, [r3]
 80007ca:	4977      	ldr	r1, [pc, #476]	; (80009a8 <pidCtrl+0x328>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	440b      	add	r3, r1
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	ed93 5b00 	vldr	d5, [r3]
 80007de:	4972      	ldr	r1, [pc, #456]	; (80009a8 <pidCtrl+0x328>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	440b      	add	r3, r1
 80007ec:	3338      	adds	r3, #56	; 0x38
 80007ee:	ed93 7b00 	vldr	d7, [r3]
 80007f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007fa:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000998 <pidCtrl+0x318>
 80007fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000802:	4969      	ldr	r1, [pc, #420]	; (80009a8 <pidCtrl+0x328>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	1a9b      	subs	r3, r3, r2
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	440b      	add	r3, r1
 8000810:	3358      	adds	r3, #88	; 0x58
 8000812:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 8000816:	4964      	ldr	r1, [pc, #400]	; (80009a8 <pidCtrl+0x328>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	440b      	add	r3, r1
 8000824:	3350      	adds	r3, #80	; 0x50
 8000826:	ed93 7b00 	vldr	d7, [r3]
 800082a:	eeb0 7bc7 	vabs.f64	d7, d7
 800082e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000832:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	dd1f      	ble.n	800087c <pidCtrl+0x1fc>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800083c:	495a      	ldr	r1, [pc, #360]	; (80009a8 <pidCtrl+0x328>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	1a9b      	subs	r3, r3, r2
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	440b      	add	r3, r1
 800084a:	3350      	adds	r3, #80	; 0x50
 800084c:	ed93 7b00 	vldr	d7, [r3]
 8000850:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000858:	db03      	blt.n	8000862 <pidCtrl+0x1e2>
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	4953      	ldr	r1, [pc, #332]	; (80009ac <pidCtrl+0x32c>)
 8000860:	e002      	b.n	8000868 <pidCtrl+0x1e8>
 8000862:	f04f 0000 	mov.w	r0, #0
 8000866:	4952      	ldr	r1, [pc, #328]	; (80009b0 <pidCtrl+0x330>)
 8000868:	4c4f      	ldr	r4, [pc, #316]	; (80009a8 <pidCtrl+0x328>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	4423      	add	r3, r4
 8000876:	3350      	adds	r3, #80	; 0x50
 8000878:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 800087c:	494a      	ldr	r1, [pc, #296]	; (80009a8 <pidCtrl+0x328>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4613      	mov	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	440b      	add	r3, r1
 800088a:	3348      	adds	r3, #72	; 0x48
 800088c:	ed93 6b00 	vldr	d6, [r3]
 8000890:	4945      	ldr	r1, [pc, #276]	; (80009a8 <pidCtrl+0x328>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4613      	mov	r3, r2
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	1a9b      	subs	r3, r3, r2
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	440b      	add	r3, r1
 800089e:	3350      	adds	r3, #80	; 0x50
 80008a0:	ed93 7b00 	vldr	d7, [r3]
 80008a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008a8:	493f      	ldr	r1, [pc, #252]	; (80009a8 <pidCtrl+0x328>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	440b      	add	r3, r1
 80008b6:	3358      	adds	r3, #88	; 0x58
 80008b8:	ed93 7b00 	vldr	d7, [r3]
 80008bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008c0:	4939      	ldr	r1, [pc, #228]	; (80009a8 <pidCtrl+0x328>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	1a9b      	subs	r3, r3, r2
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	440b      	add	r3, r1
 80008ce:	3340      	adds	r3, #64	; 0x40
 80008d0:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008d4:	4934      	ldr	r1, [pc, #208]	; (80009a8 <pidCtrl+0x328>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	1a9b      	subs	r3, r3, r2
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	440b      	add	r3, r1
 80008e2:	3330      	adds	r3, #48	; 0x30
 80008e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008e8:	4c2f      	ldr	r4, [pc, #188]	; (80009a8 <pidCtrl+0x328>)
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4613      	mov	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4423      	add	r3, r4
 80008f6:	3338      	adds	r3, #56	; 0x38
 80008f8:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80008fc:	492a      	ldr	r1, [pc, #168]	; (80009a8 <pidCtrl+0x328>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4613      	mov	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	440b      	add	r3, r1
 800090a:	3340      	adds	r3, #64	; 0x40
 800090c:	ed93 7b00 	vldr	d7, [r3]
 8000910:	eeb0 7bc7 	vabs.f64	d7, d7
 8000914:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80009a0 <pidCtrl+0x320>
 8000918:	ee27 7b06 	vmul.f64	d7, d7, d6
 800091c:	4922      	ldr	r1, [pc, #136]	; (80009a8 <pidCtrl+0x328>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4613      	mov	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	440b      	add	r3, r1
 800092a:	3360      	adds	r3, #96	; 0x60
 800092c:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <pidCtrl+0x328>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4613      	mov	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	440b      	add	r3, r1
 800093e:	3360      	adds	r3, #96	; 0x60
 8000940:	ed93 7b00 	vldr	d7, [r3]
 8000944:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80009a0 <pidCtrl+0x320>
 8000948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000950:	dc00      	bgt.n	8000954 <pidCtrl+0x2d4>
}
 8000952:	e00d      	b.n	8000970 <pidCtrl+0x2f0>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000954:	4914      	ldr	r1, [pc, #80]	; (80009a8 <pidCtrl+0x328>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	440b      	add	r3, r1
 8000962:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8000966:	a30e      	add	r3, pc, #56	; (adr r3, 80009a0 <pidCtrl+0x320>)
 8000968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bc90      	pop	{r4, r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	f3af 8000 	nop.w
 8000980:	54cadf99 	.word	0x54cadf99
 8000984:	400921fb 	.word	0x400921fb
 8000988:	b6ae7d56 	.word	0xb6ae7d56
 800098c:	3fb97f62 	.word	0x3fb97f62
 8000990:	cccccccd 	.word	0xcccccccd
 8000994:	40e4cccc 	.word	0x40e4cccc
 8000998:	00000000 	.word	0x00000000
 800099c:	408f4000 	.word	0x408f4000
 80009a0:	00000000 	.word	0x00000000
 80009a4:	40b06800 	.word	0x40b06800
 80009a8:	24000000 	.word	0x24000000
 80009ac:	3ff00000 	.word	0x3ff00000
 80009b0:	bff00000 	.word	0xbff00000

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f004 fbb2 	bl	8005120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f862 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 fc68 	bl	8001294 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c4:	f000 fc3e 	bl	8001244 <MX_DMA_Init>
  MX_USART10_UART_Init();
 80009c8:	f000 fbf0 	bl	80011ac <MX_USART10_UART_Init>
  MX_TIM3_Init();
 80009cc:	f000 f91a 	bl	8000c04 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009d0:	f000 f96e 	bl	8000cb0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009d4:	f000 f9c2 	bl	8000d5c <MX_TIM5_Init>
  MX_TIM8_Init();
 80009d8:	f000 fa0e 	bl	8000df8 <MX_TIM8_Init>
  MX_TIM15_Init();
 80009dc:	f000 faa8 	bl	8000f30 <MX_TIM15_Init>
  MX_TIM23_Init();
 80009e0:	f000 fb38 	bl	8001054 <MX_TIM23_Init>
  MX_TIM24_Init();
 80009e4:	f000 fb8c 	bl	8001100 <MX_TIM24_Init>
  MX_TIM2_Init();
 80009e8:	f000 f8be 	bl	8000b68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 80009ec:	481d      	ldr	r0, [pc, #116]	; (8000a64 <main+0xb0>)
 80009ee:	f00a fb2b 	bl	800b048 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <main+0xb4>)
 80009f4:	f00a fb28 	bl	800b048 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80009f8:	2108      	movs	r1, #8
 80009fa:	481c      	ldr	r0, [pc, #112]	; (8000a6c <main+0xb8>)
 80009fc:	f00a fc02 	bl	800b204 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000a00:	210c      	movs	r1, #12
 8000a02:	481a      	ldr	r0, [pc, #104]	; (8000a6c <main+0xb8>)
 8000a04:	f00a fbfe 	bl	800b204 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4819      	ldr	r0, [pc, #100]	; (8000a70 <main+0xbc>)
 8000a0c:	f00a fbfa 	bl	800b204 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000a10:	2104      	movs	r1, #4
 8000a12:	4817      	ldr	r0, [pc, #92]	; (8000a70 <main+0xbc>)
 8000a14:	f00a fbf6 	bl	800b204 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4816      	ldr	r0, [pc, #88]	; (8000a74 <main+0xc0>)
 8000a1c:	f00a fdb4 	bl	800b588 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 8000a20:	2104      	movs	r1, #4
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <main+0xc0>)
 8000a24:	f00a fdb0 	bl	800b588 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <main+0xc4>)
 8000a2c:	f00a fdac 	bl	800b588 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <main+0xc4>)
 8000a34:	f00a fda8 	bl	800b588 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <main+0xc8>)
 8000a3c:	f00a fda4 	bl	800b588 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000a40:	2104      	movs	r1, #4
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <main+0xc8>)
 8000a44:	f00a fda0 	bl	800b588 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <main+0xcc>)
 8000a4c:	f00a fd9c 	bl	800b588 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 8000a50:	2104      	movs	r1, #4
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <main+0xcc>)
 8000a54:	f00a fd98 	bl	800b588 <HAL_TIM_Encoder_Start>


    setup();
 8000a58:	f002 fc2a 	bl	80032b0 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 8000a5c:	f002 fc58 	bl	8003310 <loop>
 8000a60:	e7fc      	b.n	8000a5c <main+0xa8>
 8000a62:	bf00      	nop
 8000a64:	24000340 	.word	0x24000340
 8000a68:	2400025c 	.word	0x2400025c
 8000a6c:	2400038c 	.word	0x2400038c
 8000a70:	240003d8 	.word	0x240003d8
 8000a74:	24000470 	.word	0x24000470
 8000a78:	240002a8 	.word	0x240002a8
 8000a7c:	240002f4 	.word	0x240002f4
 8000a80:	24000424 	.word	0x24000424

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f00e feda 	bl	800f84c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00e fed4 	bl	800f84c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f007 ffe7 	bl	8008a78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab6:	4a2b      	ldr	r2, [pc, #172]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aca:	bf00      	nop
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad8:	d1f8      	bne.n	8000acc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000af2:	2315      	movs	r3, #21
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 ffea 	bl	8008aec <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b1e:	f000 fc79 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	233f      	movs	r3, #63	; 0x3f
 8000b24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2303      	movs	r3, #3
 8000b28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000b2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b30:	2308      	movs	r3, #8
 8000b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b34:	2340      	movs	r3, #64	; 0x40
 8000b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b38:	2340      	movs	r3, #64	; 0x40
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f008 fb7c 	bl	8009248 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000b56:	f000 fc5d 	bl	8001414 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3770      	adds	r7, #112	; 0x70
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	58024800 	.word	0x58024800

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b90:	2253      	movs	r2, #83	; 0x53
 8000b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b9c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bae:	4814      	ldr	r0, [pc, #80]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bb0:	f00a f9f2 	bl	800af98 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bba:	f000 fc2b 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bcc:	f00a ff9e 	bl	800bb0c <HAL_TIM_ConfigClockSource>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bd6:	f000 fc1d 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000be8:	f00b fcf0 	bl	800c5cc <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bf2:	f000 fc0f 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2400025c 	.word	0x2400025c

08000c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2224      	movs	r2, #36	; 0x24
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00e fe1a 	bl	800f84c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c24:	4a21      	ldr	r2, [pc, #132]	; (8000cac <MX_TIM3_Init+0xa8>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c60:	2301      	movs	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c74:	f00a fbe2 	bl	800b43c <HAL_TIM_Encoder_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c7e:	f000 fbc9 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c90:	f00b fc9c 	bl	800c5cc <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c9a:	f000 fbbb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	240002a8 	.word	0x240002a8
 8000cac:	40000400 	.word	0x40000400

08000cb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2224      	movs	r2, #36	; 0x24
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00e fdc4 	bl	800f84c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000d20:	f00a fb8c 	bl	800b43c <HAL_TIM_Encoder_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d2a:	f000 fb73 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000d3c:	f00b fc46 	bl	800c5cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d46:	f000 fb65 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3730      	adds	r7, #48	; 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	240002f4 	.word	0x240002f4
 8000d58:	40000800 	.word	0x40000800

08000d5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <MX_TIM5_Init+0x98>)
 8000d7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d82:	2253      	movs	r2, #83	; 0x53
 8000d84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000da2:	f00a f8f9 	bl	800af98 <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000dac:	f000 fb32 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000dbe:	f00a fea5 	bl	800bb0c <HAL_TIM_ConfigClockSource>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000dc8:	f000 fb24 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000dda:	f00b fbf7 	bl	800c5cc <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 fb16 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000340 	.word	0x24000340
 8000df4:	40000c00 	.word	0x40000c00

08000df8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b098      	sub	sp, #96	; 0x60
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2234      	movs	r2, #52	; 0x34
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00e fd11 	bl	800f84c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e2c:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <MX_TIM8_Init+0x134>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4199;
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e3e:	f241 0267 	movw	r2, #4199	; 0x1067
 8000e42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e56:	4834      	ldr	r0, [pc, #208]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e58:	f00a f97c 	bl	800b154 <HAL_TIM_PWM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f000 fad7 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e76:	4619      	mov	r1, r3
 8000e78:	482b      	ldr	r0, [pc, #172]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e7a:	f00b fba7 	bl	800c5cc <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e84:	f000 fac6 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e94:	2300      	movs	r3, #0
 8000e96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481e      	ldr	r0, [pc, #120]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000eae:	f00a fd19 	bl	800b8e4 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000eb8:	f000 faac 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ebc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4818      	ldr	r0, [pc, #96]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000ec6:	f00a fd0d 	bl	800b8e4 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000ed0:	f000 faa0 	bl	8001414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000f0a:	f00b fbfb 	bl	800c704 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000f14:	f000 fa7e 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000f1a:	f003 fbf1 	bl	8004700 <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3760      	adds	r7, #96	; 0x60
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2400038c 	.word	0x2400038c
 8000f2c:	40010400 	.word	0x40010400

08000f30 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b098      	sub	sp, #96	; 0x60
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2234      	movs	r2, #52	; 0x34
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00e fc75 	bl	800f84c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f64:	4a3a      	ldr	r2, [pc, #232]	; (8001050 <MX_TIM15_Init+0x120>)
 8000f66:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f76:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000f7a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b33      	ldr	r3, [pc, #204]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f8e:	482f      	ldr	r0, [pc, #188]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f90:	f00a f8e0 	bl	800b154 <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 fa3b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000faa:	4619      	mov	r1, r3
 8000fac:	4827      	ldr	r0, [pc, #156]	; (800104c <MX_TIM15_Init+0x11c>)
 8000fae:	f00b fb0d 	bl	800c5cc <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 fa2c 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbc:	2360      	movs	r3, #96	; 0x60
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481a      	ldr	r0, [pc, #104]	; (800104c <MX_TIM15_Init+0x11c>)
 8000fe2:	f00a fc7f 	bl	800b8e4 <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000fec:	f000 fa12 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4814      	ldr	r0, [pc, #80]	; (800104c <MX_TIM15_Init+0x11c>)
 8000ffa:	f00a fc73 	bl	800b8e4 <HAL_TIM_PWM_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001004:	f000 fa06 	bl	8001414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <MX_TIM15_Init+0x11c>)
 8001030:	f00b fb68 	bl	800c704 <HAL_TIMEx_ConfigBreakDeadTime>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800103a:	f000 f9eb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <MX_TIM15_Init+0x11c>)
 8001040:	f003 fb5e 	bl	8004700 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3760      	adds	r7, #96	; 0x60
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	240003d8 	.word	0x240003d8
 8001050:	40014000 	.word	0x40014000

08001054 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f00e fbf2 	bl	800f84c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <MX_TIM23_Init+0xa8>)
 8001076:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_TIM23_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001086:	f04f 32ff 	mov.w	r2, #4294967295
 800108a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_TIM23_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001098:	2303      	movs	r3, #3
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_TIM23_Init+0xa4>)
 80010c4:	f00a f9ba 	bl	800b43c <HAL_TIM_Encoder_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 80010ce:	f000 f9a1 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_TIM23_Init+0xa4>)
 80010e0:	f00b fa74 	bl	800c5cc <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80010ea:	f000 f993 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3730      	adds	r7, #48	; 0x30
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	24000424 	.word	0x24000424
 80010fc:	4000e000 	.word	0x4000e000

08001100 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2224      	movs	r2, #36	; 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f00e fb9c 	bl	800f84c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <MX_TIM24_Init+0xa8>)
 8001122:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001132:	f04f 32ff 	mov.w	r2, #4294967295
 8001136:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001144:	2303      	movs	r3, #3
 8001146:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001170:	f00a f964 	bl	800b43c <HAL_TIM_Encoder_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 800117a:	f000 f94b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800118c:	f00b fa1e 	bl	800c5cc <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8001196:	f000 f93d 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3730      	adds	r7, #48	; 0x30
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000470 	.word	0x24000470
 80011a8:	4000e400 	.word	0x4000e400

080011ac <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_USART10_UART_Init+0x94>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 57600;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011bc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011f6:	f00b fb43 	bl	800c880 <HAL_UART_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 f908 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_USART10_UART_Init+0x90>)
 8001208:	f00d fbbc 	bl	800e984 <HAL_UARTEx_SetTxFifoThreshold>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8001212:	f000 f8ff 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <MX_USART10_UART_Init+0x90>)
 800121a:	f00d fbf1 	bl	800ea00 <HAL_UARTEx_SetRxFifoThreshold>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8001224:	f000 f8f6 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_USART10_UART_Init+0x90>)
 800122a:	f00d fb72 	bl	800e912 <HAL_UARTEx_DisableFifoMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 f8ee 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	240004bc 	.word	0x240004bc
 8001240:	40011c00 	.word	0x40011c00

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_DMA_Init+0x4c>)
 800124c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_DMA_Init+0x4c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_DMA_Init+0x4c>)
 800125c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	200b      	movs	r0, #11
 800126e:	f004 f8e8 	bl	8005442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001272:	200b      	movs	r0, #11
 8001274:	f004 f8ff 	bl	8005476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	200c      	movs	r0, #12
 800127e:	f004 f8e0 	bl	8005442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001282:	200c      	movs	r0, #12
 8001284:	f004 f8f7 	bl	8005476 <HAL_NVIC_EnableIRQ>

}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	58024400 	.word	0x58024400

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <MX_GPIO_Init+0x170>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <MX_GPIO_Init+0x170>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <MX_GPIO_Init+0x170>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <MX_GPIO_Init+0x170>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <MX_GPIO_Init+0x170>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <MX_GPIO_Init+0x170>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <MX_GPIO_Init+0x170>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a3e      	ldr	r2, [pc, #248]	; (8001404 <MX_GPIO_Init+0x170>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <MX_GPIO_Init+0x170>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <MX_GPIO_Init+0x170>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a36      	ldr	r2, [pc, #216]	; (8001404 <MX_GPIO_Init+0x170>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <MX_GPIO_Init+0x170>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <MX_GPIO_Init+0x170>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <MX_GPIO_Init+0x170>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <MX_GPIO_Init+0x170>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_GPIO_Init+0x170>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <MX_GPIO_Init+0x170>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <MX_GPIO_Init+0x170>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800137c:	2200      	movs	r2, #0
 800137e:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <MX_GPIO_Init+0x174>)
 8001384:	f007 fb3a 	bl	80089fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_GPIO_Init+0x178>)
 8001390:	f007 fb34 	bl	80089fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001394:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001398:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4816      	ldr	r0, [pc, #88]	; (8001408 <MX_GPIO_Init+0x174>)
 80013ae:	f007 f87b 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_GPIO_Init+0x17c>)
 80013ca:	f007 f86d 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <MX_GPIO_Init+0x178>)
 80013e8:	f007 f85e 	bl	80084a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2028      	movs	r0, #40	; 0x28
 80013f2:	f004 f826 	bl	8005442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013f6:	2028      	movs	r0, #40	; 0x28
 80013f8:	f004 f83d 	bl	8005476 <HAL_NVIC_EnableIRQ>

}
 80013fc:	bf00      	nop
 80013fe:	3730      	adds	r7, #48	; 0x30
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58024400 	.word	0x58024400
 8001408:	58021000 	.word	0x58021000
 800140c:	58020400 	.word	0x58020400
 8001410:	58020800 	.word	0x58020800

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>

0800141e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <_ZN3ros3MsgC1Ev+0x1c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	0800fe20 	.word	0x0800fe20

08001460 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
      data()
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ffe8 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ffcf 	bl	800141e <_ZN3ros4TimeC1Ev>
    {
    }
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800fe08 	.word	0x0800fe08

08001490 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6859      	ldr	r1, [r3, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	0a19      	lsrs	r1, r3, #8
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	0c19      	lsrs	r1, r3, #16
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3302      	adds	r3, #2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	b2ca      	uxtb	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	0e19      	lsrs	r1, r3, #24
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3303      	adds	r3, #3
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3304      	adds	r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6899      	ldr	r1, [r3, #8]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	0a19      	lsrs	r1, r3, #8
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3301      	adds	r3, #1
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	4413      	add	r3, r2
 8001504:	b2ca      	uxtb	r2, r1
 8001506:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	0c19      	lsrs	r1, r3, #16
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3302      	adds	r3, #2
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	0e19      	lsrs	r1, r3, #24
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3303      	adds	r3, #3
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4413      	add	r3, r2
 8001528:	b2ca      	uxtb	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3304      	adds	r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
      return offset;
 8001532:	68fb      	ldr	r3, [r7, #12]
    }
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	440b      	add	r3, r1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3302      	adds	r3, #2
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3303      	adds	r3, #3
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	440b      	add	r3, r1
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	061b      	lsls	r3, r3, #24
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	6839      	ldr	r1, [r7, #0]
 80015bc:	440b      	add	r3, r1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3302      	adds	r3, #2
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	440b      	add	r3, r1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	041b      	lsls	r3, r3, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3303      	adds	r3, #3
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	440b      	add	r3, r1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3304      	adds	r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]
     return offset;
 80015fa:	68fb      	ldr	r3, [r7, #12]
    }
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	0800fb78 	.word	0x0800fb78

08001624 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	0800fb8c 	.word	0x0800fb8c

08001640 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fef8 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	809a      	strh	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    {
    }
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0800fdf0 	.word	0x0800fdf0
 8001684:	0800fbb0 	.word	0x0800fbb0

08001688 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	8899      	ldrh	r1, [r3, #4]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	b2ca      	uxtb	r2, r1
 80016a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	889b      	ldrh	r3, [r3, #4]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b299      	uxth	r1, r3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3301      	adds	r3, #1
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	3302      	adds	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe24 	bl	8000310 <strlen>
 80016c8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	69b9      	ldr	r1, [r7, #24]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fe54 	bl	8003380 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3304      	adds	r3, #4
 80016dc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	18d0      	adds	r0, r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4619      	mov	r1, r3
 80016ec:	f00e f8a0 	bl	800f830 <memcpy>
      offset += length_topic_name;
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4413      	add	r3, r2
 80016f6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fe07 	bl	8000310 <strlen>
 8001702:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	6979      	ldr	r1, [r7, #20]
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fe37 	bl	8003380 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	18d0      	adds	r0, r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4619      	mov	r1, r3
 8001726:	f00e f883 	bl	800f830 <memcpy>
      offset += length_message_type;
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	4413      	add	r3, r2
 8001730:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fdea 	bl	8000310 <strlen>
 800173c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fe1a 	bl	8003380 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	3304      	adds	r3, #4
 8001750:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	18d0      	adds	r0, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4619      	mov	r1, r3
 8001760:	f00e f866 	bl	800f830 <memcpy>
      offset += length_md5sum;
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4413      	add	r3, r2
 800176a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4413      	add	r3, r2
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	0a19      	lsrs	r1, r3, #8
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0c19      	lsrs	r1, r3, #16
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3302      	adds	r3, #2
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0e19      	lsrs	r1, r3, #24
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3303      	adds	r3, #3
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	61fb      	str	r3, [r7, #28]
      return offset;
 80017b4:	69fb      	ldr	r3, [r7, #28]
    }
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017be:	b580      	push	{r7, lr}
 80017c0:	b08a      	sub	sp, #40	; 0x28
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	889b      	ldrh	r3, [r3, #4]
 80017de:	b21a      	sxth	r2, r3
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	3301      	adds	r3, #1
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	440b      	add	r3, r1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3302      	adds	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	441a      	add	r2, r3
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fdd6 	bl	80033bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3304      	adds	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	4413      	add	r3, r2
 8001820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	441a      	add	r2, r3
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3b01      	subs	r3, #1
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	440b      	add	r3, r1
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3301      	adds	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	e7ec      	b.n	800181a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4413      	add	r3, r2
 8001846:	3b01      	subs	r3, #1
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	4413      	add	r3, r2
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	3b01      	subs	r3, #1
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	441a      	add	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	441a      	add	r2, r3
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fda3 	bl	80033bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	3304      	adds	r3, #4
 800187a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	6a3a      	ldr	r2, [r7, #32]
 8001888:	429a      	cmp	r2, r3
 800188a:	d20c      	bcs.n	80018a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	441a      	add	r2, r3
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	3b01      	subs	r3, #1
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	440b      	add	r3, r1
 800189a:	7812      	ldrb	r2, [r2, #0]
 800189c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	3301      	adds	r3, #1
 80018a2:	623b      	str	r3, [r7, #32]
 80018a4:	e7ec      	b.n	8001880 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	3b01      	subs	r3, #1
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	441a      	add	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4413      	add	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	441a      	add	r2, r3
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 fd70 	bl	80033bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	3304      	adds	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d20c      	bcs.n	800190c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	441a      	add	r2, r3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	440b      	add	r3, r1
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3301      	adds	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e7ec      	b.n	80018e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4413      	add	r3, r2
 8001912:	3b01      	subs	r3, #1
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	3b01      	subs	r3, #1
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	441a      	add	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	440a      	add	r2, r1
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	3301      	adds	r3, #1
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	440b      	add	r3, r1
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	4313      	orrs	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3302      	adds	r3, #2
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	440b      	add	r3, r1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	4313      	orrs	r3, r2
 8001964:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	3303      	adds	r3, #3
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	440b      	add	r3, r1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	061b      	lsls	r3, r3, #24
 8001974:	4313      	orrs	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	3304      	adds	r3, #4
 8001982:	61bb      	str	r3, [r7, #24]
     return offset;
 8001984:	69bb      	ldr	r3, [r7, #24]
    }
 8001986:	4618      	mov	r0, r3
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	0800fbb4 	.word	0x0800fbb4

080019ac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	0800fbd0 	.word	0x0800fbd0

080019c8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fd34 	bl	8001440 <_ZN3ros3MsgC1Ev>
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	711a      	strb	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80019e8:	609a      	str	r2, [r3, #8]
    {
    }
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	0800fdd8 	.word	0x0800fdd8
 80019f8:	0800fbb0 	.word	0x0800fbb0

080019fc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	7912      	ldrb	r2, [r2, #4]
 8001a14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fc75 	bl	8000310 <strlen>
 8001a26:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fca5 	bl	8003380 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	18d0      	adds	r0, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f00d fef1 	bl	800f830 <memcpy>
      offset += length_msg;
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a56:	68fb      	ldr	r3, [r7, #12]
    }
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	441a      	add	r2, r3
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fc95 	bl	80033bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	3304      	adds	r3, #4
 8001a96:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d20c      	bcs.n	8001ac2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	441a      	add	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e7ec      	b.n	8001a9c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	441a      	add	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
     return offset;
 8001ae6:	693b      	ldr	r3, [r7, #16]
    }
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	0800fbf4 	.word	0x0800fbf4

08001b0c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	0800fc08 	.word	0x0800fc08

08001b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fc84 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	0800fdc0 	.word	0x0800fdc0

08001b70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	b2ca      	uxtb	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0a19      	lsrs	r1, r3, #8
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0c19      	lsrs	r1, r3, #16
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	b2ca      	uxtb	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	0e19      	lsrs	r1, r3, #24
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3303      	adds	r3, #3
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d22b      	bcs.n	8001c2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	0a19      	lsrs	r1, r3, #8
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2ca      	uxtb	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	0c19      	lsrs	r1, r3, #16
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	3302      	adds	r3, #2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	0e19      	lsrs	r1, r3, #24
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3303      	adds	r3, #3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	3304      	adds	r3, #4
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	e7ce      	b.n	8001bcc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6919      	ldr	r1, [r3, #16]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	b2ca      	uxtb	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	0a19      	lsrs	r1, r3, #8
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	0c19      	lsrs	r1, r3, #16
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3302      	adds	r3, #2
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2ca      	uxtb	r2, r1
 8001c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	0e19      	lsrs	r1, r3, #24
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3303      	adds	r3, #3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3304      	adds	r3, #4
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d22b      	bcs.n	8001cde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b2ca      	uxtb	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	0a19      	lsrs	r1, r3, #8
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0c19      	lsrs	r1, r3, #16
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b2ca      	uxtb	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	0e19      	lsrs	r1, r3, #24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	e7ce      	b.n	8001c7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69d9      	ldr	r1, [r3, #28]
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b2ca      	uxtb	r2, r1
 8001cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	0a19      	lsrs	r1, r3, #8
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	0c19      	lsrs	r1, r3, #16
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	3302      	adds	r3, #2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	0e19      	lsrs	r1, r3, #24
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3303      	adds	r3, #3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3304      	adds	r3, #4
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d228      	bcs.n	8001d88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fae4 	bl	8000310 <strlen>
 8001d48:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fb14 	bl	8003380 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	18d0      	adds	r0, r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4619      	mov	r1, r3
 8001d74:	f00d fd5c 	bl	800f830 <memcpy>
      offset += length_stringsi;
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	e7d1      	b.n	8001d2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b08e      	sub	sp, #56	; 0x38
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	3301      	adds	r3, #1
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	6a3a      	ldr	r2, [r7, #32]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	6a3a      	ldr	r2, [r7, #32]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	6a3a      	ldr	r2, [r7, #32]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	3304      	adds	r3, #4
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	6a3a      	ldr	r2, [r7, #32]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d90a      	bls.n	8001e06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f00d fd2e 	bl	800f85c <realloc>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a3a      	ldr	r2, [r7, #32]
 8001e0a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d236      	bcs.n	8001e88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	440a      	add	r2, r1
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	3301      	adds	r3, #1
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	440b      	add	r3, r1
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	3302      	adds	r3, #2
 8001e44:	6839      	ldr	r1, [r7, #0]
 8001e46:	440b      	add	r3, r1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	3303      	adds	r3, #3
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	440b      	add	r3, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e82:	3301      	adds	r3, #1
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
 8001e86:	e7c3      	b.n	8001e10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	3301      	adds	r3, #1
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb8:	3303      	adds	r3, #3
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	3304      	adds	r3, #4
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d90a      	bls.n	8001eee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f00d fcba 	bl	800f85c <realloc>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d236      	bcs.n	8001f70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	440a      	add	r2, r1
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	3301      	adds	r3, #1
 8001f1a:	6839      	ldr	r1, [r7, #0]
 8001f1c:	440b      	add	r3, r1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	440b      	add	r3, r1
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	041b      	lsls	r3, r3, #16
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	440b      	add	r3, r1
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	3304      	adds	r3, #4
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	3214      	adds	r2, #20
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6e:	e7c3      	b.n	8001ef8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	3302      	adds	r3, #2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d90a      	bls.n	8001fd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f00d fc46 	bl	800f85c <realloc>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d23f      	bcs.n	800206a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	441a      	add	r2, r3
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 f9e0 	bl	80033bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffe:	3304      	adds	r3, #4
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200e:	429a      	cmp	r2, r3
 8002010:	d20c      	bcs.n	800202c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	441a      	add	r2, r3
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3b01      	subs	r3, #1
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	440b      	add	r3, r1
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	3301      	adds	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e7ec      	b.n	8002006 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800202c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	3b01      	subs	r3, #1
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	3b01      	subs	r3, #1
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	441a      	add	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	3220      	adds	r2, #32
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	3301      	adds	r3, #1
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
 8002068:	e7ba      	b.n	8001fe0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800206c:	4618      	mov	r0, r3
 800206e:	3738      	adds	r7, #56	; 0x38
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	0800fd14 	.word	0x0800fd14

08002090 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0800fc2c 	.word	0x0800fc2c

080020ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68d8      	ldr	r0, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6891      	ldr	r1, [r2, #8]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4798      	blx	r3
 80020f8:	4603      	mov	r3, r0
  };
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
  }
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a42      	ldr	r2, [pc, #264]	; (8002238 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d068      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a40      	ldr	r2, [pc, #256]	; (800223c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d061      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d05a      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d053      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d04c      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a36      	ldr	r2, [pc, #216]	; (800224c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d045      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a33      	ldr	r2, [pc, #204]	; (8002250 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d03e      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d037      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d030      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2c      	ldr	r2, [pc, #176]	; (800225c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d029      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a27      	ldr	r2, [pc, #156]	; (8002264 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d01b      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a24      	ldr	r2, [pc, #144]	; (8002268 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d014      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a22      	ldr	r2, [pc, #136]	; (800226c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d006      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d109      	bne.n	8002218 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002216:	e008      	b.n	800222a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40020010 	.word	0x40020010
 800223c:	40020028 	.word	0x40020028
 8002240:	40020040 	.word	0x40020040
 8002244:	40020058 	.word	0x40020058
 8002248:	40020070 	.word	0x40020070
 800224c:	40020088 	.word	0x40020088
 8002250:	400200a0 	.word	0x400200a0
 8002254:	400200b8 	.word	0x400200b8
 8002258:	40020410 	.word	0x40020410
 800225c:	40020428 	.word	0x40020428
 8002260:	40020440 	.word	0x40020440
 8002264:	40020458 	.word	0x40020458
 8002268:	40020470 	.word	0x40020470
 800226c:	40020488 	.word	0x40020488
 8002270:	400204a0 	.word	0x400204a0
 8002274:	400204b8 	.word	0x400204b8

08002278 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	461a      	mov	r2, r3
 8002296:	2300      	movs	r3, #0
 8002298:	6093      	str	r3, [r2, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	461a      	mov	r2, r3
 80022a2:	2300      	movs	r3, #0
 80022a4:	60d3      	str	r3, [r2, #12]
    }
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	240004bc 	.word	0x240004bc

080022b8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f804 	bl	80022ce <_ZN13STM32Hardware10reset_rbufEv>
    }
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022e2:	4619      	mov	r1, r3
 80022e4:	f00a fbea 	bl	800cabc <HAL_UART_Receive_DMA>
    }
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff09 	bl	800211c <_ZN13STM32Hardware10getRdmaIndEv>
 800230a:	4603      	mov	r3, r0
 800230c:	429c      	cmp	r4, r3
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002320:	1c59      	adds	r1, r3, #1
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002336:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002340:	68fb      	ldr	r3, [r7, #12]
    }
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
	...

0800234c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235c:	2b20      	cmp	r3, #32
 800235e:	d108      	bne.n	8002372 <_ZN13STM32Hardware5flushEv+0x26>
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f083 0301 	eor.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <_ZN13STM32Hardware5flushEv+0x26>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <_ZN13STM32Hardware5flushEv+0x28>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d049      	beq.n	800240c <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	d039      	beq.n	8002406 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d20c      	bcs.n	80023c0 <_ZN13STM32Hardware5flushEv+0x74>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	e007      	b.n	80023d0 <_ZN13STM32Hardware5flushEv+0x84>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	89fa      	ldrh	r2, [r7, #14]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f00a fad5 	bl	800c998 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	4413      	add	r3, r2
 80023fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002404:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002406:	4b03      	ldr	r3, [pc, #12]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
      }
    }
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2400063c 	.word	0x2400063c

08002418 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
      int n = length;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242e:	bfa8      	it	ge
 8002430:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002434:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4293      	cmp	r3, r2
 8002446:	bf28      	it	cs
 8002448:	4613      	movcs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	4618      	mov	r0, r3
 8002462:	f00d f9e5 	bl	800f830 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4413      	add	r3, r2
 8002472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	429a      	cmp	r2, r3
 8002484:	d00b      	beq.n	800249e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f603 0008 	addw	r0, r3, #2056	; 0x808
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	18d1      	adds	r1, r2, r3
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	461a      	mov	r2, r3
 800249a:	f00d f9c9 	bl	800f830 <memcpy>
      }

      flush();
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff54 	bl	800234c <_ZN13STM32Hardware5flushEv>
    }
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	f002 feba 	bl	800522c <HAL_GetTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ffb6 	bl	8001440 <_ZN3ros3MsgC1Ev>
 80024d4:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	0800fd7c 	.word	0x0800fd7c

08002514 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002514:	b480      	push	{r7}
 8002516:	b08b      	sub	sp, #44	; 0x2c
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002528:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800252c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002532:	6838      	ldr	r0, [r7, #0]
 8002534:	4401      	add	r1, r0
 8002536:	b2d3      	uxtb	r3, r2
 8002538:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800253a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	0a02      	lsrs	r2, r0, #8
 8002548:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800254c:	0a0b      	lsrs	r3, r1, #8
 800254e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002550:	3101      	adds	r1, #1
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	4401      	add	r1, r0
 8002556:	b2d3      	uxtb	r3, r2
 8002558:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800255a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	0c02      	lsrs	r2, r0, #16
 8002568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800256c:	0c0b      	lsrs	r3, r1, #16
 800256e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002570:	3102      	adds	r1, #2
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	4401      	add	r1, r0
 8002576:	b2d3      	uxtb	r3, r2
 8002578:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800257a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	0e02      	lsrs	r2, r0, #24
 8002588:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800258c:	0e0b      	lsrs	r3, r1, #24
 800258e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002590:	3103      	adds	r1, #3
 8002592:	6838      	ldr	r0, [r7, #0]
 8002594:	4401      	add	r1, r0
 8002596:	b2d3      	uxtb	r3, r2
 8002598:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800259a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	000a      	movs	r2, r1
 80025a8:	2300      	movs	r3, #0
 80025aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ac:	3104      	adds	r1, #4
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	4401      	add	r1, r0
 80025b2:	b2d3      	uxtb	r3, r2
 80025b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80025b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	0a0a      	lsrs	r2, r1, #8
 80025c4:	2300      	movs	r3, #0
 80025c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c8:	3105      	adds	r1, #5
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	4401      	add	r1, r0
 80025ce:	b2d3      	uxtb	r3, r2
 80025d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80025d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	0c0a      	lsrs	r2, r1, #16
 80025e0:	2300      	movs	r3, #0
 80025e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e4:	3106      	adds	r1, #6
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	4401      	add	r1, r0
 80025ea:	b2d3      	uxtb	r3, r2
 80025ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80025ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	0e0a      	lsrs	r2, r1, #24
 80025fc:	2300      	movs	r3, #0
 80025fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002600:	3107      	adds	r1, #7
 8002602:	6838      	ldr	r0, [r7, #0]
 8002604:	4401      	add	r1, r0
 8002606:	b2d3      	uxtb	r3, r2
 8002608:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	3308      	adds	r3, #8
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002616:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800261a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800261e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002620:	6838      	ldr	r0, [r7, #0]
 8002622:	4401      	add	r1, r0
 8002624:	b2d3      	uxtb	r3, r2
 8002626:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002628:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	0a02      	lsrs	r2, r0, #8
 8002636:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800263a:	0a0b      	lsrs	r3, r1, #8
 800263c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263e:	3101      	adds	r1, #1
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	4401      	add	r1, r0
 8002644:	b2d3      	uxtb	r3, r2
 8002646:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002648:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	0c02      	lsrs	r2, r0, #16
 8002656:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800265a:	0c0b      	lsrs	r3, r1, #16
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	3102      	adds	r1, #2
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	4401      	add	r1, r0
 8002664:	b2d3      	uxtb	r3, r2
 8002666:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002668:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	0e02      	lsrs	r2, r0, #24
 8002676:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800267a:	0e0b      	lsrs	r3, r1, #24
 800267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267e:	3103      	adds	r1, #3
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	4401      	add	r1, r0
 8002684:	b2d3      	uxtb	r3, r2
 8002686:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002688:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	000a      	movs	r2, r1
 8002696:	2300      	movs	r3, #0
 8002698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269a:	3104      	adds	r1, #4
 800269c:	6838      	ldr	r0, [r7, #0]
 800269e:	4401      	add	r1, r0
 80026a0:	b2d3      	uxtb	r3, r2
 80026a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80026a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	0a0a      	lsrs	r2, r1, #8
 80026b2:	2300      	movs	r3, #0
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	3105      	adds	r1, #5
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	4401      	add	r1, r0
 80026bc:	b2d3      	uxtb	r3, r2
 80026be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80026c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	0c0a      	lsrs	r2, r1, #16
 80026ce:	2300      	movs	r3, #0
 80026d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d2:	3106      	adds	r1, #6
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	4401      	add	r1, r0
 80026d8:	b2d3      	uxtb	r3, r2
 80026da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80026dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	0e0a      	lsrs	r2, r1, #24
 80026ea:	2300      	movs	r3, #0
 80026ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ee:	3107      	adds	r1, #7
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	4401      	add	r1, r0
 80026f4:	b2d3      	uxtb	r3, r2
 80026f6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	3308      	adds	r3, #8
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002704:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800270c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	4401      	add	r1, r0
 8002712:	b2d3      	uxtb	r3, r2
 8002714:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	0a02      	lsrs	r2, r0, #8
 8002724:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002728:	0a0b      	lsrs	r3, r1, #8
 800272a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272c:	3101      	adds	r1, #1
 800272e:	6838      	ldr	r0, [r7, #0]
 8002730:	4401      	add	r1, r0
 8002732:	b2d3      	uxtb	r3, r2
 8002734:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002736:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	0c02      	lsrs	r2, r0, #16
 8002744:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002748:	0c0b      	lsrs	r3, r1, #16
 800274a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274c:	3102      	adds	r1, #2
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	4401      	add	r1, r0
 8002752:	b2d3      	uxtb	r3, r2
 8002754:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	0e02      	lsrs	r2, r0, #24
 8002764:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002768:	0e0b      	lsrs	r3, r1, #24
 800276a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276c:	3103      	adds	r1, #3
 800276e:	6838      	ldr	r0, [r7, #0]
 8002770:	4401      	add	r1, r0
 8002772:	b2d3      	uxtb	r3, r2
 8002774:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	000a      	movs	r2, r1
 8002784:	2300      	movs	r3, #0
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	3104      	adds	r1, #4
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	4401      	add	r1, r0
 800278e:	b2d3      	uxtb	r3, r2
 8002790:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	0a0a      	lsrs	r2, r1, #8
 80027a0:	2300      	movs	r3, #0
 80027a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a4:	3105      	adds	r1, #5
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	4401      	add	r1, r0
 80027aa:	b2d3      	uxtb	r3, r2
 80027ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80027ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	0c0a      	lsrs	r2, r1, #16
 80027bc:	2300      	movs	r3, #0
 80027be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c0:	3106      	adds	r1, #6
 80027c2:	6838      	ldr	r0, [r7, #0]
 80027c4:	4401      	add	r1, r0
 80027c6:	b2d3      	uxtb	r3, r2
 80027c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80027ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	0e0a      	lsrs	r2, r1, #24
 80027d8:	2300      	movs	r3, #0
 80027da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027dc:	3107      	adds	r1, #7
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	4401      	add	r1, r0
 80027e2:	b2d3      	uxtb	r3, r2
 80027e4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3308      	adds	r3, #8
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027ee:	4618      	mov	r0, r3
 80027f0:	372c      	adds	r7, #44	; 0x2c
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027fa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027fe:	b0eb      	sub	sp, #428	; 0x1ac
 8002800:	af00      	add	r7, sp, #0
 8002802:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002806:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800281c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002820:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002824:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2200      	movs	r2, #0
 8002830:	461c      	mov	r4, r3
 8002832:	4615      	mov	r5, r2
 8002834:	ea40 0804 	orr.w	r8, r0, r4
 8002838:	ea41 0905 	orr.w	r9, r1, r5
 800283c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002840:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002844:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2200      	movs	r2, #0
 8002856:	469a      	mov	sl, r3
 8002858:	4693      	mov	fp, r2
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002866:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800286a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800286e:	ea40 0402 	orr.w	r4, r0, r2
 8002872:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002876:	430b      	orrs	r3, r1
 8002878:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800287c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002880:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002884:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002888:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800289e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80028ae:	464c      	mov	r4, r9
 80028b0:	0423      	lsls	r3, r4, #16
 80028b2:	4644      	mov	r4, r8
 80028b4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80028b8:	4644      	mov	r4, r8
 80028ba:	0422      	lsls	r2, r4, #16
 80028bc:	ea40 0402 	orr.w	r4, r0, r2
 80028c0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80028c4:	430b      	orrs	r3, r1
 80028c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80028ca:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80028ce:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028d2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028da:	1cda      	adds	r2, r3, #3
 80028dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028e0:	4413      	add	r3, r2
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80028ec:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80028f0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80028f4:	4623      	mov	r3, r4
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80028fc:	4623      	mov	r3, r4
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002904:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002908:	4623      	mov	r3, r4
 800290a:	4303      	orrs	r3, r0
 800290c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002910:	462b      	mov	r3, r5
 8002912:	430b      	orrs	r3, r1
 8002914:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002918:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800291c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002920:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002924:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002928:	1d1a      	adds	r2, r3, #4
 800292a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800293a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800294a:	0023      	movs	r3, r4
 800294c:	2200      	movs	r2, #0
 800294e:	ea40 0402 	orr.w	r4, r0, r2
 8002952:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002956:	430b      	orrs	r3, r1
 8002958:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800295c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002960:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002964:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002968:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800296c:	1d5a      	adds	r2, r3, #5
 800296e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2200      	movs	r2, #0
 800297a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800297e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800298e:	0223      	lsls	r3, r4, #8
 8002990:	2200      	movs	r2, #0
 8002992:	ea40 0402 	orr.w	r4, r0, r2
 8002996:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800299a:	430b      	orrs	r3, r1
 800299c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80029a0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80029a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80029a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b0:	1d9a      	adds	r2, r3, #6
 80029b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029c2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80029d2:	0423      	lsls	r3, r4, #16
 80029d4:	2200      	movs	r2, #0
 80029d6:	ea40 0402 	orr.w	r4, r0, r2
 80029da:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80029de:	430b      	orrs	r3, r1
 80029e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029e4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80029e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80029ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f4:	1dda      	adds	r2, r3, #7
 80029f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002a06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002a16:	0623      	lsls	r3, r4, #24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	ea40 0402 	orr.w	r4, r0, r2
 8002a1e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002a22:	430b      	orrs	r3, r1
 8002a24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a28:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002a2c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002a30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a34:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a38:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002a3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a40:	3308      	adds	r3, #8
 8002a42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a56:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a6a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002a6e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002a72:	4623      	mov	r3, r4
 8002a74:	4303      	orrs	r3, r0
 8002a76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a82:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002a86:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002aa4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002ab4:	464c      	mov	r4, r9
 8002ab6:	0223      	lsls	r3, r4, #8
 8002ab8:	4644      	mov	r4, r8
 8002aba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002abe:	4644      	mov	r4, r8
 8002ac0:	0222      	lsls	r2, r4, #8
 8002ac2:	ea40 0402 	orr.w	r4, r0, r2
 8002ac6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002aca:	430b      	orrs	r3, r1
 8002acc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ad0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002ad4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ad8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ae0:	1c9a      	adds	r2, r3, #2
 8002ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002b02:	464c      	mov	r4, r9
 8002b04:	0423      	lsls	r3, r4, #16
 8002b06:	4644      	mov	r4, r8
 8002b08:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b0c:	4644      	mov	r4, r8
 8002b0e:	0422      	lsls	r2, r4, #16
 8002b10:	ea40 0402 	orr.w	r4, r0, r2
 8002b14:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b1e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002b22:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b2e:	1cda      	adds	r2, r3, #3
 8002b30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b40:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b44:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002b48:	4623      	mov	r3, r4
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b50:	4623      	mov	r3, r4
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b58:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002b5c:	4623      	mov	r3, r4
 8002b5e:	4303      	orrs	r3, r0
 8002b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b64:	462b      	mov	r3, r5
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b6c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002b70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b7c:	1d1a      	adds	r2, r3, #4
 8002b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b8e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002b9e:	0023      	movs	r3, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	ea40 0402 	orr.w	r4, r0, r2
 8002ba6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002baa:	430b      	orrs	r3, r1
 8002bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002bb0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002bb4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002bb8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc0:	1d5a      	adds	r2, r3, #5
 8002bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bd2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002be2:	0223      	lsls	r3, r4, #8
 8002be4:	2200      	movs	r2, #0
 8002be6:	ea40 0402 	orr.w	r4, r0, r2
 8002bea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bf4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002bf8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002bfc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c04:	1d9a      	adds	r2, r3, #6
 8002c06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002c26:	0423      	lsls	r3, r4, #16
 8002c28:	2200      	movs	r2, #0
 8002c2a:	ea40 0402 	orr.w	r4, r0, r2
 8002c2e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002c32:	430b      	orrs	r3, r1
 8002c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c38:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002c3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c48:	1dda      	adds	r2, r3, #7
 8002c4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002c6a:	0623      	lsls	r3, r4, #24
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	ea40 0402 	orr.w	r4, r0, r2
 8002c72:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002c76:	430b      	orrs	r3, r1
 8002c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c7c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002c80:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002c84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c88:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c8c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002c90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ca6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002caa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002cae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cbe:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002cc2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	4303      	orrs	r3, r0
 8002cca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ccc:	462b      	mov	r3, r5
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cd2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002cd6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002cde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ce8:	4413      	add	r3, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2200      	movs	r2, #0
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
 8002cf2:	677a      	str	r2, [r7, #116]	; 0x74
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d00:	464c      	mov	r4, r9
 8002d02:	0223      	lsls	r3, r4, #8
 8002d04:	4644      	mov	r4, r8
 8002d06:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d0a:	4644      	mov	r4, r8
 8002d0c:	0222      	lsls	r2, r4, #8
 8002d0e:	ea40 0402 	orr.w	r4, r0, r2
 8002d12:	66bc      	str	r4, [r7, #104]	; 0x68
 8002d14:	430b      	orrs	r3, r1
 8002d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d18:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002d1c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d20:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d28:	1c9a      	adds	r2, r3, #2
 8002d2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2200      	movs	r2, #0
 8002d36:	663b      	str	r3, [r7, #96]	; 0x60
 8002d38:	667a      	str	r2, [r7, #100]	; 0x64
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d46:	464c      	mov	r4, r9
 8002d48:	0423      	lsls	r3, r4, #16
 8002d4a:	4644      	mov	r4, r8
 8002d4c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d50:	4644      	mov	r4, r8
 8002d52:	0422      	lsls	r2, r4, #16
 8002d54:	ea40 0402 	orr.w	r4, r0, r2
 8002d58:	65bc      	str	r4, [r7, #88]	; 0x58
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d5e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002d62:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d66:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d6e:	1cda      	adds	r2, r3, #3
 8002d70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d7e:	657a      	str	r2, [r7, #84]	; 0x54
 8002d80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002d84:	4623      	mov	r3, r4
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002d94:	4623      	mov	r3, r4
 8002d96:	4303      	orrs	r3, r0
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002da0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002da4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002da8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002db0:	1d1a      	adds	r2, r3, #4
 8002db2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002dcc:	0023      	movs	r3, r4
 8002dce:	2200      	movs	r2, #0
 8002dd0:	ea40 0402 	orr.w	r4, r0, r2
 8002dd4:	633c      	str	r4, [r7, #48]	; 0x30
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dda:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002dde:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002de2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002de6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dea:	1d5a      	adds	r2, r3, #5
 8002dec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2200      	movs	r2, #0
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002e06:	0223      	lsls	r3, r4, #8
 8002e08:	2200      	movs	r2, #0
 8002e0a:	ea40 0402 	orr.w	r4, r0, r2
 8002e0e:	623c      	str	r4, [r7, #32]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
 8002e14:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002e18:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e1c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e24:	3306      	adds	r3, #6
 8002e26:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	61fa      	str	r2, [r7, #28]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	69bc      	ldr	r4, [r7, #24]
 8002e40:	0423      	lsls	r3, r4, #16
 8002e42:	2200      	movs	r2, #0
 8002e44:	ea40 0402 	orr.w	r4, r0, r2
 8002e48:	613c      	str	r4, [r7, #16]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e52:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e56:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e5e:	3307      	adds	r3, #7
 8002e60:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e64:	4413      	add	r3, r2
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	60fa      	str	r2, [r7, #12]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	68bc      	ldr	r4, [r7, #8]
 8002e7a:	0623      	lsls	r3, r4, #24
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	ea40 0402 	orr.w	r4, r0, r2
 8002e82:	603c      	str	r4, [r7, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e8c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002e90:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002e94:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002e98:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002e9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002ea6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002eb6:	4770      	bx	lr

08002eb8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	0800fc50 	.word	0x0800fc50

08002ed4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	0800fc68 	.word	0x0800fc68

08002ef0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe faa0 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8002f00:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3308      	adds	r3, #8
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fada 	bl	80024c4 <_ZN13geometry_msgs7Vector3C1Ev>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3328      	adds	r3, #40	; 0x28
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fad5 	bl	80024c4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0800fd64 	.word	0x0800fd64

08002f28 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f103 0008 	add.w	r0, r3, #8
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7ff fae6 	bl	8002514 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7ff fad9 	bl	8002514 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    }
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f103 0008 	add.w	r0, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7ff fc33 	bl	80027fa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7ff fc26 	bl	80027fa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
     return offset;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    }
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	0800fc8c 	.word	0x0800fc8c

08002fdc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	0800fca0 	.word	0x0800fca0

08002ff8 <_Z8callbackRKN13geometry_msgs5TwistE>:
geometry_msgs::Twist insVel;
ros::Publisher pub("/ins_vel", &insVel);
int timeout = 0;

void callback(const geometry_msgs::Twist &msg)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
//	Vx = vel_World2Car('x', msg.linear.x, msg.linear.y);
//	Vy = vel_World2Car('y', msg.linear.x, msg.linear.y);
//	W = msg.angular.z;
	WX = msg.linear.x;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003006:	491e      	ldr	r1, [pc, #120]	; (8003080 <_Z8callbackRKN13geometry_msgs5TwistE+0x88>)
 8003008:	e9c1 2300 	strd	r2, r3, [r1]
	WY = msg.linear.y;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003012:	491c      	ldr	r1, [pc, #112]	; (8003084 <_Z8callbackRKN13geometry_msgs5TwistE+0x8c>)
 8003014:	e9c1 2300 	strd	r2, r3, [r1]
	WW = msg.angular.z;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800301e:	491a      	ldr	r1, [pc, #104]	; (8003088 <_Z8callbackRKN13geometry_msgs5TwistE+0x90>)
 8003020:	e9c1 2300 	strd	r2, r3, [r1]
	Vx = vel_World2Car('x', WX, WY);
 8003024:	4b16      	ldr	r3, [pc, #88]	; (8003080 <_Z8callbackRKN13geometry_msgs5TwistE+0x88>)
 8003026:	ed93 7b00 	vldr	d7, [r3]
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <_Z8callbackRKN13geometry_msgs5TwistE+0x8c>)
 800302c:	ed93 6b00 	vldr	d6, [r3]
 8003030:	eeb0 1b46 	vmov.f64	d1, d6
 8003034:	eeb0 0b47 	vmov.f64	d0, d7
 8003038:	2078      	movs	r0, #120	; 0x78
 800303a:	f001 f92f 	bl	800429c <vel_World2Car>
 800303e:	eeb0 7b40 	vmov.f64	d7, d0
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <_Z8callbackRKN13geometry_msgs5TwistE+0x94>)
 8003044:	ed83 7b00 	vstr	d7, [r3]
	Vy = vel_World2Car('y', WX, WY);
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <_Z8callbackRKN13geometry_msgs5TwistE+0x88>)
 800304a:	ed93 7b00 	vldr	d7, [r3]
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <_Z8callbackRKN13geometry_msgs5TwistE+0x8c>)
 8003050:	ed93 6b00 	vldr	d6, [r3]
 8003054:	eeb0 1b46 	vmov.f64	d1, d6
 8003058:	eeb0 0b47 	vmov.f64	d0, d7
 800305c:	2079      	movs	r0, #121	; 0x79
 800305e:	f001 f91d 	bl	800429c <vel_World2Car>
 8003062:	eeb0 7b40 	vmov.f64	d7, d0
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <_Z8callbackRKN13geometry_msgs5TwistE+0x98>)
 8003068:	ed83 7b00 	vstr	d7, [r3]
	W = WW;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <_Z8callbackRKN13geometry_msgs5TwistE+0x90>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	4908      	ldr	r1, [pc, #32]	; (8003094 <_Z8callbackRKN13geometry_msgs5TwistE+0x9c>)
 8003074:	e9c1 2300 	strd	r2, r3, [r1]

}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	24001bb8 	.word	0x24001bb8
 8003084:	24001bc0 	.word	0x24001bc0
 8003088:	24001bc8 	.word	0x24001bc8
 800308c:	24001b88 	.word	0x24001b88
 8003090:	24001b90 	.word	0x24001b90
 8003094:	24001b98 	.word	0x24001b98

08003098 <interPub>:
void interPub(void){
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
	insVel.linear.x = rVx;
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <interPub+0x74>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	491b      	ldr	r1, [pc, #108]	; (8003110 <interPub+0x78>)
 80030a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	insVel.linear.y = rVy;
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <interPub+0x7c>)
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	4918      	ldr	r1, [pc, #96]	; (8003110 <interPub+0x78>)
 80030b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	insVel.angular.z = rW;
 80030b4:	4b18      	ldr	r3, [pc, #96]	; (8003118 <interPub+0x80>)
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	4915      	ldr	r1, [pc, #84]	; (8003110 <interPub+0x78>)
 80030bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	insVel.angular.x = odom.x;
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <interPub+0x84>)
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	4912      	ldr	r1, [pc, #72]	; (8003110 <interPub+0x78>)
 80030c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	insVel.angular.y = odom.y;
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <interPub+0x84>)
 80030ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030d2:	490f      	ldr	r1, [pc, #60]	; (8003110 <interPub+0x78>)
 80030d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	insVel.linear.z = odom.theta;
 80030d8:	4b10      	ldr	r3, [pc, #64]	; (800311c <interPub+0x84>)
 80030da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030de:	490c      	ldr	r1, [pc, #48]	; (8003110 <interPub+0x78>)
 80030e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	run_inter0 ++;
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <interPub+0x88>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <interPub+0x88>)
 80030ec:	6013      	str	r3, [r2, #0]

	if(run_inter0 > 1)
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <interPub+0x88>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	dd03      	ble.n	80030fe <interPub+0x66>
		pub.publish(&insVel);
 80030f6:	4906      	ldr	r1, [pc, #24]	; (8003110 <interPub+0x78>)
 80030f8:	480a      	ldr	r0, [pc, #40]	; (8003124 <interPub+0x8c>)
 80030fa:	f7fe ffee 	bl	80020da <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	run_inter1 ++;
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <interPub+0x90>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	4a08      	ldr	r2, [pc, #32]	; (8003128 <interPub+0x90>)
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}
 800310c:	24001ba0 	.word	0x24001ba0
 8003110:	24001bd0 	.word	0x24001bd0
 8003114:	24001ba8 	.word	0x24001ba8
 8003118:	24001bb0 	.word	0x24001bb0
 800311c:	24001c90 	.word	0x24001c90
 8003120:	24001b7c 	.word	0x24001b7c
 8003124:	24001c18 	.word	0x24001c18
 8003128:	24001b80 	.word	0x24001b80

0800312c <_Z13Error_Handlerv>:

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);

/* UART Communication */
void Error_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003130:	b672      	cpsid	i
}
 8003132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003134:	e7fe      	b.n	8003134 <_Z13Error_Handlerv+0x8>
	...

08003138 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 800313c:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800313e:	4a2d      	ldr	r2, [pc, #180]	; (80031f4 <_ZL20MX_USART10_UART_Initv+0xbc>)
 8003140:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8003142:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003148:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800314a:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8003150:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8003156:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 800315c:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800315e:	220c      	movs	r2, #12
 8003160:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003162:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8003168:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800316a:	2200      	movs	r2, #0
 800316c:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003170:	2200      	movs	r2, #0
 8003172:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003174:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003176:	2200      	movs	r2, #0
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800317c:	2200      	movs	r2, #0
 800317e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8003180:	481b      	ldr	r0, [pc, #108]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003182:	f009 fb7d 	bl	800c880 <HAL_UART_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 8003196:	f7ff ffc9 	bl	800312c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800319a:	2100      	movs	r1, #0
 800319c:	4814      	ldr	r0, [pc, #80]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800319e:	f00b fbf1 	bl	800e984 <HAL_UARTEx_SetTxFifoThreshold>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 80031b2:	f7ff ffbb 	bl	800312c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031b6:	2100      	movs	r1, #0
 80031b8:	480d      	ldr	r0, [pc, #52]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80031ba:	f00b fc21 	bl	800ea00 <HAL_UARTEx_SetRxFifoThreshold>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 80031ce:	f7ff ffad 	bl	800312c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80031d2:	4807      	ldr	r0, [pc, #28]	; (80031f0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80031d4:	f00b fb9d 	bl	800e912 <HAL_UARTEx_DisableFifoMode>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf14      	ite	ne
 80031de:	2301      	movne	r3, #1
 80031e0:	2300      	moveq	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 80031e8:	f7ff ffa0 	bl	800312c <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	240004bc 	.word	0x240004bc
 80031f4:	40011c00 	.word	0x40011c00

080031f8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <HAL_UART_ErrorCallback+0x5c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d120      	bne.n	800324a <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 8003208:	4913      	ldr	r1, [pc, #76]	; (8003258 <HAL_UART_ErrorCallback+0x60>)
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 8003216:	4911      	ldr	r1, [pc, #68]	; (800325c <HAL_UART_ErrorCallback+0x64>)
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_UART_ErrorCallback+0x68>)
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 8003232:	4808      	ldr	r0, [pc, #32]	; (8003254 <HAL_UART_ErrorCallback+0x5c>)
 8003234:	f009 fb74 	bl	800c920 <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 8003238:	f7ff ff7e 	bl	8003138 <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 800323c:	4809      	ldr	r0, [pc, #36]	; (8003264 <HAL_UART_ErrorCallback+0x6c>)
 800323e:	f000 f9c1 	bl	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003242:	4603      	mov	r3, r0
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff f837 	bl	80022b8 <_ZN13STM32Hardware4initEv>
    }
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	240004bc 	.word	0x240004bc
 8003258:	24001b88 	.word	0x24001b88
 800325c:	24001b90 	.word	0x24001b90
 8003260:	24001b98 	.word	0x24001b98
 8003264:	24000640 	.word	0x24000640

08003268 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003270:	4805      	ldr	r0, [pc, #20]	; (8003288 <HAL_UART_TxCpltCallback+0x20>)
 8003272:	f000 f9a7 	bl	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003276:	4603      	mov	r3, r0
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff f867 	bl	800234c <_ZN13STM32Hardware5flushEv>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	24000640 	.word	0x24000640

0800328c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003294:	4805      	ldr	r0, [pc, #20]	; (80032ac <HAL_UART_RxCpltCallback+0x20>)
 8003296:	f000 f995 	bl	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800329a:	4603      	mov	r3, r0
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff f816 	bl	80022ce <_ZN13STM32Hardware10reset_rbufEv>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	24000640 	.word	0x24000640

080032b0 <setup>:
void setup(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
    nh.initNode();
 80032b4:	4812      	ldr	r0, [pc, #72]	; (8003300 <setup+0x50>)
 80032b6:	f000 f991 	bl	80035dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 80032ba:	4912      	ldr	r1, [pc, #72]	; (8003304 <setup+0x54>)
 80032bc:	4810      	ldr	r0, [pc, #64]	; (8003300 <setup+0x50>)
 80032be:	f000 f9b6 	bl	800362e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 80032c2:	4911      	ldr	r1, [pc, #68]	; (8003308 <setup+0x58>)
 80032c4:	480e      	ldr	r0, [pc, #56]	; (8003300 <setup+0x50>)
 80032c6:	f000 f9dd 	bl	8003684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    odom.x = 0;		odom.y = 0;		odom.theta = (double)PI/2;
 80032ca:	4910      	ldr	r1, [pc, #64]	; (800330c <setup+0x5c>)
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9c1 2300 	strd	r2, r3, [r1]
 80032d8:	490c      	ldr	r1, [pc, #48]	; (800330c <setup+0x5c>)
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80032e6:	4909      	ldr	r1, [pc, #36]	; (800330c <setup+0x5c>)
 80032e8:	a303      	add	r3, pc, #12	; (adr r3, 80032f8 <setup+0x48>)
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	e9c1 2304 	strd	r2, r3, [r1, #16]

//    W = 10 * 2 * PI / 180;
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	54cadf99 	.word	0x54cadf99
 80032fc:	3ff921fb 	.word	0x3ff921fb
 8003300:	24000640 	.word	0x24000640
 8003304:	24001c30 	.word	0x24001c30
 8003308:	24001c18 	.word	0x24001c18
 800330c:	24001c90 	.word	0x24001c90

08003310 <loop>:
void loop(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
    if(!nh.spinOnce()){
 8003314:	4815      	ldr	r0, [pc, #84]	; (800336c <loop+0x5c>)
 8003316:	f000 f9e5 	bl	80036e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
//    else timeout = 0;
//    if(timeout > 100000){
//    	stop();
//    	timeout = 0;
//    }
    Vx = vel_World2Car('x', WX, WY);
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <loop+0x60>)
 8003320:	ed93 7b00 	vldr	d7, [r3]
 8003324:	4b13      	ldr	r3, [pc, #76]	; (8003374 <loop+0x64>)
 8003326:	ed93 6b00 	vldr	d6, [r3]
 800332a:	eeb0 1b46 	vmov.f64	d1, d6
 800332e:	eeb0 0b47 	vmov.f64	d0, d7
 8003332:	2078      	movs	r0, #120	; 0x78
 8003334:	f000 ffb2 	bl	800429c <vel_World2Car>
 8003338:	eeb0 7b40 	vmov.f64	d7, d0
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <loop+0x68>)
 800333e:	ed83 7b00 	vstr	d7, [r3]
	Vy = vel_World2Car('y', WX, WY);
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <loop+0x60>)
 8003344:	ed93 7b00 	vldr	d7, [r3]
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <loop+0x64>)
 800334a:	ed93 6b00 	vldr	d6, [r3]
 800334e:	eeb0 1b46 	vmov.f64	d1, d6
 8003352:	eeb0 0b47 	vmov.f64	d0, d7
 8003356:	2079      	movs	r0, #121	; 0x79
 8003358:	f000 ffa0 	bl	800429c <vel_World2Car>
 800335c:	eeb0 7b40 	vmov.f64	d7, d0
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <loop+0x6c>)
 8003362:	ed83 7b00 	vstr	d7, [r3]
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	24000640 	.word	0x24000640
 8003370:	24001bb8 	.word	0x24001bb8
 8003374:	24001bc0 	.word	0x24001bc0
 8003378:	24001b88 	.word	0x24001b88
 800337c:	24001b90 	.word	0x24001b90

08003380 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d80d      	bhi.n	80033b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	fa22 f103 	lsr.w	r1, r2, r3
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	b2ca      	uxtb	r2, r1
 80033a6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	e7ee      	b.n	800338e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d811      	bhi.n	80033fa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6839      	ldr	r1, [r7, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	440a      	add	r2, r1
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	4611      	mov	r1, r2
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	00d2      	lsls	r2, r2, #3
 80033e8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3301      	adds	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e7ea      	b.n	80033d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	0800fdac 	.word	0x0800fdac

08003428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ffe8 	bl	8003408 <_ZN3ros15NodeHandleBase_C1Ev>
 8003438:	4a47      	ldr	r2, [pc, #284]	; (8003558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3304      	adds	r3, #4
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe ff18 	bl	8002278 <_ZN13STM32HardwareC1Ev>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	f241 5314 	movw	r3, #5396	; 0x1514
 800345a:	4413      	add	r3, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f7fe fb63 	bl	8001b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b18      	cmp	r3, #24
 800346a:	d80b      	bhi.n	8003484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	2200      	movs	r2, #0
 800347a:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3301      	adds	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e7f0      	b.n	8003466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b18      	cmp	r3, #24
 800348c:	d80a      	bhi.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003496:	2100      	movs	r1, #0
 8003498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	3301      	adds	r3, #1
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	e7f1      	b.n	8003488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ae:	d20b      	bcs.n	80034c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	441a      	add	r2, r3
 80034b6:	f241 0324 	movw	r3, #4132	; 0x1024
 80034ba:	4413      	add	r3, r2
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3301      	adds	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e7ef      	b.n	80034a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d2:	d20b      	bcs.n	80034ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	441a      	add	r2, r3
 80034da:	f241 2324 	movw	r3, #4644	; 0x1224
 80034de:	4413      	add	r3, r2
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3301      	adds	r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	e7ef      	b.n	80034cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f2:	461a      	mov	r2, r3
 80034f4:	2300      	movs	r3, #0
 80034f6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003500:	461a      	mov	r2, r3
 8003502:	2300      	movs	r3, #0
 8003504:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350e:	461a      	mov	r2, r3
 8003510:	2300      	movs	r3, #0
 8003512:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800351c:	461a      	mov	r2, r3
 800351e:	2300      	movs	r3, #0
 8003520:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800352a:	461a      	mov	r2, r3
 800352c:	2300      	movs	r3, #0
 800352e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003538:	461a      	mov	r2, r3
 800353a:	2300      	movs	r3, #0
 800353c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003546:	461a      	mov	r2, r3
 8003548:	2300      	movs	r3, #0
 800354a:	6213      	str	r3, [r2, #32]
  }
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	0800fd50 	.word	0x0800fd50

0800355c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	4a04      	ldr	r2, [pc, #16]	; (8003578 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	0800fd94 	.word	0x0800fd94

0800357c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ffe5 	bl	800355c <_ZN3ros11Subscriber_C1Ev>
 8003592:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3310      	adds	r3, #16
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fca7 	bl	8002ef0 <_ZN13geometry_msgs5TwistC1Ev>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	659a      	str	r2, [r3, #88]	; 0x58
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	609a      	str	r2, [r3, #8]
  };
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	0800fd38 	.word	0x0800fd38

080035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
  }
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe fe65 	bl	80022b8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f4:	461a      	mov	r2, r3
 80035f6:	2300      	movs	r3, #0
 80035f8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003602:	461a      	mov	r2, r3
 8003604:	2300      	movs	r3, #0
 8003606:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003610:	461a      	mov	r2, r3
 8003612:	2300      	movs	r3, #0
 8003614:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361e:	461a      	mov	r2, r3
 8003620:	2300      	movs	r3, #0
 8003622:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b18      	cmp	r3, #24
 8003640:	dc19      	bgt.n	8003676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800364a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003652:	6839      	ldr	r1, [r7, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800365c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	605a      	str	r2, [r3, #4]
        return true;
 800366a:	2301      	movs	r3, #1
 800366c:	e004      	b.n	8003678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3301      	adds	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e7e2      	b.n	800363c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003676:	2300      	movs	r3, #0
  }
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b18      	cmp	r3, #24
 8003696:	dc1e      	bgt.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d111      	bne.n	80036ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	60da      	str	r2, [r3, #12]
        return true;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e004      	b.n	80036d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3301      	adds	r3, #1
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e7dd      	b.n	8003692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80036d6:	2300      	movs	r3, #0
  }
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fedb 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 80036f6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800370a:	4293      	cmp	r3, r2
 800370c:	d905      	bls.n	800371a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003720:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	429a      	cmp	r2, r3
 8003736:	d906      	bls.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	461a      	mov	r2, r3
 8003740:	2300      	movs	r3, #0
 8003742:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d015      	beq.n	800377e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fea8 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad2      	subs	r2, r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	429a      	cmp	r2, r3
 800376c:	bf8c      	ite	hi
 800376e:	2301      	movhi	r3, #1
 8003770:	2300      	movls	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8003778:	f06f 0301 	mvn.w	r3, #1
 800377c:	e226      	b.n	8003bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fdb4 	bl	80022f0 <_ZN13STM32Hardware4readEv>
 8003788:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f2c0 81ff 	blt.w	8003b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003798:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4413      	add	r3, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037a6:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037b4:	2b07      	cmp	r3, #7
 80037b6:	d12d      	bne.n	8003814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037be:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80037ca:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	b2d1      	uxtb	r1, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	441a      	add	r2, r3
 80037d6:	f241 0324 	movw	r3, #4132	; 0x1024
 80037da:	4413      	add	r3, r2
 80037dc:	460a      	mov	r2, r1
 80037de:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80037ea:	3b01      	subs	r3, #1
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037f2:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fc:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1a0      	bne.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380a:	461a      	mov	r2, r3
 800380c:	2308      	movs	r3, #8
 800380e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003812:	e798      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800381e:	2b00      	cmp	r3, #0
 8003820:	d130      	bne.n	8003884 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2bff      	cmp	r3, #255	; 0xff
 8003826:	d112      	bne.n	800384e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800382e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003832:	3301      	adds	r3, #1
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800383a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3314      	adds	r3, #20
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003848:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 800384c:	e77b      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fe2a 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	bf8c      	ite	hi
 8003866:	2301      	movhi	r3, #1
 8003868:	2300      	movls	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f43f af6a 	beq.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 800387e:	f06f 0301 	mvn.w	r3, #1
 8003882:	e1a3      	b.n	8003bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800388a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800388e:	2b01      	cmp	r3, #1
 8003890:	d121      	bne.n	80038d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2bfe      	cmp	r3, #254	; 0xfe
 8003896:	d10b      	bne.n	80038b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038a2:	3301      	adds	r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038aa:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80038ae:	e74a      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b6:	461a      	mov	r2, r3
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c4:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f47f af3c 	bne.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f980 	bl	8003bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80038d4:	e737      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038dc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d120      	bne.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ea:	461a      	mov	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f8:	461a      	mov	r2, r3
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003906:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800390a:	3301      	adds	r3, #1
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003912:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800391c:	461a      	mov	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003924:	e70f      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800392c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003930:	2b03      	cmp	r3, #3
 8003932:	d118      	bne.n	8003966 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	4413      	add	r3, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800394a:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003954:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003958:	3301      	adds	r3, #1
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003960:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003964:	e6ef      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800396c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003970:	2b04      	cmp	r3, #4
 8003972:	d11f      	bne.n	80039b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800397e:	425a      	negs	r2, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	bf58      	it	pl
 8003986:	4253      	negpl	r3, r2
 8003988:	2bff      	cmp	r3, #255	; 0xff
 800398a:	d10b      	bne.n	80039a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003992:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003996:	3301      	adds	r3, #1
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800399e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80039a2:	e6d0      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039aa:	461a      	mov	r2, r3
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80039b2:	e6c8      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ba:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d119      	bne.n	80039f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c8:	461a      	mov	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80039da:	3301      	adds	r3, #1
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039e2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80039f4:	e6a7      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039fc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003a00:	2b06      	cmp	r3, #6
 8003a02:	d123      	bne.n	8003a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	4413      	add	r3, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a1a:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a24:	461a      	mov	r2, r3
 8003a26:	2307      	movs	r3, #7
 8003a28:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a32:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f47f ae85 	bne.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a42:	461a      	mov	r2, r3
 8003a44:	2308      	movs	r3, #8
 8003a46:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003a4a:	e67c      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a52:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	f47f ae75 	bne.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a62:	461a      	mov	r2, r3
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a70:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a74:	425a      	negs	r2, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	bf58      	it	pl
 8003a7c:	4253      	negpl	r3, r2
 8003a7e:	2bff      	cmp	r3, #255	; 0xff
 8003a80:	f47f ae61 	bne.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d116      	bne.n	8003ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f89e 	bl	8003bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f8ba 	bl	8003c12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e085      	b.n	8003bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003aca:	2b0a      	cmp	r3, #10
 8003acc:	d108      	bne.n	8003ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	f241 0324 	movw	r3, #4132	; 0x1024
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f97b 	bl	8003dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003ade:	e632      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d112      	bne.n	8003b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	f241 5314 	movw	r3, #5396	; 0x1514
 8003af4:	4413      	add	r3, r2
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	f241 0224 	movw	r2, #4132	; 0x1024
 8003afc:	440a      	add	r2, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe f946 	bl	8001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8003b12:	e618      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003b1e:	2b0b      	cmp	r3, #11
 8003b20:	d106      	bne.n	8003b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003b2e:	e60a      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b36:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003b3a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f43f adfc 	beq.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b54:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003b58:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003b70:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	f241 0324 	movw	r3, #4132	; 0x1024
 8003b88:	440b      	add	r3, r1
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4790      	blx	r2
    while (true)
 8003b8e:	e5da      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8003b90:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b98:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d014      	beq.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d909      	bls.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f80c 	bl	8003bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8003bca:	2300      	movs	r3, #0
  }
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003bdc:	f107 030c 	add.w	r3, r7, #12
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fd fc3d 	bl	8001460 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f107 020c 	add.w	r2, r7, #12
 8003bf0:	210a      	movs	r1, #10
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
    rt_time = hardware_.time();
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fc56 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003c00:	4602      	mov	r2, r0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c08:	615a      	str	r2, [r3, #20]
  }
 8003c0a:	bf00      	nop
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003c12:	b590      	push	{r4, r7, lr}
 8003c14:	b08b      	sub	sp, #44	; 0x2c
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003c1a:	f107 030c 	add.w	r3, r7, #12
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd fd0e 	bl	8001640 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	2b18      	cmp	r3, #24
 8003c2c:	dc63      	bgt.n	8003cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d056      	beq.n	8003cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	4798      	blx	r3
 8003c90:	4603      	mov	r3, r0
 8003c92:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4608      	mov	r0, r1
 8003cbc:	4798      	blx	r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cc6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681c      	ldr	r4, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe fa10 	bl	8002102 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003ce2:	4601      	mov	r1, r0
 8003ce4:	f107 030c 	add.w	r3, r7, #12
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf4:	e798      	b.n	8003c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	2b18      	cmp	r3, #24
 8003cfe:	dc5f      	bgt.n	8003dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d04:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d053      	beq.n	8003db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d42:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4608      	mov	r0, r1
 8003d52:	4798      	blx	r3
 8003d54:	4603      	mov	r3, r0
 8003d56:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4608      	mov	r0, r1
 8003d78:	4798      	blx	r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d82:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681c      	ldr	r4, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3304      	adds	r3, #4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4608      	mov	r0, r1
 8003daa:	4798      	blx	r3
 8003dac:	4601      	mov	r1, r0
 8003dae:	f107 030c 	add.w	r3, r7, #12
 8003db2:	461a      	mov	r2, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	3301      	adds	r3, #1
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbe:	e79c      	b.n	8003cfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8003dcc:	bf00      	nop
 8003dce:	372c      	adds	r7, #44	; 0x2c
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd90      	pop	{r4, r7, pc}

08003dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fb3c 	bl	8001460 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe fb5d 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003df2:	4602      	mov	r2, r0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003e00:	f107 0308 	add.w	r3, r7, #8
 8003e04:	6839      	ldr	r1, [r7, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fd fb9a 	bl	8001540 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	4915      	ldr	r1, [pc, #84]	; (8003e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003e12:	fba1 1303 	umull	r1, r3, r1, r3
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	4413      	add	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003e1c:	6939      	ldr	r1, [r7, #16]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003e22:	fba3 0302 	umull	r0, r3, r3, r2
 8003e26:	099b      	lsrs	r3, r3, #6
 8003e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e2c:	fb00 f303 	mul.w	r3, r0, r3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	4a0e      	ldr	r2, [pc, #56]	; (8003e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003e34:	fb02 f303 	mul.w	r3, r2, r3
 8003e38:	440b      	add	r3, r1
 8003e3a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003e3c:	f107 0308 	add.w	r3, r7, #8
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f8bf 	bl	8003fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fb2c 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003e54:	4602      	mov	r2, r0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8003e60:	bf00      	nop
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	10624dd3 	.word	0x10624dd3
 8003e6c:	000f4240 	.word	0x000f4240

08003e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b63      	cmp	r3, #99	; 0x63
 8003e80:	dd0b      	ble.n	8003e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e88:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003e8c:	f083 0301 	eor.w	r3, r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e090      	b.n	8003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68f9      	ldr	r1, [r7, #12]
 8003ea2:	f241 2324 	movw	r3, #4644	; 0x1224
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3307      	adds	r3, #7
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4790      	blx	r2
 8003eb0:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb8:	22ff      	movs	r2, #255	; 0xff
 8003eba:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec4:	22fe      	movs	r2, #254	; 0xfe
 8003ec6:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed4:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee8:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef2:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efc:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8003f00:	4413      	add	r3, r2
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	b21b      	sxth	r3, r3
 8003f24:	121b      	asrs	r3, r3, #8
 8003f26:	b21b      	sxth	r3, r3
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f30:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003f38:	2305      	movs	r3, #5
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3306      	adds	r3, #6
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	dc0e      	bgt.n	8003f64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	441a      	add	r2, r3
 8003f4c:	f241 2324 	movw	r3, #4644	; 0x1224
 8003f50:	4413      	add	r3, r2
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e7eb      	b.n	8003f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3307      	adds	r3, #7
 8003f68:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	425a      	negs	r2, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	bf58      	it	pl
 8003f74:	4253      	negpl	r3, r2
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	1c59      	adds	r1, r3, #1
 8003f7c:	6179      	str	r1, [r7, #20]
 8003f7e:	43d2      	mvns	r2, r2
 8003f80:	b2d1      	uxtb	r1, r2
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	441a      	add	r2, r3
 8003f86:	f241 2324 	movw	r3, #4644	; 0x1224
 8003f8a:	4413      	add	r3, r2
 8003f8c:	460a      	mov	r2, r1
 8003f8e:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f96:	dc0b      	bgt.n	8003fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1d18      	adds	r0, r3, #4
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	f241 2324 	movw	r3, #4644	; 0x1224
 8003fa2:	4413      	add	r3, r2
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f7fe fa36 	bl	8002418 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	e005      	b.n	8003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003fb0:	4904      	ldr	r1, [pc, #16]	; (8003fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f84c 	bl	8004050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3720      	adds	r7, #32
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	0800fcc4 	.word	0x0800fcc4

08003fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fa68 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003fdc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4917      	ldr	r1, [pc, #92]	; (8004044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003fe6:	fba1 1303 	umull	r1, r3, r1, r3
 8003fea:	099b      	lsrs	r3, r3, #6
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ff6:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004000:	fba3 0302 	umull	r0, r3, r3, r2
 8004004:	099b      	lsrs	r3, r3, #6
 8004006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800400a:	fb00 f303 	mul.w	r3, r0, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	4a0d      	ldr	r2, [pc, #52]	; (8004048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	1aca      	subs	r2, r1, r3
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 800401a:	4413      	add	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004022:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	f241 0318 	movw	r3, #4120	; 0x1018
 800402a:	4413      	add	r3, r2
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	f241 021c 	movw	r2, #4124	; 0x101c
 8004032:	440a      	add	r2, r1
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc faf4 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	10624dd3 	.word	0x10624dd3
 8004048:	000f4240 	.word	0x000f4240
 800404c:	3b9aca00 	.word	0x3b9aca00

08004050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	2103      	movs	r1, #3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f804 	bl	800406c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	460b      	mov	r3, r1
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800407a:	f107 0314 	add.w	r3, r7, #20
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd fca2 	bl	80019c8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004084:	7afb      	ldrb	r3, [r7, #11]
 8004086:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f107 0214 	add.w	r2, r7, #20
 8004096:	2107      	movs	r1, #7
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	4798      	blx	r3
  }
 800409c:	bf00      	nop
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <_Z41__static_initialization_and_destruction_0ii>:
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d116      	bne.n	80040e2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d111      	bne.n	80040e2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 80040be:	480b      	ldr	r0, [pc, #44]	; (80040ec <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80040c0:	f7ff f9b2 	bl	8003428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist insVel;
 80040c4:	480a      	ldr	r0, [pc, #40]	; (80040f0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80040c6:	f7fe ff13 	bl	8002ef0 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("/ins_vel", &insVel);
 80040ca:	2300      	movs	r3, #0
 80040cc:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80040ce:	4909      	ldr	r1, [pc, #36]	; (80040f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80040d0:	4809      	ldr	r0, [pc, #36]	; (80040f8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80040d2:	f7fd ffeb 	bl	80020ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 80040d6:	2301      	movs	r3, #1
 80040d8:	4a08      	ldr	r2, [pc, #32]	; (80040fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80040da:	4909      	ldr	r1, [pc, #36]	; (8004100 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80040dc:	4809      	ldr	r0, [pc, #36]	; (8004104 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80040de:	f7ff fa4d 	bl	800357c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	24000640 	.word	0x24000640
 80040f0:	24001bd0 	.word	0x24001bd0
 80040f4:	0800fd00 	.word	0x0800fd00
 80040f8:	24001c18 	.word	0x24001c18
 80040fc:	08002ff9 	.word	0x08002ff9
 8004100:	0800fd0c 	.word	0x0800fd0c
 8004104:	24001c30 	.word	0x24001c30

08004108 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3310      	adds	r3, #16
 8004116:	6839      	ldr	r1, [r7, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe ff2b 	bl	8002f74 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	3210      	adds	r2, #16
 8004126:	4610      	mov	r0, r2
 8004128:	4798      	blx	r3
  }
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3310      	adds	r3, #16
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe ff32 	bl	8002fc0 <_ZN13geometry_msgs5Twist7getTypeEv>
 800415c:	4603      	mov	r3, r0
  }
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3310      	adds	r3, #16
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe ff32 	bl	8002fdc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004178:	4603      	mov	r3, r0
  }
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
    return configured_;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004190:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <_GLOBAL__sub_I_nh>:
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041a8:	2001      	movs	r0, #1
 80041aa:	f7ff ff7b 	bl	80040a4 <_Z41__static_initialization_and_destruction_0ii>
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <odom_update>:
#include "odometry.h"

ODOM odom;

void odom_update(double Vx_world, double Vy_world, double W){
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	ed87 0b04 	vstr	d0, [r7, #16]
 80041ba:	ed87 1b02 	vstr	d1, [r7, #8]
 80041be:	ed87 2b00 	vstr	d2, [r7]
    odom.x += (double)Vx_world * dt;
 80041c2:	4b35      	ldr	r3, [pc, #212]	; (8004298 <odom_update+0xe8>)
 80041c4:	ed93 6b00 	vldr	d6, [r3]
 80041c8:	ed97 7b04 	vldr	d7, [r7, #16]
 80041cc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8004278 <odom_update+0xc8>
 80041d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80041d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041d8:	4b2f      	ldr	r3, [pc, #188]	; (8004298 <odom_update+0xe8>)
 80041da:	ed83 7b00 	vstr	d7, [r3]
    odom.y += (double)Vy_world * dt;
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <odom_update+0xe8>)
 80041e0:	ed93 6b02 	vldr	d6, [r3, #8]
 80041e4:	ed97 7b02 	vldr	d7, [r7, #8]
 80041e8:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8004278 <odom_update+0xc8>
 80041ec:	ee27 7b05 	vmul.f64	d7, d7, d5
 80041f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041f4:	4b28      	ldr	r3, [pc, #160]	; (8004298 <odom_update+0xe8>)
 80041f6:	ed83 7b02 	vstr	d7, [r3, #8]
    odom.theta += (double)W * dt;
 80041fa:	4b27      	ldr	r3, [pc, #156]	; (8004298 <odom_update+0xe8>)
 80041fc:	ed93 6b04 	vldr	d6, [r3, #16]
 8004200:	ed97 7b00 	vldr	d7, [r7]
 8004204:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8004278 <odom_update+0xc8>
 8004208:	ee27 7b05 	vmul.f64	d7, d7, d5
 800420c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <odom_update+0xe8>)
 8004212:	ed83 7b04 	vstr	d7, [r3, #16]
    while(odom.theta > PI)  odom.theta -= 2*PI;
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <odom_update+0xe8>)
 8004218:	ed93 7b04 	vldr	d7, [r3, #16]
 800421c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8004280 <odom_update+0xd0>
 8004220:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	dc00      	bgt.n	800422c <odom_update+0x7c>
 800422a:	e00a      	b.n	8004242 <odom_update+0x92>
 800422c:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <odom_update+0xe8>)
 800422e:	ed93 7b04 	vldr	d7, [r3, #16]
 8004232:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8004288 <odom_update+0xd8>
 8004236:	ee37 7b46 	vsub.f64	d7, d7, d6
 800423a:	4b17      	ldr	r3, [pc, #92]	; (8004298 <odom_update+0xe8>)
 800423c:	ed83 7b04 	vstr	d7, [r3, #16]
 8004240:	e7e9      	b.n	8004216 <odom_update+0x66>
    while(odom.theta < -1*PI) odom.theta += 2*PI;
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <odom_update+0xe8>)
 8004244:	ed93 7b04 	vldr	d7, [r3, #16]
 8004248:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8004290 <odom_update+0xe0>
 800424c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004254:	d400      	bmi.n	8004258 <odom_update+0xa8>
    return;
 8004256:	e00a      	b.n	800426e <odom_update+0xbe>
    while(odom.theta < -1*PI) odom.theta += 2*PI;
 8004258:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <odom_update+0xe8>)
 800425a:	ed93 7b04 	vldr	d7, [r3, #16]
 800425e:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8004288 <odom_update+0xd8>
 8004262:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <odom_update+0xe8>)
 8004268:	ed83 7b04 	vstr	d7, [r3, #16]
 800426c:	e7e9      	b.n	8004242 <odom_update+0x92>
}
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	d2f1a9fc 	.word	0xd2f1a9fc
 800427c:	3f50624d 	.word	0x3f50624d
 8004280:	54cadf99 	.word	0x54cadf99
 8004284:	400921fb 	.word	0x400921fb
 8004288:	54cadf99 	.word	0x54cadf99
 800428c:	401921fb 	.word	0x401921fb
 8004290:	54cadf99 	.word	0x54cadf99
 8004294:	c00921fb 	.word	0xc00921fb
 8004298:	24001c90 	.word	0x24001c90

0800429c <vel_World2Car>:
//	if(coor == 'x')
//		return coff * (Vy_world * cos(odom.theta) - Vx_world * sin(odom.theta));
//	else
//		return coff * (Vx_world * cos(odom.theta) - Vy_world * sin(odom.theta));
//}
double vel_World2Car(char coor, double Vx_world, double Vy_world){
 800429c:	b580      	push	{r7, lr}
 800429e:	ed2d 8b02 	vpush	{d8}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	ed87 0b02 	vstr	d0, [r7, #8]
 80042ac:	ed87 1b00 	vstr	d1, [r7]
 80042b0:	75fb      	strb	r3, [r7, #23]
	if(coor == 'x')
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	2b78      	cmp	r3, #120	; 0x78
 80042b6:	d11c      	bne.n	80042f2 <vel_World2Car+0x56>
		return Vx_world * sin( odom.theta ) - Vy_world * cos( odom.theta );
 80042b8:	4b1f      	ldr	r3, [pc, #124]	; (8004338 <vel_World2Car+0x9c>)
 80042ba:	ed93 7b04 	vldr	d7, [r3, #16]
 80042be:	eeb0 0b47 	vmov.f64	d0, d7
 80042c2:	f00a fc8d 	bl	800ebe0 <sin>
 80042c6:	eeb0 6b40 	vmov.f64	d6, d0
 80042ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80042ce:	ee26 8b07 	vmul.f64	d8, d6, d7
 80042d2:	4b19      	ldr	r3, [pc, #100]	; (8004338 <vel_World2Car+0x9c>)
 80042d4:	ed93 7b04 	vldr	d7, [r3, #16]
 80042d8:	eeb0 0b47 	vmov.f64	d0, d7
 80042dc:	f00a fc34 	bl	800eb48 <cos>
 80042e0:	eeb0 6b40 	vmov.f64	d6, d0
 80042e4:	ed97 7b00 	vldr	d7, [r7]
 80042e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80042ec:	ee38 7b47 	vsub.f64	d7, d8, d7
 80042f0:	e01b      	b.n	800432a <vel_World2Car+0x8e>
	else
		return Vx_world * cos( odom.theta ) + Vy_world * sin( odom.theta );
 80042f2:	4b11      	ldr	r3, [pc, #68]	; (8004338 <vel_World2Car+0x9c>)
 80042f4:	ed93 7b04 	vldr	d7, [r3, #16]
 80042f8:	eeb0 0b47 	vmov.f64	d0, d7
 80042fc:	f00a fc24 	bl	800eb48 <cos>
 8004300:	eeb0 6b40 	vmov.f64	d6, d0
 8004304:	ed97 7b02 	vldr	d7, [r7, #8]
 8004308:	ee26 8b07 	vmul.f64	d8, d6, d7
 800430c:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <vel_World2Car+0x9c>)
 800430e:	ed93 7b04 	vldr	d7, [r3, #16]
 8004312:	eeb0 0b47 	vmov.f64	d0, d7
 8004316:	f00a fc63 	bl	800ebe0 <sin>
 800431a:	eeb0 6b40 	vmov.f64	d6, d0
 800431e:	ed97 7b00 	vldr	d7, [r7]
 8004322:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004326:	ee38 7b07 	vadd.f64	d7, d8, d7
}
 800432a:	eeb0 0b47 	vmov.f64	d0, d7
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	ecbd 8b02 	vpop	{d8}
 8004336:	bd80      	pop	{r7, pc}
 8004338:	24001c90 	.word	0x24001c90

0800433c <vel_Car2World>:
//	if(coor == 'x')
//		return Vx * sin( odom.theta ) + Vy * cos( odom.theta );
//	else
//		return Vx * cos( odom.theta ) + Vy * sin( odom.theta );
//}
double vel_Car2World(char coor, double Vx, double Vy){
 800433c:	b580      	push	{r7, lr}
 800433e:	ed2d 8b02 	vpush	{d8}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	ed87 0b02 	vstr	d0, [r7, #8]
 800434c:	ed87 1b00 	vstr	d1, [r7]
 8004350:	75fb      	strb	r3, [r7, #23]
	if(coor == 'x')
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	2b78      	cmp	r3, #120	; 0x78
 8004356:	d11c      	bne.n	8004392 <vel_Car2World+0x56>
		return Vx * sin( odom.theta ) + Vy * cos( odom.theta );
 8004358:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <vel_Car2World+0x9c>)
 800435a:	ed93 7b04 	vldr	d7, [r3, #16]
 800435e:	eeb0 0b47 	vmov.f64	d0, d7
 8004362:	f00a fc3d 	bl	800ebe0 <sin>
 8004366:	eeb0 6b40 	vmov.f64	d6, d0
 800436a:	ed97 7b02 	vldr	d7, [r7, #8]
 800436e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <vel_Car2World+0x9c>)
 8004374:	ed93 7b04 	vldr	d7, [r3, #16]
 8004378:	eeb0 0b47 	vmov.f64	d0, d7
 800437c:	f00a fbe4 	bl	800eb48 <cos>
 8004380:	eeb0 6b40 	vmov.f64	d6, d0
 8004384:	ed97 7b00 	vldr	d7, [r7]
 8004388:	ee26 7b07 	vmul.f64	d7, d6, d7
 800438c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004390:	e01b      	b.n	80043ca <vel_Car2World+0x8e>
	else
		return Vy * sin( odom.theta ) - Vx * cos( odom.theta );
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <vel_Car2World+0x9c>)
 8004394:	ed93 7b04 	vldr	d7, [r3, #16]
 8004398:	eeb0 0b47 	vmov.f64	d0, d7
 800439c:	f00a fc20 	bl	800ebe0 <sin>
 80043a0:	eeb0 6b40 	vmov.f64	d6, d0
 80043a4:	ed97 7b00 	vldr	d7, [r7]
 80043a8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <vel_Car2World+0x9c>)
 80043ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80043b2:	eeb0 0b47 	vmov.f64	d0, d7
 80043b6:	f00a fbc7 	bl	800eb48 <cos>
 80043ba:	eeb0 6b40 	vmov.f64	d6, d0
 80043be:	ed97 7b02 	vldr	d7, [r7, #8]
 80043c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80043c6:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 80043ca:	eeb0 0b47 	vmov.f64	d0, d7
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	ecbd 8b02 	vpop	{d8}
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	24001c90 	.word	0x24001c90

080043dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <HAL_MspInit+0x3c>)
 80043e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043e8:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <HAL_MspInit+0x3c>)
 80043ea:	f043 0302 	orr.w	r3, r3, #2
 80043ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_MspInit+0x3c>)
 80043f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004400:	2200      	movs	r2, #0
 8004402:	2100      	movs	r1, #0
 8004404:	2005      	movs	r0, #5
 8004406:	f001 f81c 	bl	8005442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800440a:	2005      	movs	r0, #5
 800440c:	f001 f833 	bl	8005476 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	58024400 	.word	0x58024400

0800441c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442c:	d117      	bne.n	800445e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800442e:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <HAL_TIM_Base_MspInit+0x84>)
 8004430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004434:	4a1a      	ldr	r2, [pc, #104]	; (80044a0 <HAL_TIM_Base_MspInit+0x84>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800443e:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <HAL_TIM_Base_MspInit+0x84>)
 8004440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800444c:	2200      	movs	r2, #0
 800444e:	2100      	movs	r1, #0
 8004450:	201c      	movs	r0, #28
 8004452:	f000 fff6 	bl	8005442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004456:	201c      	movs	r0, #28
 8004458:	f001 f80d 	bl	8005476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800445c:	e01b      	b.n	8004496 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a10      	ldr	r2, [pc, #64]	; (80044a4 <HAL_TIM_Base_MspInit+0x88>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d116      	bne.n	8004496 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <HAL_TIM_Base_MspInit+0x84>)
 800446a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800446e:	4a0c      	ldr	r2, [pc, #48]	; (80044a0 <HAL_TIM_Base_MspInit+0x84>)
 8004470:	f043 0308 	orr.w	r3, r3, #8
 8004474:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_TIM_Base_MspInit+0x84>)
 800447a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004486:	2200      	movs	r2, #0
 8004488:	2100      	movs	r1, #0
 800448a:	2032      	movs	r0, #50	; 0x32
 800448c:	f000 ffd9 	bl	8005442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004490:	2032      	movs	r0, #50	; 0x32
 8004492:	f000 fff0 	bl	8005476 <HAL_NVIC_EnableIRQ>
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	58024400 	.word	0x58024400
 80044a4:	40000c00 	.word	0x40000c00

080044a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b090      	sub	sp, #64	; 0x40
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a69      	ldr	r2, [pc, #420]	; (800466c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d12e      	bne.n	8004528 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044ca:	4b69      	ldr	r3, [pc, #420]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044d0:	4a67      	ldr	r2, [pc, #412]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044da:	4b65      	ldr	r3, [pc, #404]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e8:	4b61      	ldr	r3, [pc, #388]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ee:	4a60      	ldr	r2, [pc, #384]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044f8:	4b5d      	ldr	r3, [pc, #372]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004506:	23c0      	movs	r3, #192	; 0xc0
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2302      	movs	r3, #2
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450e:	2300      	movs	r3, #0
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004512:	2300      	movs	r3, #0
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004516:	2302      	movs	r3, #2
 8004518:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800451a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800451e:	4619      	mov	r1, r3
 8004520:	4854      	ldr	r0, [pc, #336]	; (8004674 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004522:	f003 ffc1 	bl	80084a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004526:	e09c      	b.n	8004662 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a52      	ldr	r2, [pc, #328]	; (8004678 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d12f      	bne.n	8004592 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004532:	4b4f      	ldr	r3, [pc, #316]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004538:	4a4d      	ldr	r2, [pc, #308]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800453a:	f043 0304 	orr.w	r3, r3, #4
 800453e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004542:	4b4b      	ldr	r3, [pc, #300]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	623b      	str	r3, [r7, #32]
 800454e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004550:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004556:	4a46      	ldr	r2, [pc, #280]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004558:	f043 0308 	orr.w	r3, r3, #8
 800455c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004560:	4b43      	ldr	r3, [pc, #268]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800456e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004574:	2302      	movs	r3, #2
 8004576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2300      	movs	r3, #0
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457c:	2300      	movs	r3, #0
 800457e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004580:	2302      	movs	r3, #2
 8004582:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004588:	4619      	mov	r1, r3
 800458a:	483c      	ldr	r0, [pc, #240]	; (800467c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800458c:	f003 ff8c 	bl	80084a8 <HAL_GPIO_Init>
}
 8004590:	e067      	b.n	8004662 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a3a      	ldr	r2, [pc, #232]	; (8004680 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d12e      	bne.n	80045fa <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800459c:	4b34      	ldr	r3, [pc, #208]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800459e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045a2:	4a33      	ldr	r2, [pc, #204]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045a8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80045ac:	4b30      	ldr	r3, [pc, #192]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045c0:	4a2b      	ldr	r2, [pc, #172]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045c2:	f043 0320 	orr.w	r3, r3, #32
 80045c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045ca:	4b29      	ldr	r3, [pc, #164]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80045d8:	2303      	movs	r3, #3
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045dc:	2302      	movs	r3, #2
 80045de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e4:	2300      	movs	r3, #0
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80045e8:	230d      	movs	r3, #13
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045f0:	4619      	mov	r1, r3
 80045f2:	4824      	ldr	r0, [pc, #144]	; (8004684 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80045f4:	f003 ff58 	bl	80084a8 <HAL_GPIO_Init>
}
 80045f8:	e033      	b.n	8004662 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a22      	ldr	r2, [pc, #136]	; (8004688 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d12e      	bne.n	8004662 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004604:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004606:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800460a:	4a19      	ldr	r2, [pc, #100]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800460c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004610:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004616:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004628:	4a11      	ldr	r2, [pc, #68]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800462a:	f043 0320 	orr.w	r3, r3, #32
 800462e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004640:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004646:	2302      	movs	r3, #2
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464a:	2300      	movs	r3, #0
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464e:	2300      	movs	r3, #0
 8004650:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8004652:	230e      	movs	r3, #14
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800465a:	4619      	mov	r1, r3
 800465c:	4809      	ldr	r0, [pc, #36]	; (8004684 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800465e:	f003 ff23 	bl	80084a8 <HAL_GPIO_Init>
}
 8004662:	bf00      	nop
 8004664:	3740      	adds	r7, #64	; 0x40
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40000400 	.word	0x40000400
 8004670:	58024400 	.word	0x58024400
 8004674:	58020000 	.word	0x58020000
 8004678:	40000800 	.word	0x40000800
 800467c:	58020c00 	.word	0x58020c00
 8004680:	4000e000 	.word	0x4000e000
 8004684:	58021400 	.word	0x58021400
 8004688:	4000e400 	.word	0x4000e400

0800468c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a16      	ldr	r2, [pc, #88]	; (80046f4 <HAL_TIM_PWM_MspInit+0x68>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10f      	bne.n	80046be <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800469e:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80046a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80046a6:	f043 0302 	orr.w	r3, r3, #2
 80046aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046ae:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80046b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80046bc:	e013      	b.n	80046e6 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <HAL_TIM_PWM_MspInit+0x70>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d10e      	bne.n	80046e6 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80046ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80046da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	68bb      	ldr	r3, [r7, #8]
}
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40010400 	.word	0x40010400
 80046f8:	58024400 	.word	0x58024400
 80046fc:	40014000 	.word	0x40014000

08004700 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	; 0x28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004708:	f107 0314 	add.w	r3, r7, #20
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a35      	ldr	r2, [pc, #212]	; (80047f4 <HAL_TIM_MspPostInit+0xf4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d120      	bne.n	8004764 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004722:	4b35      	ldr	r3, [pc, #212]	; (80047f8 <HAL_TIM_MspPostInit+0xf8>)
 8004724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004728:	4a33      	ldr	r2, [pc, #204]	; (80047f8 <HAL_TIM_MspPostInit+0xf8>)
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004732:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <HAL_TIM_MspPostInit+0xf8>)
 8004734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004740:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004746:	2302      	movs	r3, #2
 8004748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004752:	2303      	movs	r3, #3
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004756:	f107 0314 	add.w	r3, r7, #20
 800475a:	4619      	mov	r1, r3
 800475c:	4827      	ldr	r0, [pc, #156]	; (80047fc <HAL_TIM_MspPostInit+0xfc>)
 800475e:	f003 fea3 	bl	80084a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004762:	e042      	b.n	80047ea <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a25      	ldr	r2, [pc, #148]	; (8004800 <HAL_TIM_MspPostInit+0x100>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d13d      	bne.n	80047ea <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800476e:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <HAL_TIM_MspPostInit+0xf8>)
 8004770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004774:	4a20      	ldr	r2, [pc, #128]	; (80047f8 <HAL_TIM_MspPostInit+0xf8>)
 8004776:	f043 0310 	orr.w	r3, r3, #16
 800477a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_TIM_MspPostInit+0xf8>)
 8004780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_TIM_MspPostInit+0xf8>)
 800478e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004792:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <HAL_TIM_MspPostInit+0xf8>)
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800479c:	4b16      	ldr	r3, [pc, #88]	; (80047f8 <HAL_TIM_MspPostInit+0xf8>)
 800479e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80047aa:	2320      	movs	r3, #32
 80047ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ae:	2302      	movs	r3, #2
 80047b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b6:	2300      	movs	r3, #0
 80047b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80047ba:	2304      	movs	r3, #4
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047be:	f107 0314 	add.w	r3, r7, #20
 80047c2:	4619      	mov	r1, r3
 80047c4:	480f      	ldr	r0, [pc, #60]	; (8004804 <HAL_TIM_MspPostInit+0x104>)
 80047c6:	f003 fe6f 	bl	80084a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80047ca:	2308      	movs	r3, #8
 80047cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ce:	2302      	movs	r3, #2
 80047d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d6:	2300      	movs	r3, #0
 80047d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80047da:	2304      	movs	r3, #4
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047de:	f107 0314 	add.w	r3, r7, #20
 80047e2:	4619      	mov	r1, r3
 80047e4:	4808      	ldr	r0, [pc, #32]	; (8004808 <HAL_TIM_MspPostInit+0x108>)
 80047e6:	f003 fe5f 	bl	80084a8 <HAL_GPIO_Init>
}
 80047ea:	bf00      	nop
 80047ec:	3728      	adds	r7, #40	; 0x28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40010400 	.word	0x40010400
 80047f8:	58024400 	.word	0x58024400
 80047fc:	58020800 	.word	0x58020800
 8004800:	40014000 	.word	0x40014000
 8004804:	58021000 	.word	0x58021000
 8004808:	58020000 	.word	0x58020000

0800480c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b0b6      	sub	sp, #216	; 0xd8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004814:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	60da      	str	r2, [r3, #12]
 8004822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004824:	f107 0310 	add.w	r3, r7, #16
 8004828:	22b4      	movs	r2, #180	; 0xb4
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f00b f80d 	bl	800f84c <memset>
  if(huart->Instance==USART10)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a62      	ldr	r2, [pc, #392]	; (80049c0 <HAL_UART_MspInit+0x1b4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	f040 80bc 	bne.w	80049b6 <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800483e:	2301      	movs	r3, #1
 8004840:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004842:	2300      	movs	r3, #0
 8004844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004848:	f107 0310 	add.w	r3, r7, #16
 800484c:	4618      	mov	r0, r3
 800484e:	f005 f887 	bl	8009960 <HAL_RCCEx_PeriphCLKConfig>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004858:	f7fc fddc 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 800485c:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <HAL_UART_MspInit+0x1b8>)
 800485e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004862:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <HAL_UART_MspInit+0x1b8>)
 8004864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004868:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800486c:	4b55      	ldr	r3, [pc, #340]	; (80049c4 <HAL_UART_MspInit+0x1b8>)
 800486e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800487a:	4b52      	ldr	r3, [pc, #328]	; (80049c4 <HAL_UART_MspInit+0x1b8>)
 800487c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004880:	4a50      	ldr	r2, [pc, #320]	; (80049c4 <HAL_UART_MspInit+0x1b8>)
 8004882:	f043 0310 	orr.w	r3, r3, #16
 8004886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800488a:	4b4e      	ldr	r3, [pc, #312]	; (80049c4 <HAL_UART_MspInit+0x1b8>)
 800488c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004898:	2304      	movs	r3, #4
 800489a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489e:	2302      	movs	r3, #2
 80048a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048aa:	2300      	movs	r3, #0
 80048ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80048b0:	2304      	movs	r3, #4
 80048b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4842      	ldr	r0, [pc, #264]	; (80049c8 <HAL_UART_MspInit+0x1bc>)
 80048be:	f003 fdf3 	bl	80084a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80048c2:	2308      	movs	r3, #8
 80048c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c8:	2302      	movs	r3, #2
 80048ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d4:	2300      	movs	r3, #0
 80048d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 80048da:	230b      	movs	r3, #11
 80048dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4838      	ldr	r0, [pc, #224]	; (80049c8 <HAL_UART_MspInit+0x1bc>)
 80048e8:	f003 fdde 	bl	80084a8 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 80048ec:	4b37      	ldr	r3, [pc, #220]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 80048ee:	4a38      	ldr	r2, [pc, #224]	; (80049d0 <HAL_UART_MspInit+0x1c4>)
 80048f0:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 80048f2:	4b36      	ldr	r3, [pc, #216]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 80048f4:	2276      	movs	r2, #118	; 0x76
 80048f6:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048fe:	4b33      	ldr	r3, [pc, #204]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 8004900:	2200      	movs	r2, #0
 8004902:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004904:	4b31      	ldr	r3, [pc, #196]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 8004906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800490a:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800490c:	4b2f      	ldr	r3, [pc, #188]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 800490e:	2200      	movs	r2, #0
 8004910:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004912:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 8004914:	2200      	movs	r2, #0
 8004916:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 8004918:	4b2c      	ldr	r3, [pc, #176]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 800491a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800491e:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004920:	4b2a      	ldr	r3, [pc, #168]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 8004922:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004926:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004928:	4b28      	ldr	r3, [pc, #160]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 800492a:	2200      	movs	r2, #0
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 800492e:	4827      	ldr	r0, [pc, #156]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 8004930:	f000 fdca 	bl	80054c8 <HAL_DMA_Init>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800493a:	f7fc fd6b 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 8004942:	67da      	str	r2, [r3, #124]	; 0x7c
 8004944:	4a21      	ldr	r2, [pc, #132]	; (80049cc <HAL_UART_MspInit+0x1c0>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 800494a:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 800494c:	4a22      	ldr	r2, [pc, #136]	; (80049d8 <HAL_UART_MspInit+0x1cc>)
 800494e:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 8004952:	2277      	movs	r2, #119	; 0x77
 8004954:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004956:	4b1f      	ldr	r3, [pc, #124]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 8004958:	2240      	movs	r2, #64	; 0x40
 800495a:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800495c:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 800495e:	2200      	movs	r2, #0
 8004960:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004962:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 8004964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004968:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800496a:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 800496c:	2200      	movs	r2, #0
 800496e:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004970:	4b18      	ldr	r3, [pc, #96]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 8004972:	2200      	movs	r2, #0
 8004974:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 8004976:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 8004978:	2200      	movs	r2, #0
 800497a:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800497c:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 800497e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004982:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004984:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 8004986:	2200      	movs	r2, #0
 8004988:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 800498a:	4812      	ldr	r0, [pc, #72]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 800498c:	f000 fd9c 	bl	80054c8 <HAL_DMA_Init>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 8004996:	f7fc fd3d 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 800499e:	679a      	str	r2, [r3, #120]	; 0x78
 80049a0:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <HAL_UART_MspInit+0x1c8>)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 80049a6:	2200      	movs	r2, #0
 80049a8:	2100      	movs	r1, #0
 80049aa:	209c      	movs	r0, #156	; 0x9c
 80049ac:	f000 fd49 	bl	8005442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 80049b0:	209c      	movs	r0, #156	; 0x9c
 80049b2:	f000 fd60 	bl	8005476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 80049b6:	bf00      	nop
 80049b8:	37d8      	adds	r7, #216	; 0xd8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40011c00 	.word	0x40011c00
 80049c4:	58024400 	.word	0x58024400
 80049c8:	58021000 	.word	0x58021000
 80049cc:	2400054c 	.word	0x2400054c
 80049d0:	40020010 	.word	0x40020010
 80049d4:	240005c4 	.word	0x240005c4
 80049d8:	40020028 	.word	0x40020028

080049dc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0f      	ldr	r2, [pc, #60]	; (8004a28 <HAL_UART_MspDeInit+0x4c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d118      	bne.n	8004a20 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_UART_MspDeInit+0x50>)
 80049f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049f4:	4a0d      	ldr	r2, [pc, #52]	; (8004a2c <HAL_UART_MspDeInit+0x50>)
 80049f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 80049fe:	210c      	movs	r1, #12
 8004a00:	480b      	ldr	r0, [pc, #44]	; (8004a30 <HAL_UART_MspDeInit+0x54>)
 8004a02:	f003 fef9 	bl	80087f8 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f001 f8b6 	bl	8005b7c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 f8b1 	bl	8005b7c <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 8004a1a:	209c      	movs	r0, #156	; 0x9c
 8004a1c:	f000 fd39 	bl	8005492 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40011c00 	.word	0x40011c00
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	58021000 	.word	0x58021000

08004a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a38:	e7fe      	b.n	8004a38 <NMI_Handler+0x4>

08004a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a3e:	e7fe      	b.n	8004a3e <HardFault_Handler+0x4>

08004a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a44:	e7fe      	b.n	8004a44 <MemManage_Handler+0x4>

08004a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a4a:	e7fe      	b.n	8004a4a <BusFault_Handler+0x4>

08004a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a50:	e7fe      	b.n	8004a50 <UsageFault_Handler+0x4>

08004a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a52:	b480      	push	{r7}
 8004a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a80:	f000 fbc0 	bl	8005204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a84:	bf00      	nop
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <DMA1_Stream0_IRQHandler+0x10>)
 8004a9e:	f002 f9f1 	bl	8006e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2400054c 	.word	0x2400054c

08004aac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8004ab0:	4802      	ldr	r0, [pc, #8]	; (8004abc <DMA1_Stream1_IRQHandler+0x10>)
 8004ab2:	f002 f9e7 	bl	8006e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	240005c4 	.word	0x240005c4

08004ac0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ac4:	4802      	ldr	r0, [pc, #8]	; (8004ad0 <TIM2_IRQHandler+0x10>)
 8004ac6:	f006 fded 	bl	800b6a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	2400025c 	.word	0x2400025c

08004ad4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ad8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004adc:	f003 ffa7 	bl	8008a2e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ae0:	bf00      	nop
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004ae8:	4802      	ldr	r0, [pc, #8]	; (8004af4 <TIM5_IRQHandler+0x10>)
 8004aea:	f006 fddb 	bl	800b6a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	24000340 	.word	0x24000340

08004af8 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8004afc:	4802      	ldr	r0, [pc, #8]	; (8004b08 <USART10_IRQHandler+0x10>)
 8004afe:	f008 f833 	bl	800cb68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	240004bc 	.word	0x240004bc

08004b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
	return 1;
 8004b10:	2301      	movs	r3, #1
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <_kill>:

int _kill(int pid, int sig)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b26:	f00a fe59 	bl	800f7dc <__errno>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2216      	movs	r2, #22
 8004b2e:	601a      	str	r2, [r3, #0]
	return -1;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <_exit>:

void _exit (int status)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b44:	f04f 31ff 	mov.w	r1, #4294967295
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ffe7 	bl	8004b1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b4e:	e7fe      	b.n	8004b4e <_exit+0x12>

08004b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b58:	4a14      	ldr	r2, [pc, #80]	; (8004bac <_sbrk+0x5c>)
 8004b5a:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <_sbrk+0x60>)
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b64:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <_sbrk+0x64>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b6c:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <_sbrk+0x64>)
 8004b6e:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <_sbrk+0x68>)
 8004b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <_sbrk+0x64>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d207      	bcs.n	8004b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b80:	f00a fe2c 	bl	800f7dc <__errno>
 8004b84:	4603      	mov	r3, r0
 8004b86:	220c      	movs	r2, #12
 8004b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8e:	e009      	b.n	8004ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b90:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <_sbrk+0x64>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b96:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <_sbrk+0x64>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	4a05      	ldr	r2, [pc, #20]	; (8004bb4 <_sbrk+0x64>)
 8004ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	24050000 	.word	0x24050000
 8004bb0:	00000400 	.word	0x00000400
 8004bb4:	24001ca8 	.word	0x24001ca8
 8004bb8:	24001cc0 	.word	0x24001cc0

08004bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004bc0:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <SystemInit+0xd0>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	4a31      	ldr	r2, [pc, #196]	; (8004c8c <SystemInit+0xd0>)
 8004bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bd0:	4b2f      	ldr	r3, [pc, #188]	; (8004c90 <SystemInit+0xd4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	2b06      	cmp	r3, #6
 8004bda:	d807      	bhi.n	8004bec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004bdc:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <SystemInit+0xd4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 030f 	bic.w	r3, r3, #15
 8004be4:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <SystemInit+0xd4>)
 8004be6:	f043 0307 	orr.w	r3, r3, #7
 8004bea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004bec:	4b29      	ldr	r3, [pc, #164]	; (8004c94 <SystemInit+0xd8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a28      	ldr	r2, [pc, #160]	; (8004c94 <SystemInit+0xd8>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bf8:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <SystemInit+0xd8>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004bfe:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <SystemInit+0xd8>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4924      	ldr	r1, [pc, #144]	; (8004c94 <SystemInit+0xd8>)
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <SystemInit+0xdc>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004c0a:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <SystemInit+0xd4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c16:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <SystemInit+0xd4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 030f 	bic.w	r3, r3, #15
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <SystemInit+0xd4>)
 8004c20:	f043 0307 	orr.w	r3, r3, #7
 8004c24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004c26:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <SystemInit+0xd8>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004c2c:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <SystemInit+0xd8>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004c32:	4b18      	ldr	r3, [pc, #96]	; (8004c94 <SystemInit+0xd8>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004c38:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <SystemInit+0xd8>)
 8004c3a:	4a18      	ldr	r2, [pc, #96]	; (8004c9c <SystemInit+0xe0>)
 8004c3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <SystemInit+0xd8>)
 8004c40:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <SystemInit+0xe4>)
 8004c42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <SystemInit+0xd8>)
 8004c46:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <SystemInit+0xe8>)
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c4a:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <SystemInit+0xd8>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c50:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <SystemInit+0xd8>)
 8004c52:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <SystemInit+0xe8>)
 8004c54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c56:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <SystemInit+0xd8>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <SystemInit+0xd8>)
 8004c5e:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <SystemInit+0xe8>)
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c62:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <SystemInit+0xd8>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <SystemInit+0xd8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <SystemInit+0xd8>)
 8004c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c74:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <SystemInit+0xd8>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <SystemInit+0xec>)
 8004c7c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c82:	bf00      	nop
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000ed00 	.word	0xe000ed00
 8004c90:	52002000 	.word	0x52002000
 8004c94:	58024400 	.word	0x58024400
 8004c98:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c9c:	02020200 	.word	0x02020200
 8004ca0:	01ff0000 	.word	0x01ff0000
 8004ca4:	01010280 	.word	0x01010280
 8004ca8:	52004000 	.word	0x52004000

08004cac <HAL_TIM_PeriodElapsedCallback>:

int ccc = 0;
double coeffab = 0.5 * (width + length);
double angle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	ed2d 8b02 	vpush	{d8}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d101      	bne.n	8004cc6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		interPub();
 8004cc2:	f7fe f9e9 	bl	8003098 <interPub>
	}
	if (htim->Instance == TIM5) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4aa6      	ldr	r2, [pc, #664]	; (8004f64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	f040 81eb 	bne.w	80050a8 <HAL_TIM_PeriodElapsedCallback+0x3fc>

//		if(odom.theta >= (double)angle * 2 * PI / 180){
//			W = 0;
//		}

		Kpid[0].goalVel = Vy + Vx + (W * coeffab);
 8004cd2:	4ba5      	ldr	r3, [pc, #660]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004cd4:	ed93 6b00 	vldr	d6, [r3]
 8004cd8:	4ba4      	ldr	r3, [pc, #656]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004cda:	ed93 7b00 	vldr	d7, [r3]
 8004cde:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004ce2:	4ba3      	ldr	r3, [pc, #652]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004ce4:	ed93 5b00 	vldr	d5, [r3]
 8004ce8:	4ba2      	ldr	r3, [pc, #648]	; (8004f74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004cea:	ed93 7b00 	vldr	d7, [r3]
 8004cee:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004cf2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cf6:	4ba0      	ldr	r3, [pc, #640]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004cf8:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vy - Vx - (W * coeffab);
 8004cfc:	4b9a      	ldr	r3, [pc, #616]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004cfe:	ed93 6b00 	vldr	d6, [r3]
 8004d02:	4b9a      	ldr	r3, [pc, #616]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004d04:	ed93 7b00 	vldr	d7, [r3]
 8004d08:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d0c:	4b98      	ldr	r3, [pc, #608]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004d0e:	ed93 5b00 	vldr	d5, [r3]
 8004d12:	4b98      	ldr	r3, [pc, #608]	; (8004f74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004d14:	ed93 7b00 	vldr	d7, [r3]
 8004d18:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d20:	4b95      	ldr	r3, [pc, #596]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d22:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vy + Vx - (W * coeffab);
 8004d26:	4b90      	ldr	r3, [pc, #576]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004d28:	ed93 6b00 	vldr	d6, [r3]
 8004d2c:	4b8f      	ldr	r3, [pc, #572]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004d2e:	ed93 7b00 	vldr	d7, [r3]
 8004d32:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004d36:	4b8e      	ldr	r3, [pc, #568]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004d38:	ed93 5b00 	vldr	d5, [r3]
 8004d3c:	4b8d      	ldr	r3, [pc, #564]	; (8004f74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004d3e:	ed93 7b00 	vldr	d7, [r3]
 8004d42:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d46:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d4a:	4b8b      	ldr	r3, [pc, #556]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d4c:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vy - Vx + (W * coeffab);
 8004d50:	4b85      	ldr	r3, [pc, #532]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004d52:	ed93 6b00 	vldr	d6, [r3]
 8004d56:	4b85      	ldr	r3, [pc, #532]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004d58:	ed93 7b00 	vldr	d7, [r3]
 8004d5c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d60:	4b83      	ldr	r3, [pc, #524]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004d62:	ed93 5b00 	vldr	d5, [r3]
 8004d66:	4b83      	ldr	r3, [pc, #524]	; (8004f74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004d68:	ed93 7b00 	vldr	d7, [r3]
 8004d6c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d74:	4b80      	ldr	r3, [pc, #512]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d76:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(&htim23);
 8004d7a:	4b80      	ldr	r3, [pc, #512]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	b21a      	sxth	r2, r3
 8004d82:	4b7d      	ldr	r3, [pc, #500]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d84:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim4) * -1;
 8004d86:	4b7e      	ldr	r3, [pc, #504]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	425b      	negs	r3, r3
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	b21a      	sxth	r2, r3
 8004d94:	4b78      	ldr	r3, [pc, #480]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d96:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim24);
 8004d9a:	4b7a      	ldr	r3, [pc, #488]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	b21a      	sxth	r2, r3
 8004da2:	4b75      	ldr	r3, [pc, #468]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004da4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim3);
 8004da8:	4b77      	ldr	r3, [pc, #476]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	b21a      	sxth	r2, r3
 8004db0:	4b71      	ldr	r3, [pc, #452]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004db2:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(&htim24, 0);
 8004db6:	4b73      	ldr	r3, [pc, #460]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 8004dbe:	4b6f      	ldr	r3, [pc, #444]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 8004dc6:	4b70      	ldr	r3, [pc, #448]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 8004dce:	4b6c      	ldr	r3, [pc, #432]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24



		for( int i = 0; i < 4; i ++){
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	dc06      	bgt.n	8004dee <HAL_TIM_PeriodElapsedCallback+0x142>
			pidCtrl(i);
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7fb fc4d 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3301      	adds	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e7f5      	b.n	8004dda <HAL_TIM_PeriodElapsedCallback+0x12e>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, Kpid[0].pulse);
 8004dee:	4b62      	ldr	r3, [pc, #392]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004df0:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8004df4:	4b65      	ldr	r3, [pc, #404]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004dfc:	ee17 2a90 	vmov	r2, s15
 8004e00:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, Kpid[1].pulse);
 8004e02:	4b5d      	ldr	r3, [pc, #372]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004e04:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004e08:	4b60      	ldr	r3, [pc, #384]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004e10:	ee17 2a90 	vmov	r2, s15
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[2].pulse);
 8004e16:	4b58      	ldr	r3, [pc, #352]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004e18:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8004e1c:	4b5c      	ldr	r3, [pc, #368]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004e24:	ee17 2a90 	vmov	r2, s15
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[3].pulse);
 8004e2a:	4b53      	ldr	r3, [pc, #332]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004e2c:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8004e30:	4b57      	ldr	r3, [pc, #348]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004e38:	ee17 2a90 	vmov	r2, s15
 8004e3c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e44:	4853      	ldr	r0, [pc, #332]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004e46:	f003 fdd9 	bl	80089fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e50:	4850      	ldr	r0, [pc, #320]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004e52:	f003 fdd3 	bl	80089fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004e56:	2200      	movs	r2, #0
 8004e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e5c:	484e      	ldr	r0, [pc, #312]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e5e:	f003 fdcd 	bl	80089fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8004e62:	2200      	movs	r2, #0
 8004e64:	2140      	movs	r1, #64	; 0x40
 8004e66:	484c      	ldr	r0, [pc, #304]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e68:	f003 fdc8 	bl	80089fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e72:	4849      	ldr	r0, [pc, #292]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e74:	f003 fdc2 	bl	80089fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e7e:	4846      	ldr	r0, [pc, #280]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e80:	f003 fdbc 	bl	80089fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8004e84:	2200      	movs	r2, #0
 8004e86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e8a:	4843      	ldr	r0, [pc, #268]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e8c:	f003 fdb6 	bl	80089fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8004e90:	2200      	movs	r2, #0
 8004e92:	2180      	movs	r1, #128	; 0x80
 8004e94:	4840      	ldr	r0, [pc, #256]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e96:	f003 fdb1 	bl	80089fc <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004e9a:	4b37      	ldr	r3, [pc, #220]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004e9c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004ea0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea8:	dd06      	ble.n	8004eb8 <HAL_TIM_PeriodElapsedCallback+0x20c>
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eb0:	4838      	ldr	r0, [pc, #224]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004eb2:	f003 fda3 	bl	80089fc <HAL_GPIO_WritePin>
 8004eb6:	e00d      	b.n	8004ed4 <HAL_TIM_PeriodElapsedCallback+0x228>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004eb8:	4b2f      	ldr	r3, [pc, #188]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004eba:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004ebe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec6:	d505      	bpl.n	8004ed4 <HAL_TIM_PeriodElapsedCallback+0x228>
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ece:	4831      	ldr	r0, [pc, #196]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004ed0:	f003 fd94 	bl	80089fc <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8004ed4:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004ed6:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004eda:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee2:	dd06      	ble.n	8004ef2 <HAL_TIM_PeriodElapsedCallback+0x246>
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eea:	482b      	ldr	r0, [pc, #172]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004eec:	f003 fd86 	bl	80089fc <HAL_GPIO_WritePin>
 8004ef0:	e00c      	b.n	8004f0c <HAL_TIM_PeriodElapsedCallback+0x260>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8004ef2:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004ef4:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004ef8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f00:	d504      	bpl.n	8004f0c <HAL_TIM_PeriodElapsedCallback+0x260>
 8004f02:	2201      	movs	r2, #1
 8004f04:	2140      	movs	r1, #64	; 0x40
 8004f06:	4824      	ldr	r0, [pc, #144]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004f08:	f003 fd78 	bl	80089fc <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004f0e:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8004f12:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1a:	dd06      	ble.n	8004f2a <HAL_TIM_PeriodElapsedCallback+0x27e>
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f22:	481d      	ldr	r0, [pc, #116]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004f24:	f003 fd6a 	bl	80089fc <HAL_GPIO_WritePin>
 8004f28:	e00d      	b.n	8004f46 <HAL_TIM_PeriodElapsedCallback+0x29a>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004f2c:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8004f30:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f38:	d505      	bpl.n	8004f46 <HAL_TIM_PeriodElapsedCallback+0x29a>
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f40:	4815      	ldr	r0, [pc, #84]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004f42:	f003 fd5b 	bl	80089fc <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004f48:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8004f4c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f54:	dd22      	ble.n	8004f9c <HAL_TIM_PeriodElapsedCallback+0x2f0>
 8004f56:	2201      	movs	r2, #1
 8004f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f5c:	480e      	ldr	r0, [pc, #56]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004f5e:	f003 fd4d 	bl	80089fc <HAL_GPIO_WritePin>
 8004f62:	e028      	b.n	8004fb6 <HAL_TIM_PeriodElapsedCallback+0x30a>
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	24001b90 	.word	0x24001b90
 8004f6c:	24001b88 	.word	0x24001b88
 8004f70:	24001b98 	.word	0x24001b98
 8004f74:	240001c8 	.word	0x240001c8
 8004f78:	24000000 	.word	0x24000000
 8004f7c:	24000424 	.word	0x24000424
 8004f80:	240002f4 	.word	0x240002f4
 8004f84:	24000470 	.word	0x24000470
 8004f88:	240002a8 	.word	0x240002a8
 8004f8c:	2400038c 	.word	0x2400038c
 8004f90:	240003d8 	.word	0x240003d8
 8004f94:	58020400 	.word	0x58020400
 8004f98:	58021000 	.word	0x58021000
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8004f9c:	4b45      	ldr	r3, [pc, #276]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004f9e:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8004fa2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004faa:	d504      	bpl.n	8004fb6 <HAL_TIM_PeriodElapsedCallback+0x30a>
 8004fac:	2201      	movs	r2, #1
 8004fae:	2180      	movs	r1, #128	; 0x80
 8004fb0:	4841      	ldr	r0, [pc, #260]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8004fb2:	f003 fd23 	bl	80089fc <HAL_GPIO_WritePin>

		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004fb6:	4b3f      	ldr	r3, [pc, #252]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004fb8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004fbc:	4b3d      	ldr	r3, [pc, #244]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004fbe:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004fc2:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ Kpid[2].insVel + Kpid[3].insVel );
 8004fc6:	4b3b      	ldr	r3, [pc, #236]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004fc8:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004fcc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004fd0:	4b38      	ldr	r3, [pc, #224]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004fd2:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004fd6:	ee36 7b07 	vadd.f64	d7, d6, d7
		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004fda:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004fde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004fe2:	4b36      	ldr	r3, [pc, #216]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x410>)
 8004fe4:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004fe8:	4b32      	ldr	r3, [pc, #200]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004fea:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004fee:	4b31      	ldr	r3, [pc, #196]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004ff0:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004ff4:	ee36 6b47 	vsub.f64	d6, d6, d7
				+ Kpid[2].insVel - Kpid[3].insVel );
 8004ff8:	4b2e      	ldr	r3, [pc, #184]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004ffa:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004ffe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005002:	4b2c      	ldr	r3, [pc, #176]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8005004:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8005008:	ee36 7b47 	vsub.f64	d7, d6, d7
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 800500c:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8005010:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005014:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8005016:	ed83 7b00 	vstr	d7, [r3]
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 800501a:	4b26      	ldr	r3, [pc, #152]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800501c:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8005022:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005026:	ee36 6b47 	vsub.f64	d6, d6, d7
				- Kpid[2].insVel + Kpid[3].insVel ) / coeffab;
 800502a:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800502c:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8005030:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005034:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8005036:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 800503a:	ee36 7b07 	vadd.f64	d7, d6, d7
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 800503e:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8005042:	ee27 5b06 	vmul.f64	d5, d7, d6
				- Kpid[2].insVel + Kpid[3].insVel ) / coeffab;
 8005046:	4b1f      	ldr	r3, [pc, #124]	; (80050c4 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8005048:	ed93 6b00 	vldr	d6, [r3]
 800504c:	ee85 7b06 	vdiv.f64	d7, d5, d6
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8005050:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8005052:	ed83 7b00 	vstr	d7, [r3]

		odom_update(vel_Car2World('x',rVx,rVy), vel_Car2World('y',rVx,rVy), rW);
 8005056:	4b1a      	ldr	r3, [pc, #104]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8005058:	ed93 7b00 	vldr	d7, [r3]
 800505c:	4b17      	ldr	r3, [pc, #92]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x410>)
 800505e:	ed93 6b00 	vldr	d6, [r3]
 8005062:	eeb0 1b46 	vmov.f64	d1, d6
 8005066:	eeb0 0b47 	vmov.f64	d0, d7
 800506a:	2078      	movs	r0, #120	; 0x78
 800506c:	f7ff f966 	bl	800433c <vel_Car2World>
 8005070:	eeb0 8b40 	vmov.f64	d8, d0
 8005074:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8005076:	ed93 7b00 	vldr	d7, [r3]
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x410>)
 800507c:	ed93 6b00 	vldr	d6, [r3]
 8005080:	eeb0 1b46 	vmov.f64	d1, d6
 8005084:	eeb0 0b47 	vmov.f64	d0, d7
 8005088:	2079      	movs	r0, #121	; 0x79
 800508a:	f7ff f957 	bl	800433c <vel_Car2World>
 800508e:	eeb0 6b40 	vmov.f64	d6, d0
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8005094:	ed93 7b00 	vldr	d7, [r3]
 8005098:	eeb0 2b47 	vmov.f64	d2, d7
 800509c:	eeb0 1b46 	vmov.f64	d1, d6
 80050a0:	eeb0 0b48 	vmov.f64	d0, d8
 80050a4:	f7ff f884 	bl	80041b0 <odom_update>
	}
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	ecbd 8b02 	vpop	{d8}
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	24000000 	.word	0x24000000
 80050b8:	58021000 	.word	0x58021000
 80050bc:	24001ba8 	.word	0x24001ba8
 80050c0:	24001ba0 	.word	0x24001ba0
 80050c4:	240001c8 	.word	0x240001c8
 80050c8:	24001bb0 	.word	0x24001bb0

080050cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80050cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005104 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80050d0:	f7ff fd74 	bl	8004bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050d4:	480c      	ldr	r0, [pc, #48]	; (8005108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050d6:	490d      	ldr	r1, [pc, #52]	; (800510c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050d8:	4a0d      	ldr	r2, [pc, #52]	; (8005110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050dc:	e002      	b.n	80050e4 <LoopCopyDataInit>

080050de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050e2:	3304      	adds	r3, #4

080050e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050e8:	d3f9      	bcc.n	80050de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ea:	4a0a      	ldr	r2, [pc, #40]	; (8005114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80050ec:	4c0a      	ldr	r4, [pc, #40]	; (8005118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80050ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050f0:	e001      	b.n	80050f6 <LoopFillZerobss>

080050f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050f4:	3204      	adds	r2, #4

080050f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050f8:	d3fb      	bcc.n	80050f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050fa:	f00a fb75 	bl	800f7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050fe:	f7fb fc59 	bl	80009b4 <main>
  bx  lr
 8005102:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005104:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005108:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800510c:	24000240 	.word	0x24000240
  ldr r2, =_sidata
 8005110:	0801005c 	.word	0x0801005c
  ldr r2, =_sbss
 8005114:	24000240 	.word	0x24000240
  ldr r4, =_ebss
 8005118:	24001cc0 	.word	0x24001cc0

0800511c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800511c:	e7fe      	b.n	800511c <ADC3_IRQHandler>
	...

08005120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005126:	2003      	movs	r0, #3
 8005128:	f000 f980 	bl	800542c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800512c:	f004 fa42 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 8005130:	4602      	mov	r2, r0
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <HAL_Init+0x68>)
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	0a1b      	lsrs	r3, r3, #8
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	4913      	ldr	r1, [pc, #76]	; (800518c <HAL_Init+0x6c>)
 800513e:	5ccb      	ldrb	r3, [r1, r3]
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
 8005148:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <HAL_Init+0x68>)
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	4a0e      	ldr	r2, [pc, #56]	; (800518c <HAL_Init+0x6c>)
 8005154:	5cd3      	ldrb	r3, [r2, r3]
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
 8005160:	4a0b      	ldr	r2, [pc, #44]	; (8005190 <HAL_Init+0x70>)
 8005162:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005164:	4a0b      	ldr	r2, [pc, #44]	; (8005194 <HAL_Init+0x74>)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800516a:	200f      	movs	r0, #15
 800516c:	f000 f814 	bl	8005198 <HAL_InitTick>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e002      	b.n	8005180 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800517a:	f7ff f92f 	bl	80043dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	58024400 	.word	0x58024400
 800518c:	0800fe30 	.word	0x0800fe30
 8005190:	240001c4 	.word	0x240001c4
 8005194:	240001c0 	.word	0x240001c0

08005198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80051a0:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <HAL_InitTick+0x60>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e021      	b.n	80051f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80051ac:	4b13      	ldr	r3, [pc, #76]	; (80051fc <HAL_InitTick+0x64>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <HAL_InitTick+0x60>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80051be:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f973 	bl	80054ae <HAL_SYSTICK_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e00e      	b.n	80051f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b0f      	cmp	r3, #15
 80051d6:	d80a      	bhi.n	80051ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051d8:	2200      	movs	r2, #0
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	f000 f92f 	bl	8005442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051e4:	4a06      	ldr	r2, [pc, #24]	; (8005200 <HAL_InitTick+0x68>)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e000      	b.n	80051f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	240001d4 	.word	0x240001d4
 80051fc:	240001c0 	.word	0x240001c0
 8005200:	240001d0 	.word	0x240001d0

08005204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <HAL_IncTick+0x20>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_IncTick+0x24>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4413      	add	r3, r2
 8005214:	4a04      	ldr	r2, [pc, #16]	; (8005228 <HAL_IncTick+0x24>)
 8005216:	6013      	str	r3, [r2, #0]
}
 8005218:	bf00      	nop
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	240001d4 	.word	0x240001d4
 8005228:	24001cac 	.word	0x24001cac

0800522c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return uwTick;
 8005230:	4b03      	ldr	r3, [pc, #12]	; (8005240 <HAL_GetTick+0x14>)
 8005232:	681b      	ldr	r3, [r3, #0]
}
 8005234:	4618      	mov	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	24001cac 	.word	0x24001cac

08005244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <__NVIC_SetPriorityGrouping+0x40>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005260:	4013      	ands	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <__NVIC_SetPriorityGrouping+0x44>)
 800526e:	4313      	orrs	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005272:	4a04      	ldr	r2, [pc, #16]	; (8005284 <__NVIC_SetPriorityGrouping+0x40>)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	60d3      	str	r3, [r2, #12]
}
 8005278:	bf00      	nop
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	e000ed00 	.word	0xe000ed00
 8005288:	05fa0000 	.word	0x05fa0000

0800528c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	0a1b      	lsrs	r3, r3, #8
 8005296:	f003 0307 	and.w	r3, r3, #7
}
 800529a:	4618      	mov	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	e000ed00 	.word	0xe000ed00

080052a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	db0b      	blt.n	80052d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	f003 021f 	and.w	r2, r3, #31
 80052c0:	4907      	ldr	r1, [pc, #28]	; (80052e0 <__NVIC_EnableIRQ+0x38>)
 80052c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	2001      	movs	r0, #1
 80052ca:	fa00 f202 	lsl.w	r2, r0, r2
 80052ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	e000e100 	.word	0xe000e100

080052e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	db12      	blt.n	800531c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	f003 021f 	and.w	r2, r3, #31
 80052fc:	490a      	ldr	r1, [pc, #40]	; (8005328 <__NVIC_DisableIRQ+0x44>)
 80052fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	2001      	movs	r0, #1
 8005306:	fa00 f202 	lsl.w	r2, r0, r2
 800530a:	3320      	adds	r3, #32
 800530c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005310:	f3bf 8f4f 	dsb	sy
}
 8005314:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005316:	f3bf 8f6f 	isb	sy
}
 800531a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	e000e100 	.word	0xe000e100

0800532c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	6039      	str	r1, [r7, #0]
 8005336:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	db0a      	blt.n	8005356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	490c      	ldr	r1, [pc, #48]	; (8005378 <__NVIC_SetPriority+0x4c>)
 8005346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800534a:	0112      	lsls	r2, r2, #4
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	440b      	add	r3, r1
 8005350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005354:	e00a      	b.n	800536c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	b2da      	uxtb	r2, r3
 800535a:	4908      	ldr	r1, [pc, #32]	; (800537c <__NVIC_SetPriority+0x50>)
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	3b04      	subs	r3, #4
 8005364:	0112      	lsls	r2, r2, #4
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	440b      	add	r3, r1
 800536a:	761a      	strb	r2, [r3, #24]
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	e000e100 	.word	0xe000e100
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005380:	b480      	push	{r7}
 8005382:	b089      	sub	sp, #36	; 0x24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f1c3 0307 	rsb	r3, r3, #7
 800539a:	2b04      	cmp	r3, #4
 800539c:	bf28      	it	cs
 800539e:	2304      	movcs	r3, #4
 80053a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3304      	adds	r3, #4
 80053a6:	2b06      	cmp	r3, #6
 80053a8:	d902      	bls.n	80053b0 <NVIC_EncodePriority+0x30>
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3b03      	subs	r3, #3
 80053ae:	e000      	b.n	80053b2 <NVIC_EncodePriority+0x32>
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43da      	mvns	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	401a      	ands	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053c8:	f04f 31ff 	mov.w	r1, #4294967295
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	43d9      	mvns	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d8:	4313      	orrs	r3, r2
         );
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3724      	adds	r7, #36	; 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053f8:	d301      	bcc.n	80053fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053fa:	2301      	movs	r3, #1
 80053fc:	e00f      	b.n	800541e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053fe:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <SysTick_Config+0x40>)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3b01      	subs	r3, #1
 8005404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005406:	210f      	movs	r1, #15
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	f7ff ff8e 	bl	800532c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <SysTick_Config+0x40>)
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005416:	4b04      	ldr	r3, [pc, #16]	; (8005428 <SysTick_Config+0x40>)
 8005418:	2207      	movs	r2, #7
 800541a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	e000e010 	.word	0xe000e010

0800542c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff ff05 	bl	8005244 <__NVIC_SetPriorityGrouping>
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b086      	sub	sp, #24
 8005446:	af00      	add	r7, sp, #0
 8005448:	4603      	mov	r3, r0
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005450:	f7ff ff1c 	bl	800528c <__NVIC_GetPriorityGrouping>
 8005454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	6978      	ldr	r0, [r7, #20]
 800545c:	f7ff ff90 	bl	8005380 <NVIC_EncodePriority>
 8005460:	4602      	mov	r2, r0
 8005462:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005466:	4611      	mov	r1, r2
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff ff5f 	bl	800532c <__NVIC_SetPriority>
}
 800546e:	bf00      	nop
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	4603      	mov	r3, r0
 800547e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff ff0f 	bl	80052a8 <__NVIC_EnableIRQ>
}
 800548a:	bf00      	nop
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	4603      	mov	r3, r0
 800549a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800549c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff ff1f 	bl	80052e4 <__NVIC_DisableIRQ>
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff ff96 	bl	80053e8 <SysTick_Config>
 80054bc:	4603      	mov	r3, r0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80054d0:	f7ff feac 	bl	800522c <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e314      	b.n	8005b0a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a66      	ldr	r2, [pc, #408]	; (8005680 <HAL_DMA_Init+0x1b8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d04a      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a65      	ldr	r2, [pc, #404]	; (8005684 <HAL_DMA_Init+0x1bc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d045      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a63      	ldr	r2, [pc, #396]	; (8005688 <HAL_DMA_Init+0x1c0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d040      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a62      	ldr	r2, [pc, #392]	; (800568c <HAL_DMA_Init+0x1c4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d03b      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a60      	ldr	r2, [pc, #384]	; (8005690 <HAL_DMA_Init+0x1c8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d036      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a5f      	ldr	r2, [pc, #380]	; (8005694 <HAL_DMA_Init+0x1cc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d031      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a5d      	ldr	r2, [pc, #372]	; (8005698 <HAL_DMA_Init+0x1d0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d02c      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a5c      	ldr	r2, [pc, #368]	; (800569c <HAL_DMA_Init+0x1d4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d027      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5a      	ldr	r2, [pc, #360]	; (80056a0 <HAL_DMA_Init+0x1d8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d022      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a59      	ldr	r2, [pc, #356]	; (80056a4 <HAL_DMA_Init+0x1dc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d01d      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a57      	ldr	r2, [pc, #348]	; (80056a8 <HAL_DMA_Init+0x1e0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d018      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a56      	ldr	r2, [pc, #344]	; (80056ac <HAL_DMA_Init+0x1e4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a54      	ldr	r2, [pc, #336]	; (80056b0 <HAL_DMA_Init+0x1e8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00e      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a53      	ldr	r2, [pc, #332]	; (80056b4 <HAL_DMA_Init+0x1ec>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a51      	ldr	r2, [pc, #324]	; (80056b8 <HAL_DMA_Init+0x1f0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_DMA_Init+0xb8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a50      	ldr	r2, [pc, #320]	; (80056bc <HAL_DMA_Init+0x1f4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d101      	bne.n	8005584 <HAL_DMA_Init+0xbc>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <HAL_DMA_Init+0xbe>
 8005584:	2300      	movs	r3, #0
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 813c 	beq.w	8005804 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a37      	ldr	r2, [pc, #220]	; (8005680 <HAL_DMA_Init+0x1b8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d04a      	beq.n	800563c <HAL_DMA_Init+0x174>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a36      	ldr	r2, [pc, #216]	; (8005684 <HAL_DMA_Init+0x1bc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d045      	beq.n	800563c <HAL_DMA_Init+0x174>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a34      	ldr	r2, [pc, #208]	; (8005688 <HAL_DMA_Init+0x1c0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d040      	beq.n	800563c <HAL_DMA_Init+0x174>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a33      	ldr	r2, [pc, #204]	; (800568c <HAL_DMA_Init+0x1c4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d03b      	beq.n	800563c <HAL_DMA_Init+0x174>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a31      	ldr	r2, [pc, #196]	; (8005690 <HAL_DMA_Init+0x1c8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d036      	beq.n	800563c <HAL_DMA_Init+0x174>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a30      	ldr	r2, [pc, #192]	; (8005694 <HAL_DMA_Init+0x1cc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d031      	beq.n	800563c <HAL_DMA_Init+0x174>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2e      	ldr	r2, [pc, #184]	; (8005698 <HAL_DMA_Init+0x1d0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d02c      	beq.n	800563c <HAL_DMA_Init+0x174>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a2d      	ldr	r2, [pc, #180]	; (800569c <HAL_DMA_Init+0x1d4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d027      	beq.n	800563c <HAL_DMA_Init+0x174>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a2b      	ldr	r2, [pc, #172]	; (80056a0 <HAL_DMA_Init+0x1d8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d022      	beq.n	800563c <HAL_DMA_Init+0x174>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <HAL_DMA_Init+0x1dc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d01d      	beq.n	800563c <HAL_DMA_Init+0x174>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a28      	ldr	r2, [pc, #160]	; (80056a8 <HAL_DMA_Init+0x1e0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d018      	beq.n	800563c <HAL_DMA_Init+0x174>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a27      	ldr	r2, [pc, #156]	; (80056ac <HAL_DMA_Init+0x1e4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d013      	beq.n	800563c <HAL_DMA_Init+0x174>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a25      	ldr	r2, [pc, #148]	; (80056b0 <HAL_DMA_Init+0x1e8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00e      	beq.n	800563c <HAL_DMA_Init+0x174>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a24      	ldr	r2, [pc, #144]	; (80056b4 <HAL_DMA_Init+0x1ec>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_DMA_Init+0x174>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a22      	ldr	r2, [pc, #136]	; (80056b8 <HAL_DMA_Init+0x1f0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_DMA_Init+0x174>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a21      	ldr	r2, [pc, #132]	; (80056bc <HAL_DMA_Init+0x1f4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d108      	bne.n	800564e <HAL_DMA_Init+0x186>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	e007      	b.n	800565e <HAL_DMA_Init+0x196>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0201 	bic.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800565e:	e02f      	b.n	80056c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005660:	f7ff fde4 	bl	800522c <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b05      	cmp	r3, #5
 800566c:	d928      	bls.n	80056c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2203      	movs	r2, #3
 8005678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e244      	b.n	8005b0a <HAL_DMA_Init+0x642>
 8005680:	40020010 	.word	0x40020010
 8005684:	40020028 	.word	0x40020028
 8005688:	40020040 	.word	0x40020040
 800568c:	40020058 	.word	0x40020058
 8005690:	40020070 	.word	0x40020070
 8005694:	40020088 	.word	0x40020088
 8005698:	400200a0 	.word	0x400200a0
 800569c:	400200b8 	.word	0x400200b8
 80056a0:	40020410 	.word	0x40020410
 80056a4:	40020428 	.word	0x40020428
 80056a8:	40020440 	.word	0x40020440
 80056ac:	40020458 	.word	0x40020458
 80056b0:	40020470 	.word	0x40020470
 80056b4:	40020488 	.word	0x40020488
 80056b8:	400204a0 	.word	0x400204a0
 80056bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1c8      	bne.n	8005660 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4b84      	ldr	r3, [pc, #528]	; (80058ec <HAL_DMA_Init+0x424>)
 80056da:	4013      	ands	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80056e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2b04      	cmp	r3, #4
 8005712:	d107      	bne.n	8005724 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	4313      	orrs	r3, r2
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b28      	cmp	r3, #40	; 0x28
 800572a:	d903      	bls.n	8005734 <HAL_DMA_Init+0x26c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b2e      	cmp	r3, #46	; 0x2e
 8005732:	d91f      	bls.n	8005774 <HAL_DMA_Init+0x2ac>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b3e      	cmp	r3, #62	; 0x3e
 800573a:	d903      	bls.n	8005744 <HAL_DMA_Init+0x27c>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b42      	cmp	r3, #66	; 0x42
 8005742:	d917      	bls.n	8005774 <HAL_DMA_Init+0x2ac>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b46      	cmp	r3, #70	; 0x46
 800574a:	d903      	bls.n	8005754 <HAL_DMA_Init+0x28c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b48      	cmp	r3, #72	; 0x48
 8005752:	d90f      	bls.n	8005774 <HAL_DMA_Init+0x2ac>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b4e      	cmp	r3, #78	; 0x4e
 800575a:	d903      	bls.n	8005764 <HAL_DMA_Init+0x29c>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b52      	cmp	r3, #82	; 0x52
 8005762:	d907      	bls.n	8005774 <HAL_DMA_Init+0x2ac>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b73      	cmp	r3, #115	; 0x73
 800576a:	d905      	bls.n	8005778 <HAL_DMA_Init+0x2b0>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b77      	cmp	r3, #119	; 0x77
 8005772:	d801      	bhi.n	8005778 <HAL_DMA_Init+0x2b0>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_DMA_Init+0x2b2>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005784:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 0307 	bic.w	r3, r3, #7
 800579c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d117      	bne.n	80057e0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00e      	beq.n	80057e0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f002 fce6 	bl	8008194 <DMA_CheckFifoParam>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d008      	beq.n	80057e0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2240      	movs	r2, #64	; 0x40
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e194      	b.n	8005b0a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f002 fc21 	bl	8008030 <DMA_CalcBaseAndBitshift>
 80057ee:	4603      	mov	r3, r0
 80057f0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	223f      	movs	r2, #63	; 0x3f
 80057fc:	409a      	lsls	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	609a      	str	r2, [r3, #8]
 8005802:	e0ca      	b.n	800599a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a39      	ldr	r2, [pc, #228]	; (80058f0 <HAL_DMA_Init+0x428>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_DMA_Init+0x38c>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a38      	ldr	r2, [pc, #224]	; (80058f4 <HAL_DMA_Init+0x42c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d01d      	beq.n	8005854 <HAL_DMA_Init+0x38c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a36      	ldr	r2, [pc, #216]	; (80058f8 <HAL_DMA_Init+0x430>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_DMA_Init+0x38c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a35      	ldr	r2, [pc, #212]	; (80058fc <HAL_DMA_Init+0x434>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_DMA_Init+0x38c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a33      	ldr	r2, [pc, #204]	; (8005900 <HAL_DMA_Init+0x438>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_DMA_Init+0x38c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a32      	ldr	r2, [pc, #200]	; (8005904 <HAL_DMA_Init+0x43c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_DMA_Init+0x38c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a30      	ldr	r2, [pc, #192]	; (8005908 <HAL_DMA_Init+0x440>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_DMA_Init+0x38c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a2f      	ldr	r2, [pc, #188]	; (800590c <HAL_DMA_Init+0x444>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d101      	bne.n	8005858 <HAL_DMA_Init+0x390>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <HAL_DMA_Init+0x392>
 8005858:	2300      	movs	r3, #0
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8094 	beq.w	8005988 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <HAL_DMA_Init+0x428>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d021      	beq.n	80058ae <HAL_DMA_Init+0x3e6>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a21      	ldr	r2, [pc, #132]	; (80058f4 <HAL_DMA_Init+0x42c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d01c      	beq.n	80058ae <HAL_DMA_Init+0x3e6>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <HAL_DMA_Init+0x430>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d017      	beq.n	80058ae <HAL_DMA_Init+0x3e6>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1e      	ldr	r2, [pc, #120]	; (80058fc <HAL_DMA_Init+0x434>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d012      	beq.n	80058ae <HAL_DMA_Init+0x3e6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1c      	ldr	r2, [pc, #112]	; (8005900 <HAL_DMA_Init+0x438>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00d      	beq.n	80058ae <HAL_DMA_Init+0x3e6>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <HAL_DMA_Init+0x43c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d008      	beq.n	80058ae <HAL_DMA_Init+0x3e6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a19      	ldr	r2, [pc, #100]	; (8005908 <HAL_DMA_Init+0x440>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <HAL_DMA_Init+0x3e6>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a18      	ldr	r2, [pc, #96]	; (800590c <HAL_DMA_Init+0x444>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <HAL_DMA_Init+0x448>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d01d      	beq.n	8005914 <HAL_DMA_Init+0x44c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b80      	cmp	r3, #128	; 0x80
 80058de:	d102      	bne.n	80058e6 <HAL_DMA_Init+0x41e>
 80058e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058e4:	e017      	b.n	8005916 <HAL_DMA_Init+0x44e>
 80058e6:	2300      	movs	r3, #0
 80058e8:	e015      	b.n	8005916 <HAL_DMA_Init+0x44e>
 80058ea:	bf00      	nop
 80058ec:	fe10803f 	.word	0xfe10803f
 80058f0:	58025408 	.word	0x58025408
 80058f4:	5802541c 	.word	0x5802541c
 80058f8:	58025430 	.word	0x58025430
 80058fc:	58025444 	.word	0x58025444
 8005900:	58025458 	.word	0x58025458
 8005904:	5802546c 	.word	0x5802546c
 8005908:	58025480 	.word	0x58025480
 800590c:	58025494 	.word	0x58025494
 8005910:	fffe000f 	.word	0xfffe000f
 8005914:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	68d2      	ldr	r2, [r2, #12]
 800591a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800591c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005924:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800592c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005934:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800593c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005944:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	4b6e      	ldr	r3, [pc, #440]	; (8005b14 <HAL_DMA_Init+0x64c>)
 800595c:	4413      	add	r3, r2
 800595e:	4a6e      	ldr	r2, [pc, #440]	; (8005b18 <HAL_DMA_Init+0x650>)
 8005960:	fba2 2303 	umull	r2, r3, r2, r3
 8005964:	091b      	lsrs	r3, r3, #4
 8005966:	009a      	lsls	r2, r3, #2
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f002 fb5f 	bl	8008030 <DMA_CalcBaseAndBitshift>
 8005972:	4603      	mov	r3, r0
 8005974:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	2201      	movs	r2, #1
 8005980:	409a      	lsls	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	e008      	b.n	800599a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2240      	movs	r2, #64	; 0x40
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2203      	movs	r2, #3
 8005992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e0b7      	b.n	8005b0a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a5f      	ldr	r2, [pc, #380]	; (8005b1c <HAL_DMA_Init+0x654>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d072      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a5d      	ldr	r2, [pc, #372]	; (8005b20 <HAL_DMA_Init+0x658>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d06d      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a5c      	ldr	r2, [pc, #368]	; (8005b24 <HAL_DMA_Init+0x65c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d068      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a5a      	ldr	r2, [pc, #360]	; (8005b28 <HAL_DMA_Init+0x660>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d063      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a59      	ldr	r2, [pc, #356]	; (8005b2c <HAL_DMA_Init+0x664>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d05e      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a57      	ldr	r2, [pc, #348]	; (8005b30 <HAL_DMA_Init+0x668>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d059      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a56      	ldr	r2, [pc, #344]	; (8005b34 <HAL_DMA_Init+0x66c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d054      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a54      	ldr	r2, [pc, #336]	; (8005b38 <HAL_DMA_Init+0x670>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d04f      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a53      	ldr	r2, [pc, #332]	; (8005b3c <HAL_DMA_Init+0x674>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d04a      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a51      	ldr	r2, [pc, #324]	; (8005b40 <HAL_DMA_Init+0x678>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d045      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a50      	ldr	r2, [pc, #320]	; (8005b44 <HAL_DMA_Init+0x67c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d040      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a4e      	ldr	r2, [pc, #312]	; (8005b48 <HAL_DMA_Init+0x680>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d03b      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a4d      	ldr	r2, [pc, #308]	; (8005b4c <HAL_DMA_Init+0x684>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d036      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a4b      	ldr	r2, [pc, #300]	; (8005b50 <HAL_DMA_Init+0x688>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d031      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a4a      	ldr	r2, [pc, #296]	; (8005b54 <HAL_DMA_Init+0x68c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d02c      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a48      	ldr	r2, [pc, #288]	; (8005b58 <HAL_DMA_Init+0x690>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d027      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a47      	ldr	r2, [pc, #284]	; (8005b5c <HAL_DMA_Init+0x694>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d022      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a45      	ldr	r2, [pc, #276]	; (8005b60 <HAL_DMA_Init+0x698>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01d      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a44      	ldr	r2, [pc, #272]	; (8005b64 <HAL_DMA_Init+0x69c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d018      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a42      	ldr	r2, [pc, #264]	; (8005b68 <HAL_DMA_Init+0x6a0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a41      	ldr	r2, [pc, #260]	; (8005b6c <HAL_DMA_Init+0x6a4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a3f      	ldr	r2, [pc, #252]	; (8005b70 <HAL_DMA_Init+0x6a8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a3e      	ldr	r2, [pc, #248]	; (8005b74 <HAL_DMA_Init+0x6ac>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_DMA_Init+0x5c2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a3c      	ldr	r2, [pc, #240]	; (8005b78 <HAL_DMA_Init+0x6b0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_DMA_Init+0x5c6>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <HAL_DMA_Init+0x5c8>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d032      	beq.n	8005afa <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f002 fbf9 	bl	800828c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b80      	cmp	r3, #128	; 0x80
 8005aa0:	d102      	bne.n	8005aa8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005abc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d010      	beq.n	8005ae8 <HAL_DMA_Init+0x620>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d80c      	bhi.n	8005ae8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f002 fc76 	bl	80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	e008      	b.n	8005afa <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	a7fdabf8 	.word	0xa7fdabf8
 8005b18:	cccccccd 	.word	0xcccccccd
 8005b1c:	40020010 	.word	0x40020010
 8005b20:	40020028 	.word	0x40020028
 8005b24:	40020040 	.word	0x40020040
 8005b28:	40020058 	.word	0x40020058
 8005b2c:	40020070 	.word	0x40020070
 8005b30:	40020088 	.word	0x40020088
 8005b34:	400200a0 	.word	0x400200a0
 8005b38:	400200b8 	.word	0x400200b8
 8005b3c:	40020410 	.word	0x40020410
 8005b40:	40020428 	.word	0x40020428
 8005b44:	40020440 	.word	0x40020440
 8005b48:	40020458 	.word	0x40020458
 8005b4c:	40020470 	.word	0x40020470
 8005b50:	40020488 	.word	0x40020488
 8005b54:	400204a0 	.word	0x400204a0
 8005b58:	400204b8 	.word	0x400204b8
 8005b5c:	58025408 	.word	0x58025408
 8005b60:	5802541c 	.word	0x5802541c
 8005b64:	58025430 	.word	0x58025430
 8005b68:	58025444 	.word	0x58025444
 8005b6c:	58025458 	.word	0x58025458
 8005b70:	5802546c 	.word	0x5802546c
 8005b74:	58025480 	.word	0x58025480
 8005b78:	58025494 	.word	0x58025494

08005b7c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e1a8      	b.n	8005ee0 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a82      	ldr	r2, [pc, #520]	; (8005d9c <HAL_DMA_DeInit+0x220>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d04a      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a80      	ldr	r2, [pc, #512]	; (8005da0 <HAL_DMA_DeInit+0x224>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d045      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a7f      	ldr	r2, [pc, #508]	; (8005da4 <HAL_DMA_DeInit+0x228>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d040      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a7d      	ldr	r2, [pc, #500]	; (8005da8 <HAL_DMA_DeInit+0x22c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d03b      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a7c      	ldr	r2, [pc, #496]	; (8005dac <HAL_DMA_DeInit+0x230>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d036      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a7a      	ldr	r2, [pc, #488]	; (8005db0 <HAL_DMA_DeInit+0x234>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d031      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a79      	ldr	r2, [pc, #484]	; (8005db4 <HAL_DMA_DeInit+0x238>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d02c      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a77      	ldr	r2, [pc, #476]	; (8005db8 <HAL_DMA_DeInit+0x23c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d027      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a76      	ldr	r2, [pc, #472]	; (8005dbc <HAL_DMA_DeInit+0x240>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d022      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a74      	ldr	r2, [pc, #464]	; (8005dc0 <HAL_DMA_DeInit+0x244>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01d      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a73      	ldr	r2, [pc, #460]	; (8005dc4 <HAL_DMA_DeInit+0x248>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d018      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a71      	ldr	r2, [pc, #452]	; (8005dc8 <HAL_DMA_DeInit+0x24c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d013      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a70      	ldr	r2, [pc, #448]	; (8005dcc <HAL_DMA_DeInit+0x250>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00e      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a6e      	ldr	r2, [pc, #440]	; (8005dd0 <HAL_DMA_DeInit+0x254>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d009      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a6d      	ldr	r2, [pc, #436]	; (8005dd4 <HAL_DMA_DeInit+0x258>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d004      	beq.n	8005c2e <HAL_DMA_DeInit+0xb2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a6b      	ldr	r2, [pc, #428]	; (8005dd8 <HAL_DMA_DeInit+0x25c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d108      	bne.n	8005c40 <HAL_DMA_DeInit+0xc4>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e007      	b.n	8005c50 <HAL_DMA_DeInit+0xd4>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a51      	ldr	r2, [pc, #324]	; (8005d9c <HAL_DMA_DeInit+0x220>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d04a      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a50      	ldr	r2, [pc, #320]	; (8005da0 <HAL_DMA_DeInit+0x224>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d045      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a4e      	ldr	r2, [pc, #312]	; (8005da4 <HAL_DMA_DeInit+0x228>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d040      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a4d      	ldr	r2, [pc, #308]	; (8005da8 <HAL_DMA_DeInit+0x22c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d03b      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a4b      	ldr	r2, [pc, #300]	; (8005dac <HAL_DMA_DeInit+0x230>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d036      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a4a      	ldr	r2, [pc, #296]	; (8005db0 <HAL_DMA_DeInit+0x234>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d031      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a48      	ldr	r2, [pc, #288]	; (8005db4 <HAL_DMA_DeInit+0x238>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d02c      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a47      	ldr	r2, [pc, #284]	; (8005db8 <HAL_DMA_DeInit+0x23c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d027      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a45      	ldr	r2, [pc, #276]	; (8005dbc <HAL_DMA_DeInit+0x240>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d022      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a44      	ldr	r2, [pc, #272]	; (8005dc0 <HAL_DMA_DeInit+0x244>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d01d      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a42      	ldr	r2, [pc, #264]	; (8005dc4 <HAL_DMA_DeInit+0x248>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d018      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a41      	ldr	r2, [pc, #260]	; (8005dc8 <HAL_DMA_DeInit+0x24c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d013      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a3f      	ldr	r2, [pc, #252]	; (8005dcc <HAL_DMA_DeInit+0x250>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00e      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a3e      	ldr	r2, [pc, #248]	; (8005dd0 <HAL_DMA_DeInit+0x254>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d009      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a3c      	ldr	r2, [pc, #240]	; (8005dd4 <HAL_DMA_DeInit+0x258>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d004      	beq.n	8005cf0 <HAL_DMA_DeInit+0x174>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a3b      	ldr	r2, [pc, #236]	; (8005dd8 <HAL_DMA_DeInit+0x25c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d101      	bne.n	8005cf4 <HAL_DMA_DeInit+0x178>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <HAL_DMA_DeInit+0x17a>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d025      	beq.n	8005d46 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2221      	movs	r2, #33	; 0x21
 8005d28:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f002 f980 	bl	8008030 <DMA_CalcBaseAndBitshift>
 8005d30:	4603      	mov	r3, r0
 8005d32:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	223f      	movs	r2, #63	; 0x3f
 8005d3e:	409a      	lsls	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	609a      	str	r2, [r3, #8]
 8005d44:	e081      	b.n	8005e4a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a24      	ldr	r2, [pc, #144]	; (8005ddc <HAL_DMA_DeInit+0x260>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d022      	beq.n	8005d96 <HAL_DMA_DeInit+0x21a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <HAL_DMA_DeInit+0x264>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01d      	beq.n	8005d96 <HAL_DMA_DeInit+0x21a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <HAL_DMA_DeInit+0x268>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d018      	beq.n	8005d96 <HAL_DMA_DeInit+0x21a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1f      	ldr	r2, [pc, #124]	; (8005de8 <HAL_DMA_DeInit+0x26c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <HAL_DMA_DeInit+0x21a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1e      	ldr	r2, [pc, #120]	; (8005dec <HAL_DMA_DeInit+0x270>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <HAL_DMA_DeInit+0x21a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1c      	ldr	r2, [pc, #112]	; (8005df0 <HAL_DMA_DeInit+0x274>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_DMA_DeInit+0x21a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <HAL_DMA_DeInit+0x278>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_DMA_DeInit+0x21a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a19      	ldr	r2, [pc, #100]	; (8005df8 <HAL_DMA_DeInit+0x27c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d132      	bne.n	8005dfc <HAL_DMA_DeInit+0x280>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e031      	b.n	8005dfe <HAL_DMA_DeInit+0x282>
 8005d9a:	bf00      	nop
 8005d9c:	40020010 	.word	0x40020010
 8005da0:	40020028 	.word	0x40020028
 8005da4:	40020040 	.word	0x40020040
 8005da8:	40020058 	.word	0x40020058
 8005dac:	40020070 	.word	0x40020070
 8005db0:	40020088 	.word	0x40020088
 8005db4:	400200a0 	.word	0x400200a0
 8005db8:	400200b8 	.word	0x400200b8
 8005dbc:	40020410 	.word	0x40020410
 8005dc0:	40020428 	.word	0x40020428
 8005dc4:	40020440 	.word	0x40020440
 8005dc8:	40020458 	.word	0x40020458
 8005dcc:	40020470 	.word	0x40020470
 8005dd0:	40020488 	.word	0x40020488
 8005dd4:	400204a0 	.word	0x400204a0
 8005dd8:	400204b8 	.word	0x400204b8
 8005ddc:	58025408 	.word	0x58025408
 8005de0:	5802541c 	.word	0x5802541c
 8005de4:	58025430 	.word	0x58025430
 8005de8:	58025444 	.word	0x58025444
 8005dec:	58025458 	.word	0x58025458
 8005df0:	5802546c 	.word	0x5802546c
 8005df4:	58025480 	.word	0x58025480
 8005df8:	58025494 	.word	0x58025494
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d021      	beq.n	8005e46 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f002 f900 	bl	8008030 <DMA_CalcBaseAndBitshift>
 8005e30:	4603      	mov	r3, r0
 8005e32:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	605a      	str	r2, [r3, #4]
 8005e44:	e001      	b.n	8005e4a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e04a      	b.n	8005ee0 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f002 fa1e 	bl	800828c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e68:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00f      	beq.n	8005e92 <HAL_DMA_DeInit+0x316>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d80b      	bhi.n	8005e92 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f002 faa0 	bl	80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e90:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e226      	b.n	8006352 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_DMA_Start_IT+0x2a>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e21f      	b.n	8006352 <HAL_DMA_Start_IT+0x46a>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	f040 820a 	bne.w	800633c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a68      	ldr	r2, [pc, #416]	; (80060dc <HAL_DMA_Start_IT+0x1f4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d04a      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a66      	ldr	r2, [pc, #408]	; (80060e0 <HAL_DMA_Start_IT+0x1f8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d045      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a65      	ldr	r2, [pc, #404]	; (80060e4 <HAL_DMA_Start_IT+0x1fc>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d040      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a63      	ldr	r2, [pc, #396]	; (80060e8 <HAL_DMA_Start_IT+0x200>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d03b      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a62      	ldr	r2, [pc, #392]	; (80060ec <HAL_DMA_Start_IT+0x204>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d036      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a60      	ldr	r2, [pc, #384]	; (80060f0 <HAL_DMA_Start_IT+0x208>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d031      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a5f      	ldr	r2, [pc, #380]	; (80060f4 <HAL_DMA_Start_IT+0x20c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d02c      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <HAL_DMA_Start_IT+0x210>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d027      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a5c      	ldr	r2, [pc, #368]	; (80060fc <HAL_DMA_Start_IT+0x214>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d022      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a5a      	ldr	r2, [pc, #360]	; (8006100 <HAL_DMA_Start_IT+0x218>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01d      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a59      	ldr	r2, [pc, #356]	; (8006104 <HAL_DMA_Start_IT+0x21c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d018      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a57      	ldr	r2, [pc, #348]	; (8006108 <HAL_DMA_Start_IT+0x220>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a56      	ldr	r2, [pc, #344]	; (800610c <HAL_DMA_Start_IT+0x224>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a54      	ldr	r2, [pc, #336]	; (8006110 <HAL_DMA_Start_IT+0x228>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a53      	ldr	r2, [pc, #332]	; (8006114 <HAL_DMA_Start_IT+0x22c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a51      	ldr	r2, [pc, #324]	; (8006118 <HAL_DMA_Start_IT+0x230>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d108      	bne.n	8005fe8 <HAL_DMA_Start_IT+0x100>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0201 	bic.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	e007      	b.n	8005ff8 <HAL_DMA_Start_IT+0x110>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f001 fe6a 	bl	8007cd8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a34      	ldr	r2, [pc, #208]	; (80060dc <HAL_DMA_Start_IT+0x1f4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d04a      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a33      	ldr	r2, [pc, #204]	; (80060e0 <HAL_DMA_Start_IT+0x1f8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d045      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a31      	ldr	r2, [pc, #196]	; (80060e4 <HAL_DMA_Start_IT+0x1fc>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d040      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a30      	ldr	r2, [pc, #192]	; (80060e8 <HAL_DMA_Start_IT+0x200>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d03b      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2e      	ldr	r2, [pc, #184]	; (80060ec <HAL_DMA_Start_IT+0x204>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d036      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2d      	ldr	r2, [pc, #180]	; (80060f0 <HAL_DMA_Start_IT+0x208>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d031      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2b      	ldr	r2, [pc, #172]	; (80060f4 <HAL_DMA_Start_IT+0x20c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d02c      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2a      	ldr	r2, [pc, #168]	; (80060f8 <HAL_DMA_Start_IT+0x210>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d027      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a28      	ldr	r2, [pc, #160]	; (80060fc <HAL_DMA_Start_IT+0x214>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d022      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a27      	ldr	r2, [pc, #156]	; (8006100 <HAL_DMA_Start_IT+0x218>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d01d      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a25      	ldr	r2, [pc, #148]	; (8006104 <HAL_DMA_Start_IT+0x21c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d018      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a24      	ldr	r2, [pc, #144]	; (8006108 <HAL_DMA_Start_IT+0x220>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d013      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a22      	ldr	r2, [pc, #136]	; (800610c <HAL_DMA_Start_IT+0x224>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00e      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a21      	ldr	r2, [pc, #132]	; (8006110 <HAL_DMA_Start_IT+0x228>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d009      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1f      	ldr	r2, [pc, #124]	; (8006114 <HAL_DMA_Start_IT+0x22c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d004      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <HAL_DMA_Start_IT+0x230>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <HAL_DMA_Start_IT+0x1c0>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_DMA_Start_IT+0x1c2>
 80060a8:	2300      	movs	r3, #0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d036      	beq.n	800611c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f023 021e 	bic.w	r2, r3, #30
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0216 	orr.w	r2, r2, #22
 80060c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d03e      	beq.n	8006148 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0208 	orr.w	r2, r2, #8
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e035      	b.n	8006148 <HAL_DMA_Start_IT+0x260>
 80060dc:	40020010 	.word	0x40020010
 80060e0:	40020028 	.word	0x40020028
 80060e4:	40020040 	.word	0x40020040
 80060e8:	40020058 	.word	0x40020058
 80060ec:	40020070 	.word	0x40020070
 80060f0:	40020088 	.word	0x40020088
 80060f4:	400200a0 	.word	0x400200a0
 80060f8:	400200b8 	.word	0x400200b8
 80060fc:	40020410 	.word	0x40020410
 8006100:	40020428 	.word	0x40020428
 8006104:	40020440 	.word	0x40020440
 8006108:	40020458 	.word	0x40020458
 800610c:	40020470 	.word	0x40020470
 8006110:	40020488 	.word	0x40020488
 8006114:	400204a0 	.word	0x400204a0
 8006118:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f023 020e 	bic.w	r2, r3, #14
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 020a 	orr.w	r2, r2, #10
 800612e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0204 	orr.w	r2, r2, #4
 8006146:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a83      	ldr	r2, [pc, #524]	; (800635c <HAL_DMA_Start_IT+0x474>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d072      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a82      	ldr	r2, [pc, #520]	; (8006360 <HAL_DMA_Start_IT+0x478>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d06d      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a80      	ldr	r2, [pc, #512]	; (8006364 <HAL_DMA_Start_IT+0x47c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d068      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a7f      	ldr	r2, [pc, #508]	; (8006368 <HAL_DMA_Start_IT+0x480>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d063      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a7d      	ldr	r2, [pc, #500]	; (800636c <HAL_DMA_Start_IT+0x484>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d05e      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a7c      	ldr	r2, [pc, #496]	; (8006370 <HAL_DMA_Start_IT+0x488>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d059      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a7a      	ldr	r2, [pc, #488]	; (8006374 <HAL_DMA_Start_IT+0x48c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d054      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a79      	ldr	r2, [pc, #484]	; (8006378 <HAL_DMA_Start_IT+0x490>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d04f      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a77      	ldr	r2, [pc, #476]	; (800637c <HAL_DMA_Start_IT+0x494>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d04a      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a76      	ldr	r2, [pc, #472]	; (8006380 <HAL_DMA_Start_IT+0x498>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d045      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a74      	ldr	r2, [pc, #464]	; (8006384 <HAL_DMA_Start_IT+0x49c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d040      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a73      	ldr	r2, [pc, #460]	; (8006388 <HAL_DMA_Start_IT+0x4a0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d03b      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a71      	ldr	r2, [pc, #452]	; (800638c <HAL_DMA_Start_IT+0x4a4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d036      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a70      	ldr	r2, [pc, #448]	; (8006390 <HAL_DMA_Start_IT+0x4a8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d031      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a6e      	ldr	r2, [pc, #440]	; (8006394 <HAL_DMA_Start_IT+0x4ac>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d02c      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a6d      	ldr	r2, [pc, #436]	; (8006398 <HAL_DMA_Start_IT+0x4b0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d027      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a6b      	ldr	r2, [pc, #428]	; (800639c <HAL_DMA_Start_IT+0x4b4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d022      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a6a      	ldr	r2, [pc, #424]	; (80063a0 <HAL_DMA_Start_IT+0x4b8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d01d      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a68      	ldr	r2, [pc, #416]	; (80063a4 <HAL_DMA_Start_IT+0x4bc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d018      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a67      	ldr	r2, [pc, #412]	; (80063a8 <HAL_DMA_Start_IT+0x4c0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d013      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a65      	ldr	r2, [pc, #404]	; (80063ac <HAL_DMA_Start_IT+0x4c4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00e      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a64      	ldr	r2, [pc, #400]	; (80063b0 <HAL_DMA_Start_IT+0x4c8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d009      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a62      	ldr	r2, [pc, #392]	; (80063b4 <HAL_DMA_Start_IT+0x4cc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d004      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a61      	ldr	r2, [pc, #388]	; (80063b8 <HAL_DMA_Start_IT+0x4d0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d101      	bne.n	800623c <HAL_DMA_Start_IT+0x354>
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <HAL_DMA_Start_IT+0x356>
 800623c:	2300      	movs	r3, #0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01a      	beq.n	8006278 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800625e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006276:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a37      	ldr	r2, [pc, #220]	; (800635c <HAL_DMA_Start_IT+0x474>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d04a      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a36      	ldr	r2, [pc, #216]	; (8006360 <HAL_DMA_Start_IT+0x478>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d045      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a34      	ldr	r2, [pc, #208]	; (8006364 <HAL_DMA_Start_IT+0x47c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d040      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a33      	ldr	r2, [pc, #204]	; (8006368 <HAL_DMA_Start_IT+0x480>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d03b      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a31      	ldr	r2, [pc, #196]	; (800636c <HAL_DMA_Start_IT+0x484>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d036      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a30      	ldr	r2, [pc, #192]	; (8006370 <HAL_DMA_Start_IT+0x488>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d031      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a2e      	ldr	r2, [pc, #184]	; (8006374 <HAL_DMA_Start_IT+0x48c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d02c      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <HAL_DMA_Start_IT+0x490>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d027      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a2b      	ldr	r2, [pc, #172]	; (800637c <HAL_DMA_Start_IT+0x494>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d022      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a2a      	ldr	r2, [pc, #168]	; (8006380 <HAL_DMA_Start_IT+0x498>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d01d      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a28      	ldr	r2, [pc, #160]	; (8006384 <HAL_DMA_Start_IT+0x49c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d018      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a27      	ldr	r2, [pc, #156]	; (8006388 <HAL_DMA_Start_IT+0x4a0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a25      	ldr	r2, [pc, #148]	; (800638c <HAL_DMA_Start_IT+0x4a4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00e      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a24      	ldr	r2, [pc, #144]	; (8006390 <HAL_DMA_Start_IT+0x4a8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d009      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a22      	ldr	r2, [pc, #136]	; (8006394 <HAL_DMA_Start_IT+0x4ac>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a21      	ldr	r2, [pc, #132]	; (8006398 <HAL_DMA_Start_IT+0x4b0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d108      	bne.n	800632a <HAL_DMA_Start_IT+0x442>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e012      	b.n	8006350 <HAL_DMA_Start_IT+0x468>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e009      	b.n	8006350 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006342:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40020010 	.word	0x40020010
 8006360:	40020028 	.word	0x40020028
 8006364:	40020040 	.word	0x40020040
 8006368:	40020058 	.word	0x40020058
 800636c:	40020070 	.word	0x40020070
 8006370:	40020088 	.word	0x40020088
 8006374:	400200a0 	.word	0x400200a0
 8006378:	400200b8 	.word	0x400200b8
 800637c:	40020410 	.word	0x40020410
 8006380:	40020428 	.word	0x40020428
 8006384:	40020440 	.word	0x40020440
 8006388:	40020458 	.word	0x40020458
 800638c:	40020470 	.word	0x40020470
 8006390:	40020488 	.word	0x40020488
 8006394:	400204a0 	.word	0x400204a0
 8006398:	400204b8 	.word	0x400204b8
 800639c:	58025408 	.word	0x58025408
 80063a0:	5802541c 	.word	0x5802541c
 80063a4:	58025430 	.word	0x58025430
 80063a8:	58025444 	.word	0x58025444
 80063ac:	58025458 	.word	0x58025458
 80063b0:	5802546c 	.word	0x5802546c
 80063b4:	58025480 	.word	0x58025480
 80063b8:	58025494 	.word	0x58025494

080063bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80063c4:	f7fe ff32 	bl	800522c <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e2dc      	b.n	800698e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d008      	beq.n	80063f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2280      	movs	r2, #128	; 0x80
 80063e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e2cd      	b.n	800698e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a76      	ldr	r2, [pc, #472]	; (80065d0 <HAL_DMA_Abort+0x214>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d04a      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a74      	ldr	r2, [pc, #464]	; (80065d4 <HAL_DMA_Abort+0x218>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d045      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a73      	ldr	r2, [pc, #460]	; (80065d8 <HAL_DMA_Abort+0x21c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d040      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a71      	ldr	r2, [pc, #452]	; (80065dc <HAL_DMA_Abort+0x220>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d03b      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a70      	ldr	r2, [pc, #448]	; (80065e0 <HAL_DMA_Abort+0x224>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d036      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a6e      	ldr	r2, [pc, #440]	; (80065e4 <HAL_DMA_Abort+0x228>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d031      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a6d      	ldr	r2, [pc, #436]	; (80065e8 <HAL_DMA_Abort+0x22c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d02c      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a6b      	ldr	r2, [pc, #428]	; (80065ec <HAL_DMA_Abort+0x230>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d027      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a6a      	ldr	r2, [pc, #424]	; (80065f0 <HAL_DMA_Abort+0x234>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d022      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a68      	ldr	r2, [pc, #416]	; (80065f4 <HAL_DMA_Abort+0x238>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01d      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a67      	ldr	r2, [pc, #412]	; (80065f8 <HAL_DMA_Abort+0x23c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d018      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a65      	ldr	r2, [pc, #404]	; (80065fc <HAL_DMA_Abort+0x240>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a64      	ldr	r2, [pc, #400]	; (8006600 <HAL_DMA_Abort+0x244>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00e      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a62      	ldr	r2, [pc, #392]	; (8006604 <HAL_DMA_Abort+0x248>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a61      	ldr	r2, [pc, #388]	; (8006608 <HAL_DMA_Abort+0x24c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_DMA_Abort+0xd6>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a5f      	ldr	r2, [pc, #380]	; (800660c <HAL_DMA_Abort+0x250>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <HAL_DMA_Abort+0xda>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <HAL_DMA_Abort+0xdc>
 8006496:	2300      	movs	r3, #0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d013      	beq.n	80064c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 021e 	bic.w	r2, r2, #30
 80064aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	e00a      	b.n	80064da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 020e 	bic.w	r2, r2, #14
 80064d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a3c      	ldr	r2, [pc, #240]	; (80065d0 <HAL_DMA_Abort+0x214>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d072      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a3a      	ldr	r2, [pc, #232]	; (80065d4 <HAL_DMA_Abort+0x218>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d06d      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a39      	ldr	r2, [pc, #228]	; (80065d8 <HAL_DMA_Abort+0x21c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d068      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a37      	ldr	r2, [pc, #220]	; (80065dc <HAL_DMA_Abort+0x220>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d063      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a36      	ldr	r2, [pc, #216]	; (80065e0 <HAL_DMA_Abort+0x224>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d05e      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a34      	ldr	r2, [pc, #208]	; (80065e4 <HAL_DMA_Abort+0x228>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d059      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a33      	ldr	r2, [pc, #204]	; (80065e8 <HAL_DMA_Abort+0x22c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d054      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a31      	ldr	r2, [pc, #196]	; (80065ec <HAL_DMA_Abort+0x230>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d04f      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a30      	ldr	r2, [pc, #192]	; (80065f0 <HAL_DMA_Abort+0x234>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d04a      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a2e      	ldr	r2, [pc, #184]	; (80065f4 <HAL_DMA_Abort+0x238>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d045      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2d      	ldr	r2, [pc, #180]	; (80065f8 <HAL_DMA_Abort+0x23c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d040      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a2b      	ldr	r2, [pc, #172]	; (80065fc <HAL_DMA_Abort+0x240>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d03b      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a2a      	ldr	r2, [pc, #168]	; (8006600 <HAL_DMA_Abort+0x244>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d036      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a28      	ldr	r2, [pc, #160]	; (8006604 <HAL_DMA_Abort+0x248>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d031      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a27      	ldr	r2, [pc, #156]	; (8006608 <HAL_DMA_Abort+0x24c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d02c      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a25      	ldr	r2, [pc, #148]	; (800660c <HAL_DMA_Abort+0x250>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d027      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a24      	ldr	r2, [pc, #144]	; (8006610 <HAL_DMA_Abort+0x254>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d022      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a22      	ldr	r2, [pc, #136]	; (8006614 <HAL_DMA_Abort+0x258>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d01d      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a21      	ldr	r2, [pc, #132]	; (8006618 <HAL_DMA_Abort+0x25c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d018      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1f      	ldr	r2, [pc, #124]	; (800661c <HAL_DMA_Abort+0x260>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1e      	ldr	r2, [pc, #120]	; (8006620 <HAL_DMA_Abort+0x264>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00e      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a1c      	ldr	r2, [pc, #112]	; (8006624 <HAL_DMA_Abort+0x268>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d009      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <HAL_DMA_Abort+0x26c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_DMA_Abort+0x20e>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a19      	ldr	r2, [pc, #100]	; (800662c <HAL_DMA_Abort+0x270>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d132      	bne.n	8006630 <HAL_DMA_Abort+0x274>
 80065ca:	2301      	movs	r3, #1
 80065cc:	e031      	b.n	8006632 <HAL_DMA_Abort+0x276>
 80065ce:	bf00      	nop
 80065d0:	40020010 	.word	0x40020010
 80065d4:	40020028 	.word	0x40020028
 80065d8:	40020040 	.word	0x40020040
 80065dc:	40020058 	.word	0x40020058
 80065e0:	40020070 	.word	0x40020070
 80065e4:	40020088 	.word	0x40020088
 80065e8:	400200a0 	.word	0x400200a0
 80065ec:	400200b8 	.word	0x400200b8
 80065f0:	40020410 	.word	0x40020410
 80065f4:	40020428 	.word	0x40020428
 80065f8:	40020440 	.word	0x40020440
 80065fc:	40020458 	.word	0x40020458
 8006600:	40020470 	.word	0x40020470
 8006604:	40020488 	.word	0x40020488
 8006608:	400204a0 	.word	0x400204a0
 800660c:	400204b8 	.word	0x400204b8
 8006610:	58025408 	.word	0x58025408
 8006614:	5802541c 	.word	0x5802541c
 8006618:	58025430 	.word	0x58025430
 800661c:	58025444 	.word	0x58025444
 8006620:	58025458 	.word	0x58025458
 8006624:	5802546c 	.word	0x5802546c
 8006628:	58025480 	.word	0x58025480
 800662c:	58025494 	.word	0x58025494
 8006630:	2300      	movs	r3, #0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006644:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a6d      	ldr	r2, [pc, #436]	; (8006800 <HAL_DMA_Abort+0x444>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d04a      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a6b      	ldr	r2, [pc, #428]	; (8006804 <HAL_DMA_Abort+0x448>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d045      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a6a      	ldr	r2, [pc, #424]	; (8006808 <HAL_DMA_Abort+0x44c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d040      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a68      	ldr	r2, [pc, #416]	; (800680c <HAL_DMA_Abort+0x450>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d03b      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a67      	ldr	r2, [pc, #412]	; (8006810 <HAL_DMA_Abort+0x454>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d036      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a65      	ldr	r2, [pc, #404]	; (8006814 <HAL_DMA_Abort+0x458>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d031      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a64      	ldr	r2, [pc, #400]	; (8006818 <HAL_DMA_Abort+0x45c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d02c      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a62      	ldr	r2, [pc, #392]	; (800681c <HAL_DMA_Abort+0x460>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d027      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a61      	ldr	r2, [pc, #388]	; (8006820 <HAL_DMA_Abort+0x464>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d022      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a5f      	ldr	r2, [pc, #380]	; (8006824 <HAL_DMA_Abort+0x468>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01d      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a5e      	ldr	r2, [pc, #376]	; (8006828 <HAL_DMA_Abort+0x46c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a5c      	ldr	r2, [pc, #368]	; (800682c <HAL_DMA_Abort+0x470>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a5b      	ldr	r2, [pc, #364]	; (8006830 <HAL_DMA_Abort+0x474>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a59      	ldr	r2, [pc, #356]	; (8006834 <HAL_DMA_Abort+0x478>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a58      	ldr	r2, [pc, #352]	; (8006838 <HAL_DMA_Abort+0x47c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_DMA_Abort+0x32a>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a56      	ldr	r2, [pc, #344]	; (800683c <HAL_DMA_Abort+0x480>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d108      	bne.n	80066f8 <HAL_DMA_Abort+0x33c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e007      	b.n	8006708 <HAL_DMA_Abort+0x34c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006708:	e013      	b.n	8006732 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800670a:	f7fe fd8f 	bl	800522c <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b05      	cmp	r3, #5
 8006716:	d90c      	bls.n	8006732 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2203      	movs	r2, #3
 8006722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e12d      	b.n	800698e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e5      	bne.n	800670a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a2f      	ldr	r2, [pc, #188]	; (8006800 <HAL_DMA_Abort+0x444>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d04a      	beq.n	80067de <HAL_DMA_Abort+0x422>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a2d      	ldr	r2, [pc, #180]	; (8006804 <HAL_DMA_Abort+0x448>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d045      	beq.n	80067de <HAL_DMA_Abort+0x422>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a2c      	ldr	r2, [pc, #176]	; (8006808 <HAL_DMA_Abort+0x44c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d040      	beq.n	80067de <HAL_DMA_Abort+0x422>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a2a      	ldr	r2, [pc, #168]	; (800680c <HAL_DMA_Abort+0x450>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d03b      	beq.n	80067de <HAL_DMA_Abort+0x422>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a29      	ldr	r2, [pc, #164]	; (8006810 <HAL_DMA_Abort+0x454>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d036      	beq.n	80067de <HAL_DMA_Abort+0x422>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a27      	ldr	r2, [pc, #156]	; (8006814 <HAL_DMA_Abort+0x458>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d031      	beq.n	80067de <HAL_DMA_Abort+0x422>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a26      	ldr	r2, [pc, #152]	; (8006818 <HAL_DMA_Abort+0x45c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d02c      	beq.n	80067de <HAL_DMA_Abort+0x422>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a24      	ldr	r2, [pc, #144]	; (800681c <HAL_DMA_Abort+0x460>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d027      	beq.n	80067de <HAL_DMA_Abort+0x422>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a23      	ldr	r2, [pc, #140]	; (8006820 <HAL_DMA_Abort+0x464>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d022      	beq.n	80067de <HAL_DMA_Abort+0x422>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a21      	ldr	r2, [pc, #132]	; (8006824 <HAL_DMA_Abort+0x468>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01d      	beq.n	80067de <HAL_DMA_Abort+0x422>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a20      	ldr	r2, [pc, #128]	; (8006828 <HAL_DMA_Abort+0x46c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d018      	beq.n	80067de <HAL_DMA_Abort+0x422>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1e      	ldr	r2, [pc, #120]	; (800682c <HAL_DMA_Abort+0x470>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d013      	beq.n	80067de <HAL_DMA_Abort+0x422>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <HAL_DMA_Abort+0x474>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00e      	beq.n	80067de <HAL_DMA_Abort+0x422>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1b      	ldr	r2, [pc, #108]	; (8006834 <HAL_DMA_Abort+0x478>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d009      	beq.n	80067de <HAL_DMA_Abort+0x422>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1a      	ldr	r2, [pc, #104]	; (8006838 <HAL_DMA_Abort+0x47c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d004      	beq.n	80067de <HAL_DMA_Abort+0x422>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a18      	ldr	r2, [pc, #96]	; (800683c <HAL_DMA_Abort+0x480>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d101      	bne.n	80067e2 <HAL_DMA_Abort+0x426>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <HAL_DMA_Abort+0x428>
 80067e2:	2300      	movs	r3, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d02b      	beq.n	8006840 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	223f      	movs	r2, #63	; 0x3f
 80067f8:	409a      	lsls	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	609a      	str	r2, [r3, #8]
 80067fe:	e02a      	b.n	8006856 <HAL_DMA_Abort+0x49a>
 8006800:	40020010 	.word	0x40020010
 8006804:	40020028 	.word	0x40020028
 8006808:	40020040 	.word	0x40020040
 800680c:	40020058 	.word	0x40020058
 8006810:	40020070 	.word	0x40020070
 8006814:	40020088 	.word	0x40020088
 8006818:	400200a0 	.word	0x400200a0
 800681c:	400200b8 	.word	0x400200b8
 8006820:	40020410 	.word	0x40020410
 8006824:	40020428 	.word	0x40020428
 8006828:	40020440 	.word	0x40020440
 800682c:	40020458 	.word	0x40020458
 8006830:	40020470 	.word	0x40020470
 8006834:	40020488 	.word	0x40020488
 8006838:	400204a0 	.word	0x400204a0
 800683c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006844:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684a:	f003 031f 	and.w	r3, r3, #31
 800684e:	2201      	movs	r2, #1
 8006850:	409a      	lsls	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a4f      	ldr	r2, [pc, #316]	; (8006998 <HAL_DMA_Abort+0x5dc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d072      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a4d      	ldr	r2, [pc, #308]	; (800699c <HAL_DMA_Abort+0x5e0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d06d      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a4c      	ldr	r2, [pc, #304]	; (80069a0 <HAL_DMA_Abort+0x5e4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d068      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a4a      	ldr	r2, [pc, #296]	; (80069a4 <HAL_DMA_Abort+0x5e8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d063      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a49      	ldr	r2, [pc, #292]	; (80069a8 <HAL_DMA_Abort+0x5ec>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d05e      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a47      	ldr	r2, [pc, #284]	; (80069ac <HAL_DMA_Abort+0x5f0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d059      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a46      	ldr	r2, [pc, #280]	; (80069b0 <HAL_DMA_Abort+0x5f4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d054      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a44      	ldr	r2, [pc, #272]	; (80069b4 <HAL_DMA_Abort+0x5f8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d04f      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a43      	ldr	r2, [pc, #268]	; (80069b8 <HAL_DMA_Abort+0x5fc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d04a      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a41      	ldr	r2, [pc, #260]	; (80069bc <HAL_DMA_Abort+0x600>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d045      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a40      	ldr	r2, [pc, #256]	; (80069c0 <HAL_DMA_Abort+0x604>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d040      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a3e      	ldr	r2, [pc, #248]	; (80069c4 <HAL_DMA_Abort+0x608>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d03b      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a3d      	ldr	r2, [pc, #244]	; (80069c8 <HAL_DMA_Abort+0x60c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d036      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a3b      	ldr	r2, [pc, #236]	; (80069cc <HAL_DMA_Abort+0x610>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d031      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a3a      	ldr	r2, [pc, #232]	; (80069d0 <HAL_DMA_Abort+0x614>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d02c      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a38      	ldr	r2, [pc, #224]	; (80069d4 <HAL_DMA_Abort+0x618>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d027      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a37      	ldr	r2, [pc, #220]	; (80069d8 <HAL_DMA_Abort+0x61c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d022      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a35      	ldr	r2, [pc, #212]	; (80069dc <HAL_DMA_Abort+0x620>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01d      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a34      	ldr	r2, [pc, #208]	; (80069e0 <HAL_DMA_Abort+0x624>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d018      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a32      	ldr	r2, [pc, #200]	; (80069e4 <HAL_DMA_Abort+0x628>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a31      	ldr	r2, [pc, #196]	; (80069e8 <HAL_DMA_Abort+0x62c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2f      	ldr	r2, [pc, #188]	; (80069ec <HAL_DMA_Abort+0x630>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2e      	ldr	r2, [pc, #184]	; (80069f0 <HAL_DMA_Abort+0x634>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_DMA_Abort+0x58a>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2c      	ldr	r2, [pc, #176]	; (80069f4 <HAL_DMA_Abort+0x638>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d101      	bne.n	800694a <HAL_DMA_Abort+0x58e>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <HAL_DMA_Abort+0x590>
 800694a:	2300      	movs	r3, #0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d015      	beq.n	800697c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006958:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00c      	beq.n	800697c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006970:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800697a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	40020010 	.word	0x40020010
 800699c:	40020028 	.word	0x40020028
 80069a0:	40020040 	.word	0x40020040
 80069a4:	40020058 	.word	0x40020058
 80069a8:	40020070 	.word	0x40020070
 80069ac:	40020088 	.word	0x40020088
 80069b0:	400200a0 	.word	0x400200a0
 80069b4:	400200b8 	.word	0x400200b8
 80069b8:	40020410 	.word	0x40020410
 80069bc:	40020428 	.word	0x40020428
 80069c0:	40020440 	.word	0x40020440
 80069c4:	40020458 	.word	0x40020458
 80069c8:	40020470 	.word	0x40020470
 80069cc:	40020488 	.word	0x40020488
 80069d0:	400204a0 	.word	0x400204a0
 80069d4:	400204b8 	.word	0x400204b8
 80069d8:	58025408 	.word	0x58025408
 80069dc:	5802541c 	.word	0x5802541c
 80069e0:	58025430 	.word	0x58025430
 80069e4:	58025444 	.word	0x58025444
 80069e8:	58025458 	.word	0x58025458
 80069ec:	5802546c 	.word	0x5802546c
 80069f0:	58025480 	.word	0x58025480
 80069f4:	58025494 	.word	0x58025494

080069f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e237      	b.n	8006e7a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d004      	beq.n	8006a20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2280      	movs	r2, #128	; 0x80
 8006a1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e22c      	b.n	8006e7a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a5c      	ldr	r2, [pc, #368]	; (8006b98 <HAL_DMA_Abort_IT+0x1a0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d04a      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a5b      	ldr	r2, [pc, #364]	; (8006b9c <HAL_DMA_Abort_IT+0x1a4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d045      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a59      	ldr	r2, [pc, #356]	; (8006ba0 <HAL_DMA_Abort_IT+0x1a8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d040      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a58      	ldr	r2, [pc, #352]	; (8006ba4 <HAL_DMA_Abort_IT+0x1ac>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d03b      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a56      	ldr	r2, [pc, #344]	; (8006ba8 <HAL_DMA_Abort_IT+0x1b0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d036      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a55      	ldr	r2, [pc, #340]	; (8006bac <HAL_DMA_Abort_IT+0x1b4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d031      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a53      	ldr	r2, [pc, #332]	; (8006bb0 <HAL_DMA_Abort_IT+0x1b8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d02c      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a52      	ldr	r2, [pc, #328]	; (8006bb4 <HAL_DMA_Abort_IT+0x1bc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d027      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a50      	ldr	r2, [pc, #320]	; (8006bb8 <HAL_DMA_Abort_IT+0x1c0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d022      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a4f      	ldr	r2, [pc, #316]	; (8006bbc <HAL_DMA_Abort_IT+0x1c4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d01d      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a4d      	ldr	r2, [pc, #308]	; (8006bc0 <HAL_DMA_Abort_IT+0x1c8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a4c      	ldr	r2, [pc, #304]	; (8006bc4 <HAL_DMA_Abort_IT+0x1cc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a4a      	ldr	r2, [pc, #296]	; (8006bc8 <HAL_DMA_Abort_IT+0x1d0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a49      	ldr	r2, [pc, #292]	; (8006bcc <HAL_DMA_Abort_IT+0x1d4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a47      	ldr	r2, [pc, #284]	; (8006bd0 <HAL_DMA_Abort_IT+0x1d8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xc8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a46      	ldr	r2, [pc, #280]	; (8006bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d101      	bne.n	8006ac4 <HAL_DMA_Abort_IT+0xcc>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <HAL_DMA_Abort_IT+0xce>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8086 	beq.w	8006bd8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2204      	movs	r2, #4
 8006ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a2f      	ldr	r2, [pc, #188]	; (8006b98 <HAL_DMA_Abort_IT+0x1a0>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d04a      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a2e      	ldr	r2, [pc, #184]	; (8006b9c <HAL_DMA_Abort_IT+0x1a4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d045      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a2c      	ldr	r2, [pc, #176]	; (8006ba0 <HAL_DMA_Abort_IT+0x1a8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d040      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a2b      	ldr	r2, [pc, #172]	; (8006ba4 <HAL_DMA_Abort_IT+0x1ac>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d03b      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a29      	ldr	r2, [pc, #164]	; (8006ba8 <HAL_DMA_Abort_IT+0x1b0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d036      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a28      	ldr	r2, [pc, #160]	; (8006bac <HAL_DMA_Abort_IT+0x1b4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d031      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a26      	ldr	r2, [pc, #152]	; (8006bb0 <HAL_DMA_Abort_IT+0x1b8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d02c      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a25      	ldr	r2, [pc, #148]	; (8006bb4 <HAL_DMA_Abort_IT+0x1bc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d027      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a23      	ldr	r2, [pc, #140]	; (8006bb8 <HAL_DMA_Abort_IT+0x1c0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d022      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <HAL_DMA_Abort_IT+0x1c4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d01d      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a20      	ldr	r2, [pc, #128]	; (8006bc0 <HAL_DMA_Abort_IT+0x1c8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d018      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1f      	ldr	r2, [pc, #124]	; (8006bc4 <HAL_DMA_Abort_IT+0x1cc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d013      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1d      	ldr	r2, [pc, #116]	; (8006bc8 <HAL_DMA_Abort_IT+0x1d0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00e      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1c      	ldr	r2, [pc, #112]	; (8006bcc <HAL_DMA_Abort_IT+0x1d4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d009      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1a      	ldr	r2, [pc, #104]	; (8006bd0 <HAL_DMA_Abort_IT+0x1d8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d004      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x17c>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d108      	bne.n	8006b86 <HAL_DMA_Abort_IT+0x18e>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0201 	bic.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	e178      	b.n	8006e78 <HAL_DMA_Abort_IT+0x480>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0201 	bic.w	r2, r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	e16f      	b.n	8006e78 <HAL_DMA_Abort_IT+0x480>
 8006b98:	40020010 	.word	0x40020010
 8006b9c:	40020028 	.word	0x40020028
 8006ba0:	40020040 	.word	0x40020040
 8006ba4:	40020058 	.word	0x40020058
 8006ba8:	40020070 	.word	0x40020070
 8006bac:	40020088 	.word	0x40020088
 8006bb0:	400200a0 	.word	0x400200a0
 8006bb4:	400200b8 	.word	0x400200b8
 8006bb8:	40020410 	.word	0x40020410
 8006bbc:	40020428 	.word	0x40020428
 8006bc0:	40020440 	.word	0x40020440
 8006bc4:	40020458 	.word	0x40020458
 8006bc8:	40020470 	.word	0x40020470
 8006bcc:	40020488 	.word	0x40020488
 8006bd0:	400204a0 	.word	0x400204a0
 8006bd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 020e 	bic.w	r2, r2, #14
 8006be6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a6c      	ldr	r2, [pc, #432]	; (8006da0 <HAL_DMA_Abort_IT+0x3a8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d04a      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6b      	ldr	r2, [pc, #428]	; (8006da4 <HAL_DMA_Abort_IT+0x3ac>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d045      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a69      	ldr	r2, [pc, #420]	; (8006da8 <HAL_DMA_Abort_IT+0x3b0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d040      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a68      	ldr	r2, [pc, #416]	; (8006dac <HAL_DMA_Abort_IT+0x3b4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d03b      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a66      	ldr	r2, [pc, #408]	; (8006db0 <HAL_DMA_Abort_IT+0x3b8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d036      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a65      	ldr	r2, [pc, #404]	; (8006db4 <HAL_DMA_Abort_IT+0x3bc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d031      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a63      	ldr	r2, [pc, #396]	; (8006db8 <HAL_DMA_Abort_IT+0x3c0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d02c      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a62      	ldr	r2, [pc, #392]	; (8006dbc <HAL_DMA_Abort_IT+0x3c4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d027      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a60      	ldr	r2, [pc, #384]	; (8006dc0 <HAL_DMA_Abort_IT+0x3c8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d022      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a5f      	ldr	r2, [pc, #380]	; (8006dc4 <HAL_DMA_Abort_IT+0x3cc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d01d      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a5d      	ldr	r2, [pc, #372]	; (8006dc8 <HAL_DMA_Abort_IT+0x3d0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d018      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a5c      	ldr	r2, [pc, #368]	; (8006dcc <HAL_DMA_Abort_IT+0x3d4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d013      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a5a      	ldr	r2, [pc, #360]	; (8006dd0 <HAL_DMA_Abort_IT+0x3d8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00e      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a59      	ldr	r2, [pc, #356]	; (8006dd4 <HAL_DMA_Abort_IT+0x3dc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d009      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a57      	ldr	r2, [pc, #348]	; (8006dd8 <HAL_DMA_Abort_IT+0x3e0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x290>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a56      	ldr	r2, [pc, #344]	; (8006ddc <HAL_DMA_Abort_IT+0x3e4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d108      	bne.n	8006c9a <HAL_DMA_Abort_IT+0x2a2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0201 	bic.w	r2, r2, #1
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	e007      	b.n	8006caa <HAL_DMA_Abort_IT+0x2b2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a3c      	ldr	r2, [pc, #240]	; (8006da0 <HAL_DMA_Abort_IT+0x3a8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d072      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a3a      	ldr	r2, [pc, #232]	; (8006da4 <HAL_DMA_Abort_IT+0x3ac>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d06d      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a39      	ldr	r2, [pc, #228]	; (8006da8 <HAL_DMA_Abort_IT+0x3b0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d068      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a37      	ldr	r2, [pc, #220]	; (8006dac <HAL_DMA_Abort_IT+0x3b4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d063      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a36      	ldr	r2, [pc, #216]	; (8006db0 <HAL_DMA_Abort_IT+0x3b8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d05e      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a34      	ldr	r2, [pc, #208]	; (8006db4 <HAL_DMA_Abort_IT+0x3bc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d059      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a33      	ldr	r2, [pc, #204]	; (8006db8 <HAL_DMA_Abort_IT+0x3c0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d054      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a31      	ldr	r2, [pc, #196]	; (8006dbc <HAL_DMA_Abort_IT+0x3c4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d04f      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a30      	ldr	r2, [pc, #192]	; (8006dc0 <HAL_DMA_Abort_IT+0x3c8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d04a      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a2e      	ldr	r2, [pc, #184]	; (8006dc4 <HAL_DMA_Abort_IT+0x3cc>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d045      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a2d      	ldr	r2, [pc, #180]	; (8006dc8 <HAL_DMA_Abort_IT+0x3d0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d040      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a2b      	ldr	r2, [pc, #172]	; (8006dcc <HAL_DMA_Abort_IT+0x3d4>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d03b      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a2a      	ldr	r2, [pc, #168]	; (8006dd0 <HAL_DMA_Abort_IT+0x3d8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d036      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a28      	ldr	r2, [pc, #160]	; (8006dd4 <HAL_DMA_Abort_IT+0x3dc>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d031      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a27      	ldr	r2, [pc, #156]	; (8006dd8 <HAL_DMA_Abort_IT+0x3e0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d02c      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a25      	ldr	r2, [pc, #148]	; (8006ddc <HAL_DMA_Abort_IT+0x3e4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d027      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a24      	ldr	r2, [pc, #144]	; (8006de0 <HAL_DMA_Abort_IT+0x3e8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d022      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a22      	ldr	r2, [pc, #136]	; (8006de4 <HAL_DMA_Abort_IT+0x3ec>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01d      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a21      	ldr	r2, [pc, #132]	; (8006de8 <HAL_DMA_Abort_IT+0x3f0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d018      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1f      	ldr	r2, [pc, #124]	; (8006dec <HAL_DMA_Abort_IT+0x3f4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d013      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1e      	ldr	r2, [pc, #120]	; (8006df0 <HAL_DMA_Abort_IT+0x3f8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00e      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1c      	ldr	r2, [pc, #112]	; (8006df4 <HAL_DMA_Abort_IT+0x3fc>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d009      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1b      	ldr	r2, [pc, #108]	; (8006df8 <HAL_DMA_Abort_IT+0x400>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d004      	beq.n	8006d9a <HAL_DMA_Abort_IT+0x3a2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a19      	ldr	r2, [pc, #100]	; (8006dfc <HAL_DMA_Abort_IT+0x404>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d132      	bne.n	8006e00 <HAL_DMA_Abort_IT+0x408>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e031      	b.n	8006e02 <HAL_DMA_Abort_IT+0x40a>
 8006d9e:	bf00      	nop
 8006da0:	40020010 	.word	0x40020010
 8006da4:	40020028 	.word	0x40020028
 8006da8:	40020040 	.word	0x40020040
 8006dac:	40020058 	.word	0x40020058
 8006db0:	40020070 	.word	0x40020070
 8006db4:	40020088 	.word	0x40020088
 8006db8:	400200a0 	.word	0x400200a0
 8006dbc:	400200b8 	.word	0x400200b8
 8006dc0:	40020410 	.word	0x40020410
 8006dc4:	40020428 	.word	0x40020428
 8006dc8:	40020440 	.word	0x40020440
 8006dcc:	40020458 	.word	0x40020458
 8006dd0:	40020470 	.word	0x40020470
 8006dd4:	40020488 	.word	0x40020488
 8006dd8:	400204a0 	.word	0x400204a0
 8006ddc:	400204b8 	.word	0x400204b8
 8006de0:	58025408 	.word	0x58025408
 8006de4:	5802541c 	.word	0x5802541c
 8006de8:	58025430 	.word	0x58025430
 8006dec:	58025444 	.word	0x58025444
 8006df0:	58025458 	.word	0x58025458
 8006df4:	5802546c 	.word	0x5802546c
 8006df8:	58025480 	.word	0x58025480
 8006dfc:	58025494 	.word	0x58025494
 8006e00:	2300      	movs	r3, #0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d028      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	2201      	movs	r2, #1
 8006e26:	409a      	lsls	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop

08006e84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	; 0x28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e90:	4b67      	ldr	r3, [pc, #412]	; (8007030 <HAL_DMA_IRQHandler+0x1ac>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a67      	ldr	r2, [pc, #412]	; (8007034 <HAL_DMA_IRQHandler+0x1b0>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	0a9b      	lsrs	r3, r3, #10
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a5f      	ldr	r2, [pc, #380]	; (8007038 <HAL_DMA_IRQHandler+0x1b4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d04a      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a5d      	ldr	r2, [pc, #372]	; (800703c <HAL_DMA_IRQHandler+0x1b8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d045      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a5c      	ldr	r2, [pc, #368]	; (8007040 <HAL_DMA_IRQHandler+0x1bc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d040      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a5a      	ldr	r2, [pc, #360]	; (8007044 <HAL_DMA_IRQHandler+0x1c0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d03b      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a59      	ldr	r2, [pc, #356]	; (8007048 <HAL_DMA_IRQHandler+0x1c4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d036      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a57      	ldr	r2, [pc, #348]	; (800704c <HAL_DMA_IRQHandler+0x1c8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d031      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a56      	ldr	r2, [pc, #344]	; (8007050 <HAL_DMA_IRQHandler+0x1cc>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d02c      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a54      	ldr	r2, [pc, #336]	; (8007054 <HAL_DMA_IRQHandler+0x1d0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d027      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a53      	ldr	r2, [pc, #332]	; (8007058 <HAL_DMA_IRQHandler+0x1d4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d022      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a51      	ldr	r2, [pc, #324]	; (800705c <HAL_DMA_IRQHandler+0x1d8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d01d      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a50      	ldr	r2, [pc, #320]	; (8007060 <HAL_DMA_IRQHandler+0x1dc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d018      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a4e      	ldr	r2, [pc, #312]	; (8007064 <HAL_DMA_IRQHandler+0x1e0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d013      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a4d      	ldr	r2, [pc, #308]	; (8007068 <HAL_DMA_IRQHandler+0x1e4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00e      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a4b      	ldr	r2, [pc, #300]	; (800706c <HAL_DMA_IRQHandler+0x1e8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d009      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a4a      	ldr	r2, [pc, #296]	; (8007070 <HAL_DMA_IRQHandler+0x1ec>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d004      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xd2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a48      	ldr	r2, [pc, #288]	; (8007074 <HAL_DMA_IRQHandler+0x1f0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d101      	bne.n	8006f5a <HAL_DMA_IRQHandler+0xd6>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e000      	b.n	8006f5c <HAL_DMA_IRQHandler+0xd8>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 842b 	beq.w	80077b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f66:	f003 031f 	and.w	r3, r3, #31
 8006f6a:	2208      	movs	r2, #8
 8006f6c:	409a      	lsls	r2, r3
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	4013      	ands	r3, r2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 80a2 	beq.w	80070bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a2e      	ldr	r2, [pc, #184]	; (8007038 <HAL_DMA_IRQHandler+0x1b4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d04a      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a2d      	ldr	r2, [pc, #180]	; (800703c <HAL_DMA_IRQHandler+0x1b8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d045      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2b      	ldr	r2, [pc, #172]	; (8007040 <HAL_DMA_IRQHandler+0x1bc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d040      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <HAL_DMA_IRQHandler+0x1c0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d03b      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a28      	ldr	r2, [pc, #160]	; (8007048 <HAL_DMA_IRQHandler+0x1c4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d036      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a27      	ldr	r2, [pc, #156]	; (800704c <HAL_DMA_IRQHandler+0x1c8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d031      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a25      	ldr	r2, [pc, #148]	; (8007050 <HAL_DMA_IRQHandler+0x1cc>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d02c      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a24      	ldr	r2, [pc, #144]	; (8007054 <HAL_DMA_IRQHandler+0x1d0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d027      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a22      	ldr	r2, [pc, #136]	; (8007058 <HAL_DMA_IRQHandler+0x1d4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d022      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a21      	ldr	r2, [pc, #132]	; (800705c <HAL_DMA_IRQHandler+0x1d8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d01d      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <HAL_DMA_IRQHandler+0x1dc>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d018      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1e      	ldr	r2, [pc, #120]	; (8007064 <HAL_DMA_IRQHandler+0x1e0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d013      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <HAL_DMA_IRQHandler+0x1e4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00e      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1b      	ldr	r2, [pc, #108]	; (800706c <HAL_DMA_IRQHandler+0x1e8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d009      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a19      	ldr	r2, [pc, #100]	; (8007070 <HAL_DMA_IRQHandler+0x1ec>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d004      	beq.n	8007018 <HAL_DMA_IRQHandler+0x194>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a18      	ldr	r2, [pc, #96]	; (8007074 <HAL_DMA_IRQHandler+0x1f0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d12f      	bne.n	8007078 <HAL_DMA_IRQHandler+0x1f4>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	bf14      	ite	ne
 8007026:	2301      	movne	r3, #1
 8007028:	2300      	moveq	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	e02e      	b.n	800708c <HAL_DMA_IRQHandler+0x208>
 800702e:	bf00      	nop
 8007030:	240001c0 	.word	0x240001c0
 8007034:	1b4e81b5 	.word	0x1b4e81b5
 8007038:	40020010 	.word	0x40020010
 800703c:	40020028 	.word	0x40020028
 8007040:	40020040 	.word	0x40020040
 8007044:	40020058 	.word	0x40020058
 8007048:	40020070 	.word	0x40020070
 800704c:	40020088 	.word	0x40020088
 8007050:	400200a0 	.word	0x400200a0
 8007054:	400200b8 	.word	0x400200b8
 8007058:	40020410 	.word	0x40020410
 800705c:	40020428 	.word	0x40020428
 8007060:	40020440 	.word	0x40020440
 8007064:	40020458 	.word	0x40020458
 8007068:	40020470 	.word	0x40020470
 800706c:	40020488 	.word	0x40020488
 8007070:	400204a0 	.word	0x400204a0
 8007074:	400204b8 	.word	0x400204b8
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	bf14      	ite	ne
 8007086:	2301      	movne	r3, #1
 8007088:	2300      	moveq	r3, #0
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d015      	beq.n	80070bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0204 	bic.w	r2, r2, #4
 800709e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	2208      	movs	r2, #8
 80070aa:	409a      	lsls	r2, r3
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b4:	f043 0201 	orr.w	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d06e      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a69      	ldr	r2, [pc, #420]	; (800727c <HAL_DMA_IRQHandler+0x3f8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d04a      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a67      	ldr	r2, [pc, #412]	; (8007280 <HAL_DMA_IRQHandler+0x3fc>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d045      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a66      	ldr	r2, [pc, #408]	; (8007284 <HAL_DMA_IRQHandler+0x400>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d040      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a64      	ldr	r2, [pc, #400]	; (8007288 <HAL_DMA_IRQHandler+0x404>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d03b      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a63      	ldr	r2, [pc, #396]	; (800728c <HAL_DMA_IRQHandler+0x408>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d036      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a61      	ldr	r2, [pc, #388]	; (8007290 <HAL_DMA_IRQHandler+0x40c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d031      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a60      	ldr	r2, [pc, #384]	; (8007294 <HAL_DMA_IRQHandler+0x410>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d02c      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a5e      	ldr	r2, [pc, #376]	; (8007298 <HAL_DMA_IRQHandler+0x414>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d027      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a5d      	ldr	r2, [pc, #372]	; (800729c <HAL_DMA_IRQHandler+0x418>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d022      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a5b      	ldr	r2, [pc, #364]	; (80072a0 <HAL_DMA_IRQHandler+0x41c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01d      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a5a      	ldr	r2, [pc, #360]	; (80072a4 <HAL_DMA_IRQHandler+0x420>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d018      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a58      	ldr	r2, [pc, #352]	; (80072a8 <HAL_DMA_IRQHandler+0x424>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a57      	ldr	r2, [pc, #348]	; (80072ac <HAL_DMA_IRQHandler+0x428>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00e      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a55      	ldr	r2, [pc, #340]	; (80072b0 <HAL_DMA_IRQHandler+0x42c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d009      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a54      	ldr	r2, [pc, #336]	; (80072b4 <HAL_DMA_IRQHandler+0x430>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <HAL_DMA_IRQHandler+0x2ee>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a52      	ldr	r2, [pc, #328]	; (80072b8 <HAL_DMA_IRQHandler+0x434>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d10a      	bne.n	8007188 <HAL_DMA_IRQHandler+0x304>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717c:	2b00      	cmp	r3, #0
 800717e:	bf14      	ite	ne
 8007180:	2301      	movne	r3, #1
 8007182:	2300      	moveq	r3, #0
 8007184:	b2db      	uxtb	r3, r3
 8007186:	e003      	b.n	8007190 <HAL_DMA_IRQHandler+0x30c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00d      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	2201      	movs	r2, #1
 800719e:	409a      	lsls	r2, r3
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a8:	f043 0202 	orr.w	r2, r3, #2
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	2204      	movs	r2, #4
 80071ba:	409a      	lsls	r2, r3
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	4013      	ands	r3, r2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 808f 	beq.w	80072e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a2c      	ldr	r2, [pc, #176]	; (800727c <HAL_DMA_IRQHandler+0x3f8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d04a      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2a      	ldr	r2, [pc, #168]	; (8007280 <HAL_DMA_IRQHandler+0x3fc>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d045      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a29      	ldr	r2, [pc, #164]	; (8007284 <HAL_DMA_IRQHandler+0x400>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d040      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a27      	ldr	r2, [pc, #156]	; (8007288 <HAL_DMA_IRQHandler+0x404>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d03b      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a26      	ldr	r2, [pc, #152]	; (800728c <HAL_DMA_IRQHandler+0x408>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d036      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a24      	ldr	r2, [pc, #144]	; (8007290 <HAL_DMA_IRQHandler+0x40c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d031      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a23      	ldr	r2, [pc, #140]	; (8007294 <HAL_DMA_IRQHandler+0x410>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d02c      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a21      	ldr	r2, [pc, #132]	; (8007298 <HAL_DMA_IRQHandler+0x414>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d027      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a20      	ldr	r2, [pc, #128]	; (800729c <HAL_DMA_IRQHandler+0x418>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d022      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a1e      	ldr	r2, [pc, #120]	; (80072a0 <HAL_DMA_IRQHandler+0x41c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d01d      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <HAL_DMA_IRQHandler+0x420>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d018      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1b      	ldr	r2, [pc, #108]	; (80072a8 <HAL_DMA_IRQHandler+0x424>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d013      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a1a      	ldr	r2, [pc, #104]	; (80072ac <HAL_DMA_IRQHandler+0x428>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00e      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <HAL_DMA_IRQHandler+0x42c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d009      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <HAL_DMA_IRQHandler+0x430>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d004      	beq.n	8007266 <HAL_DMA_IRQHandler+0x3e2>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a15      	ldr	r2, [pc, #84]	; (80072b8 <HAL_DMA_IRQHandler+0x434>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d12a      	bne.n	80072bc <HAL_DMA_IRQHandler+0x438>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	bf14      	ite	ne
 8007274:	2301      	movne	r3, #1
 8007276:	2300      	moveq	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	e023      	b.n	80072c4 <HAL_DMA_IRQHandler+0x440>
 800727c:	40020010 	.word	0x40020010
 8007280:	40020028 	.word	0x40020028
 8007284:	40020040 	.word	0x40020040
 8007288:	40020058 	.word	0x40020058
 800728c:	40020070 	.word	0x40020070
 8007290:	40020088 	.word	0x40020088
 8007294:	400200a0 	.word	0x400200a0
 8007298:	400200b8 	.word	0x400200b8
 800729c:	40020410 	.word	0x40020410
 80072a0:	40020428 	.word	0x40020428
 80072a4:	40020440 	.word	0x40020440
 80072a8:	40020458 	.word	0x40020458
 80072ac:	40020470 	.word	0x40020470
 80072b0:	40020488 	.word	0x40020488
 80072b4:	400204a0 	.word	0x400204a0
 80072b8:	400204b8 	.word	0x400204b8
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00d      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072cc:	f003 031f 	and.w	r3, r3, #31
 80072d0:	2204      	movs	r2, #4
 80072d2:	409a      	lsls	r2, r3
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072dc:	f043 0204 	orr.w	r2, r3, #4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	2210      	movs	r2, #16
 80072ee:	409a      	lsls	r2, r3
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 80a6 	beq.w	8007446 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a85      	ldr	r2, [pc, #532]	; (8007514 <HAL_DMA_IRQHandler+0x690>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d04a      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a83      	ldr	r2, [pc, #524]	; (8007518 <HAL_DMA_IRQHandler+0x694>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d045      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a82      	ldr	r2, [pc, #520]	; (800751c <HAL_DMA_IRQHandler+0x698>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d040      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a80      	ldr	r2, [pc, #512]	; (8007520 <HAL_DMA_IRQHandler+0x69c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d03b      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a7f      	ldr	r2, [pc, #508]	; (8007524 <HAL_DMA_IRQHandler+0x6a0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d036      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a7d      	ldr	r2, [pc, #500]	; (8007528 <HAL_DMA_IRQHandler+0x6a4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d031      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a7c      	ldr	r2, [pc, #496]	; (800752c <HAL_DMA_IRQHandler+0x6a8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d02c      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a7a      	ldr	r2, [pc, #488]	; (8007530 <HAL_DMA_IRQHandler+0x6ac>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d027      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a79      	ldr	r2, [pc, #484]	; (8007534 <HAL_DMA_IRQHandler+0x6b0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a77      	ldr	r2, [pc, #476]	; (8007538 <HAL_DMA_IRQHandler+0x6b4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01d      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a76      	ldr	r2, [pc, #472]	; (800753c <HAL_DMA_IRQHandler+0x6b8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d018      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a74      	ldr	r2, [pc, #464]	; (8007540 <HAL_DMA_IRQHandler+0x6bc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a73      	ldr	r2, [pc, #460]	; (8007544 <HAL_DMA_IRQHandler+0x6c0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00e      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a71      	ldr	r2, [pc, #452]	; (8007548 <HAL_DMA_IRQHandler+0x6c4>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d009      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a70      	ldr	r2, [pc, #448]	; (800754c <HAL_DMA_IRQHandler+0x6c8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_DMA_IRQHandler+0x516>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a6e      	ldr	r2, [pc, #440]	; (8007550 <HAL_DMA_IRQHandler+0x6cc>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d10a      	bne.n	80073b0 <HAL_DMA_IRQHandler+0x52c>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf14      	ite	ne
 80073a8:	2301      	movne	r3, #1
 80073aa:	2300      	moveq	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	e009      	b.n	80073c4 <HAL_DMA_IRQHandler+0x540>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bf14      	ite	ne
 80073be:	2301      	movne	r3, #1
 80073c0:	2300      	moveq	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d03e      	beq.n	8007446 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073cc:	f003 031f 	and.w	r3, r3, #31
 80073d0:	2210      	movs	r2, #16
 80073d2:	409a      	lsls	r2, r3
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d018      	beq.n	8007418 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d108      	bne.n	8007406 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d024      	beq.n	8007446 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	4798      	blx	r3
 8007404:	e01f      	b.n	8007446 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01b      	beq.n	8007446 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
 8007416:	e016      	b.n	8007446 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007422:	2b00      	cmp	r3, #0
 8007424:	d107      	bne.n	8007436 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0208 	bic.w	r2, r2, #8
 8007434:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744a:	f003 031f 	and.w	r3, r3, #31
 800744e:	2220      	movs	r2, #32
 8007450:	409a      	lsls	r2, r3
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	4013      	ands	r3, r2
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8110 	beq.w	800767c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a2c      	ldr	r2, [pc, #176]	; (8007514 <HAL_DMA_IRQHandler+0x690>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d04a      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a2b      	ldr	r2, [pc, #172]	; (8007518 <HAL_DMA_IRQHandler+0x694>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d045      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a29      	ldr	r2, [pc, #164]	; (800751c <HAL_DMA_IRQHandler+0x698>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d040      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a28      	ldr	r2, [pc, #160]	; (8007520 <HAL_DMA_IRQHandler+0x69c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d03b      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a26      	ldr	r2, [pc, #152]	; (8007524 <HAL_DMA_IRQHandler+0x6a0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d036      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a25      	ldr	r2, [pc, #148]	; (8007528 <HAL_DMA_IRQHandler+0x6a4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d031      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a23      	ldr	r2, [pc, #140]	; (800752c <HAL_DMA_IRQHandler+0x6a8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d02c      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a22      	ldr	r2, [pc, #136]	; (8007530 <HAL_DMA_IRQHandler+0x6ac>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d027      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a20      	ldr	r2, [pc, #128]	; (8007534 <HAL_DMA_IRQHandler+0x6b0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d022      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1f      	ldr	r2, [pc, #124]	; (8007538 <HAL_DMA_IRQHandler+0x6b4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d01d      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1d      	ldr	r2, [pc, #116]	; (800753c <HAL_DMA_IRQHandler+0x6b8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d018      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1c      	ldr	r2, [pc, #112]	; (8007540 <HAL_DMA_IRQHandler+0x6bc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d013      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1a      	ldr	r2, [pc, #104]	; (8007544 <HAL_DMA_IRQHandler+0x6c0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00e      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a19      	ldr	r2, [pc, #100]	; (8007548 <HAL_DMA_IRQHandler+0x6c4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d009      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a17      	ldr	r2, [pc, #92]	; (800754c <HAL_DMA_IRQHandler+0x6c8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <HAL_DMA_IRQHandler+0x678>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a16      	ldr	r2, [pc, #88]	; (8007550 <HAL_DMA_IRQHandler+0x6cc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d12b      	bne.n	8007554 <HAL_DMA_IRQHandler+0x6d0>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	2b00      	cmp	r3, #0
 8007508:	bf14      	ite	ne
 800750a:	2301      	movne	r3, #1
 800750c:	2300      	moveq	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	e02a      	b.n	8007568 <HAL_DMA_IRQHandler+0x6e4>
 8007512:	bf00      	nop
 8007514:	40020010 	.word	0x40020010
 8007518:	40020028 	.word	0x40020028
 800751c:	40020040 	.word	0x40020040
 8007520:	40020058 	.word	0x40020058
 8007524:	40020070 	.word	0x40020070
 8007528:	40020088 	.word	0x40020088
 800752c:	400200a0 	.word	0x400200a0
 8007530:	400200b8 	.word	0x400200b8
 8007534:	40020410 	.word	0x40020410
 8007538:	40020428 	.word	0x40020428
 800753c:	40020440 	.word	0x40020440
 8007540:	40020458 	.word	0x40020458
 8007544:	40020470 	.word	0x40020470
 8007548:	40020488 	.word	0x40020488
 800754c:	400204a0 	.word	0x400204a0
 8007550:	400204b8 	.word	0x400204b8
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	bf14      	ite	ne
 8007562:	2301      	movne	r3, #1
 8007564:	2300      	moveq	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 8087 	beq.w	800767c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007572:	f003 031f 	and.w	r3, r3, #31
 8007576:	2220      	movs	r2, #32
 8007578:	409a      	lsls	r2, r3
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b04      	cmp	r3, #4
 8007588:	d139      	bne.n	80075fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0216 	bic.w	r2, r2, #22
 8007598:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695a      	ldr	r2, [r3, #20]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d103      	bne.n	80075ba <HAL_DMA_IRQHandler+0x736>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d007      	beq.n	80075ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0208 	bic.w	r2, r2, #8
 80075c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	223f      	movs	r2, #63	; 0x3f
 80075d4:	409a      	lsls	r2, r3
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 834a 	beq.w	8007c88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
          }
          return;
 80075fc:	e344      	b.n	8007c88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d018      	beq.n	800763e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d108      	bne.n	800762c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	2b00      	cmp	r3, #0
 8007620:	d02c      	beq.n	800767c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
 800762a:	e027      	b.n	800767c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007630:	2b00      	cmp	r3, #0
 8007632:	d023      	beq.n	800767c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
 800763c:	e01e      	b.n	800767c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10f      	bne.n	800766c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0210 	bic.w	r2, r2, #16
 800765a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 8306 	beq.w	8007c92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 8088 	beq.w	80077a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2204      	movs	r2, #4
 8007698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a7a      	ldr	r2, [pc, #488]	; (800788c <HAL_DMA_IRQHandler+0xa08>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d04a      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a79      	ldr	r2, [pc, #484]	; (8007890 <HAL_DMA_IRQHandler+0xa0c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d045      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a77      	ldr	r2, [pc, #476]	; (8007894 <HAL_DMA_IRQHandler+0xa10>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d040      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a76      	ldr	r2, [pc, #472]	; (8007898 <HAL_DMA_IRQHandler+0xa14>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d03b      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a74      	ldr	r2, [pc, #464]	; (800789c <HAL_DMA_IRQHandler+0xa18>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d036      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a73      	ldr	r2, [pc, #460]	; (80078a0 <HAL_DMA_IRQHandler+0xa1c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d031      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a71      	ldr	r2, [pc, #452]	; (80078a4 <HAL_DMA_IRQHandler+0xa20>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d02c      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a70      	ldr	r2, [pc, #448]	; (80078a8 <HAL_DMA_IRQHandler+0xa24>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d027      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a6e      	ldr	r2, [pc, #440]	; (80078ac <HAL_DMA_IRQHandler+0xa28>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d022      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a6d      	ldr	r2, [pc, #436]	; (80078b0 <HAL_DMA_IRQHandler+0xa2c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d01d      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a6b      	ldr	r2, [pc, #428]	; (80078b4 <HAL_DMA_IRQHandler+0xa30>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d018      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a6a      	ldr	r2, [pc, #424]	; (80078b8 <HAL_DMA_IRQHandler+0xa34>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d013      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a68      	ldr	r2, [pc, #416]	; (80078bc <HAL_DMA_IRQHandler+0xa38>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d00e      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a67      	ldr	r2, [pc, #412]	; (80078c0 <HAL_DMA_IRQHandler+0xa3c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d009      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a65      	ldr	r2, [pc, #404]	; (80078c4 <HAL_DMA_IRQHandler+0xa40>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d004      	beq.n	800773c <HAL_DMA_IRQHandler+0x8b8>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a64      	ldr	r2, [pc, #400]	; (80078c8 <HAL_DMA_IRQHandler+0xa44>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d108      	bne.n	800774e <HAL_DMA_IRQHandler+0x8ca>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0201 	bic.w	r2, r2, #1
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	e007      	b.n	800775e <HAL_DMA_IRQHandler+0x8da>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0201 	bic.w	r2, r2, #1
 800775c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007766:	429a      	cmp	r2, r3
 8007768:	d307      	bcc.n	800777a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f2      	bne.n	800775e <HAL_DMA_IRQHandler+0x8da>
 8007778:	e000      	b.n	800777c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800777a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d004      	beq.n	8007794 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2203      	movs	r2, #3
 800778e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007792:	e003      	b.n	800779c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8272 	beq.w	8007c92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
 80077b6:	e26c      	b.n	8007c92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a43      	ldr	r2, [pc, #268]	; (80078cc <HAL_DMA_IRQHandler+0xa48>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d022      	beq.n	8007808 <HAL_DMA_IRQHandler+0x984>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a42      	ldr	r2, [pc, #264]	; (80078d0 <HAL_DMA_IRQHandler+0xa4c>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d01d      	beq.n	8007808 <HAL_DMA_IRQHandler+0x984>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a40      	ldr	r2, [pc, #256]	; (80078d4 <HAL_DMA_IRQHandler+0xa50>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d018      	beq.n	8007808 <HAL_DMA_IRQHandler+0x984>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a3f      	ldr	r2, [pc, #252]	; (80078d8 <HAL_DMA_IRQHandler+0xa54>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d013      	beq.n	8007808 <HAL_DMA_IRQHandler+0x984>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a3d      	ldr	r2, [pc, #244]	; (80078dc <HAL_DMA_IRQHandler+0xa58>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00e      	beq.n	8007808 <HAL_DMA_IRQHandler+0x984>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a3c      	ldr	r2, [pc, #240]	; (80078e0 <HAL_DMA_IRQHandler+0xa5c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d009      	beq.n	8007808 <HAL_DMA_IRQHandler+0x984>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a3a      	ldr	r2, [pc, #232]	; (80078e4 <HAL_DMA_IRQHandler+0xa60>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d004      	beq.n	8007808 <HAL_DMA_IRQHandler+0x984>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a39      	ldr	r2, [pc, #228]	; (80078e8 <HAL_DMA_IRQHandler+0xa64>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d101      	bne.n	800780c <HAL_DMA_IRQHandler+0x988>
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <HAL_DMA_IRQHandler+0x98a>
 800780c:	2300      	movs	r3, #0
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 823f 	beq.w	8007c92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007820:	f003 031f 	and.w	r3, r3, #31
 8007824:	2204      	movs	r2, #4
 8007826:	409a      	lsls	r2, r3
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80cd 	beq.w	80079cc <HAL_DMA_IRQHandler+0xb48>
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80c7 	beq.w	80079cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007842:	f003 031f 	and.w	r3, r3, #31
 8007846:	2204      	movs	r2, #4
 8007848:	409a      	lsls	r2, r3
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d049      	beq.n	80078ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 8210 	beq.w	8007c8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007874:	e20a      	b.n	8007c8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 8206 	beq.w	8007c8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007888:	e200      	b.n	8007c8c <HAL_DMA_IRQHandler+0xe08>
 800788a:	bf00      	nop
 800788c:	40020010 	.word	0x40020010
 8007890:	40020028 	.word	0x40020028
 8007894:	40020040 	.word	0x40020040
 8007898:	40020058 	.word	0x40020058
 800789c:	40020070 	.word	0x40020070
 80078a0:	40020088 	.word	0x40020088
 80078a4:	400200a0 	.word	0x400200a0
 80078a8:	400200b8 	.word	0x400200b8
 80078ac:	40020410 	.word	0x40020410
 80078b0:	40020428 	.word	0x40020428
 80078b4:	40020440 	.word	0x40020440
 80078b8:	40020458 	.word	0x40020458
 80078bc:	40020470 	.word	0x40020470
 80078c0:	40020488 	.word	0x40020488
 80078c4:	400204a0 	.word	0x400204a0
 80078c8:	400204b8 	.word	0x400204b8
 80078cc:	58025408 	.word	0x58025408
 80078d0:	5802541c 	.word	0x5802541c
 80078d4:	58025430 	.word	0x58025430
 80078d8:	58025444 	.word	0x58025444
 80078dc:	58025458 	.word	0x58025458
 80078e0:	5802546c 	.word	0x5802546c
 80078e4:	58025480 	.word	0x58025480
 80078e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d160      	bne.n	80079b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a7f      	ldr	r2, [pc, #508]	; (8007af8 <HAL_DMA_IRQHandler+0xc74>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d04a      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a7d      	ldr	r2, [pc, #500]	; (8007afc <HAL_DMA_IRQHandler+0xc78>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d045      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a7c      	ldr	r2, [pc, #496]	; (8007b00 <HAL_DMA_IRQHandler+0xc7c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d040      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a7a      	ldr	r2, [pc, #488]	; (8007b04 <HAL_DMA_IRQHandler+0xc80>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d03b      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a79      	ldr	r2, [pc, #484]	; (8007b08 <HAL_DMA_IRQHandler+0xc84>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d036      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a77      	ldr	r2, [pc, #476]	; (8007b0c <HAL_DMA_IRQHandler+0xc88>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d031      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a76      	ldr	r2, [pc, #472]	; (8007b10 <HAL_DMA_IRQHandler+0xc8c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d02c      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a74      	ldr	r2, [pc, #464]	; (8007b14 <HAL_DMA_IRQHandler+0xc90>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d027      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a73      	ldr	r2, [pc, #460]	; (8007b18 <HAL_DMA_IRQHandler+0xc94>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d022      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a71      	ldr	r2, [pc, #452]	; (8007b1c <HAL_DMA_IRQHandler+0xc98>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d01d      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a70      	ldr	r2, [pc, #448]	; (8007b20 <HAL_DMA_IRQHandler+0xc9c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d018      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a6e      	ldr	r2, [pc, #440]	; (8007b24 <HAL_DMA_IRQHandler+0xca0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a6d      	ldr	r2, [pc, #436]	; (8007b28 <HAL_DMA_IRQHandler+0xca4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00e      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a6b      	ldr	r2, [pc, #428]	; (8007b2c <HAL_DMA_IRQHandler+0xca8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d009      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a6a      	ldr	r2, [pc, #424]	; (8007b30 <HAL_DMA_IRQHandler+0xcac>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d004      	beq.n	8007996 <HAL_DMA_IRQHandler+0xb12>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a68      	ldr	r2, [pc, #416]	; (8007b34 <HAL_DMA_IRQHandler+0xcb0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d108      	bne.n	80079a8 <HAL_DMA_IRQHandler+0xb24>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0208 	bic.w	r2, r2, #8
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e007      	b.n	80079b8 <HAL_DMA_IRQHandler+0xb34>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0204 	bic.w	r2, r2, #4
 80079b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8165 	beq.w	8007c8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ca:	e15f      	b.n	8007c8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	2202      	movs	r2, #2
 80079d6:	409a      	lsls	r2, r3
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 80c5 	beq.w	8007b6c <HAL_DMA_IRQHandler+0xce8>
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 80bf 	beq.w	8007b6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f2:	f003 031f 	and.w	r3, r3, #31
 80079f6:	2202      	movs	r2, #2
 80079f8:	409a      	lsls	r2, r3
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d018      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 813a 	beq.w	8007c90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a24:	e134      	b.n	8007c90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8130 	beq.w	8007c90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a38:	e12a      	b.n	8007c90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f040 8089 	bne.w	8007b58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a2b      	ldr	r2, [pc, #172]	; (8007af8 <HAL_DMA_IRQHandler+0xc74>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d04a      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a29      	ldr	r2, [pc, #164]	; (8007afc <HAL_DMA_IRQHandler+0xc78>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d045      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a28      	ldr	r2, [pc, #160]	; (8007b00 <HAL_DMA_IRQHandler+0xc7c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d040      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a26      	ldr	r2, [pc, #152]	; (8007b04 <HAL_DMA_IRQHandler+0xc80>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d03b      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a25      	ldr	r2, [pc, #148]	; (8007b08 <HAL_DMA_IRQHandler+0xc84>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d036      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a23      	ldr	r2, [pc, #140]	; (8007b0c <HAL_DMA_IRQHandler+0xc88>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d031      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a22      	ldr	r2, [pc, #136]	; (8007b10 <HAL_DMA_IRQHandler+0xc8c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d02c      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a20      	ldr	r2, [pc, #128]	; (8007b14 <HAL_DMA_IRQHandler+0xc90>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d027      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1f      	ldr	r2, [pc, #124]	; (8007b18 <HAL_DMA_IRQHandler+0xc94>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d022      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1d      	ldr	r2, [pc, #116]	; (8007b1c <HAL_DMA_IRQHandler+0xc98>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d01d      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1c      	ldr	r2, [pc, #112]	; (8007b20 <HAL_DMA_IRQHandler+0xc9c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d018      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a1a      	ldr	r2, [pc, #104]	; (8007b24 <HAL_DMA_IRQHandler+0xca0>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d013      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a19      	ldr	r2, [pc, #100]	; (8007b28 <HAL_DMA_IRQHandler+0xca4>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00e      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a17      	ldr	r2, [pc, #92]	; (8007b2c <HAL_DMA_IRQHandler+0xca8>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d009      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a16      	ldr	r2, [pc, #88]	; (8007b30 <HAL_DMA_IRQHandler+0xcac>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0xc62>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a14      	ldr	r2, [pc, #80]	; (8007b34 <HAL_DMA_IRQHandler+0xcb0>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d128      	bne.n	8007b38 <HAL_DMA_IRQHandler+0xcb4>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0214 	bic.w	r2, r2, #20
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	e027      	b.n	8007b48 <HAL_DMA_IRQHandler+0xcc4>
 8007af8:	40020010 	.word	0x40020010
 8007afc:	40020028 	.word	0x40020028
 8007b00:	40020040 	.word	0x40020040
 8007b04:	40020058 	.word	0x40020058
 8007b08:	40020070 	.word	0x40020070
 8007b0c:	40020088 	.word	0x40020088
 8007b10:	400200a0 	.word	0x400200a0
 8007b14:	400200b8 	.word	0x400200b8
 8007b18:	40020410 	.word	0x40020410
 8007b1c:	40020428 	.word	0x40020428
 8007b20:	40020440 	.word	0x40020440
 8007b24:	40020458 	.word	0x40020458
 8007b28:	40020470 	.word	0x40020470
 8007b2c:	40020488 	.word	0x40020488
 8007b30:	400204a0 	.word	0x400204a0
 8007b34:	400204b8 	.word	0x400204b8
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 020a 	bic.w	r2, r2, #10
 8007b46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8097 	beq.w	8007c90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b6a:	e091      	b.n	8007c90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b70:	f003 031f 	and.w	r3, r3, #31
 8007b74:	2208      	movs	r2, #8
 8007b76:	409a      	lsls	r2, r3
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8088 	beq.w	8007c92 <HAL_DMA_IRQHandler+0xe0e>
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8082 	beq.w	8007c92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a41      	ldr	r2, [pc, #260]	; (8007c98 <HAL_DMA_IRQHandler+0xe14>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d04a      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a3f      	ldr	r2, [pc, #252]	; (8007c9c <HAL_DMA_IRQHandler+0xe18>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d045      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a3e      	ldr	r2, [pc, #248]	; (8007ca0 <HAL_DMA_IRQHandler+0xe1c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d040      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a3c      	ldr	r2, [pc, #240]	; (8007ca4 <HAL_DMA_IRQHandler+0xe20>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d03b      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a3b      	ldr	r2, [pc, #236]	; (8007ca8 <HAL_DMA_IRQHandler+0xe24>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d036      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a39      	ldr	r2, [pc, #228]	; (8007cac <HAL_DMA_IRQHandler+0xe28>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d031      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a38      	ldr	r2, [pc, #224]	; (8007cb0 <HAL_DMA_IRQHandler+0xe2c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d02c      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a36      	ldr	r2, [pc, #216]	; (8007cb4 <HAL_DMA_IRQHandler+0xe30>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d027      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a35      	ldr	r2, [pc, #212]	; (8007cb8 <HAL_DMA_IRQHandler+0xe34>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d022      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a33      	ldr	r2, [pc, #204]	; (8007cbc <HAL_DMA_IRQHandler+0xe38>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d01d      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a32      	ldr	r2, [pc, #200]	; (8007cc0 <HAL_DMA_IRQHandler+0xe3c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d018      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a30      	ldr	r2, [pc, #192]	; (8007cc4 <HAL_DMA_IRQHandler+0xe40>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a2f      	ldr	r2, [pc, #188]	; (8007cc8 <HAL_DMA_IRQHandler+0xe44>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00e      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a2d      	ldr	r2, [pc, #180]	; (8007ccc <HAL_DMA_IRQHandler+0xe48>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d009      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a2c      	ldr	r2, [pc, #176]	; (8007cd0 <HAL_DMA_IRQHandler+0xe4c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d004      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xdaa>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a2a      	ldr	r2, [pc, #168]	; (8007cd4 <HAL_DMA_IRQHandler+0xe50>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d108      	bne.n	8007c40 <HAL_DMA_IRQHandler+0xdbc>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 021c 	bic.w	r2, r2, #28
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e007      	b.n	8007c50 <HAL_DMA_IRQHandler+0xdcc>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 020e 	bic.w	r2, r2, #14
 8007c4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c54:	f003 031f 	and.w	r3, r3, #31
 8007c58:	2201      	movs	r2, #1
 8007c5a:	409a      	lsls	r2, r3
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
 8007c86:	e004      	b.n	8007c92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c88:	bf00      	nop
 8007c8a:	e002      	b.n	8007c92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c8c:	bf00      	nop
 8007c8e:	e000      	b.n	8007c92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c92:	3728      	adds	r7, #40	; 0x28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	40020010 	.word	0x40020010
 8007c9c:	40020028 	.word	0x40020028
 8007ca0:	40020040 	.word	0x40020040
 8007ca4:	40020058 	.word	0x40020058
 8007ca8:	40020070 	.word	0x40020070
 8007cac:	40020088 	.word	0x40020088
 8007cb0:	400200a0 	.word	0x400200a0
 8007cb4:	400200b8 	.word	0x400200b8
 8007cb8:	40020410 	.word	0x40020410
 8007cbc:	40020428 	.word	0x40020428
 8007cc0:	40020440 	.word	0x40020440
 8007cc4:	40020458 	.word	0x40020458
 8007cc8:	40020470 	.word	0x40020470
 8007ccc:	40020488 	.word	0x40020488
 8007cd0:	400204a0 	.word	0x400204a0
 8007cd4:	400204b8 	.word	0x400204b8

08007cd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a7f      	ldr	r2, [pc, #508]	; (8007ef4 <DMA_SetConfig+0x21c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d072      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a7d      	ldr	r2, [pc, #500]	; (8007ef8 <DMA_SetConfig+0x220>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d06d      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a7c      	ldr	r2, [pc, #496]	; (8007efc <DMA_SetConfig+0x224>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d068      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a7a      	ldr	r2, [pc, #488]	; (8007f00 <DMA_SetConfig+0x228>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d063      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a79      	ldr	r2, [pc, #484]	; (8007f04 <DMA_SetConfig+0x22c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d05e      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a77      	ldr	r2, [pc, #476]	; (8007f08 <DMA_SetConfig+0x230>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d059      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a76      	ldr	r2, [pc, #472]	; (8007f0c <DMA_SetConfig+0x234>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d054      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a74      	ldr	r2, [pc, #464]	; (8007f10 <DMA_SetConfig+0x238>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d04f      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a73      	ldr	r2, [pc, #460]	; (8007f14 <DMA_SetConfig+0x23c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d04a      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a71      	ldr	r2, [pc, #452]	; (8007f18 <DMA_SetConfig+0x240>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d045      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a70      	ldr	r2, [pc, #448]	; (8007f1c <DMA_SetConfig+0x244>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d040      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a6e      	ldr	r2, [pc, #440]	; (8007f20 <DMA_SetConfig+0x248>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d03b      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a6d      	ldr	r2, [pc, #436]	; (8007f24 <DMA_SetConfig+0x24c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d036      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a6b      	ldr	r2, [pc, #428]	; (8007f28 <DMA_SetConfig+0x250>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d031      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a6a      	ldr	r2, [pc, #424]	; (8007f2c <DMA_SetConfig+0x254>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d02c      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a68      	ldr	r2, [pc, #416]	; (8007f30 <DMA_SetConfig+0x258>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d027      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a67      	ldr	r2, [pc, #412]	; (8007f34 <DMA_SetConfig+0x25c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d022      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a65      	ldr	r2, [pc, #404]	; (8007f38 <DMA_SetConfig+0x260>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d01d      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a64      	ldr	r2, [pc, #400]	; (8007f3c <DMA_SetConfig+0x264>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d018      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a62      	ldr	r2, [pc, #392]	; (8007f40 <DMA_SetConfig+0x268>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d013      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a61      	ldr	r2, [pc, #388]	; (8007f44 <DMA_SetConfig+0x26c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d00e      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a5f      	ldr	r2, [pc, #380]	; (8007f48 <DMA_SetConfig+0x270>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d009      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a5e      	ldr	r2, [pc, #376]	; (8007f4c <DMA_SetConfig+0x274>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d004      	beq.n	8007de2 <DMA_SetConfig+0x10a>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a5c      	ldr	r2, [pc, #368]	; (8007f50 <DMA_SetConfig+0x278>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d101      	bne.n	8007de6 <DMA_SetConfig+0x10e>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <DMA_SetConfig+0x110>
 8007de6:	2300      	movs	r3, #0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00d      	beq.n	8007e08 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007df4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d004      	beq.n	8007e08 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007e06:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a39      	ldr	r2, [pc, #228]	; (8007ef4 <DMA_SetConfig+0x21c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d04a      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a38      	ldr	r2, [pc, #224]	; (8007ef8 <DMA_SetConfig+0x220>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d045      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a36      	ldr	r2, [pc, #216]	; (8007efc <DMA_SetConfig+0x224>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d040      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a35      	ldr	r2, [pc, #212]	; (8007f00 <DMA_SetConfig+0x228>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d03b      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a33      	ldr	r2, [pc, #204]	; (8007f04 <DMA_SetConfig+0x22c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d036      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a32      	ldr	r2, [pc, #200]	; (8007f08 <DMA_SetConfig+0x230>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d031      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a30      	ldr	r2, [pc, #192]	; (8007f0c <DMA_SetConfig+0x234>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d02c      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a2f      	ldr	r2, [pc, #188]	; (8007f10 <DMA_SetConfig+0x238>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d027      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a2d      	ldr	r2, [pc, #180]	; (8007f14 <DMA_SetConfig+0x23c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d022      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a2c      	ldr	r2, [pc, #176]	; (8007f18 <DMA_SetConfig+0x240>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d01d      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a2a      	ldr	r2, [pc, #168]	; (8007f1c <DMA_SetConfig+0x244>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d018      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a29      	ldr	r2, [pc, #164]	; (8007f20 <DMA_SetConfig+0x248>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d013      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a27      	ldr	r2, [pc, #156]	; (8007f24 <DMA_SetConfig+0x24c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00e      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a26      	ldr	r2, [pc, #152]	; (8007f28 <DMA_SetConfig+0x250>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d009      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a24      	ldr	r2, [pc, #144]	; (8007f2c <DMA_SetConfig+0x254>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d004      	beq.n	8007ea8 <DMA_SetConfig+0x1d0>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a23      	ldr	r2, [pc, #140]	; (8007f30 <DMA_SetConfig+0x258>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d101      	bne.n	8007eac <DMA_SetConfig+0x1d4>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e000      	b.n	8007eae <DMA_SetConfig+0x1d6>
 8007eac:	2300      	movs	r3, #0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d059      	beq.n	8007f66 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb6:	f003 031f 	and.w	r3, r3, #31
 8007eba:	223f      	movs	r2, #63	; 0x3f
 8007ebc:	409a      	lsls	r2, r3
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ed0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	2b40      	cmp	r3, #64	; 0x40
 8007ee0:	d138      	bne.n	8007f54 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ef2:	e086      	b.n	8008002 <DMA_SetConfig+0x32a>
 8007ef4:	40020010 	.word	0x40020010
 8007ef8:	40020028 	.word	0x40020028
 8007efc:	40020040 	.word	0x40020040
 8007f00:	40020058 	.word	0x40020058
 8007f04:	40020070 	.word	0x40020070
 8007f08:	40020088 	.word	0x40020088
 8007f0c:	400200a0 	.word	0x400200a0
 8007f10:	400200b8 	.word	0x400200b8
 8007f14:	40020410 	.word	0x40020410
 8007f18:	40020428 	.word	0x40020428
 8007f1c:	40020440 	.word	0x40020440
 8007f20:	40020458 	.word	0x40020458
 8007f24:	40020470 	.word	0x40020470
 8007f28:	40020488 	.word	0x40020488
 8007f2c:	400204a0 	.word	0x400204a0
 8007f30:	400204b8 	.word	0x400204b8
 8007f34:	58025408 	.word	0x58025408
 8007f38:	5802541c 	.word	0x5802541c
 8007f3c:	58025430 	.word	0x58025430
 8007f40:	58025444 	.word	0x58025444
 8007f44:	58025458 	.word	0x58025458
 8007f48:	5802546c 	.word	0x5802546c
 8007f4c:	58025480 	.word	0x58025480
 8007f50:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	60da      	str	r2, [r3, #12]
}
 8007f64:	e04d      	b.n	8008002 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a29      	ldr	r2, [pc, #164]	; (8008010 <DMA_SetConfig+0x338>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d022      	beq.n	8007fb6 <DMA_SetConfig+0x2de>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a27      	ldr	r2, [pc, #156]	; (8008014 <DMA_SetConfig+0x33c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d01d      	beq.n	8007fb6 <DMA_SetConfig+0x2de>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a26      	ldr	r2, [pc, #152]	; (8008018 <DMA_SetConfig+0x340>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d018      	beq.n	8007fb6 <DMA_SetConfig+0x2de>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a24      	ldr	r2, [pc, #144]	; (800801c <DMA_SetConfig+0x344>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d013      	beq.n	8007fb6 <DMA_SetConfig+0x2de>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a23      	ldr	r2, [pc, #140]	; (8008020 <DMA_SetConfig+0x348>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00e      	beq.n	8007fb6 <DMA_SetConfig+0x2de>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a21      	ldr	r2, [pc, #132]	; (8008024 <DMA_SetConfig+0x34c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d009      	beq.n	8007fb6 <DMA_SetConfig+0x2de>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a20      	ldr	r2, [pc, #128]	; (8008028 <DMA_SetConfig+0x350>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d004      	beq.n	8007fb6 <DMA_SetConfig+0x2de>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a1e      	ldr	r2, [pc, #120]	; (800802c <DMA_SetConfig+0x354>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d101      	bne.n	8007fba <DMA_SetConfig+0x2e2>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e000      	b.n	8007fbc <DMA_SetConfig+0x2e4>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d020      	beq.n	8008002 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc4:	f003 031f 	and.w	r3, r3, #31
 8007fc8:	2201      	movs	r2, #1
 8007fca:	409a      	lsls	r2, r3
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	2b40      	cmp	r3, #64	; 0x40
 8007fde:	d108      	bne.n	8007ff2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	60da      	str	r2, [r3, #12]
}
 8007ff0:	e007      	b.n	8008002 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	60da      	str	r2, [r3, #12]
}
 8008002:	bf00      	nop
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	58025408 	.word	0x58025408
 8008014:	5802541c 	.word	0x5802541c
 8008018:	58025430 	.word	0x58025430
 800801c:	58025444 	.word	0x58025444
 8008020:	58025458 	.word	0x58025458
 8008024:	5802546c 	.word	0x5802546c
 8008028:	58025480 	.word	0x58025480
 800802c:	58025494 	.word	0x58025494

08008030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a42      	ldr	r2, [pc, #264]	; (8008148 <DMA_CalcBaseAndBitshift+0x118>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d04a      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a41      	ldr	r2, [pc, #260]	; (800814c <DMA_CalcBaseAndBitshift+0x11c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d045      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a3f      	ldr	r2, [pc, #252]	; (8008150 <DMA_CalcBaseAndBitshift+0x120>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d040      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a3e      	ldr	r2, [pc, #248]	; (8008154 <DMA_CalcBaseAndBitshift+0x124>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d03b      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a3c      	ldr	r2, [pc, #240]	; (8008158 <DMA_CalcBaseAndBitshift+0x128>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d036      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a3b      	ldr	r2, [pc, #236]	; (800815c <DMA_CalcBaseAndBitshift+0x12c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d031      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a39      	ldr	r2, [pc, #228]	; (8008160 <DMA_CalcBaseAndBitshift+0x130>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d02c      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a38      	ldr	r2, [pc, #224]	; (8008164 <DMA_CalcBaseAndBitshift+0x134>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d027      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a36      	ldr	r2, [pc, #216]	; (8008168 <DMA_CalcBaseAndBitshift+0x138>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d022      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a35      	ldr	r2, [pc, #212]	; (800816c <DMA_CalcBaseAndBitshift+0x13c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d01d      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a33      	ldr	r2, [pc, #204]	; (8008170 <DMA_CalcBaseAndBitshift+0x140>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d018      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a32      	ldr	r2, [pc, #200]	; (8008174 <DMA_CalcBaseAndBitshift+0x144>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d013      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a30      	ldr	r2, [pc, #192]	; (8008178 <DMA_CalcBaseAndBitshift+0x148>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00e      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a2f      	ldr	r2, [pc, #188]	; (800817c <DMA_CalcBaseAndBitshift+0x14c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d009      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a2d      	ldr	r2, [pc, #180]	; (8008180 <DMA_CalcBaseAndBitshift+0x150>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d004      	beq.n	80080d8 <DMA_CalcBaseAndBitshift+0xa8>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a2c      	ldr	r2, [pc, #176]	; (8008184 <DMA_CalcBaseAndBitshift+0x154>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d101      	bne.n	80080dc <DMA_CalcBaseAndBitshift+0xac>
 80080d8:	2301      	movs	r3, #1
 80080da:	e000      	b.n	80080de <DMA_CalcBaseAndBitshift+0xae>
 80080dc:	2300      	movs	r3, #0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d024      	beq.n	800812c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	3b10      	subs	r3, #16
 80080ea:	4a27      	ldr	r2, [pc, #156]	; (8008188 <DMA_CalcBaseAndBitshift+0x158>)
 80080ec:	fba2 2303 	umull	r2, r3, r2, r3
 80080f0:	091b      	lsrs	r3, r3, #4
 80080f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	4a24      	ldr	r2, [pc, #144]	; (800818c <DMA_CalcBaseAndBitshift+0x15c>)
 80080fc:	5cd3      	ldrb	r3, [r2, r3]
 80080fe:	461a      	mov	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b03      	cmp	r3, #3
 8008108:	d908      	bls.n	800811c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	4b1f      	ldr	r3, [pc, #124]	; (8008190 <DMA_CalcBaseAndBitshift+0x160>)
 8008112:	4013      	ands	r3, r2
 8008114:	1d1a      	adds	r2, r3, #4
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	659a      	str	r2, [r3, #88]	; 0x58
 800811a:	e00d      	b.n	8008138 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	4b1b      	ldr	r3, [pc, #108]	; (8008190 <DMA_CalcBaseAndBitshift+0x160>)
 8008124:	4013      	ands	r3, r2
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6593      	str	r3, [r2, #88]	; 0x58
 800812a:	e005      	b.n	8008138 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	40020010 	.word	0x40020010
 800814c:	40020028 	.word	0x40020028
 8008150:	40020040 	.word	0x40020040
 8008154:	40020058 	.word	0x40020058
 8008158:	40020070 	.word	0x40020070
 800815c:	40020088 	.word	0x40020088
 8008160:	400200a0 	.word	0x400200a0
 8008164:	400200b8 	.word	0x400200b8
 8008168:	40020410 	.word	0x40020410
 800816c:	40020428 	.word	0x40020428
 8008170:	40020440 	.word	0x40020440
 8008174:	40020458 	.word	0x40020458
 8008178:	40020470 	.word	0x40020470
 800817c:	40020488 	.word	0x40020488
 8008180:	400204a0 	.word	0x400204a0
 8008184:	400204b8 	.word	0x400204b8
 8008188:	aaaaaaab 	.word	0xaaaaaaab
 800818c:	0800fe40 	.word	0x0800fe40
 8008190:	fffffc00 	.word	0xfffffc00

08008194 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d120      	bne.n	80081ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d858      	bhi.n	8008262 <DMA_CheckFifoParam+0xce>
 80081b0:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <DMA_CheckFifoParam+0x24>)
 80081b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b6:	bf00      	nop
 80081b8:	080081c9 	.word	0x080081c9
 80081bc:	080081db 	.word	0x080081db
 80081c0:	080081c9 	.word	0x080081c9
 80081c4:	08008263 	.word	0x08008263
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d048      	beq.n	8008266 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081d8:	e045      	b.n	8008266 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081e2:	d142      	bne.n	800826a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081e8:	e03f      	b.n	800826a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f2:	d123      	bne.n	800823c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d838      	bhi.n	800826e <DMA_CheckFifoParam+0xda>
 80081fc:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <DMA_CheckFifoParam+0x70>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008215 	.word	0x08008215
 8008208:	0800821b 	.word	0x0800821b
 800820c:	08008215 	.word	0x08008215
 8008210:	0800822d 	.word	0x0800822d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	73fb      	strb	r3, [r7, #15]
        break;
 8008218:	e030      	b.n	800827c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d025      	beq.n	8008272 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800822a:	e022      	b.n	8008272 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008234:	d11f      	bne.n	8008276 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800823a:	e01c      	b.n	8008276 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008240:	2b02      	cmp	r3, #2
 8008242:	d902      	bls.n	800824a <DMA_CheckFifoParam+0xb6>
 8008244:	2b03      	cmp	r3, #3
 8008246:	d003      	beq.n	8008250 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008248:	e018      	b.n	800827c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	73fb      	strb	r3, [r7, #15]
        break;
 800824e:	e015      	b.n	800827c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00e      	beq.n	800827a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	73fb      	strb	r3, [r7, #15]
    break;
 8008260:	e00b      	b.n	800827a <DMA_CheckFifoParam+0xe6>
        break;
 8008262:	bf00      	nop
 8008264:	e00a      	b.n	800827c <DMA_CheckFifoParam+0xe8>
        break;
 8008266:	bf00      	nop
 8008268:	e008      	b.n	800827c <DMA_CheckFifoParam+0xe8>
        break;
 800826a:	bf00      	nop
 800826c:	e006      	b.n	800827c <DMA_CheckFifoParam+0xe8>
        break;
 800826e:	bf00      	nop
 8008270:	e004      	b.n	800827c <DMA_CheckFifoParam+0xe8>
        break;
 8008272:	bf00      	nop
 8008274:	e002      	b.n	800827c <DMA_CheckFifoParam+0xe8>
        break;
 8008276:	bf00      	nop
 8008278:	e000      	b.n	800827c <DMA_CheckFifoParam+0xe8>
    break;
 800827a:	bf00      	nop
    }
  }

  return status;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop

0800828c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a38      	ldr	r2, [pc, #224]	; (8008380 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d022      	beq.n	80082ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a36      	ldr	r2, [pc, #216]	; (8008384 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d01d      	beq.n	80082ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a35      	ldr	r2, [pc, #212]	; (8008388 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d018      	beq.n	80082ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a33      	ldr	r2, [pc, #204]	; (800838c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d013      	beq.n	80082ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a32      	ldr	r2, [pc, #200]	; (8008390 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00e      	beq.n	80082ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a30      	ldr	r2, [pc, #192]	; (8008394 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d009      	beq.n	80082ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a2f      	ldr	r2, [pc, #188]	; (8008398 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d004      	beq.n	80082ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a2d      	ldr	r2, [pc, #180]	; (800839c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d101      	bne.n	80082ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80082ee:	2300      	movs	r3, #0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01a      	beq.n	800832a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	3b08      	subs	r3, #8
 80082fc:	4a28      	ldr	r2, [pc, #160]	; (80083a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80082fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008302:	091b      	lsrs	r3, r3, #4
 8008304:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	4b26      	ldr	r3, [pc, #152]	; (80083a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	461a      	mov	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a24      	ldr	r2, [pc, #144]	; (80083a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008318:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f003 031f 	and.w	r3, r3, #31
 8008320:	2201      	movs	r2, #1
 8008322:	409a      	lsls	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008328:	e024      	b.n	8008374 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	b2db      	uxtb	r3, r3
 8008330:	3b10      	subs	r3, #16
 8008332:	4a1e      	ldr	r2, [pc, #120]	; (80083ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008334:	fba2 2303 	umull	r2, r3, r2, r3
 8008338:	091b      	lsrs	r3, r3, #4
 800833a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	4a1c      	ldr	r2, [pc, #112]	; (80083b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d806      	bhi.n	8008352 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	4a1b      	ldr	r2, [pc, #108]	; (80083b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d902      	bls.n	8008352 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3308      	adds	r3, #8
 8008350:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4b18      	ldr	r3, [pc, #96]	; (80083b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	461a      	mov	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a16      	ldr	r2, [pc, #88]	; (80083bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008364:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f003 031f 	and.w	r3, r3, #31
 800836c:	2201      	movs	r2, #1
 800836e:	409a      	lsls	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008374:	bf00      	nop
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	58025408 	.word	0x58025408
 8008384:	5802541c 	.word	0x5802541c
 8008388:	58025430 	.word	0x58025430
 800838c:	58025444 	.word	0x58025444
 8008390:	58025458 	.word	0x58025458
 8008394:	5802546c 	.word	0x5802546c
 8008398:	58025480 	.word	0x58025480
 800839c:	58025494 	.word	0x58025494
 80083a0:	cccccccd 	.word	0xcccccccd
 80083a4:	16009600 	.word	0x16009600
 80083a8:	58025880 	.word	0x58025880
 80083ac:	aaaaaaab 	.word	0xaaaaaaab
 80083b0:	400204b8 	.word	0x400204b8
 80083b4:	4002040f 	.word	0x4002040f
 80083b8:	10008200 	.word	0x10008200
 80083bc:	40020880 	.word	0x40020880

080083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d04a      	beq.n	800846c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d847      	bhi.n	800846c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a25      	ldr	r2, [pc, #148]	; (8008478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d022      	beq.n	800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a24      	ldr	r2, [pc, #144]	; (800847c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d01d      	beq.n	800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a22      	ldr	r2, [pc, #136]	; (8008480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d018      	beq.n	800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a21      	ldr	r2, [pc, #132]	; (8008484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d013      	beq.n	800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1f      	ldr	r2, [pc, #124]	; (8008488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00e      	beq.n	800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a1e      	ldr	r2, [pc, #120]	; (800848c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d009      	beq.n	800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a1c      	ldr	r2, [pc, #112]	; (8008490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d004      	beq.n	800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a1b      	ldr	r2, [pc, #108]	; (8008494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d101      	bne.n	8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800842c:	2301      	movs	r3, #1
 800842e:	e000      	b.n	8008432 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008430:	2300      	movs	r3, #0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4b17      	ldr	r3, [pc, #92]	; (8008498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	461a      	mov	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a15      	ldr	r2, [pc, #84]	; (800849c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008448:	671a      	str	r2, [r3, #112]	; 0x70
 800844a:	e009      	b.n	8008460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4b14      	ldr	r3, [pc, #80]	; (80084a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	461a      	mov	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a11      	ldr	r2, [pc, #68]	; (80084a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800845e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	3b01      	subs	r3, #1
 8008464:	2201      	movs	r2, #1
 8008466:	409a      	lsls	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800846c:	bf00      	nop
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	58025408 	.word	0x58025408
 800847c:	5802541c 	.word	0x5802541c
 8008480:	58025430 	.word	0x58025430
 8008484:	58025444 	.word	0x58025444
 8008488:	58025458 	.word	0x58025458
 800848c:	5802546c 	.word	0x5802546c
 8008490:	58025480 	.word	0x58025480
 8008494:	58025494 	.word	0x58025494
 8008498:	1600963f 	.word	0x1600963f
 800849c:	58025940 	.word	0x58025940
 80084a0:	1000823f 	.word	0x1000823f
 80084a4:	40020940 	.word	0x40020940

080084a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b089      	sub	sp, #36	; 0x24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084b6:	4b86      	ldr	r3, [pc, #536]	; (80086d0 <HAL_GPIO_Init+0x228>)
 80084b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084ba:	e18c      	b.n	80087d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	2101      	movs	r1, #1
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	fa01 f303 	lsl.w	r3, r1, r3
 80084c8:	4013      	ands	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 817e 	beq.w	80087d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d005      	beq.n	80084ec <HAL_GPIO_Init+0x44>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f003 0303 	and.w	r3, r3, #3
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d130      	bne.n	800854e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	2203      	movs	r2, #3
 80084f8:	fa02 f303 	lsl.w	r3, r2, r3
 80084fc:	43db      	mvns	r3, r3
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	4013      	ands	r3, r2
 8008502:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	fa02 f303 	lsl.w	r3, r2, r3
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	4313      	orrs	r3, r2
 8008514:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008522:	2201      	movs	r2, #1
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	fa02 f303 	lsl.w	r3, r2, r3
 800852a:	43db      	mvns	r3, r3
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	4013      	ands	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	091b      	lsrs	r3, r3, #4
 8008538:	f003 0201 	and.w	r2, r3, #1
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	fa02 f303 	lsl.w	r3, r2, r3
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	4313      	orrs	r3, r2
 8008546:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	2b03      	cmp	r3, #3
 8008558:	d017      	beq.n	800858a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	2203      	movs	r2, #3
 8008566:	fa02 f303 	lsl.w	r3, r2, r3
 800856a:	43db      	mvns	r3, r3
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	4013      	ands	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	689a      	ldr	r2, [r3, #8]
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	fa02 f303 	lsl.w	r3, r2, r3
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	4313      	orrs	r3, r2
 8008582:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d123      	bne.n	80085de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	08da      	lsrs	r2, r3, #3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3208      	adds	r2, #8
 800859e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	220f      	movs	r2, #15
 80085ae:	fa02 f303 	lsl.w	r3, r2, r3
 80085b2:	43db      	mvns	r3, r3
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	4013      	ands	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	691a      	ldr	r2, [r3, #16]
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	08da      	lsrs	r2, r3, #3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3208      	adds	r2, #8
 80085d8:	69b9      	ldr	r1, [r7, #24]
 80085da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	2203      	movs	r2, #3
 80085ea:	fa02 f303 	lsl.w	r3, r2, r3
 80085ee:	43db      	mvns	r3, r3
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	4013      	ands	r3, r2
 80085f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f003 0203 	and.w	r2, r3, #3
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	fa02 f303 	lsl.w	r3, r2, r3
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	4313      	orrs	r3, r2
 800860a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 80d8 	beq.w	80087d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008620:	4b2c      	ldr	r3, [pc, #176]	; (80086d4 <HAL_GPIO_Init+0x22c>)
 8008622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008626:	4a2b      	ldr	r2, [pc, #172]	; (80086d4 <HAL_GPIO_Init+0x22c>)
 8008628:	f043 0302 	orr.w	r3, r3, #2
 800862c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008630:	4b28      	ldr	r3, [pc, #160]	; (80086d4 <HAL_GPIO_Init+0x22c>)
 8008632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800863e:	4a26      	ldr	r2, [pc, #152]	; (80086d8 <HAL_GPIO_Init+0x230>)
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	089b      	lsrs	r3, r3, #2
 8008644:	3302      	adds	r3, #2
 8008646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800864a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	220f      	movs	r2, #15
 8008656:	fa02 f303 	lsl.w	r3, r2, r3
 800865a:	43db      	mvns	r3, r3
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	4013      	ands	r3, r2
 8008660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a1d      	ldr	r2, [pc, #116]	; (80086dc <HAL_GPIO_Init+0x234>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d04a      	beq.n	8008700 <HAL_GPIO_Init+0x258>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a1c      	ldr	r2, [pc, #112]	; (80086e0 <HAL_GPIO_Init+0x238>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d02b      	beq.n	80086ca <HAL_GPIO_Init+0x222>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a1b      	ldr	r2, [pc, #108]	; (80086e4 <HAL_GPIO_Init+0x23c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d025      	beq.n	80086c6 <HAL_GPIO_Init+0x21e>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a1a      	ldr	r2, [pc, #104]	; (80086e8 <HAL_GPIO_Init+0x240>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d01f      	beq.n	80086c2 <HAL_GPIO_Init+0x21a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a19      	ldr	r2, [pc, #100]	; (80086ec <HAL_GPIO_Init+0x244>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d019      	beq.n	80086be <HAL_GPIO_Init+0x216>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <HAL_GPIO_Init+0x248>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d013      	beq.n	80086ba <HAL_GPIO_Init+0x212>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a17      	ldr	r2, [pc, #92]	; (80086f4 <HAL_GPIO_Init+0x24c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00d      	beq.n	80086b6 <HAL_GPIO_Init+0x20e>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a16      	ldr	r2, [pc, #88]	; (80086f8 <HAL_GPIO_Init+0x250>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d007      	beq.n	80086b2 <HAL_GPIO_Init+0x20a>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a15      	ldr	r2, [pc, #84]	; (80086fc <HAL_GPIO_Init+0x254>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d101      	bne.n	80086ae <HAL_GPIO_Init+0x206>
 80086aa:	2309      	movs	r3, #9
 80086ac:	e029      	b.n	8008702 <HAL_GPIO_Init+0x25a>
 80086ae:	230a      	movs	r3, #10
 80086b0:	e027      	b.n	8008702 <HAL_GPIO_Init+0x25a>
 80086b2:	2307      	movs	r3, #7
 80086b4:	e025      	b.n	8008702 <HAL_GPIO_Init+0x25a>
 80086b6:	2306      	movs	r3, #6
 80086b8:	e023      	b.n	8008702 <HAL_GPIO_Init+0x25a>
 80086ba:	2305      	movs	r3, #5
 80086bc:	e021      	b.n	8008702 <HAL_GPIO_Init+0x25a>
 80086be:	2304      	movs	r3, #4
 80086c0:	e01f      	b.n	8008702 <HAL_GPIO_Init+0x25a>
 80086c2:	2303      	movs	r3, #3
 80086c4:	e01d      	b.n	8008702 <HAL_GPIO_Init+0x25a>
 80086c6:	2302      	movs	r3, #2
 80086c8:	e01b      	b.n	8008702 <HAL_GPIO_Init+0x25a>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e019      	b.n	8008702 <HAL_GPIO_Init+0x25a>
 80086ce:	bf00      	nop
 80086d0:	58000080 	.word	0x58000080
 80086d4:	58024400 	.word	0x58024400
 80086d8:	58000400 	.word	0x58000400
 80086dc:	58020000 	.word	0x58020000
 80086e0:	58020400 	.word	0x58020400
 80086e4:	58020800 	.word	0x58020800
 80086e8:	58020c00 	.word	0x58020c00
 80086ec:	58021000 	.word	0x58021000
 80086f0:	58021400 	.word	0x58021400
 80086f4:	58021800 	.word	0x58021800
 80086f8:	58021c00 	.word	0x58021c00
 80086fc:	58022400 	.word	0x58022400
 8008700:	2300      	movs	r3, #0
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	f002 0203 	and.w	r2, r2, #3
 8008708:	0092      	lsls	r2, r2, #2
 800870a:	4093      	lsls	r3, r2
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	4313      	orrs	r3, r2
 8008710:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008712:	4938      	ldr	r1, [pc, #224]	; (80087f4 <HAL_GPIO_Init+0x34c>)
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	089b      	lsrs	r3, r3, #2
 8008718:	3302      	adds	r3, #2
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	43db      	mvns	r3, r3
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	4013      	ands	r3, r2
 8008730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800874e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	43db      	mvns	r3, r3
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	4013      	ands	r3, r2
 800875e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	43db      	mvns	r3, r3
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	4013      	ands	r3, r2
 800878a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	43db      	mvns	r3, r3
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	4013      	ands	r3, r2
 80087b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	3301      	adds	r3, #1
 80087d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	fa22 f303 	lsr.w	r3, r2, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f ae6b 	bne.w	80084bc <HAL_GPIO_Init+0x14>
  }
}
 80087e6:	bf00      	nop
 80087e8:	bf00      	nop
 80087ea:	3724      	adds	r7, #36	; 0x24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	58000400 	.word	0x58000400

080087f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008806:	4b72      	ldr	r3, [pc, #456]	; (80089d0 <HAL_GPIO_DeInit+0x1d8>)
 8008808:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800880a:	e0d3      	b.n	80089b4 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800880c:	2201      	movs	r2, #1
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	fa02 f303 	lsl.w	r3, r2, r3
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	4013      	ands	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 80c6 	beq.w	80089ae <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008822:	4a6c      	ldr	r2, [pc, #432]	; (80089d4 <HAL_GPIO_DeInit+0x1dc>)
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	089b      	lsrs	r3, r3, #2
 8008828:	3302      	adds	r3, #2
 800882a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800882e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	220f      	movs	r2, #15
 800883a:	fa02 f303 	lsl.w	r3, r2, r3
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4013      	ands	r3, r2
 8008842:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a64      	ldr	r2, [pc, #400]	; (80089d8 <HAL_GPIO_DeInit+0x1e0>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d031      	beq.n	80088b0 <HAL_GPIO_DeInit+0xb8>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a63      	ldr	r2, [pc, #396]	; (80089dc <HAL_GPIO_DeInit+0x1e4>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d02b      	beq.n	80088ac <HAL_GPIO_DeInit+0xb4>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a62      	ldr	r2, [pc, #392]	; (80089e0 <HAL_GPIO_DeInit+0x1e8>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d025      	beq.n	80088a8 <HAL_GPIO_DeInit+0xb0>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a61      	ldr	r2, [pc, #388]	; (80089e4 <HAL_GPIO_DeInit+0x1ec>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d01f      	beq.n	80088a4 <HAL_GPIO_DeInit+0xac>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a60      	ldr	r2, [pc, #384]	; (80089e8 <HAL_GPIO_DeInit+0x1f0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d019      	beq.n	80088a0 <HAL_GPIO_DeInit+0xa8>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a5f      	ldr	r2, [pc, #380]	; (80089ec <HAL_GPIO_DeInit+0x1f4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d013      	beq.n	800889c <HAL_GPIO_DeInit+0xa4>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a5e      	ldr	r2, [pc, #376]	; (80089f0 <HAL_GPIO_DeInit+0x1f8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00d      	beq.n	8008898 <HAL_GPIO_DeInit+0xa0>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a5d      	ldr	r2, [pc, #372]	; (80089f4 <HAL_GPIO_DeInit+0x1fc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d007      	beq.n	8008894 <HAL_GPIO_DeInit+0x9c>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a5c      	ldr	r2, [pc, #368]	; (80089f8 <HAL_GPIO_DeInit+0x200>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d101      	bne.n	8008890 <HAL_GPIO_DeInit+0x98>
 800888c:	2309      	movs	r3, #9
 800888e:	e010      	b.n	80088b2 <HAL_GPIO_DeInit+0xba>
 8008890:	230a      	movs	r3, #10
 8008892:	e00e      	b.n	80088b2 <HAL_GPIO_DeInit+0xba>
 8008894:	2307      	movs	r3, #7
 8008896:	e00c      	b.n	80088b2 <HAL_GPIO_DeInit+0xba>
 8008898:	2306      	movs	r3, #6
 800889a:	e00a      	b.n	80088b2 <HAL_GPIO_DeInit+0xba>
 800889c:	2305      	movs	r3, #5
 800889e:	e008      	b.n	80088b2 <HAL_GPIO_DeInit+0xba>
 80088a0:	2304      	movs	r3, #4
 80088a2:	e006      	b.n	80088b2 <HAL_GPIO_DeInit+0xba>
 80088a4:	2303      	movs	r3, #3
 80088a6:	e004      	b.n	80088b2 <HAL_GPIO_DeInit+0xba>
 80088a8:	2302      	movs	r3, #2
 80088aa:	e002      	b.n	80088b2 <HAL_GPIO_DeInit+0xba>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e000      	b.n	80088b2 <HAL_GPIO_DeInit+0xba>
 80088b0:	2300      	movs	r3, #0
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	f002 0203 	and.w	r2, r2, #3
 80088b8:	0092      	lsls	r2, r2, #2
 80088ba:	4093      	lsls	r3, r2
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d136      	bne.n	8008930 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	43db      	mvns	r3, r3
 80088ca:	401a      	ands	r2, r3
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	43db      	mvns	r3, r3
 80088d8:	401a      	ands	r2, r3
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80088de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	43db      	mvns	r3, r3
 80088e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088ec:	4013      	ands	r3, r2
 80088ee:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80088f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	43db      	mvns	r3, r3
 80088fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088fe:	4013      	ands	r3, r2
 8008900:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	220f      	movs	r2, #15
 800890c:	fa02 f303 	lsl.w	r3, r2, r3
 8008910:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008912:	4a30      	ldr	r2, [pc, #192]	; (80089d4 <HAL_GPIO_DeInit+0x1dc>)
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	089b      	lsrs	r3, r3, #2
 8008918:	3302      	adds	r3, #2
 800891a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	43da      	mvns	r2, r3
 8008922:	482c      	ldr	r0, [pc, #176]	; (80089d4 <HAL_GPIO_DeInit+0x1dc>)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	089b      	lsrs	r3, r3, #2
 8008928:	400a      	ands	r2, r1
 800892a:	3302      	adds	r3, #2
 800892c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	2103      	movs	r1, #3
 800893a:	fa01 f303 	lsl.w	r3, r1, r3
 800893e:	431a      	orrs	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	08da      	lsrs	r2, r3, #3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3208      	adds	r2, #8
 800894c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	220f      	movs	r2, #15
 800895a:	fa02 f303 	lsl.w	r3, r2, r3
 800895e:	43db      	mvns	r3, r3
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	08d2      	lsrs	r2, r2, #3
 8008964:	4019      	ands	r1, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3208      	adds	r2, #8
 800896a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	2103      	movs	r1, #3
 8008978:	fa01 f303 	lsl.w	r3, r1, r3
 800897c:	43db      	mvns	r3, r3
 800897e:	401a      	ands	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	2101      	movs	r1, #1
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	fa01 f303 	lsl.w	r3, r1, r3
 8008990:	43db      	mvns	r3, r3
 8008992:	401a      	ands	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	2103      	movs	r1, #3
 80089a2:	fa01 f303 	lsl.w	r3, r1, r3
 80089a6:	43db      	mvns	r3, r3
 80089a8:	401a      	ands	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	609a      	str	r2, [r3, #8]
    }

    position++;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	3301      	adds	r3, #1
 80089b2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	fa22 f303 	lsr.w	r3, r2, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f47f af25 	bne.w	800880c <HAL_GPIO_DeInit+0x14>
  }
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	371c      	adds	r7, #28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	58000080 	.word	0x58000080
 80089d4:	58000400 	.word	0x58000400
 80089d8:	58020000 	.word	0x58020000
 80089dc:	58020400 	.word	0x58020400
 80089e0:	58020800 	.word	0x58020800
 80089e4:	58020c00 	.word	0x58020c00
 80089e8:	58021000 	.word	0x58021000
 80089ec:	58021400 	.word	0x58021400
 80089f0:	58021800 	.word	0x58021800
 80089f4:	58021c00 	.word	0x58021c00
 80089f8:	58022400 	.word	0x58022400

080089fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	807b      	strh	r3, [r7, #2]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a0c:	787b      	ldrb	r3, [r7, #1]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a12:	887a      	ldrh	r2, [r7, #2]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008a18:	e003      	b.n	8008a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008a1a:	887b      	ldrh	r3, [r7, #2]
 8008a1c:	041a      	lsls	r2, r3, #16
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	619a      	str	r2, [r3, #24]
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	4603      	mov	r3, r0
 8008a36:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008a40:	88fb      	ldrh	r3, [r7, #6]
 8008a42:	4013      	ands	r3, r2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d008      	beq.n	8008a5a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a52:	88fb      	ldrh	r3, [r7, #6]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 f804 	bl	8008a62 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008a5a:	bf00      	nop
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	4603      	mov	r3, r0
 8008a6a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a80:	4b19      	ldr	r3, [pc, #100]	; (8008ae8 <HAL_PWREx_ConfigSupply+0x70>)
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d00a      	beq.n	8008aa2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a8c:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <HAL_PWREx_ConfigSupply+0x70>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d001      	beq.n	8008a9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e01f      	b.n	8008ade <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e01d      	b.n	8008ade <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008aa2:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <HAL_PWREx_ConfigSupply+0x70>)
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f023 0207 	bic.w	r2, r3, #7
 8008aaa:	490f      	ldr	r1, [pc, #60]	; (8008ae8 <HAL_PWREx_ConfigSupply+0x70>)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008ab2:	f7fc fbbb 	bl	800522c <HAL_GetTick>
 8008ab6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ab8:	e009      	b.n	8008ace <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008aba:	f7fc fbb7 	bl	800522c <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ac8:	d901      	bls.n	8008ace <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e007      	b.n	8008ade <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ace:	4b06      	ldr	r3, [pc, #24]	; (8008ae8 <HAL_PWREx_ConfigSupply+0x70>)
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ada:	d1ee      	bne.n	8008aba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	58024800 	.word	0x58024800

08008aec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08c      	sub	sp, #48	; 0x30
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e39d      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 8087 	beq.w	8008c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b0c:	4b88      	ldr	r3, [pc, #544]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b16:	4b86      	ldr	r3, [pc, #536]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1e:	2b10      	cmp	r3, #16
 8008b20:	d007      	beq.n	8008b32 <HAL_RCC_OscConfig+0x46>
 8008b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b24:	2b18      	cmp	r3, #24
 8008b26:	d110      	bne.n	8008b4a <HAL_RCC_OscConfig+0x5e>
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	f003 0303 	and.w	r3, r3, #3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d10b      	bne.n	8008b4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b32:	4b7f      	ldr	r3, [pc, #508]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d06c      	beq.n	8008c18 <HAL_RCC_OscConfig+0x12c>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d168      	bne.n	8008c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e377      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b52:	d106      	bne.n	8008b62 <HAL_RCC_OscConfig+0x76>
 8008b54:	4b76      	ldr	r3, [pc, #472]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a75      	ldr	r2, [pc, #468]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	e02e      	b.n	8008bc0 <HAL_RCC_OscConfig+0xd4>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10c      	bne.n	8008b84 <HAL_RCC_OscConfig+0x98>
 8008b6a:	4b71      	ldr	r3, [pc, #452]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a70      	ldr	r2, [pc, #448]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	4b6e      	ldr	r3, [pc, #440]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a6d      	ldr	r2, [pc, #436]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	e01d      	b.n	8008bc0 <HAL_RCC_OscConfig+0xd4>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b8c:	d10c      	bne.n	8008ba8 <HAL_RCC_OscConfig+0xbc>
 8008b8e:	4b68      	ldr	r3, [pc, #416]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a67      	ldr	r2, [pc, #412]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	4b65      	ldr	r3, [pc, #404]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a64      	ldr	r2, [pc, #400]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	e00b      	b.n	8008bc0 <HAL_RCC_OscConfig+0xd4>
 8008ba8:	4b61      	ldr	r3, [pc, #388]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a60      	ldr	r2, [pc, #384]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	4b5e      	ldr	r3, [pc, #376]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a5d      	ldr	r2, [pc, #372]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d013      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc8:	f7fc fb30 	bl	800522c <HAL_GetTick>
 8008bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bce:	e008      	b.n	8008be2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bd0:	f7fc fb2c 	bl	800522c <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	2b64      	cmp	r3, #100	; 0x64
 8008bdc:	d901      	bls.n	8008be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e32b      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008be2:	4b53      	ldr	r3, [pc, #332]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0f0      	beq.n	8008bd0 <HAL_RCC_OscConfig+0xe4>
 8008bee:	e014      	b.n	8008c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf0:	f7fc fb1c 	bl	800522c <HAL_GetTick>
 8008bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bf6:	e008      	b.n	8008c0a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bf8:	f7fc fb18 	bl	800522c <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b64      	cmp	r3, #100	; 0x64
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e317      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c0a:	4b49      	ldr	r3, [pc, #292]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1f0      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x10c>
 8008c16:	e000      	b.n	8008c1a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 808c 	beq.w	8008d40 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c28:	4b41      	ldr	r3, [pc, #260]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c32:	4b3f      	ldr	r3, [pc, #252]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d007      	beq.n	8008c4e <HAL_RCC_OscConfig+0x162>
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	2b18      	cmp	r3, #24
 8008c42:	d137      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x1c8>
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d132      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c4e:	4b38      	ldr	r3, [pc, #224]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <HAL_RCC_OscConfig+0x17a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e2e9      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c66:	4b32      	ldr	r3, [pc, #200]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f023 0219 	bic.w	r2, r3, #25
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	492f      	ldr	r1, [pc, #188]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c78:	f7fc fad8 	bl	800522c <HAL_GetTick>
 8008c7c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c80:	f7fc fad4 	bl	800522c <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e2d3      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c92:	4b27      	ldr	r3, [pc, #156]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0304 	and.w	r3, r3, #4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0f0      	beq.n	8008c80 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c9e:	4b24      	ldr	r3, [pc, #144]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	061b      	lsls	r3, r3, #24
 8008cac:	4920      	ldr	r1, [pc, #128]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cb2:	e045      	b.n	8008d40 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d026      	beq.n	8008d0a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cbc:	4b1c      	ldr	r3, [pc, #112]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f023 0219 	bic.w	r2, r3, #25
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	4919      	ldr	r1, [pc, #100]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cce:	f7fc faad 	bl	800522c <HAL_GetTick>
 8008cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cd6:	f7fc faa9 	bl	800522c <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e2a8      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ce8:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0304 	and.w	r3, r3, #4
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0f0      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cf4:	4b0e      	ldr	r3, [pc, #56]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	061b      	lsls	r3, r3, #24
 8008d02:	490b      	ldr	r1, [pc, #44]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	604b      	str	r3, [r1, #4]
 8008d08:	e01a      	b.n	8008d40 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d0a:	4b09      	ldr	r3, [pc, #36]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a08      	ldr	r2, [pc, #32]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008d10:	f023 0301 	bic.w	r3, r3, #1
 8008d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d16:	f7fc fa89 	bl	800522c <HAL_GetTick>
 8008d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d1c:	e00a      	b.n	8008d34 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d1e:	f7fc fa85 	bl	800522c <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d903      	bls.n	8008d34 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e284      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
 8008d30:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d34:	4b96      	ldr	r3, [pc, #600]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1ee      	bne.n	8008d1e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0310 	and.w	r3, r3, #16
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d06a      	beq.n	8008e22 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d4c:	4b90      	ldr	r3, [pc, #576]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d54:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d56:	4b8e      	ldr	r3, [pc, #568]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2b08      	cmp	r3, #8
 8008d60:	d007      	beq.n	8008d72 <HAL_RCC_OscConfig+0x286>
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b18      	cmp	r3, #24
 8008d66:	d11b      	bne.n	8008da0 <HAL_RCC_OscConfig+0x2b4>
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f003 0303 	and.w	r3, r3, #3
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d116      	bne.n	8008da0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d72:	4b87      	ldr	r3, [pc, #540]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d005      	beq.n	8008d8a <HAL_RCC_OscConfig+0x29e>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	2b80      	cmp	r3, #128	; 0x80
 8008d84:	d001      	beq.n	8008d8a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e257      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d8a:	4b81      	ldr	r3, [pc, #516]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	061b      	lsls	r3, r3, #24
 8008d98:	497d      	ldr	r1, [pc, #500]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d9e:	e040      	b.n	8008e22 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d023      	beq.n	8008df0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008da8:	4b79      	ldr	r3, [pc, #484]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a78      	ldr	r2, [pc, #480]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db4:	f7fc fa3a 	bl	800522c <HAL_GetTick>
 8008db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dba:	e008      	b.n	8008dce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008dbc:	f7fc fa36 	bl	800522c <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e235      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dce:	4b70      	ldr	r3, [pc, #448]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0f0      	beq.n	8008dbc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008dda:	4b6d      	ldr	r3, [pc, #436]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	061b      	lsls	r3, r3, #24
 8008de8:	4969      	ldr	r1, [pc, #420]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60cb      	str	r3, [r1, #12]
 8008dee:	e018      	b.n	8008e22 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008df0:	4b67      	ldr	r3, [pc, #412]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a66      	ldr	r2, [pc, #408]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dfc:	f7fc fa16 	bl	800522c <HAL_GetTick>
 8008e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008e02:	e008      	b.n	8008e16 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008e04:	f7fc fa12 	bl	800522c <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d901      	bls.n	8008e16 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e211      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008e16:	4b5e      	ldr	r3, [pc, #376]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1f0      	bne.n	8008e04 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0308 	and.w	r3, r3, #8
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d036      	beq.n	8008e9c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d019      	beq.n	8008e6a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e36:	4b56      	ldr	r3, [pc, #344]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e3a:	4a55      	ldr	r2, [pc, #340]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008e3c:	f043 0301 	orr.w	r3, r3, #1
 8008e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e42:	f7fc f9f3 	bl	800522c <HAL_GetTick>
 8008e46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e48:	e008      	b.n	8008e5c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e4a:	f7fc f9ef 	bl	800522c <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d901      	bls.n	8008e5c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e1ee      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e5c:	4b4c      	ldr	r3, [pc, #304]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0f0      	beq.n	8008e4a <HAL_RCC_OscConfig+0x35e>
 8008e68:	e018      	b.n	8008e9c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e6a:	4b49      	ldr	r3, [pc, #292]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e6e:	4a48      	ldr	r2, [pc, #288]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008e70:	f023 0301 	bic.w	r3, r3, #1
 8008e74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e76:	f7fc f9d9 	bl	800522c <HAL_GetTick>
 8008e7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e7c:	e008      	b.n	8008e90 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e7e:	f7fc f9d5 	bl	800522c <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d901      	bls.n	8008e90 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e1d4      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e90:	4b3f      	ldr	r3, [pc, #252]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1f0      	bne.n	8008e7e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d036      	beq.n	8008f16 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d019      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008eb0:	4b37      	ldr	r3, [pc, #220]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a36      	ldr	r2, [pc, #216]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008eb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008eba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ebc:	f7fc f9b6 	bl	800522c <HAL_GetTick>
 8008ec0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ec2:	e008      	b.n	8008ed6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ec4:	f7fc f9b2 	bl	800522c <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e1b1      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ed6:	4b2e      	ldr	r3, [pc, #184]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0f0      	beq.n	8008ec4 <HAL_RCC_OscConfig+0x3d8>
 8008ee2:	e018      	b.n	8008f16 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ee4:	4b2a      	ldr	r3, [pc, #168]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a29      	ldr	r2, [pc, #164]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ef0:	f7fc f99c 	bl	800522c <HAL_GetTick>
 8008ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ef6:	e008      	b.n	8008f0a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ef8:	f7fc f998 	bl	800522c <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e197      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008f0a:	4b21      	ldr	r3, [pc, #132]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1f0      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0304 	and.w	r3, r3, #4
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 8086 	beq.w	8009030 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008f24:	4b1b      	ldr	r3, [pc, #108]	; (8008f94 <HAL_RCC_OscConfig+0x4a8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a1a      	ldr	r2, [pc, #104]	; (8008f94 <HAL_RCC_OscConfig+0x4a8>)
 8008f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f30:	f7fc f97c 	bl	800522c <HAL_GetTick>
 8008f34:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f36:	e008      	b.n	8008f4a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008f38:	f7fc f978 	bl	800522c <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b64      	cmp	r3, #100	; 0x64
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e177      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f4a:	4b12      	ldr	r3, [pc, #72]	; (8008f94 <HAL_RCC_OscConfig+0x4a8>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0f0      	beq.n	8008f38 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d106      	bne.n	8008f6c <HAL_RCC_OscConfig+0x480>
 8008f5e:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f62:	4a0b      	ldr	r2, [pc, #44]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008f64:	f043 0301 	orr.w	r3, r3, #1
 8008f68:	6713      	str	r3, [r2, #112]	; 0x70
 8008f6a:	e032      	b.n	8008fd2 <HAL_RCC_OscConfig+0x4e6>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d111      	bne.n	8008f98 <HAL_RCC_OscConfig+0x4ac>
 8008f74:	4b06      	ldr	r3, [pc, #24]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f78:	4a05      	ldr	r2, [pc, #20]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008f7a:	f023 0301 	bic.w	r3, r3, #1
 8008f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f80:	4b03      	ldr	r3, [pc, #12]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f84:	4a02      	ldr	r2, [pc, #8]	; (8008f90 <HAL_RCC_OscConfig+0x4a4>)
 8008f86:	f023 0304 	bic.w	r3, r3, #4
 8008f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f8c:	e021      	b.n	8008fd2 <HAL_RCC_OscConfig+0x4e6>
 8008f8e:	bf00      	nop
 8008f90:	58024400 	.word	0x58024400
 8008f94:	58024800 	.word	0x58024800
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	2b05      	cmp	r3, #5
 8008f9e:	d10c      	bne.n	8008fba <HAL_RCC_OscConfig+0x4ce>
 8008fa0:	4b83      	ldr	r3, [pc, #524]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8008fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa4:	4a82      	ldr	r2, [pc, #520]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8008fa6:	f043 0304 	orr.w	r3, r3, #4
 8008faa:	6713      	str	r3, [r2, #112]	; 0x70
 8008fac:	4b80      	ldr	r3, [pc, #512]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8008fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb0:	4a7f      	ldr	r2, [pc, #508]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8008fb2:	f043 0301 	orr.w	r3, r3, #1
 8008fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8008fb8:	e00b      	b.n	8008fd2 <HAL_RCC_OscConfig+0x4e6>
 8008fba:	4b7d      	ldr	r3, [pc, #500]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	4a7c      	ldr	r2, [pc, #496]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8008fc6:	4b7a      	ldr	r3, [pc, #488]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8008fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fca:	4a79      	ldr	r2, [pc, #484]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8008fcc:	f023 0304 	bic.w	r3, r3, #4
 8008fd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d015      	beq.n	8009006 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fda:	f7fc f927 	bl	800522c <HAL_GetTick>
 8008fde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fe0:	e00a      	b.n	8008ff8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fe2:	f7fc f923 	bl	800522c <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d901      	bls.n	8008ff8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e120      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ff8:	4b6d      	ldr	r3, [pc, #436]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8008ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0ee      	beq.n	8008fe2 <HAL_RCC_OscConfig+0x4f6>
 8009004:	e014      	b.n	8009030 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009006:	f7fc f911 	bl	800522c <HAL_GetTick>
 800900a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800900c:	e00a      	b.n	8009024 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800900e:	f7fc f90d 	bl	800522c <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	f241 3288 	movw	r2, #5000	; 0x1388
 800901c:	4293      	cmp	r3, r2
 800901e:	d901      	bls.n	8009024 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e10a      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009024:	4b62      	ldr	r3, [pc, #392]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009028:	f003 0302 	and.w	r3, r3, #2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1ee      	bne.n	800900e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80ff 	beq.w	8009238 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800903a:	4b5d      	ldr	r3, [pc, #372]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009042:	2b18      	cmp	r3, #24
 8009044:	f000 80ba 	beq.w	80091bc <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	2b02      	cmp	r3, #2
 800904e:	f040 8095 	bne.w	800917c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009052:	4b57      	ldr	r3, [pc, #348]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a56      	ldr	r2, [pc, #344]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800905c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800905e:	f7fc f8e5 	bl	800522c <HAL_GetTick>
 8009062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009064:	e008      	b.n	8009078 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009066:	f7fc f8e1 	bl	800522c <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e0e0      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009078:	4b4d      	ldr	r3, [pc, #308]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1f0      	bne.n	8009066 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009084:	4b4a      	ldr	r3, [pc, #296]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009088:	4b4a      	ldr	r3, [pc, #296]	; (80091b4 <HAL_RCC_OscConfig+0x6c8>)
 800908a:	4013      	ands	r3, r2
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009094:	0112      	lsls	r2, r2, #4
 8009096:	430a      	orrs	r2, r1
 8009098:	4945      	ldr	r1, [pc, #276]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 800909a:	4313      	orrs	r3, r2
 800909c:	628b      	str	r3, [r1, #40]	; 0x28
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a2:	3b01      	subs	r3, #1
 80090a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ac:	3b01      	subs	r3, #1
 80090ae:	025b      	lsls	r3, r3, #9
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b8:	3b01      	subs	r3, #1
 80090ba:	041b      	lsls	r3, r3, #16
 80090bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c6:	3b01      	subs	r3, #1
 80090c8:	061b      	lsls	r3, r3, #24
 80090ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090ce:	4938      	ldr	r1, [pc, #224]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80090d4:	4b36      	ldr	r3, [pc, #216]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	4a35      	ldr	r2, [pc, #212]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 80090da:	f023 0301 	bic.w	r3, r3, #1
 80090de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090e0:	4b33      	ldr	r3, [pc, #204]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 80090e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090e4:	4b34      	ldr	r3, [pc, #208]	; (80091b8 <HAL_RCC_OscConfig+0x6cc>)
 80090e6:	4013      	ands	r3, r2
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80090ec:	00d2      	lsls	r2, r2, #3
 80090ee:	4930      	ldr	r1, [pc, #192]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80090f4:	4b2e      	ldr	r3, [pc, #184]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	f023 020c 	bic.w	r2, r3, #12
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009100:	492b      	ldr	r1, [pc, #172]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009102:	4313      	orrs	r3, r2
 8009104:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009106:	4b2a      	ldr	r3, [pc, #168]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	f023 0202 	bic.w	r2, r3, #2
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009112:	4927      	ldr	r1, [pc, #156]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009114:	4313      	orrs	r3, r2
 8009116:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009118:	4b25      	ldr	r3, [pc, #148]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	4a24      	ldr	r2, [pc, #144]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 800911e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009122:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009124:	4b22      	ldr	r3, [pc, #136]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	4a21      	ldr	r2, [pc, #132]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 800912a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800912e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009130:	4b1f      	ldr	r3, [pc, #124]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	4a1e      	ldr	r2, [pc, #120]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009136:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800913a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800913c:	4b1c      	ldr	r3, [pc, #112]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	4a1b      	ldr	r2, [pc, #108]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009142:	f043 0301 	orr.w	r3, r3, #1
 8009146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009148:	4b19      	ldr	r3, [pc, #100]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a18      	ldr	r2, [pc, #96]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 800914e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009154:	f7fc f86a 	bl	800522c <HAL_GetTick>
 8009158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800915a:	e008      	b.n	800916e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800915c:	f7fc f866 	bl	800522c <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	2b02      	cmp	r3, #2
 8009168:	d901      	bls.n	800916e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e065      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800916e:	4b10      	ldr	r3, [pc, #64]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0f0      	beq.n	800915c <HAL_RCC_OscConfig+0x670>
 800917a:	e05d      	b.n	8009238 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800917c:	4b0c      	ldr	r3, [pc, #48]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a0b      	ldr	r2, [pc, #44]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 8009182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009188:	f7fc f850 	bl	800522c <HAL_GetTick>
 800918c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800918e:	e008      	b.n	80091a2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009190:	f7fc f84c 	bl	800522c <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e04b      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091a2:	4b03      	ldr	r3, [pc, #12]	; (80091b0 <HAL_RCC_OscConfig+0x6c4>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f0      	bne.n	8009190 <HAL_RCC_OscConfig+0x6a4>
 80091ae:	e043      	b.n	8009238 <HAL_RCC_OscConfig+0x74c>
 80091b0:	58024400 	.word	0x58024400
 80091b4:	fffffc0c 	.word	0xfffffc0c
 80091b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80091bc:	4b21      	ldr	r3, [pc, #132]	; (8009244 <HAL_RCC_OscConfig+0x758>)
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80091c2:	4b20      	ldr	r3, [pc, #128]	; (8009244 <HAL_RCC_OscConfig+0x758>)
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d031      	beq.n	8009234 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f003 0203 	and.w	r2, r3, #3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091da:	429a      	cmp	r2, r3
 80091dc:	d12a      	bne.n	8009234 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	091b      	lsrs	r3, r3, #4
 80091e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d122      	bne.n	8009234 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d11a      	bne.n	8009234 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	0a5b      	lsrs	r3, r3, #9
 8009202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800920c:	429a      	cmp	r2, r3
 800920e:	d111      	bne.n	8009234 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	0c1b      	lsrs	r3, r3, #16
 8009214:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800921e:	429a      	cmp	r2, r3
 8009220:	d108      	bne.n	8009234 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	0e1b      	lsrs	r3, r3, #24
 8009226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009230:	429a      	cmp	r2, r3
 8009232:	d001      	beq.n	8009238 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e000      	b.n	800923a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3730      	adds	r7, #48	; 0x30
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	58024400 	.word	0x58024400

08009248 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e19c      	b.n	8009596 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800925c:	4b8a      	ldr	r3, [pc, #552]	; (8009488 <HAL_RCC_ClockConfig+0x240>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 030f 	and.w	r3, r3, #15
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d910      	bls.n	800928c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800926a:	4b87      	ldr	r3, [pc, #540]	; (8009488 <HAL_RCC_ClockConfig+0x240>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f023 020f 	bic.w	r2, r3, #15
 8009272:	4985      	ldr	r1, [pc, #532]	; (8009488 <HAL_RCC_ClockConfig+0x240>)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	4313      	orrs	r3, r2
 8009278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800927a:	4b83      	ldr	r3, [pc, #524]	; (8009488 <HAL_RCC_ClockConfig+0x240>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 030f 	and.w	r3, r3, #15
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	429a      	cmp	r2, r3
 8009286:	d001      	beq.n	800928c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e184      	b.n	8009596 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0304 	and.w	r3, r3, #4
 8009294:	2b00      	cmp	r3, #0
 8009296:	d010      	beq.n	80092ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691a      	ldr	r2, [r3, #16]
 800929c:	4b7b      	ldr	r3, [pc, #492]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d908      	bls.n	80092ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092a8:	4b78      	ldr	r3, [pc, #480]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	4975      	ldr	r1, [pc, #468]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0308 	and.w	r3, r3, #8
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d010      	beq.n	80092e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695a      	ldr	r2, [r3, #20]
 80092ca:	4b70      	ldr	r3, [pc, #448]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d908      	bls.n	80092e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092d6:	4b6d      	ldr	r3, [pc, #436]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	496a      	ldr	r1, [pc, #424]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 0310 	and.w	r3, r3, #16
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d010      	beq.n	8009316 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699a      	ldr	r2, [r3, #24]
 80092f8:	4b64      	ldr	r3, [pc, #400]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009300:	429a      	cmp	r2, r3
 8009302:	d908      	bls.n	8009316 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009304:	4b61      	ldr	r3, [pc, #388]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	495e      	ldr	r1, [pc, #376]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 8009312:	4313      	orrs	r3, r2
 8009314:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0320 	and.w	r3, r3, #32
 800931e:	2b00      	cmp	r3, #0
 8009320:	d010      	beq.n	8009344 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	69da      	ldr	r2, [r3, #28]
 8009326:	4b59      	ldr	r3, [pc, #356]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800932e:	429a      	cmp	r2, r3
 8009330:	d908      	bls.n	8009344 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009332:	4b56      	ldr	r3, [pc, #344]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	4953      	ldr	r1, [pc, #332]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 8009340:	4313      	orrs	r3, r2
 8009342:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d010      	beq.n	8009372 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	4b4d      	ldr	r3, [pc, #308]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	f003 030f 	and.w	r3, r3, #15
 800935c:	429a      	cmp	r2, r3
 800935e:	d908      	bls.n	8009372 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009360:	4b4a      	ldr	r3, [pc, #296]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	f023 020f 	bic.w	r2, r3, #15
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	4947      	ldr	r1, [pc, #284]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 800936e:	4313      	orrs	r3, r2
 8009370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d055      	beq.n	800942a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800937e:	4b43      	ldr	r3, [pc, #268]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	4940      	ldr	r1, [pc, #256]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 800938c:	4313      	orrs	r3, r2
 800938e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d107      	bne.n	80093a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009398:	4b3c      	ldr	r3, [pc, #240]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d121      	bne.n	80093e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e0f6      	b.n	8009596 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	d107      	bne.n	80093c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093b0:	4b36      	ldr	r3, [pc, #216]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d115      	bne.n	80093e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e0ea      	b.n	8009596 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d107      	bne.n	80093d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093c8:	4b30      	ldr	r3, [pc, #192]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e0de      	b.n	8009596 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093d8:	4b2c      	ldr	r3, [pc, #176]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0304 	and.w	r3, r3, #4
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e0d6      	b.n	8009596 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093e8:	4b28      	ldr	r3, [pc, #160]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	f023 0207 	bic.w	r2, r3, #7
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	4925      	ldr	r1, [pc, #148]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093fa:	f7fb ff17 	bl	800522c <HAL_GetTick>
 80093fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009400:	e00a      	b.n	8009418 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009402:	f7fb ff13 	bl	800522c <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009410:	4293      	cmp	r3, r2
 8009412:	d901      	bls.n	8009418 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e0be      	b.n	8009596 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009418:	4b1c      	ldr	r3, [pc, #112]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	429a      	cmp	r2, r3
 8009428:	d1eb      	bne.n	8009402 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d010      	beq.n	8009458 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	4b14      	ldr	r3, [pc, #80]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	f003 030f 	and.w	r3, r3, #15
 8009442:	429a      	cmp	r2, r3
 8009444:	d208      	bcs.n	8009458 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009446:	4b11      	ldr	r3, [pc, #68]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	f023 020f 	bic.w	r2, r3, #15
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	490e      	ldr	r1, [pc, #56]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 8009454:	4313      	orrs	r3, r2
 8009456:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009458:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <HAL_RCC_ClockConfig+0x240>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 030f 	and.w	r3, r3, #15
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	429a      	cmp	r2, r3
 8009464:	d214      	bcs.n	8009490 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009466:	4b08      	ldr	r3, [pc, #32]	; (8009488 <HAL_RCC_ClockConfig+0x240>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f023 020f 	bic.w	r2, r3, #15
 800946e:	4906      	ldr	r1, [pc, #24]	; (8009488 <HAL_RCC_ClockConfig+0x240>)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	4313      	orrs	r3, r2
 8009474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009476:	4b04      	ldr	r3, [pc, #16]	; (8009488 <HAL_RCC_ClockConfig+0x240>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 030f 	and.w	r3, r3, #15
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d005      	beq.n	8009490 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e086      	b.n	8009596 <HAL_RCC_ClockConfig+0x34e>
 8009488:	52002000 	.word	0x52002000
 800948c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b00      	cmp	r3, #0
 800949a:	d010      	beq.n	80094be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	4b3f      	ldr	r3, [pc, #252]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d208      	bcs.n	80094be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094ac:	4b3c      	ldr	r3, [pc, #240]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	4939      	ldr	r1, [pc, #228]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0308 	and.w	r3, r3, #8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d010      	beq.n	80094ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	695a      	ldr	r2, [r3, #20]
 80094ce:	4b34      	ldr	r3, [pc, #208]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d208      	bcs.n	80094ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094da:	4b31      	ldr	r3, [pc, #196]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	492e      	ldr	r1, [pc, #184]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d010      	beq.n	800951a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699a      	ldr	r2, [r3, #24]
 80094fc:	4b28      	ldr	r3, [pc, #160]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009504:	429a      	cmp	r2, r3
 8009506:	d208      	bcs.n	800951a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009508:	4b25      	ldr	r3, [pc, #148]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	4922      	ldr	r1, [pc, #136]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 8009516:	4313      	orrs	r3, r2
 8009518:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d010      	beq.n	8009548 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	69da      	ldr	r2, [r3, #28]
 800952a:	4b1d      	ldr	r3, [pc, #116]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009532:	429a      	cmp	r2, r3
 8009534:	d208      	bcs.n	8009548 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009536:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	4917      	ldr	r1, [pc, #92]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 8009544:	4313      	orrs	r3, r2
 8009546:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009548:	f000 f834 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 800954c:	4602      	mov	r2, r0
 800954e:	4b14      	ldr	r3, [pc, #80]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	0a1b      	lsrs	r3, r3, #8
 8009554:	f003 030f 	and.w	r3, r3, #15
 8009558:	4912      	ldr	r1, [pc, #72]	; (80095a4 <HAL_RCC_ClockConfig+0x35c>)
 800955a:	5ccb      	ldrb	r3, [r1, r3]
 800955c:	f003 031f 	and.w	r3, r3, #31
 8009560:	fa22 f303 	lsr.w	r3, r2, r3
 8009564:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009566:	4b0e      	ldr	r3, [pc, #56]	; (80095a0 <HAL_RCC_ClockConfig+0x358>)
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f003 030f 	and.w	r3, r3, #15
 800956e:	4a0d      	ldr	r2, [pc, #52]	; (80095a4 <HAL_RCC_ClockConfig+0x35c>)
 8009570:	5cd3      	ldrb	r3, [r2, r3]
 8009572:	f003 031f 	and.w	r3, r3, #31
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	fa22 f303 	lsr.w	r3, r2, r3
 800957c:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <HAL_RCC_ClockConfig+0x360>)
 800957e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009580:	4a0a      	ldr	r2, [pc, #40]	; (80095ac <HAL_RCC_ClockConfig+0x364>)
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009586:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <HAL_RCC_ClockConfig+0x368>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f7fb fe04 	bl	8005198 <HAL_InitTick>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	58024400 	.word	0x58024400
 80095a4:	0800fe30 	.word	0x0800fe30
 80095a8:	240001c4 	.word	0x240001c4
 80095ac:	240001c0 	.word	0x240001c0
 80095b0:	240001d0 	.word	0x240001d0

080095b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b089      	sub	sp, #36	; 0x24
 80095b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095ba:	4bb3      	ldr	r3, [pc, #716]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095c2:	2b18      	cmp	r3, #24
 80095c4:	f200 8155 	bhi.w	8009872 <HAL_RCC_GetSysClockFreq+0x2be>
 80095c8:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80095ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ce:	bf00      	nop
 80095d0:	08009635 	.word	0x08009635
 80095d4:	08009873 	.word	0x08009873
 80095d8:	08009873 	.word	0x08009873
 80095dc:	08009873 	.word	0x08009873
 80095e0:	08009873 	.word	0x08009873
 80095e4:	08009873 	.word	0x08009873
 80095e8:	08009873 	.word	0x08009873
 80095ec:	08009873 	.word	0x08009873
 80095f0:	0800965b 	.word	0x0800965b
 80095f4:	08009873 	.word	0x08009873
 80095f8:	08009873 	.word	0x08009873
 80095fc:	08009873 	.word	0x08009873
 8009600:	08009873 	.word	0x08009873
 8009604:	08009873 	.word	0x08009873
 8009608:	08009873 	.word	0x08009873
 800960c:	08009873 	.word	0x08009873
 8009610:	08009661 	.word	0x08009661
 8009614:	08009873 	.word	0x08009873
 8009618:	08009873 	.word	0x08009873
 800961c:	08009873 	.word	0x08009873
 8009620:	08009873 	.word	0x08009873
 8009624:	08009873 	.word	0x08009873
 8009628:	08009873 	.word	0x08009873
 800962c:	08009873 	.word	0x08009873
 8009630:	08009667 	.word	0x08009667
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009634:	4b94      	ldr	r3, [pc, #592]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 0320 	and.w	r3, r3, #32
 800963c:	2b00      	cmp	r3, #0
 800963e:	d009      	beq.n	8009654 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009640:	4b91      	ldr	r3, [pc, #580]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	08db      	lsrs	r3, r3, #3
 8009646:	f003 0303 	and.w	r3, r3, #3
 800964a:	4a90      	ldr	r2, [pc, #576]	; (800988c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800964c:	fa22 f303 	lsr.w	r3, r2, r3
 8009650:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009652:	e111      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009654:	4b8d      	ldr	r3, [pc, #564]	; (800988c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009656:	61bb      	str	r3, [r7, #24]
    break;
 8009658:	e10e      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800965a:	4b8d      	ldr	r3, [pc, #564]	; (8009890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800965c:	61bb      	str	r3, [r7, #24]
    break;
 800965e:	e10b      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009660:	4b8c      	ldr	r3, [pc, #560]	; (8009894 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009662:	61bb      	str	r3, [r7, #24]
    break;
 8009664:	e108      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009666:	4b88      	ldr	r3, [pc, #544]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009670:	4b85      	ldr	r3, [pc, #532]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009674:	091b      	lsrs	r3, r3, #4
 8009676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800967a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800967c:	4b82      	ldr	r3, [pc, #520]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009686:	4b80      	ldr	r3, [pc, #512]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968a:	08db      	lsrs	r3, r3, #3
 800968c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	fb02 f303 	mul.w	r3, r2, r3
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 80e1 	beq.w	800986c <HAL_RCC_GetSysClockFreq+0x2b8>
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	f000 8083 	beq.w	80097b8 <HAL_RCC_GetSysClockFreq+0x204>
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	f200 80a1 	bhi.w	80097fc <HAL_RCC_GetSysClockFreq+0x248>
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <HAL_RCC_GetSysClockFreq+0x114>
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d056      	beq.n	8009774 <HAL_RCC_GetSysClockFreq+0x1c0>
 80096c6:	e099      	b.n	80097fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096c8:	4b6f      	ldr	r3, [pc, #444]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0320 	and.w	r3, r3, #32
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d02d      	beq.n	8009730 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096d4:	4b6c      	ldr	r3, [pc, #432]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	08db      	lsrs	r3, r3, #3
 80096da:	f003 0303 	and.w	r3, r3, #3
 80096de:	4a6b      	ldr	r2, [pc, #428]	; (800988c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80096e0:	fa22 f303 	lsr.w	r3, r2, r3
 80096e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fe:	4b62      	ldr	r3, [pc, #392]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009712:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800971a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800972e:	e087      	b.n	8009840 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	ee07 3a90 	vmov	s15, r3
 8009736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800989c <HAL_RCC_GetSysClockFreq+0x2e8>
 800973e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009742:	4b51      	ldr	r3, [pc, #324]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009752:	ed97 6a02 	vldr	s12, [r7, #8]
 8009756:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800975a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800976a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009772:	e065      	b.n	8009840 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80098a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009786:	4b40      	ldr	r3, [pc, #256]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009796:	ed97 6a02 	vldr	s12, [r7, #8]
 800979a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800979e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097b6:	e043      	b.n	8009840 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	ee07 3a90 	vmov	s15, r3
 80097be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80098a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80097c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ca:	4b2f      	ldr	r3, [pc, #188]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d2:	ee07 3a90 	vmov	s15, r3
 80097d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097da:	ed97 6a02 	vldr	s12, [r7, #8]
 80097de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009898 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097fa:	e021      	b.n	8009840 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	ee07 3a90 	vmov	s15, r3
 8009802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009806:	eddf 6a26 	vldr	s13, [pc, #152]	; 80098a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800980a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800980e:	4b1e      	ldr	r3, [pc, #120]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800981e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009822:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800982e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800983e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009840:	4b11      	ldr	r3, [pc, #68]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	0a5b      	lsrs	r3, r3, #9
 8009846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800984a:	3301      	adds	r3, #1
 800984c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	ee07 3a90 	vmov	s15, r3
 8009854:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009858:	edd7 6a07 	vldr	s13, [r7, #28]
 800985c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009864:	ee17 3a90 	vmov	r3, s15
 8009868:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800986a:	e005      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	61bb      	str	r3, [r7, #24]
    break;
 8009870:	e002      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009874:	61bb      	str	r3, [r7, #24]
    break;
 8009876:	bf00      	nop
  }

  return sysclockfreq;
 8009878:	69bb      	ldr	r3, [r7, #24]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3724      	adds	r7, #36	; 0x24
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	58024400 	.word	0x58024400
 800988c:	03d09000 	.word	0x03d09000
 8009890:	003d0900 	.word	0x003d0900
 8009894:	007a1200 	.word	0x007a1200
 8009898:	46000000 	.word	0x46000000
 800989c:	4c742400 	.word	0x4c742400
 80098a0:	4a742400 	.word	0x4a742400
 80098a4:	4af42400 	.word	0x4af42400

080098a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80098ae:	f7ff fe81 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 80098b2:	4602      	mov	r2, r0
 80098b4:	4b10      	ldr	r3, [pc, #64]	; (80098f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	0a1b      	lsrs	r3, r3, #8
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	490f      	ldr	r1, [pc, #60]	; (80098fc <HAL_RCC_GetHCLKFreq+0x54>)
 80098c0:	5ccb      	ldrb	r3, [r1, r3]
 80098c2:	f003 031f 	and.w	r3, r3, #31
 80098c6:	fa22 f303 	lsr.w	r3, r2, r3
 80098ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80098cc:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	f003 030f 	and.w	r3, r3, #15
 80098d4:	4a09      	ldr	r2, [pc, #36]	; (80098fc <HAL_RCC_GetHCLKFreq+0x54>)
 80098d6:	5cd3      	ldrb	r3, [r2, r3]
 80098d8:	f003 031f 	and.w	r3, r3, #31
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	fa22 f303 	lsr.w	r3, r2, r3
 80098e2:	4a07      	ldr	r2, [pc, #28]	; (8009900 <HAL_RCC_GetHCLKFreq+0x58>)
 80098e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098e6:	4a07      	ldr	r2, [pc, #28]	; (8009904 <HAL_RCC_GetHCLKFreq+0x5c>)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80098ec:	4b04      	ldr	r3, [pc, #16]	; (8009900 <HAL_RCC_GetHCLKFreq+0x58>)
 80098ee:	681b      	ldr	r3, [r3, #0]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	58024400 	.word	0x58024400
 80098fc:	0800fe30 	.word	0x0800fe30
 8009900:	240001c4 	.word	0x240001c4
 8009904:	240001c0 	.word	0x240001c0

08009908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800990c:	f7ff ffcc 	bl	80098a8 <HAL_RCC_GetHCLKFreq>
 8009910:	4602      	mov	r2, r0
 8009912:	4b06      	ldr	r3, [pc, #24]	; (800992c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	091b      	lsrs	r3, r3, #4
 8009918:	f003 0307 	and.w	r3, r3, #7
 800991c:	4904      	ldr	r1, [pc, #16]	; (8009930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800991e:	5ccb      	ldrb	r3, [r1, r3]
 8009920:	f003 031f 	and.w	r3, r3, #31
 8009924:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009928:	4618      	mov	r0, r3
 800992a:	bd80      	pop	{r7, pc}
 800992c:	58024400 	.word	0x58024400
 8009930:	0800fe30 	.word	0x0800fe30

08009934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009938:	f7ff ffb6 	bl	80098a8 <HAL_RCC_GetHCLKFreq>
 800993c:	4602      	mov	r2, r0
 800993e:	4b06      	ldr	r3, [pc, #24]	; (8009958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	0a1b      	lsrs	r3, r3, #8
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	4904      	ldr	r1, [pc, #16]	; (800995c <HAL_RCC_GetPCLK2Freq+0x28>)
 800994a:	5ccb      	ldrb	r3, [r1, r3]
 800994c:	f003 031f 	and.w	r3, r3, #31
 8009950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009954:	4618      	mov	r0, r3
 8009956:	bd80      	pop	{r7, pc}
 8009958:	58024400 	.word	0x58024400
 800995c:	0800fe30 	.word	0x0800fe30

08009960 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009968:	2300      	movs	r3, #0
 800996a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800996c:	2300      	movs	r3, #0
 800996e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d03f      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009980:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009984:	d02a      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009986:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800998a:	d824      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800998c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009990:	d018      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009996:	d81e      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800999c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099a0:	d007      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80099a2:	e018      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099a4:	4ba4      	ldr	r3, [pc, #656]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	4aa3      	ldr	r2, [pc, #652]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099b0:	e015      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3304      	adds	r3, #4
 80099b6:	2102      	movs	r1, #2
 80099b8:	4618      	mov	r0, r3
 80099ba:	f001 f989 	bl	800acd0 <RCCEx_PLL2_Config>
 80099be:	4603      	mov	r3, r0
 80099c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099c2:	e00c      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3324      	adds	r3, #36	; 0x24
 80099c8:	2102      	movs	r1, #2
 80099ca:	4618      	mov	r0, r3
 80099cc:	f001 fa32 	bl	800ae34 <RCCEx_PLL3_Config>
 80099d0:	4603      	mov	r3, r0
 80099d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099d4:	e003      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]
      break;
 80099da:	e000      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80099dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d109      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80099e4:	4b94      	ldr	r3, [pc, #592]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099f0:	4991      	ldr	r1, [pc, #580]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	650b      	str	r3, [r1, #80]	; 0x50
 80099f6:	e001      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d03d      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d826      	bhi.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009a10:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a16:	bf00      	nop
 8009a18:	08009a2d 	.word	0x08009a2d
 8009a1c:	08009a3b 	.word	0x08009a3b
 8009a20:	08009a4d 	.word	0x08009a4d
 8009a24:	08009a65 	.word	0x08009a65
 8009a28:	08009a65 	.word	0x08009a65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a2c:	4b82      	ldr	r3, [pc, #520]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a30:	4a81      	ldr	r2, [pc, #516]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a38:	e015      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4618      	mov	r0, r3
 8009a42:	f001 f945 	bl	800acd0 <RCCEx_PLL2_Config>
 8009a46:	4603      	mov	r3, r0
 8009a48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a4a:	e00c      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3324      	adds	r3, #36	; 0x24
 8009a50:	2100      	movs	r1, #0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f001 f9ee 	bl	800ae34 <RCCEx_PLL3_Config>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a5c:	e003      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	75fb      	strb	r3, [r7, #23]
      break;
 8009a62:	e000      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a66:	7dfb      	ldrb	r3, [r7, #23]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d109      	bne.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a6c:	4b72      	ldr	r3, [pc, #456]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a70:	f023 0207 	bic.w	r2, r3, #7
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a78:	496f      	ldr	r1, [pc, #444]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	650b      	str	r3, [r1, #80]	; 0x50
 8009a7e:	e001      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d051      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a96:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009a9a:	d036      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009a9c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009aa0:	d830      	bhi.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009aa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009aa6:	d032      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009aac:	d82a      	bhi.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009aae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ab2:	d02e      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009ab4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ab8:	d824      	bhi.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009abe:	d018      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ac4:	d81e      	bhi.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ace:	d007      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009ad0:	e018      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad2:	4b59      	ldr	r3, [pc, #356]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad6:	4a58      	ldr	r2, [pc, #352]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009adc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ade:	e019      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f001 f8f2 	bl	800acd0 <RCCEx_PLL2_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009af0:	e010      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3324      	adds	r3, #36	; 0x24
 8009af6:	2100      	movs	r1, #0
 8009af8:	4618      	mov	r0, r3
 8009afa:	f001 f99b 	bl	800ae34 <RCCEx_PLL3_Config>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b02:	e007      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	75fb      	strb	r3, [r7, #23]
      break;
 8009b08:	e004      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009b0a:	bf00      	nop
 8009b0c:	e002      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009b0e:	bf00      	nop
 8009b10:	e000      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10a      	bne.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b1a:	4b47      	ldr	r3, [pc, #284]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b28:	4943      	ldr	r1, [pc, #268]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8009b2e:	e001      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b30:	7dfb      	ldrb	r3, [r7, #23]
 8009b32:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d051      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b46:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009b4a:	d036      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009b4c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009b50:	d830      	bhi.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b56:	d032      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b5c:	d82a      	bhi.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b62:	d02e      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009b64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b68:	d824      	bhi.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b6e:	d018      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b74:	d81e      	bhi.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b7e:	d007      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009b80:	e018      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b82:	4b2d      	ldr	r3, [pc, #180]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	4a2c      	ldr	r2, [pc, #176]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b8e:	e019      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3304      	adds	r3, #4
 8009b94:	2100      	movs	r1, #0
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 f89a 	bl	800acd0 <RCCEx_PLL2_Config>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009ba0:	e010      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	3324      	adds	r3, #36	; 0x24
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f001 f943 	bl	800ae34 <RCCEx_PLL3_Config>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009bb2:	e007      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb8:	e004      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009bba:	bf00      	nop
 8009bbc:	e002      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009bbe:	bf00      	nop
 8009bc0:	e000      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10a      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009bca:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bce:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009bd8:	4917      	ldr	r1, [pc, #92]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8009bde:	e001      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d035      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bf4:	2b30      	cmp	r3, #48	; 0x30
 8009bf6:	d01c      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009bf8:	2b30      	cmp	r3, #48	; 0x30
 8009bfa:	d817      	bhi.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	d00c      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	d813      	bhi.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d019      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009c08:	2b10      	cmp	r3, #16
 8009c0a:	d10f      	bne.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c0c:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c10:	4a09      	ldr	r2, [pc, #36]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009c18:	e011      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	2102      	movs	r1, #2
 8009c20:	4618      	mov	r0, r3
 8009c22:	f001 f855 	bl	800acd0 <RCCEx_PLL2_Config>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009c2a:	e008      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c30:	e005      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009c32:	bf00      	nop
 8009c34:	e003      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009c36:	bf00      	nop
 8009c38:	58024400 	.word	0x58024400
      break;
 8009c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c3e:	7dfb      	ldrb	r3, [r7, #23]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d109      	bne.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009c44:	4ba3      	ldr	r3, [pc, #652]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c50:	49a0      	ldr	r1, [pc, #640]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c56:	e001      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d047      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c70:	d030      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c76:	d82a      	bhi.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c7c:	d02c      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009c7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c82:	d824      	bhi.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c88:	d018      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c8e:	d81e      	bhi.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d003      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c98:	d007      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009c9a:	e018      	b.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c9c:	4b8d      	ldr	r3, [pc, #564]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca0:	4a8c      	ldr	r2, [pc, #560]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ca8:	e017      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	3304      	adds	r3, #4
 8009cae:	2100      	movs	r1, #0
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 f80d 	bl	800acd0 <RCCEx_PLL2_Config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009cba:	e00e      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	3324      	adds	r3, #36	; 0x24
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f001 f8b6 	bl	800ae34 <RCCEx_PLL3_Config>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ccc:	e005      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd2:	e002      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009cd4:	bf00      	nop
 8009cd6:	e000      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cda:	7dfb      	ldrb	r3, [r7, #23]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d109      	bne.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ce0:	4b7c      	ldr	r3, [pc, #496]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cec:	4979      	ldr	r1, [pc, #484]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8009cf2:	e001      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d049      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d0c:	d02e      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d12:	d828      	bhi.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d18:	d02a      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d1e:	d822      	bhi.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d24:	d026      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d2a:	d81c      	bhi.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d30:	d010      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d36:	d816      	bhi.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d01d      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d40:	d111      	bne.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	3304      	adds	r3, #4
 8009d46:	2101      	movs	r1, #1
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 ffc1 	bl	800acd0 <RCCEx_PLL2_Config>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009d52:	e012      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3324      	adds	r3, #36	; 0x24
 8009d58:	2101      	movs	r1, #1
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 f86a 	bl	800ae34 <RCCEx_PLL3_Config>
 8009d60:	4603      	mov	r3, r0
 8009d62:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009d64:	e009      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	75fb      	strb	r3, [r7, #23]
      break;
 8009d6a:	e006      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e004      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d70:	bf00      	nop
 8009d72:	e002      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d74:	bf00      	nop
 8009d76:	e000      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d109      	bne.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d80:	4b54      	ldr	r3, [pc, #336]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d8c:	4951      	ldr	r1, [pc, #324]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	650b      	str	r3, [r1, #80]	; 0x50
 8009d92:	e001      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d04b      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dae:	d02e      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009db4:	d828      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dba:	d02a      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc0:	d822      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009dc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dc6:	d026      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009dc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dcc:	d81c      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dd2:	d010      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dd8:	d816      	bhi.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d01d      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009de2:	d111      	bne.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3304      	adds	r3, #4
 8009de8:	2101      	movs	r1, #1
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 ff70 	bl	800acd0 <RCCEx_PLL2_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009df4:	e012      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3324      	adds	r3, #36	; 0x24
 8009dfa:	2101      	movs	r1, #1
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f001 f819 	bl	800ae34 <RCCEx_PLL3_Config>
 8009e02:	4603      	mov	r3, r0
 8009e04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009e06:	e009      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e0c:	e006      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009e0e:	bf00      	nop
 8009e10:	e004      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009e12:	bf00      	nop
 8009e14:	e002      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009e16:	bf00      	nop
 8009e18:	e000      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10a      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009e22:	4b2c      	ldr	r3, [pc, #176]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e30:	4928      	ldr	r1, [pc, #160]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	658b      	str	r3, [r1, #88]	; 0x58
 8009e36:	e001      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d02f      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e50:	d00e      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e56:	d814      	bhi.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d015      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e60:	d10f      	bne.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e62:	4b1c      	ldr	r3, [pc, #112]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e66:	4a1b      	ldr	r2, [pc, #108]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009e6e:	e00c      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3304      	adds	r3, #4
 8009e74:	2101      	movs	r1, #1
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 ff2a 	bl	800acd0 <RCCEx_PLL2_Config>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009e80:	e003      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	75fb      	strb	r3, [r7, #23]
      break;
 8009e86:	e000      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e8a:	7dfb      	ldrb	r3, [r7, #23]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d109      	bne.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e90:	4b10      	ldr	r3, [pc, #64]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e9c:	490d      	ldr	r1, [pc, #52]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	650b      	str	r3, [r1, #80]	; 0x50
 8009ea2:	e001      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d034      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	d81d      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009ebc:	a201      	add	r2, pc, #4	; (adr r2, 8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec2:	bf00      	nop
 8009ec4:	08009eff 	.word	0x08009eff
 8009ec8:	08009ed9 	.word	0x08009ed9
 8009ecc:	08009ee7 	.word	0x08009ee7
 8009ed0:	08009eff 	.word	0x08009eff
 8009ed4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed8:	4bb1      	ldr	r3, [pc, #708]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	4ab0      	ldr	r2, [pc, #704]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ee4:	e00c      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	2102      	movs	r1, #2
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 feef 	bl	800acd0 <RCCEx_PLL2_Config>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ef6:	e003      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	75fb      	strb	r3, [r7, #23]
      break;
 8009efc:	e000      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d109      	bne.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009f06:	4ba6      	ldr	r3, [pc, #664]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f0a:	f023 0203 	bic.w	r2, r3, #3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f12:	49a3      	ldr	r1, [pc, #652]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f14:	4313      	orrs	r3, r2
 8009f16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f18:	e001      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
 8009f1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 8086 	beq.w	800a038 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f2c:	4b9d      	ldr	r3, [pc, #628]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a9c      	ldr	r2, [pc, #624]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f38:	f7fb f978 	bl	800522c <HAL_GetTick>
 8009f3c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f3e:	e009      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f40:	f7fb f974 	bl	800522c <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	2b64      	cmp	r3, #100	; 0x64
 8009f4c:	d902      	bls.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	75fb      	strb	r3, [r7, #23]
        break;
 8009f52:	e005      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f54:	4b93      	ldr	r3, [pc, #588]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d0ef      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d166      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f66:	4b8e      	ldr	r3, [pc, #568]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f70:	4053      	eors	r3, r2
 8009f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d013      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f7a:	4b89      	ldr	r3, [pc, #548]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f84:	4b86      	ldr	r3, [pc, #536]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f88:	4a85      	ldr	r2, [pc, #532]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f90:	4b83      	ldr	r3, [pc, #524]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f94:	4a82      	ldr	r2, [pc, #520]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f9c:	4a80      	ldr	r2, [pc, #512]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fac:	d115      	bne.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fae:	f7fb f93d 	bl	800522c <HAL_GetTick>
 8009fb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fb4:	e00b      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fb6:	f7fb f939 	bl	800522c <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d902      	bls.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	75fb      	strb	r3, [r7, #23]
            break;
 8009fcc:	e005      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fce:	4b74      	ldr	r3, [pc, #464]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd2:	f003 0302 	and.w	r3, r3, #2
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0ed      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d126      	bne.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fee:	d10d      	bne.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009ff0:	4b6b      	ldr	r3, [pc, #428]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ffe:	0919      	lsrs	r1, r3, #4
 800a000:	4b69      	ldr	r3, [pc, #420]	; (800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a002:	400b      	ands	r3, r1
 800a004:	4966      	ldr	r1, [pc, #408]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a006:	4313      	orrs	r3, r2
 800a008:	610b      	str	r3, [r1, #16]
 800a00a:	e005      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a00c:	4b64      	ldr	r3, [pc, #400]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	4a63      	ldr	r2, [pc, #396]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a012:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a016:	6113      	str	r3, [r2, #16]
 800a018:	4b61      	ldr	r3, [pc, #388]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a01a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a026:	495e      	ldr	r1, [pc, #376]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	670b      	str	r3, [r1, #112]	; 0x70
 800a02c:	e004      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	75bb      	strb	r3, [r7, #22]
 800a032:	e001      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a034:	7dfb      	ldrb	r3, [r7, #23]
 800a036:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d07e      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a048:	2b28      	cmp	r3, #40	; 0x28
 800a04a:	d867      	bhi.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a04c:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a052:	bf00      	nop
 800a054:	0800a123 	.word	0x0800a123
 800a058:	0800a11d 	.word	0x0800a11d
 800a05c:	0800a11d 	.word	0x0800a11d
 800a060:	0800a11d 	.word	0x0800a11d
 800a064:	0800a11d 	.word	0x0800a11d
 800a068:	0800a11d 	.word	0x0800a11d
 800a06c:	0800a11d 	.word	0x0800a11d
 800a070:	0800a11d 	.word	0x0800a11d
 800a074:	0800a0f9 	.word	0x0800a0f9
 800a078:	0800a11d 	.word	0x0800a11d
 800a07c:	0800a11d 	.word	0x0800a11d
 800a080:	0800a11d 	.word	0x0800a11d
 800a084:	0800a11d 	.word	0x0800a11d
 800a088:	0800a11d 	.word	0x0800a11d
 800a08c:	0800a11d 	.word	0x0800a11d
 800a090:	0800a11d 	.word	0x0800a11d
 800a094:	0800a10b 	.word	0x0800a10b
 800a098:	0800a11d 	.word	0x0800a11d
 800a09c:	0800a11d 	.word	0x0800a11d
 800a0a0:	0800a11d 	.word	0x0800a11d
 800a0a4:	0800a11d 	.word	0x0800a11d
 800a0a8:	0800a11d 	.word	0x0800a11d
 800a0ac:	0800a11d 	.word	0x0800a11d
 800a0b0:	0800a11d 	.word	0x0800a11d
 800a0b4:	0800a123 	.word	0x0800a123
 800a0b8:	0800a11d 	.word	0x0800a11d
 800a0bc:	0800a11d 	.word	0x0800a11d
 800a0c0:	0800a11d 	.word	0x0800a11d
 800a0c4:	0800a11d 	.word	0x0800a11d
 800a0c8:	0800a11d 	.word	0x0800a11d
 800a0cc:	0800a11d 	.word	0x0800a11d
 800a0d0:	0800a11d 	.word	0x0800a11d
 800a0d4:	0800a123 	.word	0x0800a123
 800a0d8:	0800a11d 	.word	0x0800a11d
 800a0dc:	0800a11d 	.word	0x0800a11d
 800a0e0:	0800a11d 	.word	0x0800a11d
 800a0e4:	0800a11d 	.word	0x0800a11d
 800a0e8:	0800a11d 	.word	0x0800a11d
 800a0ec:	0800a11d 	.word	0x0800a11d
 800a0f0:	0800a11d 	.word	0x0800a11d
 800a0f4:	0800a123 	.word	0x0800a123
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 fde6 	bl	800acd0 <RCCEx_PLL2_Config>
 800a104:	4603      	mov	r3, r0
 800a106:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a108:	e00c      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3324      	adds	r3, #36	; 0x24
 800a10e:	2101      	movs	r1, #1
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fe8f 	bl	800ae34 <RCCEx_PLL3_Config>
 800a116:	4603      	mov	r3, r0
 800a118:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a11a:	e003      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	75fb      	strb	r3, [r7, #23]
      break;
 800a120:	e000      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a122:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d109      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a12a:	4b1d      	ldr	r3, [pc, #116]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a136:	491a      	ldr	r1, [pc, #104]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a138:	4313      	orrs	r3, r2
 800a13a:	654b      	str	r3, [r1, #84]	; 0x54
 800a13c:	e001      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
 800a140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0302 	and.w	r3, r3, #2
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d03e      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a152:	2b05      	cmp	r3, #5
 800a154:	d820      	bhi.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a156:	a201      	add	r2, pc, #4	; (adr r2, 800a15c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a1ad 	.word	0x0800a1ad
 800a160:	0800a175 	.word	0x0800a175
 800a164:	0800a187 	.word	0x0800a187
 800a168:	0800a1ad 	.word	0x0800a1ad
 800a16c:	0800a1ad 	.word	0x0800a1ad
 800a170:	0800a1ad 	.word	0x0800a1ad
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3304      	adds	r3, #4
 800a178:	2101      	movs	r1, #1
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 fda8 	bl	800acd0 <RCCEx_PLL2_Config>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a184:	e013      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	3324      	adds	r3, #36	; 0x24
 800a18a:	2101      	movs	r1, #1
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 fe51 	bl	800ae34 <RCCEx_PLL3_Config>
 800a192:	4603      	mov	r3, r0
 800a194:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a196:	e00a      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	75fb      	strb	r3, [r7, #23]
      break;
 800a19c:	e007      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a19e:	bf00      	nop
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	58024800 	.word	0x58024800
 800a1a8:	00ffffcf 	.word	0x00ffffcf
      break;
 800a1ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d109      	bne.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a1b4:	4b9f      	ldr	r3, [pc, #636]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b8:	f023 0207 	bic.w	r2, r3, #7
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c0:	499c      	ldr	r1, [pc, #624]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	654b      	str	r3, [r1, #84]	; 0x54
 800a1c6:	e001      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d039      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1de:	2b05      	cmp	r3, #5
 800a1e0:	d820      	bhi.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a1e2:	a201      	add	r2, pc, #4	; (adr r2, 800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e8:	0800a22b 	.word	0x0800a22b
 800a1ec:	0800a201 	.word	0x0800a201
 800a1f0:	0800a213 	.word	0x0800a213
 800a1f4:	0800a22b 	.word	0x0800a22b
 800a1f8:	0800a22b 	.word	0x0800a22b
 800a1fc:	0800a22b 	.word	0x0800a22b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3304      	adds	r3, #4
 800a204:	2101      	movs	r1, #1
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fd62 	bl	800acd0 <RCCEx_PLL2_Config>
 800a20c:	4603      	mov	r3, r0
 800a20e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a210:	e00c      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	3324      	adds	r3, #36	; 0x24
 800a216:	2101      	movs	r1, #1
 800a218:	4618      	mov	r0, r3
 800a21a:	f000 fe0b 	bl	800ae34 <RCCEx_PLL3_Config>
 800a21e:	4603      	mov	r3, r0
 800a220:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a222:	e003      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	75fb      	strb	r3, [r7, #23]
      break;
 800a228:	e000      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a22a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10a      	bne.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a232:	4b80      	ldr	r3, [pc, #512]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a236:	f023 0207 	bic.w	r2, r3, #7
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a240:	497c      	ldr	r1, [pc, #496]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a242:	4313      	orrs	r3, r2
 800a244:	658b      	str	r3, [r1, #88]	; 0x58
 800a246:	e001      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a248:	7dfb      	ldrb	r3, [r7, #23]
 800a24a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0320 	and.w	r3, r3, #32
 800a254:	2b00      	cmp	r3, #0
 800a256:	d04b      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a262:	d02e      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a268:	d828      	bhi.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a26e:	d02a      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a274:	d822      	bhi.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a276:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a27a:	d026      	beq.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a27c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a280:	d81c      	bhi.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a286:	d010      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a28c:	d816      	bhi.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d01d      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a296:	d111      	bne.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3304      	adds	r3, #4
 800a29c:	2100      	movs	r1, #0
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fd16 	bl	800acd0 <RCCEx_PLL2_Config>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a2a8:	e012      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3324      	adds	r3, #36	; 0x24
 800a2ae:	2102      	movs	r1, #2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 fdbf 	bl	800ae34 <RCCEx_PLL3_Config>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a2ba:	e009      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c0:	e006      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2c2:	bf00      	nop
 800a2c4:	e004      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2c6:	bf00      	nop
 800a2c8:	e002      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2ca:	bf00      	nop
 800a2cc:	e000      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10a      	bne.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2d6:	4b57      	ldr	r3, [pc, #348]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e4:	4953      	ldr	r1, [pc, #332]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	654b      	str	r3, [r1, #84]	; 0x54
 800a2ea:	e001      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
 800a2ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d04b      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a302:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a306:	d02e      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a308:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a30c:	d828      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a312:	d02a      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a318:	d822      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a31a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a31e:	d026      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a324:	d81c      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a32a:	d010      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a32c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a330:	d816      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a332:	2b00      	cmp	r3, #0
 800a334:	d01d      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a33a:	d111      	bne.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	3304      	adds	r3, #4
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f000 fcc4 	bl	800acd0 <RCCEx_PLL2_Config>
 800a348:	4603      	mov	r3, r0
 800a34a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a34c:	e012      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3324      	adds	r3, #36	; 0x24
 800a352:	2102      	movs	r1, #2
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fd6d 	bl	800ae34 <RCCEx_PLL3_Config>
 800a35a:	4603      	mov	r3, r0
 800a35c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a35e:	e009      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	75fb      	strb	r3, [r7, #23]
      break;
 800a364:	e006      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a366:	bf00      	nop
 800a368:	e004      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a36a:	bf00      	nop
 800a36c:	e002      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a36e:	bf00      	nop
 800a370:	e000      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a372:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10a      	bne.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a37a:	4b2e      	ldr	r3, [pc, #184]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a388:	492a      	ldr	r1, [pc, #168]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	658b      	str	r3, [r1, #88]	; 0x58
 800a38e:	e001      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d04d      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3aa:	d02e      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a3ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3b0:	d828      	bhi.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3b6:	d02a      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a3b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3bc:	d822      	bhi.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3c2:	d026      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a3c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3c8:	d81c      	bhi.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3ce:	d010      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a3d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3d4:	d816      	bhi.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d01d      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a3da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3de:	d111      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fc72 	bl	800acd0 <RCCEx_PLL2_Config>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a3f0:	e012      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3324      	adds	r3, #36	; 0x24
 800a3f6:	2102      	movs	r1, #2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 fd1b 	bl	800ae34 <RCCEx_PLL3_Config>
 800a3fe:	4603      	mov	r3, r0
 800a400:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a402:	e009      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	75fb      	strb	r3, [r7, #23]
      break;
 800a408:	e006      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a40a:	bf00      	nop
 800a40c:	e004      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a40e:	bf00      	nop
 800a410:	e002      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a412:	bf00      	nop
 800a414:	e000      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a416:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a418:	7dfb      	ldrb	r3, [r7, #23]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10c      	bne.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a41e:	4b05      	ldr	r3, [pc, #20]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a42c:	4901      	ldr	r1, [pc, #4]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a42e:	4313      	orrs	r3, r2
 800a430:	658b      	str	r3, [r1, #88]	; 0x58
 800a432:	e003      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0308 	and.w	r3, r3, #8
 800a444:	2b00      	cmp	r3, #0
 800a446:	d018      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a44c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a450:	d10a      	bne.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	3324      	adds	r3, #36	; 0x24
 800a456:	2102      	movs	r1, #2
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 fceb 	bl	800ae34 <RCCEx_PLL3_Config>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a468:	4b8a      	ldr	r3, [pc, #552]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a46c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a474:	4987      	ldr	r1, [pc, #540]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a476:	4313      	orrs	r3, r2
 800a478:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0310 	and.w	r3, r3, #16
 800a482:	2b00      	cmp	r3, #0
 800a484:	d01a      	beq.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a490:	d10a      	bne.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	3324      	adds	r3, #36	; 0x24
 800a496:	2102      	movs	r1, #2
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 fccb 	bl	800ae34 <RCCEx_PLL3_Config>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a4a8:	4b7a      	ldr	r3, [pc, #488]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4b6:	4977      	ldr	r1, [pc, #476]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d034      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4d2:	d01d      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a4d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4d8:	d817      	bhi.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e2:	d009      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4e4:	e011      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 fbef 	bl	800acd0 <RCCEx_PLL2_Config>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a4f6:	e00c      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	3324      	adds	r3, #36	; 0x24
 800a4fc:	2102      	movs	r1, #2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 fc98 	bl	800ae34 <RCCEx_PLL3_Config>
 800a504:	4603      	mov	r3, r0
 800a506:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a508:	e003      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	75fb      	strb	r3, [r7, #23]
      break;
 800a50e:	e000      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a510:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a518:	4b5e      	ldr	r3, [pc, #376]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a51a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a51c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a526:	495b      	ldr	r1, [pc, #364]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a528:	4313      	orrs	r3, r2
 800a52a:	658b      	str	r3, [r1, #88]	; 0x58
 800a52c:	e001      	b.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
 800a530:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d033      	beq.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a544:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a548:	d01c      	beq.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a54a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a54e:	d816      	bhi.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a554:	d003      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a556:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a55a:	d007      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a55c:	e00f      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a55e:	4b4d      	ldr	r3, [pc, #308]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a562:	4a4c      	ldr	r2, [pc, #304]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a568:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a56a:	e00c      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3324      	adds	r3, #36	; 0x24
 800a570:	2101      	movs	r1, #1
 800a572:	4618      	mov	r0, r3
 800a574:	f000 fc5e 	bl	800ae34 <RCCEx_PLL3_Config>
 800a578:	4603      	mov	r3, r0
 800a57a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a57c:	e003      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	75fb      	strb	r3, [r7, #23]
      break;
 800a582:	e000      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a584:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a58c:	4b41      	ldr	r3, [pc, #260]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a59a:	493e      	ldr	r1, [pc, #248]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	654b      	str	r3, [r1, #84]	; 0x54
 800a5a0:	e001      	b.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d029      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5be:	d007      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a5c0:	e00f      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5c2:	4b34      	ldr	r3, [pc, #208]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	4a33      	ldr	r2, [pc, #204]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a5ce:	e00b      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	2102      	movs	r1, #2
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fb7a 	bl	800acd0 <RCCEx_PLL2_Config>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a5e0:	e002      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d109      	bne.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a5ee:	4b29      	ldr	r3, [pc, #164]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5fa:	4926      	ldr	r1, [pc, #152]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a600:	e001      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a602:	7dfb      	ldrb	r3, [r7, #23]
 800a604:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3324      	adds	r3, #36	; 0x24
 800a616:	2102      	movs	r1, #2
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fc0b 	bl	800ae34 <RCCEx_PLL3_Config>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d033      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a63c:	d017      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a63e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a642:	d811      	bhi.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a648:	d013      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a64a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a64e:	d80b      	bhi.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a650:	2b00      	cmp	r3, #0
 800a652:	d010      	beq.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a658:	d106      	bne.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a65a:	4b0e      	ldr	r3, [pc, #56]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65e:	4a0d      	ldr	r2, [pc, #52]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a666:	e007      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	75fb      	strb	r3, [r7, #23]
      break;
 800a66c:	e004      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a66e:	bf00      	nop
 800a670:	e002      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a672:	bf00      	nop
 800a674:	e000      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a676:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a678:	7dfb      	ldrb	r3, [r7, #23]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10c      	bne.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a682:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a68a:	4902      	ldr	r1, [pc, #8]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	654b      	str	r3, [r1, #84]	; 0x54
 800a690:	e004      	b.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a692:	bf00      	nop
 800a694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d008      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6a8:	4b29      	ldr	r3, [pc, #164]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b4:	4926      	ldr	r1, [pc, #152]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d008      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a6c6:	4b22      	ldr	r3, [pc, #136]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6d2:	491f      	ldr	r1, [pc, #124]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00d      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6e4:	4b1a      	ldr	r3, [pc, #104]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	4a19      	ldr	r2, [pc, #100]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6ee:	6113      	str	r3, [r2, #16]
 800a6f0:	4b17      	ldr	r3, [pc, #92]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6f2:	691a      	ldr	r2, [r3, #16]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6fa:	4915      	ldr	r1, [pc, #84]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	da08      	bge.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a708:	4b11      	ldr	r3, [pc, #68]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a70a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a70c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a714:	490e      	ldr	r1, [pc, #56]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a716:	4313      	orrs	r3, r2
 800a718:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a722:	2b00      	cmp	r3, #0
 800a724:	d009      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a726:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a72a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a734:	4906      	ldr	r1, [pc, #24]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a736:	4313      	orrs	r3, r2
 800a738:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a73a:	7dbb      	ldrb	r3, [r7, #22]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	e000      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	58024400 	.word	0x58024400

0800a754 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a758:	f7ff f8a6 	bl	80098a8 <HAL_RCC_GetHCLKFreq>
 800a75c:	4602      	mov	r2, r0
 800a75e:	4b06      	ldr	r3, [pc, #24]	; (800a778 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	091b      	lsrs	r3, r3, #4
 800a764:	f003 0307 	and.w	r3, r3, #7
 800a768:	4904      	ldr	r1, [pc, #16]	; (800a77c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a76a:	5ccb      	ldrb	r3, [r1, r3]
 800a76c:	f003 031f 	and.w	r3, r3, #31
 800a770:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a774:	4618      	mov	r0, r3
 800a776:	bd80      	pop	{r7, pc}
 800a778:	58024400 	.word	0x58024400
 800a77c:	0800fe30 	.word	0x0800fe30

0800a780 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a780:	b480      	push	{r7}
 800a782:	b089      	sub	sp, #36	; 0x24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a788:	4ba1      	ldr	r3, [pc, #644]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78c:	f003 0303 	and.w	r3, r3, #3
 800a790:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a792:	4b9f      	ldr	r3, [pc, #636]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a796:	0b1b      	lsrs	r3, r3, #12
 800a798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a79c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a79e:	4b9c      	ldr	r3, [pc, #624]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a2:	091b      	lsrs	r3, r3, #4
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a7aa:	4b99      	ldr	r3, [pc, #612]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ae:	08db      	lsrs	r3, r3, #3
 800a7b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	fb02 f303 	mul.w	r3, r2, r3
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 8111 	beq.w	800a9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	f000 8083 	beq.w	800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	f200 80a1 	bhi.w	800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d056      	beq.n	800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a7ea:	e099      	b.n	800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7ec:	4b88      	ldr	r3, [pc, #544]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0320 	and.w	r3, r3, #32
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d02d      	beq.n	800a854 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7f8:	4b85      	ldr	r3, [pc, #532]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	08db      	lsrs	r3, r3, #3
 800a7fe:	f003 0303 	and.w	r3, r3, #3
 800a802:	4a84      	ldr	r2, [pc, #528]	; (800aa14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a804:	fa22 f303 	lsr.w	r3, r2, r3
 800a808:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	ee07 3a90 	vmov	s15, r3
 800a810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	ee07 3a90 	vmov	s15, r3
 800a81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a822:	4b7b      	ldr	r3, [pc, #492]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a82a:	ee07 3a90 	vmov	s15, r3
 800a82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a832:	ed97 6a03 	vldr	s12, [r7, #12]
 800a836:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a84e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a852:	e087      	b.n	800a964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a866:	4b6a      	ldr	r3, [pc, #424]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a86e:	ee07 3a90 	vmov	s15, r3
 800a872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a876:	ed97 6a03 	vldr	s12, [r7, #12]
 800a87a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a892:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a896:	e065      	b.n	800a964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8aa:	4b59      	ldr	r3, [pc, #356]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8be:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8da:	e043      	b.n	800a964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	ee07 3a90 	vmov	s15, r3
 800a8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aa24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ee:	4b48      	ldr	r3, [pc, #288]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a902:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a91a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a91e:	e021      	b.n	800a964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	ee07 3a90 	vmov	s15, r3
 800a926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a932:	4b37      	ldr	r3, [pc, #220]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a942:	ed97 6a03 	vldr	s12, [r7, #12]
 800a946:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a962:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a964:	4b2a      	ldr	r3, [pc, #168]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a968:	0a5b      	lsrs	r3, r3, #9
 800a96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a96e:	ee07 3a90 	vmov	s15, r3
 800a972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a97a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a97e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a98a:	ee17 2a90 	vmov	r2, s15
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a992:	4b1f      	ldr	r3, [pc, #124]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a996:	0c1b      	lsrs	r3, r3, #16
 800a998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a99c:	ee07 3a90 	vmov	s15, r3
 800a9a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9b8:	ee17 2a90 	vmov	r2, s15
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a9c0:	4b13      	ldr	r3, [pc, #76]	; (800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	0e1b      	lsrs	r3, r3, #24
 800a9c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9da:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9e6:	ee17 2a90 	vmov	r2, s15
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a9ee:	e008      	b.n	800aa02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	609a      	str	r2, [r3, #8]
}
 800aa02:	bf00      	nop
 800aa04:	3724      	adds	r7, #36	; 0x24
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	58024400 	.word	0x58024400
 800aa14:	03d09000 	.word	0x03d09000
 800aa18:	46000000 	.word	0x46000000
 800aa1c:	4c742400 	.word	0x4c742400
 800aa20:	4a742400 	.word	0x4a742400
 800aa24:	4af42400 	.word	0x4af42400

0800aa28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b089      	sub	sp, #36	; 0x24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa30:	4ba1      	ldr	r3, [pc, #644]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa34:	f003 0303 	and.w	r3, r3, #3
 800aa38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800aa3a:	4b9f      	ldr	r3, [pc, #636]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3e:	0d1b      	lsrs	r3, r3, #20
 800aa40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aa46:	4b9c      	ldr	r3, [pc, #624]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4a:	0a1b      	lsrs	r3, r3, #8
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800aa52:	4b99      	ldr	r3, [pc, #612]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa56:	08db      	lsrs	r3, r3, #3
 800aa58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	fb02 f303 	mul.w	r3, r2, r3
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 8111 	beq.w	800ac98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	f000 8083 	beq.w	800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	f200 80a1 	bhi.w	800abc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d003      	beq.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d056      	beq.n	800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa92:	e099      	b.n	800abc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa94:	4b88      	ldr	r3, [pc, #544]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0320 	and.w	r3, r3, #32
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d02d      	beq.n	800aafc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aaa0:	4b85      	ldr	r3, [pc, #532]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	08db      	lsrs	r3, r3, #3
 800aaa6:	f003 0303 	and.w	r3, r3, #3
 800aaaa:	4a84      	ldr	r2, [pc, #528]	; (800acbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	ee07 3a90 	vmov	s15, r3
 800aab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	ee07 3a90 	vmov	s15, r3
 800aac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaca:	4b7b      	ldr	r3, [pc, #492]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aada:	ed97 6a03 	vldr	s12, [r7, #12]
 800aade:	eddf 5a78 	vldr	s11, [pc, #480]	; 800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aafa:	e087      	b.n	800ac0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ab0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0e:	4b6a      	ldr	r3, [pc, #424]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab22:	eddf 5a67 	vldr	s11, [pc, #412]	; 800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab3e:	e065      	b.n	800ac0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab52:	4b59      	ldr	r3, [pc, #356]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab66:	eddf 5a56 	vldr	s11, [pc, #344]	; 800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab82:	e043      	b.n	800ac0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800accc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab96:	4b48      	ldr	r3, [pc, #288]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9e:	ee07 3a90 	vmov	s15, r3
 800aba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abc6:	e021      	b.n	800ac0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800abd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abda:	4b37      	ldr	r3, [pc, #220]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abea:	ed97 6a03 	vldr	s12, [r7, #12]
 800abee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ac0c:	4b2a      	ldr	r3, [pc, #168]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac10:	0a5b      	lsrs	r3, r3, #9
 800ac12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac26:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac32:	ee17 2a90 	vmov	r2, s15
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ac3a:	4b1f      	ldr	r3, [pc, #124]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3e:	0c1b      	lsrs	r3, r3, #16
 800ac40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac44:	ee07 3a90 	vmov	s15, r3
 800ac48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac60:	ee17 2a90 	vmov	r2, s15
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ac68:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6c:	0e1b      	lsrs	r3, r3, #24
 800ac6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac72:	ee07 3a90 	vmov	s15, r3
 800ac76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac82:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac8e:	ee17 2a90 	vmov	r2, s15
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac96:	e008      	b.n	800acaa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	609a      	str	r2, [r3, #8]
}
 800acaa:	bf00      	nop
 800acac:	3724      	adds	r7, #36	; 0x24
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	58024400 	.word	0x58024400
 800acbc:	03d09000 	.word	0x03d09000
 800acc0:	46000000 	.word	0x46000000
 800acc4:	4c742400 	.word	0x4c742400
 800acc8:	4a742400 	.word	0x4a742400
 800accc:	4af42400 	.word	0x4af42400

0800acd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800acde:	4b53      	ldr	r3, [pc, #332]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ace0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace2:	f003 0303 	and.w	r3, r3, #3
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d101      	bne.n	800acee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e099      	b.n	800ae22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800acee:	4b4f      	ldr	r3, [pc, #316]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a4e      	ldr	r2, [pc, #312]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800acf4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800acf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acfa:	f7fa fa97 	bl	800522c <HAL_GetTick>
 800acfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad00:	e008      	b.n	800ad14 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ad02:	f7fa fa93 	bl	800522c <HAL_GetTick>
 800ad06:	4602      	mov	r2, r0
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d901      	bls.n	800ad14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e086      	b.n	800ae22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad14:	4b45      	ldr	r3, [pc, #276]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1f0      	bne.n	800ad02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ad20:	4b42      	ldr	r3, [pc, #264]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	031b      	lsls	r3, r3, #12
 800ad2e:	493f      	ldr	r1, [pc, #252]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad30:	4313      	orrs	r3, r2
 800ad32:	628b      	str	r3, [r1, #40]	; 0x28
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	3b01      	subs	r3, #1
 800ad44:	025b      	lsls	r3, r3, #9
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	431a      	orrs	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	041b      	lsls	r3, r3, #16
 800ad52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad56:	431a      	orrs	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	061b      	lsls	r3, r3, #24
 800ad60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad64:	4931      	ldr	r1, [pc, #196]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad66:	4313      	orrs	r3, r2
 800ad68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad6a:	4b30      	ldr	r3, [pc, #192]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	492d      	ldr	r1, [pc, #180]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad7c:	4b2b      	ldr	r3, [pc, #172]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	f023 0220 	bic.w	r2, r3, #32
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	4928      	ldr	r1, [pc, #160]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad8e:	4b27      	ldr	r3, [pc, #156]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad92:	4a26      	ldr	r2, [pc, #152]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad94:	f023 0310 	bic.w	r3, r3, #16
 800ad98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad9a:	4b24      	ldr	r3, [pc, #144]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ad9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad9e:	4b24      	ldr	r3, [pc, #144]	; (800ae30 <RCCEx_PLL2_Config+0x160>)
 800ada0:	4013      	ands	r3, r2
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	69d2      	ldr	r2, [r2, #28]
 800ada6:	00d2      	lsls	r2, r2, #3
 800ada8:	4920      	ldr	r1, [pc, #128]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800adaa:	4313      	orrs	r3, r2
 800adac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800adae:	4b1f      	ldr	r3, [pc, #124]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800adb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb2:	4a1e      	ldr	r2, [pc, #120]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800adb4:	f043 0310 	orr.w	r3, r3, #16
 800adb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d106      	bne.n	800adce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800adc0:	4b1a      	ldr	r3, [pc, #104]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	4a19      	ldr	r2, [pc, #100]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800adc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800adcc:	e00f      	b.n	800adee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d106      	bne.n	800ade2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800add4:	4b15      	ldr	r3, [pc, #84]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800add6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add8:	4a14      	ldr	r2, [pc, #80]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800adda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adde:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ade0:	e005      	b.n	800adee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ade2:	4b12      	ldr	r3, [pc, #72]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ade4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade6:	4a11      	ldr	r2, [pc, #68]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ade8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800adec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800adee:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a0e      	ldr	r2, [pc, #56]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800adf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800adf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adfa:	f7fa fa17 	bl	800522c <HAL_GetTick>
 800adfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae00:	e008      	b.n	800ae14 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ae02:	f7fa fa13 	bl	800522c <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d901      	bls.n	800ae14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ae10:	2303      	movs	r3, #3
 800ae12:	e006      	b.n	800ae22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae14:	4b05      	ldr	r3, [pc, #20]	; (800ae2c <RCCEx_PLL2_Config+0x15c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d0f0      	beq.n	800ae02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	58024400 	.word	0x58024400
 800ae30:	ffff0007 	.word	0xffff0007

0800ae34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae42:	4b53      	ldr	r3, [pc, #332]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800ae44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae46:	f003 0303 	and.w	r3, r3, #3
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d101      	bne.n	800ae52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e099      	b.n	800af86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ae52:	4b4f      	ldr	r3, [pc, #316]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a4e      	ldr	r2, [pc, #312]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800ae58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae5e:	f7fa f9e5 	bl	800522c <HAL_GetTick>
 800ae62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae64:	e008      	b.n	800ae78 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ae66:	f7fa f9e1 	bl	800522c <HAL_GetTick>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d901      	bls.n	800ae78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e086      	b.n	800af86 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae78:	4b45      	ldr	r3, [pc, #276]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1f0      	bne.n	800ae66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae84:	4b42      	ldr	r3, [pc, #264]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800ae86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	051b      	lsls	r3, r3, #20
 800ae92:	493f      	ldr	r1, [pc, #252]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800ae94:	4313      	orrs	r3, r2
 800ae96:	628b      	str	r3, [r1, #40]	; 0x28
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	025b      	lsls	r3, r3, #9
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	431a      	orrs	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	041b      	lsls	r3, r3, #16
 800aeb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aeba:	431a      	orrs	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	061b      	lsls	r3, r3, #24
 800aec4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aec8:	4931      	ldr	r1, [pc, #196]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aece:	4b30      	ldr	r3, [pc, #192]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800aed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	492d      	ldr	r1, [pc, #180]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800aedc:	4313      	orrs	r3, r2
 800aede:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aee0:	4b2b      	ldr	r3, [pc, #172]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800aee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	4928      	ldr	r1, [pc, #160]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aef2:	4b27      	ldr	r3, [pc, #156]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800aef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef6:	4a26      	ldr	r2, [pc, #152]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800aef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aefc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aefe:	4b24      	ldr	r3, [pc, #144]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af02:	4b24      	ldr	r3, [pc, #144]	; (800af94 <RCCEx_PLL3_Config+0x160>)
 800af04:	4013      	ands	r3, r2
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	69d2      	ldr	r2, [r2, #28]
 800af0a:	00d2      	lsls	r2, r2, #3
 800af0c:	4920      	ldr	r1, [pc, #128]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af0e:	4313      	orrs	r3, r2
 800af10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800af12:	4b1f      	ldr	r3, [pc, #124]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af16:	4a1e      	ldr	r2, [pc, #120]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d106      	bne.n	800af32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800af24:	4b1a      	ldr	r3, [pc, #104]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	4a19      	ldr	r2, [pc, #100]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af30:	e00f      	b.n	800af52 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d106      	bne.n	800af46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800af38:	4b15      	ldr	r3, [pc, #84]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4a14      	ldr	r2, [pc, #80]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800af42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af44:	e005      	b.n	800af52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800af46:	4b12      	ldr	r3, [pc, #72]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4a:	4a11      	ldr	r2, [pc, #68]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800af52:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a0e      	ldr	r2, [pc, #56]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af5e:	f7fa f965 	bl	800522c <HAL_GetTick>
 800af62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af64:	e008      	b.n	800af78 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800af66:	f7fa f961 	bl	800522c <HAL_GetTick>
 800af6a:	4602      	mov	r2, r0
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	2b02      	cmp	r3, #2
 800af72:	d901      	bls.n	800af78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af74:	2303      	movs	r3, #3
 800af76:	e006      	b.n	800af86 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af78:	4b05      	ldr	r3, [pc, #20]	; (800af90 <RCCEx_PLL3_Config+0x15c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af80:	2b00      	cmp	r3, #0
 800af82:	d0f0      	beq.n	800af66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af84:	7bfb      	ldrb	r3, [r7, #15]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	58024400 	.word	0x58024400
 800af94:	ffff0007 	.word	0xffff0007

0800af98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e049      	b.n	800b03e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7f9 fa2c 	bl	800441c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3304      	adds	r3, #4
 800afd4:	4619      	mov	r1, r3
 800afd6:	4610      	mov	r0, r2
 800afd8:	f000 feb8 	bl	800bd4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d001      	beq.n	800b060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e05e      	b.n	800b11e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2202      	movs	r2, #2
 800b064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68da      	ldr	r2, [r3, #12]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0201 	orr.w	r2, r2, #1
 800b076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a2b      	ldr	r2, [pc, #172]	; (800b12c <HAL_TIM_Base_Start_IT+0xe4>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d02c      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x94>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b08a:	d027      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x94>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a27      	ldr	r2, [pc, #156]	; (800b130 <HAL_TIM_Base_Start_IT+0xe8>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d022      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x94>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a26      	ldr	r2, [pc, #152]	; (800b134 <HAL_TIM_Base_Start_IT+0xec>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d01d      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x94>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a24      	ldr	r2, [pc, #144]	; (800b138 <HAL_TIM_Base_Start_IT+0xf0>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d018      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x94>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a23      	ldr	r2, [pc, #140]	; (800b13c <HAL_TIM_Base_Start_IT+0xf4>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d013      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x94>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a21      	ldr	r2, [pc, #132]	; (800b140 <HAL_TIM_Base_Start_IT+0xf8>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d00e      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x94>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a20      	ldr	r2, [pc, #128]	; (800b144 <HAL_TIM_Base_Start_IT+0xfc>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d009      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x94>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a1e      	ldr	r2, [pc, #120]	; (800b148 <HAL_TIM_Base_Start_IT+0x100>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d004      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x94>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a1d      	ldr	r2, [pc, #116]	; (800b14c <HAL_TIM_Base_Start_IT+0x104>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d115      	bne.n	800b108 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689a      	ldr	r2, [r3, #8]
 800b0e2:	4b1b      	ldr	r3, [pc, #108]	; (800b150 <HAL_TIM_Base_Start_IT+0x108>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2b06      	cmp	r3, #6
 800b0ec:	d015      	beq.n	800b11a <HAL_TIM_Base_Start_IT+0xd2>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f4:	d011      	beq.n	800b11a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f042 0201 	orr.w	r2, r2, #1
 800b104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b106:	e008      	b.n	800b11a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f042 0201 	orr.w	r2, r2, #1
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	e000      	b.n	800b11c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b11a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	40010000 	.word	0x40010000
 800b130:	40000400 	.word	0x40000400
 800b134:	40000800 	.word	0x40000800
 800b138:	40000c00 	.word	0x40000c00
 800b13c:	40010400 	.word	0x40010400
 800b140:	40001800 	.word	0x40001800
 800b144:	40014000 	.word	0x40014000
 800b148:	4000e000 	.word	0x4000e000
 800b14c:	4000e400 	.word	0x4000e400
 800b150:	00010007 	.word	0x00010007

0800b154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	e049      	b.n	800b1fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d106      	bne.n	800b180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7f9 fa86 	bl	800468c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2202      	movs	r2, #2
 800b184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3304      	adds	r3, #4
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f000 fdda 	bl	800bd4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
	...

0800b204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d109      	bne.n	800b228 <HAL_TIM_PWM_Start+0x24>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	bf14      	ite	ne
 800b220:	2301      	movne	r3, #1
 800b222:	2300      	moveq	r3, #0
 800b224:	b2db      	uxtb	r3, r3
 800b226:	e03c      	b.n	800b2a2 <HAL_TIM_PWM_Start+0x9e>
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2b04      	cmp	r3, #4
 800b22c:	d109      	bne.n	800b242 <HAL_TIM_PWM_Start+0x3e>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b234:	b2db      	uxtb	r3, r3
 800b236:	2b01      	cmp	r3, #1
 800b238:	bf14      	ite	ne
 800b23a:	2301      	movne	r3, #1
 800b23c:	2300      	moveq	r3, #0
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	e02f      	b.n	800b2a2 <HAL_TIM_PWM_Start+0x9e>
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b08      	cmp	r3, #8
 800b246:	d109      	bne.n	800b25c <HAL_TIM_PWM_Start+0x58>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b01      	cmp	r3, #1
 800b252:	bf14      	ite	ne
 800b254:	2301      	movne	r3, #1
 800b256:	2300      	moveq	r3, #0
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	e022      	b.n	800b2a2 <HAL_TIM_PWM_Start+0x9e>
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	2b0c      	cmp	r3, #12
 800b260:	d109      	bne.n	800b276 <HAL_TIM_PWM_Start+0x72>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	bf14      	ite	ne
 800b26e:	2301      	movne	r3, #1
 800b270:	2300      	moveq	r3, #0
 800b272:	b2db      	uxtb	r3, r3
 800b274:	e015      	b.n	800b2a2 <HAL_TIM_PWM_Start+0x9e>
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b10      	cmp	r3, #16
 800b27a:	d109      	bne.n	800b290 <HAL_TIM_PWM_Start+0x8c>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b282:	b2db      	uxtb	r3, r3
 800b284:	2b01      	cmp	r3, #1
 800b286:	bf14      	ite	ne
 800b288:	2301      	movne	r3, #1
 800b28a:	2300      	moveq	r3, #0
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	e008      	b.n	800b2a2 <HAL_TIM_PWM_Start+0x9e>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b01      	cmp	r3, #1
 800b29a:	bf14      	ite	ne
 800b29c:	2301      	movne	r3, #1
 800b29e:	2300      	moveq	r3, #0
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e0ab      	b.n	800b402 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d104      	bne.n	800b2ba <HAL_TIM_PWM_Start+0xb6>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2b8:	e023      	b.n	800b302 <HAL_TIM_PWM_Start+0xfe>
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	d104      	bne.n	800b2ca <HAL_TIM_PWM_Start+0xc6>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2c8:	e01b      	b.n	800b302 <HAL_TIM_PWM_Start+0xfe>
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b08      	cmp	r3, #8
 800b2ce:	d104      	bne.n	800b2da <HAL_TIM_PWM_Start+0xd6>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2d8:	e013      	b.n	800b302 <HAL_TIM_PWM_Start+0xfe>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b0c      	cmp	r3, #12
 800b2de:	d104      	bne.n	800b2ea <HAL_TIM_PWM_Start+0xe6>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2e8:	e00b      	b.n	800b302 <HAL_TIM_PWM_Start+0xfe>
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	2b10      	cmp	r3, #16
 800b2ee:	d104      	bne.n	800b2fa <HAL_TIM_PWM_Start+0xf6>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2f8:	e003      	b.n	800b302 <HAL_TIM_PWM_Start+0xfe>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2201      	movs	r2, #1
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f001 f938 	bl	800c580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a3d      	ldr	r2, [pc, #244]	; (800b40c <HAL_TIM_PWM_Start+0x208>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d013      	beq.n	800b342 <HAL_TIM_PWM_Start+0x13e>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a3c      	ldr	r2, [pc, #240]	; (800b410 <HAL_TIM_PWM_Start+0x20c>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d00e      	beq.n	800b342 <HAL_TIM_PWM_Start+0x13e>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a3a      	ldr	r2, [pc, #232]	; (800b414 <HAL_TIM_PWM_Start+0x210>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d009      	beq.n	800b342 <HAL_TIM_PWM_Start+0x13e>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a39      	ldr	r2, [pc, #228]	; (800b418 <HAL_TIM_PWM_Start+0x214>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d004      	beq.n	800b342 <HAL_TIM_PWM_Start+0x13e>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a37      	ldr	r2, [pc, #220]	; (800b41c <HAL_TIM_PWM_Start+0x218>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d101      	bne.n	800b346 <HAL_TIM_PWM_Start+0x142>
 800b342:	2301      	movs	r3, #1
 800b344:	e000      	b.n	800b348 <HAL_TIM_PWM_Start+0x144>
 800b346:	2300      	movs	r3, #0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d007      	beq.n	800b35c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b35a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a2a      	ldr	r2, [pc, #168]	; (800b40c <HAL_TIM_PWM_Start+0x208>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d02c      	beq.n	800b3c0 <HAL_TIM_PWM_Start+0x1bc>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b36e:	d027      	beq.n	800b3c0 <HAL_TIM_PWM_Start+0x1bc>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a2a      	ldr	r2, [pc, #168]	; (800b420 <HAL_TIM_PWM_Start+0x21c>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d022      	beq.n	800b3c0 <HAL_TIM_PWM_Start+0x1bc>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a29      	ldr	r2, [pc, #164]	; (800b424 <HAL_TIM_PWM_Start+0x220>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d01d      	beq.n	800b3c0 <HAL_TIM_PWM_Start+0x1bc>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a27      	ldr	r2, [pc, #156]	; (800b428 <HAL_TIM_PWM_Start+0x224>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d018      	beq.n	800b3c0 <HAL_TIM_PWM_Start+0x1bc>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a1f      	ldr	r2, [pc, #124]	; (800b410 <HAL_TIM_PWM_Start+0x20c>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d013      	beq.n	800b3c0 <HAL_TIM_PWM_Start+0x1bc>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a23      	ldr	r2, [pc, #140]	; (800b42c <HAL_TIM_PWM_Start+0x228>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d00e      	beq.n	800b3c0 <HAL_TIM_PWM_Start+0x1bc>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a1b      	ldr	r2, [pc, #108]	; (800b414 <HAL_TIM_PWM_Start+0x210>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d009      	beq.n	800b3c0 <HAL_TIM_PWM_Start+0x1bc>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a1f      	ldr	r2, [pc, #124]	; (800b430 <HAL_TIM_PWM_Start+0x22c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d004      	beq.n	800b3c0 <HAL_TIM_PWM_Start+0x1bc>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a1e      	ldr	r2, [pc, #120]	; (800b434 <HAL_TIM_PWM_Start+0x230>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d115      	bne.n	800b3ec <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	689a      	ldr	r2, [r3, #8]
 800b3c6:	4b1c      	ldr	r3, [pc, #112]	; (800b438 <HAL_TIM_PWM_Start+0x234>)
 800b3c8:	4013      	ands	r3, r2
 800b3ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b06      	cmp	r3, #6
 800b3d0:	d015      	beq.n	800b3fe <HAL_TIM_PWM_Start+0x1fa>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3d8:	d011      	beq.n	800b3fe <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f042 0201 	orr.w	r2, r2, #1
 800b3e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ea:	e008      	b.n	800b3fe <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f042 0201 	orr.w	r2, r2, #1
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	e000      	b.n	800b400 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	40010000 	.word	0x40010000
 800b410:	40010400 	.word	0x40010400
 800b414:	40014000 	.word	0x40014000
 800b418:	40014400 	.word	0x40014400
 800b41c:	40014800 	.word	0x40014800
 800b420:	40000400 	.word	0x40000400
 800b424:	40000800 	.word	0x40000800
 800b428:	40000c00 	.word	0x40000c00
 800b42c:	40001800 	.word	0x40001800
 800b430:	4000e000 	.word	0x4000e000
 800b434:	4000e400 	.word	0x4000e400
 800b438:	00010007 	.word	0x00010007

0800b43c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d101      	bne.n	800b450 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e08f      	b.n	800b570 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b456:	b2db      	uxtb	r3, r3
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d106      	bne.n	800b46a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7f9 f81f 	bl	80044a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2202      	movs	r2, #2
 800b46e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6899      	ldr	r1, [r3, #8]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	4b3e      	ldr	r3, [pc, #248]	; (800b578 <HAL_TIM_Encoder_Init+0x13c>)
 800b47e:	400b      	ands	r3, r1
 800b480:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	3304      	adds	r3, #4
 800b48a:	4619      	mov	r1, r3
 800b48c:	4610      	mov	r0, r2
 800b48e:	f000 fc5d 	bl	800bd4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	6a1b      	ldr	r3, [r3, #32]
 800b4a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	4b31      	ldr	r3, [pc, #196]	; (800b57c <HAL_TIM_Encoder_Init+0x140>)
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	689a      	ldr	r2, [r3, #8]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	021b      	lsls	r3, r3, #8
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	4b2b      	ldr	r3, [pc, #172]	; (800b580 <HAL_TIM_Encoder_Init+0x144>)
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	4b2a      	ldr	r3, [pc, #168]	; (800b584 <HAL_TIM_Encoder_Init+0x148>)
 800b4da:	4013      	ands	r3, r2
 800b4dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68da      	ldr	r2, [r3, #12]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	69db      	ldr	r3, [r3, #28]
 800b4e6:	021b      	lsls	r3, r3, #8
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	011a      	lsls	r2, r3, #4
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	031b      	lsls	r3, r3, #12
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	4313      	orrs	r3, r2
 800b502:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b50a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b512:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	011b      	lsls	r3, r3, #4
 800b51e:	4313      	orrs	r3, r2
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	4313      	orrs	r3, r2
 800b524:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	693a      	ldr	r2, [r7, #16]
 800b534:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	fffebff8 	.word	0xfffebff8
 800b57c:	fffffcfc 	.word	0xfffffcfc
 800b580:	fffff3f3 	.word	0xfffff3f3
 800b584:	ffff0f0f 	.word	0xffff0f0f

0800b588 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b598:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b5a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d110      	bne.n	800b5da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d102      	bne.n	800b5c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b5be:	7b7b      	ldrb	r3, [r7, #13]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d001      	beq.n	800b5c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e069      	b.n	800b69c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2202      	movs	r2, #2
 800b5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5d8:	e031      	b.n	800b63e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b04      	cmp	r3, #4
 800b5de:	d110      	bne.n	800b602 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5e0:	7bbb      	ldrb	r3, [r7, #14]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d102      	bne.n	800b5ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b5e6:	7b3b      	ldrb	r3, [r7, #12]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d001      	beq.n	800b5f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e055      	b.n	800b69c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b600:	e01d      	b.n	800b63e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b602:	7bfb      	ldrb	r3, [r7, #15]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d108      	bne.n	800b61a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b608:	7bbb      	ldrb	r3, [r7, #14]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d105      	bne.n	800b61a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b60e:	7b7b      	ldrb	r3, [r7, #13]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d102      	bne.n	800b61a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b614:	7b3b      	ldrb	r3, [r7, #12]
 800b616:	2b01      	cmp	r3, #1
 800b618:	d001      	beq.n	800b61e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e03e      	b.n	800b69c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2202      	movs	r2, #2
 800b622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2202      	movs	r2, #2
 800b62a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2202      	movs	r2, #2
 800b632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2202      	movs	r2, #2
 800b63a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d003      	beq.n	800b64c <HAL_TIM_Encoder_Start+0xc4>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2b04      	cmp	r3, #4
 800b648:	d008      	beq.n	800b65c <HAL_TIM_Encoder_Start+0xd4>
 800b64a:	e00f      	b.n	800b66c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2201      	movs	r2, #1
 800b652:	2100      	movs	r1, #0
 800b654:	4618      	mov	r0, r3
 800b656:	f000 ff93 	bl	800c580 <TIM_CCxChannelCmd>
      break;
 800b65a:	e016      	b.n	800b68a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2201      	movs	r2, #1
 800b662:	2104      	movs	r1, #4
 800b664:	4618      	mov	r0, r3
 800b666:	f000 ff8b 	bl	800c580 <TIM_CCxChannelCmd>
      break;
 800b66a:	e00e      	b.n	800b68a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2201      	movs	r2, #1
 800b672:	2100      	movs	r1, #0
 800b674:	4618      	mov	r0, r3
 800b676:	f000 ff83 	bl	800c580 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2201      	movs	r2, #1
 800b680:	2104      	movs	r1, #4
 800b682:	4618      	mov	r0, r3
 800b684:	f000 ff7c 	bl	800c580 <TIM_CCxChannelCmd>
      break;
 800b688:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f042 0201 	orr.w	r2, r2, #1
 800b698:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	f003 0302 	and.w	r3, r3, #2
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d122      	bne.n	800b700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f003 0302 	and.w	r3, r3, #2
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d11b      	bne.n	800b700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f06f 0202 	mvn.w	r2, #2
 800b6d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	f003 0303 	and.w	r3, r3, #3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fb12 	bl	800bd10 <HAL_TIM_IC_CaptureCallback>
 800b6ec:	e005      	b.n	800b6fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fb04 	bl	800bcfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fb15 	bl	800bd24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	f003 0304 	and.w	r3, r3, #4
 800b70a:	2b04      	cmp	r3, #4
 800b70c:	d122      	bne.n	800b754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	f003 0304 	and.w	r3, r3, #4
 800b718:	2b04      	cmp	r3, #4
 800b71a:	d11b      	bne.n	800b754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f06f 0204 	mvn.w	r2, #4
 800b724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2202      	movs	r2, #2
 800b72a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	699b      	ldr	r3, [r3, #24]
 800b732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b736:	2b00      	cmp	r3, #0
 800b738:	d003      	beq.n	800b742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fae8 	bl	800bd10 <HAL_TIM_IC_CaptureCallback>
 800b740:	e005      	b.n	800b74e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fada 	bl	800bcfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 faeb 	bl	800bd24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	f003 0308 	and.w	r3, r3, #8
 800b75e:	2b08      	cmp	r3, #8
 800b760:	d122      	bne.n	800b7a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	f003 0308 	and.w	r3, r3, #8
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	d11b      	bne.n	800b7a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f06f 0208 	mvn.w	r2, #8
 800b778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2204      	movs	r2, #4
 800b77e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	69db      	ldr	r3, [r3, #28]
 800b786:	f003 0303 	and.w	r3, r3, #3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d003      	beq.n	800b796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fabe 	bl	800bd10 <HAL_TIM_IC_CaptureCallback>
 800b794:	e005      	b.n	800b7a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fab0 	bl	800bcfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fac1 	bl	800bd24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	f003 0310 	and.w	r3, r3, #16
 800b7b2:	2b10      	cmp	r3, #16
 800b7b4:	d122      	bne.n	800b7fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	f003 0310 	and.w	r3, r3, #16
 800b7c0:	2b10      	cmp	r3, #16
 800b7c2:	d11b      	bne.n	800b7fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f06f 0210 	mvn.w	r2, #16
 800b7cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fa94 	bl	800bd10 <HAL_TIM_IC_CaptureCallback>
 800b7e8:	e005      	b.n	800b7f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fa86 	bl	800bcfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fa97 	bl	800bd24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b01      	cmp	r3, #1
 800b808:	d10e      	bne.n	800b828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b01      	cmp	r3, #1
 800b816:	d107      	bne.n	800b828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f06f 0201 	mvn.w	r2, #1
 800b820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7f9 fa42 	bl	8004cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b832:	2b80      	cmp	r3, #128	; 0x80
 800b834:	d10e      	bne.n	800b854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b840:	2b80      	cmp	r3, #128	; 0x80
 800b842:	d107      	bne.n	800b854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b84c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f001 f802 	bl	800c858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b85e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b862:	d10e      	bne.n	800b882 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b86e:	2b80      	cmp	r3, #128	; 0x80
 800b870:	d107      	bne.n	800b882 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b87a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 fff5 	bl	800c86c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88c:	2b40      	cmp	r3, #64	; 0x40
 800b88e:	d10e      	bne.n	800b8ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b89a:	2b40      	cmp	r3, #64	; 0x40
 800b89c:	d107      	bne.n	800b8ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b8a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fa45 	bl	800bd38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	f003 0320 	and.w	r3, r3, #32
 800b8b8:	2b20      	cmp	r3, #32
 800b8ba:	d10e      	bne.n	800b8da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f003 0320 	and.w	r3, r3, #32
 800b8c6:	2b20      	cmp	r3, #32
 800b8c8:	d107      	bne.n	800b8da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f06f 0220 	mvn.w	r2, #32
 800b8d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 ffb5 	bl	800c844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
	...

0800b8e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d101      	bne.n	800b902 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8fe:	2302      	movs	r3, #2
 800b900:	e0ff      	b.n	800bb02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2201      	movs	r2, #1
 800b906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b14      	cmp	r3, #20
 800b90e:	f200 80f0 	bhi.w	800baf2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b912:	a201      	add	r2, pc, #4	; (adr r2, 800b918 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b918:	0800b96d 	.word	0x0800b96d
 800b91c:	0800baf3 	.word	0x0800baf3
 800b920:	0800baf3 	.word	0x0800baf3
 800b924:	0800baf3 	.word	0x0800baf3
 800b928:	0800b9ad 	.word	0x0800b9ad
 800b92c:	0800baf3 	.word	0x0800baf3
 800b930:	0800baf3 	.word	0x0800baf3
 800b934:	0800baf3 	.word	0x0800baf3
 800b938:	0800b9ef 	.word	0x0800b9ef
 800b93c:	0800baf3 	.word	0x0800baf3
 800b940:	0800baf3 	.word	0x0800baf3
 800b944:	0800baf3 	.word	0x0800baf3
 800b948:	0800ba2f 	.word	0x0800ba2f
 800b94c:	0800baf3 	.word	0x0800baf3
 800b950:	0800baf3 	.word	0x0800baf3
 800b954:	0800baf3 	.word	0x0800baf3
 800b958:	0800ba71 	.word	0x0800ba71
 800b95c:	0800baf3 	.word	0x0800baf3
 800b960:	0800baf3 	.word	0x0800baf3
 800b964:	0800baf3 	.word	0x0800baf3
 800b968:	0800bab1 	.word	0x0800bab1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68b9      	ldr	r1, [r7, #8]
 800b972:	4618      	mov	r0, r3
 800b974:	f000 fa90 	bl	800be98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699a      	ldr	r2, [r3, #24]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f042 0208 	orr.w	r2, r2, #8
 800b986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	699a      	ldr	r2, [r3, #24]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f022 0204 	bic.w	r2, r2, #4
 800b996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6999      	ldr	r1, [r3, #24]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	691a      	ldr	r2, [r3, #16]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	430a      	orrs	r2, r1
 800b9a8:	619a      	str	r2, [r3, #24]
      break;
 800b9aa:	e0a5      	b.n	800baf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68b9      	ldr	r1, [r7, #8]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 fb00 	bl	800bfb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	699a      	ldr	r2, [r3, #24]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	699a      	ldr	r2, [r3, #24]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	6999      	ldr	r1, [r3, #24]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	021a      	lsls	r2, r3, #8
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	619a      	str	r2, [r3, #24]
      break;
 800b9ec:	e084      	b.n	800baf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 fb69 	bl	800c0cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	69da      	ldr	r2, [r3, #28]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f042 0208 	orr.w	r2, r2, #8
 800ba08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69da      	ldr	r2, [r3, #28]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f022 0204 	bic.w	r2, r2, #4
 800ba18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	69d9      	ldr	r1, [r3, #28]
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	691a      	ldr	r2, [r3, #16]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	61da      	str	r2, [r3, #28]
      break;
 800ba2c:	e064      	b.n	800baf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68b9      	ldr	r1, [r7, #8]
 800ba34:	4618      	mov	r0, r3
 800ba36:	f000 fbd1 	bl	800c1dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	69da      	ldr	r2, [r3, #28]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	69da      	ldr	r2, [r3, #28]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	69d9      	ldr	r1, [r3, #28]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	691b      	ldr	r3, [r3, #16]
 800ba64:	021a      	lsls	r2, r3, #8
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	61da      	str	r2, [r3, #28]
      break;
 800ba6e:	e043      	b.n	800baf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68b9      	ldr	r1, [r7, #8]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 fc1a 	bl	800c2b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f042 0208 	orr.w	r2, r2, #8
 800ba8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f022 0204 	bic.w	r2, r2, #4
 800ba9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	691a      	ldr	r2, [r3, #16]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800baae:	e023      	b.n	800baf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68b9      	ldr	r1, [r7, #8]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 fc5e 	bl	800c378 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800baca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	021a      	lsls	r2, r3, #8
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	430a      	orrs	r2, r1
 800baee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800baf0:	e002      	b.n	800baf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	75fb      	strb	r3, [r7, #23]
      break;
 800baf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bb00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3718      	adds	r7, #24
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop

0800bb0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d101      	bne.n	800bb28 <HAL_TIM_ConfigClockSource+0x1c>
 800bb24:	2302      	movs	r3, #2
 800bb26:	e0dc      	b.n	800bce2 <HAL_TIM_ConfigClockSource+0x1d6>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2202      	movs	r2, #2
 800bb34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	4b6a      	ldr	r3, [pc, #424]	; (800bcec <HAL_TIM_ConfigClockSource+0x1e0>)
 800bb44:	4013      	ands	r3, r2
 800bb46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a64      	ldr	r2, [pc, #400]	; (800bcf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	f000 80a9 	beq.w	800bcb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb64:	4a62      	ldr	r2, [pc, #392]	; (800bcf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	f200 80ae 	bhi.w	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb6c:	4a61      	ldr	r2, [pc, #388]	; (800bcf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	f000 80a1 	beq.w	800bcb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb74:	4a5f      	ldr	r2, [pc, #380]	; (800bcf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	f200 80a6 	bhi.w	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb7c:	4a5e      	ldr	r2, [pc, #376]	; (800bcf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	f000 8099 	beq.w	800bcb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb84:	4a5c      	ldr	r2, [pc, #368]	; (800bcf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	f200 809e 	bhi.w	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bb90:	f000 8091 	beq.w	800bcb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bb98:	f200 8096 	bhi.w	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bba0:	f000 8089 	beq.w	800bcb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bba8:	f200 808e 	bhi.w	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbb0:	d03e      	beq.n	800bc30 <HAL_TIM_ConfigClockSource+0x124>
 800bbb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbb6:	f200 8087 	bhi.w	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbbe:	f000 8086 	beq.w	800bcce <HAL_TIM_ConfigClockSource+0x1c2>
 800bbc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbc6:	d87f      	bhi.n	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbc8:	2b70      	cmp	r3, #112	; 0x70
 800bbca:	d01a      	beq.n	800bc02 <HAL_TIM_ConfigClockSource+0xf6>
 800bbcc:	2b70      	cmp	r3, #112	; 0x70
 800bbce:	d87b      	bhi.n	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbd0:	2b60      	cmp	r3, #96	; 0x60
 800bbd2:	d050      	beq.n	800bc76 <HAL_TIM_ConfigClockSource+0x16a>
 800bbd4:	2b60      	cmp	r3, #96	; 0x60
 800bbd6:	d877      	bhi.n	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbd8:	2b50      	cmp	r3, #80	; 0x50
 800bbda:	d03c      	beq.n	800bc56 <HAL_TIM_ConfigClockSource+0x14a>
 800bbdc:	2b50      	cmp	r3, #80	; 0x50
 800bbde:	d873      	bhi.n	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbe0:	2b40      	cmp	r3, #64	; 0x40
 800bbe2:	d058      	beq.n	800bc96 <HAL_TIM_ConfigClockSource+0x18a>
 800bbe4:	2b40      	cmp	r3, #64	; 0x40
 800bbe6:	d86f      	bhi.n	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbe8:	2b30      	cmp	r3, #48	; 0x30
 800bbea:	d064      	beq.n	800bcb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbec:	2b30      	cmp	r3, #48	; 0x30
 800bbee:	d86b      	bhi.n	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbf0:	2b20      	cmp	r3, #32
 800bbf2:	d060      	beq.n	800bcb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbf4:	2b20      	cmp	r3, #32
 800bbf6:	d867      	bhi.n	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d05c      	beq.n	800bcb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbfc:	2b10      	cmp	r3, #16
 800bbfe:	d05a      	beq.n	800bcb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bc00:	e062      	b.n	800bcc8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	6899      	ldr	r1, [r3, #8]
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	685a      	ldr	r2, [r3, #4]
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	f000 fc95 	bl	800c540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	609a      	str	r2, [r3, #8]
      break;
 800bc2e:	e04f      	b.n	800bcd0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6818      	ldr	r0, [r3, #0]
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	6899      	ldr	r1, [r3, #8]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	f000 fc7e 	bl	800c540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	689a      	ldr	r2, [r3, #8]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc52:	609a      	str	r2, [r3, #8]
      break;
 800bc54:	e03c      	b.n	800bcd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6818      	ldr	r0, [r3, #0]
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	6859      	ldr	r1, [r3, #4]
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	461a      	mov	r2, r3
 800bc64:	f000 fbee 	bl	800c444 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2150      	movs	r1, #80	; 0x50
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 fc48 	bl	800c504 <TIM_ITRx_SetConfig>
      break;
 800bc74:	e02c      	b.n	800bcd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	6859      	ldr	r1, [r3, #4]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	461a      	mov	r2, r3
 800bc84:	f000 fc0d 	bl	800c4a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2160      	movs	r1, #96	; 0x60
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 fc38 	bl	800c504 <TIM_ITRx_SetConfig>
      break;
 800bc94:	e01c      	b.n	800bcd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	6859      	ldr	r1, [r3, #4]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	461a      	mov	r2, r3
 800bca4:	f000 fbce 	bl	800c444 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2140      	movs	r1, #64	; 0x40
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 fc28 	bl	800c504 <TIM_ITRx_SetConfig>
      break;
 800bcb4:	e00c      	b.n	800bcd0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	f000 fc1f 	bl	800c504 <TIM_ITRx_SetConfig>
      break;
 800bcc6:	e003      	b.n	800bcd0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	73fb      	strb	r3, [r7, #15]
      break;
 800bccc:	e000      	b.n	800bcd0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bcce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	ffceff88 	.word	0xffceff88
 800bcf0:	00100040 	.word	0x00100040
 800bcf4:	00100030 	.word	0x00100030
 800bcf8:	00100020 	.word	0x00100020

0800bcfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a44      	ldr	r2, [pc, #272]	; (800be70 <TIM_Base_SetConfig+0x124>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d013      	beq.n	800bd8c <TIM_Base_SetConfig+0x40>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd6a:	d00f      	beq.n	800bd8c <TIM_Base_SetConfig+0x40>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a41      	ldr	r2, [pc, #260]	; (800be74 <TIM_Base_SetConfig+0x128>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d00b      	beq.n	800bd8c <TIM_Base_SetConfig+0x40>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a40      	ldr	r2, [pc, #256]	; (800be78 <TIM_Base_SetConfig+0x12c>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d007      	beq.n	800bd8c <TIM_Base_SetConfig+0x40>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4a3f      	ldr	r2, [pc, #252]	; (800be7c <TIM_Base_SetConfig+0x130>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d003      	beq.n	800bd8c <TIM_Base_SetConfig+0x40>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4a3e      	ldr	r2, [pc, #248]	; (800be80 <TIM_Base_SetConfig+0x134>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d108      	bne.n	800bd9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4a33      	ldr	r2, [pc, #204]	; (800be70 <TIM_Base_SetConfig+0x124>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d027      	beq.n	800bdf6 <TIM_Base_SetConfig+0xaa>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdac:	d023      	beq.n	800bdf6 <TIM_Base_SetConfig+0xaa>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4a30      	ldr	r2, [pc, #192]	; (800be74 <TIM_Base_SetConfig+0x128>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d01f      	beq.n	800bdf6 <TIM_Base_SetConfig+0xaa>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a2f      	ldr	r2, [pc, #188]	; (800be78 <TIM_Base_SetConfig+0x12c>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d01b      	beq.n	800bdf6 <TIM_Base_SetConfig+0xaa>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a2e      	ldr	r2, [pc, #184]	; (800be7c <TIM_Base_SetConfig+0x130>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d017      	beq.n	800bdf6 <TIM_Base_SetConfig+0xaa>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a2d      	ldr	r2, [pc, #180]	; (800be80 <TIM_Base_SetConfig+0x134>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d013      	beq.n	800bdf6 <TIM_Base_SetConfig+0xaa>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4a2c      	ldr	r2, [pc, #176]	; (800be84 <TIM_Base_SetConfig+0x138>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d00f      	beq.n	800bdf6 <TIM_Base_SetConfig+0xaa>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a2b      	ldr	r2, [pc, #172]	; (800be88 <TIM_Base_SetConfig+0x13c>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d00b      	beq.n	800bdf6 <TIM_Base_SetConfig+0xaa>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a2a      	ldr	r2, [pc, #168]	; (800be8c <TIM_Base_SetConfig+0x140>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d007      	beq.n	800bdf6 <TIM_Base_SetConfig+0xaa>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a29      	ldr	r2, [pc, #164]	; (800be90 <TIM_Base_SetConfig+0x144>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d003      	beq.n	800bdf6 <TIM_Base_SetConfig+0xaa>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a28      	ldr	r2, [pc, #160]	; (800be94 <TIM_Base_SetConfig+0x148>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d108      	bne.n	800be08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	4313      	orrs	r3, r2
 800be06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	695b      	ldr	r3, [r3, #20]
 800be12:	4313      	orrs	r3, r2
 800be14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	689a      	ldr	r2, [r3, #8]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a10      	ldr	r2, [pc, #64]	; (800be70 <TIM_Base_SetConfig+0x124>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d00f      	beq.n	800be54 <TIM_Base_SetConfig+0x108>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a12      	ldr	r2, [pc, #72]	; (800be80 <TIM_Base_SetConfig+0x134>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d00b      	beq.n	800be54 <TIM_Base_SetConfig+0x108>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a11      	ldr	r2, [pc, #68]	; (800be84 <TIM_Base_SetConfig+0x138>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d007      	beq.n	800be54 <TIM_Base_SetConfig+0x108>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a10      	ldr	r2, [pc, #64]	; (800be88 <TIM_Base_SetConfig+0x13c>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d003      	beq.n	800be54 <TIM_Base_SetConfig+0x108>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a0f      	ldr	r2, [pc, #60]	; (800be8c <TIM_Base_SetConfig+0x140>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d103      	bne.n	800be5c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	691a      	ldr	r2, [r3, #16]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	615a      	str	r2, [r3, #20]
}
 800be62:	bf00      	nop
 800be64:	3714      	adds	r7, #20
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	40010000 	.word	0x40010000
 800be74:	40000400 	.word	0x40000400
 800be78:	40000800 	.word	0x40000800
 800be7c:	40000c00 	.word	0x40000c00
 800be80:	40010400 	.word	0x40010400
 800be84:	40014000 	.word	0x40014000
 800be88:	40014400 	.word	0x40014400
 800be8c:	40014800 	.word	0x40014800
 800be90:	4000e000 	.word	0x4000e000
 800be94:	4000e400 	.word	0x4000e400

0800be98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be98:	b480      	push	{r7}
 800be9a:	b087      	sub	sp, #28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a1b      	ldr	r3, [r3, #32]
 800bea6:	f023 0201 	bic.w	r2, r3, #1
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a1b      	ldr	r3, [r3, #32]
 800beb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	4b37      	ldr	r3, [pc, #220]	; (800bfa0 <TIM_OC1_SetConfig+0x108>)
 800bec4:	4013      	ands	r3, r2
 800bec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f023 0303 	bic.w	r3, r3, #3
 800bece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	f023 0302 	bic.w	r3, r3, #2
 800bee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	4313      	orrs	r3, r2
 800beea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a2d      	ldr	r2, [pc, #180]	; (800bfa4 <TIM_OC1_SetConfig+0x10c>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d00f      	beq.n	800bf14 <TIM_OC1_SetConfig+0x7c>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a2c      	ldr	r2, [pc, #176]	; (800bfa8 <TIM_OC1_SetConfig+0x110>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d00b      	beq.n	800bf14 <TIM_OC1_SetConfig+0x7c>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a2b      	ldr	r2, [pc, #172]	; (800bfac <TIM_OC1_SetConfig+0x114>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d007      	beq.n	800bf14 <TIM_OC1_SetConfig+0x7c>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a2a      	ldr	r2, [pc, #168]	; (800bfb0 <TIM_OC1_SetConfig+0x118>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d003      	beq.n	800bf14 <TIM_OC1_SetConfig+0x7c>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a29      	ldr	r2, [pc, #164]	; (800bfb4 <TIM_OC1_SetConfig+0x11c>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d10c      	bne.n	800bf2e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f023 0308 	bic.w	r3, r3, #8
 800bf1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	697a      	ldr	r2, [r7, #20]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f023 0304 	bic.w	r3, r3, #4
 800bf2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a1c      	ldr	r2, [pc, #112]	; (800bfa4 <TIM_OC1_SetConfig+0x10c>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d00f      	beq.n	800bf56 <TIM_OC1_SetConfig+0xbe>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a1b      	ldr	r2, [pc, #108]	; (800bfa8 <TIM_OC1_SetConfig+0x110>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d00b      	beq.n	800bf56 <TIM_OC1_SetConfig+0xbe>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a1a      	ldr	r2, [pc, #104]	; (800bfac <TIM_OC1_SetConfig+0x114>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d007      	beq.n	800bf56 <TIM_OC1_SetConfig+0xbe>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a19      	ldr	r2, [pc, #100]	; (800bfb0 <TIM_OC1_SetConfig+0x118>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d003      	beq.n	800bf56 <TIM_OC1_SetConfig+0xbe>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a18      	ldr	r2, [pc, #96]	; (800bfb4 <TIM_OC1_SetConfig+0x11c>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d111      	bne.n	800bf7a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	695b      	ldr	r3, [r3, #20]
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	621a      	str	r2, [r3, #32]
}
 800bf94:	bf00      	nop
 800bf96:	371c      	adds	r7, #28
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	fffeff8f 	.word	0xfffeff8f
 800bfa4:	40010000 	.word	0x40010000
 800bfa8:	40010400 	.word	0x40010400
 800bfac:	40014000 	.word	0x40014000
 800bfb0:	40014400 	.word	0x40014400
 800bfb4:	40014800 	.word	0x40014800

0800bfb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b087      	sub	sp, #28
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	f023 0210 	bic.w	r2, r3, #16
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	4b34      	ldr	r3, [pc, #208]	; (800c0b4 <TIM_OC2_SetConfig+0xfc>)
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	021b      	lsls	r3, r3, #8
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	4313      	orrs	r3, r2
 800bffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	f023 0320 	bic.w	r3, r3, #32
 800c002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	011b      	lsls	r3, r3, #4
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4a29      	ldr	r2, [pc, #164]	; (800c0b8 <TIM_OC2_SetConfig+0x100>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d003      	beq.n	800c020 <TIM_OC2_SetConfig+0x68>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a28      	ldr	r2, [pc, #160]	; (800c0bc <TIM_OC2_SetConfig+0x104>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d10d      	bne.n	800c03c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	011b      	lsls	r3, r3, #4
 800c02e:	697a      	ldr	r2, [r7, #20]
 800c030:	4313      	orrs	r3, r2
 800c032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c03a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a1e      	ldr	r2, [pc, #120]	; (800c0b8 <TIM_OC2_SetConfig+0x100>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d00f      	beq.n	800c064 <TIM_OC2_SetConfig+0xac>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a1d      	ldr	r2, [pc, #116]	; (800c0bc <TIM_OC2_SetConfig+0x104>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d00b      	beq.n	800c064 <TIM_OC2_SetConfig+0xac>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a1c      	ldr	r2, [pc, #112]	; (800c0c0 <TIM_OC2_SetConfig+0x108>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d007      	beq.n	800c064 <TIM_OC2_SetConfig+0xac>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a1b      	ldr	r2, [pc, #108]	; (800c0c4 <TIM_OC2_SetConfig+0x10c>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d003      	beq.n	800c064 <TIM_OC2_SetConfig+0xac>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a1a      	ldr	r2, [pc, #104]	; (800c0c8 <TIM_OC2_SetConfig+0x110>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d113      	bne.n	800c08c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c06a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	695b      	ldr	r3, [r3, #20]
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	693a      	ldr	r2, [r7, #16]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	4313      	orrs	r3, r2
 800c08a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	693a      	ldr	r2, [r7, #16]
 800c090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	685a      	ldr	r2, [r3, #4]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	621a      	str	r2, [r3, #32]
}
 800c0a6:	bf00      	nop
 800c0a8:	371c      	adds	r7, #28
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	feff8fff 	.word	0xfeff8fff
 800c0b8:	40010000 	.word	0x40010000
 800c0bc:	40010400 	.word	0x40010400
 800c0c0:	40014000 	.word	0x40014000
 800c0c4:	40014400 	.word	0x40014400
 800c0c8:	40014800 	.word	0x40014800

0800c0cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b087      	sub	sp, #28
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	69db      	ldr	r3, [r3, #28]
 800c0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	4b33      	ldr	r3, [pc, #204]	; (800c1c4 <TIM_OC3_SetConfig+0xf8>)
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f023 0303 	bic.w	r3, r3, #3
 800c102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	021b      	lsls	r3, r3, #8
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	4313      	orrs	r3, r2
 800c120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a28      	ldr	r2, [pc, #160]	; (800c1c8 <TIM_OC3_SetConfig+0xfc>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d003      	beq.n	800c132 <TIM_OC3_SetConfig+0x66>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a27      	ldr	r2, [pc, #156]	; (800c1cc <TIM_OC3_SetConfig+0x100>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d10d      	bne.n	800c14e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	021b      	lsls	r3, r3, #8
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	4313      	orrs	r3, r2
 800c144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c14c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a1d      	ldr	r2, [pc, #116]	; (800c1c8 <TIM_OC3_SetConfig+0xfc>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d00f      	beq.n	800c176 <TIM_OC3_SetConfig+0xaa>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a1c      	ldr	r2, [pc, #112]	; (800c1cc <TIM_OC3_SetConfig+0x100>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d00b      	beq.n	800c176 <TIM_OC3_SetConfig+0xaa>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a1b      	ldr	r2, [pc, #108]	; (800c1d0 <TIM_OC3_SetConfig+0x104>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d007      	beq.n	800c176 <TIM_OC3_SetConfig+0xaa>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a1a      	ldr	r2, [pc, #104]	; (800c1d4 <TIM_OC3_SetConfig+0x108>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d003      	beq.n	800c176 <TIM_OC3_SetConfig+0xaa>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a19      	ldr	r2, [pc, #100]	; (800c1d8 <TIM_OC3_SetConfig+0x10c>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d113      	bne.n	800c19e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c17c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	011b      	lsls	r3, r3, #4
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	4313      	orrs	r3, r2
 800c190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	011b      	lsls	r3, r3, #4
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	693a      	ldr	r2, [r7, #16]
 800c1a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	685a      	ldr	r2, [r3, #4]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	621a      	str	r2, [r3, #32]
}
 800c1b8:	bf00      	nop
 800c1ba:	371c      	adds	r7, #28
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	fffeff8f 	.word	0xfffeff8f
 800c1c8:	40010000 	.word	0x40010000
 800c1cc:	40010400 	.word	0x40010400
 800c1d0:	40014000 	.word	0x40014000
 800c1d4:	40014400 	.word	0x40014400
 800c1d8:	40014800 	.word	0x40014800

0800c1dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b087      	sub	sp, #28
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a1b      	ldr	r3, [r3, #32]
 800c1ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a1b      	ldr	r3, [r3, #32]
 800c1f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	69db      	ldr	r3, [r3, #28]
 800c202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	4b24      	ldr	r3, [pc, #144]	; (800c298 <TIM_OC4_SetConfig+0xbc>)
 800c208:	4013      	ands	r3, r2
 800c20a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	021b      	lsls	r3, r3, #8
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	031b      	lsls	r3, r3, #12
 800c22e:	693a      	ldr	r2, [r7, #16]
 800c230:	4313      	orrs	r3, r2
 800c232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a19      	ldr	r2, [pc, #100]	; (800c29c <TIM_OC4_SetConfig+0xc0>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d00f      	beq.n	800c25c <TIM_OC4_SetConfig+0x80>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a18      	ldr	r2, [pc, #96]	; (800c2a0 <TIM_OC4_SetConfig+0xc4>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d00b      	beq.n	800c25c <TIM_OC4_SetConfig+0x80>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a17      	ldr	r2, [pc, #92]	; (800c2a4 <TIM_OC4_SetConfig+0xc8>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d007      	beq.n	800c25c <TIM_OC4_SetConfig+0x80>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a16      	ldr	r2, [pc, #88]	; (800c2a8 <TIM_OC4_SetConfig+0xcc>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d003      	beq.n	800c25c <TIM_OC4_SetConfig+0x80>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a15      	ldr	r2, [pc, #84]	; (800c2ac <TIM_OC4_SetConfig+0xd0>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d109      	bne.n	800c270 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c262:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	019b      	lsls	r3, r3, #6
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	685a      	ldr	r2, [r3, #4]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	693a      	ldr	r2, [r7, #16]
 800c288:	621a      	str	r2, [r3, #32]
}
 800c28a:	bf00      	nop
 800c28c:	371c      	adds	r7, #28
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop
 800c298:	feff8fff 	.word	0xfeff8fff
 800c29c:	40010000 	.word	0x40010000
 800c2a0:	40010400 	.word	0x40010400
 800c2a4:	40014000 	.word	0x40014000
 800c2a8:	40014400 	.word	0x40014400
 800c2ac:	40014800 	.word	0x40014800

0800c2b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b087      	sub	sp, #28
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a1b      	ldr	r3, [r3, #32]
 800c2be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	4b21      	ldr	r3, [pc, #132]	; (800c360 <TIM_OC5_SetConfig+0xb0>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c2f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	041b      	lsls	r3, r3, #16
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a18      	ldr	r2, [pc, #96]	; (800c364 <TIM_OC5_SetConfig+0xb4>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d00f      	beq.n	800c326 <TIM_OC5_SetConfig+0x76>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a17      	ldr	r2, [pc, #92]	; (800c368 <TIM_OC5_SetConfig+0xb8>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d00b      	beq.n	800c326 <TIM_OC5_SetConfig+0x76>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a16      	ldr	r2, [pc, #88]	; (800c36c <TIM_OC5_SetConfig+0xbc>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d007      	beq.n	800c326 <TIM_OC5_SetConfig+0x76>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a15      	ldr	r2, [pc, #84]	; (800c370 <TIM_OC5_SetConfig+0xc0>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d003      	beq.n	800c326 <TIM_OC5_SetConfig+0x76>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a14      	ldr	r2, [pc, #80]	; (800c374 <TIM_OC5_SetConfig+0xc4>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d109      	bne.n	800c33a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c32c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	695b      	ldr	r3, [r3, #20]
 800c332:	021b      	lsls	r3, r3, #8
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	4313      	orrs	r3, r2
 800c338:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	685a      	ldr	r2, [r3, #4]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	693a      	ldr	r2, [r7, #16]
 800c352:	621a      	str	r2, [r3, #32]
}
 800c354:	bf00      	nop
 800c356:	371c      	adds	r7, #28
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	fffeff8f 	.word	0xfffeff8f
 800c364:	40010000 	.word	0x40010000
 800c368:	40010400 	.word	0x40010400
 800c36c:	40014000 	.word	0x40014000
 800c370:	40014400 	.word	0x40014400
 800c374:	40014800 	.word	0x40014800

0800c378 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c378:	b480      	push	{r7}
 800c37a:	b087      	sub	sp, #28
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a1b      	ldr	r3, [r3, #32]
 800c392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	4b22      	ldr	r3, [pc, #136]	; (800c42c <TIM_OC6_SetConfig+0xb4>)
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	021b      	lsls	r3, r3, #8
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c3ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	051b      	lsls	r3, r3, #20
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a19      	ldr	r2, [pc, #100]	; (800c430 <TIM_OC6_SetConfig+0xb8>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d00f      	beq.n	800c3f0 <TIM_OC6_SetConfig+0x78>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a18      	ldr	r2, [pc, #96]	; (800c434 <TIM_OC6_SetConfig+0xbc>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d00b      	beq.n	800c3f0 <TIM_OC6_SetConfig+0x78>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a17      	ldr	r2, [pc, #92]	; (800c438 <TIM_OC6_SetConfig+0xc0>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d007      	beq.n	800c3f0 <TIM_OC6_SetConfig+0x78>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4a16      	ldr	r2, [pc, #88]	; (800c43c <TIM_OC6_SetConfig+0xc4>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d003      	beq.n	800c3f0 <TIM_OC6_SetConfig+0x78>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4a15      	ldr	r2, [pc, #84]	; (800c440 <TIM_OC6_SetConfig+0xc8>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d109      	bne.n	800c404 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	695b      	ldr	r3, [r3, #20]
 800c3fc:	029b      	lsls	r3, r3, #10
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	4313      	orrs	r3, r2
 800c402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	697a      	ldr	r2, [r7, #20]
 800c408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	685a      	ldr	r2, [r3, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	621a      	str	r2, [r3, #32]
}
 800c41e:	bf00      	nop
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	feff8fff 	.word	0xfeff8fff
 800c430:	40010000 	.word	0x40010000
 800c434:	40010400 	.word	0x40010400
 800c438:	40014000 	.word	0x40014000
 800c43c:	40014400 	.word	0x40014400
 800c440:	40014800 	.word	0x40014800

0800c444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c444:	b480      	push	{r7}
 800c446:	b087      	sub	sp, #28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6a1b      	ldr	r3, [r3, #32]
 800c454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	f023 0201 	bic.w	r2, r3, #1
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c46e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	011b      	lsls	r3, r3, #4
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	4313      	orrs	r3, r2
 800c478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f023 030a 	bic.w	r3, r3, #10
 800c480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	4313      	orrs	r3, r2
 800c488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	621a      	str	r2, [r3, #32]
}
 800c496:	bf00      	nop
 800c498:	371c      	adds	r7, #28
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b087      	sub	sp, #28
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	60f8      	str	r0, [r7, #12]
 800c4aa:	60b9      	str	r1, [r7, #8]
 800c4ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	f023 0210 	bic.w	r2, r3, #16
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6a1b      	ldr	r3, [r3, #32]
 800c4c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	031b      	lsls	r3, r3, #12
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	011b      	lsls	r3, r3, #4
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	697a      	ldr	r2, [r7, #20]
 800c4ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	621a      	str	r2, [r3, #32]
}
 800c4f6:	bf00      	nop
 800c4f8:	371c      	adds	r7, #28
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
	...

0800c504 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4b09      	ldr	r3, [pc, #36]	; (800c53c <TIM_ITRx_SetConfig+0x38>)
 800c518:	4013      	ands	r3, r2
 800c51a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	4313      	orrs	r3, r2
 800c522:	f043 0307 	orr.w	r3, r3, #7
 800c526:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	609a      	str	r2, [r3, #8]
}
 800c52e:	bf00      	nop
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	ffcfff8f 	.word	0xffcfff8f

0800c540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c540:	b480      	push	{r7}
 800c542:	b087      	sub	sp, #28
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
 800c54c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c55a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	021a      	lsls	r2, r3, #8
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	431a      	orrs	r2, r3
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	4313      	orrs	r3, r2
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	697a      	ldr	r2, [r7, #20]
 800c572:	609a      	str	r2, [r3, #8]
}
 800c574:	bf00      	nop
 800c576:	371c      	adds	r7, #28
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c580:	b480      	push	{r7}
 800c582:	b087      	sub	sp, #28
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	f003 031f 	and.w	r3, r3, #31
 800c592:	2201      	movs	r2, #1
 800c594:	fa02 f303 	lsl.w	r3, r2, r3
 800c598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6a1a      	ldr	r2, [r3, #32]
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	43db      	mvns	r3, r3
 800c5a2:	401a      	ands	r2, r3
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6a1a      	ldr	r2, [r3, #32]
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	f003 031f 	and.w	r3, r3, #31
 800c5b2:	6879      	ldr	r1, [r7, #4]
 800c5b4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5b8:	431a      	orrs	r2, r3
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	621a      	str	r2, [r3, #32]
}
 800c5be:	bf00      	nop
 800c5c0:	371c      	adds	r7, #28
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
	...

0800c5cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d101      	bne.n	800c5e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	e077      	b.n	800c6d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2202      	movs	r2, #2
 800c5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a35      	ldr	r2, [pc, #212]	; (800c6e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d004      	beq.n	800c618 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a34      	ldr	r2, [pc, #208]	; (800c6e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d108      	bne.n	800c62a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c61e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	4313      	orrs	r3, r2
 800c628:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	4313      	orrs	r3, r2
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a25      	ldr	r2, [pc, #148]	; (800c6e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d02c      	beq.n	800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c656:	d027      	beq.n	800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a22      	ldr	r2, [pc, #136]	; (800c6e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d022      	beq.n	800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a21      	ldr	r2, [pc, #132]	; (800c6ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d01d      	beq.n	800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a1f      	ldr	r2, [pc, #124]	; (800c6f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d018      	beq.n	800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a1a      	ldr	r2, [pc, #104]	; (800c6e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d013      	beq.n	800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a1b      	ldr	r2, [pc, #108]	; (800c6f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d00e      	beq.n	800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a1a      	ldr	r2, [pc, #104]	; (800c6f8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d009      	beq.n	800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a18      	ldr	r2, [pc, #96]	; (800c6fc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d004      	beq.n	800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a17      	ldr	r2, [pc, #92]	; (800c700 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d10c      	bne.n	800c6c2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	68ba      	ldr	r2, [r7, #8]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	40010000 	.word	0x40010000
 800c6e4:	40010400 	.word	0x40010400
 800c6e8:	40000400 	.word	0x40000400
 800c6ec:	40000800 	.word	0x40000800
 800c6f0:	40000c00 	.word	0x40000c00
 800c6f4:	40001800 	.word	0x40001800
 800c6f8:	40014000 	.word	0x40014000
 800c6fc:	4000e000 	.word	0x4000e000
 800c700:	4000e400 	.word	0x4000e400

0800c704 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c70e:	2300      	movs	r3, #0
 800c710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d101      	bne.n	800c720 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c71c:	2302      	movs	r3, #2
 800c71e:	e087      	b.n	800c830 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	4313      	orrs	r3, r2
 800c734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	4313      	orrs	r3, r2
 800c742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	4313      	orrs	r3, r2
 800c750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	695b      	ldr	r3, [r3, #20]
 800c778:	4313      	orrs	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c786:	4313      	orrs	r3, r2
 800c788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	041b      	lsls	r3, r3, #16
 800c796:	4313      	orrs	r3, r2
 800c798:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a27      	ldr	r2, [pc, #156]	; (800c83c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d004      	beq.n	800c7ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a25      	ldr	r2, [pc, #148]	; (800c840 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d106      	bne.n	800c7bc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	69db      	ldr	r3, [r3, #28]
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a1e      	ldr	r2, [pc, #120]	; (800c83c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d004      	beq.n	800c7d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a1d      	ldr	r2, [pc, #116]	; (800c840 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d126      	bne.n	800c81e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7da:	051b      	lsls	r3, r3, #20
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a0e      	ldr	r2, [pc, #56]	; (800c83c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d004      	beq.n	800c810 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a0d      	ldr	r2, [pc, #52]	; (800c840 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d106      	bne.n	800c81e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81a:	4313      	orrs	r3, r2
 800c81c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	40010000 	.word	0x40010000
 800c840:	40010400 	.word	0x40010400

0800c844 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c84c:	bf00      	nop
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e042      	b.n	800c918 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d106      	bne.n	800c8aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7f7 ffb1 	bl	800480c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2224      	movs	r2, #36	; 0x24
 800c8ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f022 0201 	bic.w	r2, r2, #1
 800c8c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fd0e 	bl	800d2e4 <UART_SetConfig>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d101      	bne.n	800c8d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e022      	b.n	800c918 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f001 fb6e 	bl	800dfbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	689a      	ldr	r2, [r3, #8]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f042 0201 	orr.w	r2, r2, #1
 800c90e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f001 fbf5 	bl	800e100 <UART_CheckIdleState>
 800c916:	4603      	mov	r3, r0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d101      	bne.n	800c932 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	e02e      	b.n	800c990 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2224      	movs	r2, #36	; 0x24
 800c936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f022 0201 	bic.w	r2, r2, #1
 800c948:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2200      	movs	r2, #0
 800c950:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2200      	movs	r2, #0
 800c958:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2200      	movs	r2, #0
 800c960:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7f8 f83a 	bl	80049dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b08a      	sub	sp, #40	; 0x28
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ac:	2b20      	cmp	r3, #32
 800c9ae:	d17a      	bne.n	800caa6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d002      	beq.n	800c9bc <HAL_UART_Transmit_DMA+0x24>
 800c9b6:	88fb      	ldrh	r3, [r7, #6]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d101      	bne.n	800c9c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e073      	b.n	800caa8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d101      	bne.n	800c9ce <HAL_UART_Transmit_DMA+0x36>
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	e06c      	b.n	800caa8 <HAL_UART_Transmit_DMA+0x110>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	88fa      	ldrh	r2, [r7, #6]
 800c9e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	88fa      	ldrh	r2, [r7, #6]
 800c9e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2221      	movs	r2, #33	; 0x21
 800c9f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d02c      	beq.n	800ca5e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca08:	4a29      	ldr	r2, [pc, #164]	; (800cab0 <HAL_UART_Transmit_DMA+0x118>)
 800ca0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca10:	4a28      	ldr	r2, [pc, #160]	; (800cab4 <HAL_UART_Transmit_DMA+0x11c>)
 800ca12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca18:	4a27      	ldr	r2, [pc, #156]	; (800cab8 <HAL_UART_Transmit_DMA+0x120>)
 800ca1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca20:	2200      	movs	r2, #0
 800ca22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	3328      	adds	r3, #40	; 0x28
 800ca34:	461a      	mov	r2, r3
 800ca36:	88fb      	ldrh	r3, [r7, #6]
 800ca38:	f7f9 fa56 	bl	8005ee8 <HAL_DMA_Start_IT>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00d      	beq.n	800ca5e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2210      	movs	r2, #16
 800ca46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2220      	movs	r2, #32
 800ca56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e024      	b.n	800caa8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2240      	movs	r2, #64	; 0x40
 800ca64:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	3308      	adds	r3, #8
 800ca74:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	e853 3f00 	ldrex	r3, [r3]
 800ca7c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca84:	627b      	str	r3, [r7, #36]	; 0x24
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca8e:	623a      	str	r2, [r7, #32]
 800ca90:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca92:	69f9      	ldr	r1, [r7, #28]
 800ca94:	6a3a      	ldr	r2, [r7, #32]
 800ca96:	e841 2300 	strex	r3, r2, [r1]
 800ca9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1e5      	bne.n	800ca6e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	e000      	b.n	800caa8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800caa6:	2302      	movs	r3, #2
  }
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3728      	adds	r7, #40	; 0x28
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	0800e5c9 	.word	0x0800e5c9
 800cab4:	0800e65f 	.word	0x0800e65f
 800cab8:	0800e7d5 	.word	0x0800e7d5

0800cabc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08a      	sub	sp, #40	; 0x28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	4613      	mov	r3, r2
 800cac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cad0:	2b20      	cmp	r3, #32
 800cad2:	d142      	bne.n	800cb5a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d002      	beq.n	800cae0 <HAL_UART_Receive_DMA+0x24>
 800cada:	88fb      	ldrh	r3, [r7, #6]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d101      	bne.n	800cae4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e03b      	b.n	800cb5c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800caea:	2b01      	cmp	r3, #1
 800caec:	d101      	bne.n	800caf2 <HAL_UART_Receive_DMA+0x36>
 800caee:	2302      	movs	r3, #2
 800caf0:	e034      	b.n	800cb5c <HAL_UART_Receive_DMA+0xa0>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2201      	movs	r2, #1
 800caf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2200      	movs	r2, #0
 800cafe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a17      	ldr	r2, [pc, #92]	; (800cb64 <HAL_UART_Receive_DMA+0xa8>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d01f      	beq.n	800cb4a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d018      	beq.n	800cb4a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	e853 3f00 	ldrex	r3, [r3]
 800cb24:	613b      	str	r3, [r7, #16]
   return(result);
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	461a      	mov	r2, r3
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	623b      	str	r3, [r7, #32]
 800cb38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3a:	69f9      	ldr	r1, [r7, #28]
 800cb3c:	6a3a      	ldr	r2, [r7, #32]
 800cb3e:	e841 2300 	strex	r3, r2, [r1]
 800cb42:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1e6      	bne.n	800cb18 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb4a:	88fb      	ldrh	r3, [r7, #6]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f001 fbe9 	bl	800e328 <UART_Start_Receive_DMA>
 800cb56:	4603      	mov	r3, r0
 800cb58:	e000      	b.n	800cb5c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cb5a:	2302      	movs	r3, #2
  }
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3728      	adds	r7, #40	; 0x28
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	58000c00 	.word	0x58000c00

0800cb68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b0ba      	sub	sp, #232	; 0xe8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	69db      	ldr	r3, [r3, #28]
 800cb76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cb92:	f640 030f 	movw	r3, #2063	; 0x80f
 800cb96:	4013      	ands	r3, r2
 800cb98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cb9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d11b      	bne.n	800cbdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cba8:	f003 0320 	and.w	r3, r3, #32
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d015      	beq.n	800cbdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbb4:	f003 0320 	and.w	r3, r3, #32
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d105      	bne.n	800cbc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d009      	beq.n	800cbdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f000 835a 	beq.w	800d286 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	4798      	blx	r3
      }
      return;
 800cbda:	e354      	b.n	800d286 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cbdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f000 811f 	beq.w	800ce24 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cbe6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cbea:	4b8b      	ldr	r3, [pc, #556]	; (800ce18 <HAL_UART_IRQHandler+0x2b0>)
 800cbec:	4013      	ands	r3, r2
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d106      	bne.n	800cc00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cbf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cbf6:	4b89      	ldr	r3, [pc, #548]	; (800ce1c <HAL_UART_IRQHandler+0x2b4>)
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	f000 8112 	beq.w	800ce24 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc04:	f003 0301 	and.w	r3, r3, #1
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d011      	beq.n	800cc30 <HAL_UART_IRQHandler+0xc8>
 800cc0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00b      	beq.n	800cc30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc26:	f043 0201 	orr.w	r2, r3, #1
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc34:	f003 0302 	and.w	r3, r3, #2
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d011      	beq.n	800cc60 <HAL_UART_IRQHandler+0xf8>
 800cc3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc40:	f003 0301 	and.w	r3, r3, #1
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00b      	beq.n	800cc60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2202      	movs	r2, #2
 800cc4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc56:	f043 0204 	orr.w	r2, r3, #4
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc64:	f003 0304 	and.w	r3, r3, #4
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d011      	beq.n	800cc90 <HAL_UART_IRQHandler+0x128>
 800cc6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00b      	beq.n	800cc90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2204      	movs	r2, #4
 800cc7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc86:	f043 0202 	orr.w	r2, r3, #2
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc94:	f003 0308 	and.w	r3, r3, #8
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d017      	beq.n	800cccc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cca0:	f003 0320 	and.w	r3, r3, #32
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d105      	bne.n	800ccb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cca8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ccac:	4b5a      	ldr	r3, [pc, #360]	; (800ce18 <HAL_UART_IRQHandler+0x2b0>)
 800ccae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00b      	beq.n	800cccc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2208      	movs	r2, #8
 800ccba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccc2:	f043 0208 	orr.w	r2, r3, #8
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d012      	beq.n	800ccfe <HAL_UART_IRQHandler+0x196>
 800ccd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ccdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00c      	beq.n	800ccfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccf4:	f043 0220 	orr.w	r2, r3, #32
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f000 82c0 	beq.w	800d28a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd0e:	f003 0320 	and.w	r3, r3, #32
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d013      	beq.n	800cd3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd1a:	f003 0320 	and.w	r3, r3, #32
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d105      	bne.n	800cd2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d007      	beq.n	800cd3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d003      	beq.n	800cd3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd52:	2b40      	cmp	r3, #64	; 0x40
 800cd54:	d005      	beq.n	800cd62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d04f      	beq.n	800ce02 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f001 fbca 	bl	800e4fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd72:	2b40      	cmp	r3, #64	; 0x40
 800cd74:	d141      	bne.n	800cdfa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3308      	adds	r3, #8
 800cd7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd84:	e853 3f00 	ldrex	r3, [r3]
 800cd88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cd8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	3308      	adds	r3, #8
 800cd9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cda2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cda6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cdae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cdb2:	e841 2300 	strex	r3, r2, [r1]
 800cdb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cdba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1d9      	bne.n	800cd76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d013      	beq.n	800cdf2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdce:	4a14      	ldr	r2, [pc, #80]	; (800ce20 <HAL_UART_IRQHandler+0x2b8>)
 800cdd0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7f9 fe0e 	bl	80069f8 <HAL_DMA_Abort_IT>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d017      	beq.n	800ce12 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cde6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cdec:	4610      	mov	r0, r2
 800cdee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdf0:	e00f      	b.n	800ce12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7f6 fa00 	bl	80031f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdf8:	e00b      	b.n	800ce12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7f6 f9fc 	bl	80031f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce00:	e007      	b.n	800ce12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7f6 f9f8 	bl	80031f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ce10:	e23b      	b.n	800d28a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce12:	bf00      	nop
    return;
 800ce14:	e239      	b.n	800d28a <HAL_UART_IRQHandler+0x722>
 800ce16:	bf00      	nop
 800ce18:	10000001 	.word	0x10000001
 800ce1c:	04000120 	.word	0x04000120
 800ce20:	0800e855 	.word	0x0800e855

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	f040 81ce 	bne.w	800d1ca <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce32:	f003 0310 	and.w	r3, r3, #16
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f000 81c7 	beq.w	800d1ca <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce40:	f003 0310 	and.w	r3, r3, #16
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 81c0 	beq.w	800d1ca <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2210      	movs	r2, #16
 800ce50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce5c:	2b40      	cmp	r3, #64	; 0x40
 800ce5e:	f040 813b 	bne.w	800d0d8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a8b      	ldr	r2, [pc, #556]	; (800d098 <HAL_UART_IRQHandler+0x530>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d059      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a89      	ldr	r2, [pc, #548]	; (800d09c <HAL_UART_IRQHandler+0x534>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d053      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a87      	ldr	r2, [pc, #540]	; (800d0a0 <HAL_UART_IRQHandler+0x538>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d04d      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a85      	ldr	r2, [pc, #532]	; (800d0a4 <HAL_UART_IRQHandler+0x53c>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d047      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a83      	ldr	r2, [pc, #524]	; (800d0a8 <HAL_UART_IRQHandler+0x540>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d041      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a81      	ldr	r2, [pc, #516]	; (800d0ac <HAL_UART_IRQHandler+0x544>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d03b      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a7f      	ldr	r2, [pc, #508]	; (800d0b0 <HAL_UART_IRQHandler+0x548>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d035      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a7d      	ldr	r2, [pc, #500]	; (800d0b4 <HAL_UART_IRQHandler+0x54c>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d02f      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a7b      	ldr	r2, [pc, #492]	; (800d0b8 <HAL_UART_IRQHandler+0x550>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d029      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a79      	ldr	r2, [pc, #484]	; (800d0bc <HAL_UART_IRQHandler+0x554>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d023      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a77      	ldr	r2, [pc, #476]	; (800d0c0 <HAL_UART_IRQHandler+0x558>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d01d      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a75      	ldr	r2, [pc, #468]	; (800d0c4 <HAL_UART_IRQHandler+0x55c>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d017      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a73      	ldr	r2, [pc, #460]	; (800d0c8 <HAL_UART_IRQHandler+0x560>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d011      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a71      	ldr	r2, [pc, #452]	; (800d0cc <HAL_UART_IRQHandler+0x564>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d00b      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a6f      	ldr	r2, [pc, #444]	; (800d0d0 <HAL_UART_IRQHandler+0x568>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d005      	beq.n	800cf22 <HAL_UART_IRQHandler+0x3ba>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a6d      	ldr	r2, [pc, #436]	; (800d0d4 <HAL_UART_IRQHandler+0x56c>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d105      	bne.n	800cf2e <HAL_UART_IRQHandler+0x3c6>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	e004      	b.n	800cf38 <HAL_UART_IRQHandler+0x3d0>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cf3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f000 81a4 	beq.w	800d28e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cf50:	429a      	cmp	r2, r3
 800cf52:	f080 819c 	bcs.w	800d28e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cf5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf64:	69db      	ldr	r3, [r3, #28]
 800cf66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf6a:	f000 8086 	beq.w	800d07a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf7a:	e853 3f00 	ldrex	r3, [r3]
 800cf7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cf82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cf98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf9c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cfa4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cfa8:	e841 2300 	strex	r3, r2, [r1]
 800cfac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cfb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1da      	bne.n	800cf6e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfc2:	e853 3f00 	ldrex	r3, [r3]
 800cfc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cfc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfca:	f023 0301 	bic.w	r3, r3, #1
 800cfce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3308      	adds	r3, #8
 800cfd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cfdc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cfe0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cfe4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cfe8:	e841 2300 	strex	r3, r2, [r1]
 800cfec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cfee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1e1      	bne.n	800cfb8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	3308      	adds	r3, #8
 800cffa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cffe:	e853 3f00 	ldrex	r3, [r3]
 800d002:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d00a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3308      	adds	r3, #8
 800d014:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d018:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d01a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d01e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d020:	e841 2300 	strex	r3, r2, [r1]
 800d024:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1e3      	bne.n	800cff4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2220      	movs	r2, #32
 800d030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d042:	e853 3f00 	ldrex	r3, [r3]
 800d046:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d04a:	f023 0310 	bic.w	r3, r3, #16
 800d04e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	461a      	mov	r2, r3
 800d058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d05c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d05e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d064:	e841 2300 	strex	r3, r2, [r1]
 800d068:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d06a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1e4      	bne.n	800d03a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d074:	4618      	mov	r0, r3
 800d076:	f7f9 f9a1 	bl	80063bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d086:	b29b      	uxth	r3, r3
 800d088:	1ad3      	subs	r3, r2, r3
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	4619      	mov	r1, r3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f91c 	bl	800d2cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d094:	e0fb      	b.n	800d28e <HAL_UART_IRQHandler+0x726>
 800d096:	bf00      	nop
 800d098:	40020010 	.word	0x40020010
 800d09c:	40020028 	.word	0x40020028
 800d0a0:	40020040 	.word	0x40020040
 800d0a4:	40020058 	.word	0x40020058
 800d0a8:	40020070 	.word	0x40020070
 800d0ac:	40020088 	.word	0x40020088
 800d0b0:	400200a0 	.word	0x400200a0
 800d0b4:	400200b8 	.word	0x400200b8
 800d0b8:	40020410 	.word	0x40020410
 800d0bc:	40020428 	.word	0x40020428
 800d0c0:	40020440 	.word	0x40020440
 800d0c4:	40020458 	.word	0x40020458
 800d0c8:	40020470 	.word	0x40020470
 800d0cc:	40020488 	.word	0x40020488
 800d0d0:	400204a0 	.word	0x400204a0
 800d0d4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 80cc 	beq.w	800d292 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d0fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 80c7 	beq.w	800d292 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10c:	e853 3f00 	ldrex	r3, [r3]
 800d110:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d114:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	461a      	mov	r2, r3
 800d122:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d126:	647b      	str	r3, [r7, #68]	; 0x44
 800d128:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d12c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d12e:	e841 2300 	strex	r3, r2, [r1]
 800d132:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1e4      	bne.n	800d104 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3308      	adds	r3, #8
 800d140:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d144:	e853 3f00 	ldrex	r3, [r3]
 800d148:	623b      	str	r3, [r7, #32]
   return(result);
 800d14a:	6a3a      	ldr	r2, [r7, #32]
 800d14c:	4b54      	ldr	r3, [pc, #336]	; (800d2a0 <HAL_UART_IRQHandler+0x738>)
 800d14e:	4013      	ands	r3, r2
 800d150:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	3308      	adds	r3, #8
 800d15a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d15e:	633a      	str	r2, [r7, #48]	; 0x30
 800d160:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d166:	e841 2300 	strex	r3, r2, [r1]
 800d16a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1e3      	bne.n	800d13a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2220      	movs	r2, #32
 800d176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	e853 3f00 	ldrex	r3, [r3]
 800d192:	60fb      	str	r3, [r7, #12]
   return(result);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f023 0310 	bic.w	r3, r3, #16
 800d19a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d1a8:	61fb      	str	r3, [r7, #28]
 800d1aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ac:	69b9      	ldr	r1, [r7, #24]
 800d1ae:	69fa      	ldr	r2, [r7, #28]
 800d1b0:	e841 2300 	strex	r3, r2, [r1]
 800d1b4:	617b      	str	r3, [r7, #20]
   return(result);
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1e4      	bne.n	800d186 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d1bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 f882 	bl	800d2cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d1c8:	e063      	b.n	800d292 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d00e      	beq.n	800d1f4 <HAL_UART_IRQHandler+0x68c>
 800d1d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d008      	beq.n	800d1f4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d1ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f001 fb72 	bl	800e8d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1f2:	e051      	b.n	800d298 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d014      	beq.n	800d22a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d105      	bne.n	800d218 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d20c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d008      	beq.n	800d22a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d03a      	beq.n	800d296 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	4798      	blx	r3
    }
    return;
 800d228:	e035      	b.n	800d296 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d232:	2b00      	cmp	r3, #0
 800d234:	d009      	beq.n	800d24a <HAL_UART_IRQHandler+0x6e2>
 800d236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d003      	beq.n	800d24a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f001 fb1c 	bl	800e880 <UART_EndTransmit_IT>
    return;
 800d248:	e026      	b.n	800d298 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d24e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d252:	2b00      	cmp	r3, #0
 800d254:	d009      	beq.n	800d26a <HAL_UART_IRQHandler+0x702>
 800d256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d25a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d003      	beq.n	800d26a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f001 fb4b 	bl	800e8fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d268:	e016      	b.n	800d298 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d26e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d272:	2b00      	cmp	r3, #0
 800d274:	d010      	beq.n	800d298 <HAL_UART_IRQHandler+0x730>
 800d276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	da0c      	bge.n	800d298 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f001 fb33 	bl	800e8ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d284:	e008      	b.n	800d298 <HAL_UART_IRQHandler+0x730>
      return;
 800d286:	bf00      	nop
 800d288:	e006      	b.n	800d298 <HAL_UART_IRQHandler+0x730>
    return;
 800d28a:	bf00      	nop
 800d28c:	e004      	b.n	800d298 <HAL_UART_IRQHandler+0x730>
      return;
 800d28e:	bf00      	nop
 800d290:	e002      	b.n	800d298 <HAL_UART_IRQHandler+0x730>
      return;
 800d292:	bf00      	nop
 800d294:	e000      	b.n	800d298 <HAL_UART_IRQHandler+0x730>
    return;
 800d296:	bf00      	nop
  }
}
 800d298:	37e8      	adds	r7, #232	; 0xe8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	effffffe 	.word	0xeffffffe

0800d2a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2e8:	b092      	sub	sp, #72	; 0x48
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	689a      	ldr	r2, [r3, #8]
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	431a      	orrs	r2, r3
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	695b      	ldr	r3, [r3, #20]
 800d302:	431a      	orrs	r2, r3
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	69db      	ldr	r3, [r3, #28]
 800d308:	4313      	orrs	r3, r2
 800d30a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	4bbe      	ldr	r3, [pc, #760]	; (800d60c <UART_SetConfig+0x328>)
 800d314:	4013      	ands	r3, r2
 800d316:	697a      	ldr	r2, [r7, #20]
 800d318:	6812      	ldr	r2, [r2, #0]
 800d31a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d31c:	430b      	orrs	r3, r1
 800d31e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	68da      	ldr	r2, [r3, #12]
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	430a      	orrs	r2, r1
 800d334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4ab3      	ldr	r2, [pc, #716]	; (800d610 <UART_SetConfig+0x32c>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d004      	beq.n	800d350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	6a1b      	ldr	r3, [r3, #32]
 800d34a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d34c:	4313      	orrs	r3, r2
 800d34e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	689a      	ldr	r2, [r3, #8]
 800d356:	4baf      	ldr	r3, [pc, #700]	; (800d614 <UART_SetConfig+0x330>)
 800d358:	4013      	ands	r3, r2
 800d35a:	697a      	ldr	r2, [r7, #20]
 800d35c:	6812      	ldr	r2, [r2, #0]
 800d35e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d360:	430b      	orrs	r3, r1
 800d362:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d36a:	f023 010f 	bic.w	r1, r3, #15
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	430a      	orrs	r2, r1
 800d378:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4aa6      	ldr	r2, [pc, #664]	; (800d618 <UART_SetConfig+0x334>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d177      	bne.n	800d474 <UART_SetConfig+0x190>
 800d384:	4ba5      	ldr	r3, [pc, #660]	; (800d61c <UART_SetConfig+0x338>)
 800d386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d388:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d38c:	2b28      	cmp	r3, #40	; 0x28
 800d38e:	d86d      	bhi.n	800d46c <UART_SetConfig+0x188>
 800d390:	a201      	add	r2, pc, #4	; (adr r2, 800d398 <UART_SetConfig+0xb4>)
 800d392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d396:	bf00      	nop
 800d398:	0800d43d 	.word	0x0800d43d
 800d39c:	0800d46d 	.word	0x0800d46d
 800d3a0:	0800d46d 	.word	0x0800d46d
 800d3a4:	0800d46d 	.word	0x0800d46d
 800d3a8:	0800d46d 	.word	0x0800d46d
 800d3ac:	0800d46d 	.word	0x0800d46d
 800d3b0:	0800d46d 	.word	0x0800d46d
 800d3b4:	0800d46d 	.word	0x0800d46d
 800d3b8:	0800d445 	.word	0x0800d445
 800d3bc:	0800d46d 	.word	0x0800d46d
 800d3c0:	0800d46d 	.word	0x0800d46d
 800d3c4:	0800d46d 	.word	0x0800d46d
 800d3c8:	0800d46d 	.word	0x0800d46d
 800d3cc:	0800d46d 	.word	0x0800d46d
 800d3d0:	0800d46d 	.word	0x0800d46d
 800d3d4:	0800d46d 	.word	0x0800d46d
 800d3d8:	0800d44d 	.word	0x0800d44d
 800d3dc:	0800d46d 	.word	0x0800d46d
 800d3e0:	0800d46d 	.word	0x0800d46d
 800d3e4:	0800d46d 	.word	0x0800d46d
 800d3e8:	0800d46d 	.word	0x0800d46d
 800d3ec:	0800d46d 	.word	0x0800d46d
 800d3f0:	0800d46d 	.word	0x0800d46d
 800d3f4:	0800d46d 	.word	0x0800d46d
 800d3f8:	0800d455 	.word	0x0800d455
 800d3fc:	0800d46d 	.word	0x0800d46d
 800d400:	0800d46d 	.word	0x0800d46d
 800d404:	0800d46d 	.word	0x0800d46d
 800d408:	0800d46d 	.word	0x0800d46d
 800d40c:	0800d46d 	.word	0x0800d46d
 800d410:	0800d46d 	.word	0x0800d46d
 800d414:	0800d46d 	.word	0x0800d46d
 800d418:	0800d45d 	.word	0x0800d45d
 800d41c:	0800d46d 	.word	0x0800d46d
 800d420:	0800d46d 	.word	0x0800d46d
 800d424:	0800d46d 	.word	0x0800d46d
 800d428:	0800d46d 	.word	0x0800d46d
 800d42c:	0800d46d 	.word	0x0800d46d
 800d430:	0800d46d 	.word	0x0800d46d
 800d434:	0800d46d 	.word	0x0800d46d
 800d438:	0800d465 	.word	0x0800d465
 800d43c:	2301      	movs	r3, #1
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d442:	e326      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d444:	2304      	movs	r3, #4
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44a:	e322      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d44c:	2308      	movs	r3, #8
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d452:	e31e      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d454:	2310      	movs	r3, #16
 800d456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45a:	e31a      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d45c:	2320      	movs	r3, #32
 800d45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d462:	e316      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d464:	2340      	movs	r3, #64	; 0x40
 800d466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46a:	e312      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d46c:	2380      	movs	r3, #128	; 0x80
 800d46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d472:	e30e      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a69      	ldr	r2, [pc, #420]	; (800d620 <UART_SetConfig+0x33c>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d130      	bne.n	800d4e0 <UART_SetConfig+0x1fc>
 800d47e:	4b67      	ldr	r3, [pc, #412]	; (800d61c <UART_SetConfig+0x338>)
 800d480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d482:	f003 0307 	and.w	r3, r3, #7
 800d486:	2b05      	cmp	r3, #5
 800d488:	d826      	bhi.n	800d4d8 <UART_SetConfig+0x1f4>
 800d48a:	a201      	add	r2, pc, #4	; (adr r2, 800d490 <UART_SetConfig+0x1ac>)
 800d48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d490:	0800d4a9 	.word	0x0800d4a9
 800d494:	0800d4b1 	.word	0x0800d4b1
 800d498:	0800d4b9 	.word	0x0800d4b9
 800d49c:	0800d4c1 	.word	0x0800d4c1
 800d4a0:	0800d4c9 	.word	0x0800d4c9
 800d4a4:	0800d4d1 	.word	0x0800d4d1
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ae:	e2f0      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d4b0:	2304      	movs	r3, #4
 800d4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b6:	e2ec      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d4b8:	2308      	movs	r3, #8
 800d4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4be:	e2e8      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d4c0:	2310      	movs	r3, #16
 800d4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c6:	e2e4      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d4c8:	2320      	movs	r3, #32
 800d4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ce:	e2e0      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d4d0:	2340      	movs	r3, #64	; 0x40
 800d4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d6:	e2dc      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d4d8:	2380      	movs	r3, #128	; 0x80
 800d4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4de:	e2d8      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a4f      	ldr	r2, [pc, #316]	; (800d624 <UART_SetConfig+0x340>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d130      	bne.n	800d54c <UART_SetConfig+0x268>
 800d4ea:	4b4c      	ldr	r3, [pc, #304]	; (800d61c <UART_SetConfig+0x338>)
 800d4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ee:	f003 0307 	and.w	r3, r3, #7
 800d4f2:	2b05      	cmp	r3, #5
 800d4f4:	d826      	bhi.n	800d544 <UART_SetConfig+0x260>
 800d4f6:	a201      	add	r2, pc, #4	; (adr r2, 800d4fc <UART_SetConfig+0x218>)
 800d4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4fc:	0800d515 	.word	0x0800d515
 800d500:	0800d51d 	.word	0x0800d51d
 800d504:	0800d525 	.word	0x0800d525
 800d508:	0800d52d 	.word	0x0800d52d
 800d50c:	0800d535 	.word	0x0800d535
 800d510:	0800d53d 	.word	0x0800d53d
 800d514:	2300      	movs	r3, #0
 800d516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51a:	e2ba      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d51c:	2304      	movs	r3, #4
 800d51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d522:	e2b6      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d524:	2308      	movs	r3, #8
 800d526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52a:	e2b2      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d52c:	2310      	movs	r3, #16
 800d52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d532:	e2ae      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d534:	2320      	movs	r3, #32
 800d536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53a:	e2aa      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d53c:	2340      	movs	r3, #64	; 0x40
 800d53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d542:	e2a6      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d544:	2380      	movs	r3, #128	; 0x80
 800d546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d54a:	e2a2      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a35      	ldr	r2, [pc, #212]	; (800d628 <UART_SetConfig+0x344>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d130      	bne.n	800d5b8 <UART_SetConfig+0x2d4>
 800d556:	4b31      	ldr	r3, [pc, #196]	; (800d61c <UART_SetConfig+0x338>)
 800d558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d55a:	f003 0307 	and.w	r3, r3, #7
 800d55e:	2b05      	cmp	r3, #5
 800d560:	d826      	bhi.n	800d5b0 <UART_SetConfig+0x2cc>
 800d562:	a201      	add	r2, pc, #4	; (adr r2, 800d568 <UART_SetConfig+0x284>)
 800d564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d568:	0800d581 	.word	0x0800d581
 800d56c:	0800d589 	.word	0x0800d589
 800d570:	0800d591 	.word	0x0800d591
 800d574:	0800d599 	.word	0x0800d599
 800d578:	0800d5a1 	.word	0x0800d5a1
 800d57c:	0800d5a9 	.word	0x0800d5a9
 800d580:	2300      	movs	r3, #0
 800d582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d586:	e284      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d588:	2304      	movs	r3, #4
 800d58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58e:	e280      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d590:	2308      	movs	r3, #8
 800d592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d596:	e27c      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d598:	2310      	movs	r3, #16
 800d59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59e:	e278      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d5a0:	2320      	movs	r3, #32
 800d5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a6:	e274      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d5a8:	2340      	movs	r3, #64	; 0x40
 800d5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ae:	e270      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d5b0:	2380      	movs	r3, #128	; 0x80
 800d5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5b6:	e26c      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a1b      	ldr	r2, [pc, #108]	; (800d62c <UART_SetConfig+0x348>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d142      	bne.n	800d648 <UART_SetConfig+0x364>
 800d5c2:	4b16      	ldr	r3, [pc, #88]	; (800d61c <UART_SetConfig+0x338>)
 800d5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5c6:	f003 0307 	and.w	r3, r3, #7
 800d5ca:	2b05      	cmp	r3, #5
 800d5cc:	d838      	bhi.n	800d640 <UART_SetConfig+0x35c>
 800d5ce:	a201      	add	r2, pc, #4	; (adr r2, 800d5d4 <UART_SetConfig+0x2f0>)
 800d5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d4:	0800d5ed 	.word	0x0800d5ed
 800d5d8:	0800d5f5 	.word	0x0800d5f5
 800d5dc:	0800d5fd 	.word	0x0800d5fd
 800d5e0:	0800d605 	.word	0x0800d605
 800d5e4:	0800d631 	.word	0x0800d631
 800d5e8:	0800d639 	.word	0x0800d639
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f2:	e24e      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d5f4:	2304      	movs	r3, #4
 800d5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fa:	e24a      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d5fc:	2308      	movs	r3, #8
 800d5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d602:	e246      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d604:	2310      	movs	r3, #16
 800d606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d60a:	e242      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d60c:	cfff69f3 	.word	0xcfff69f3
 800d610:	58000c00 	.word	0x58000c00
 800d614:	11fff4ff 	.word	0x11fff4ff
 800d618:	40011000 	.word	0x40011000
 800d61c:	58024400 	.word	0x58024400
 800d620:	40004400 	.word	0x40004400
 800d624:	40004800 	.word	0x40004800
 800d628:	40004c00 	.word	0x40004c00
 800d62c:	40005000 	.word	0x40005000
 800d630:	2320      	movs	r3, #32
 800d632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d636:	e22c      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d638:	2340      	movs	r3, #64	; 0x40
 800d63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63e:	e228      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d640:	2380      	movs	r3, #128	; 0x80
 800d642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d646:	e224      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4ab1      	ldr	r2, [pc, #708]	; (800d914 <UART_SetConfig+0x630>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d176      	bne.n	800d740 <UART_SetConfig+0x45c>
 800d652:	4bb1      	ldr	r3, [pc, #708]	; (800d918 <UART_SetConfig+0x634>)
 800d654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d65a:	2b28      	cmp	r3, #40	; 0x28
 800d65c:	d86c      	bhi.n	800d738 <UART_SetConfig+0x454>
 800d65e:	a201      	add	r2, pc, #4	; (adr r2, 800d664 <UART_SetConfig+0x380>)
 800d660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d664:	0800d709 	.word	0x0800d709
 800d668:	0800d739 	.word	0x0800d739
 800d66c:	0800d739 	.word	0x0800d739
 800d670:	0800d739 	.word	0x0800d739
 800d674:	0800d739 	.word	0x0800d739
 800d678:	0800d739 	.word	0x0800d739
 800d67c:	0800d739 	.word	0x0800d739
 800d680:	0800d739 	.word	0x0800d739
 800d684:	0800d711 	.word	0x0800d711
 800d688:	0800d739 	.word	0x0800d739
 800d68c:	0800d739 	.word	0x0800d739
 800d690:	0800d739 	.word	0x0800d739
 800d694:	0800d739 	.word	0x0800d739
 800d698:	0800d739 	.word	0x0800d739
 800d69c:	0800d739 	.word	0x0800d739
 800d6a0:	0800d739 	.word	0x0800d739
 800d6a4:	0800d719 	.word	0x0800d719
 800d6a8:	0800d739 	.word	0x0800d739
 800d6ac:	0800d739 	.word	0x0800d739
 800d6b0:	0800d739 	.word	0x0800d739
 800d6b4:	0800d739 	.word	0x0800d739
 800d6b8:	0800d739 	.word	0x0800d739
 800d6bc:	0800d739 	.word	0x0800d739
 800d6c0:	0800d739 	.word	0x0800d739
 800d6c4:	0800d721 	.word	0x0800d721
 800d6c8:	0800d739 	.word	0x0800d739
 800d6cc:	0800d739 	.word	0x0800d739
 800d6d0:	0800d739 	.word	0x0800d739
 800d6d4:	0800d739 	.word	0x0800d739
 800d6d8:	0800d739 	.word	0x0800d739
 800d6dc:	0800d739 	.word	0x0800d739
 800d6e0:	0800d739 	.word	0x0800d739
 800d6e4:	0800d729 	.word	0x0800d729
 800d6e8:	0800d739 	.word	0x0800d739
 800d6ec:	0800d739 	.word	0x0800d739
 800d6f0:	0800d739 	.word	0x0800d739
 800d6f4:	0800d739 	.word	0x0800d739
 800d6f8:	0800d739 	.word	0x0800d739
 800d6fc:	0800d739 	.word	0x0800d739
 800d700:	0800d739 	.word	0x0800d739
 800d704:	0800d731 	.word	0x0800d731
 800d708:	2301      	movs	r3, #1
 800d70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d70e:	e1c0      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d710:	2304      	movs	r3, #4
 800d712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d716:	e1bc      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d718:	2308      	movs	r3, #8
 800d71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71e:	e1b8      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d720:	2310      	movs	r3, #16
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d726:	e1b4      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d728:	2320      	movs	r3, #32
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72e:	e1b0      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d730:	2340      	movs	r3, #64	; 0x40
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d736:	e1ac      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d738:	2380      	movs	r3, #128	; 0x80
 800d73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73e:	e1a8      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a75      	ldr	r2, [pc, #468]	; (800d91c <UART_SetConfig+0x638>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d130      	bne.n	800d7ac <UART_SetConfig+0x4c8>
 800d74a:	4b73      	ldr	r3, [pc, #460]	; (800d918 <UART_SetConfig+0x634>)
 800d74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d74e:	f003 0307 	and.w	r3, r3, #7
 800d752:	2b05      	cmp	r3, #5
 800d754:	d826      	bhi.n	800d7a4 <UART_SetConfig+0x4c0>
 800d756:	a201      	add	r2, pc, #4	; (adr r2, 800d75c <UART_SetConfig+0x478>)
 800d758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75c:	0800d775 	.word	0x0800d775
 800d760:	0800d77d 	.word	0x0800d77d
 800d764:	0800d785 	.word	0x0800d785
 800d768:	0800d78d 	.word	0x0800d78d
 800d76c:	0800d795 	.word	0x0800d795
 800d770:	0800d79d 	.word	0x0800d79d
 800d774:	2300      	movs	r3, #0
 800d776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77a:	e18a      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d77c:	2304      	movs	r3, #4
 800d77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d782:	e186      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d784:	2308      	movs	r3, #8
 800d786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78a:	e182      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d78c:	2310      	movs	r3, #16
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d792:	e17e      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d794:	2320      	movs	r3, #32
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e17a      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d79c:	2340      	movs	r3, #64	; 0x40
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e176      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d7a4:	2380      	movs	r3, #128	; 0x80
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7aa:	e172      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a5b      	ldr	r2, [pc, #364]	; (800d920 <UART_SetConfig+0x63c>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d130      	bne.n	800d818 <UART_SetConfig+0x534>
 800d7b6:	4b58      	ldr	r3, [pc, #352]	; (800d918 <UART_SetConfig+0x634>)
 800d7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ba:	f003 0307 	and.w	r3, r3, #7
 800d7be:	2b05      	cmp	r3, #5
 800d7c0:	d826      	bhi.n	800d810 <UART_SetConfig+0x52c>
 800d7c2:	a201      	add	r2, pc, #4	; (adr r2, 800d7c8 <UART_SetConfig+0x4e4>)
 800d7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c8:	0800d7e1 	.word	0x0800d7e1
 800d7cc:	0800d7e9 	.word	0x0800d7e9
 800d7d0:	0800d7f1 	.word	0x0800d7f1
 800d7d4:	0800d7f9 	.word	0x0800d7f9
 800d7d8:	0800d801 	.word	0x0800d801
 800d7dc:	0800d809 	.word	0x0800d809
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e6:	e154      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d7e8:	2304      	movs	r3, #4
 800d7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ee:	e150      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d7f0:	2308      	movs	r3, #8
 800d7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f6:	e14c      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d7f8:	2310      	movs	r3, #16
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fe:	e148      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d800:	2320      	movs	r3, #32
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d806:	e144      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d808:	2340      	movs	r3, #64	; 0x40
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80e:	e140      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d810:	2380      	movs	r3, #128	; 0x80
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d816:	e13c      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a41      	ldr	r2, [pc, #260]	; (800d924 <UART_SetConfig+0x640>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	f040 8082 	bne.w	800d928 <UART_SetConfig+0x644>
 800d824:	4b3c      	ldr	r3, [pc, #240]	; (800d918 <UART_SetConfig+0x634>)
 800d826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d82c:	2b28      	cmp	r3, #40	; 0x28
 800d82e:	d86d      	bhi.n	800d90c <UART_SetConfig+0x628>
 800d830:	a201      	add	r2, pc, #4	; (adr r2, 800d838 <UART_SetConfig+0x554>)
 800d832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d836:	bf00      	nop
 800d838:	0800d8dd 	.word	0x0800d8dd
 800d83c:	0800d90d 	.word	0x0800d90d
 800d840:	0800d90d 	.word	0x0800d90d
 800d844:	0800d90d 	.word	0x0800d90d
 800d848:	0800d90d 	.word	0x0800d90d
 800d84c:	0800d90d 	.word	0x0800d90d
 800d850:	0800d90d 	.word	0x0800d90d
 800d854:	0800d90d 	.word	0x0800d90d
 800d858:	0800d8e5 	.word	0x0800d8e5
 800d85c:	0800d90d 	.word	0x0800d90d
 800d860:	0800d90d 	.word	0x0800d90d
 800d864:	0800d90d 	.word	0x0800d90d
 800d868:	0800d90d 	.word	0x0800d90d
 800d86c:	0800d90d 	.word	0x0800d90d
 800d870:	0800d90d 	.word	0x0800d90d
 800d874:	0800d90d 	.word	0x0800d90d
 800d878:	0800d8ed 	.word	0x0800d8ed
 800d87c:	0800d90d 	.word	0x0800d90d
 800d880:	0800d90d 	.word	0x0800d90d
 800d884:	0800d90d 	.word	0x0800d90d
 800d888:	0800d90d 	.word	0x0800d90d
 800d88c:	0800d90d 	.word	0x0800d90d
 800d890:	0800d90d 	.word	0x0800d90d
 800d894:	0800d90d 	.word	0x0800d90d
 800d898:	0800d8f5 	.word	0x0800d8f5
 800d89c:	0800d90d 	.word	0x0800d90d
 800d8a0:	0800d90d 	.word	0x0800d90d
 800d8a4:	0800d90d 	.word	0x0800d90d
 800d8a8:	0800d90d 	.word	0x0800d90d
 800d8ac:	0800d90d 	.word	0x0800d90d
 800d8b0:	0800d90d 	.word	0x0800d90d
 800d8b4:	0800d90d 	.word	0x0800d90d
 800d8b8:	0800d8fd 	.word	0x0800d8fd
 800d8bc:	0800d90d 	.word	0x0800d90d
 800d8c0:	0800d90d 	.word	0x0800d90d
 800d8c4:	0800d90d 	.word	0x0800d90d
 800d8c8:	0800d90d 	.word	0x0800d90d
 800d8cc:	0800d90d 	.word	0x0800d90d
 800d8d0:	0800d90d 	.word	0x0800d90d
 800d8d4:	0800d90d 	.word	0x0800d90d
 800d8d8:	0800d905 	.word	0x0800d905
 800d8dc:	2301      	movs	r3, #1
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e2:	e0d6      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d8e4:	2304      	movs	r3, #4
 800d8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ea:	e0d2      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d8ec:	2308      	movs	r3, #8
 800d8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8f2:	e0ce      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d8f4:	2310      	movs	r3, #16
 800d8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fa:	e0ca      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d8fc:	2320      	movs	r3, #32
 800d8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d902:	e0c6      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d904:	2340      	movs	r3, #64	; 0x40
 800d906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90a:	e0c2      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d90c:	2380      	movs	r3, #128	; 0x80
 800d90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d912:	e0be      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d914:	40011400 	.word	0x40011400
 800d918:	58024400 	.word	0x58024400
 800d91c:	40007800 	.word	0x40007800
 800d920:	40007c00 	.word	0x40007c00
 800d924:	40011800 	.word	0x40011800
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4aad      	ldr	r2, [pc, #692]	; (800dbe4 <UART_SetConfig+0x900>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d176      	bne.n	800da20 <UART_SetConfig+0x73c>
 800d932:	4bad      	ldr	r3, [pc, #692]	; (800dbe8 <UART_SetConfig+0x904>)
 800d934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d93a:	2b28      	cmp	r3, #40	; 0x28
 800d93c:	d86c      	bhi.n	800da18 <UART_SetConfig+0x734>
 800d93e:	a201      	add	r2, pc, #4	; (adr r2, 800d944 <UART_SetConfig+0x660>)
 800d940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d944:	0800d9e9 	.word	0x0800d9e9
 800d948:	0800da19 	.word	0x0800da19
 800d94c:	0800da19 	.word	0x0800da19
 800d950:	0800da19 	.word	0x0800da19
 800d954:	0800da19 	.word	0x0800da19
 800d958:	0800da19 	.word	0x0800da19
 800d95c:	0800da19 	.word	0x0800da19
 800d960:	0800da19 	.word	0x0800da19
 800d964:	0800d9f1 	.word	0x0800d9f1
 800d968:	0800da19 	.word	0x0800da19
 800d96c:	0800da19 	.word	0x0800da19
 800d970:	0800da19 	.word	0x0800da19
 800d974:	0800da19 	.word	0x0800da19
 800d978:	0800da19 	.word	0x0800da19
 800d97c:	0800da19 	.word	0x0800da19
 800d980:	0800da19 	.word	0x0800da19
 800d984:	0800d9f9 	.word	0x0800d9f9
 800d988:	0800da19 	.word	0x0800da19
 800d98c:	0800da19 	.word	0x0800da19
 800d990:	0800da19 	.word	0x0800da19
 800d994:	0800da19 	.word	0x0800da19
 800d998:	0800da19 	.word	0x0800da19
 800d99c:	0800da19 	.word	0x0800da19
 800d9a0:	0800da19 	.word	0x0800da19
 800d9a4:	0800da01 	.word	0x0800da01
 800d9a8:	0800da19 	.word	0x0800da19
 800d9ac:	0800da19 	.word	0x0800da19
 800d9b0:	0800da19 	.word	0x0800da19
 800d9b4:	0800da19 	.word	0x0800da19
 800d9b8:	0800da19 	.word	0x0800da19
 800d9bc:	0800da19 	.word	0x0800da19
 800d9c0:	0800da19 	.word	0x0800da19
 800d9c4:	0800da09 	.word	0x0800da09
 800d9c8:	0800da19 	.word	0x0800da19
 800d9cc:	0800da19 	.word	0x0800da19
 800d9d0:	0800da19 	.word	0x0800da19
 800d9d4:	0800da19 	.word	0x0800da19
 800d9d8:	0800da19 	.word	0x0800da19
 800d9dc:	0800da19 	.word	0x0800da19
 800d9e0:	0800da19 	.word	0x0800da19
 800d9e4:	0800da11 	.word	0x0800da11
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ee:	e050      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d9f0:	2304      	movs	r3, #4
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f6:	e04c      	b.n	800da92 <UART_SetConfig+0x7ae>
 800d9f8:	2308      	movs	r3, #8
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fe:	e048      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da00:	2310      	movs	r3, #16
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da06:	e044      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da08:	2320      	movs	r3, #32
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0e:	e040      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da10:	2340      	movs	r3, #64	; 0x40
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da16:	e03c      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da18:	2380      	movs	r3, #128	; 0x80
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1e:	e038      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a71      	ldr	r2, [pc, #452]	; (800dbec <UART_SetConfig+0x908>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d130      	bne.n	800da8c <UART_SetConfig+0x7a8>
 800da2a:	4b6f      	ldr	r3, [pc, #444]	; (800dbe8 <UART_SetConfig+0x904>)
 800da2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da2e:	f003 0307 	and.w	r3, r3, #7
 800da32:	2b05      	cmp	r3, #5
 800da34:	d826      	bhi.n	800da84 <UART_SetConfig+0x7a0>
 800da36:	a201      	add	r2, pc, #4	; (adr r2, 800da3c <UART_SetConfig+0x758>)
 800da38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3c:	0800da55 	.word	0x0800da55
 800da40:	0800da5d 	.word	0x0800da5d
 800da44:	0800da65 	.word	0x0800da65
 800da48:	0800da6d 	.word	0x0800da6d
 800da4c:	0800da75 	.word	0x0800da75
 800da50:	0800da7d 	.word	0x0800da7d
 800da54:	2302      	movs	r3, #2
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5a:	e01a      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da5c:	2304      	movs	r3, #4
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da62:	e016      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da64:	2308      	movs	r3, #8
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6a:	e012      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da6c:	2310      	movs	r3, #16
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da72:	e00e      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da74:	2320      	movs	r3, #32
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7a:	e00a      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da7c:	2340      	movs	r3, #64	; 0x40
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da82:	e006      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da84:	2380      	movs	r3, #128	; 0x80
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8a:	e002      	b.n	800da92 <UART_SetConfig+0x7ae>
 800da8c:	2380      	movs	r3, #128	; 0x80
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a55      	ldr	r2, [pc, #340]	; (800dbec <UART_SetConfig+0x908>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	f040 80f8 	bne.w	800dc8e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800daa2:	2b20      	cmp	r3, #32
 800daa4:	dc46      	bgt.n	800db34 <UART_SetConfig+0x850>
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	db75      	blt.n	800db96 <UART_SetConfig+0x8b2>
 800daaa:	3b02      	subs	r3, #2
 800daac:	2b1e      	cmp	r3, #30
 800daae:	d872      	bhi.n	800db96 <UART_SetConfig+0x8b2>
 800dab0:	a201      	add	r2, pc, #4	; (adr r2, 800dab8 <UART_SetConfig+0x7d4>)
 800dab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab6:	bf00      	nop
 800dab8:	0800db3b 	.word	0x0800db3b
 800dabc:	0800db97 	.word	0x0800db97
 800dac0:	0800db43 	.word	0x0800db43
 800dac4:	0800db97 	.word	0x0800db97
 800dac8:	0800db97 	.word	0x0800db97
 800dacc:	0800db97 	.word	0x0800db97
 800dad0:	0800db53 	.word	0x0800db53
 800dad4:	0800db97 	.word	0x0800db97
 800dad8:	0800db97 	.word	0x0800db97
 800dadc:	0800db97 	.word	0x0800db97
 800dae0:	0800db97 	.word	0x0800db97
 800dae4:	0800db97 	.word	0x0800db97
 800dae8:	0800db97 	.word	0x0800db97
 800daec:	0800db97 	.word	0x0800db97
 800daf0:	0800db63 	.word	0x0800db63
 800daf4:	0800db97 	.word	0x0800db97
 800daf8:	0800db97 	.word	0x0800db97
 800dafc:	0800db97 	.word	0x0800db97
 800db00:	0800db97 	.word	0x0800db97
 800db04:	0800db97 	.word	0x0800db97
 800db08:	0800db97 	.word	0x0800db97
 800db0c:	0800db97 	.word	0x0800db97
 800db10:	0800db97 	.word	0x0800db97
 800db14:	0800db97 	.word	0x0800db97
 800db18:	0800db97 	.word	0x0800db97
 800db1c:	0800db97 	.word	0x0800db97
 800db20:	0800db97 	.word	0x0800db97
 800db24:	0800db97 	.word	0x0800db97
 800db28:	0800db97 	.word	0x0800db97
 800db2c:	0800db97 	.word	0x0800db97
 800db30:	0800db89 	.word	0x0800db89
 800db34:	2b40      	cmp	r3, #64	; 0x40
 800db36:	d02a      	beq.n	800db8e <UART_SetConfig+0x8aa>
 800db38:	e02d      	b.n	800db96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800db3a:	f7fc fe0b 	bl	800a754 <HAL_RCCEx_GetD3PCLK1Freq>
 800db3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db40:	e02f      	b.n	800dba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db46:	4618      	mov	r0, r3
 800db48:	f7fc fe1a 	bl	800a780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db50:	e027      	b.n	800dba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db52:	f107 0318 	add.w	r3, r7, #24
 800db56:	4618      	mov	r0, r3
 800db58:	f7fc ff66 	bl	800aa28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db60:	e01f      	b.n	800dba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db62:	4b21      	ldr	r3, [pc, #132]	; (800dbe8 <UART_SetConfig+0x904>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0320 	and.w	r3, r3, #32
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d009      	beq.n	800db82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db6e:	4b1e      	ldr	r3, [pc, #120]	; (800dbe8 <UART_SetConfig+0x904>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	08db      	lsrs	r3, r3, #3
 800db74:	f003 0303 	and.w	r3, r3, #3
 800db78:	4a1d      	ldr	r2, [pc, #116]	; (800dbf0 <UART_SetConfig+0x90c>)
 800db7a:	fa22 f303 	lsr.w	r3, r2, r3
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db80:	e00f      	b.n	800dba2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800db82:	4b1b      	ldr	r3, [pc, #108]	; (800dbf0 <UART_SetConfig+0x90c>)
 800db84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db86:	e00c      	b.n	800dba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db88:	4b1a      	ldr	r3, [pc, #104]	; (800dbf4 <UART_SetConfig+0x910>)
 800db8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db8c:	e009      	b.n	800dba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db94:	e005      	b.n	800dba2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800db96:	2300      	movs	r3, #0
 800db98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dba0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f000 81ee 	beq.w	800df86 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbae:	4a12      	ldr	r2, [pc, #72]	; (800dbf8 <UART_SetConfig+0x914>)
 800dbb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbbc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	685a      	ldr	r2, [r3, #4]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	4413      	add	r3, r2
 800dbc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d305      	bcc.n	800dbda <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d910      	bls.n	800dbfc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dbe0:	e1d1      	b.n	800df86 <UART_SetConfig+0xca2>
 800dbe2:	bf00      	nop
 800dbe4:	40011c00 	.word	0x40011c00
 800dbe8:	58024400 	.word	0x58024400
 800dbec:	58000c00 	.word	0x58000c00
 800dbf0:	03d09000 	.word	0x03d09000
 800dbf4:	003d0900 	.word	0x003d0900
 800dbf8:	0800fe48 	.word	0x0800fe48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbfe:	2200      	movs	r2, #0
 800dc00:	60bb      	str	r3, [r7, #8]
 800dc02:	60fa      	str	r2, [r7, #12]
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc08:	4ac0      	ldr	r2, [pc, #768]	; (800df0c <UART_SetConfig+0xc28>)
 800dc0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	2200      	movs	r2, #0
 800dc12:	603b      	str	r3, [r7, #0]
 800dc14:	607a      	str	r2, [r7, #4]
 800dc16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc1e:	f7f2 fb7f 	bl	8000320 <__aeabi_uldivmod>
 800dc22:	4602      	mov	r2, r0
 800dc24:	460b      	mov	r3, r1
 800dc26:	4610      	mov	r0, r2
 800dc28:	4619      	mov	r1, r3
 800dc2a:	f04f 0200 	mov.w	r2, #0
 800dc2e:	f04f 0300 	mov.w	r3, #0
 800dc32:	020b      	lsls	r3, r1, #8
 800dc34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc38:	0202      	lsls	r2, r0, #8
 800dc3a:	6979      	ldr	r1, [r7, #20]
 800dc3c:	6849      	ldr	r1, [r1, #4]
 800dc3e:	0849      	lsrs	r1, r1, #1
 800dc40:	2000      	movs	r0, #0
 800dc42:	460c      	mov	r4, r1
 800dc44:	4605      	mov	r5, r0
 800dc46:	eb12 0804 	adds.w	r8, r2, r4
 800dc4a:	eb43 0905 	adc.w	r9, r3, r5
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	469a      	mov	sl, r3
 800dc56:	4693      	mov	fp, r2
 800dc58:	4652      	mov	r2, sl
 800dc5a:	465b      	mov	r3, fp
 800dc5c:	4640      	mov	r0, r8
 800dc5e:	4649      	mov	r1, r9
 800dc60:	f7f2 fb5e 	bl	8000320 <__aeabi_uldivmod>
 800dc64:	4602      	mov	r2, r0
 800dc66:	460b      	mov	r3, r1
 800dc68:	4613      	mov	r3, r2
 800dc6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc72:	d308      	bcc.n	800dc86 <UART_SetConfig+0x9a2>
 800dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc7a:	d204      	bcs.n	800dc86 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc82:	60da      	str	r2, [r3, #12]
 800dc84:	e17f      	b.n	800df86 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dc8c:	e17b      	b.n	800df86 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	69db      	ldr	r3, [r3, #28]
 800dc92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc96:	f040 80bd 	bne.w	800de14 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dc9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc9e:	2b20      	cmp	r3, #32
 800dca0:	dc48      	bgt.n	800dd34 <UART_SetConfig+0xa50>
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	db7b      	blt.n	800dd9e <UART_SetConfig+0xaba>
 800dca6:	2b20      	cmp	r3, #32
 800dca8:	d879      	bhi.n	800dd9e <UART_SetConfig+0xaba>
 800dcaa:	a201      	add	r2, pc, #4	; (adr r2, 800dcb0 <UART_SetConfig+0x9cc>)
 800dcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb0:	0800dd3b 	.word	0x0800dd3b
 800dcb4:	0800dd43 	.word	0x0800dd43
 800dcb8:	0800dd9f 	.word	0x0800dd9f
 800dcbc:	0800dd9f 	.word	0x0800dd9f
 800dcc0:	0800dd4b 	.word	0x0800dd4b
 800dcc4:	0800dd9f 	.word	0x0800dd9f
 800dcc8:	0800dd9f 	.word	0x0800dd9f
 800dccc:	0800dd9f 	.word	0x0800dd9f
 800dcd0:	0800dd5b 	.word	0x0800dd5b
 800dcd4:	0800dd9f 	.word	0x0800dd9f
 800dcd8:	0800dd9f 	.word	0x0800dd9f
 800dcdc:	0800dd9f 	.word	0x0800dd9f
 800dce0:	0800dd9f 	.word	0x0800dd9f
 800dce4:	0800dd9f 	.word	0x0800dd9f
 800dce8:	0800dd9f 	.word	0x0800dd9f
 800dcec:	0800dd9f 	.word	0x0800dd9f
 800dcf0:	0800dd6b 	.word	0x0800dd6b
 800dcf4:	0800dd9f 	.word	0x0800dd9f
 800dcf8:	0800dd9f 	.word	0x0800dd9f
 800dcfc:	0800dd9f 	.word	0x0800dd9f
 800dd00:	0800dd9f 	.word	0x0800dd9f
 800dd04:	0800dd9f 	.word	0x0800dd9f
 800dd08:	0800dd9f 	.word	0x0800dd9f
 800dd0c:	0800dd9f 	.word	0x0800dd9f
 800dd10:	0800dd9f 	.word	0x0800dd9f
 800dd14:	0800dd9f 	.word	0x0800dd9f
 800dd18:	0800dd9f 	.word	0x0800dd9f
 800dd1c:	0800dd9f 	.word	0x0800dd9f
 800dd20:	0800dd9f 	.word	0x0800dd9f
 800dd24:	0800dd9f 	.word	0x0800dd9f
 800dd28:	0800dd9f 	.word	0x0800dd9f
 800dd2c:	0800dd9f 	.word	0x0800dd9f
 800dd30:	0800dd91 	.word	0x0800dd91
 800dd34:	2b40      	cmp	r3, #64	; 0x40
 800dd36:	d02e      	beq.n	800dd96 <UART_SetConfig+0xab2>
 800dd38:	e031      	b.n	800dd9e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd3a:	f7fb fde5 	bl	8009908 <HAL_RCC_GetPCLK1Freq>
 800dd3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd40:	e033      	b.n	800ddaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd42:	f7fb fdf7 	bl	8009934 <HAL_RCC_GetPCLK2Freq>
 800dd46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd48:	e02f      	b.n	800ddaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fc fd16 	bl	800a780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd58:	e027      	b.n	800ddaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd5a:	f107 0318 	add.w	r3, r7, #24
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fc fe62 	bl	800aa28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd68:	e01f      	b.n	800ddaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd6a:	4b69      	ldr	r3, [pc, #420]	; (800df10 <UART_SetConfig+0xc2c>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f003 0320 	and.w	r3, r3, #32
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d009      	beq.n	800dd8a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd76:	4b66      	ldr	r3, [pc, #408]	; (800df10 <UART_SetConfig+0xc2c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	08db      	lsrs	r3, r3, #3
 800dd7c:	f003 0303 	and.w	r3, r3, #3
 800dd80:	4a64      	ldr	r2, [pc, #400]	; (800df14 <UART_SetConfig+0xc30>)
 800dd82:	fa22 f303 	lsr.w	r3, r2, r3
 800dd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd88:	e00f      	b.n	800ddaa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800dd8a:	4b62      	ldr	r3, [pc, #392]	; (800df14 <UART_SetConfig+0xc30>)
 800dd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd8e:	e00c      	b.n	800ddaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd90:	4b61      	ldr	r3, [pc, #388]	; (800df18 <UART_SetConfig+0xc34>)
 800dd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd94:	e009      	b.n	800ddaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd9c:	e005      	b.n	800ddaa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dda8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ddaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f000 80ea 	beq.w	800df86 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb6:	4a55      	ldr	r2, [pc, #340]	; (800df0c <UART_SetConfig+0xc28>)
 800ddb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddc4:	005a      	lsls	r2, r3, #1
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	085b      	lsrs	r3, r3, #1
 800ddcc:	441a      	add	r2, r3
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddda:	2b0f      	cmp	r3, #15
 800dddc:	d916      	bls.n	800de0c <UART_SetConfig+0xb28>
 800ddde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dde4:	d212      	bcs.n	800de0c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	f023 030f 	bic.w	r3, r3, #15
 800ddee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ddf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf2:	085b      	lsrs	r3, r3, #1
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	f003 0307 	and.w	r3, r3, #7
 800ddfa:	b29a      	uxth	r2, r3
 800ddfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ddfe:	4313      	orrs	r3, r2
 800de00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800de08:	60da      	str	r2, [r3, #12]
 800de0a:	e0bc      	b.n	800df86 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800de0c:	2301      	movs	r3, #1
 800de0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de12:	e0b8      	b.n	800df86 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800de14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de18:	2b20      	cmp	r3, #32
 800de1a:	dc4b      	bgt.n	800deb4 <UART_SetConfig+0xbd0>
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f2c0 8087 	blt.w	800df30 <UART_SetConfig+0xc4c>
 800de22:	2b20      	cmp	r3, #32
 800de24:	f200 8084 	bhi.w	800df30 <UART_SetConfig+0xc4c>
 800de28:	a201      	add	r2, pc, #4	; (adr r2, 800de30 <UART_SetConfig+0xb4c>)
 800de2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2e:	bf00      	nop
 800de30:	0800debb 	.word	0x0800debb
 800de34:	0800dec3 	.word	0x0800dec3
 800de38:	0800df31 	.word	0x0800df31
 800de3c:	0800df31 	.word	0x0800df31
 800de40:	0800decb 	.word	0x0800decb
 800de44:	0800df31 	.word	0x0800df31
 800de48:	0800df31 	.word	0x0800df31
 800de4c:	0800df31 	.word	0x0800df31
 800de50:	0800dedb 	.word	0x0800dedb
 800de54:	0800df31 	.word	0x0800df31
 800de58:	0800df31 	.word	0x0800df31
 800de5c:	0800df31 	.word	0x0800df31
 800de60:	0800df31 	.word	0x0800df31
 800de64:	0800df31 	.word	0x0800df31
 800de68:	0800df31 	.word	0x0800df31
 800de6c:	0800df31 	.word	0x0800df31
 800de70:	0800deeb 	.word	0x0800deeb
 800de74:	0800df31 	.word	0x0800df31
 800de78:	0800df31 	.word	0x0800df31
 800de7c:	0800df31 	.word	0x0800df31
 800de80:	0800df31 	.word	0x0800df31
 800de84:	0800df31 	.word	0x0800df31
 800de88:	0800df31 	.word	0x0800df31
 800de8c:	0800df31 	.word	0x0800df31
 800de90:	0800df31 	.word	0x0800df31
 800de94:	0800df31 	.word	0x0800df31
 800de98:	0800df31 	.word	0x0800df31
 800de9c:	0800df31 	.word	0x0800df31
 800dea0:	0800df31 	.word	0x0800df31
 800dea4:	0800df31 	.word	0x0800df31
 800dea8:	0800df31 	.word	0x0800df31
 800deac:	0800df31 	.word	0x0800df31
 800deb0:	0800df23 	.word	0x0800df23
 800deb4:	2b40      	cmp	r3, #64	; 0x40
 800deb6:	d037      	beq.n	800df28 <UART_SetConfig+0xc44>
 800deb8:	e03a      	b.n	800df30 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800deba:	f7fb fd25 	bl	8009908 <HAL_RCC_GetPCLK1Freq>
 800debe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dec0:	e03c      	b.n	800df3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dec2:	f7fb fd37 	bl	8009934 <HAL_RCC_GetPCLK2Freq>
 800dec6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dec8:	e038      	b.n	800df3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fc fc56 	bl	800a780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ded4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ded8:	e030      	b.n	800df3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800deda:	f107 0318 	add.w	r3, r7, #24
 800dede:	4618      	mov	r0, r3
 800dee0:	f7fc fda2 	bl	800aa28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dee8:	e028      	b.n	800df3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800deea:	4b09      	ldr	r3, [pc, #36]	; (800df10 <UART_SetConfig+0xc2c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 0320 	and.w	r3, r3, #32
 800def2:	2b00      	cmp	r3, #0
 800def4:	d012      	beq.n	800df1c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800def6:	4b06      	ldr	r3, [pc, #24]	; (800df10 <UART_SetConfig+0xc2c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	08db      	lsrs	r3, r3, #3
 800defc:	f003 0303 	and.w	r3, r3, #3
 800df00:	4a04      	ldr	r2, [pc, #16]	; (800df14 <UART_SetConfig+0xc30>)
 800df02:	fa22 f303 	lsr.w	r3, r2, r3
 800df06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df08:	e018      	b.n	800df3c <UART_SetConfig+0xc58>
 800df0a:	bf00      	nop
 800df0c:	0800fe48 	.word	0x0800fe48
 800df10:	58024400 	.word	0x58024400
 800df14:	03d09000 	.word	0x03d09000
 800df18:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800df1c:	4b24      	ldr	r3, [pc, #144]	; (800dfb0 <UART_SetConfig+0xccc>)
 800df1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df20:	e00c      	b.n	800df3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df22:	4b24      	ldr	r3, [pc, #144]	; (800dfb4 <UART_SetConfig+0xcd0>)
 800df24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df26:	e009      	b.n	800df3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df2e:	e005      	b.n	800df3c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800df30:	2300      	movs	r3, #0
 800df32:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df34:	2301      	movs	r3, #1
 800df36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df3a:	bf00      	nop
    }

    if (pclk != 0U)
 800df3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d021      	beq.n	800df86 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df46:	4a1c      	ldr	r2, [pc, #112]	; (800dfb8 <UART_SetConfig+0xcd4>)
 800df48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df4c:	461a      	mov	r2, r3
 800df4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df50:	fbb3 f2f2 	udiv	r2, r3, r2
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	085b      	lsrs	r3, r3, #1
 800df5a:	441a      	add	r2, r3
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	fbb2 f3f3 	udiv	r3, r2, r3
 800df64:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df68:	2b0f      	cmp	r3, #15
 800df6a:	d909      	bls.n	800df80 <UART_SetConfig+0xc9c>
 800df6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df72:	d205      	bcs.n	800df80 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df76:	b29a      	uxth	r2, r3
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	60da      	str	r2, [r3, #12]
 800df7e:	e002      	b.n	800df86 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	2201      	movs	r2, #1
 800df8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2201      	movs	r2, #1
 800df92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	2200      	movs	r2, #0
 800df9a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dfa2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3748      	adds	r7, #72	; 0x48
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfb0:	03d09000 	.word	0x03d09000
 800dfb4:	003d0900 	.word	0x003d0900
 800dfb8:	0800fe48 	.word	0x0800fe48

0800dfbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00a      	beq.n	800dfe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	430a      	orrs	r2, r1
 800dfe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfea:	f003 0302 	and.w	r3, r3, #2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d00a      	beq.n	800e008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	430a      	orrs	r2, r1
 800e006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00c:	f003 0304 	and.w	r3, r3, #4
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00a      	beq.n	800e02a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	430a      	orrs	r2, r1
 800e028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02e:	f003 0308 	and.w	r3, r3, #8
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00a      	beq.n	800e04c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	430a      	orrs	r2, r1
 800e04a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e050:	f003 0310 	and.w	r3, r3, #16
 800e054:	2b00      	cmp	r3, #0
 800e056:	d00a      	beq.n	800e06e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	430a      	orrs	r2, r1
 800e06c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e072:	f003 0320 	and.w	r3, r3, #32
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00a      	beq.n	800e090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	430a      	orrs	r2, r1
 800e08e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d01a      	beq.n	800e0d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	430a      	orrs	r2, r1
 800e0b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0ba:	d10a      	bne.n	800e0d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	430a      	orrs	r2, r1
 800e0d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00a      	beq.n	800e0f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	430a      	orrs	r2, r1
 800e0f2:	605a      	str	r2, [r3, #4]
  }
}
 800e0f4:	bf00      	nop
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af02      	add	r7, sp, #8
 800e106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e110:	f7f7 f88c 	bl	800522c <HAL_GetTick>
 800e114:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f003 0308 	and.w	r3, r3, #8
 800e120:	2b08      	cmp	r3, #8
 800e122:	d10e      	bne.n	800e142 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f82f 	bl	800e196 <UART_WaitOnFlagUntilTimeout>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d001      	beq.n	800e142 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e13e:	2303      	movs	r3, #3
 800e140:	e025      	b.n	800e18e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f003 0304 	and.w	r3, r3, #4
 800e14c:	2b04      	cmp	r3, #4
 800e14e:	d10e      	bne.n	800e16e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f819 	bl	800e196 <UART_WaitOnFlagUntilTimeout>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e16a:	2303      	movs	r3, #3
 800e16c:	e00f      	b.n	800e18e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2220      	movs	r2, #32
 800e172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2220      	movs	r2, #32
 800e17a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b09c      	sub	sp, #112	; 0x70
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	60f8      	str	r0, [r7, #12]
 800e19e:	60b9      	str	r1, [r7, #8]
 800e1a0:	603b      	str	r3, [r7, #0]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1a6:	e0a9      	b.n	800e2fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ae:	f000 80a5 	beq.w	800e2fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1b2:	f7f7 f83b 	bl	800522c <HAL_GetTick>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	1ad3      	subs	r3, r2, r3
 800e1bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d302      	bcc.n	800e1c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800e1c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d140      	bne.n	800e24a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1d0:	e853 3f00 	ldrex	r3, [r3]
 800e1d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1dc:	667b      	str	r3, [r7, #100]	; 0x64
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1ee:	e841 2300 	strex	r3, r2, [r1]
 800e1f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e1f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1e6      	bne.n	800e1c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3308      	adds	r3, #8
 800e200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e204:	e853 3f00 	ldrex	r3, [r3]
 800e208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20c:	f023 0301 	bic.w	r3, r3, #1
 800e210:	663b      	str	r3, [r7, #96]	; 0x60
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	3308      	adds	r3, #8
 800e218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e21a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e21c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e222:	e841 2300 	strex	r3, r2, [r1]
 800e226:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d1e5      	bne.n	800e1fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2220      	movs	r2, #32
 800e232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2220      	movs	r2, #32
 800e23a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2200      	movs	r2, #0
 800e242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e246:	2303      	movs	r3, #3
 800e248:	e069      	b.n	800e31e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f003 0304 	and.w	r3, r3, #4
 800e254:	2b00      	cmp	r3, #0
 800e256:	d051      	beq.n	800e2fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	69db      	ldr	r3, [r3, #28]
 800e25e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e266:	d149      	bne.n	800e2fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e270:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27a:	e853 3f00 	ldrex	r3, [r3]
 800e27e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e286:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	461a      	mov	r2, r3
 800e28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e290:	637b      	str	r3, [r7, #52]	; 0x34
 800e292:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e298:	e841 2300 	strex	r3, r2, [r1]
 800e29c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1e6      	bne.n	800e272 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	3308      	adds	r3, #8
 800e2aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	e853 3f00 	ldrex	r3, [r3]
 800e2b2:	613b      	str	r3, [r7, #16]
   return(result);
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	f023 0301 	bic.w	r3, r3, #1
 800e2ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	3308      	adds	r3, #8
 800e2c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2c4:	623a      	str	r2, [r7, #32]
 800e2c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c8:	69f9      	ldr	r1, [r7, #28]
 800e2ca:	6a3a      	ldr	r2, [r7, #32]
 800e2cc:	e841 2300 	strex	r3, r2, [r1]
 800e2d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1e5      	bne.n	800e2a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2220      	movs	r2, #32
 800e2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2220      	movs	r2, #32
 800e2e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2220      	movs	r2, #32
 800e2ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e2f8:	2303      	movs	r3, #3
 800e2fa:	e010      	b.n	800e31e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	69da      	ldr	r2, [r3, #28]
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	4013      	ands	r3, r2
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	429a      	cmp	r2, r3
 800e30a:	bf0c      	ite	eq
 800e30c:	2301      	moveq	r3, #1
 800e30e:	2300      	movne	r3, #0
 800e310:	b2db      	uxtb	r3, r3
 800e312:	461a      	mov	r2, r3
 800e314:	79fb      	ldrb	r3, [r7, #7]
 800e316:	429a      	cmp	r2, r3
 800e318:	f43f af46 	beq.w	800e1a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3770      	adds	r7, #112	; 0x70
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
	...

0800e328 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b096      	sub	sp, #88	; 0x58
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	4613      	mov	r3, r2
 800e334:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	68ba      	ldr	r2, [r7, #8]
 800e33a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	88fa      	ldrh	r2, [r7, #6]
 800e340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2222      	movs	r2, #34	; 0x22
 800e350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d02c      	beq.n	800e3b6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e360:	4a42      	ldr	r2, [pc, #264]	; (800e46c <UART_Start_Receive_DMA+0x144>)
 800e362:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e368:	4a41      	ldr	r2, [pc, #260]	; (800e470 <UART_Start_Receive_DMA+0x148>)
 800e36a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e370:	4a40      	ldr	r2, [pc, #256]	; (800e474 <UART_Start_Receive_DMA+0x14c>)
 800e372:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e378:	2200      	movs	r2, #0
 800e37a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	3324      	adds	r3, #36	; 0x24
 800e386:	4619      	mov	r1, r3
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e38c:	461a      	mov	r2, r3
 800e38e:	88fb      	ldrh	r3, [r7, #6]
 800e390:	f7f7 fdaa 	bl	8005ee8 <HAL_DMA_Start_IT>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00d      	beq.n	800e3b6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2210      	movs	r2, #16
 800e39e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2220      	movs	r2, #32
 800e3ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e055      	b.n	800e462 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	691b      	ldr	r3, [r3, #16]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d018      	beq.n	800e3f8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ce:	e853 3f00 	ldrex	r3, [r3]
 800e3d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3da:	657b      	str	r3, [r7, #84]	; 0x54
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e3e6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3ec:	e841 2300 	strex	r3, r2, [r1]
 800e3f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1e6      	bne.n	800e3c6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	3308      	adds	r3, #8
 800e3fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e402:	e853 3f00 	ldrex	r3, [r3]
 800e406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40a:	f043 0301 	orr.w	r3, r3, #1
 800e40e:	653b      	str	r3, [r7, #80]	; 0x50
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	3308      	adds	r3, #8
 800e416:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e418:	637a      	str	r2, [r7, #52]	; 0x34
 800e41a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e41c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e41e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e420:	e841 2300 	strex	r3, r2, [r1]
 800e424:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d1e5      	bne.n	800e3f8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	3308      	adds	r3, #8
 800e432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	e853 3f00 	ldrex	r3, [r3]
 800e43a:	613b      	str	r3, [r7, #16]
   return(result);
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e442:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	3308      	adds	r3, #8
 800e44a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e44c:	623a      	str	r2, [r7, #32]
 800e44e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e450:	69f9      	ldr	r1, [r7, #28]
 800e452:	6a3a      	ldr	r2, [r7, #32]
 800e454:	e841 2300 	strex	r3, r2, [r1]
 800e458:	61bb      	str	r3, [r7, #24]
   return(result);
 800e45a:	69bb      	ldr	r3, [r7, #24]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d1e5      	bne.n	800e42c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e460:	2300      	movs	r3, #0
}
 800e462:	4618      	mov	r0, r3
 800e464:	3758      	adds	r7, #88	; 0x58
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	0800e67b 	.word	0x0800e67b
 800e470:	0800e79d 	.word	0x0800e79d
 800e474:	0800e7d5 	.word	0x0800e7d5

0800e478 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e478:	b480      	push	{r7}
 800e47a:	b08f      	sub	sp, #60	; 0x3c
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e486:	6a3b      	ldr	r3, [r7, #32]
 800e488:	e853 3f00 	ldrex	r3, [r3]
 800e48c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e48e:	69fb      	ldr	r3, [r7, #28]
 800e490:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e494:	637b      	str	r3, [r7, #52]	; 0x34
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	461a      	mov	r2, r3
 800e49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e49e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4a0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4a6:	e841 2300 	strex	r3, r2, [r1]
 800e4aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1e6      	bne.n	800e480 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	3308      	adds	r3, #8
 800e4b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	e853 3f00 	ldrex	r3, [r3]
 800e4c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e4c8:	633b      	str	r3, [r7, #48]	; 0x30
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	3308      	adds	r3, #8
 800e4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d2:	61ba      	str	r2, [r7, #24]
 800e4d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d6:	6979      	ldr	r1, [r7, #20]
 800e4d8:	69ba      	ldr	r2, [r7, #24]
 800e4da:	e841 2300 	strex	r3, r2, [r1]
 800e4de:	613b      	str	r3, [r7, #16]
   return(result);
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1e5      	bne.n	800e4b2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2220      	movs	r2, #32
 800e4ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e4ee:	bf00      	nop
 800e4f0:	373c      	adds	r7, #60	; 0x3c
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
	...

0800e4fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b095      	sub	sp, #84	; 0x54
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e50c:	e853 3f00 	ldrex	r3, [r3]
 800e510:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e518:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	461a      	mov	r2, r3
 800e520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e522:	643b      	str	r3, [r7, #64]	; 0x40
 800e524:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e52a:	e841 2300 	strex	r3, r2, [r1]
 800e52e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1e6      	bne.n	800e504 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	3308      	adds	r3, #8
 800e53c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e53e:	6a3b      	ldr	r3, [r7, #32]
 800e540:	e853 3f00 	ldrex	r3, [r3]
 800e544:	61fb      	str	r3, [r7, #28]
   return(result);
 800e546:	69fa      	ldr	r2, [r7, #28]
 800e548:	4b1e      	ldr	r3, [pc, #120]	; (800e5c4 <UART_EndRxTransfer+0xc8>)
 800e54a:	4013      	ands	r3, r2
 800e54c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3308      	adds	r3, #8
 800e554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e556:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e55c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e55e:	e841 2300 	strex	r3, r2, [r1]
 800e562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1e5      	bne.n	800e536 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d118      	bne.n	800e5a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	e853 3f00 	ldrex	r3, [r3]
 800e57e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	f023 0310 	bic.w	r3, r3, #16
 800e586:	647b      	str	r3, [r7, #68]	; 0x44
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	461a      	mov	r2, r3
 800e58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e590:	61bb      	str	r3, [r7, #24]
 800e592:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e594:	6979      	ldr	r1, [r7, #20]
 800e596:	69ba      	ldr	r2, [r7, #24]
 800e598:	e841 2300 	strex	r3, r2, [r1]
 800e59c:	613b      	str	r3, [r7, #16]
   return(result);
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1e6      	bne.n	800e572 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2220      	movs	r2, #32
 800e5a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e5b8:	bf00      	nop
 800e5ba:	3754      	adds	r7, #84	; 0x54
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr
 800e5c4:	effffffe 	.word	0xeffffffe

0800e5c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b090      	sub	sp, #64	; 0x40
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	69db      	ldr	r3, [r3, #28]
 800e5da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5de:	d037      	beq.n	800e650 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	e853 3f00 	ldrex	r3, [r3]
 800e5f6:	623b      	str	r3, [r7, #32]
   return(result);
 800e5f8:	6a3b      	ldr	r3, [r7, #32]
 800e5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800e600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3308      	adds	r3, #8
 800e606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e608:	633a      	str	r2, [r7, #48]	; 0x30
 800e60a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e60c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e60e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e610:	e841 2300 	strex	r3, r2, [r1]
 800e614:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1e5      	bne.n	800e5e8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	e853 3f00 	ldrex	r3, [r3]
 800e628:	60fb      	str	r3, [r7, #12]
   return(result);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e630:	637b      	str	r3, [r7, #52]	; 0x34
 800e632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	461a      	mov	r2, r3
 800e638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e63a:	61fb      	str	r3, [r7, #28]
 800e63c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e63e:	69b9      	ldr	r1, [r7, #24]
 800e640:	69fa      	ldr	r2, [r7, #28]
 800e642:	e841 2300 	strex	r3, r2, [r1]
 800e646:	617b      	str	r3, [r7, #20]
   return(result);
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1e6      	bne.n	800e61c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e64e:	e002      	b.n	800e656 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e650:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e652:	f7f4 fe09 	bl	8003268 <HAL_UART_TxCpltCallback>
}
 800e656:	bf00      	nop
 800e658:	3740      	adds	r7, #64	; 0x40
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b084      	sub	sp, #16
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f7fe fe19 	bl	800d2a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e672:	bf00      	nop
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e67a:	b580      	push	{r7, lr}
 800e67c:	b09c      	sub	sp, #112	; 0x70
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e686:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	69db      	ldr	r3, [r3, #28]
 800e68c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e690:	d071      	beq.n	800e776 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e694:	2200      	movs	r2, #0
 800e696:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e69a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6a2:	e853 3f00 	ldrex	r3, [r3]
 800e6a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e6b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800e6ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e6be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6c0:	e841 2300 	strex	r3, r2, [r1]
 800e6c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d1e6      	bne.n	800e69a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	3308      	adds	r3, #8
 800e6d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d6:	e853 3f00 	ldrex	r3, [r3]
 800e6da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6de:	f023 0301 	bic.w	r3, r3, #1
 800e6e2:	667b      	str	r3, [r7, #100]	; 0x64
 800e6e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	3308      	adds	r3, #8
 800e6ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e6ec:	647a      	str	r2, [r7, #68]	; 0x44
 800e6ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6f4:	e841 2300 	strex	r3, r2, [r1]
 800e6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d1e5      	bne.n	800e6cc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	3308      	adds	r3, #8
 800e706:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70a:	e853 3f00 	ldrex	r3, [r3]
 800e70e:	623b      	str	r3, [r7, #32]
   return(result);
 800e710:	6a3b      	ldr	r3, [r7, #32]
 800e712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e716:	663b      	str	r3, [r7, #96]	; 0x60
 800e718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	3308      	adds	r3, #8
 800e71e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e720:	633a      	str	r2, [r7, #48]	; 0x30
 800e722:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e728:	e841 2300 	strex	r3, r2, [r1]
 800e72c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e730:	2b00      	cmp	r3, #0
 800e732:	d1e5      	bne.n	800e700 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e736:	2220      	movs	r2, #32
 800e738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e740:	2b01      	cmp	r3, #1
 800e742:	d118      	bne.n	800e776 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	e853 3f00 	ldrex	r3, [r3]
 800e750:	60fb      	str	r3, [r7, #12]
   return(result);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f023 0310 	bic.w	r3, r3, #16
 800e758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e75a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	461a      	mov	r2, r3
 800e760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e762:	61fb      	str	r3, [r7, #28]
 800e764:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e766:	69b9      	ldr	r1, [r7, #24]
 800e768:	69fa      	ldr	r2, [r7, #28]
 800e76a:	e841 2300 	strex	r3, r2, [r1]
 800e76e:	617b      	str	r3, [r7, #20]
   return(result);
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1e6      	bne.n	800e744 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d107      	bne.n	800e78e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e77e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e784:	4619      	mov	r1, r3
 800e786:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e788:	f7fe fda0 	bl	800d2cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e78c:	e002      	b.n	800e794 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e78e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e790:	f7f4 fd7c 	bl	800328c <HAL_UART_RxCpltCallback>
}
 800e794:	bf00      	nop
 800e796:	3770      	adds	r7, #112	; 0x70
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d109      	bne.n	800e7c6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e7b8:	085b      	lsrs	r3, r3, #1
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	4619      	mov	r1, r3
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f7fe fd84 	bl	800d2cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e7c4:	e002      	b.n	800e7cc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	f7fe fd76 	bl	800d2b8 <HAL_UART_RxHalfCpltCallback>
}
 800e7cc:	bf00      	nop
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7fc:	2b80      	cmp	r3, #128	; 0x80
 800e7fe:	d109      	bne.n	800e814 <UART_DMAError+0x40>
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	2b21      	cmp	r3, #33	; 0x21
 800e804:	d106      	bne.n	800e814 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	2200      	movs	r2, #0
 800e80a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e80e:	6978      	ldr	r0, [r7, #20]
 800e810:	f7ff fe32 	bl	800e478 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e81e:	2b40      	cmp	r3, #64	; 0x40
 800e820:	d109      	bne.n	800e836 <UART_DMAError+0x62>
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2b22      	cmp	r3, #34	; 0x22
 800e826:	d106      	bne.n	800e836 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	2200      	movs	r2, #0
 800e82c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e830:	6978      	ldr	r0, [r7, #20]
 800e832:	f7ff fe63 	bl	800e4fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e83c:	f043 0210 	orr.w	r2, r3, #16
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e846:	6978      	ldr	r0, [r7, #20]
 800e848:	f7f4 fcd6 	bl	80031f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e84c:	bf00      	nop
 800e84e:	3718      	adds	r7, #24
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e860:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2200      	movs	r2, #0
 800e866:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f7f4 fcc0 	bl	80031f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e878:	bf00      	nop
 800e87a:	3710      	adds	r7, #16
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b088      	sub	sp, #32
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	e853 3f00 	ldrex	r3, [r3]
 800e894:	60bb      	str	r3, [r7, #8]
   return(result);
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e89c:	61fb      	str	r3, [r7, #28]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	61bb      	str	r3, [r7, #24]
 800e8a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8aa:	6979      	ldr	r1, [r7, #20]
 800e8ac:	69ba      	ldr	r2, [r7, #24]
 800e8ae:	e841 2300 	strex	r3, r2, [r1]
 800e8b2:	613b      	str	r3, [r7, #16]
   return(result);
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d1e6      	bne.n	800e888 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2220      	movs	r2, #32
 800e8be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7f4 fccd 	bl	8003268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8ce:	bf00      	nop
 800e8d0:	3720      	adds	r7, #32
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e8d6:	b480      	push	{r7}
 800e8d8:	b083      	sub	sp, #12
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e8de:	bf00      	nop
 800e8e0:	370c      	adds	r7, #12
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr

0800e8ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e8ea:	b480      	push	{r7}
 800e8ec:	b083      	sub	sp, #12
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e8f2:	bf00      	nop
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr

0800e8fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e8fe:	b480      	push	{r7}
 800e900:	b083      	sub	sp, #12
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e906:	bf00      	nop
 800e908:	370c      	adds	r7, #12
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr

0800e912 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e912:	b480      	push	{r7}
 800e914:	b085      	sub	sp, #20
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e920:	2b01      	cmp	r3, #1
 800e922:	d101      	bne.n	800e928 <HAL_UARTEx_DisableFifoMode+0x16>
 800e924:	2302      	movs	r3, #2
 800e926:	e027      	b.n	800e978 <HAL_UARTEx_DisableFifoMode+0x66>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2201      	movs	r2, #1
 800e92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2224      	movs	r2, #36	; 0x24
 800e934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f022 0201 	bic.w	r2, r2, #1
 800e94e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e956:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2200      	movs	r2, #0
 800e95c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2220      	movs	r2, #32
 800e96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e976:	2300      	movs	r3, #0
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3714      	adds	r7, #20
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e994:	2b01      	cmp	r3, #1
 800e996:	d101      	bne.n	800e99c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e998:	2302      	movs	r3, #2
 800e99a:	e02d      	b.n	800e9f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2201      	movs	r2, #1
 800e9a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2224      	movs	r2, #36	; 0x24
 800e9a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f022 0201 	bic.w	r2, r2, #1
 800e9c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	683a      	ldr	r2, [r7, #0]
 800e9d4:	430a      	orrs	r2, r1
 800e9d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 f84f 	bl	800ea7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2220      	movs	r2, #32
 800e9ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e9f6:	2300      	movs	r3, #0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3710      	adds	r7, #16
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d101      	bne.n	800ea18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ea14:	2302      	movs	r3, #2
 800ea16:	e02d      	b.n	800ea74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2224      	movs	r2, #36	; 0x24
 800ea24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f022 0201 	bic.w	r2, r2, #1
 800ea3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	430a      	orrs	r2, r1
 800ea52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 f811 	bl	800ea7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2220      	movs	r2, #32
 800ea66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d108      	bne.n	800ea9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2201      	movs	r2, #1
 800ea98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea9c:	e031      	b.n	800eb02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea9e:	2310      	movs	r3, #16
 800eaa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eaa2:	2310      	movs	r3, #16
 800eaa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	0e5b      	lsrs	r3, r3, #25
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	f003 0307 	and.w	r3, r3, #7
 800eab4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	0f5b      	lsrs	r3, r3, #29
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	f003 0307 	and.w	r3, r3, #7
 800eac4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eac6:	7bbb      	ldrb	r3, [r7, #14]
 800eac8:	7b3a      	ldrb	r2, [r7, #12]
 800eaca:	4911      	ldr	r1, [pc, #68]	; (800eb10 <UARTEx_SetNbDataToProcess+0x94>)
 800eacc:	5c8a      	ldrb	r2, [r1, r2]
 800eace:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ead2:	7b3a      	ldrb	r2, [r7, #12]
 800ead4:	490f      	ldr	r1, [pc, #60]	; (800eb14 <UARTEx_SetNbDataToProcess+0x98>)
 800ead6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ead8:	fb93 f3f2 	sdiv	r3, r3, r2
 800eadc:	b29a      	uxth	r2, r3
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eae4:	7bfb      	ldrb	r3, [r7, #15]
 800eae6:	7b7a      	ldrb	r2, [r7, #13]
 800eae8:	4909      	ldr	r1, [pc, #36]	; (800eb10 <UARTEx_SetNbDataToProcess+0x94>)
 800eaea:	5c8a      	ldrb	r2, [r1, r2]
 800eaec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eaf0:	7b7a      	ldrb	r2, [r7, #13]
 800eaf2:	4908      	ldr	r1, [pc, #32]	; (800eb14 <UARTEx_SetNbDataToProcess+0x98>)
 800eaf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eaf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800eb02:	bf00      	nop
 800eb04:	3714      	adds	r7, #20
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	0800fe60 	.word	0x0800fe60
 800eb14:	0800fe68 	.word	0x0800fe68

0800eb18 <__cxa_pure_virtual>:
 800eb18:	b508      	push	{r3, lr}
 800eb1a:	f000 f80d 	bl	800eb38 <_ZSt9terminatev>

0800eb1e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eb1e:	b508      	push	{r3, lr}
 800eb20:	4780      	blx	r0
 800eb22:	f000 fe53 	bl	800f7cc <abort>
	...

0800eb28 <_ZSt13get_terminatev>:
 800eb28:	4b02      	ldr	r3, [pc, #8]	; (800eb34 <_ZSt13get_terminatev+0xc>)
 800eb2a:	6818      	ldr	r0, [r3, #0]
 800eb2c:	f3bf 8f5b 	dmb	ish
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	240001d8 	.word	0x240001d8

0800eb38 <_ZSt9terminatev>:
 800eb38:	b508      	push	{r3, lr}
 800eb3a:	f7ff fff5 	bl	800eb28 <_ZSt13get_terminatev>
 800eb3e:	f7ff ffee 	bl	800eb1e <_ZN10__cxxabiv111__terminateEPFvvE>
 800eb42:	0000      	movs	r0, r0
 800eb44:	0000      	movs	r0, r0
	...

0800eb48 <cos>:
 800eb48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb4a:	eeb0 7b40 	vmov.f64	d7, d0
 800eb4e:	ee17 3a90 	vmov	r3, s15
 800eb52:	4a21      	ldr	r2, [pc, #132]	; (800ebd8 <cos+0x90>)
 800eb54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	dc06      	bgt.n	800eb6a <cos+0x22>
 800eb5c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800ebd0 <cos+0x88>
 800eb60:	b005      	add	sp, #20
 800eb62:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb66:	f000 b9cb 	b.w	800ef00 <__kernel_cos>
 800eb6a:	4a1c      	ldr	r2, [pc, #112]	; (800ebdc <cos+0x94>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	dd04      	ble.n	800eb7a <cos+0x32>
 800eb70:	ee30 0b40 	vsub.f64	d0, d0, d0
 800eb74:	b005      	add	sp, #20
 800eb76:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb7a:	4668      	mov	r0, sp
 800eb7c:	f000 f87c 	bl	800ec78 <__ieee754_rem_pio2>
 800eb80:	f000 0003 	and.w	r0, r0, #3
 800eb84:	2801      	cmp	r0, #1
 800eb86:	d009      	beq.n	800eb9c <cos+0x54>
 800eb88:	2802      	cmp	r0, #2
 800eb8a:	d010      	beq.n	800ebae <cos+0x66>
 800eb8c:	b9b0      	cbnz	r0, 800ebbc <cos+0x74>
 800eb8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb92:	ed9d 0b00 	vldr	d0, [sp]
 800eb96:	f000 f9b3 	bl	800ef00 <__kernel_cos>
 800eb9a:	e7eb      	b.n	800eb74 <cos+0x2c>
 800eb9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eba0:	ed9d 0b00 	vldr	d0, [sp]
 800eba4:	f000 fcb0 	bl	800f508 <__kernel_sin>
 800eba8:	eeb1 0b40 	vneg.f64	d0, d0
 800ebac:	e7e2      	b.n	800eb74 <cos+0x2c>
 800ebae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebb2:	ed9d 0b00 	vldr	d0, [sp]
 800ebb6:	f000 f9a3 	bl	800ef00 <__kernel_cos>
 800ebba:	e7f5      	b.n	800eba8 <cos+0x60>
 800ebbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebc0:	ed9d 0b00 	vldr	d0, [sp]
 800ebc4:	2001      	movs	r0, #1
 800ebc6:	f000 fc9f 	bl	800f508 <__kernel_sin>
 800ebca:	e7d3      	b.n	800eb74 <cos+0x2c>
 800ebcc:	f3af 8000 	nop.w
	...
 800ebd8:	3fe921fb 	.word	0x3fe921fb
 800ebdc:	7fefffff 	.word	0x7fefffff

0800ebe0 <sin>:
 800ebe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebe2:	eeb0 7b40 	vmov.f64	d7, d0
 800ebe6:	ee17 3a90 	vmov	r3, s15
 800ebea:	4a21      	ldr	r2, [pc, #132]	; (800ec70 <sin+0x90>)
 800ebec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	dc07      	bgt.n	800ec04 <sin+0x24>
 800ebf4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800ec68 <sin+0x88>
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	b005      	add	sp, #20
 800ebfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec00:	f000 bc82 	b.w	800f508 <__kernel_sin>
 800ec04:	4a1b      	ldr	r2, [pc, #108]	; (800ec74 <sin+0x94>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	dd04      	ble.n	800ec14 <sin+0x34>
 800ec0a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ec0e:	b005      	add	sp, #20
 800ec10:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec14:	4668      	mov	r0, sp
 800ec16:	f000 f82f 	bl	800ec78 <__ieee754_rem_pio2>
 800ec1a:	f000 0003 	and.w	r0, r0, #3
 800ec1e:	2801      	cmp	r0, #1
 800ec20:	d00a      	beq.n	800ec38 <sin+0x58>
 800ec22:	2802      	cmp	r0, #2
 800ec24:	d00f      	beq.n	800ec46 <sin+0x66>
 800ec26:	b9c0      	cbnz	r0, 800ec5a <sin+0x7a>
 800ec28:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec2c:	ed9d 0b00 	vldr	d0, [sp]
 800ec30:	2001      	movs	r0, #1
 800ec32:	f000 fc69 	bl	800f508 <__kernel_sin>
 800ec36:	e7ea      	b.n	800ec0e <sin+0x2e>
 800ec38:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec3c:	ed9d 0b00 	vldr	d0, [sp]
 800ec40:	f000 f95e 	bl	800ef00 <__kernel_cos>
 800ec44:	e7e3      	b.n	800ec0e <sin+0x2e>
 800ec46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec4a:	ed9d 0b00 	vldr	d0, [sp]
 800ec4e:	2001      	movs	r0, #1
 800ec50:	f000 fc5a 	bl	800f508 <__kernel_sin>
 800ec54:	eeb1 0b40 	vneg.f64	d0, d0
 800ec58:	e7d9      	b.n	800ec0e <sin+0x2e>
 800ec5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec5e:	ed9d 0b00 	vldr	d0, [sp]
 800ec62:	f000 f94d 	bl	800ef00 <__kernel_cos>
 800ec66:	e7f5      	b.n	800ec54 <sin+0x74>
	...
 800ec70:	3fe921fb 	.word	0x3fe921fb
 800ec74:	7fefffff 	.word	0x7fefffff

0800ec78 <__ieee754_rem_pio2>:
 800ec78:	b570      	push	{r4, r5, r6, lr}
 800ec7a:	eeb0 7b40 	vmov.f64	d7, d0
 800ec7e:	ee17 5a90 	vmov	r5, s15
 800ec82:	4b99      	ldr	r3, [pc, #612]	; (800eee8 <__ieee754_rem_pio2+0x270>)
 800ec84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ec88:	429e      	cmp	r6, r3
 800ec8a:	b088      	sub	sp, #32
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	dc07      	bgt.n	800eca0 <__ieee754_rem_pio2+0x28>
 800ec90:	2200      	movs	r2, #0
 800ec92:	2300      	movs	r3, #0
 800ec94:	ed84 0b00 	vstr	d0, [r4]
 800ec98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ec9c:	2000      	movs	r0, #0
 800ec9e:	e01b      	b.n	800ecd8 <__ieee754_rem_pio2+0x60>
 800eca0:	4b92      	ldr	r3, [pc, #584]	; (800eeec <__ieee754_rem_pio2+0x274>)
 800eca2:	429e      	cmp	r6, r3
 800eca4:	dc3b      	bgt.n	800ed1e <__ieee754_rem_pio2+0xa6>
 800eca6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800ecaa:	2d00      	cmp	r5, #0
 800ecac:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800eea8 <__ieee754_rem_pio2+0x230>
 800ecb0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800ecb4:	dd19      	ble.n	800ecea <__ieee754_rem_pio2+0x72>
 800ecb6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ecba:	429e      	cmp	r6, r3
 800ecbc:	d00e      	beq.n	800ecdc <__ieee754_rem_pio2+0x64>
 800ecbe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800eeb0 <__ieee754_rem_pio2+0x238>
 800ecc2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800ecc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ecca:	ed84 5b00 	vstr	d5, [r4]
 800ecce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ecd2:	ed84 7b02 	vstr	d7, [r4, #8]
 800ecd6:	2001      	movs	r0, #1
 800ecd8:	b008      	add	sp, #32
 800ecda:	bd70      	pop	{r4, r5, r6, pc}
 800ecdc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800eeb8 <__ieee754_rem_pio2+0x240>
 800ece0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ece4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800eec0 <__ieee754_rem_pio2+0x248>
 800ece8:	e7eb      	b.n	800ecc2 <__ieee754_rem_pio2+0x4a>
 800ecea:	429e      	cmp	r6, r3
 800ecec:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ecf0:	d00e      	beq.n	800ed10 <__ieee754_rem_pio2+0x98>
 800ecf2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800eeb0 <__ieee754_rem_pio2+0x238>
 800ecf6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ecfa:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ecfe:	ed84 5b00 	vstr	d5, [r4]
 800ed02:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ed06:	f04f 30ff 	mov.w	r0, #4294967295
 800ed0a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ed0e:	e7e3      	b.n	800ecd8 <__ieee754_rem_pio2+0x60>
 800ed10:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800eeb8 <__ieee754_rem_pio2+0x240>
 800ed14:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ed18:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800eec0 <__ieee754_rem_pio2+0x248>
 800ed1c:	e7eb      	b.n	800ecf6 <__ieee754_rem_pio2+0x7e>
 800ed1e:	4b74      	ldr	r3, [pc, #464]	; (800eef0 <__ieee754_rem_pio2+0x278>)
 800ed20:	429e      	cmp	r6, r3
 800ed22:	dc70      	bgt.n	800ee06 <__ieee754_rem_pio2+0x18e>
 800ed24:	f000 fc48 	bl	800f5b8 <fabs>
 800ed28:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ed2c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800eec8 <__ieee754_rem_pio2+0x250>
 800ed30:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ed34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ed38:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ed3c:	ee17 0a90 	vmov	r0, s15
 800ed40:	eeb1 4b45 	vneg.f64	d4, d5
 800ed44:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800eea8 <__ieee754_rem_pio2+0x230>
 800ed48:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ed4c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800eeb0 <__ieee754_rem_pio2+0x238>
 800ed50:	281f      	cmp	r0, #31
 800ed52:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ed56:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ed5a:	dc08      	bgt.n	800ed6e <__ieee754_rem_pio2+0xf6>
 800ed5c:	4b65      	ldr	r3, [pc, #404]	; (800eef4 <__ieee754_rem_pio2+0x27c>)
 800ed5e:	1e42      	subs	r2, r0, #1
 800ed60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed64:	42b3      	cmp	r3, r6
 800ed66:	d002      	beq.n	800ed6e <__ieee754_rem_pio2+0xf6>
 800ed68:	ed84 6b00 	vstr	d6, [r4]
 800ed6c:	e026      	b.n	800edbc <__ieee754_rem_pio2+0x144>
 800ed6e:	ee16 3a90 	vmov	r3, s13
 800ed72:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ed76:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ed7a:	2b10      	cmp	r3, #16
 800ed7c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ed80:	ddf2      	ble.n	800ed68 <__ieee754_rem_pio2+0xf0>
 800ed82:	eeb0 6b40 	vmov.f64	d6, d0
 800ed86:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800eeb8 <__ieee754_rem_pio2+0x240>
 800ed8a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800eec0 <__ieee754_rem_pio2+0x248>
 800ed8e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ed92:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ed96:	eea4 0b07 	vfma.f64	d0, d4, d7
 800ed9a:	eeb0 7b40 	vmov.f64	d7, d0
 800ed9e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800eda2:	ee36 3b47 	vsub.f64	d3, d6, d7
 800eda6:	ee13 3a90 	vmov	r3, s7
 800edaa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800edae:	1ad3      	subs	r3, r2, r3
 800edb0:	2b31      	cmp	r3, #49	; 0x31
 800edb2:	dc17      	bgt.n	800ede4 <__ieee754_rem_pio2+0x16c>
 800edb4:	eeb0 0b46 	vmov.f64	d0, d6
 800edb8:	ed84 3b00 	vstr	d3, [r4]
 800edbc:	ed94 6b00 	vldr	d6, [r4]
 800edc0:	2d00      	cmp	r5, #0
 800edc2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800edc6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800edca:	ed84 0b02 	vstr	d0, [r4, #8]
 800edce:	da83      	bge.n	800ecd8 <__ieee754_rem_pio2+0x60>
 800edd0:	eeb1 6b46 	vneg.f64	d6, d6
 800edd4:	eeb1 0b40 	vneg.f64	d0, d0
 800edd8:	ed84 6b00 	vstr	d6, [r4]
 800eddc:	ed84 0b02 	vstr	d0, [r4, #8]
 800ede0:	4240      	negs	r0, r0
 800ede2:	e779      	b.n	800ecd8 <__ieee754_rem_pio2+0x60>
 800ede4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800eed0 <__ieee754_rem_pio2+0x258>
 800ede8:	eeb0 0b46 	vmov.f64	d0, d6
 800edec:	eea4 0b03 	vfma.f64	d0, d4, d3
 800edf0:	ee36 7b40 	vsub.f64	d7, d6, d0
 800edf4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800eed8 <__ieee754_rem_pio2+0x260>
 800edf8:	eea4 7b03 	vfma.f64	d7, d4, d3
 800edfc:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800ee00:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ee04:	e7b0      	b.n	800ed68 <__ieee754_rem_pio2+0xf0>
 800ee06:	4b3c      	ldr	r3, [pc, #240]	; (800eef8 <__ieee754_rem_pio2+0x280>)
 800ee08:	429e      	cmp	r6, r3
 800ee0a:	dd06      	ble.n	800ee1a <__ieee754_rem_pio2+0x1a2>
 800ee0c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ee10:	ed80 7b02 	vstr	d7, [r0, #8]
 800ee14:	ed80 7b00 	vstr	d7, [r0]
 800ee18:	e740      	b.n	800ec9c <__ieee754_rem_pio2+0x24>
 800ee1a:	1532      	asrs	r2, r6, #20
 800ee1c:	ee10 0a10 	vmov	r0, s0
 800ee20:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ee24:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ee28:	ec41 0b17 	vmov	d7, r0, r1
 800ee2c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ee30:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800eee0 <__ieee754_rem_pio2+0x268>
 800ee34:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ee38:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ee40:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ee44:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ee48:	a902      	add	r1, sp, #8
 800ee4a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ee4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee52:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ee56:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ee5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee5e:	2603      	movs	r6, #3
 800ee60:	4608      	mov	r0, r1
 800ee62:	ed91 7b04 	vldr	d7, [r1, #16]
 800ee66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6e:	4633      	mov	r3, r6
 800ee70:	f1a1 0108 	sub.w	r1, r1, #8
 800ee74:	f106 36ff 	add.w	r6, r6, #4294967295
 800ee78:	d0f3      	beq.n	800ee62 <__ieee754_rem_pio2+0x1ea>
 800ee7a:	4920      	ldr	r1, [pc, #128]	; (800eefc <__ieee754_rem_pio2+0x284>)
 800ee7c:	9101      	str	r1, [sp, #4]
 800ee7e:	2102      	movs	r1, #2
 800ee80:	9100      	str	r1, [sp, #0]
 800ee82:	4621      	mov	r1, r4
 800ee84:	f000 f8a8 	bl	800efd8 <__kernel_rem_pio2>
 800ee88:	2d00      	cmp	r5, #0
 800ee8a:	f6bf af25 	bge.w	800ecd8 <__ieee754_rem_pio2+0x60>
 800ee8e:	ed94 7b00 	vldr	d7, [r4]
 800ee92:	eeb1 7b47 	vneg.f64	d7, d7
 800ee96:	ed84 7b00 	vstr	d7, [r4]
 800ee9a:	ed94 7b02 	vldr	d7, [r4, #8]
 800ee9e:	eeb1 7b47 	vneg.f64	d7, d7
 800eea2:	ed84 7b02 	vstr	d7, [r4, #8]
 800eea6:	e79b      	b.n	800ede0 <__ieee754_rem_pio2+0x168>
 800eea8:	54400000 	.word	0x54400000
 800eeac:	3ff921fb 	.word	0x3ff921fb
 800eeb0:	1a626331 	.word	0x1a626331
 800eeb4:	3dd0b461 	.word	0x3dd0b461
 800eeb8:	1a600000 	.word	0x1a600000
 800eebc:	3dd0b461 	.word	0x3dd0b461
 800eec0:	2e037073 	.word	0x2e037073
 800eec4:	3ba3198a 	.word	0x3ba3198a
 800eec8:	6dc9c883 	.word	0x6dc9c883
 800eecc:	3fe45f30 	.word	0x3fe45f30
 800eed0:	2e000000 	.word	0x2e000000
 800eed4:	3ba3198a 	.word	0x3ba3198a
 800eed8:	252049c1 	.word	0x252049c1
 800eedc:	397b839a 	.word	0x397b839a
 800eee0:	00000000 	.word	0x00000000
 800eee4:	41700000 	.word	0x41700000
 800eee8:	3fe921fb 	.word	0x3fe921fb
 800eeec:	4002d97b 	.word	0x4002d97b
 800eef0:	413921fb 	.word	0x413921fb
 800eef4:	0800fe70 	.word	0x0800fe70
 800eef8:	7fefffff 	.word	0x7fefffff
 800eefc:	0800fef0 	.word	0x0800fef0

0800ef00 <__kernel_cos>:
 800ef00:	ee10 1a90 	vmov	r1, s1
 800ef04:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800ef08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ef0c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800ef10:	da05      	bge.n	800ef1e <__kernel_cos+0x1e>
 800ef12:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ef16:	ee17 3a90 	vmov	r3, s15
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d03d      	beq.n	800ef9a <__kernel_cos+0x9a>
 800ef1e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800ef22:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800efa0 <__kernel_cos+0xa0>
 800ef26:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800efa8 <__kernel_cos+0xa8>
 800ef2a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800ef2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800efb0 <__kernel_cos+0xb0>
 800ef32:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ef36:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800efb8 <__kernel_cos+0xb8>
 800ef3a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ef3e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800efc0 <__kernel_cos+0xc0>
 800ef42:	4b23      	ldr	r3, [pc, #140]	; (800efd0 <__kernel_cos+0xd0>)
 800ef44:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ef48:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800efc8 <__kernel_cos+0xc8>
 800ef4c:	4299      	cmp	r1, r3
 800ef4e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ef52:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ef56:	ee26 5b03 	vmul.f64	d5, d6, d3
 800ef5a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ef5e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800ef62:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ef66:	dc04      	bgt.n	800ef72 <__kernel_cos+0x72>
 800ef68:	ee37 6b46 	vsub.f64	d6, d7, d6
 800ef6c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800ef70:	4770      	bx	lr
 800ef72:	4b18      	ldr	r3, [pc, #96]	; (800efd4 <__kernel_cos+0xd4>)
 800ef74:	4299      	cmp	r1, r3
 800ef76:	dc0d      	bgt.n	800ef94 <__kernel_cos+0x94>
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ef7e:	ec43 2b15 	vmov	d5, r2, r3
 800ef82:	ee34 0b45 	vsub.f64	d0, d4, d5
 800ef86:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ef8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef8e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ef92:	4770      	bx	lr
 800ef94:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ef98:	e7f3      	b.n	800ef82 <__kernel_cos+0x82>
 800ef9a:	eeb0 0b44 	vmov.f64	d0, d4
 800ef9e:	4770      	bx	lr
 800efa0:	be8838d4 	.word	0xbe8838d4
 800efa4:	bda8fae9 	.word	0xbda8fae9
 800efa8:	bdb4b1c4 	.word	0xbdb4b1c4
 800efac:	3e21ee9e 	.word	0x3e21ee9e
 800efb0:	809c52ad 	.word	0x809c52ad
 800efb4:	be927e4f 	.word	0xbe927e4f
 800efb8:	19cb1590 	.word	0x19cb1590
 800efbc:	3efa01a0 	.word	0x3efa01a0
 800efc0:	16c15177 	.word	0x16c15177
 800efc4:	bf56c16c 	.word	0xbf56c16c
 800efc8:	5555554c 	.word	0x5555554c
 800efcc:	3fa55555 	.word	0x3fa55555
 800efd0:	3fd33332 	.word	0x3fd33332
 800efd4:	3fe90000 	.word	0x3fe90000

0800efd8 <__kernel_rem_pio2>:
 800efd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efdc:	ed2d 8b06 	vpush	{d8-d10}
 800efe0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800efe4:	460f      	mov	r7, r1
 800efe6:	9002      	str	r0, [sp, #8]
 800efe8:	49c5      	ldr	r1, [pc, #788]	; (800f300 <__kernel_rem_pio2+0x328>)
 800efea:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800efec:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800eff0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800eff4:	9301      	str	r3, [sp, #4]
 800eff6:	f112 0f14 	cmn.w	r2, #20
 800effa:	bfa8      	it	ge
 800effc:	2018      	movge	r0, #24
 800effe:	f103 31ff 	add.w	r1, r3, #4294967295
 800f002:	bfb8      	it	lt
 800f004:	2000      	movlt	r0, #0
 800f006:	f06f 0417 	mvn.w	r4, #23
 800f00a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800f2e8 <__kernel_rem_pio2+0x310>
 800f00e:	bfa4      	itt	ge
 800f010:	f1a2 0a03 	subge.w	sl, r2, #3
 800f014:	fb9a f0f0 	sdivge	r0, sl, r0
 800f018:	fb00 4404 	mla	r4, r0, r4, r4
 800f01c:	1a46      	subs	r6, r0, r1
 800f01e:	4414      	add	r4, r2
 800f020:	eb09 0c01 	add.w	ip, r9, r1
 800f024:	ad1a      	add	r5, sp, #104	; 0x68
 800f026:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800f02a:	2200      	movs	r2, #0
 800f02c:	4562      	cmp	r2, ip
 800f02e:	dd10      	ble.n	800f052 <__kernel_rem_pio2+0x7a>
 800f030:	9a01      	ldr	r2, [sp, #4]
 800f032:	ab1a      	add	r3, sp, #104	; 0x68
 800f034:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f038:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800f03c:	f04f 0c00 	mov.w	ip, #0
 800f040:	45cc      	cmp	ip, r9
 800f042:	dc26      	bgt.n	800f092 <__kernel_rem_pio2+0xba>
 800f044:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800f2e8 <__kernel_rem_pio2+0x310>
 800f048:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f04c:	4616      	mov	r6, r2
 800f04e:	2500      	movs	r5, #0
 800f050:	e015      	b.n	800f07e <__kernel_rem_pio2+0xa6>
 800f052:	42d6      	cmn	r6, r2
 800f054:	d409      	bmi.n	800f06a <__kernel_rem_pio2+0x92>
 800f056:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800f05a:	ee07 3a90 	vmov	s15, r3
 800f05e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f062:	eca5 7b02 	vstmia	r5!, {d7}
 800f066:	3201      	adds	r2, #1
 800f068:	e7e0      	b.n	800f02c <__kernel_rem_pio2+0x54>
 800f06a:	eeb0 7b46 	vmov.f64	d7, d6
 800f06e:	e7f8      	b.n	800f062 <__kernel_rem_pio2+0x8a>
 800f070:	ecb8 5b02 	vldmia	r8!, {d5}
 800f074:	ed96 6b00 	vldr	d6, [r6]
 800f078:	3501      	adds	r5, #1
 800f07a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f07e:	428d      	cmp	r5, r1
 800f080:	f1a6 0608 	sub.w	r6, r6, #8
 800f084:	ddf4      	ble.n	800f070 <__kernel_rem_pio2+0x98>
 800f086:	ecaa 7b02 	vstmia	sl!, {d7}
 800f08a:	f10c 0c01 	add.w	ip, ip, #1
 800f08e:	3208      	adds	r2, #8
 800f090:	e7d6      	b.n	800f040 <__kernel_rem_pio2+0x68>
 800f092:	ab06      	add	r3, sp, #24
 800f094:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800f2f0 <__kernel_rem_pio2+0x318>
 800f098:	ed9f ab97 	vldr	d10, [pc, #604]	; 800f2f8 <__kernel_rem_pio2+0x320>
 800f09c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f0a0:	9303      	str	r3, [sp, #12]
 800f0a2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800f0a6:	464d      	mov	r5, r9
 800f0a8:	00eb      	lsls	r3, r5, #3
 800f0aa:	9304      	str	r3, [sp, #16]
 800f0ac:	ab92      	add	r3, sp, #584	; 0x248
 800f0ae:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800f0b2:	f10d 0b18 	add.w	fp, sp, #24
 800f0b6:	ab6a      	add	r3, sp, #424	; 0x1a8
 800f0b8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800f0bc:	465e      	mov	r6, fp
 800f0be:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	f1a2 0208 	sub.w	r2, r2, #8
 800f0ca:	dc4c      	bgt.n	800f166 <__kernel_rem_pio2+0x18e>
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	9105      	str	r1, [sp, #20]
 800f0d0:	f000 faf2 	bl	800f6b8 <scalbn>
 800f0d4:	eeb0 8b40 	vmov.f64	d8, d0
 800f0d8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800f0dc:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f0e0:	f000 fa76 	bl	800f5d0 <floor>
 800f0e4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800f0e8:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f0ec:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f0f0:	2c00      	cmp	r4, #0
 800f0f2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800f0f6:	ee17 8a90 	vmov	r8, s15
 800f0fa:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f0fe:	9905      	ldr	r1, [sp, #20]
 800f100:	dd43      	ble.n	800f18a <__kernel_rem_pio2+0x1b2>
 800f102:	1e68      	subs	r0, r5, #1
 800f104:	ab06      	add	r3, sp, #24
 800f106:	f1c4 0c18 	rsb	ip, r4, #24
 800f10a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f10e:	fa46 f20c 	asr.w	r2, r6, ip
 800f112:	4490      	add	r8, r2
 800f114:	fa02 f20c 	lsl.w	r2, r2, ip
 800f118:	1ab6      	subs	r6, r6, r2
 800f11a:	f1c4 0217 	rsb	r2, r4, #23
 800f11e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800f122:	4116      	asrs	r6, r2
 800f124:	2e00      	cmp	r6, #0
 800f126:	dd3f      	ble.n	800f1a8 <__kernel_rem_pio2+0x1d0>
 800f128:	f04f 0c00 	mov.w	ip, #0
 800f12c:	f108 0801 	add.w	r8, r8, #1
 800f130:	4660      	mov	r0, ip
 800f132:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800f136:	4565      	cmp	r5, ip
 800f138:	dc6e      	bgt.n	800f218 <__kernel_rem_pio2+0x240>
 800f13a:	2c00      	cmp	r4, #0
 800f13c:	dd04      	ble.n	800f148 <__kernel_rem_pio2+0x170>
 800f13e:	2c01      	cmp	r4, #1
 800f140:	d07f      	beq.n	800f242 <__kernel_rem_pio2+0x26a>
 800f142:	2c02      	cmp	r4, #2
 800f144:	f000 8087 	beq.w	800f256 <__kernel_rem_pio2+0x27e>
 800f148:	2e02      	cmp	r6, #2
 800f14a:	d12d      	bne.n	800f1a8 <__kernel_rem_pio2+0x1d0>
 800f14c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f150:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f154:	b340      	cbz	r0, 800f1a8 <__kernel_rem_pio2+0x1d0>
 800f156:	4620      	mov	r0, r4
 800f158:	9105      	str	r1, [sp, #20]
 800f15a:	f000 faad 	bl	800f6b8 <scalbn>
 800f15e:	9905      	ldr	r1, [sp, #20]
 800f160:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f164:	e020      	b.n	800f1a8 <__kernel_rem_pio2+0x1d0>
 800f166:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f16a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f16e:	3801      	subs	r0, #1
 800f170:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f174:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f178:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f17c:	eca6 0a01 	vstmia	r6!, {s0}
 800f180:	ed92 0b00 	vldr	d0, [r2]
 800f184:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f188:	e79c      	b.n	800f0c4 <__kernel_rem_pio2+0xec>
 800f18a:	d105      	bne.n	800f198 <__kernel_rem_pio2+0x1c0>
 800f18c:	1e6a      	subs	r2, r5, #1
 800f18e:	ab06      	add	r3, sp, #24
 800f190:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800f194:	15f6      	asrs	r6, r6, #23
 800f196:	e7c5      	b.n	800f124 <__kernel_rem_pio2+0x14c>
 800f198:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f19c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a4:	da36      	bge.n	800f214 <__kernel_rem_pio2+0x23c>
 800f1a6:	2600      	movs	r6, #0
 800f1a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b0:	f040 80aa 	bne.w	800f308 <__kernel_rem_pio2+0x330>
 800f1b4:	f105 3bff 	add.w	fp, r5, #4294967295
 800f1b8:	4658      	mov	r0, fp
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	4548      	cmp	r0, r9
 800f1be:	da52      	bge.n	800f266 <__kernel_rem_pio2+0x28e>
 800f1c0:	2a00      	cmp	r2, #0
 800f1c2:	f000 8081 	beq.w	800f2c8 <__kernel_rem_pio2+0x2f0>
 800f1c6:	ab06      	add	r3, sp, #24
 800f1c8:	3c18      	subs	r4, #24
 800f1ca:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f000 8087 	beq.w	800f2e2 <__kernel_rem_pio2+0x30a>
 800f1d4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f000 fa6d 	bl	800f6b8 <scalbn>
 800f1de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f1e2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800f2f0 <__kernel_rem_pio2+0x318>
 800f1e6:	a96a      	add	r1, sp, #424	; 0x1a8
 800f1e8:	f103 0208 	add.w	r2, r3, #8
 800f1ec:	1888      	adds	r0, r1, r2
 800f1ee:	4659      	mov	r1, fp
 800f1f0:	2900      	cmp	r1, #0
 800f1f2:	f280 80b7 	bge.w	800f364 <__kernel_rem_pio2+0x38c>
 800f1f6:	4659      	mov	r1, fp
 800f1f8:	2900      	cmp	r1, #0
 800f1fa:	f2c0 80d5 	blt.w	800f3a8 <__kernel_rem_pio2+0x3d0>
 800f1fe:	a86a      	add	r0, sp, #424	; 0x1a8
 800f200:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800f204:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800f2e8 <__kernel_rem_pio2+0x310>
 800f208:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800f304 <__kernel_rem_pio2+0x32c>
 800f20c:	2400      	movs	r4, #0
 800f20e:	ebab 0001 	sub.w	r0, fp, r1
 800f212:	e0be      	b.n	800f392 <__kernel_rem_pio2+0x3ba>
 800f214:	2602      	movs	r6, #2
 800f216:	e787      	b.n	800f128 <__kernel_rem_pio2+0x150>
 800f218:	f8db 2000 	ldr.w	r2, [fp]
 800f21c:	b958      	cbnz	r0, 800f236 <__kernel_rem_pio2+0x25e>
 800f21e:	b122      	cbz	r2, 800f22a <__kernel_rem_pio2+0x252>
 800f220:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800f224:	f8cb 2000 	str.w	r2, [fp]
 800f228:	2201      	movs	r2, #1
 800f22a:	f10c 0c01 	add.w	ip, ip, #1
 800f22e:	f10b 0b04 	add.w	fp, fp, #4
 800f232:	4610      	mov	r0, r2
 800f234:	e77f      	b.n	800f136 <__kernel_rem_pio2+0x15e>
 800f236:	ebae 0202 	sub.w	r2, lr, r2
 800f23a:	f8cb 2000 	str.w	r2, [fp]
 800f23e:	4602      	mov	r2, r0
 800f240:	e7f3      	b.n	800f22a <__kernel_rem_pio2+0x252>
 800f242:	f105 3cff 	add.w	ip, r5, #4294967295
 800f246:	ab06      	add	r3, sp, #24
 800f248:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f24c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f250:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800f254:	e778      	b.n	800f148 <__kernel_rem_pio2+0x170>
 800f256:	f105 3cff 	add.w	ip, r5, #4294967295
 800f25a:	ab06      	add	r3, sp, #24
 800f25c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f260:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800f264:	e7f4      	b.n	800f250 <__kernel_rem_pio2+0x278>
 800f266:	ab06      	add	r3, sp, #24
 800f268:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f26c:	3801      	subs	r0, #1
 800f26e:	431a      	orrs	r2, r3
 800f270:	e7a4      	b.n	800f1bc <__kernel_rem_pio2+0x1e4>
 800f272:	f10c 0c01 	add.w	ip, ip, #1
 800f276:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d0f9      	beq.n	800f272 <__kernel_rem_pio2+0x29a>
 800f27e:	9b04      	ldr	r3, [sp, #16]
 800f280:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f284:	eb0d 0203 	add.w	r2, sp, r3
 800f288:	9b01      	ldr	r3, [sp, #4]
 800f28a:	18e8      	adds	r0, r5, r3
 800f28c:	ab1a      	add	r3, sp, #104	; 0x68
 800f28e:	1c6e      	adds	r6, r5, #1
 800f290:	3a98      	subs	r2, #152	; 0x98
 800f292:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f296:	4465      	add	r5, ip
 800f298:	42b5      	cmp	r5, r6
 800f29a:	f6ff af05 	blt.w	800f0a8 <__kernel_rem_pio2+0xd0>
 800f29e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800f2a2:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f2a6:	ee07 3a90 	vmov	s15, r3
 800f2aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f2ae:	f04f 0c00 	mov.w	ip, #0
 800f2b2:	eca0 7b02 	vstmia	r0!, {d7}
 800f2b6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f2e8 <__kernel_rem_pio2+0x310>
 800f2ba:	4680      	mov	r8, r0
 800f2bc:	458c      	cmp	ip, r1
 800f2be:	dd07      	ble.n	800f2d0 <__kernel_rem_pio2+0x2f8>
 800f2c0:	eca2 7b02 	vstmia	r2!, {d7}
 800f2c4:	3601      	adds	r6, #1
 800f2c6:	e7e7      	b.n	800f298 <__kernel_rem_pio2+0x2c0>
 800f2c8:	9a03      	ldr	r2, [sp, #12]
 800f2ca:	f04f 0c01 	mov.w	ip, #1
 800f2ce:	e7d2      	b.n	800f276 <__kernel_rem_pio2+0x29e>
 800f2d0:	ecbe 5b02 	vldmia	lr!, {d5}
 800f2d4:	ed38 6b02 	vldmdb	r8!, {d6}
 800f2d8:	f10c 0c01 	add.w	ip, ip, #1
 800f2dc:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f2e0:	e7ec      	b.n	800f2bc <__kernel_rem_pio2+0x2e4>
 800f2e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2e6:	e76e      	b.n	800f1c6 <__kernel_rem_pio2+0x1ee>
	...
 800f2f4:	3e700000 	.word	0x3e700000
 800f2f8:	00000000 	.word	0x00000000
 800f2fc:	41700000 	.word	0x41700000
 800f300:	08010038 	.word	0x08010038
 800f304:	0800fff8 	.word	0x0800fff8
 800f308:	4260      	negs	r0, r4
 800f30a:	eeb0 0b48 	vmov.f64	d0, d8
 800f30e:	f000 f9d3 	bl	800f6b8 <scalbn>
 800f312:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f4f0 <__kernel_rem_pio2+0x518>
 800f316:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31e:	db18      	blt.n	800f352 <__kernel_rem_pio2+0x37a>
 800f320:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800f4f8 <__kernel_rem_pio2+0x520>
 800f324:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f328:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f32c:	aa06      	add	r2, sp, #24
 800f32e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f332:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f336:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f33a:	f105 0b01 	add.w	fp, r5, #1
 800f33e:	ee10 3a10 	vmov	r3, s0
 800f342:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f346:	ee17 3a10 	vmov	r3, s14
 800f34a:	3418      	adds	r4, #24
 800f34c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800f350:	e740      	b.n	800f1d4 <__kernel_rem_pio2+0x1fc>
 800f352:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f356:	aa06      	add	r2, sp, #24
 800f358:	ee10 3a10 	vmov	r3, s0
 800f35c:	46ab      	mov	fp, r5
 800f35e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f362:	e737      	b.n	800f1d4 <__kernel_rem_pio2+0x1fc>
 800f364:	ac06      	add	r4, sp, #24
 800f366:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800f36a:	9401      	str	r4, [sp, #4]
 800f36c:	ee07 4a90 	vmov	s15, r4
 800f370:	3901      	subs	r1, #1
 800f372:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f376:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f37a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f37e:	ed20 7b02 	vstmdb	r0!, {d7}
 800f382:	e735      	b.n	800f1f0 <__kernel_rem_pio2+0x218>
 800f384:	ecbc 5b02 	vldmia	ip!, {d5}
 800f388:	ecb5 6b02 	vldmia	r5!, {d6}
 800f38c:	3401      	adds	r4, #1
 800f38e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f392:	454c      	cmp	r4, r9
 800f394:	dc01      	bgt.n	800f39a <__kernel_rem_pio2+0x3c2>
 800f396:	4284      	cmp	r4, r0
 800f398:	ddf4      	ble.n	800f384 <__kernel_rem_pio2+0x3ac>
 800f39a:	ac42      	add	r4, sp, #264	; 0x108
 800f39c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800f3a0:	ed80 7b00 	vstr	d7, [r0]
 800f3a4:	3901      	subs	r1, #1
 800f3a6:	e727      	b.n	800f1f8 <__kernel_rem_pio2+0x220>
 800f3a8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800f3aa:	2902      	cmp	r1, #2
 800f3ac:	dc0a      	bgt.n	800f3c4 <__kernel_rem_pio2+0x3ec>
 800f3ae:	2900      	cmp	r1, #0
 800f3b0:	dc2c      	bgt.n	800f40c <__kernel_rem_pio2+0x434>
 800f3b2:	d045      	beq.n	800f440 <__kernel_rem_pio2+0x468>
 800f3b4:	f008 0007 	and.w	r0, r8, #7
 800f3b8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800f3bc:	ecbd 8b06 	vpop	{d8-d10}
 800f3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800f3c6:	2a03      	cmp	r2, #3
 800f3c8:	d1f4      	bne.n	800f3b4 <__kernel_rem_pio2+0x3dc>
 800f3ca:	aa42      	add	r2, sp, #264	; 0x108
 800f3cc:	4413      	add	r3, r2
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	4658      	mov	r0, fp
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	f1a1 0108 	sub.w	r1, r1, #8
 800f3da:	dc54      	bgt.n	800f486 <__kernel_rem_pio2+0x4ae>
 800f3dc:	4659      	mov	r1, fp
 800f3de:	2901      	cmp	r1, #1
 800f3e0:	f1a2 0208 	sub.w	r2, r2, #8
 800f3e4:	dc5f      	bgt.n	800f4a6 <__kernel_rem_pio2+0x4ce>
 800f3e6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800f500 <__kernel_rem_pio2+0x528>
 800f3ea:	3308      	adds	r3, #8
 800f3ec:	f1bb 0f01 	cmp.w	fp, #1
 800f3f0:	dc69      	bgt.n	800f4c6 <__kernel_rem_pio2+0x4ee>
 800f3f2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800f3f6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800f3fa:	2e00      	cmp	r6, #0
 800f3fc:	d16a      	bne.n	800f4d4 <__kernel_rem_pio2+0x4fc>
 800f3fe:	ed87 5b00 	vstr	d5, [r7]
 800f402:	ed87 6b02 	vstr	d6, [r7, #8]
 800f406:	ed87 7b04 	vstr	d7, [r7, #16]
 800f40a:	e7d3      	b.n	800f3b4 <__kernel_rem_pio2+0x3dc>
 800f40c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f500 <__kernel_rem_pio2+0x528>
 800f410:	ab42      	add	r3, sp, #264	; 0x108
 800f412:	441a      	add	r2, r3
 800f414:	465b      	mov	r3, fp
 800f416:	2b00      	cmp	r3, #0
 800f418:	da26      	bge.n	800f468 <__kernel_rem_pio2+0x490>
 800f41a:	b35e      	cbz	r6, 800f474 <__kernel_rem_pio2+0x49c>
 800f41c:	eeb1 7b46 	vneg.f64	d7, d6
 800f420:	ed87 7b00 	vstr	d7, [r7]
 800f424:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800f428:	aa44      	add	r2, sp, #272	; 0x110
 800f42a:	2301      	movs	r3, #1
 800f42c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f430:	459b      	cmp	fp, r3
 800f432:	da22      	bge.n	800f47a <__kernel_rem_pio2+0x4a2>
 800f434:	b10e      	cbz	r6, 800f43a <__kernel_rem_pio2+0x462>
 800f436:	eeb1 7b47 	vneg.f64	d7, d7
 800f43a:	ed87 7b02 	vstr	d7, [r7, #8]
 800f43e:	e7b9      	b.n	800f3b4 <__kernel_rem_pio2+0x3dc>
 800f440:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800f500 <__kernel_rem_pio2+0x528>
 800f444:	ab42      	add	r3, sp, #264	; 0x108
 800f446:	441a      	add	r2, r3
 800f448:	f1bb 0f00 	cmp.w	fp, #0
 800f44c:	da05      	bge.n	800f45a <__kernel_rem_pio2+0x482>
 800f44e:	b10e      	cbz	r6, 800f454 <__kernel_rem_pio2+0x47c>
 800f450:	eeb1 7b47 	vneg.f64	d7, d7
 800f454:	ed87 7b00 	vstr	d7, [r7]
 800f458:	e7ac      	b.n	800f3b4 <__kernel_rem_pio2+0x3dc>
 800f45a:	ed32 6b02 	vldmdb	r2!, {d6}
 800f45e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f462:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f466:	e7ef      	b.n	800f448 <__kernel_rem_pio2+0x470>
 800f468:	ed32 7b02 	vldmdb	r2!, {d7}
 800f46c:	3b01      	subs	r3, #1
 800f46e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f472:	e7d0      	b.n	800f416 <__kernel_rem_pio2+0x43e>
 800f474:	eeb0 7b46 	vmov.f64	d7, d6
 800f478:	e7d2      	b.n	800f420 <__kernel_rem_pio2+0x448>
 800f47a:	ecb2 6b02 	vldmia	r2!, {d6}
 800f47e:	3301      	adds	r3, #1
 800f480:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f484:	e7d4      	b.n	800f430 <__kernel_rem_pio2+0x458>
 800f486:	ed91 7b00 	vldr	d7, [r1]
 800f48a:	ed91 5b02 	vldr	d5, [r1, #8]
 800f48e:	3801      	subs	r0, #1
 800f490:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f494:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f498:	ed81 6b00 	vstr	d6, [r1]
 800f49c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f4a0:	ed81 7b02 	vstr	d7, [r1, #8]
 800f4a4:	e796      	b.n	800f3d4 <__kernel_rem_pio2+0x3fc>
 800f4a6:	ed92 7b00 	vldr	d7, [r2]
 800f4aa:	ed92 5b02 	vldr	d5, [r2, #8]
 800f4ae:	3901      	subs	r1, #1
 800f4b0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f4b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f4b8:	ed82 6b00 	vstr	d6, [r2]
 800f4bc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f4c0:	ed82 7b02 	vstr	d7, [r2, #8]
 800f4c4:	e78b      	b.n	800f3de <__kernel_rem_pio2+0x406>
 800f4c6:	ed33 6b02 	vldmdb	r3!, {d6}
 800f4ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f4d2:	e78b      	b.n	800f3ec <__kernel_rem_pio2+0x414>
 800f4d4:	eeb1 5b45 	vneg.f64	d5, d5
 800f4d8:	eeb1 6b46 	vneg.f64	d6, d6
 800f4dc:	ed87 5b00 	vstr	d5, [r7]
 800f4e0:	eeb1 7b47 	vneg.f64	d7, d7
 800f4e4:	ed87 6b02 	vstr	d6, [r7, #8]
 800f4e8:	e78d      	b.n	800f406 <__kernel_rem_pio2+0x42e>
 800f4ea:	bf00      	nop
 800f4ec:	f3af 8000 	nop.w
 800f4f0:	00000000 	.word	0x00000000
 800f4f4:	41700000 	.word	0x41700000
 800f4f8:	00000000 	.word	0x00000000
 800f4fc:	3e700000 	.word	0x3e700000
	...

0800f508 <__kernel_sin>:
 800f508:	ee10 3a90 	vmov	r3, s1
 800f50c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f510:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f514:	da04      	bge.n	800f520 <__kernel_sin+0x18>
 800f516:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f51a:	ee17 3a90 	vmov	r3, s15
 800f51e:	b35b      	cbz	r3, 800f578 <__kernel_sin+0x70>
 800f520:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f524:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f528:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f580 <__kernel_sin+0x78>
 800f52c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f588 <__kernel_sin+0x80>
 800f530:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f534:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f590 <__kernel_sin+0x88>
 800f538:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f53c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f598 <__kernel_sin+0x90>
 800f540:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f544:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f5a0 <__kernel_sin+0x98>
 800f548:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f54c:	b930      	cbnz	r0, 800f55c <__kernel_sin+0x54>
 800f54e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f5a8 <__kernel_sin+0xa0>
 800f552:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f556:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f55a:	4770      	bx	lr
 800f55c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f560:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f564:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f568:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f56c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f5b0 <__kernel_sin+0xa8>
 800f570:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f574:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	f3af 8000 	nop.w
 800f580:	5acfd57c 	.word	0x5acfd57c
 800f584:	3de5d93a 	.word	0x3de5d93a
 800f588:	8a2b9ceb 	.word	0x8a2b9ceb
 800f58c:	be5ae5e6 	.word	0xbe5ae5e6
 800f590:	57b1fe7d 	.word	0x57b1fe7d
 800f594:	3ec71de3 	.word	0x3ec71de3
 800f598:	19c161d5 	.word	0x19c161d5
 800f59c:	bf2a01a0 	.word	0xbf2a01a0
 800f5a0:	1110f8a6 	.word	0x1110f8a6
 800f5a4:	3f811111 	.word	0x3f811111
 800f5a8:	55555549 	.word	0x55555549
 800f5ac:	bfc55555 	.word	0xbfc55555
 800f5b0:	55555549 	.word	0x55555549
 800f5b4:	3fc55555 	.word	0x3fc55555

0800f5b8 <fabs>:
 800f5b8:	ec51 0b10 	vmov	r0, r1, d0
 800f5bc:	ee10 2a10 	vmov	r2, s0
 800f5c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f5c4:	ec43 2b10 	vmov	d0, r2, r3
 800f5c8:	4770      	bx	lr
 800f5ca:	0000      	movs	r0, r0
 800f5cc:	0000      	movs	r0, r0
	...

0800f5d0 <floor>:
 800f5d0:	ee10 1a90 	vmov	r1, s1
 800f5d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f5d8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f5dc:	2b13      	cmp	r3, #19
 800f5de:	b530      	push	{r4, r5, lr}
 800f5e0:	ee10 0a10 	vmov	r0, s0
 800f5e4:	ee10 5a10 	vmov	r5, s0
 800f5e8:	dc31      	bgt.n	800f64e <floor+0x7e>
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	da15      	bge.n	800f61a <floor+0x4a>
 800f5ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f6a8 <floor+0xd8>
 800f5f2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f5f6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fe:	dd07      	ble.n	800f610 <floor+0x40>
 800f600:	2900      	cmp	r1, #0
 800f602:	da4e      	bge.n	800f6a2 <floor+0xd2>
 800f604:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f608:	4318      	orrs	r0, r3
 800f60a:	d001      	beq.n	800f610 <floor+0x40>
 800f60c:	4928      	ldr	r1, [pc, #160]	; (800f6b0 <floor+0xe0>)
 800f60e:	2000      	movs	r0, #0
 800f610:	460b      	mov	r3, r1
 800f612:	4602      	mov	r2, r0
 800f614:	ec43 2b10 	vmov	d0, r2, r3
 800f618:	e020      	b.n	800f65c <floor+0x8c>
 800f61a:	4a26      	ldr	r2, [pc, #152]	; (800f6b4 <floor+0xe4>)
 800f61c:	411a      	asrs	r2, r3
 800f61e:	ea01 0402 	and.w	r4, r1, r2
 800f622:	4304      	orrs	r4, r0
 800f624:	d01a      	beq.n	800f65c <floor+0x8c>
 800f626:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f6a8 <floor+0xd8>
 800f62a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f62e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f636:	ddeb      	ble.n	800f610 <floor+0x40>
 800f638:	2900      	cmp	r1, #0
 800f63a:	bfbe      	ittt	lt
 800f63c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f640:	fa40 f303 	asrlt.w	r3, r0, r3
 800f644:	18c9      	addlt	r1, r1, r3
 800f646:	ea21 0102 	bic.w	r1, r1, r2
 800f64a:	2000      	movs	r0, #0
 800f64c:	e7e0      	b.n	800f610 <floor+0x40>
 800f64e:	2b33      	cmp	r3, #51	; 0x33
 800f650:	dd05      	ble.n	800f65e <floor+0x8e>
 800f652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f656:	d101      	bne.n	800f65c <floor+0x8c>
 800f658:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f65c:	bd30      	pop	{r4, r5, pc}
 800f65e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f662:	f04f 32ff 	mov.w	r2, #4294967295
 800f666:	40e2      	lsrs	r2, r4
 800f668:	4202      	tst	r2, r0
 800f66a:	d0f7      	beq.n	800f65c <floor+0x8c>
 800f66c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f6a8 <floor+0xd8>
 800f670:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f674:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67c:	ddc8      	ble.n	800f610 <floor+0x40>
 800f67e:	2900      	cmp	r1, #0
 800f680:	da02      	bge.n	800f688 <floor+0xb8>
 800f682:	2b14      	cmp	r3, #20
 800f684:	d103      	bne.n	800f68e <floor+0xbe>
 800f686:	3101      	adds	r1, #1
 800f688:	ea20 0002 	bic.w	r0, r0, r2
 800f68c:	e7c0      	b.n	800f610 <floor+0x40>
 800f68e:	2401      	movs	r4, #1
 800f690:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f694:	fa04 f303 	lsl.w	r3, r4, r3
 800f698:	4418      	add	r0, r3
 800f69a:	42a8      	cmp	r0, r5
 800f69c:	bf38      	it	cc
 800f69e:	1909      	addcc	r1, r1, r4
 800f6a0:	e7f2      	b.n	800f688 <floor+0xb8>
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	4601      	mov	r1, r0
 800f6a6:	e7b3      	b.n	800f610 <floor+0x40>
 800f6a8:	8800759c 	.word	0x8800759c
 800f6ac:	7e37e43c 	.word	0x7e37e43c
 800f6b0:	bff00000 	.word	0xbff00000
 800f6b4:	000fffff 	.word	0x000fffff

0800f6b8 <scalbn>:
 800f6b8:	ee10 1a90 	vmov	r1, s1
 800f6bc:	b510      	push	{r4, lr}
 800f6be:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f6c2:	b98c      	cbnz	r4, 800f6e8 <scalbn+0x30>
 800f6c4:	ee10 3a10 	vmov	r3, s0
 800f6c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f6cc:	430b      	orrs	r3, r1
 800f6ce:	d011      	beq.n	800f6f4 <scalbn+0x3c>
 800f6d0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800f798 <scalbn+0xe0>
 800f6d4:	4b3c      	ldr	r3, [pc, #240]	; (800f7c8 <scalbn+0x110>)
 800f6d6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f6da:	4298      	cmp	r0, r3
 800f6dc:	da0b      	bge.n	800f6f6 <scalbn+0x3e>
 800f6de:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f7a0 <scalbn+0xe8>
 800f6e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f6e6:	e005      	b.n	800f6f4 <scalbn+0x3c>
 800f6e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800f6ec:	429c      	cmp	r4, r3
 800f6ee:	d107      	bne.n	800f700 <scalbn+0x48>
 800f6f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f6f4:	bd10      	pop	{r4, pc}
 800f6f6:	ee10 1a90 	vmov	r1, s1
 800f6fa:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f6fe:	3c36      	subs	r4, #54	; 0x36
 800f700:	4404      	add	r4, r0
 800f702:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800f706:	429c      	cmp	r4, r3
 800f708:	dd0d      	ble.n	800f726 <scalbn+0x6e>
 800f70a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f7a8 <scalbn+0xf0>
 800f70e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f7b0 <scalbn+0xf8>
 800f712:	eeb0 6b47 	vmov.f64	d6, d7
 800f716:	ee10 3a90 	vmov	r3, s1
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f720:	ee27 0b06 	vmul.f64	d0, d7, d6
 800f724:	e7e6      	b.n	800f6f4 <scalbn+0x3c>
 800f726:	2c00      	cmp	r4, #0
 800f728:	dd0a      	ble.n	800f740 <scalbn+0x88>
 800f72a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f72e:	ec53 2b10 	vmov	r2, r3, d0
 800f732:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f736:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f73a:	ec43 2b10 	vmov	d0, r2, r3
 800f73e:	e7d9      	b.n	800f6f4 <scalbn+0x3c>
 800f740:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800f744:	da19      	bge.n	800f77a <scalbn+0xc2>
 800f746:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f74a:	4298      	cmp	r0, r3
 800f74c:	ee10 3a90 	vmov	r3, s1
 800f750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f754:	dd09      	ble.n	800f76a <scalbn+0xb2>
 800f756:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800f7a8 <scalbn+0xf0>
 800f75a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800f7b0 <scalbn+0xf8>
 800f75e:	eeb0 7b40 	vmov.f64	d7, d0
 800f762:	2b00      	cmp	r3, #0
 800f764:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800f768:	e7bb      	b.n	800f6e2 <scalbn+0x2a>
 800f76a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800f7a0 <scalbn+0xe8>
 800f76e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800f7b8 <scalbn+0x100>
 800f772:	eeb0 7b40 	vmov.f64	d7, d0
 800f776:	2b00      	cmp	r3, #0
 800f778:	e7f4      	b.n	800f764 <scalbn+0xac>
 800f77a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f77e:	ec53 2b10 	vmov	r2, r3, d0
 800f782:	3436      	adds	r4, #54	; 0x36
 800f784:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f788:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f78c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f7c0 <scalbn+0x108>
 800f790:	ec43 2b10 	vmov	d0, r2, r3
 800f794:	e7a5      	b.n	800f6e2 <scalbn+0x2a>
 800f796:	bf00      	nop
 800f798:	00000000 	.word	0x00000000
 800f79c:	43500000 	.word	0x43500000
 800f7a0:	c2f8f359 	.word	0xc2f8f359
 800f7a4:	01a56e1f 	.word	0x01a56e1f
 800f7a8:	8800759c 	.word	0x8800759c
 800f7ac:	7e37e43c 	.word	0x7e37e43c
 800f7b0:	8800759c 	.word	0x8800759c
 800f7b4:	fe37e43c 	.word	0xfe37e43c
 800f7b8:	c2f8f359 	.word	0xc2f8f359
 800f7bc:	81a56e1f 	.word	0x81a56e1f
 800f7c0:	00000000 	.word	0x00000000
 800f7c4:	3c900000 	.word	0x3c900000
 800f7c8:	ffff3cb0 	.word	0xffff3cb0

0800f7cc <abort>:
 800f7cc:	b508      	push	{r3, lr}
 800f7ce:	2006      	movs	r0, #6
 800f7d0:	f000 f874 	bl	800f8bc <raise>
 800f7d4:	2001      	movs	r0, #1
 800f7d6:	f7f5 f9b1 	bl	8004b3c <_exit>
	...

0800f7dc <__errno>:
 800f7dc:	4b01      	ldr	r3, [pc, #4]	; (800f7e4 <__errno+0x8>)
 800f7de:	6818      	ldr	r0, [r3, #0]
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	240001dc 	.word	0x240001dc

0800f7e8 <__libc_init_array>:
 800f7e8:	b570      	push	{r4, r5, r6, lr}
 800f7ea:	4d0d      	ldr	r5, [pc, #52]	; (800f820 <__libc_init_array+0x38>)
 800f7ec:	4c0d      	ldr	r4, [pc, #52]	; (800f824 <__libc_init_array+0x3c>)
 800f7ee:	1b64      	subs	r4, r4, r5
 800f7f0:	10a4      	asrs	r4, r4, #2
 800f7f2:	2600      	movs	r6, #0
 800f7f4:	42a6      	cmp	r6, r4
 800f7f6:	d109      	bne.n	800f80c <__libc_init_array+0x24>
 800f7f8:	4d0b      	ldr	r5, [pc, #44]	; (800f828 <__libc_init_array+0x40>)
 800f7fa:	4c0c      	ldr	r4, [pc, #48]	; (800f82c <__libc_init_array+0x44>)
 800f7fc:	f000 f9b0 	bl	800fb60 <_init>
 800f800:	1b64      	subs	r4, r4, r5
 800f802:	10a4      	asrs	r4, r4, #2
 800f804:	2600      	movs	r6, #0
 800f806:	42a6      	cmp	r6, r4
 800f808:	d105      	bne.n	800f816 <__libc_init_array+0x2e>
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
 800f80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f810:	4798      	blx	r3
 800f812:	3601      	adds	r6, #1
 800f814:	e7ee      	b.n	800f7f4 <__libc_init_array+0xc>
 800f816:	f855 3b04 	ldr.w	r3, [r5], #4
 800f81a:	4798      	blx	r3
 800f81c:	3601      	adds	r6, #1
 800f81e:	e7f2      	b.n	800f806 <__libc_init_array+0x1e>
 800f820:	08010050 	.word	0x08010050
 800f824:	08010050 	.word	0x08010050
 800f828:	08010050 	.word	0x08010050
 800f82c:	08010058 	.word	0x08010058

0800f830 <memcpy>:
 800f830:	440a      	add	r2, r1
 800f832:	4291      	cmp	r1, r2
 800f834:	f100 33ff 	add.w	r3, r0, #4294967295
 800f838:	d100      	bne.n	800f83c <memcpy+0xc>
 800f83a:	4770      	bx	lr
 800f83c:	b510      	push	{r4, lr}
 800f83e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f842:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f846:	4291      	cmp	r1, r2
 800f848:	d1f9      	bne.n	800f83e <memcpy+0xe>
 800f84a:	bd10      	pop	{r4, pc}

0800f84c <memset>:
 800f84c:	4402      	add	r2, r0
 800f84e:	4603      	mov	r3, r0
 800f850:	4293      	cmp	r3, r2
 800f852:	d100      	bne.n	800f856 <memset+0xa>
 800f854:	4770      	bx	lr
 800f856:	f803 1b01 	strb.w	r1, [r3], #1
 800f85a:	e7f9      	b.n	800f850 <memset+0x4>

0800f85c <realloc>:
 800f85c:	4b02      	ldr	r3, [pc, #8]	; (800f868 <realloc+0xc>)
 800f85e:	460a      	mov	r2, r1
 800f860:	4601      	mov	r1, r0
 800f862:	6818      	ldr	r0, [r3, #0]
 800f864:	f000 b8da 	b.w	800fa1c <_realloc_r>
 800f868:	240001dc 	.word	0x240001dc

0800f86c <_raise_r>:
 800f86c:	291f      	cmp	r1, #31
 800f86e:	b538      	push	{r3, r4, r5, lr}
 800f870:	4604      	mov	r4, r0
 800f872:	460d      	mov	r5, r1
 800f874:	d904      	bls.n	800f880 <_raise_r+0x14>
 800f876:	2316      	movs	r3, #22
 800f878:	6003      	str	r3, [r0, #0]
 800f87a:	f04f 30ff 	mov.w	r0, #4294967295
 800f87e:	bd38      	pop	{r3, r4, r5, pc}
 800f880:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f882:	b112      	cbz	r2, 800f88a <_raise_r+0x1e>
 800f884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f888:	b94b      	cbnz	r3, 800f89e <_raise_r+0x32>
 800f88a:	4620      	mov	r0, r4
 800f88c:	f000 f830 	bl	800f8f0 <_getpid_r>
 800f890:	462a      	mov	r2, r5
 800f892:	4601      	mov	r1, r0
 800f894:	4620      	mov	r0, r4
 800f896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f89a:	f000 b817 	b.w	800f8cc <_kill_r>
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d00a      	beq.n	800f8b8 <_raise_r+0x4c>
 800f8a2:	1c59      	adds	r1, r3, #1
 800f8a4:	d103      	bne.n	800f8ae <_raise_r+0x42>
 800f8a6:	2316      	movs	r3, #22
 800f8a8:	6003      	str	r3, [r0, #0]
 800f8aa:	2001      	movs	r0, #1
 800f8ac:	e7e7      	b.n	800f87e <_raise_r+0x12>
 800f8ae:	2400      	movs	r4, #0
 800f8b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	4798      	blx	r3
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	e7e0      	b.n	800f87e <_raise_r+0x12>

0800f8bc <raise>:
 800f8bc:	4b02      	ldr	r3, [pc, #8]	; (800f8c8 <raise+0xc>)
 800f8be:	4601      	mov	r1, r0
 800f8c0:	6818      	ldr	r0, [r3, #0]
 800f8c2:	f7ff bfd3 	b.w	800f86c <_raise_r>
 800f8c6:	bf00      	nop
 800f8c8:	240001dc 	.word	0x240001dc

0800f8cc <_kill_r>:
 800f8cc:	b538      	push	{r3, r4, r5, lr}
 800f8ce:	4d07      	ldr	r5, [pc, #28]	; (800f8ec <_kill_r+0x20>)
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	4608      	mov	r0, r1
 800f8d6:	4611      	mov	r1, r2
 800f8d8:	602b      	str	r3, [r5, #0]
 800f8da:	f7f5 f91f 	bl	8004b1c <_kill>
 800f8de:	1c43      	adds	r3, r0, #1
 800f8e0:	d102      	bne.n	800f8e8 <_kill_r+0x1c>
 800f8e2:	682b      	ldr	r3, [r5, #0]
 800f8e4:	b103      	cbz	r3, 800f8e8 <_kill_r+0x1c>
 800f8e6:	6023      	str	r3, [r4, #0]
 800f8e8:	bd38      	pop	{r3, r4, r5, pc}
 800f8ea:	bf00      	nop
 800f8ec:	24001cb8 	.word	0x24001cb8

0800f8f0 <_getpid_r>:
 800f8f0:	f7f5 b90c 	b.w	8004b0c <_getpid>

0800f8f4 <sbrk_aligned>:
 800f8f4:	b570      	push	{r4, r5, r6, lr}
 800f8f6:	4e0e      	ldr	r6, [pc, #56]	; (800f930 <sbrk_aligned+0x3c>)
 800f8f8:	460c      	mov	r4, r1
 800f8fa:	6831      	ldr	r1, [r6, #0]
 800f8fc:	4605      	mov	r5, r0
 800f8fe:	b911      	cbnz	r1, 800f906 <sbrk_aligned+0x12>
 800f900:	f000 f8bc 	bl	800fa7c <_sbrk_r>
 800f904:	6030      	str	r0, [r6, #0]
 800f906:	4621      	mov	r1, r4
 800f908:	4628      	mov	r0, r5
 800f90a:	f000 f8b7 	bl	800fa7c <_sbrk_r>
 800f90e:	1c43      	adds	r3, r0, #1
 800f910:	d00a      	beq.n	800f928 <sbrk_aligned+0x34>
 800f912:	1cc4      	adds	r4, r0, #3
 800f914:	f024 0403 	bic.w	r4, r4, #3
 800f918:	42a0      	cmp	r0, r4
 800f91a:	d007      	beq.n	800f92c <sbrk_aligned+0x38>
 800f91c:	1a21      	subs	r1, r4, r0
 800f91e:	4628      	mov	r0, r5
 800f920:	f000 f8ac 	bl	800fa7c <_sbrk_r>
 800f924:	3001      	adds	r0, #1
 800f926:	d101      	bne.n	800f92c <sbrk_aligned+0x38>
 800f928:	f04f 34ff 	mov.w	r4, #4294967295
 800f92c:	4620      	mov	r0, r4
 800f92e:	bd70      	pop	{r4, r5, r6, pc}
 800f930:	24001cb4 	.word	0x24001cb4

0800f934 <_malloc_r>:
 800f934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f938:	1ccd      	adds	r5, r1, #3
 800f93a:	f025 0503 	bic.w	r5, r5, #3
 800f93e:	3508      	adds	r5, #8
 800f940:	2d0c      	cmp	r5, #12
 800f942:	bf38      	it	cc
 800f944:	250c      	movcc	r5, #12
 800f946:	2d00      	cmp	r5, #0
 800f948:	4607      	mov	r7, r0
 800f94a:	db01      	blt.n	800f950 <_malloc_r+0x1c>
 800f94c:	42a9      	cmp	r1, r5
 800f94e:	d905      	bls.n	800f95c <_malloc_r+0x28>
 800f950:	230c      	movs	r3, #12
 800f952:	603b      	str	r3, [r7, #0]
 800f954:	2600      	movs	r6, #0
 800f956:	4630      	mov	r0, r6
 800f958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f95c:	4e2e      	ldr	r6, [pc, #184]	; (800fa18 <_malloc_r+0xe4>)
 800f95e:	f000 f89d 	bl	800fa9c <__malloc_lock>
 800f962:	6833      	ldr	r3, [r6, #0]
 800f964:	461c      	mov	r4, r3
 800f966:	bb34      	cbnz	r4, 800f9b6 <_malloc_r+0x82>
 800f968:	4629      	mov	r1, r5
 800f96a:	4638      	mov	r0, r7
 800f96c:	f7ff ffc2 	bl	800f8f4 <sbrk_aligned>
 800f970:	1c43      	adds	r3, r0, #1
 800f972:	4604      	mov	r4, r0
 800f974:	d14d      	bne.n	800fa12 <_malloc_r+0xde>
 800f976:	6834      	ldr	r4, [r6, #0]
 800f978:	4626      	mov	r6, r4
 800f97a:	2e00      	cmp	r6, #0
 800f97c:	d140      	bne.n	800fa00 <_malloc_r+0xcc>
 800f97e:	6823      	ldr	r3, [r4, #0]
 800f980:	4631      	mov	r1, r6
 800f982:	4638      	mov	r0, r7
 800f984:	eb04 0803 	add.w	r8, r4, r3
 800f988:	f000 f878 	bl	800fa7c <_sbrk_r>
 800f98c:	4580      	cmp	r8, r0
 800f98e:	d13a      	bne.n	800fa06 <_malloc_r+0xd2>
 800f990:	6821      	ldr	r1, [r4, #0]
 800f992:	3503      	adds	r5, #3
 800f994:	1a6d      	subs	r5, r5, r1
 800f996:	f025 0503 	bic.w	r5, r5, #3
 800f99a:	3508      	adds	r5, #8
 800f99c:	2d0c      	cmp	r5, #12
 800f99e:	bf38      	it	cc
 800f9a0:	250c      	movcc	r5, #12
 800f9a2:	4629      	mov	r1, r5
 800f9a4:	4638      	mov	r0, r7
 800f9a6:	f7ff ffa5 	bl	800f8f4 <sbrk_aligned>
 800f9aa:	3001      	adds	r0, #1
 800f9ac:	d02b      	beq.n	800fa06 <_malloc_r+0xd2>
 800f9ae:	6823      	ldr	r3, [r4, #0]
 800f9b0:	442b      	add	r3, r5
 800f9b2:	6023      	str	r3, [r4, #0]
 800f9b4:	e00e      	b.n	800f9d4 <_malloc_r+0xa0>
 800f9b6:	6822      	ldr	r2, [r4, #0]
 800f9b8:	1b52      	subs	r2, r2, r5
 800f9ba:	d41e      	bmi.n	800f9fa <_malloc_r+0xc6>
 800f9bc:	2a0b      	cmp	r2, #11
 800f9be:	d916      	bls.n	800f9ee <_malloc_r+0xba>
 800f9c0:	1961      	adds	r1, r4, r5
 800f9c2:	42a3      	cmp	r3, r4
 800f9c4:	6025      	str	r5, [r4, #0]
 800f9c6:	bf18      	it	ne
 800f9c8:	6059      	strne	r1, [r3, #4]
 800f9ca:	6863      	ldr	r3, [r4, #4]
 800f9cc:	bf08      	it	eq
 800f9ce:	6031      	streq	r1, [r6, #0]
 800f9d0:	5162      	str	r2, [r4, r5]
 800f9d2:	604b      	str	r3, [r1, #4]
 800f9d4:	4638      	mov	r0, r7
 800f9d6:	f104 060b 	add.w	r6, r4, #11
 800f9da:	f000 f865 	bl	800faa8 <__malloc_unlock>
 800f9de:	f026 0607 	bic.w	r6, r6, #7
 800f9e2:	1d23      	adds	r3, r4, #4
 800f9e4:	1af2      	subs	r2, r6, r3
 800f9e6:	d0b6      	beq.n	800f956 <_malloc_r+0x22>
 800f9e8:	1b9b      	subs	r3, r3, r6
 800f9ea:	50a3      	str	r3, [r4, r2]
 800f9ec:	e7b3      	b.n	800f956 <_malloc_r+0x22>
 800f9ee:	6862      	ldr	r2, [r4, #4]
 800f9f0:	42a3      	cmp	r3, r4
 800f9f2:	bf0c      	ite	eq
 800f9f4:	6032      	streq	r2, [r6, #0]
 800f9f6:	605a      	strne	r2, [r3, #4]
 800f9f8:	e7ec      	b.n	800f9d4 <_malloc_r+0xa0>
 800f9fa:	4623      	mov	r3, r4
 800f9fc:	6864      	ldr	r4, [r4, #4]
 800f9fe:	e7b2      	b.n	800f966 <_malloc_r+0x32>
 800fa00:	4634      	mov	r4, r6
 800fa02:	6876      	ldr	r6, [r6, #4]
 800fa04:	e7b9      	b.n	800f97a <_malloc_r+0x46>
 800fa06:	230c      	movs	r3, #12
 800fa08:	603b      	str	r3, [r7, #0]
 800fa0a:	4638      	mov	r0, r7
 800fa0c:	f000 f84c 	bl	800faa8 <__malloc_unlock>
 800fa10:	e7a1      	b.n	800f956 <_malloc_r+0x22>
 800fa12:	6025      	str	r5, [r4, #0]
 800fa14:	e7de      	b.n	800f9d4 <_malloc_r+0xa0>
 800fa16:	bf00      	nop
 800fa18:	24001cb0 	.word	0x24001cb0

0800fa1c <_realloc_r>:
 800fa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa20:	4680      	mov	r8, r0
 800fa22:	4614      	mov	r4, r2
 800fa24:	460e      	mov	r6, r1
 800fa26:	b921      	cbnz	r1, 800fa32 <_realloc_r+0x16>
 800fa28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	f7ff bf81 	b.w	800f934 <_malloc_r>
 800fa32:	b92a      	cbnz	r2, 800fa40 <_realloc_r+0x24>
 800fa34:	f000 f83e 	bl	800fab4 <_free_r>
 800fa38:	4625      	mov	r5, r4
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa40:	f000 f884 	bl	800fb4c <_malloc_usable_size_r>
 800fa44:	4284      	cmp	r4, r0
 800fa46:	4607      	mov	r7, r0
 800fa48:	d802      	bhi.n	800fa50 <_realloc_r+0x34>
 800fa4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fa4e:	d812      	bhi.n	800fa76 <_realloc_r+0x5a>
 800fa50:	4621      	mov	r1, r4
 800fa52:	4640      	mov	r0, r8
 800fa54:	f7ff ff6e 	bl	800f934 <_malloc_r>
 800fa58:	4605      	mov	r5, r0
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	d0ed      	beq.n	800fa3a <_realloc_r+0x1e>
 800fa5e:	42bc      	cmp	r4, r7
 800fa60:	4622      	mov	r2, r4
 800fa62:	4631      	mov	r1, r6
 800fa64:	bf28      	it	cs
 800fa66:	463a      	movcs	r2, r7
 800fa68:	f7ff fee2 	bl	800f830 <memcpy>
 800fa6c:	4631      	mov	r1, r6
 800fa6e:	4640      	mov	r0, r8
 800fa70:	f000 f820 	bl	800fab4 <_free_r>
 800fa74:	e7e1      	b.n	800fa3a <_realloc_r+0x1e>
 800fa76:	4635      	mov	r5, r6
 800fa78:	e7df      	b.n	800fa3a <_realloc_r+0x1e>
	...

0800fa7c <_sbrk_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4d06      	ldr	r5, [pc, #24]	; (800fa98 <_sbrk_r+0x1c>)
 800fa80:	2300      	movs	r3, #0
 800fa82:	4604      	mov	r4, r0
 800fa84:	4608      	mov	r0, r1
 800fa86:	602b      	str	r3, [r5, #0]
 800fa88:	f7f5 f862 	bl	8004b50 <_sbrk>
 800fa8c:	1c43      	adds	r3, r0, #1
 800fa8e:	d102      	bne.n	800fa96 <_sbrk_r+0x1a>
 800fa90:	682b      	ldr	r3, [r5, #0]
 800fa92:	b103      	cbz	r3, 800fa96 <_sbrk_r+0x1a>
 800fa94:	6023      	str	r3, [r4, #0]
 800fa96:	bd38      	pop	{r3, r4, r5, pc}
 800fa98:	24001cb8 	.word	0x24001cb8

0800fa9c <__malloc_lock>:
 800fa9c:	4801      	ldr	r0, [pc, #4]	; (800faa4 <__malloc_lock+0x8>)
 800fa9e:	f000 b85d 	b.w	800fb5c <__retarget_lock_acquire_recursive>
 800faa2:	bf00      	nop
 800faa4:	24001cbc 	.word	0x24001cbc

0800faa8 <__malloc_unlock>:
 800faa8:	4801      	ldr	r0, [pc, #4]	; (800fab0 <__malloc_unlock+0x8>)
 800faaa:	f000 b858 	b.w	800fb5e <__retarget_lock_release_recursive>
 800faae:	bf00      	nop
 800fab0:	24001cbc 	.word	0x24001cbc

0800fab4 <_free_r>:
 800fab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fab6:	2900      	cmp	r1, #0
 800fab8:	d044      	beq.n	800fb44 <_free_r+0x90>
 800faba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fabe:	9001      	str	r0, [sp, #4]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f1a1 0404 	sub.w	r4, r1, #4
 800fac6:	bfb8      	it	lt
 800fac8:	18e4      	addlt	r4, r4, r3
 800faca:	f7ff ffe7 	bl	800fa9c <__malloc_lock>
 800face:	4a1e      	ldr	r2, [pc, #120]	; (800fb48 <_free_r+0x94>)
 800fad0:	9801      	ldr	r0, [sp, #4]
 800fad2:	6813      	ldr	r3, [r2, #0]
 800fad4:	b933      	cbnz	r3, 800fae4 <_free_r+0x30>
 800fad6:	6063      	str	r3, [r4, #4]
 800fad8:	6014      	str	r4, [r2, #0]
 800fada:	b003      	add	sp, #12
 800fadc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fae0:	f7ff bfe2 	b.w	800faa8 <__malloc_unlock>
 800fae4:	42a3      	cmp	r3, r4
 800fae6:	d908      	bls.n	800fafa <_free_r+0x46>
 800fae8:	6825      	ldr	r5, [r4, #0]
 800faea:	1961      	adds	r1, r4, r5
 800faec:	428b      	cmp	r3, r1
 800faee:	bf01      	itttt	eq
 800faf0:	6819      	ldreq	r1, [r3, #0]
 800faf2:	685b      	ldreq	r3, [r3, #4]
 800faf4:	1949      	addeq	r1, r1, r5
 800faf6:	6021      	streq	r1, [r4, #0]
 800faf8:	e7ed      	b.n	800fad6 <_free_r+0x22>
 800fafa:	461a      	mov	r2, r3
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	b10b      	cbz	r3, 800fb04 <_free_r+0x50>
 800fb00:	42a3      	cmp	r3, r4
 800fb02:	d9fa      	bls.n	800fafa <_free_r+0x46>
 800fb04:	6811      	ldr	r1, [r2, #0]
 800fb06:	1855      	adds	r5, r2, r1
 800fb08:	42a5      	cmp	r5, r4
 800fb0a:	d10b      	bne.n	800fb24 <_free_r+0x70>
 800fb0c:	6824      	ldr	r4, [r4, #0]
 800fb0e:	4421      	add	r1, r4
 800fb10:	1854      	adds	r4, r2, r1
 800fb12:	42a3      	cmp	r3, r4
 800fb14:	6011      	str	r1, [r2, #0]
 800fb16:	d1e0      	bne.n	800fada <_free_r+0x26>
 800fb18:	681c      	ldr	r4, [r3, #0]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	6053      	str	r3, [r2, #4]
 800fb1e:	4421      	add	r1, r4
 800fb20:	6011      	str	r1, [r2, #0]
 800fb22:	e7da      	b.n	800fada <_free_r+0x26>
 800fb24:	d902      	bls.n	800fb2c <_free_r+0x78>
 800fb26:	230c      	movs	r3, #12
 800fb28:	6003      	str	r3, [r0, #0]
 800fb2a:	e7d6      	b.n	800fada <_free_r+0x26>
 800fb2c:	6825      	ldr	r5, [r4, #0]
 800fb2e:	1961      	adds	r1, r4, r5
 800fb30:	428b      	cmp	r3, r1
 800fb32:	bf04      	itt	eq
 800fb34:	6819      	ldreq	r1, [r3, #0]
 800fb36:	685b      	ldreq	r3, [r3, #4]
 800fb38:	6063      	str	r3, [r4, #4]
 800fb3a:	bf04      	itt	eq
 800fb3c:	1949      	addeq	r1, r1, r5
 800fb3e:	6021      	streq	r1, [r4, #0]
 800fb40:	6054      	str	r4, [r2, #4]
 800fb42:	e7ca      	b.n	800fada <_free_r+0x26>
 800fb44:	b003      	add	sp, #12
 800fb46:	bd30      	pop	{r4, r5, pc}
 800fb48:	24001cb0 	.word	0x24001cb0

0800fb4c <_malloc_usable_size_r>:
 800fb4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb50:	1f18      	subs	r0, r3, #4
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	bfbc      	itt	lt
 800fb56:	580b      	ldrlt	r3, [r1, r0]
 800fb58:	18c0      	addlt	r0, r0, r3
 800fb5a:	4770      	bx	lr

0800fb5c <__retarget_lock_acquire_recursive>:
 800fb5c:	4770      	bx	lr

0800fb5e <__retarget_lock_release_recursive>:
 800fb5e:	4770      	bx	lr

0800fb60 <_init>:
 800fb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb62:	bf00      	nop
 800fb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb66:	bc08      	pop	{r3}
 800fb68:	469e      	mov	lr, r3
 800fb6a:	4770      	bx	lr

0800fb6c <_fini>:
 800fb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb6e:	bf00      	nop
 800fb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb72:	bc08      	pop	{r3}
 800fb74:	469e      	mov	lr, r3
 800fb76:	4770      	bx	lr
