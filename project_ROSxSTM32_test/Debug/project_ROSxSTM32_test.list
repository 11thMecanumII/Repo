
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f898  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800fb68  0800fb68  0001fb68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010038  08010038  00020038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08010040  08010040  00020040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010048  08010048  00020048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000240  24000000  0801004c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a6c  24000240  0801028c  00030240  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001cac  0801028c  00031cac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022e7b  00000000  00000000  0003026e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003945  00000000  00000000  000530e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014d8  00000000  00000000  00056a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013b8  00000000  00000000  00057f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034f9b  00000000  00000000  000592c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c162  00000000  00000000  0008e25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153730  00000000  00000000  000aa3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fdaed  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005eac  00000000  00000000  001fdb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000240 	.word	0x24000240
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800fb50 	.word	0x0800fb50

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000244 	.word	0x24000244
 800030c:	0800fb50 	.word	0x0800fb50

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[1]},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[2]},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[3]}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	49c7      	ldr	r1, [pc, #796]	; (80009a8 <pidCtrl+0x328>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	440b      	add	r3, r1
 8000696:	3318      	adds	r3, #24
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000980 <pidCtrl+0x300>
 80006a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006ac:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000988 <pidCtrl+0x308>
 80006b0:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 80006b4:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8000990 <pidCtrl+0x310>
 80006b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006bc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000998 <pidCtrl+0x318>
 80006c0:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c4:	49b8      	ldr	r1, [pc, #736]	; (80009a8 <pidCtrl+0x328>)
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	440b      	add	r3, r1
 80006d2:	3328      	adds	r3, #40	; 0x28
 80006d4:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d8:	49b3      	ldr	r1, [pc, #716]	; (80009a8 <pidCtrl+0x328>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4613      	mov	r3, r2
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	440b      	add	r3, r1
 80006e6:	3320      	adds	r3, #32
 80006e8:	ed93 6b00 	vldr	d6, [r3]
 80006ec:	49ae      	ldr	r1, [pc, #696]	; (80009a8 <pidCtrl+0x328>)
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4613      	mov	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	440b      	add	r3, r1
 80006fa:	3328      	adds	r3, #40	; 0x28
 80006fc:	ed93 7b00 	vldr	d7, [r3]
 8000700:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000704:	49a8      	ldr	r1, [pc, #672]	; (80009a8 <pidCtrl+0x328>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	440b      	add	r3, r1
 8000712:	3330      	adds	r3, #48	; 0x30
 8000714:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000718:	49a3      	ldr	r1, [pc, #652]	; (80009a8 <pidCtrl+0x328>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	440b      	add	r3, r1
 8000726:	ed93 6b00 	vldr	d6, [r3]
 800072a:	499f      	ldr	r1, [pc, #636]	; (80009a8 <pidCtrl+0x328>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	440b      	add	r3, r1
 8000738:	3330      	adds	r3, #48	; 0x30
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000742:	4999      	ldr	r1, [pc, #612]	; (80009a8 <pidCtrl+0x328>)
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4613      	mov	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	1a9b      	subs	r3, r3, r2
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	440b      	add	r3, r1
 8000750:	3348      	adds	r3, #72	; 0x48
 8000752:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000756:	4994      	ldr	r1, [pc, #592]	; (80009a8 <pidCtrl+0x328>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	1a9b      	subs	r3, r3, r2
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	440b      	add	r3, r1
 8000764:	3350      	adds	r3, #80	; 0x50
 8000766:	ed93 6b00 	vldr	d6, [r3]
 800076a:	498f      	ldr	r1, [pc, #572]	; (80009a8 <pidCtrl+0x328>)
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	440b      	add	r3, r1
 8000778:	3308      	adds	r3, #8
 800077a:	ed93 5b00 	vldr	d5, [r3]
 800077e:	498a      	ldr	r1, [pc, #552]	; (80009a8 <pidCtrl+0x328>)
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	440b      	add	r3, r1
 800078c:	3338      	adds	r3, #56	; 0x38
 800078e:	ed93 7b00 	vldr	d7, [r3]
 8000792:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000796:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8000998 <pidCtrl+0x318>
 800079a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800079e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007a2:	4981      	ldr	r1, [pc, #516]	; (80009a8 <pidCtrl+0x328>)
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	440b      	add	r3, r1
 80007b0:	3350      	adds	r3, #80	; 0x50
 80007b2:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007b6:	497c      	ldr	r1, [pc, #496]	; (80009a8 <pidCtrl+0x328>)
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	440b      	add	r3, r1
 80007c4:	3310      	adds	r3, #16
 80007c6:	ed93 6b00 	vldr	d6, [r3]
 80007ca:	4977      	ldr	r1, [pc, #476]	; (80009a8 <pidCtrl+0x328>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	440b      	add	r3, r1
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	ed93 5b00 	vldr	d5, [r3]
 80007de:	4972      	ldr	r1, [pc, #456]	; (80009a8 <pidCtrl+0x328>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	440b      	add	r3, r1
 80007ec:	3338      	adds	r3, #56	; 0x38
 80007ee:	ed93 7b00 	vldr	d7, [r3]
 80007f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007fa:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000998 <pidCtrl+0x318>
 80007fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000802:	4969      	ldr	r1, [pc, #420]	; (80009a8 <pidCtrl+0x328>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	1a9b      	subs	r3, r3, r2
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	440b      	add	r3, r1
 8000810:	3358      	adds	r3, #88	; 0x58
 8000812:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 8000816:	4964      	ldr	r1, [pc, #400]	; (80009a8 <pidCtrl+0x328>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	440b      	add	r3, r1
 8000824:	3350      	adds	r3, #80	; 0x50
 8000826:	ed93 7b00 	vldr	d7, [r3]
 800082a:	eeb0 7bc7 	vabs.f64	d7, d7
 800082e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000832:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	dd1f      	ble.n	800087c <pidCtrl+0x1fc>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800083c:	495a      	ldr	r1, [pc, #360]	; (80009a8 <pidCtrl+0x328>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	1a9b      	subs	r3, r3, r2
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	440b      	add	r3, r1
 800084a:	3350      	adds	r3, #80	; 0x50
 800084c:	ed93 7b00 	vldr	d7, [r3]
 8000850:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000858:	db03      	blt.n	8000862 <pidCtrl+0x1e2>
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	4953      	ldr	r1, [pc, #332]	; (80009ac <pidCtrl+0x32c>)
 8000860:	e002      	b.n	8000868 <pidCtrl+0x1e8>
 8000862:	f04f 0000 	mov.w	r0, #0
 8000866:	4952      	ldr	r1, [pc, #328]	; (80009b0 <pidCtrl+0x330>)
 8000868:	4c4f      	ldr	r4, [pc, #316]	; (80009a8 <pidCtrl+0x328>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	4423      	add	r3, r4
 8000876:	3350      	adds	r3, #80	; 0x50
 8000878:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 800087c:	494a      	ldr	r1, [pc, #296]	; (80009a8 <pidCtrl+0x328>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4613      	mov	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	440b      	add	r3, r1
 800088a:	3348      	adds	r3, #72	; 0x48
 800088c:	ed93 6b00 	vldr	d6, [r3]
 8000890:	4945      	ldr	r1, [pc, #276]	; (80009a8 <pidCtrl+0x328>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4613      	mov	r3, r2
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	1a9b      	subs	r3, r3, r2
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	440b      	add	r3, r1
 800089e:	3350      	adds	r3, #80	; 0x50
 80008a0:	ed93 7b00 	vldr	d7, [r3]
 80008a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008a8:	493f      	ldr	r1, [pc, #252]	; (80009a8 <pidCtrl+0x328>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	440b      	add	r3, r1
 80008b6:	3358      	adds	r3, #88	; 0x58
 80008b8:	ed93 7b00 	vldr	d7, [r3]
 80008bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008c0:	4939      	ldr	r1, [pc, #228]	; (80009a8 <pidCtrl+0x328>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	1a9b      	subs	r3, r3, r2
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	440b      	add	r3, r1
 80008ce:	3340      	adds	r3, #64	; 0x40
 80008d0:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008d4:	4934      	ldr	r1, [pc, #208]	; (80009a8 <pidCtrl+0x328>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	1a9b      	subs	r3, r3, r2
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	440b      	add	r3, r1
 80008e2:	3330      	adds	r3, #48	; 0x30
 80008e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008e8:	4c2f      	ldr	r4, [pc, #188]	; (80009a8 <pidCtrl+0x328>)
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4613      	mov	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4423      	add	r3, r4
 80008f6:	3338      	adds	r3, #56	; 0x38
 80008f8:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80008fc:	492a      	ldr	r1, [pc, #168]	; (80009a8 <pidCtrl+0x328>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4613      	mov	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	440b      	add	r3, r1
 800090a:	3340      	adds	r3, #64	; 0x40
 800090c:	ed93 7b00 	vldr	d7, [r3]
 8000910:	eeb0 7bc7 	vabs.f64	d7, d7
 8000914:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80009a0 <pidCtrl+0x320>
 8000918:	ee27 7b06 	vmul.f64	d7, d7, d6
 800091c:	4922      	ldr	r1, [pc, #136]	; (80009a8 <pidCtrl+0x328>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4613      	mov	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	440b      	add	r3, r1
 800092a:	3360      	adds	r3, #96	; 0x60
 800092c:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <pidCtrl+0x328>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4613      	mov	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	440b      	add	r3, r1
 800093e:	3360      	adds	r3, #96	; 0x60
 8000940:	ed93 7b00 	vldr	d7, [r3]
 8000944:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80009a0 <pidCtrl+0x320>
 8000948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000950:	dc00      	bgt.n	8000954 <pidCtrl+0x2d4>
}
 8000952:	e00d      	b.n	8000970 <pidCtrl+0x2f0>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000954:	4914      	ldr	r1, [pc, #80]	; (80009a8 <pidCtrl+0x328>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	440b      	add	r3, r1
 8000962:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8000966:	a30e      	add	r3, pc, #56	; (adr r3, 80009a0 <pidCtrl+0x320>)
 8000968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bc90      	pop	{r4, r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	f3af 8000 	nop.w
 8000980:	54cadf99 	.word	0x54cadf99
 8000984:	400921fb 	.word	0x400921fb
 8000988:	b6ae7d56 	.word	0xb6ae7d56
 800098c:	3fb97f62 	.word	0x3fb97f62
 8000990:	cccccccd 	.word	0xcccccccd
 8000994:	40e4cccc 	.word	0x40e4cccc
 8000998:	00000000 	.word	0x00000000
 800099c:	408f4000 	.word	0x408f4000
 80009a0:	00000000 	.word	0x00000000
 80009a4:	40b06800 	.word	0x40b06800
 80009a8:	24000000 	.word	0x24000000
 80009ac:	3ff00000 	.word	0x3ff00000
 80009b0:	bff00000 	.word	0xbff00000

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f004 fbac 	bl	8005114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f862 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 fc68 	bl	8001294 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c4:	f000 fc3e 	bl	8001244 <MX_DMA_Init>
  MX_USART10_UART_Init();
 80009c8:	f000 fbf0 	bl	80011ac <MX_USART10_UART_Init>
  MX_TIM3_Init();
 80009cc:	f000 f91a 	bl	8000c04 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009d0:	f000 f96e 	bl	8000cb0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009d4:	f000 f9c2 	bl	8000d5c <MX_TIM5_Init>
  MX_TIM8_Init();
 80009d8:	f000 fa0e 	bl	8000df8 <MX_TIM8_Init>
  MX_TIM15_Init();
 80009dc:	f000 faa8 	bl	8000f30 <MX_TIM15_Init>
  MX_TIM23_Init();
 80009e0:	f000 fb38 	bl	8001054 <MX_TIM23_Init>
  MX_TIM24_Init();
 80009e4:	f000 fb8c 	bl	8001100 <MX_TIM24_Init>
  MX_TIM2_Init();
 80009e8:	f000 f8be 	bl	8000b68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 80009ec:	481d      	ldr	r0, [pc, #116]	; (8000a64 <main+0xb0>)
 80009ee:	f00a fb25 	bl	800b03c <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <main+0xb4>)
 80009f4:	f00a fb22 	bl	800b03c <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80009f8:	2108      	movs	r1, #8
 80009fa:	481c      	ldr	r0, [pc, #112]	; (8000a6c <main+0xb8>)
 80009fc:	f00a fbfc 	bl	800b1f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000a00:	210c      	movs	r1, #12
 8000a02:	481a      	ldr	r0, [pc, #104]	; (8000a6c <main+0xb8>)
 8000a04:	f00a fbf8 	bl	800b1f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4819      	ldr	r0, [pc, #100]	; (8000a70 <main+0xbc>)
 8000a0c:	f00a fbf4 	bl	800b1f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000a10:	2104      	movs	r1, #4
 8000a12:	4817      	ldr	r0, [pc, #92]	; (8000a70 <main+0xbc>)
 8000a14:	f00a fbf0 	bl	800b1f8 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4816      	ldr	r0, [pc, #88]	; (8000a74 <main+0xc0>)
 8000a1c:	f00a fdae 	bl	800b57c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 8000a20:	2104      	movs	r1, #4
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <main+0xc0>)
 8000a24:	f00a fdaa 	bl	800b57c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <main+0xc4>)
 8000a2c:	f00a fda6 	bl	800b57c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <main+0xc4>)
 8000a34:	f00a fda2 	bl	800b57c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <main+0xc8>)
 8000a3c:	f00a fd9e 	bl	800b57c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000a40:	2104      	movs	r1, #4
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <main+0xc8>)
 8000a44:	f00a fd9a 	bl	800b57c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <main+0xcc>)
 8000a4c:	f00a fd96 	bl	800b57c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 8000a50:	2104      	movs	r1, #4
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <main+0xcc>)
 8000a54:	f00a fd92 	bl	800b57c <HAL_TIM_Encoder_Start>


    setup();
 8000a58:	f002 fc12 	bl	8003280 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 8000a5c:	f002 fc4e 	bl	80032fc <loop>
 8000a60:	e7fc      	b.n	8000a5c <main+0xa8>
 8000a62:	bf00      	nop
 8000a64:	24000340 	.word	0x24000340
 8000a68:	2400025c 	.word	0x2400025c
 8000a6c:	2400038c 	.word	0x2400038c
 8000a70:	240003d8 	.word	0x240003d8
 8000a74:	24000470 	.word	0x24000470
 8000a78:	240002a8 	.word	0x240002a8
 8000a7c:	240002f4 	.word	0x240002f4
 8000a80:	24000424 	.word	0x24000424

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f00e fed2 	bl	800f83c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00e fecc 	bl	800f83c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f007 ffe1 	bl	8008a6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab6:	4a2b      	ldr	r2, [pc, #172]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aca:	bf00      	nop
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad8:	d1f8      	bne.n	8000acc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000af2:	2315      	movs	r3, #21
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 ffe4 	bl	8008ae0 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b1e:	f000 fc79 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	233f      	movs	r3, #63	; 0x3f
 8000b24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2303      	movs	r3, #3
 8000b28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000b2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b30:	2308      	movs	r3, #8
 8000b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b34:	2340      	movs	r3, #64	; 0x40
 8000b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b38:	2340      	movs	r3, #64	; 0x40
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f008 fb76 	bl	800923c <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000b56:	f000 fc5d 	bl	8001414 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3770      	adds	r7, #112	; 0x70
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	58024800 	.word	0x58024800

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b90:	2253      	movs	r2, #83	; 0x53
 8000b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b9c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bae:	4814      	ldr	r0, [pc, #80]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bb0:	f00a f9ec 	bl	800af8c <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bba:	f000 fc2b 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bcc:	f00a ff98 	bl	800bb00 <HAL_TIM_ConfigClockSource>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bd6:	f000 fc1d 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000be8:	f00b fcea 	bl	800c5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bf2:	f000 fc0f 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2400025c 	.word	0x2400025c

08000c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2224      	movs	r2, #36	; 0x24
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00e fe12 	bl	800f83c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c24:	4a21      	ldr	r2, [pc, #132]	; (8000cac <MX_TIM3_Init+0xa8>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c60:	2301      	movs	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c74:	f00a fbdc 	bl	800b430 <HAL_TIM_Encoder_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c7e:	f000 fbc9 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c90:	f00b fc96 	bl	800c5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c9a:	f000 fbbb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	240002a8 	.word	0x240002a8
 8000cac:	40000400 	.word	0x40000400

08000cb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2224      	movs	r2, #36	; 0x24
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00e fdbc 	bl	800f83c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000d20:	f00a fb86 	bl	800b430 <HAL_TIM_Encoder_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d2a:	f000 fb73 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000d3c:	f00b fc40 	bl	800c5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d46:	f000 fb65 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3730      	adds	r7, #48	; 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	240002f4 	.word	0x240002f4
 8000d58:	40000800 	.word	0x40000800

08000d5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <MX_TIM5_Init+0x98>)
 8000d7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d82:	2253      	movs	r2, #83	; 0x53
 8000d84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000da2:	f00a f8f3 	bl	800af8c <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000dac:	f000 fb32 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000dbe:	f00a fe9f 	bl	800bb00 <HAL_TIM_ConfigClockSource>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000dc8:	f000 fb24 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000dda:	f00b fbf1 	bl	800c5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 fb16 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000340 	.word	0x24000340
 8000df4:	40000c00 	.word	0x40000c00

08000df8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b098      	sub	sp, #96	; 0x60
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2234      	movs	r2, #52	; 0x34
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00e fd09 	bl	800f83c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e2c:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <MX_TIM8_Init+0x134>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4199;
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e3e:	f241 0267 	movw	r2, #4199	; 0x1067
 8000e42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e56:	4834      	ldr	r0, [pc, #208]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e58:	f00a f976 	bl	800b148 <HAL_TIM_PWM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f000 fad7 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e76:	4619      	mov	r1, r3
 8000e78:	482b      	ldr	r0, [pc, #172]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e7a:	f00b fba1 	bl	800c5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e84:	f000 fac6 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e94:	2300      	movs	r3, #0
 8000e96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481e      	ldr	r0, [pc, #120]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000eae:	f00a fd13 	bl	800b8d8 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000eb8:	f000 faac 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ebc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4818      	ldr	r0, [pc, #96]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000ec6:	f00a fd07 	bl	800b8d8 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000ed0:	f000 faa0 	bl	8001414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000f0a:	f00b fbf5 	bl	800c6f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000f14:	f000 fa7e 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000f1a:	f003 fbd3 	bl	80046c4 <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3760      	adds	r7, #96	; 0x60
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2400038c 	.word	0x2400038c
 8000f2c:	40010400 	.word	0x40010400

08000f30 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b098      	sub	sp, #96	; 0x60
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2234      	movs	r2, #52	; 0x34
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00e fc6d 	bl	800f83c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f64:	4a3a      	ldr	r2, [pc, #232]	; (8001050 <MX_TIM15_Init+0x120>)
 8000f66:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f76:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000f7a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b33      	ldr	r3, [pc, #204]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f8e:	482f      	ldr	r0, [pc, #188]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f90:	f00a f8da 	bl	800b148 <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 fa3b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000faa:	4619      	mov	r1, r3
 8000fac:	4827      	ldr	r0, [pc, #156]	; (800104c <MX_TIM15_Init+0x11c>)
 8000fae:	f00b fb07 	bl	800c5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 fa2c 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbc:	2360      	movs	r3, #96	; 0x60
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481a      	ldr	r0, [pc, #104]	; (800104c <MX_TIM15_Init+0x11c>)
 8000fe2:	f00a fc79 	bl	800b8d8 <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000fec:	f000 fa12 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4814      	ldr	r0, [pc, #80]	; (800104c <MX_TIM15_Init+0x11c>)
 8000ffa:	f00a fc6d 	bl	800b8d8 <HAL_TIM_PWM_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001004:	f000 fa06 	bl	8001414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <MX_TIM15_Init+0x11c>)
 8001030:	f00b fb62 	bl	800c6f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800103a:	f000 f9eb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <MX_TIM15_Init+0x11c>)
 8001040:	f003 fb40 	bl	80046c4 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3760      	adds	r7, #96	; 0x60
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	240003d8 	.word	0x240003d8
 8001050:	40014000 	.word	0x40014000

08001054 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f00e fbea 	bl	800f83c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <MX_TIM23_Init+0xa8>)
 8001076:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_TIM23_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001086:	f04f 32ff 	mov.w	r2, #4294967295
 800108a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_TIM23_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001098:	2303      	movs	r3, #3
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_TIM23_Init+0xa4>)
 80010c4:	f00a f9b4 	bl	800b430 <HAL_TIM_Encoder_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 80010ce:	f000 f9a1 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_TIM23_Init+0xa4>)
 80010e0:	f00b fa6e 	bl	800c5c0 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80010ea:	f000 f993 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3730      	adds	r7, #48	; 0x30
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	24000424 	.word	0x24000424
 80010fc:	4000e000 	.word	0x4000e000

08001100 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2224      	movs	r2, #36	; 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f00e fb94 	bl	800f83c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <MX_TIM24_Init+0xa8>)
 8001122:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001132:	f04f 32ff 	mov.w	r2, #4294967295
 8001136:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001144:	2303      	movs	r3, #3
 8001146:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001170:	f00a f95e 	bl	800b430 <HAL_TIM_Encoder_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 800117a:	f000 f94b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800118c:	f00b fa18 	bl	800c5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8001196:	f000 f93d 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3730      	adds	r7, #48	; 0x30
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000470 	.word	0x24000470
 80011a8:	4000e400 	.word	0x4000e400

080011ac <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_USART10_UART_Init+0x94>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 57600;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011bc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011f6:	f00b fb3d 	bl	800c874 <HAL_UART_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 f908 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_USART10_UART_Init+0x90>)
 8001208:	f00d fbb6 	bl	800e978 <HAL_UARTEx_SetTxFifoThreshold>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8001212:	f000 f8ff 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <MX_USART10_UART_Init+0x90>)
 800121a:	f00d fbeb 	bl	800e9f4 <HAL_UARTEx_SetRxFifoThreshold>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8001224:	f000 f8f6 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_USART10_UART_Init+0x90>)
 800122a:	f00d fb6c 	bl	800e906 <HAL_UARTEx_DisableFifoMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 f8ee 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	240004bc 	.word	0x240004bc
 8001240:	40011c00 	.word	0x40011c00

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_DMA_Init+0x4c>)
 800124c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_DMA_Init+0x4c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_DMA_Init+0x4c>)
 800125c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	200b      	movs	r0, #11
 800126e:	f004 f8e2 	bl	8005436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001272:	200b      	movs	r0, #11
 8001274:	f004 f8f9 	bl	800546a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	200c      	movs	r0, #12
 800127e:	f004 f8da 	bl	8005436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001282:	200c      	movs	r0, #12
 8001284:	f004 f8f1 	bl	800546a <HAL_NVIC_EnableIRQ>

}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	58024400 	.word	0x58024400

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <MX_GPIO_Init+0x170>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <MX_GPIO_Init+0x170>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <MX_GPIO_Init+0x170>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <MX_GPIO_Init+0x170>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <MX_GPIO_Init+0x170>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <MX_GPIO_Init+0x170>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <MX_GPIO_Init+0x170>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a3e      	ldr	r2, [pc, #248]	; (8001404 <MX_GPIO_Init+0x170>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <MX_GPIO_Init+0x170>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <MX_GPIO_Init+0x170>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a36      	ldr	r2, [pc, #216]	; (8001404 <MX_GPIO_Init+0x170>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <MX_GPIO_Init+0x170>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <MX_GPIO_Init+0x170>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <MX_GPIO_Init+0x170>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <MX_GPIO_Init+0x170>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_GPIO_Init+0x170>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <MX_GPIO_Init+0x170>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <MX_GPIO_Init+0x170>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800137c:	2200      	movs	r2, #0
 800137e:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <MX_GPIO_Init+0x174>)
 8001384:	f007 fb34 	bl	80089f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_GPIO_Init+0x178>)
 8001390:	f007 fb2e 	bl	80089f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001394:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001398:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4816      	ldr	r0, [pc, #88]	; (8001408 <MX_GPIO_Init+0x174>)
 80013ae:	f007 f875 	bl	800849c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_GPIO_Init+0x17c>)
 80013ca:	f007 f867 	bl	800849c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <MX_GPIO_Init+0x178>)
 80013e8:	f007 f858 	bl	800849c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2028      	movs	r0, #40	; 0x28
 80013f2:	f004 f820 	bl	8005436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013f6:	2028      	movs	r0, #40	; 0x28
 80013f8:	f004 f837 	bl	800546a <HAL_NVIC_EnableIRQ>

}
 80013fc:	bf00      	nop
 80013fe:	3730      	adds	r7, #48	; 0x30
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58024400 	.word	0x58024400
 8001408:	58021000 	.word	0x58021000
 800140c:	58020400 	.word	0x58020400
 8001410:	58020800 	.word	0x58020800

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>

0800141e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <_ZN3ros3MsgC1Ev+0x1c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	0800fe10 	.word	0x0800fe10

08001460 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
      data()
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ffe8 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ffcf 	bl	800141e <_ZN3ros4TimeC1Ev>
    {
    }
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800fdf8 	.word	0x0800fdf8

08001490 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6859      	ldr	r1, [r3, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	0a19      	lsrs	r1, r3, #8
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	0c19      	lsrs	r1, r3, #16
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3302      	adds	r3, #2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	b2ca      	uxtb	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	0e19      	lsrs	r1, r3, #24
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3303      	adds	r3, #3
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3304      	adds	r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6899      	ldr	r1, [r3, #8]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	0a19      	lsrs	r1, r3, #8
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3301      	adds	r3, #1
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	4413      	add	r3, r2
 8001504:	b2ca      	uxtb	r2, r1
 8001506:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	0c19      	lsrs	r1, r3, #16
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3302      	adds	r3, #2
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	0e19      	lsrs	r1, r3, #24
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3303      	adds	r3, #3
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4413      	add	r3, r2
 8001528:	b2ca      	uxtb	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3304      	adds	r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
      return offset;
 8001532:	68fb      	ldr	r3, [r7, #12]
    }
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	440b      	add	r3, r1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3302      	adds	r3, #2
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3303      	adds	r3, #3
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	440b      	add	r3, r1
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	061b      	lsls	r3, r3, #24
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	6839      	ldr	r1, [r7, #0]
 80015bc:	440b      	add	r3, r1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3302      	adds	r3, #2
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	440b      	add	r3, r1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	041b      	lsls	r3, r3, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3303      	adds	r3, #3
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	440b      	add	r3, r1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3304      	adds	r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]
     return offset;
 80015fa:	68fb      	ldr	r3, [r7, #12]
    }
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	0800fb68 	.word	0x0800fb68

08001624 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	0800fb7c 	.word	0x0800fb7c

08001640 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fef8 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	809a      	strh	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    {
    }
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0800fde0 	.word	0x0800fde0
 8001684:	0800fba0 	.word	0x0800fba0

08001688 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	8899      	ldrh	r1, [r3, #4]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	b2ca      	uxtb	r2, r1
 80016a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	889b      	ldrh	r3, [r3, #4]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b299      	uxth	r1, r3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3301      	adds	r3, #1
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	3302      	adds	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe24 	bl	8000310 <strlen>
 80016c8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	69b9      	ldr	r1, [r7, #24]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fe1c 	bl	8003310 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3304      	adds	r3, #4
 80016dc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	18d0      	adds	r0, r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4619      	mov	r1, r3
 80016ec:	f00e f898 	bl	800f820 <memcpy>
      offset += length_topic_name;
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4413      	add	r3, r2
 80016f6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fe07 	bl	8000310 <strlen>
 8001702:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	6979      	ldr	r1, [r7, #20]
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fdff 	bl	8003310 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	18d0      	adds	r0, r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4619      	mov	r1, r3
 8001726:	f00e f87b 	bl	800f820 <memcpy>
      offset += length_message_type;
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	4413      	add	r3, r2
 8001730:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fdea 	bl	8000310 <strlen>
 800173c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fde2 	bl	8003310 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	3304      	adds	r3, #4
 8001750:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	18d0      	adds	r0, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4619      	mov	r1, r3
 8001760:	f00e f85e 	bl	800f820 <memcpy>
      offset += length_md5sum;
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4413      	add	r3, r2
 800176a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4413      	add	r3, r2
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	0a19      	lsrs	r1, r3, #8
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0c19      	lsrs	r1, r3, #16
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3302      	adds	r3, #2
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0e19      	lsrs	r1, r3, #24
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3303      	adds	r3, #3
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	61fb      	str	r3, [r7, #28]
      return offset;
 80017b4:	69fb      	ldr	r3, [r7, #28]
    }
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017be:	b580      	push	{r7, lr}
 80017c0:	b08a      	sub	sp, #40	; 0x28
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	889b      	ldrh	r3, [r3, #4]
 80017de:	b21a      	sxth	r2, r3
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	3301      	adds	r3, #1
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	440b      	add	r3, r1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3302      	adds	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	441a      	add	r2, r3
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fd9e 	bl	800334c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3304      	adds	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	4413      	add	r3, r2
 8001820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	441a      	add	r2, r3
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3b01      	subs	r3, #1
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	440b      	add	r3, r1
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3301      	adds	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	e7ec      	b.n	800181a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4413      	add	r3, r2
 8001846:	3b01      	subs	r3, #1
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	4413      	add	r3, r2
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	3b01      	subs	r3, #1
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	441a      	add	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	441a      	add	r2, r3
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fd6b 	bl	800334c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	3304      	adds	r3, #4
 800187a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	6a3a      	ldr	r2, [r7, #32]
 8001888:	429a      	cmp	r2, r3
 800188a:	d20c      	bcs.n	80018a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	441a      	add	r2, r3
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	3b01      	subs	r3, #1
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	440b      	add	r3, r1
 800189a:	7812      	ldrb	r2, [r2, #0]
 800189c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	3301      	adds	r3, #1
 80018a2:	623b      	str	r3, [r7, #32]
 80018a4:	e7ec      	b.n	8001880 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	3b01      	subs	r3, #1
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	441a      	add	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4413      	add	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	441a      	add	r2, r3
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 fd38 	bl	800334c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	3304      	adds	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d20c      	bcs.n	800190c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	441a      	add	r2, r3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	440b      	add	r3, r1
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3301      	adds	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e7ec      	b.n	80018e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4413      	add	r3, r2
 8001912:	3b01      	subs	r3, #1
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	3b01      	subs	r3, #1
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	441a      	add	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	440a      	add	r2, r1
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	3301      	adds	r3, #1
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	440b      	add	r3, r1
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	4313      	orrs	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3302      	adds	r3, #2
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	440b      	add	r3, r1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	4313      	orrs	r3, r2
 8001964:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	3303      	adds	r3, #3
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	440b      	add	r3, r1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	061b      	lsls	r3, r3, #24
 8001974:	4313      	orrs	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	3304      	adds	r3, #4
 8001982:	61bb      	str	r3, [r7, #24]
     return offset;
 8001984:	69bb      	ldr	r3, [r7, #24]
    }
 8001986:	4618      	mov	r0, r3
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	0800fba4 	.word	0x0800fba4

080019ac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	0800fbc0 	.word	0x0800fbc0

080019c8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fd34 	bl	8001440 <_ZN3ros3MsgC1Ev>
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	711a      	strb	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80019e8:	609a      	str	r2, [r3, #8]
    {
    }
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	0800fdc8 	.word	0x0800fdc8
 80019f8:	0800fba0 	.word	0x0800fba0

080019fc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	7912      	ldrb	r2, [r2, #4]
 8001a14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fc75 	bl	8000310 <strlen>
 8001a26:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fc6d 	bl	8003310 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	18d0      	adds	r0, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f00d fee9 	bl	800f820 <memcpy>
      offset += length_msg;
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a56:	68fb      	ldr	r3, [r7, #12]
    }
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	441a      	add	r2, r3
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fc5d 	bl	800334c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	3304      	adds	r3, #4
 8001a96:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d20c      	bcs.n	8001ac2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	441a      	add	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e7ec      	b.n	8001a9c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	441a      	add	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
     return offset;
 8001ae6:	693b      	ldr	r3, [r7, #16]
    }
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	0800fbe4 	.word	0x0800fbe4

08001b0c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	0800fbf8 	.word	0x0800fbf8

08001b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fc84 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	0800fdb0 	.word	0x0800fdb0

08001b70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	b2ca      	uxtb	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0a19      	lsrs	r1, r3, #8
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0c19      	lsrs	r1, r3, #16
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	b2ca      	uxtb	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	0e19      	lsrs	r1, r3, #24
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3303      	adds	r3, #3
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d22b      	bcs.n	8001c2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	0a19      	lsrs	r1, r3, #8
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2ca      	uxtb	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	0c19      	lsrs	r1, r3, #16
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	3302      	adds	r3, #2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	0e19      	lsrs	r1, r3, #24
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3303      	adds	r3, #3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	3304      	adds	r3, #4
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	e7ce      	b.n	8001bcc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6919      	ldr	r1, [r3, #16]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	b2ca      	uxtb	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	0a19      	lsrs	r1, r3, #8
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	0c19      	lsrs	r1, r3, #16
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3302      	adds	r3, #2
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2ca      	uxtb	r2, r1
 8001c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	0e19      	lsrs	r1, r3, #24
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3303      	adds	r3, #3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3304      	adds	r3, #4
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d22b      	bcs.n	8001cde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b2ca      	uxtb	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	0a19      	lsrs	r1, r3, #8
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0c19      	lsrs	r1, r3, #16
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b2ca      	uxtb	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	0e19      	lsrs	r1, r3, #24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	e7ce      	b.n	8001c7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69d9      	ldr	r1, [r3, #28]
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b2ca      	uxtb	r2, r1
 8001cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	0a19      	lsrs	r1, r3, #8
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	0c19      	lsrs	r1, r3, #16
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	3302      	adds	r3, #2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	0e19      	lsrs	r1, r3, #24
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3303      	adds	r3, #3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3304      	adds	r3, #4
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d228      	bcs.n	8001d88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fae4 	bl	8000310 <strlen>
 8001d48:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fadc 	bl	8003310 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	18d0      	adds	r0, r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4619      	mov	r1, r3
 8001d74:	f00d fd54 	bl	800f820 <memcpy>
      offset += length_stringsi;
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	e7d1      	b.n	8001d2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b08e      	sub	sp, #56	; 0x38
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	3301      	adds	r3, #1
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	6a3a      	ldr	r2, [r7, #32]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	6a3a      	ldr	r2, [r7, #32]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	6a3a      	ldr	r2, [r7, #32]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	3304      	adds	r3, #4
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	6a3a      	ldr	r2, [r7, #32]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d90a      	bls.n	8001e06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f00d fd26 	bl	800f84c <realloc>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a3a      	ldr	r2, [r7, #32]
 8001e0a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d236      	bcs.n	8001e88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	440a      	add	r2, r1
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	3301      	adds	r3, #1
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	440b      	add	r3, r1
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	3302      	adds	r3, #2
 8001e44:	6839      	ldr	r1, [r7, #0]
 8001e46:	440b      	add	r3, r1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	3303      	adds	r3, #3
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	440b      	add	r3, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e82:	3301      	adds	r3, #1
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
 8001e86:	e7c3      	b.n	8001e10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	3301      	adds	r3, #1
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb8:	3303      	adds	r3, #3
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	3304      	adds	r3, #4
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d90a      	bls.n	8001eee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f00d fcb2 	bl	800f84c <realloc>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d236      	bcs.n	8001f70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	440a      	add	r2, r1
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	3301      	adds	r3, #1
 8001f1a:	6839      	ldr	r1, [r7, #0]
 8001f1c:	440b      	add	r3, r1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	440b      	add	r3, r1
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	041b      	lsls	r3, r3, #16
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	440b      	add	r3, r1
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	3304      	adds	r3, #4
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	3214      	adds	r2, #20
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6e:	e7c3      	b.n	8001ef8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	3302      	adds	r3, #2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d90a      	bls.n	8001fd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f00d fc3e 	bl	800f84c <realloc>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d23f      	bcs.n	800206a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	441a      	add	r2, r3
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 f9a8 	bl	800334c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffe:	3304      	adds	r3, #4
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200e:	429a      	cmp	r2, r3
 8002010:	d20c      	bcs.n	800202c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	441a      	add	r2, r3
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3b01      	subs	r3, #1
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	440b      	add	r3, r1
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	3301      	adds	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e7ec      	b.n	8002006 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800202c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	3b01      	subs	r3, #1
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	3b01      	subs	r3, #1
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	441a      	add	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	3220      	adds	r2, #32
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	3301      	adds	r3, #1
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
 8002068:	e7ba      	b.n	8001fe0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800206c:	4618      	mov	r0, r3
 800206e:	3738      	adds	r7, #56	; 0x38
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	0800fd04 	.word	0x0800fd04

08002090 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0800fc1c 	.word	0x0800fc1c

080020ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68d8      	ldr	r0, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6891      	ldr	r1, [r2, #8]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4798      	blx	r3
 80020f8:	4603      	mov	r3, r0
  };
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
  }
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a42      	ldr	r2, [pc, #264]	; (8002238 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d068      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a40      	ldr	r2, [pc, #256]	; (800223c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d061      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d05a      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d053      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d04c      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a36      	ldr	r2, [pc, #216]	; (800224c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d045      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a33      	ldr	r2, [pc, #204]	; (8002250 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d03e      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d037      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d030      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2c      	ldr	r2, [pc, #176]	; (800225c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d029      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a27      	ldr	r2, [pc, #156]	; (8002264 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d01b      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a24      	ldr	r2, [pc, #144]	; (8002268 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d014      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a22      	ldr	r2, [pc, #136]	; (800226c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d006      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d109      	bne.n	8002218 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002216:	e008      	b.n	800222a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40020010 	.word	0x40020010
 800223c:	40020028 	.word	0x40020028
 8002240:	40020040 	.word	0x40020040
 8002244:	40020058 	.word	0x40020058
 8002248:	40020070 	.word	0x40020070
 800224c:	40020088 	.word	0x40020088
 8002250:	400200a0 	.word	0x400200a0
 8002254:	400200b8 	.word	0x400200b8
 8002258:	40020410 	.word	0x40020410
 800225c:	40020428 	.word	0x40020428
 8002260:	40020440 	.word	0x40020440
 8002264:	40020458 	.word	0x40020458
 8002268:	40020470 	.word	0x40020470
 800226c:	40020488 	.word	0x40020488
 8002270:	400204a0 	.word	0x400204a0
 8002274:	400204b8 	.word	0x400204b8

08002278 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	461a      	mov	r2, r3
 8002296:	2300      	movs	r3, #0
 8002298:	6093      	str	r3, [r2, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	461a      	mov	r2, r3
 80022a2:	2300      	movs	r3, #0
 80022a4:	60d3      	str	r3, [r2, #12]
    }
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	240004bc 	.word	0x240004bc

080022b8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f804 	bl	80022ce <_ZN13STM32Hardware10reset_rbufEv>
    }
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022e2:	4619      	mov	r1, r3
 80022e4:	f00a fbe4 	bl	800cab0 <HAL_UART_Receive_DMA>
    }
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff09 	bl	800211c <_ZN13STM32Hardware10getRdmaIndEv>
 800230a:	4603      	mov	r3, r0
 800230c:	429c      	cmp	r4, r3
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002320:	1c59      	adds	r1, r3, #1
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002336:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002340:	68fb      	ldr	r3, [r7, #12]
    }
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
	...

0800234c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235c:	2b20      	cmp	r3, #32
 800235e:	d108      	bne.n	8002372 <_ZN13STM32Hardware5flushEv+0x26>
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f083 0301 	eor.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <_ZN13STM32Hardware5flushEv+0x26>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <_ZN13STM32Hardware5flushEv+0x28>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d049      	beq.n	800240c <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	d039      	beq.n	8002406 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d20c      	bcs.n	80023c0 <_ZN13STM32Hardware5flushEv+0x74>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	e007      	b.n	80023d0 <_ZN13STM32Hardware5flushEv+0x84>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	89fa      	ldrh	r2, [r7, #14]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f00a facf 	bl	800c98c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	4413      	add	r3, r2
 80023fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002404:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002406:	4b03      	ldr	r3, [pc, #12]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
      }
    }
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2400063c 	.word	0x2400063c

08002418 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
      int n = length;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242e:	bfa8      	it	ge
 8002430:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002434:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4293      	cmp	r3, r2
 8002446:	bf28      	it	cs
 8002448:	4613      	movcs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	4618      	mov	r0, r3
 8002462:	f00d f9dd 	bl	800f820 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4413      	add	r3, r2
 8002472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	429a      	cmp	r2, r3
 8002484:	d00b      	beq.n	800249e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f603 0008 	addw	r0, r3, #2056	; 0x808
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	18d1      	adds	r1, r2, r3
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	461a      	mov	r2, r3
 800249a:	f00d f9c1 	bl	800f820 <memcpy>
      }

      flush();
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff54 	bl	800234c <_ZN13STM32Hardware5flushEv>
    }
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	f002 feb4 	bl	8005220 <HAL_GetTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ffb6 	bl	8001440 <_ZN3ros3MsgC1Ev>
 80024d4:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	0800fd6c 	.word	0x0800fd6c

08002514 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002514:	b480      	push	{r7}
 8002516:	b08b      	sub	sp, #44	; 0x2c
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002528:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800252c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002532:	6838      	ldr	r0, [r7, #0]
 8002534:	4401      	add	r1, r0
 8002536:	b2d3      	uxtb	r3, r2
 8002538:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800253a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	0a02      	lsrs	r2, r0, #8
 8002548:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800254c:	0a0b      	lsrs	r3, r1, #8
 800254e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002550:	3101      	adds	r1, #1
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	4401      	add	r1, r0
 8002556:	b2d3      	uxtb	r3, r2
 8002558:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800255a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	0c02      	lsrs	r2, r0, #16
 8002568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800256c:	0c0b      	lsrs	r3, r1, #16
 800256e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002570:	3102      	adds	r1, #2
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	4401      	add	r1, r0
 8002576:	b2d3      	uxtb	r3, r2
 8002578:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800257a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	0e02      	lsrs	r2, r0, #24
 8002588:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800258c:	0e0b      	lsrs	r3, r1, #24
 800258e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002590:	3103      	adds	r1, #3
 8002592:	6838      	ldr	r0, [r7, #0]
 8002594:	4401      	add	r1, r0
 8002596:	b2d3      	uxtb	r3, r2
 8002598:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800259a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	000a      	movs	r2, r1
 80025a8:	2300      	movs	r3, #0
 80025aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ac:	3104      	adds	r1, #4
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	4401      	add	r1, r0
 80025b2:	b2d3      	uxtb	r3, r2
 80025b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80025b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	0a0a      	lsrs	r2, r1, #8
 80025c4:	2300      	movs	r3, #0
 80025c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c8:	3105      	adds	r1, #5
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	4401      	add	r1, r0
 80025ce:	b2d3      	uxtb	r3, r2
 80025d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80025d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	0c0a      	lsrs	r2, r1, #16
 80025e0:	2300      	movs	r3, #0
 80025e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e4:	3106      	adds	r1, #6
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	4401      	add	r1, r0
 80025ea:	b2d3      	uxtb	r3, r2
 80025ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80025ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	0e0a      	lsrs	r2, r1, #24
 80025fc:	2300      	movs	r3, #0
 80025fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002600:	3107      	adds	r1, #7
 8002602:	6838      	ldr	r0, [r7, #0]
 8002604:	4401      	add	r1, r0
 8002606:	b2d3      	uxtb	r3, r2
 8002608:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	3308      	adds	r3, #8
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002616:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800261a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800261e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002620:	6838      	ldr	r0, [r7, #0]
 8002622:	4401      	add	r1, r0
 8002624:	b2d3      	uxtb	r3, r2
 8002626:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002628:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	0a02      	lsrs	r2, r0, #8
 8002636:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800263a:	0a0b      	lsrs	r3, r1, #8
 800263c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263e:	3101      	adds	r1, #1
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	4401      	add	r1, r0
 8002644:	b2d3      	uxtb	r3, r2
 8002646:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002648:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	0c02      	lsrs	r2, r0, #16
 8002656:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800265a:	0c0b      	lsrs	r3, r1, #16
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	3102      	adds	r1, #2
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	4401      	add	r1, r0
 8002664:	b2d3      	uxtb	r3, r2
 8002666:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002668:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	0e02      	lsrs	r2, r0, #24
 8002676:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800267a:	0e0b      	lsrs	r3, r1, #24
 800267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267e:	3103      	adds	r1, #3
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	4401      	add	r1, r0
 8002684:	b2d3      	uxtb	r3, r2
 8002686:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002688:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	000a      	movs	r2, r1
 8002696:	2300      	movs	r3, #0
 8002698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269a:	3104      	adds	r1, #4
 800269c:	6838      	ldr	r0, [r7, #0]
 800269e:	4401      	add	r1, r0
 80026a0:	b2d3      	uxtb	r3, r2
 80026a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80026a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	0a0a      	lsrs	r2, r1, #8
 80026b2:	2300      	movs	r3, #0
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	3105      	adds	r1, #5
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	4401      	add	r1, r0
 80026bc:	b2d3      	uxtb	r3, r2
 80026be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80026c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	0c0a      	lsrs	r2, r1, #16
 80026ce:	2300      	movs	r3, #0
 80026d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d2:	3106      	adds	r1, #6
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	4401      	add	r1, r0
 80026d8:	b2d3      	uxtb	r3, r2
 80026da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80026dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	0e0a      	lsrs	r2, r1, #24
 80026ea:	2300      	movs	r3, #0
 80026ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ee:	3107      	adds	r1, #7
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	4401      	add	r1, r0
 80026f4:	b2d3      	uxtb	r3, r2
 80026f6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	3308      	adds	r3, #8
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002704:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800270c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	4401      	add	r1, r0
 8002712:	b2d3      	uxtb	r3, r2
 8002714:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	0a02      	lsrs	r2, r0, #8
 8002724:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002728:	0a0b      	lsrs	r3, r1, #8
 800272a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272c:	3101      	adds	r1, #1
 800272e:	6838      	ldr	r0, [r7, #0]
 8002730:	4401      	add	r1, r0
 8002732:	b2d3      	uxtb	r3, r2
 8002734:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002736:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	0c02      	lsrs	r2, r0, #16
 8002744:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002748:	0c0b      	lsrs	r3, r1, #16
 800274a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274c:	3102      	adds	r1, #2
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	4401      	add	r1, r0
 8002752:	b2d3      	uxtb	r3, r2
 8002754:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	0e02      	lsrs	r2, r0, #24
 8002764:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002768:	0e0b      	lsrs	r3, r1, #24
 800276a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276c:	3103      	adds	r1, #3
 800276e:	6838      	ldr	r0, [r7, #0]
 8002770:	4401      	add	r1, r0
 8002772:	b2d3      	uxtb	r3, r2
 8002774:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	000a      	movs	r2, r1
 8002784:	2300      	movs	r3, #0
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	3104      	adds	r1, #4
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	4401      	add	r1, r0
 800278e:	b2d3      	uxtb	r3, r2
 8002790:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	0a0a      	lsrs	r2, r1, #8
 80027a0:	2300      	movs	r3, #0
 80027a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a4:	3105      	adds	r1, #5
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	4401      	add	r1, r0
 80027aa:	b2d3      	uxtb	r3, r2
 80027ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80027ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	0c0a      	lsrs	r2, r1, #16
 80027bc:	2300      	movs	r3, #0
 80027be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c0:	3106      	adds	r1, #6
 80027c2:	6838      	ldr	r0, [r7, #0]
 80027c4:	4401      	add	r1, r0
 80027c6:	b2d3      	uxtb	r3, r2
 80027c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80027ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	0e0a      	lsrs	r2, r1, #24
 80027d8:	2300      	movs	r3, #0
 80027da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027dc:	3107      	adds	r1, #7
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	4401      	add	r1, r0
 80027e2:	b2d3      	uxtb	r3, r2
 80027e4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3308      	adds	r3, #8
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027ee:	4618      	mov	r0, r3
 80027f0:	372c      	adds	r7, #44	; 0x2c
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027fa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027fe:	b0eb      	sub	sp, #428	; 0x1ac
 8002800:	af00      	add	r7, sp, #0
 8002802:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002806:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800281c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002820:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002824:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2200      	movs	r2, #0
 8002830:	461c      	mov	r4, r3
 8002832:	4615      	mov	r5, r2
 8002834:	ea40 0804 	orr.w	r8, r0, r4
 8002838:	ea41 0905 	orr.w	r9, r1, r5
 800283c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002840:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002844:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2200      	movs	r2, #0
 8002856:	469a      	mov	sl, r3
 8002858:	4693      	mov	fp, r2
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002866:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800286a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800286e:	ea40 0402 	orr.w	r4, r0, r2
 8002872:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002876:	430b      	orrs	r3, r1
 8002878:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800287c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002880:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002884:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002888:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800289e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80028ae:	464c      	mov	r4, r9
 80028b0:	0423      	lsls	r3, r4, #16
 80028b2:	4644      	mov	r4, r8
 80028b4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80028b8:	4644      	mov	r4, r8
 80028ba:	0422      	lsls	r2, r4, #16
 80028bc:	ea40 0402 	orr.w	r4, r0, r2
 80028c0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80028c4:	430b      	orrs	r3, r1
 80028c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80028ca:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80028ce:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028d2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028da:	1cda      	adds	r2, r3, #3
 80028dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028e0:	4413      	add	r3, r2
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80028ec:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80028f0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80028f4:	4623      	mov	r3, r4
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80028fc:	4623      	mov	r3, r4
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002904:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002908:	4623      	mov	r3, r4
 800290a:	4303      	orrs	r3, r0
 800290c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002910:	462b      	mov	r3, r5
 8002912:	430b      	orrs	r3, r1
 8002914:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002918:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800291c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002920:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002924:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002928:	1d1a      	adds	r2, r3, #4
 800292a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800293a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800294a:	0023      	movs	r3, r4
 800294c:	2200      	movs	r2, #0
 800294e:	ea40 0402 	orr.w	r4, r0, r2
 8002952:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002956:	430b      	orrs	r3, r1
 8002958:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800295c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002960:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002964:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002968:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800296c:	1d5a      	adds	r2, r3, #5
 800296e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2200      	movs	r2, #0
 800297a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800297e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800298e:	0223      	lsls	r3, r4, #8
 8002990:	2200      	movs	r2, #0
 8002992:	ea40 0402 	orr.w	r4, r0, r2
 8002996:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800299a:	430b      	orrs	r3, r1
 800299c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80029a0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80029a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80029a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b0:	1d9a      	adds	r2, r3, #6
 80029b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029c2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80029d2:	0423      	lsls	r3, r4, #16
 80029d4:	2200      	movs	r2, #0
 80029d6:	ea40 0402 	orr.w	r4, r0, r2
 80029da:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80029de:	430b      	orrs	r3, r1
 80029e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029e4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80029e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80029ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f4:	1dda      	adds	r2, r3, #7
 80029f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002a06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002a16:	0623      	lsls	r3, r4, #24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	ea40 0402 	orr.w	r4, r0, r2
 8002a1e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002a22:	430b      	orrs	r3, r1
 8002a24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a28:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002a2c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002a30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a34:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a38:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002a3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a40:	3308      	adds	r3, #8
 8002a42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a56:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a6a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002a6e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002a72:	4623      	mov	r3, r4
 8002a74:	4303      	orrs	r3, r0
 8002a76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a82:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002a86:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002aa4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002ab4:	464c      	mov	r4, r9
 8002ab6:	0223      	lsls	r3, r4, #8
 8002ab8:	4644      	mov	r4, r8
 8002aba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002abe:	4644      	mov	r4, r8
 8002ac0:	0222      	lsls	r2, r4, #8
 8002ac2:	ea40 0402 	orr.w	r4, r0, r2
 8002ac6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002aca:	430b      	orrs	r3, r1
 8002acc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ad0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002ad4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ad8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ae0:	1c9a      	adds	r2, r3, #2
 8002ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002b02:	464c      	mov	r4, r9
 8002b04:	0423      	lsls	r3, r4, #16
 8002b06:	4644      	mov	r4, r8
 8002b08:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b0c:	4644      	mov	r4, r8
 8002b0e:	0422      	lsls	r2, r4, #16
 8002b10:	ea40 0402 	orr.w	r4, r0, r2
 8002b14:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b1e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002b22:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b2e:	1cda      	adds	r2, r3, #3
 8002b30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b40:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b44:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002b48:	4623      	mov	r3, r4
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b50:	4623      	mov	r3, r4
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b58:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002b5c:	4623      	mov	r3, r4
 8002b5e:	4303      	orrs	r3, r0
 8002b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b64:	462b      	mov	r3, r5
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b6c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002b70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b7c:	1d1a      	adds	r2, r3, #4
 8002b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b8e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002b9e:	0023      	movs	r3, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	ea40 0402 	orr.w	r4, r0, r2
 8002ba6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002baa:	430b      	orrs	r3, r1
 8002bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002bb0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002bb4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002bb8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc0:	1d5a      	adds	r2, r3, #5
 8002bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bd2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002be2:	0223      	lsls	r3, r4, #8
 8002be4:	2200      	movs	r2, #0
 8002be6:	ea40 0402 	orr.w	r4, r0, r2
 8002bea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bf4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002bf8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002bfc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c04:	1d9a      	adds	r2, r3, #6
 8002c06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002c26:	0423      	lsls	r3, r4, #16
 8002c28:	2200      	movs	r2, #0
 8002c2a:	ea40 0402 	orr.w	r4, r0, r2
 8002c2e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002c32:	430b      	orrs	r3, r1
 8002c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c38:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002c3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c48:	1dda      	adds	r2, r3, #7
 8002c4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002c6a:	0623      	lsls	r3, r4, #24
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	ea40 0402 	orr.w	r4, r0, r2
 8002c72:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002c76:	430b      	orrs	r3, r1
 8002c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c7c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002c80:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002c84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c88:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c8c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002c90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ca6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002caa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002cae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cbe:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002cc2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	4303      	orrs	r3, r0
 8002cca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ccc:	462b      	mov	r3, r5
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cd2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002cd6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002cde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ce8:	4413      	add	r3, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2200      	movs	r2, #0
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
 8002cf2:	677a      	str	r2, [r7, #116]	; 0x74
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d00:	464c      	mov	r4, r9
 8002d02:	0223      	lsls	r3, r4, #8
 8002d04:	4644      	mov	r4, r8
 8002d06:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d0a:	4644      	mov	r4, r8
 8002d0c:	0222      	lsls	r2, r4, #8
 8002d0e:	ea40 0402 	orr.w	r4, r0, r2
 8002d12:	66bc      	str	r4, [r7, #104]	; 0x68
 8002d14:	430b      	orrs	r3, r1
 8002d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d18:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002d1c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d20:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d28:	1c9a      	adds	r2, r3, #2
 8002d2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2200      	movs	r2, #0
 8002d36:	663b      	str	r3, [r7, #96]	; 0x60
 8002d38:	667a      	str	r2, [r7, #100]	; 0x64
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d46:	464c      	mov	r4, r9
 8002d48:	0423      	lsls	r3, r4, #16
 8002d4a:	4644      	mov	r4, r8
 8002d4c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d50:	4644      	mov	r4, r8
 8002d52:	0422      	lsls	r2, r4, #16
 8002d54:	ea40 0402 	orr.w	r4, r0, r2
 8002d58:	65bc      	str	r4, [r7, #88]	; 0x58
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d5e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002d62:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d66:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d6e:	1cda      	adds	r2, r3, #3
 8002d70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d7e:	657a      	str	r2, [r7, #84]	; 0x54
 8002d80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002d84:	4623      	mov	r3, r4
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002d94:	4623      	mov	r3, r4
 8002d96:	4303      	orrs	r3, r0
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002da0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002da4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002da8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002db0:	1d1a      	adds	r2, r3, #4
 8002db2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002dcc:	0023      	movs	r3, r4
 8002dce:	2200      	movs	r2, #0
 8002dd0:	ea40 0402 	orr.w	r4, r0, r2
 8002dd4:	633c      	str	r4, [r7, #48]	; 0x30
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dda:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002dde:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002de2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002de6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dea:	1d5a      	adds	r2, r3, #5
 8002dec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2200      	movs	r2, #0
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002e06:	0223      	lsls	r3, r4, #8
 8002e08:	2200      	movs	r2, #0
 8002e0a:	ea40 0402 	orr.w	r4, r0, r2
 8002e0e:	623c      	str	r4, [r7, #32]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
 8002e14:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002e18:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e1c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e24:	3306      	adds	r3, #6
 8002e26:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	61fa      	str	r2, [r7, #28]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	69bc      	ldr	r4, [r7, #24]
 8002e40:	0423      	lsls	r3, r4, #16
 8002e42:	2200      	movs	r2, #0
 8002e44:	ea40 0402 	orr.w	r4, r0, r2
 8002e48:	613c      	str	r4, [r7, #16]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e52:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e56:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e5e:	3307      	adds	r3, #7
 8002e60:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e64:	4413      	add	r3, r2
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	60fa      	str	r2, [r7, #12]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	68bc      	ldr	r4, [r7, #8]
 8002e7a:	0623      	lsls	r3, r4, #24
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	ea40 0402 	orr.w	r4, r0, r2
 8002e82:	603c      	str	r4, [r7, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e8c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002e90:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002e94:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002e98:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002e9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002ea6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002eb6:	4770      	bx	lr

08002eb8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	0800fc40 	.word	0x0800fc40

08002ed4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	0800fc58 	.word	0x0800fc58

08002ef0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe faa0 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8002f00:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3308      	adds	r3, #8
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fada 	bl	80024c4 <_ZN13geometry_msgs7Vector3C1Ev>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3328      	adds	r3, #40	; 0x28
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fad5 	bl	80024c4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0800fd54 	.word	0x0800fd54

08002f28 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f103 0008 	add.w	r0, r3, #8
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7ff fae6 	bl	8002514 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7ff fad9 	bl	8002514 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    }
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f103 0008 	add.w	r0, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7ff fc33 	bl	80027fa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7ff fc26 	bl	80027fa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
     return offset;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    }
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	0800fc7c 	.word	0x0800fc7c

08002fdc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	0800fc90 	.word	0x0800fc90

08002ff8 <_Z8callbackRKN13geometry_msgs5TwistE>:
double Vx, Vy, W, rVx, rVy, rW;
geometry_msgs::Twist insVel;
ros::Publisher pub("/ins_vel", &insVel);

void callback(const geometry_msgs::Twist &msg)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	Vx = vel_World2Car('x', msg.linear.x, msg.linear.y);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	ed93 7b04 	vldr	d7, [r3, #16]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	ed93 6b06 	vldr	d6, [r3, #24]
 800300c:	eeb0 1b46 	vmov.f64	d1, d6
 8003010:	eeb0 0b47 	vmov.f64	d0, d7
 8003014:	2078      	movs	r0, #120	; 0x78
 8003016:	f001 f909 	bl	800422c <vel_World2Car>
 800301a:	eeb0 7b40 	vmov.f64	d7, d0
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <_Z8callbackRKN13geometry_msgs5TwistE+0x64>)
 8003020:	ed83 7b00 	vstr	d7, [r3]
	Vy = vel_World2Car('y', msg.linear.x, msg.linear.y);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	ed93 7b04 	vldr	d7, [r3, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	ed93 6b06 	vldr	d6, [r3, #24]
 8003030:	eeb0 1b46 	vmov.f64	d1, d6
 8003034:	eeb0 0b47 	vmov.f64	d0, d7
 8003038:	2079      	movs	r0, #121	; 0x79
 800303a:	f001 f8f7 	bl	800422c <vel_World2Car>
 800303e:	eeb0 7b40 	vmov.f64	d7, d0
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <_Z8callbackRKN13geometry_msgs5TwistE+0x68>)
 8003044:	ed83 7b00 	vstr	d7, [r3]
	W = msg.angular.z;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800304e:	4905      	ldr	r1, [pc, #20]	; (8003064 <_Z8callbackRKN13geometry_msgs5TwistE+0x6c>)
 8003050:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	24001b88 	.word	0x24001b88
 8003060:	24001b90 	.word	0x24001b90
 8003064:	24001b98 	.word	0x24001b98

08003068 <interPub>:
void interPub(void){
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	insVel.linear.x = rVx;
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <interPub+0x74>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	491b      	ldr	r1, [pc, #108]	; (80030e0 <interPub+0x78>)
 8003074:	e9c1 2304 	strd	r2, r3, [r1, #16]
	insVel.linear.y = rVy;
 8003078:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <interPub+0x7c>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	4918      	ldr	r1, [pc, #96]	; (80030e0 <interPub+0x78>)
 8003080:	e9c1 2306 	strd	r2, r3, [r1, #24]
	insVel.angular.z = rW;
 8003084:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <interPub+0x80>)
 8003086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308a:	4915      	ldr	r1, [pc, #84]	; (80030e0 <interPub+0x78>)
 800308c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	insVel.angular.x = odom.x;
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <interPub+0x84>)
 8003092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003096:	4912      	ldr	r1, [pc, #72]	; (80030e0 <interPub+0x78>)
 8003098:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	insVel.angular.y = odom.y;
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <interPub+0x84>)
 800309e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030a2:	490f      	ldr	r1, [pc, #60]	; (80030e0 <interPub+0x78>)
 80030a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	insVel.linear.z = odom.theta;
 80030a8:	4b10      	ldr	r3, [pc, #64]	; (80030ec <interPub+0x84>)
 80030aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030ae:	490c      	ldr	r1, [pc, #48]	; (80030e0 <interPub+0x78>)
 80030b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	run_inter0 ++;
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <interPub+0x88>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <interPub+0x88>)
 80030bc:	6013      	str	r3, [r2, #0]

	if(run_inter0 > 1)
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <interPub+0x88>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	dd03      	ble.n	80030ce <interPub+0x66>
		pub.publish(&insVel);
 80030c6:	4906      	ldr	r1, [pc, #24]	; (80030e0 <interPub+0x78>)
 80030c8:	480a      	ldr	r0, [pc, #40]	; (80030f4 <interPub+0x8c>)
 80030ca:	f7ff f806 	bl	80020da <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	run_inter1 ++;
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <interPub+0x90>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <interPub+0x90>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	24001ba0 	.word	0x24001ba0
 80030e0:	24001bb8 	.word	0x24001bb8
 80030e4:	24001ba8 	.word	0x24001ba8
 80030e8:	24001bb0 	.word	0x24001bb0
 80030ec:	24001c78 	.word	0x24001c78
 80030f0:	24001b7c 	.word	0x24001b7c
 80030f4:	24001c00 	.word	0x24001c00
 80030f8:	24001b80 	.word	0x24001b80

080030fc <_Z13Error_Handlerv>:

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);

/* UART Communication */
void Error_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003100:	b672      	cpsid	i
}
 8003102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003104:	e7fe      	b.n	8003104 <_Z13Error_Handlerv+0x8>
	...

08003108 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 800310c:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800310e:	4a2d      	ldr	r2, [pc, #180]	; (80031c4 <_ZL20MX_USART10_UART_Initv+0xbc>)
 8003110:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8003112:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003118:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003146:	2200      	movs	r2, #0
 8003148:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800314c:	2200      	movs	r2, #0
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8003150:	481b      	ldr	r0, [pc, #108]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003152:	f009 fb8f 	bl	800c874 <HAL_UART_Init>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 8003166:	f7ff ffc9 	bl	80030fc <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800316a:	2100      	movs	r1, #0
 800316c:	4814      	ldr	r0, [pc, #80]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800316e:	f00b fc03 	bl	800e978 <HAL_UARTEx_SetTxFifoThreshold>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 8003182:	f7ff ffbb 	bl	80030fc <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003186:	2100      	movs	r1, #0
 8003188:	480d      	ldr	r0, [pc, #52]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800318a:	f00b fc33 	bl	800e9f4 <HAL_UARTEx_SetRxFifoThreshold>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 800319e:	f7ff ffad 	bl	80030fc <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80031a2:	4807      	ldr	r0, [pc, #28]	; (80031c0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80031a4:	f00b fbaf 	bl	800e906 <HAL_UARTEx_DisableFifoMode>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 80031b8:	f7ff ffa0 	bl	80030fc <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	240004bc 	.word	0x240004bc
 80031c4:	40011c00 	.word	0x40011c00

080031c8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a14      	ldr	r2, [pc, #80]	; (8003224 <HAL_UART_ErrorCallback+0x5c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d120      	bne.n	800321a <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 80031d8:	4913      	ldr	r1, [pc, #76]	; (8003228 <HAL_UART_ErrorCallback+0x60>)
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 80031e6:	4911      	ldr	r1, [pc, #68]	; (800322c <HAL_UART_ErrorCallback+0x64>)
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 80031f4:	490e      	ldr	r1, [pc, #56]	; (8003230 <HAL_UART_ErrorCallback+0x68>)
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 8003202:	4808      	ldr	r0, [pc, #32]	; (8003224 <HAL_UART_ErrorCallback+0x5c>)
 8003204:	f009 fb86 	bl	800c914 <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 8003208:	f7ff ff7e 	bl	8003108 <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 800320c:	4809      	ldr	r0, [pc, #36]	; (8003234 <HAL_UART_ErrorCallback+0x6c>)
 800320e:	f000 f9a1 	bl	8003554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003212:	4603      	mov	r3, r0
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff f84f 	bl	80022b8 <_ZN13STM32Hardware4initEv>
    }
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	240004bc 	.word	0x240004bc
 8003228:	24001b88 	.word	0x24001b88
 800322c:	24001b90 	.word	0x24001b90
 8003230:	24001b98 	.word	0x24001b98
 8003234:	24000640 	.word	0x24000640

08003238 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003240:	4805      	ldr	r0, [pc, #20]	; (8003258 <HAL_UART_TxCpltCallback+0x20>)
 8003242:	f000 f987 	bl	8003554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003246:	4603      	mov	r3, r0
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f87f 	bl	800234c <_ZN13STM32Hardware5flushEv>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	24000640 	.word	0x24000640

0800325c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003264:	4805      	ldr	r0, [pc, #20]	; (800327c <HAL_UART_RxCpltCallback+0x20>)
 8003266:	f000 f975 	bl	8003554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800326a:	4603      	mov	r3, r0
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f82e 	bl	80022ce <_ZN13STM32Hardware10reset_rbufEv>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	24000640 	.word	0x24000640

08003280 <setup>:
void setup(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
    nh.initNode();
 8003284:	4818      	ldr	r0, [pc, #96]	; (80032e8 <setup+0x68>)
 8003286:	f000 f971 	bl	800356c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 800328a:	4918      	ldr	r1, [pc, #96]	; (80032ec <setup+0x6c>)
 800328c:	4816      	ldr	r0, [pc, #88]	; (80032e8 <setup+0x68>)
 800328e:	f000 f996 	bl	80035be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 8003292:	4917      	ldr	r1, [pc, #92]	; (80032f0 <setup+0x70>)
 8003294:	4814      	ldr	r0, [pc, #80]	; (80032e8 <setup+0x68>)
 8003296:	f000 f9bd 	bl	8003614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    odom.x = 0;		odom.y = 0;		odom.theta = (double)PI/2;
 800329a:	4916      	ldr	r1, [pc, #88]	; (80032f4 <setup+0x74>)
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9c1 2300 	strd	r2, r3, [r1]
 80032a8:	4912      	ldr	r1, [pc, #72]	; (80032f4 <setup+0x74>)
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80032b6:	490f      	ldr	r1, [pc, #60]	; (80032f4 <setup+0x74>)
 80032b8:	a307      	add	r3, pc, #28	; (adr r3, 80032d8 <setup+0x58>)
 80032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032be:	e9c1 2304 	strd	r2, r3, [r1, #16]

    Vy = 0.2;
 80032c2:	490d      	ldr	r1, [pc, #52]	; (80032f8 <setup+0x78>)
 80032c4:	a306      	add	r3, pc, #24	; (adr r3, 80032e0 <setup+0x60>)
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	e9c1 2300 	strd	r2, r3, [r1]
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	f3af 8000 	nop.w
 80032d8:	54cadf99 	.word	0x54cadf99
 80032dc:	3ff921fb 	.word	0x3ff921fb
 80032e0:	9999999a 	.word	0x9999999a
 80032e4:	3fc99999 	.word	0x3fc99999
 80032e8:	24000640 	.word	0x24000640
 80032ec:	24001c18 	.word	0x24001c18
 80032f0:	24001c00 	.word	0x24001c00
 80032f4:	24001c78 	.word	0x24001c78
 80032f8:	24001b90 	.word	0x24001b90

080032fc <loop>:
void loop(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <loop+0x10>)
 8003302:	f000 f9b7 	bl	8003674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	24000640 	.word	0x24000640

08003310 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d80d      	bhi.n	8003340 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	fa22 f103 	lsr.w	r1, r2, r3
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	b2ca      	uxtb	r2, r1
 8003336:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3301      	adds	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e7ee      	b.n	800331e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d811      	bhi.n	800338a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6839      	ldr	r1, [r7, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	440a      	add	r2, r1
 8003370:	7812      	ldrb	r2, [r2, #0]
 8003372:	4611      	mov	r1, r2
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	00d2      	lsls	r2, r2, #3
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3301      	adds	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e7ea      	b.n	8003360 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	0800fd9c 	.word	0x0800fd9c

080033b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ffe8 	bl	8003398 <_ZN3ros15NodeHandleBase_C1Ev>
 80033c8:	4a47      	ldr	r2, [pc, #284]	; (80034e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe ff50 	bl	8002278 <_ZN13STM32HardwareC1Ev>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	f241 5314 	movw	r3, #5396	; 0x1514
 80033ea:	4413      	add	r3, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fb9b 	bl	8001b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b18      	cmp	r3, #24
 80033fa:	d80b      	bhi.n	8003414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	2200      	movs	r2, #0
 800340a:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3301      	adds	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e7f0      	b.n	80033f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b18      	cmp	r3, #24
 800341c:	d80a      	bhi.n	8003434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003426:	2100      	movs	r1, #0
 8003428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	3301      	adds	r3, #1
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	e7f1      	b.n	8003418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343e:	d20b      	bcs.n	8003458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	441a      	add	r2, r3
 8003446:	f241 0324 	movw	r3, #4132	; 0x1024
 800344a:	4413      	add	r3, r2
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3301      	adds	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e7ef      	b.n	8003438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003462:	d20b      	bcs.n	800347c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	441a      	add	r2, r3
 800346a:	f241 2324 	movw	r3, #4644	; 0x1224
 800346e:	4413      	add	r3, r2
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	3301      	adds	r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	e7ef      	b.n	800345c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003482:	461a      	mov	r2, r3
 8003484:	2300      	movs	r3, #0
 8003486:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003490:	461a      	mov	r2, r3
 8003492:	2300      	movs	r3, #0
 8003494:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800349e:	461a      	mov	r2, r3
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ac:	461a      	mov	r2, r3
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ba:	461a      	mov	r2, r3
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c8:	461a      	mov	r2, r3
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d6:	461a      	mov	r2, r3
 80034d8:	2300      	movs	r3, #0
 80034da:	6213      	str	r3, [r2, #32]
  }
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	0800fd40 	.word	0x0800fd40

080034ec <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	4a04      	ldr	r2, [pc, #16]	; (8003508 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	0800fd84 	.word	0x0800fd84

0800350c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ffe5 	bl	80034ec <_ZN3ros11Subscriber_C1Ev>
 8003522:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3310      	adds	r3, #16
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fcdf 	bl	8002ef0 <_ZN13geometry_msgs5TwistC1Ev>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	659a      	str	r2, [r3, #88]	; 0x58
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	609a      	str	r2, [r3, #8]
  };
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	0800fd28 	.word	0x0800fd28

08003554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
  }
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe fe9d 	bl	80022b8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003584:	461a      	mov	r2, r3
 8003586:	2300      	movs	r3, #0
 8003588:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003592:	461a      	mov	r2, r3
 8003594:	2300      	movs	r3, #0
 8003596:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a0:	461a      	mov	r2, r3
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ae:	461a      	mov	r2, r3
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b18      	cmp	r3, #24
 80035d0:	dc19      	bgt.n	8003606 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80035da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10d      	bne.n	80035fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80035e2:	6839      	ldr	r1, [r7, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80035ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	605a      	str	r2, [r3, #4]
        return true;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e004      	b.n	8003608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3301      	adds	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e7e2      	b.n	80035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003606:	2300      	movs	r3, #0
  }
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b18      	cmp	r3, #24
 8003626:	dc1e      	bgt.n	8003666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d111      	bne.n	800365e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	60da      	str	r2, [r3, #12]
        return true;
 800365a:	2301      	movs	r3, #1
 800365c:	e004      	b.n	8003668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3301      	adds	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e7dd      	b.n	8003622 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003666:	2300      	movs	r3, #0
  }
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe ff13 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003686:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800369a:	4293      	cmp	r3, r2
 800369c:	d905      	bls.n	80036aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00e      	beq.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036be:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d906      	bls.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ce:	461a      	mov	r2, r3
 80036d0:	2300      	movs	r3, #0
 80036d2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d015      	beq.n	800370e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fee0 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad2      	subs	r2, r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	bf8c      	ite	hi
 80036fe:	2301      	movhi	r3, #1
 8003700:	2300      	movls	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8003708:	f06f 0301 	mvn.w	r3, #1
 800370c:	e226      	b.n	8003b5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fdec 	bl	80022f0 <_ZN13STM32Hardware4readEv>
 8003718:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f2c0 81ff 	blt.w	8003b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003728:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4413      	add	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003736:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003740:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003744:	2b07      	cmp	r3, #7
 8003746:	d12d      	bne.n	80037a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374e:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800375a:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	b2d1      	uxtb	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	441a      	add	r2, r3
 8003766:	f241 0324 	movw	r3, #4132	; 0x1024
 800376a:	4413      	add	r3, r2
 800376c:	460a      	mov	r2, r1
 800376e:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003776:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800377a:	3b01      	subs	r3, #1
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003782:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1a0      	bne.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379a:	461a      	mov	r2, r3
 800379c:	2308      	movs	r3, #8
 800379e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80037a2:	e798      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037aa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d130      	bne.n	8003814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2bff      	cmp	r3, #255	; 0xff
 80037b6:	d112      	bne.n	80037de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037be:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037c2:	3301      	adds	r3, #1
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037ca:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3314      	adds	r3, #20
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037d8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80037dc:	e77b      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fe62 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	bf8c      	ite	hi
 80037f6:	2301      	movhi	r3, #1
 80037f8:	2300      	movls	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f43f af6a 	beq.w	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 800380e:	f06f 0301 	mvn.w	r3, #1
 8003812:	e1a3      	b.n	8003b5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800381e:	2b01      	cmp	r3, #1
 8003820:	d121      	bne.n	8003866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2bfe      	cmp	r3, #254	; 0xfe
 8003826:	d10b      	bne.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800382e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003832:	3301      	adds	r3, #1
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800383a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800383e:	e74a      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003846:	461a      	mov	r2, r3
 8003848:	2300      	movs	r3, #0
 800384a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003854:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003858:	2b00      	cmp	r3, #0
 800385a:	f47f af3c 	bne.w	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f980 	bl	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003864:	e737      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800386c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003870:	2b02      	cmp	r3, #2
 8003872:	d120      	bne.n	80038b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387a:	461a      	mov	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003888:	461a      	mov	r2, r3
 800388a:	2300      	movs	r3, #0
 800388c:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003896:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800389a:	3301      	adds	r3, #1
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038a2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ac:	461a      	mov	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80038b4:	e70f      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038bc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d118      	bne.n	80038f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ca:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	4413      	add	r3, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038da:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038e8:	3301      	adds	r3, #1
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038f0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80038f4:	e6ef      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003900:	2b04      	cmp	r3, #4
 8003902:	d11f      	bne.n	8003944 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800390e:	425a      	negs	r2, r3
 8003910:	b2db      	uxtb	r3, r3
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	bf58      	it	pl
 8003916:	4253      	negpl	r3, r2
 8003918:	2bff      	cmp	r3, #255	; 0xff
 800391a:	d10b      	bne.n	8003934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003922:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003926:	3301      	adds	r3, #1
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800392e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003932:	e6d0      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393a:	461a      	mov	r2, r3
 800393c:	2300      	movs	r3, #0
 800393e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003942:	e6c8      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800394e:	2b05      	cmp	r3, #5
 8003950:	d119      	bne.n	8003986 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003958:	461a      	mov	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003966:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800396a:	3301      	adds	r3, #1
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003972:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003984:	e6a7      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003990:	2b06      	cmp	r3, #6
 8003992:	d123      	bne.n	80039dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800399a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	4413      	add	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039aa:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b4:	461a      	mov	r2, r3
 80039b6:	2307      	movs	r3, #7
 80039b8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f47f ae85 	bne.w	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d2:	461a      	mov	r2, r3
 80039d4:	2308      	movs	r3, #8
 80039d6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80039da:	e67c      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	f47f ae75 	bne.w	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a00:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a04:	425a      	negs	r2, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	bf58      	it	pl
 8003a0c:	4253      	negpl	r3, r2
 8003a0e:	2bff      	cmp	r3, #255	; 0xff
 8003a10:	f47f ae61 	bne.w	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d116      	bne.n	8003a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f89e 	bl	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f8ba 	bl	8003ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a34:	461a      	mov	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	e085      	b.n	8003b5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a56:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a5a:	2b0a      	cmp	r3, #10
 8003a5c:	d108      	bne.n	8003a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	f241 0324 	movw	r3, #4132	; 0x1024
 8003a64:	4413      	add	r3, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f97b 	bl	8003d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003a6e:	e632      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a76:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d112      	bne.n	8003aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	f241 5314 	movw	r3, #5396	; 0x1514
 8003a84:	4413      	add	r3, r2
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	f241 0224 	movw	r2, #4132	; 0x1024
 8003a8c:	440a      	add	r2, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe f97e 	bl	8001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8003aa2:	e618      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aaa:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003aae:	2b0b      	cmp	r3, #11
 8003ab0:	d106      	bne.n	8003ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003abe:	e60a      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003aca:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f43f adfc 	beq.w	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae4:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003ae8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003af2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003afc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003b00:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	f241 0324 	movw	r3, #4132	; 0x1024
 8003b18:	440b      	add	r3, r1
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4790      	blx	r2
    while (true)
 8003b1e:	e5da      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8003b20:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b28:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d014      	beq.n	8003b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b36:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d909      	bls.n	8003b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f80c 	bl	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b52:	461a      	mov	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8003b5a:	2300      	movs	r3, #0
  }
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fd fc75 	bl	8001460 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f107 020c 	add.w	r2, r7, #12
 8003b80:	210a      	movs	r1, #10
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
    rt_time = hardware_.time();
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fc8e 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003b90:	4602      	mov	r2, r0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b98:	615a      	str	r2, [r3, #20]
  }
 8003b9a:	bf00      	nop
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003ba2:	b590      	push	{r4, r7, lr}
 8003ba4:	b08b      	sub	sp, #44	; 0x2c
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003baa:	f107 030c 	add.w	r3, r7, #12
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fd fd46 	bl	8001640 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	2b18      	cmp	r3, #24
 8003bbc:	dc63      	bgt.n	8003c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d056      	beq.n	8003c7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	6859      	ldr	r1, [r3, #4]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4798      	blx	r3
 8003c20:	4603      	mov	r3, r0
 8003c22:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4608      	mov	r0, r1
 8003c4c:	4798      	blx	r3
 8003c4e:	4603      	mov	r3, r0
 8003c50:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c56:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681c      	ldr	r4, [r3, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fa48 	bl	8002102 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003c72:	4601      	mov	r1, r0
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	3301      	adds	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
 8003c84:	e798      	b.n	8003bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	2b18      	cmp	r3, #24
 8003c8e:	dc5f      	bgt.n	8003d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d053      	beq.n	8003d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3308      	adds	r3, #8
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	4798      	blx	r3
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4608      	mov	r0, r1
 8003d08:	4798      	blx	r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d12:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681c      	ldr	r4, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3304      	adds	r3, #4
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4798      	blx	r3
 8003d3c:	4601      	mov	r1, r0
 8003d3e:	f107 030c 	add.w	r3, r7, #12
 8003d42:	461a      	mov	r2, r3
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4e:	e79c      	b.n	8003c8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8003d5c:	bf00      	nop
 8003d5e:	372c      	adds	r7, #44	; 0x2c
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd90      	pop	{r4, r7, pc}

08003d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003d6e:	f107 0308 	add.w	r3, r7, #8
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd fb74 	bl	8001460 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fe fb95 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003d82:	4602      	mov	r2, r0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd fbd2 	bl	8001540 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	4915      	ldr	r1, [pc, #84]	; (8003df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003da2:	fba1 1303 	umull	r1, r3, r1, r3
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	4413      	add	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003dac:	6939      	ldr	r1, [r7, #16]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003db2:	fba3 0302 	umull	r0, r3, r3, r2
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dbc:	fb00 f303 	mul.w	r3, r0, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	440b      	add	r3, r1
 8003dca:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003dcc:	f107 0308 	add.w	r3, r7, #8
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f8bf 	bl	8003f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fb64 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003de4:	4602      	mov	r2, r0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dec:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8003df0:	bf00      	nop
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	10624dd3 	.word	0x10624dd3
 8003dfc:	000f4240 	.word	0x000f4240

08003e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b63      	cmp	r3, #99	; 0x63
 8003e10:	dd0b      	ble.n	8003e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e18:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003e1c:	f083 0301 	eor.w	r3, r3, #1
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e090      	b.n	8003f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68f9      	ldr	r1, [r7, #12]
 8003e32:	f241 2324 	movw	r3, #4644	; 0x1224
 8003e36:	440b      	add	r3, r1
 8003e38:	3307      	adds	r3, #7
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4790      	blx	r2
 8003e40:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e48:	22ff      	movs	r2, #255	; 0xff
 8003e4a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e54:	22fe      	movs	r2, #254	; 0xfe
 8003e56:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e64:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e78:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e82:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8c:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8003e90:	4413      	add	r3, r2
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eac:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	b21b      	sxth	r3, r3
 8003eb4:	121b      	asrs	r3, r3, #8
 8003eb6:	b21b      	sxth	r3, r3
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec0:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ec8:	2305      	movs	r3, #5
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3306      	adds	r3, #6
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	dc0e      	bgt.n	8003ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	441a      	add	r2, r3
 8003edc:	f241 2324 	movw	r3, #4644	; 0x1224
 8003ee0:	4413      	add	r3, r2
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	e7eb      	b.n	8003ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	3307      	adds	r3, #7
 8003ef8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	425a      	negs	r2, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	bf58      	it	pl
 8003f04:	4253      	negpl	r3, r2
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1c59      	adds	r1, r3, #1
 8003f0c:	6179      	str	r1, [r7, #20]
 8003f0e:	43d2      	mvns	r2, r2
 8003f10:	b2d1      	uxtb	r1, r2
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	441a      	add	r2, r3
 8003f16:	f241 2324 	movw	r3, #4644	; 0x1224
 8003f1a:	4413      	add	r3, r2
 8003f1c:	460a      	mov	r2, r1
 8003f1e:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f26:	dc0b      	bgt.n	8003f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1d18      	adds	r0, r3, #4
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	f241 2324 	movw	r3, #4644	; 0x1224
 8003f32:	4413      	add	r3, r2
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4619      	mov	r1, r3
 8003f38:	f7fe fa6e 	bl	8002418 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	e005      	b.n	8003f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003f40:	4904      	ldr	r1, [pc, #16]	; (8003f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f84c 	bl	8003fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003f48:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	0800fcb4 	.word	0x0800fcb4

08003f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe faa0 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003f6c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4917      	ldr	r1, [pc, #92]	; (8003fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003f76:	fba1 1303 	umull	r1, r3, r1, r3
 8003f7a:	099b      	lsrs	r3, r3, #6
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f86:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003f90:	fba3 0302 	umull	r0, r3, r3, r2
 8003f94:	099b      	lsrs	r3, r3, #6
 8003f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f9a:	fb00 f303 	mul.w	r3, r0, r3
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	4a0d      	ldr	r2, [pc, #52]	; (8003fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	1aca      	subs	r2, r1, r3
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8003faa:	4413      	add	r3, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fb2:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	f241 0318 	movw	r3, #4120	; 0x1018
 8003fba:	4413      	add	r3, r2
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	f241 021c 	movw	r2, #4124	; 0x101c
 8003fc2:	440a      	add	r2, r1
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fc fb2c 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	10624dd3 	.word	0x10624dd3
 8003fd8:	000f4240 	.word	0x000f4240
 8003fdc:	3b9aca00 	.word	0x3b9aca00

08003fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	2103      	movs	r1, #3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f804 	bl	8003ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	460b      	mov	r3, r1
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd fcda 	bl	80019c8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004014:	7afb      	ldrb	r3, [r7, #11]
 8004016:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f107 0214 	add.w	r2, r7, #20
 8004026:	2107      	movs	r1, #7
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	4798      	blx	r3
  }
 800402c:	bf00      	nop
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <_Z41__static_initialization_and_destruction_0ii>:
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d116      	bne.n	8004072 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800404a:	4293      	cmp	r3, r2
 800404c:	d111      	bne.n	8004072 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800404e:	480b      	ldr	r0, [pc, #44]	; (800407c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004050:	f7ff f9b2 	bl	80033b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist insVel;
 8004054:	480a      	ldr	r0, [pc, #40]	; (8004080 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004056:	f7fe ff4b 	bl	8002ef0 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("/ins_vel", &insVel);
 800405a:	2300      	movs	r3, #0
 800405c:	4a08      	ldr	r2, [pc, #32]	; (8004080 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800405e:	4909      	ldr	r1, [pc, #36]	; (8004084 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004060:	4809      	ldr	r0, [pc, #36]	; (8004088 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004062:	f7fe f823 	bl	80020ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8004066:	2301      	movs	r3, #1
 8004068:	4a08      	ldr	r2, [pc, #32]	; (800408c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800406a:	4909      	ldr	r1, [pc, #36]	; (8004090 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800406c:	4809      	ldr	r0, [pc, #36]	; (8004094 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800406e:	f7ff fa4d 	bl	800350c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	24000640 	.word	0x24000640
 8004080:	24001bb8 	.word	0x24001bb8
 8004084:	0800fcf0 	.word	0x0800fcf0
 8004088:	24001c00 	.word	0x24001c00
 800408c:	08002ff9 	.word	0x08002ff9
 8004090:	0800fcfc 	.word	0x0800fcfc
 8004094:	24001c18 	.word	0x24001c18

08004098 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3310      	adds	r3, #16
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe ff63 	bl	8002f74 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	3210      	adds	r2, #16
 80040b6:	4610      	mov	r0, r2
 80040b8:	4798      	blx	r3
  }
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3310      	adds	r3, #16
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe ff6a 	bl	8002fc0 <_ZN13geometry_msgs5Twist7getTypeEv>
 80040ec:	4603      	mov	r3, r0
  }
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3310      	adds	r3, #16
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe ff6a 	bl	8002fdc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004108:	4603      	mov	r3, r0
  }
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
    return configured_;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004120:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <_GLOBAL__sub_I_nh>:
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
 8004134:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004138:	2001      	movs	r0, #1
 800413a:	f7ff ff7b 	bl	8004034 <_Z41__static_initialization_and_destruction_0ii>
 800413e:	bd80      	pop	{r7, pc}

08004140 <odom_update>:
#include "odometry.h"

ODOM odom;

void odom_update(double Vx_world, double Vy_world, double W){
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	ed87 0b04 	vstr	d0, [r7, #16]
 800414a:	ed87 1b02 	vstr	d1, [r7, #8]
 800414e:	ed87 2b00 	vstr	d2, [r7]
    odom.x += (double)Vx_world * dt;
 8004152:	4b35      	ldr	r3, [pc, #212]	; (8004228 <odom_update+0xe8>)
 8004154:	ed93 6b00 	vldr	d6, [r3]
 8004158:	ed97 7b04 	vldr	d7, [r7, #16]
 800415c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8004208 <odom_update+0xc8>
 8004160:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004164:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004168:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <odom_update+0xe8>)
 800416a:	ed83 7b00 	vstr	d7, [r3]
    odom.y += (double)Vy_world * dt;
 800416e:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <odom_update+0xe8>)
 8004170:	ed93 6b02 	vldr	d6, [r3, #8]
 8004174:	ed97 7b02 	vldr	d7, [r7, #8]
 8004178:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8004208 <odom_update+0xc8>
 800417c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004180:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004184:	4b28      	ldr	r3, [pc, #160]	; (8004228 <odom_update+0xe8>)
 8004186:	ed83 7b02 	vstr	d7, [r3, #8]
    odom.theta += (double)W * dt;
 800418a:	4b27      	ldr	r3, [pc, #156]	; (8004228 <odom_update+0xe8>)
 800418c:	ed93 6b04 	vldr	d6, [r3, #16]
 8004190:	ed97 7b00 	vldr	d7, [r7]
 8004194:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8004208 <odom_update+0xc8>
 8004198:	ee27 7b05 	vmul.f64	d7, d7, d5
 800419c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <odom_update+0xe8>)
 80041a2:	ed83 7b04 	vstr	d7, [r3, #16]
    while(odom.theta > PI)  odom.theta -= 2*PI;
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <odom_update+0xe8>)
 80041a8:	ed93 7b04 	vldr	d7, [r3, #16]
 80041ac:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8004210 <odom_update+0xd0>
 80041b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80041b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b8:	dc00      	bgt.n	80041bc <odom_update+0x7c>
 80041ba:	e00a      	b.n	80041d2 <odom_update+0x92>
 80041bc:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <odom_update+0xe8>)
 80041be:	ed93 7b04 	vldr	d7, [r3, #16]
 80041c2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8004218 <odom_update+0xd8>
 80041c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <odom_update+0xe8>)
 80041cc:	ed83 7b04 	vstr	d7, [r3, #16]
 80041d0:	e7e9      	b.n	80041a6 <odom_update+0x66>
    while(odom.theta < -1*PI) odom.theta += 2*PI;
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <odom_update+0xe8>)
 80041d4:	ed93 7b04 	vldr	d7, [r3, #16]
 80041d8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8004220 <odom_update+0xe0>
 80041dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	d400      	bmi.n	80041e8 <odom_update+0xa8>
    return;
 80041e6:	e00a      	b.n	80041fe <odom_update+0xbe>
    while(odom.theta < -1*PI) odom.theta += 2*PI;
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <odom_update+0xe8>)
 80041ea:	ed93 7b04 	vldr	d7, [r3, #16]
 80041ee:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8004218 <odom_update+0xd8>
 80041f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <odom_update+0xe8>)
 80041f8:	ed83 7b04 	vstr	d7, [r3, #16]
 80041fc:	e7e9      	b.n	80041d2 <odom_update+0x92>
}
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	d2f1a9fc 	.word	0xd2f1a9fc
 800420c:	3f50624d 	.word	0x3f50624d
 8004210:	54cadf99 	.word	0x54cadf99
 8004214:	400921fb 	.word	0x400921fb
 8004218:	54cadf99 	.word	0x54cadf99
 800421c:	401921fb 	.word	0x401921fb
 8004220:	54cadf99 	.word	0x54cadf99
 8004224:	c00921fb 	.word	0xc00921fb
 8004228:	24001c78 	.word	0x24001c78

0800422c <vel_World2Car>:
double vel_World2Car(char coor, double Vx_world, double Vy_world){
 800422c:	b580      	push	{r7, lr}
 800422e:	ed2d 8b02 	vpush	{d8}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	ed87 0b02 	vstr	d0, [r7, #8]
 800423c:	ed87 1b00 	vstr	d1, [r7]
 8004240:	75fb      	strb	r3, [r7, #23]
	double coff = 1/ cos(2 * odom.theta);
 8004242:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <vel_World2Car+0xd0>)
 8004244:	ed93 7b04 	vldr	d7, [r3, #16]
 8004248:	ee37 7b07 	vadd.f64	d7, d7, d7
 800424c:	eeb0 0b47 	vmov.f64	d0, d7
 8004250:	f00a fc72 	bl	800eb38 <cos>
 8004254:	eeb0 6b40 	vmov.f64	d6, d0
 8004258:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800425c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004260:	ed87 7b06 	vstr	d7, [r7, #24]
	if(coor == 'x')
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2b78      	cmp	r3, #120	; 0x78
 8004268:	d120      	bne.n	80042ac <vel_World2Car+0x80>
		return coff * (Vy_world * cos(odom.theta) - Vx_world * sin(odom.theta));
 800426a:	4b24      	ldr	r3, [pc, #144]	; (80042fc <vel_World2Car+0xd0>)
 800426c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004270:	eeb0 0b47 	vmov.f64	d0, d7
 8004274:	f00a fc60 	bl	800eb38 <cos>
 8004278:	eeb0 6b40 	vmov.f64	d6, d0
 800427c:	ed97 7b00 	vldr	d7, [r7]
 8004280:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004284:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <vel_World2Car+0xd0>)
 8004286:	ed93 7b04 	vldr	d7, [r3, #16]
 800428a:	eeb0 0b47 	vmov.f64	d0, d7
 800428e:	f00a fc9f 	bl	800ebd0 <sin>
 8004292:	eeb0 6b40 	vmov.f64	d6, d0
 8004296:	ed97 7b02 	vldr	d7, [r7, #8]
 800429a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800429e:	ee38 6b47 	vsub.f64	d6, d8, d7
 80042a2:	ed97 7b06 	vldr	d7, [r7, #24]
 80042a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80042aa:	e01f      	b.n	80042ec <vel_World2Car+0xc0>
	else
		return coff * (Vx_world * cos(odom.theta) - Vy_world * sin(odom.theta));
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <vel_World2Car+0xd0>)
 80042ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80042b2:	eeb0 0b47 	vmov.f64	d0, d7
 80042b6:	f00a fc3f 	bl	800eb38 <cos>
 80042ba:	eeb0 6b40 	vmov.f64	d6, d0
 80042be:	ed97 7b02 	vldr	d7, [r7, #8]
 80042c2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80042c6:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <vel_World2Car+0xd0>)
 80042c8:	ed93 7b04 	vldr	d7, [r3, #16]
 80042cc:	eeb0 0b47 	vmov.f64	d0, d7
 80042d0:	f00a fc7e 	bl	800ebd0 <sin>
 80042d4:	eeb0 6b40 	vmov.f64	d6, d0
 80042d8:	ed97 7b00 	vldr	d7, [r7]
 80042dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80042e0:	ee38 6b47 	vsub.f64	d6, d8, d7
 80042e4:	ed97 7b06 	vldr	d7, [r7, #24]
 80042e8:	ee26 7b07 	vmul.f64	d7, d6, d7
}
 80042ec:	eeb0 0b47 	vmov.f64	d0, d7
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	ecbd 8b02 	vpop	{d8}
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	24001c78 	.word	0x24001c78

08004300 <vel_Car2World>:
double vel_Car2World(char coor, double Vx, double Vy){
 8004300:	b580      	push	{r7, lr}
 8004302:	ed2d 8b02 	vpush	{d8}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004310:	ed87 1b00 	vstr	d1, [r7]
 8004314:	75fb      	strb	r3, [r7, #23]
	if(coor == 'x')
 8004316:	7dfb      	ldrb	r3, [r7, #23]
 8004318:	2b78      	cmp	r3, #120	; 0x78
 800431a:	d11c      	bne.n	8004356 <vel_Car2World+0x56>
		return Vx * sin( odom.theta ) + Vy * cos( odom.theta );
 800431c:	4b1f      	ldr	r3, [pc, #124]	; (800439c <vel_Car2World+0x9c>)
 800431e:	ed93 7b04 	vldr	d7, [r3, #16]
 8004322:	eeb0 0b47 	vmov.f64	d0, d7
 8004326:	f00a fc53 	bl	800ebd0 <sin>
 800432a:	eeb0 6b40 	vmov.f64	d6, d0
 800432e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004332:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004336:	4b19      	ldr	r3, [pc, #100]	; (800439c <vel_Car2World+0x9c>)
 8004338:	ed93 7b04 	vldr	d7, [r3, #16]
 800433c:	eeb0 0b47 	vmov.f64	d0, d7
 8004340:	f00a fbfa 	bl	800eb38 <cos>
 8004344:	eeb0 6b40 	vmov.f64	d6, d0
 8004348:	ed97 7b00 	vldr	d7, [r7]
 800434c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004350:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004354:	e01b      	b.n	800438e <vel_Car2World+0x8e>
	else
		return Vx * cos( odom.theta ) + Vy * sin( odom.theta );
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <vel_Car2World+0x9c>)
 8004358:	ed93 7b04 	vldr	d7, [r3, #16]
 800435c:	eeb0 0b47 	vmov.f64	d0, d7
 8004360:	f00a fbea 	bl	800eb38 <cos>
 8004364:	eeb0 6b40 	vmov.f64	d6, d0
 8004368:	ed97 7b02 	vldr	d7, [r7, #8]
 800436c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <vel_Car2World+0x9c>)
 8004372:	ed93 7b04 	vldr	d7, [r3, #16]
 8004376:	eeb0 0b47 	vmov.f64	d0, d7
 800437a:	f00a fc29 	bl	800ebd0 <sin>
 800437e:	eeb0 6b40 	vmov.f64	d6, d0
 8004382:	ed97 7b00 	vldr	d7, [r7]
 8004386:	ee26 7b07 	vmul.f64	d7, d6, d7
 800438a:	ee38 7b07 	vadd.f64	d7, d8, d7
}
 800438e:	eeb0 0b47 	vmov.f64	d0, d7
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	ecbd 8b02 	vpop	{d8}
 800439a:	bd80      	pop	{r7, pc}
 800439c:	24001c78 	.word	0x24001c78

080043a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a6:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <HAL_MspInit+0x3c>)
 80043a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043ac:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <HAL_MspInit+0x3c>)
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_MspInit+0x3c>)
 80043b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2100      	movs	r1, #0
 80043c8:	2005      	movs	r0, #5
 80043ca:	f001 f834 	bl	8005436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80043ce:	2005      	movs	r0, #5
 80043d0:	f001 f84b 	bl	800546a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	58024400 	.word	0x58024400

080043e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f0:	d117      	bne.n	8004422 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043f2:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <HAL_TIM_Base_MspInit+0x84>)
 80043f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043f8:	4a1a      	ldr	r2, [pc, #104]	; (8004464 <HAL_TIM_Base_MspInit+0x84>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <HAL_TIM_Base_MspInit+0x84>)
 8004404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004410:	2200      	movs	r2, #0
 8004412:	2100      	movs	r1, #0
 8004414:	201c      	movs	r0, #28
 8004416:	f001 f80e 	bl	8005436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800441a:	201c      	movs	r0, #28
 800441c:	f001 f825 	bl	800546a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004420:	e01b      	b.n	800445a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a10      	ldr	r2, [pc, #64]	; (8004468 <HAL_TIM_Base_MspInit+0x88>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d116      	bne.n	800445a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800442c:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <HAL_TIM_Base_MspInit+0x84>)
 800442e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004432:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <HAL_TIM_Base_MspInit+0x84>)
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_TIM_Base_MspInit+0x84>)
 800443e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800444a:	2200      	movs	r2, #0
 800444c:	2100      	movs	r1, #0
 800444e:	2032      	movs	r0, #50	; 0x32
 8004450:	f000 fff1 	bl	8005436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004454:	2032      	movs	r0, #50	; 0x32
 8004456:	f001 f808 	bl	800546a <HAL_NVIC_EnableIRQ>
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	58024400 	.word	0x58024400
 8004468:	40000c00 	.word	0x40000c00

0800446c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b090      	sub	sp, #64	; 0x40
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a69      	ldr	r2, [pc, #420]	; (8004630 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d12e      	bne.n	80044ec <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800448e:	4b69      	ldr	r3, [pc, #420]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004494:	4a67      	ldr	r2, [pc, #412]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004496:	f043 0302 	orr.w	r3, r3, #2
 800449a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800449e:	4b65      	ldr	r3, [pc, #404]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ac:	4b61      	ldr	r3, [pc, #388]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044b2:	4a60      	ldr	r2, [pc, #384]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044bc:	4b5d      	ldr	r3, [pc, #372]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044ca:	23c0      	movs	r3, #192	; 0xc0
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ce:	2302      	movs	r3, #2
 80044d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d6:	2300      	movs	r3, #0
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044da:	2302      	movs	r3, #2
 80044dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044e2:	4619      	mov	r1, r3
 80044e4:	4854      	ldr	r0, [pc, #336]	; (8004638 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80044e6:	f003 ffd9 	bl	800849c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80044ea:	e09c      	b.n	8004626 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a52      	ldr	r2, [pc, #328]	; (800463c <HAL_TIM_Encoder_MspInit+0x1d0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d12f      	bne.n	8004556 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044f6:	4b4f      	ldr	r3, [pc, #316]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044fc:	4a4d      	ldr	r2, [pc, #308]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004506:	4b4b      	ldr	r3, [pc, #300]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	623b      	str	r3, [r7, #32]
 8004512:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004514:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800451a:	4a46      	ldr	r2, [pc, #280]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800451c:	f043 0308 	orr.w	r3, r3, #8
 8004520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004524:	4b43      	ldr	r3, [pc, #268]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004532:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004538:	2302      	movs	r3, #2
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453c:	2300      	movs	r3, #0
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004540:	2300      	movs	r3, #0
 8004542:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004544:	2302      	movs	r3, #2
 8004546:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800454c:	4619      	mov	r1, r3
 800454e:	483c      	ldr	r0, [pc, #240]	; (8004640 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004550:	f003 ffa4 	bl	800849c <HAL_GPIO_Init>
}
 8004554:	e067      	b.n	8004626 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3a      	ldr	r2, [pc, #232]	; (8004644 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d12e      	bne.n	80045be <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004560:	4b34      	ldr	r3, [pc, #208]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004562:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004566:	4a33      	ldr	r2, [pc, #204]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800456c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004570:	4b30      	ldr	r3, [pc, #192]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004572:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800457e:	4b2d      	ldr	r3, [pc, #180]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004584:	4a2b      	ldr	r2, [pc, #172]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004586:	f043 0320 	orr.w	r3, r3, #32
 800458a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800458e:	4b29      	ldr	r3, [pc, #164]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800459c:	2303      	movs	r3, #3
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a8:	2300      	movs	r3, #0
 80045aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80045ac:	230d      	movs	r3, #13
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045b4:	4619      	mov	r1, r3
 80045b6:	4824      	ldr	r0, [pc, #144]	; (8004648 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80045b8:	f003 ff70 	bl	800849c <HAL_GPIO_Init>
}
 80045bc:	e033      	b.n	8004626 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a22      	ldr	r2, [pc, #136]	; (800464c <HAL_TIM_Encoder_MspInit+0x1e0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d12e      	bne.n	8004626 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80045c8:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045ce:	4a19      	ldr	r2, [pc, #100]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045d4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80045d8:	4b16      	ldr	r3, [pc, #88]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ec:	4a11      	ldr	r2, [pc, #68]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045ee:	f043 0320 	orr.w	r3, r3, #32
 80045f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004604:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004608:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460a:	2302      	movs	r3, #2
 800460c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460e:	2300      	movs	r3, #0
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004612:	2300      	movs	r3, #0
 8004614:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8004616:	230e      	movs	r3, #14
 8004618:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800461a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800461e:	4619      	mov	r1, r3
 8004620:	4809      	ldr	r0, [pc, #36]	; (8004648 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8004622:	f003 ff3b 	bl	800849c <HAL_GPIO_Init>
}
 8004626:	bf00      	nop
 8004628:	3740      	adds	r7, #64	; 0x40
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40000400 	.word	0x40000400
 8004634:	58024400 	.word	0x58024400
 8004638:	58020000 	.word	0x58020000
 800463c:	40000800 	.word	0x40000800
 8004640:	58020c00 	.word	0x58020c00
 8004644:	4000e000 	.word	0x4000e000
 8004648:	58021400 	.word	0x58021400
 800464c:	4000e400 	.word	0x4000e400

08004650 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <HAL_TIM_PWM_MspInit+0x68>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10f      	bne.n	8004682 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004662:	4b16      	ldr	r3, [pc, #88]	; (80046bc <HAL_TIM_PWM_MspInit+0x6c>)
 8004664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <HAL_TIM_PWM_MspInit+0x6c>)
 800466a:	f043 0302 	orr.w	r3, r3, #2
 800466e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <HAL_TIM_PWM_MspInit+0x6c>)
 8004674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004680:	e013      	b.n	80046aa <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <HAL_TIM_PWM_MspInit+0x70>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d10e      	bne.n	80046aa <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_TIM_PWM_MspInit+0x6c>)
 800468e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <HAL_TIM_PWM_MspInit+0x6c>)
 8004694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004698:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <HAL_TIM_PWM_MspInit+0x6c>)
 800469e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010400 	.word	0x40010400
 80046bc:	58024400 	.word	0x58024400
 80046c0:	40014000 	.word	0x40014000

080046c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	; 0x28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046cc:	f107 0314 	add.w	r3, r7, #20
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a35      	ldr	r2, [pc, #212]	; (80047b8 <HAL_TIM_MspPostInit+0xf4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d120      	bne.n	8004728 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046e6:	4b35      	ldr	r3, [pc, #212]	; (80047bc <HAL_TIM_MspPostInit+0xf8>)
 80046e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ec:	4a33      	ldr	r2, [pc, #204]	; (80047bc <HAL_TIM_MspPostInit+0xf8>)
 80046ee:	f043 0304 	orr.w	r3, r3, #4
 80046f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046f6:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_TIM_MspPostInit+0xf8>)
 80046f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004704:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470a:	2302      	movs	r3, #2
 800470c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004712:	2300      	movs	r3, #0
 8004714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004716:	2303      	movs	r3, #3
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800471a:	f107 0314 	add.w	r3, r7, #20
 800471e:	4619      	mov	r1, r3
 8004720:	4827      	ldr	r0, [pc, #156]	; (80047c0 <HAL_TIM_MspPostInit+0xfc>)
 8004722:	f003 febb 	bl	800849c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004726:	e042      	b.n	80047ae <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a25      	ldr	r2, [pc, #148]	; (80047c4 <HAL_TIM_MspPostInit+0x100>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d13d      	bne.n	80047ae <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <HAL_TIM_MspPostInit+0xf8>)
 8004734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004738:	4a20      	ldr	r2, [pc, #128]	; (80047bc <HAL_TIM_MspPostInit+0xf8>)
 800473a:	f043 0310 	orr.w	r3, r3, #16
 800473e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004742:	4b1e      	ldr	r3, [pc, #120]	; (80047bc <HAL_TIM_MspPostInit+0xf8>)
 8004744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004750:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <HAL_TIM_MspPostInit+0xf8>)
 8004752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004756:	4a19      	ldr	r2, [pc, #100]	; (80047bc <HAL_TIM_MspPostInit+0xf8>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004760:	4b16      	ldr	r3, [pc, #88]	; (80047bc <HAL_TIM_MspPostInit+0xf8>)
 8004762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800476e:	2320      	movs	r3, #32
 8004770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004772:	2302      	movs	r3, #2
 8004774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800477a:	2300      	movs	r3, #0
 800477c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800477e:	2304      	movs	r3, #4
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004782:	f107 0314 	add.w	r3, r7, #20
 8004786:	4619      	mov	r1, r3
 8004788:	480f      	ldr	r0, [pc, #60]	; (80047c8 <HAL_TIM_MspPostInit+0x104>)
 800478a:	f003 fe87 	bl	800849c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800478e:	2308      	movs	r3, #8
 8004790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004792:	2302      	movs	r3, #2
 8004794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479a:	2300      	movs	r3, #0
 800479c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800479e:	2304      	movs	r3, #4
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a2:	f107 0314 	add.w	r3, r7, #20
 80047a6:	4619      	mov	r1, r3
 80047a8:	4808      	ldr	r0, [pc, #32]	; (80047cc <HAL_TIM_MspPostInit+0x108>)
 80047aa:	f003 fe77 	bl	800849c <HAL_GPIO_Init>
}
 80047ae:	bf00      	nop
 80047b0:	3728      	adds	r7, #40	; 0x28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40010400 	.word	0x40010400
 80047bc:	58024400 	.word	0x58024400
 80047c0:	58020800 	.word	0x58020800
 80047c4:	40014000 	.word	0x40014000
 80047c8:	58021000 	.word	0x58021000
 80047cc:	58020000 	.word	0x58020000

080047d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b0b6      	sub	sp, #216	; 0xd8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047e8:	f107 0310 	add.w	r3, r7, #16
 80047ec:	22b4      	movs	r2, #180	; 0xb4
 80047ee:	2100      	movs	r1, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f00b f823 	bl	800f83c <memset>
  if(huart->Instance==USART10)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a62      	ldr	r2, [pc, #392]	; (8004984 <HAL_UART_MspInit+0x1b4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	f040 80bc 	bne.w	800497a <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8004802:	2301      	movs	r3, #1
 8004804:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800480c:	f107 0310 	add.w	r3, r7, #16
 8004810:	4618      	mov	r0, r3
 8004812:	f005 f89f 	bl	8009954 <HAL_RCCEx_PeriphCLKConfig>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800481c:	f7fc fdfa 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 8004820:	4b59      	ldr	r3, [pc, #356]	; (8004988 <HAL_UART_MspInit+0x1b8>)
 8004822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004826:	4a58      	ldr	r2, [pc, #352]	; (8004988 <HAL_UART_MspInit+0x1b8>)
 8004828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004830:	4b55      	ldr	r3, [pc, #340]	; (8004988 <HAL_UART_MspInit+0x1b8>)
 8004832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800483e:	4b52      	ldr	r3, [pc, #328]	; (8004988 <HAL_UART_MspInit+0x1b8>)
 8004840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004844:	4a50      	ldr	r2, [pc, #320]	; (8004988 <HAL_UART_MspInit+0x1b8>)
 8004846:	f043 0310 	orr.w	r3, r3, #16
 800484a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800484e:	4b4e      	ldr	r3, [pc, #312]	; (8004988 <HAL_UART_MspInit+0x1b8>)
 8004850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800485c:	2304      	movs	r3, #4
 800485e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004862:	2302      	movs	r3, #2
 8004864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486e:	2300      	movs	r3, #0
 8004870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8004874:	2304      	movs	r3, #4
 8004876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800487a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800487e:	4619      	mov	r1, r3
 8004880:	4842      	ldr	r0, [pc, #264]	; (800498c <HAL_UART_MspInit+0x1bc>)
 8004882:	f003 fe0b 	bl	800849c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004886:	2308      	movs	r3, #8
 8004888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488c:	2302      	movs	r3, #2
 800488e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004892:	2300      	movs	r3, #0
 8004894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 800489e:	230b      	movs	r3, #11
 80048a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048a8:	4619      	mov	r1, r3
 80048aa:	4838      	ldr	r0, [pc, #224]	; (800498c <HAL_UART_MspInit+0x1bc>)
 80048ac:	f003 fdf6 	bl	800849c <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 80048b0:	4b37      	ldr	r3, [pc, #220]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048b2:	4a38      	ldr	r2, [pc, #224]	; (8004994 <HAL_UART_MspInit+0x1c4>)
 80048b4:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 80048b6:	4b36      	ldr	r3, [pc, #216]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048b8:	2276      	movs	r2, #118	; 0x76
 80048ba:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048bc:	4b34      	ldr	r3, [pc, #208]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048be:	2200      	movs	r2, #0
 80048c0:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048c2:	4b33      	ldr	r3, [pc, #204]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048c8:	4b31      	ldr	r3, [pc, #196]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048ce:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048d0:	4b2f      	ldr	r3, [pc, #188]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048d6:	4b2e      	ldr	r3, [pc, #184]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048d8:	2200      	movs	r2, #0
 80048da:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 80048dc:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048e2:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80048e4:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048ea:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048ec:	4b28      	ldr	r3, [pc, #160]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 80048f2:	4827      	ldr	r0, [pc, #156]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 80048f4:	f000 fde2 	bl	80054bc <HAL_DMA_Init>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80048fe:	f7fc fd89 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a22      	ldr	r2, [pc, #136]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 8004906:	67da      	str	r2, [r3, #124]	; 0x7c
 8004908:	4a21      	ldr	r2, [pc, #132]	; (8004990 <HAL_UART_MspInit+0x1c0>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 800490e:	4b22      	ldr	r3, [pc, #136]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 8004910:	4a22      	ldr	r2, [pc, #136]	; (800499c <HAL_UART_MspInit+0x1cc>)
 8004912:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 8004914:	4b20      	ldr	r3, [pc, #128]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 8004916:	2277      	movs	r2, #119	; 0x77
 8004918:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800491a:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 800491c:	2240      	movs	r2, #64	; 0x40
 800491e:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004920:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 8004922:	2200      	movs	r2, #0
 8004924:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004926:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 8004928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800492c:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800492e:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 8004930:	2200      	movs	r2, #0
 8004932:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004934:	4b18      	ldr	r3, [pc, #96]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 8004936:	2200      	movs	r2, #0
 8004938:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 800493a:	4b17      	ldr	r3, [pc, #92]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 800493c:	2200      	movs	r2, #0
 800493e:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004940:	4b15      	ldr	r3, [pc, #84]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 8004942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004946:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 800494a:	2200      	movs	r2, #0
 800494c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 800494e:	4812      	ldr	r0, [pc, #72]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 8004950:	f000 fdb4 	bl	80054bc <HAL_DMA_Init>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 800495a:	f7fc fd5b 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 8004962:	679a      	str	r2, [r3, #120]	; 0x78
 8004964:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <HAL_UART_MspInit+0x1c8>)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 800496a:	2200      	movs	r2, #0
 800496c:	2100      	movs	r1, #0
 800496e:	209c      	movs	r0, #156	; 0x9c
 8004970:	f000 fd61 	bl	8005436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004974:	209c      	movs	r0, #156	; 0x9c
 8004976:	f000 fd78 	bl	800546a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 800497a:	bf00      	nop
 800497c:	37d8      	adds	r7, #216	; 0xd8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40011c00 	.word	0x40011c00
 8004988:	58024400 	.word	0x58024400
 800498c:	58021000 	.word	0x58021000
 8004990:	2400054c 	.word	0x2400054c
 8004994:	40020010 	.word	0x40020010
 8004998:	240005c4 	.word	0x240005c4
 800499c:	40020028 	.word	0x40020028

080049a0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <HAL_UART_MspDeInit+0x4c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d118      	bne.n	80049e4 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 80049b2:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <HAL_UART_MspDeInit+0x50>)
 80049b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049b8:	4a0d      	ldr	r2, [pc, #52]	; (80049f0 <HAL_UART_MspDeInit+0x50>)
 80049ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 80049c2:	210c      	movs	r1, #12
 80049c4:	480b      	ldr	r0, [pc, #44]	; (80049f4 <HAL_UART_MspDeInit+0x54>)
 80049c6:	f003 ff11 	bl	80087ec <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ce:	4618      	mov	r0, r3
 80049d0:	f001 f8ce 	bl	8005b70 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 f8c9 	bl	8005b70 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 80049de:	209c      	movs	r0, #156	; 0x9c
 80049e0:	f000 fd51 	bl	8005486 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40011c00 	.word	0x40011c00
 80049f0:	58024400 	.word	0x58024400
 80049f4:	58021000 	.word	0x58021000

080049f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049fc:	e7fe      	b.n	80049fc <NMI_Handler+0x4>

080049fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a02:	e7fe      	b.n	8004a02 <HardFault_Handler+0x4>

08004a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a08:	e7fe      	b.n	8004a08 <MemManage_Handler+0x4>

08004a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a0e:	e7fe      	b.n	8004a0e <BusFault_Handler+0x4>

08004a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a14:	e7fe      	b.n	8004a14 <UsageFault_Handler+0x4>

08004a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a44:	f000 fbd8 	bl	80051f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a48:	bf00      	nop
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004a50:	bf00      	nop
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <DMA1_Stream0_IRQHandler+0x10>)
 8004a62:	f002 fa09 	bl	8006e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	2400054c 	.word	0x2400054c

08004a70 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8004a74:	4802      	ldr	r0, [pc, #8]	; (8004a80 <DMA1_Stream1_IRQHandler+0x10>)
 8004a76:	f002 f9ff 	bl	8006e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	240005c4 	.word	0x240005c4

08004a84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a88:	4802      	ldr	r0, [pc, #8]	; (8004a94 <TIM2_IRQHandler+0x10>)
 8004a8a:	f006 fe05 	bl	800b698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	2400025c 	.word	0x2400025c

08004a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004aa0:	f003 ffbf 	bl	8008a22 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004aa4:	bf00      	nop
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <TIM5_IRQHandler+0x10>)
 8004aae:	f006 fdf3 	bl	800b698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	24000340 	.word	0x24000340

08004abc <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <USART10_IRQHandler+0x10>)
 8004ac2:	f008 f84b 	bl	800cb5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	240004bc 	.word	0x240004bc

08004ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
	return 1;
 8004ad4:	2301      	movs	r3, #1
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <_kill>:

int _kill(int pid, int sig)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004aea:	f00a fe6f 	bl	800f7cc <__errno>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2216      	movs	r2, #22
 8004af2:	601a      	str	r2, [r3, #0]
	return -1;
 8004af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <_exit>:

void _exit (int status)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b08:	f04f 31ff 	mov.w	r1, #4294967295
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff ffe7 	bl	8004ae0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b12:	e7fe      	b.n	8004b12 <_exit+0x12>

08004b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b1c:	4a14      	ldr	r2, [pc, #80]	; (8004b70 <_sbrk+0x5c>)
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <_sbrk+0x60>)
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <_sbrk+0x64>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <_sbrk+0x64>)
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <_sbrk+0x68>)
 8004b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <_sbrk+0x64>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d207      	bcs.n	8004b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b44:	f00a fe42 	bl	800f7cc <__errno>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	220c      	movs	r2, #12
 8004b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b52:	e009      	b.n	8004b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <_sbrk+0x64>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b5a:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <_sbrk+0x64>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <_sbrk+0x64>)
 8004b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b66:	68fb      	ldr	r3, [r7, #12]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	24050000 	.word	0x24050000
 8004b74:	00000400 	.word	0x00000400
 8004b78:	24001c90 	.word	0x24001c90
 8004b7c:	24001cb0 	.word	0x24001cb0

08004b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004b84:	4b32      	ldr	r3, [pc, #200]	; (8004c50 <SystemInit+0xd0>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	4a31      	ldr	r2, [pc, #196]	; (8004c50 <SystemInit+0xd0>)
 8004b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004b94:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <SystemInit+0xd4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d807      	bhi.n	8004bb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004ba0:	4b2c      	ldr	r3, [pc, #176]	; (8004c54 <SystemInit+0xd4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f023 030f 	bic.w	r3, r3, #15
 8004ba8:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <SystemInit+0xd4>)
 8004baa:	f043 0307 	orr.w	r3, r3, #7
 8004bae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004bb0:	4b29      	ldr	r3, [pc, #164]	; (8004c58 <SystemInit+0xd8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a28      	ldr	r2, [pc, #160]	; (8004c58 <SystemInit+0xd8>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bbc:	4b26      	ldr	r3, [pc, #152]	; (8004c58 <SystemInit+0xd8>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004bc2:	4b25      	ldr	r3, [pc, #148]	; (8004c58 <SystemInit+0xd8>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4924      	ldr	r1, [pc, #144]	; (8004c58 <SystemInit+0xd8>)
 8004bc8:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <SystemInit+0xdc>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bce:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <SystemInit+0xd4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004bda:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <SystemInit+0xd4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 030f 	bic.w	r3, r3, #15
 8004be2:	4a1c      	ldr	r2, [pc, #112]	; (8004c54 <SystemInit+0xd4>)
 8004be4:	f043 0307 	orr.w	r3, r3, #7
 8004be8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <SystemInit+0xd8>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004bf0:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <SystemInit+0xd8>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004bf6:	4b18      	ldr	r3, [pc, #96]	; (8004c58 <SystemInit+0xd8>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004bfc:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <SystemInit+0xd8>)
 8004bfe:	4a18      	ldr	r2, [pc, #96]	; (8004c60 <SystemInit+0xe0>)
 8004c00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <SystemInit+0xd8>)
 8004c04:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <SystemInit+0xe4>)
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c08:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <SystemInit+0xd8>)
 8004c0a:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <SystemInit+0xe8>)
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <SystemInit+0xd8>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c14:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <SystemInit+0xd8>)
 8004c16:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <SystemInit+0xe8>)
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <SystemInit+0xd8>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <SystemInit+0xd8>)
 8004c22:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <SystemInit+0xe8>)
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c26:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <SystemInit+0xd8>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <SystemInit+0xd8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <SystemInit+0xd8>)
 8004c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <SystemInit+0xd8>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <SystemInit+0xec>)
 8004c40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c46:	bf00      	nop
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	e000ed00 	.word	0xe000ed00
 8004c54:	52002000 	.word	0x52002000
 8004c58:	58024400 	.word	0x58024400
 8004c5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c60:	02020200 	.word	0x02020200
 8004c64:	01ff0000 	.word	0x01ff0000
 8004c68:	01010280 	.word	0x01010280
 8004c6c:	52004000 	.word	0x52004000

08004c70 <HAL_TIM_PeriodElapsedCallback>:
#include "timing.h"

int ccc = 0;
double coeffab = 0.5 * (width + length);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	ed2d 8b02 	vpush	{d8}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d101      	bne.n	8004c8a <HAL_TIM_PeriodElapsedCallback+0x1a>
		interPub();
 8004c86:	f7fe f9ef 	bl	8003068 <interPub>
	}
	if (htim->Instance == TIM5) {
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4ab1      	ldr	r2, [pc, #708]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	f040 8203 	bne.w	800509c <HAL_TIM_PeriodElapsedCallback+0x42c>

		if (++ccc == 2000)     Vy = 0;
 8004c96:	4bb0      	ldr	r3, [pc, #704]	; (8004f58 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	4aae      	ldr	r2, [pc, #696]	; (8004f58 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4bad      	ldr	r3, [pc, #692]	; (8004f58 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d006      	beq.n	8004cc2 <HAL_TIM_PeriodElapsedCallback+0x52>
 8004cb4:	49a9      	ldr	r1, [pc, #676]	; (8004f5c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9c1 2300 	strd	r2, r3, [r1]

		Kpid[0].goalVel = Vy + Vx + (W * coeffab);
 8004cc2:	4ba6      	ldr	r3, [pc, #664]	; (8004f5c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004cc4:	ed93 6b00 	vldr	d6, [r3]
 8004cc8:	4ba5      	ldr	r3, [pc, #660]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004cca:	ed93 7b00 	vldr	d7, [r3]
 8004cce:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004cd2:	4ba4      	ldr	r3, [pc, #656]	; (8004f64 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004cd4:	ed93 5b00 	vldr	d5, [r3]
 8004cd8:	4ba3      	ldr	r3, [pc, #652]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004cda:	ed93 7b00 	vldr	d7, [r3]
 8004cde:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ce2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ce6:	4ba1      	ldr	r3, [pc, #644]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004ce8:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vy - Vx - (W * coeffab);
 8004cec:	4b9b      	ldr	r3, [pc, #620]	; (8004f5c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004cee:	ed93 6b00 	vldr	d6, [r3]
 8004cf2:	4b9b      	ldr	r3, [pc, #620]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004cf4:	ed93 7b00 	vldr	d7, [r3]
 8004cf8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004cfc:	4b99      	ldr	r3, [pc, #612]	; (8004f64 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004cfe:	ed93 5b00 	vldr	d5, [r3]
 8004d02:	4b99      	ldr	r3, [pc, #612]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004d04:	ed93 7b00 	vldr	d7, [r3]
 8004d08:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d10:	4b96      	ldr	r3, [pc, #600]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004d12:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vy + Vx - (W * coeffab);
 8004d16:	4b91      	ldr	r3, [pc, #580]	; (8004f5c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004d18:	ed93 6b00 	vldr	d6, [r3]
 8004d1c:	4b90      	ldr	r3, [pc, #576]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004d1e:	ed93 7b00 	vldr	d7, [r3]
 8004d22:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004d26:	4b8f      	ldr	r3, [pc, #572]	; (8004f64 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004d28:	ed93 5b00 	vldr	d5, [r3]
 8004d2c:	4b8e      	ldr	r3, [pc, #568]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004d2e:	ed93 7b00 	vldr	d7, [r3]
 8004d32:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d3a:	4b8c      	ldr	r3, [pc, #560]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004d3c:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vy - Vx + (W * coeffab);
 8004d40:	4b86      	ldr	r3, [pc, #536]	; (8004f5c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004d42:	ed93 6b00 	vldr	d6, [r3]
 8004d46:	4b86      	ldr	r3, [pc, #536]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004d48:	ed93 7b00 	vldr	d7, [r3]
 8004d4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d50:	4b84      	ldr	r3, [pc, #528]	; (8004f64 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004d52:	ed93 5b00 	vldr	d5, [r3]
 8004d56:	4b84      	ldr	r3, [pc, #528]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004d58:	ed93 7b00 	vldr	d7, [r3]
 8004d5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d64:	4b81      	ldr	r3, [pc, #516]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004d66:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(&htim23);
 8004d6a:	4b81      	ldr	r3, [pc, #516]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	b21a      	sxth	r2, r3
 8004d72:	4b7e      	ldr	r3, [pc, #504]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004d74:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim4) * -1;
 8004d76:	4b7f      	ldr	r3, [pc, #508]	; (8004f74 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	425b      	negs	r3, r3
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	b21a      	sxth	r2, r3
 8004d84:	4b79      	ldr	r3, [pc, #484]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004d86:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim24);
 8004d8a:	4b7b      	ldr	r3, [pc, #492]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	b21a      	sxth	r2, r3
 8004d92:	4b76      	ldr	r3, [pc, #472]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004d94:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim3);
 8004d98:	4b78      	ldr	r3, [pc, #480]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	b21a      	sxth	r2, r3
 8004da0:	4b72      	ldr	r3, [pc, #456]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004da2:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(&htim24, 0);
 8004da6:	4b74      	ldr	r3, [pc, #464]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 8004dae:	4b70      	ldr	r3, [pc, #448]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 8004db6:	4b71      	ldr	r3, [pc, #452]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 8004dbe:	4b6d      	ldr	r3, [pc, #436]	; (8004f74 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24



		for( int i = 0; i < 4; i ++){
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	dc06      	bgt.n	8004dde <HAL_TIM_PeriodElapsedCallback+0x16e>
			pidCtrl(i);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7fb fc55 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e7f5      	b.n	8004dca <HAL_TIM_PeriodElapsedCallback+0x15a>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, Kpid[0].pulse);
 8004dde:	4b63      	ldr	r3, [pc, #396]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004de0:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8004de4:	4b66      	ldr	r3, [pc, #408]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004dec:	ee17 2a90 	vmov	r2, s15
 8004df0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, Kpid[1].pulse);
 8004df2:	4b5e      	ldr	r3, [pc, #376]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004df4:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004df8:	4b61      	ldr	r3, [pc, #388]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004e00:	ee17 2a90 	vmov	r2, s15
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[2].pulse);
 8004e06:	4b59      	ldr	r3, [pc, #356]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004e08:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8004e0c:	4b5d      	ldr	r3, [pc, #372]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004e14:	ee17 2a90 	vmov	r2, s15
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[3].pulse);
 8004e1a:	4b54      	ldr	r3, [pc, #336]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004e1c:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8004e20:	4b58      	ldr	r3, [pc, #352]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004e28:	ee17 2a90 	vmov	r2, s15
 8004e2c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e34:	4854      	ldr	r0, [pc, #336]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004e36:	f003 fddb 	bl	80089f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e40:	4851      	ldr	r0, [pc, #324]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004e42:	f003 fdd5 	bl	80089f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004e46:	2200      	movs	r2, #0
 8004e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e4c:	484f      	ldr	r0, [pc, #316]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004e4e:	f003 fdcf 	bl	80089f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8004e52:	2200      	movs	r2, #0
 8004e54:	2140      	movs	r1, #64	; 0x40
 8004e56:	484d      	ldr	r0, [pc, #308]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004e58:	f003 fdca 	bl	80089f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e62:	484a      	ldr	r0, [pc, #296]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004e64:	f003 fdc4 	bl	80089f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e6e:	4847      	ldr	r0, [pc, #284]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004e70:	f003 fdbe 	bl	80089f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8004e74:	2200      	movs	r2, #0
 8004e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e7a:	4844      	ldr	r0, [pc, #272]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004e7c:	f003 fdb8 	bl	80089f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8004e80:	2200      	movs	r2, #0
 8004e82:	2180      	movs	r1, #128	; 0x80
 8004e84:	4841      	ldr	r0, [pc, #260]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004e86:	f003 fdb3 	bl	80089f0 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004e8a:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004e8c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004e90:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e98:	dd06      	ble.n	8004ea8 <HAL_TIM_PeriodElapsedCallback+0x238>
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea0:	4839      	ldr	r0, [pc, #228]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004ea2:	f003 fda5 	bl	80089f0 <HAL_GPIO_WritePin>
 8004ea6:	e00d      	b.n	8004ec4 <HAL_TIM_PeriodElapsedCallback+0x254>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004ea8:	4b30      	ldr	r3, [pc, #192]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004eaa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004eae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb6:	d505      	bpl.n	8004ec4 <HAL_TIM_PeriodElapsedCallback+0x254>
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ebe:	4832      	ldr	r0, [pc, #200]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004ec0:	f003 fd96 	bl	80089f0 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8004ec4:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004ec6:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004eca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed2:	dd06      	ble.n	8004ee2 <HAL_TIM_PeriodElapsedCallback+0x272>
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eda:	482c      	ldr	r0, [pc, #176]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004edc:	f003 fd88 	bl	80089f0 <HAL_GPIO_WritePin>
 8004ee0:	e00c      	b.n	8004efc <HAL_TIM_PeriodElapsedCallback+0x28c>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8004ee2:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004ee4:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004ee8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef0:	d504      	bpl.n	8004efc <HAL_TIM_PeriodElapsedCallback+0x28c>
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	2140      	movs	r1, #64	; 0x40
 8004ef6:	4825      	ldr	r0, [pc, #148]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004ef8:	f003 fd7a 	bl	80089f0 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8004efc:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004efe:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8004f02:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	dd06      	ble.n	8004f1a <HAL_TIM_PeriodElapsedCallback+0x2aa>
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f12:	481e      	ldr	r0, [pc, #120]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004f14:	f003 fd6c 	bl	80089f0 <HAL_GPIO_WritePin>
 8004f18:	e00d      	b.n	8004f36 <HAL_TIM_PeriodElapsedCallback+0x2c6>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8004f1a:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004f1c:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8004f20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f28:	d505      	bpl.n	8004f36 <HAL_TIM_PeriodElapsedCallback+0x2c6>
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f30:	4816      	ldr	r0, [pc, #88]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004f32:	f003 fd5d 	bl	80089f0 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004f38:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8004f3c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f44:	dd24      	ble.n	8004f90 <HAL_TIM_PeriodElapsedCallback+0x320>
 8004f46:	2201      	movs	r2, #1
 8004f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f4c:	480f      	ldr	r0, [pc, #60]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004f4e:	f003 fd4f 	bl	80089f0 <HAL_GPIO_WritePin>
 8004f52:	e02a      	b.n	8004faa <HAL_TIM_PeriodElapsedCallback+0x33a>
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	24001c94 	.word	0x24001c94
 8004f5c:	24001b90 	.word	0x24001b90
 8004f60:	24001b88 	.word	0x24001b88
 8004f64:	24001b98 	.word	0x24001b98
 8004f68:	240001c8 	.word	0x240001c8
 8004f6c:	24000000 	.word	0x24000000
 8004f70:	24000424 	.word	0x24000424
 8004f74:	240002f4 	.word	0x240002f4
 8004f78:	24000470 	.word	0x24000470
 8004f7c:	240002a8 	.word	0x240002a8
 8004f80:	2400038c 	.word	0x2400038c
 8004f84:	240003d8 	.word	0x240003d8
 8004f88:	58020400 	.word	0x58020400
 8004f8c:	58021000 	.word	0x58021000
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8004f90:	4b45      	ldr	r3, [pc, #276]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004f92:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8004f96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9e:	d504      	bpl.n	8004faa <HAL_TIM_PeriodElapsedCallback+0x33a>
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	2180      	movs	r1, #128	; 0x80
 8004fa4:	4841      	ldr	r0, [pc, #260]	; (80050ac <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8004fa6:	f003 fd23 	bl	80089f0 <HAL_GPIO_WritePin>

		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004faa:	4b3f      	ldr	r3, [pc, #252]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004fac:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004fb0:	4b3d      	ldr	r3, [pc, #244]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004fb2:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004fb6:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ Kpid[2].insVel + Kpid[3].insVel );
 8004fba:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004fbc:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004fc0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004fc4:	4b38      	ldr	r3, [pc, #224]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004fc6:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004fca:	ee36 7b07 	vadd.f64	d7, d6, d7
		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004fce:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004fd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004fd6:	4b36      	ldr	r3, [pc, #216]	; (80050b0 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8004fd8:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004fdc:	4b32      	ldr	r3, [pc, #200]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004fde:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004fe2:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004fe4:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004fe8:	ee36 6b47 	vsub.f64	d6, d6, d7
				+ Kpid[2].insVel - Kpid[3].insVel );
 8004fec:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004fee:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004ff2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004ff6:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8004ff8:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004ffc:	ee36 7b47 	vsub.f64	d7, d6, d7
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8005000:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8005004:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x444>)
 800500a:	ed83 7b00 	vstr	d7, [r3]
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 800500e:	4b26      	ldr	r3, [pc, #152]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8005010:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8005014:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8005016:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800501a:	ee36 6b47 	vsub.f64	d6, d6, d7
				- Kpid[2].insVel + Kpid[3].insVel ) / coeffab;
 800501e:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8005020:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8005024:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005028:	4b1f      	ldr	r3, [pc, #124]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 800502a:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 800502e:	ee36 7b07 	vadd.f64	d7, d6, d7
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8005032:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8005036:	ee27 5b06 	vmul.f64	d5, d7, d6
				- Kpid[2].insVel + Kpid[3].insVel ) / coeffab;
 800503a:	4b1f      	ldr	r3, [pc, #124]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x448>)
 800503c:	ed93 6b00 	vldr	d6, [r3]
 8005040:	ee85 7b06 	vdiv.f64	d7, d5, d6
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8005044:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8005046:	ed83 7b00 	vstr	d7, [r3]

		odom_update(vel_Car2World('x',rVx,rVy), vel_Car2World('y',rVx,rVy), rW);
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x444>)
 800504c:	ed93 7b00 	vldr	d7, [r3]
 8005050:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8005052:	ed93 6b00 	vldr	d6, [r3]
 8005056:	eeb0 1b46 	vmov.f64	d1, d6
 800505a:	eeb0 0b47 	vmov.f64	d0, d7
 800505e:	2078      	movs	r0, #120	; 0x78
 8005060:	f7ff f94e 	bl	8004300 <vel_Car2World>
 8005064:	eeb0 8b40 	vmov.f64	d8, d0
 8005068:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x444>)
 800506a:	ed93 7b00 	vldr	d7, [r3]
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8005070:	ed93 6b00 	vldr	d6, [r3]
 8005074:	eeb0 1b46 	vmov.f64	d1, d6
 8005078:	eeb0 0b47 	vmov.f64	d0, d7
 800507c:	2079      	movs	r0, #121	; 0x79
 800507e:	f7ff f93f 	bl	8004300 <vel_Car2World>
 8005082:	eeb0 6b40 	vmov.f64	d6, d0
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8005088:	ed93 7b00 	vldr	d7, [r3]
 800508c:	eeb0 2b47 	vmov.f64	d2, d7
 8005090:	eeb0 1b46 	vmov.f64	d1, d6
 8005094:	eeb0 0b48 	vmov.f64	d0, d8
 8005098:	f7ff f852 	bl	8004140 <odom_update>
	}
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	ecbd 8b02 	vpop	{d8}
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	24000000 	.word	0x24000000
 80050ac:	58021000 	.word	0x58021000
 80050b0:	24001ba8 	.word	0x24001ba8
 80050b4:	24001ba0 	.word	0x24001ba0
 80050b8:	240001c8 	.word	0x240001c8
 80050bc:	24001bb0 	.word	0x24001bb0

080050c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80050c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80050c4:	f7ff fd5c 	bl	8004b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050c8:	480c      	ldr	r0, [pc, #48]	; (80050fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050ca:	490d      	ldr	r1, [pc, #52]	; (8005100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050cc:	4a0d      	ldr	r2, [pc, #52]	; (8005104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050d0:	e002      	b.n	80050d8 <LoopCopyDataInit>

080050d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050d6:	3304      	adds	r3, #4

080050d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050dc:	d3f9      	bcc.n	80050d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80050e0:	4c0a      	ldr	r4, [pc, #40]	; (800510c <LoopFillZerobss+0x22>)
  movs r3, #0
 80050e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050e4:	e001      	b.n	80050ea <LoopFillZerobss>

080050e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050e8:	3204      	adds	r2, #4

080050ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050ec:	d3fb      	bcc.n	80050e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050ee:	f00a fb73 	bl	800f7d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050f2:	f7fb fc5f 	bl	80009b4 <main>
  bx  lr
 80050f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80050f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80050fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005100:	24000240 	.word	0x24000240
  ldr r2, =_sidata
 8005104:	0801004c 	.word	0x0801004c
  ldr r2, =_sbss
 8005108:	24000240 	.word	0x24000240
  ldr r4, =_ebss
 800510c:	24001cac 	.word	0x24001cac

08005110 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005110:	e7fe      	b.n	8005110 <ADC3_IRQHandler>
	...

08005114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800511a:	2003      	movs	r0, #3
 800511c:	f000 f980 	bl	8005420 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005120:	f004 fa42 	bl	80095a8 <HAL_RCC_GetSysClockFreq>
 8005124:	4602      	mov	r2, r0
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <HAL_Init+0x68>)
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	0a1b      	lsrs	r3, r3, #8
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	4913      	ldr	r1, [pc, #76]	; (8005180 <HAL_Init+0x6c>)
 8005132:	5ccb      	ldrb	r3, [r1, r3]
 8005134:	f003 031f 	and.w	r3, r3, #31
 8005138:	fa22 f303 	lsr.w	r3, r2, r3
 800513c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800513e:	4b0f      	ldr	r3, [pc, #60]	; (800517c <HAL_Init+0x68>)
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	4a0e      	ldr	r2, [pc, #56]	; (8005180 <HAL_Init+0x6c>)
 8005148:	5cd3      	ldrb	r3, [r2, r3]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
 8005154:	4a0b      	ldr	r2, [pc, #44]	; (8005184 <HAL_Init+0x70>)
 8005156:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005158:	4a0b      	ldr	r2, [pc, #44]	; (8005188 <HAL_Init+0x74>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800515e:	200f      	movs	r0, #15
 8005160:	f000 f814 	bl	800518c <HAL_InitTick>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e002      	b.n	8005174 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800516e:	f7ff f917 	bl	80043a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	58024400 	.word	0x58024400
 8005180:	0800fe20 	.word	0x0800fe20
 8005184:	240001c4 	.word	0x240001c4
 8005188:	240001c0 	.word	0x240001c0

0800518c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005194:	4b15      	ldr	r3, [pc, #84]	; (80051ec <HAL_InitTick+0x60>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e021      	b.n	80051e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80051a0:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <HAL_InitTick+0x64>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	4b11      	ldr	r3, [pc, #68]	; (80051ec <HAL_InitTick+0x60>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	4619      	mov	r1, r3
 80051aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 f973 	bl	80054a2 <HAL_SYSTICK_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e00e      	b.n	80051e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b0f      	cmp	r3, #15
 80051ca:	d80a      	bhi.n	80051e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051cc:	2200      	movs	r2, #0
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295
 80051d4:	f000 f92f 	bl	8005436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051d8:	4a06      	ldr	r2, [pc, #24]	; (80051f4 <HAL_InitTick+0x68>)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e000      	b.n	80051e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	240001d4 	.word	0x240001d4
 80051f0:	240001c0 	.word	0x240001c0
 80051f4:	240001d0 	.word	0x240001d0

080051f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <HAL_IncTick+0x20>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_IncTick+0x24>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4413      	add	r3, r2
 8005208:	4a04      	ldr	r2, [pc, #16]	; (800521c <HAL_IncTick+0x24>)
 800520a:	6013      	str	r3, [r2, #0]
}
 800520c:	bf00      	nop
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	240001d4 	.word	0x240001d4
 800521c:	24001c98 	.word	0x24001c98

08005220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  return uwTick;
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <HAL_GetTick+0x14>)
 8005226:	681b      	ldr	r3, [r3, #0]
}
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	24001c98 	.word	0x24001c98

08005238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <__NVIC_SetPriorityGrouping+0x40>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005254:	4013      	ands	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005260:	4b06      	ldr	r3, [pc, #24]	; (800527c <__NVIC_SetPriorityGrouping+0x44>)
 8005262:	4313      	orrs	r3, r2
 8005264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005266:	4a04      	ldr	r2, [pc, #16]	; (8005278 <__NVIC_SetPriorityGrouping+0x40>)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	60d3      	str	r3, [r2, #12]
}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	e000ed00 	.word	0xe000ed00
 800527c:	05fa0000 	.word	0x05fa0000

08005280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <__NVIC_GetPriorityGrouping+0x18>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	0a1b      	lsrs	r3, r3, #8
 800528a:	f003 0307 	and.w	r3, r3, #7
}
 800528e:	4618      	mov	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	e000ed00 	.word	0xe000ed00

0800529c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	db0b      	blt.n	80052c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	f003 021f 	and.w	r2, r3, #31
 80052b4:	4907      	ldr	r1, [pc, #28]	; (80052d4 <__NVIC_EnableIRQ+0x38>)
 80052b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	2001      	movs	r0, #1
 80052be:	fa00 f202 	lsl.w	r2, r0, r2
 80052c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	e000e100 	.word	0xe000e100

080052d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	db12      	blt.n	8005310 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	f003 021f 	and.w	r2, r3, #31
 80052f0:	490a      	ldr	r1, [pc, #40]	; (800531c <__NVIC_DisableIRQ+0x44>)
 80052f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2001      	movs	r0, #1
 80052fa:	fa00 f202 	lsl.w	r2, r0, r2
 80052fe:	3320      	adds	r3, #32
 8005300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005304:	f3bf 8f4f 	dsb	sy
}
 8005308:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800530a:	f3bf 8f6f 	isb	sy
}
 800530e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	e000e100 	.word	0xe000e100

08005320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	6039      	str	r1, [r7, #0]
 800532a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800532c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	db0a      	blt.n	800534a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	b2da      	uxtb	r2, r3
 8005338:	490c      	ldr	r1, [pc, #48]	; (800536c <__NVIC_SetPriority+0x4c>)
 800533a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800533e:	0112      	lsls	r2, r2, #4
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	440b      	add	r3, r1
 8005344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005348:	e00a      	b.n	8005360 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	4908      	ldr	r1, [pc, #32]	; (8005370 <__NVIC_SetPriority+0x50>)
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	3b04      	subs	r3, #4
 8005358:	0112      	lsls	r2, r2, #4
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	440b      	add	r3, r1
 800535e:	761a      	strb	r2, [r3, #24]
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	e000e100 	.word	0xe000e100
 8005370:	e000ed00 	.word	0xe000ed00

08005374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005374:	b480      	push	{r7}
 8005376:	b089      	sub	sp, #36	; 0x24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f1c3 0307 	rsb	r3, r3, #7
 800538e:	2b04      	cmp	r3, #4
 8005390:	bf28      	it	cs
 8005392:	2304      	movcs	r3, #4
 8005394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3304      	adds	r3, #4
 800539a:	2b06      	cmp	r3, #6
 800539c:	d902      	bls.n	80053a4 <NVIC_EncodePriority+0x30>
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	3b03      	subs	r3, #3
 80053a2:	e000      	b.n	80053a6 <NVIC_EncodePriority+0x32>
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	43da      	mvns	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	401a      	ands	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053bc:	f04f 31ff 	mov.w	r1, #4294967295
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	43d9      	mvns	r1, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053cc:	4313      	orrs	r3, r2
         );
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3724      	adds	r7, #36	; 0x24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053ec:	d301      	bcc.n	80053f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053ee:	2301      	movs	r3, #1
 80053f0:	e00f      	b.n	8005412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053f2:	4a0a      	ldr	r2, [pc, #40]	; (800541c <SysTick_Config+0x40>)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053fa:	210f      	movs	r1, #15
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005400:	f7ff ff8e 	bl	8005320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <SysTick_Config+0x40>)
 8005406:	2200      	movs	r2, #0
 8005408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800540a:	4b04      	ldr	r3, [pc, #16]	; (800541c <SysTick_Config+0x40>)
 800540c:	2207      	movs	r2, #7
 800540e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	e000e010 	.word	0xe000e010

08005420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff ff05 	bl	8005238 <__NVIC_SetPriorityGrouping>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b086      	sub	sp, #24
 800543a:	af00      	add	r7, sp, #0
 800543c:	4603      	mov	r3, r0
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005444:	f7ff ff1c 	bl	8005280 <__NVIC_GetPriorityGrouping>
 8005448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	6978      	ldr	r0, [r7, #20]
 8005450:	f7ff ff90 	bl	8005374 <NVIC_EncodePriority>
 8005454:	4602      	mov	r2, r0
 8005456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800545a:	4611      	mov	r1, r2
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff ff5f 	bl	8005320 <__NVIC_SetPriority>
}
 8005462:	bf00      	nop
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	4603      	mov	r3, r0
 8005472:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff ff0f 	bl	800529c <__NVIC_EnableIRQ>
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	4603      	mov	r3, r0
 800548e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff ff1f 	bl	80052d8 <__NVIC_DisableIRQ>
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff ff96 	bl	80053dc <SysTick_Config>
 80054b0:	4603      	mov	r3, r0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80054c4:	f7ff feac 	bl	8005220 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e314      	b.n	8005afe <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a66      	ldr	r2, [pc, #408]	; (8005674 <HAL_DMA_Init+0x1b8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d04a      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a65      	ldr	r2, [pc, #404]	; (8005678 <HAL_DMA_Init+0x1bc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d045      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a63      	ldr	r2, [pc, #396]	; (800567c <HAL_DMA_Init+0x1c0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d040      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a62      	ldr	r2, [pc, #392]	; (8005680 <HAL_DMA_Init+0x1c4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d03b      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a60      	ldr	r2, [pc, #384]	; (8005684 <HAL_DMA_Init+0x1c8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d036      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a5f      	ldr	r2, [pc, #380]	; (8005688 <HAL_DMA_Init+0x1cc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d031      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a5d      	ldr	r2, [pc, #372]	; (800568c <HAL_DMA_Init+0x1d0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d02c      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a5c      	ldr	r2, [pc, #368]	; (8005690 <HAL_DMA_Init+0x1d4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d027      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a5a      	ldr	r2, [pc, #360]	; (8005694 <HAL_DMA_Init+0x1d8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d022      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a59      	ldr	r2, [pc, #356]	; (8005698 <HAL_DMA_Init+0x1dc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d01d      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a57      	ldr	r2, [pc, #348]	; (800569c <HAL_DMA_Init+0x1e0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d018      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a56      	ldr	r2, [pc, #344]	; (80056a0 <HAL_DMA_Init+0x1e4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a54      	ldr	r2, [pc, #336]	; (80056a4 <HAL_DMA_Init+0x1e8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00e      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a53      	ldr	r2, [pc, #332]	; (80056a8 <HAL_DMA_Init+0x1ec>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d009      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a51      	ldr	r2, [pc, #324]	; (80056ac <HAL_DMA_Init+0x1f0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_DMA_Init+0xb8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a50      	ldr	r2, [pc, #320]	; (80056b0 <HAL_DMA_Init+0x1f4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <HAL_DMA_Init+0xbc>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <HAL_DMA_Init+0xbe>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 813c 	beq.w	80057f8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a37      	ldr	r2, [pc, #220]	; (8005674 <HAL_DMA_Init+0x1b8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d04a      	beq.n	8005630 <HAL_DMA_Init+0x174>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a36      	ldr	r2, [pc, #216]	; (8005678 <HAL_DMA_Init+0x1bc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d045      	beq.n	8005630 <HAL_DMA_Init+0x174>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a34      	ldr	r2, [pc, #208]	; (800567c <HAL_DMA_Init+0x1c0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d040      	beq.n	8005630 <HAL_DMA_Init+0x174>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a33      	ldr	r2, [pc, #204]	; (8005680 <HAL_DMA_Init+0x1c4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d03b      	beq.n	8005630 <HAL_DMA_Init+0x174>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a31      	ldr	r2, [pc, #196]	; (8005684 <HAL_DMA_Init+0x1c8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d036      	beq.n	8005630 <HAL_DMA_Init+0x174>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a30      	ldr	r2, [pc, #192]	; (8005688 <HAL_DMA_Init+0x1cc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d031      	beq.n	8005630 <HAL_DMA_Init+0x174>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a2e      	ldr	r2, [pc, #184]	; (800568c <HAL_DMA_Init+0x1d0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02c      	beq.n	8005630 <HAL_DMA_Init+0x174>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a2d      	ldr	r2, [pc, #180]	; (8005690 <HAL_DMA_Init+0x1d4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d027      	beq.n	8005630 <HAL_DMA_Init+0x174>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a2b      	ldr	r2, [pc, #172]	; (8005694 <HAL_DMA_Init+0x1d8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d022      	beq.n	8005630 <HAL_DMA_Init+0x174>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <HAL_DMA_Init+0x1dc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d01d      	beq.n	8005630 <HAL_DMA_Init+0x174>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a28      	ldr	r2, [pc, #160]	; (800569c <HAL_DMA_Init+0x1e0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_DMA_Init+0x174>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a27      	ldr	r2, [pc, #156]	; (80056a0 <HAL_DMA_Init+0x1e4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <HAL_DMA_Init+0x174>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a25      	ldr	r2, [pc, #148]	; (80056a4 <HAL_DMA_Init+0x1e8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_DMA_Init+0x174>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <HAL_DMA_Init+0x1ec>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_DMA_Init+0x174>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a22      	ldr	r2, [pc, #136]	; (80056ac <HAL_DMA_Init+0x1f0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_DMA_Init+0x174>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a21      	ldr	r2, [pc, #132]	; (80056b0 <HAL_DMA_Init+0x1f4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d108      	bne.n	8005642 <HAL_DMA_Init+0x186>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e007      	b.n	8005652 <HAL_DMA_Init+0x196>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005652:	e02f      	b.n	80056b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005654:	f7ff fde4 	bl	8005220 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b05      	cmp	r3, #5
 8005660:	d928      	bls.n	80056b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2203      	movs	r2, #3
 800566c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e244      	b.n	8005afe <HAL_DMA_Init+0x642>
 8005674:	40020010 	.word	0x40020010
 8005678:	40020028 	.word	0x40020028
 800567c:	40020040 	.word	0x40020040
 8005680:	40020058 	.word	0x40020058
 8005684:	40020070 	.word	0x40020070
 8005688:	40020088 	.word	0x40020088
 800568c:	400200a0 	.word	0x400200a0
 8005690:	400200b8 	.word	0x400200b8
 8005694:	40020410 	.word	0x40020410
 8005698:	40020428 	.word	0x40020428
 800569c:	40020440 	.word	0x40020440
 80056a0:	40020458 	.word	0x40020458
 80056a4:	40020470 	.word	0x40020470
 80056a8:	40020488 	.word	0x40020488
 80056ac:	400204a0 	.word	0x400204a0
 80056b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1c8      	bne.n	8005654 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4b84      	ldr	r3, [pc, #528]	; (80058e0 <HAL_DMA_Init+0x424>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80056da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b04      	cmp	r3, #4
 8005706:	d107      	bne.n	8005718 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	4313      	orrs	r3, r2
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b28      	cmp	r3, #40	; 0x28
 800571e:	d903      	bls.n	8005728 <HAL_DMA_Init+0x26c>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b2e      	cmp	r3, #46	; 0x2e
 8005726:	d91f      	bls.n	8005768 <HAL_DMA_Init+0x2ac>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b3e      	cmp	r3, #62	; 0x3e
 800572e:	d903      	bls.n	8005738 <HAL_DMA_Init+0x27c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b42      	cmp	r3, #66	; 0x42
 8005736:	d917      	bls.n	8005768 <HAL_DMA_Init+0x2ac>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b46      	cmp	r3, #70	; 0x46
 800573e:	d903      	bls.n	8005748 <HAL_DMA_Init+0x28c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b48      	cmp	r3, #72	; 0x48
 8005746:	d90f      	bls.n	8005768 <HAL_DMA_Init+0x2ac>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b4e      	cmp	r3, #78	; 0x4e
 800574e:	d903      	bls.n	8005758 <HAL_DMA_Init+0x29c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b52      	cmp	r3, #82	; 0x52
 8005756:	d907      	bls.n	8005768 <HAL_DMA_Init+0x2ac>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b73      	cmp	r3, #115	; 0x73
 800575e:	d905      	bls.n	800576c <HAL_DMA_Init+0x2b0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b77      	cmp	r3, #119	; 0x77
 8005766:	d801      	bhi.n	800576c <HAL_DMA_Init+0x2b0>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <HAL_DMA_Init+0x2b2>
 800576c:	2300      	movs	r3, #0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005778:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 0307 	bic.w	r3, r3, #7
 8005790:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d117      	bne.n	80057d4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00e      	beq.n	80057d4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f002 fce6 	bl	8008188 <DMA_CheckFifoParam>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2240      	movs	r2, #64	; 0x40
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e194      	b.n	8005afe <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f002 fc21 	bl	8008024 <DMA_CalcBaseAndBitshift>
 80057e2:	4603      	mov	r3, r0
 80057e4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	223f      	movs	r2, #63	; 0x3f
 80057f0:	409a      	lsls	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	e0ca      	b.n	800598e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a39      	ldr	r2, [pc, #228]	; (80058e4 <HAL_DMA_Init+0x428>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d022      	beq.n	8005848 <HAL_DMA_Init+0x38c>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a38      	ldr	r2, [pc, #224]	; (80058e8 <HAL_DMA_Init+0x42c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d01d      	beq.n	8005848 <HAL_DMA_Init+0x38c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a36      	ldr	r2, [pc, #216]	; (80058ec <HAL_DMA_Init+0x430>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d018      	beq.n	8005848 <HAL_DMA_Init+0x38c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a35      	ldr	r2, [pc, #212]	; (80058f0 <HAL_DMA_Init+0x434>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <HAL_DMA_Init+0x38c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a33      	ldr	r2, [pc, #204]	; (80058f4 <HAL_DMA_Init+0x438>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00e      	beq.n	8005848 <HAL_DMA_Init+0x38c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a32      	ldr	r2, [pc, #200]	; (80058f8 <HAL_DMA_Init+0x43c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_DMA_Init+0x38c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a30      	ldr	r2, [pc, #192]	; (80058fc <HAL_DMA_Init+0x440>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d004      	beq.n	8005848 <HAL_DMA_Init+0x38c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a2f      	ldr	r2, [pc, #188]	; (8005900 <HAL_DMA_Init+0x444>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d101      	bne.n	800584c <HAL_DMA_Init+0x390>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <HAL_DMA_Init+0x392>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8094 	beq.w	800597c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a22      	ldr	r2, [pc, #136]	; (80058e4 <HAL_DMA_Init+0x428>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d021      	beq.n	80058a2 <HAL_DMA_Init+0x3e6>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a21      	ldr	r2, [pc, #132]	; (80058e8 <HAL_DMA_Init+0x42c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d01c      	beq.n	80058a2 <HAL_DMA_Init+0x3e6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1f      	ldr	r2, [pc, #124]	; (80058ec <HAL_DMA_Init+0x430>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d017      	beq.n	80058a2 <HAL_DMA_Init+0x3e6>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1e      	ldr	r2, [pc, #120]	; (80058f0 <HAL_DMA_Init+0x434>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d012      	beq.n	80058a2 <HAL_DMA_Init+0x3e6>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <HAL_DMA_Init+0x438>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00d      	beq.n	80058a2 <HAL_DMA_Init+0x3e6>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <HAL_DMA_Init+0x43c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d008      	beq.n	80058a2 <HAL_DMA_Init+0x3e6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a19      	ldr	r2, [pc, #100]	; (80058fc <HAL_DMA_Init+0x440>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <HAL_DMA_Init+0x3e6>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a18      	ldr	r2, [pc, #96]	; (8005900 <HAL_DMA_Init+0x444>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4b11      	ldr	r3, [pc, #68]	; (8005904 <HAL_DMA_Init+0x448>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d01d      	beq.n	8005908 <HAL_DMA_Init+0x44c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b80      	cmp	r3, #128	; 0x80
 80058d2:	d102      	bne.n	80058da <HAL_DMA_Init+0x41e>
 80058d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058d8:	e017      	b.n	800590a <HAL_DMA_Init+0x44e>
 80058da:	2300      	movs	r3, #0
 80058dc:	e015      	b.n	800590a <HAL_DMA_Init+0x44e>
 80058de:	bf00      	nop
 80058e0:	fe10803f 	.word	0xfe10803f
 80058e4:	58025408 	.word	0x58025408
 80058e8:	5802541c 	.word	0x5802541c
 80058ec:	58025430 	.word	0x58025430
 80058f0:	58025444 	.word	0x58025444
 80058f4:	58025458 	.word	0x58025458
 80058f8:	5802546c 	.word	0x5802546c
 80058fc:	58025480 	.word	0x58025480
 8005900:	58025494 	.word	0x58025494
 8005904:	fffe000f 	.word	0xfffe000f
 8005908:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68d2      	ldr	r2, [r2, #12]
 800590e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005910:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005918:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005920:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005928:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005930:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005938:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	4b6e      	ldr	r3, [pc, #440]	; (8005b08 <HAL_DMA_Init+0x64c>)
 8005950:	4413      	add	r3, r2
 8005952:	4a6e      	ldr	r2, [pc, #440]	; (8005b0c <HAL_DMA_Init+0x650>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	091b      	lsrs	r3, r3, #4
 800595a:	009a      	lsls	r2, r3, #2
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f002 fb5f 	bl	8008024 <DMA_CalcBaseAndBitshift>
 8005966:	4603      	mov	r3, r0
 8005968:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2201      	movs	r2, #1
 8005974:	409a      	lsls	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	e008      	b.n	800598e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2240      	movs	r2, #64	; 0x40
 8005980:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2203      	movs	r2, #3
 8005986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e0b7      	b.n	8005afe <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a5f      	ldr	r2, [pc, #380]	; (8005b10 <HAL_DMA_Init+0x654>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d072      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a5d      	ldr	r2, [pc, #372]	; (8005b14 <HAL_DMA_Init+0x658>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d06d      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a5c      	ldr	r2, [pc, #368]	; (8005b18 <HAL_DMA_Init+0x65c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d068      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a5a      	ldr	r2, [pc, #360]	; (8005b1c <HAL_DMA_Init+0x660>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d063      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a59      	ldr	r2, [pc, #356]	; (8005b20 <HAL_DMA_Init+0x664>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d05e      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a57      	ldr	r2, [pc, #348]	; (8005b24 <HAL_DMA_Init+0x668>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d059      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a56      	ldr	r2, [pc, #344]	; (8005b28 <HAL_DMA_Init+0x66c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d054      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a54      	ldr	r2, [pc, #336]	; (8005b2c <HAL_DMA_Init+0x670>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d04f      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a53      	ldr	r2, [pc, #332]	; (8005b30 <HAL_DMA_Init+0x674>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d04a      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a51      	ldr	r2, [pc, #324]	; (8005b34 <HAL_DMA_Init+0x678>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d045      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a50      	ldr	r2, [pc, #320]	; (8005b38 <HAL_DMA_Init+0x67c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d040      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a4e      	ldr	r2, [pc, #312]	; (8005b3c <HAL_DMA_Init+0x680>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d03b      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a4d      	ldr	r2, [pc, #308]	; (8005b40 <HAL_DMA_Init+0x684>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d036      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a4b      	ldr	r2, [pc, #300]	; (8005b44 <HAL_DMA_Init+0x688>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d031      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a4a      	ldr	r2, [pc, #296]	; (8005b48 <HAL_DMA_Init+0x68c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d02c      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a48      	ldr	r2, [pc, #288]	; (8005b4c <HAL_DMA_Init+0x690>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d027      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a47      	ldr	r2, [pc, #284]	; (8005b50 <HAL_DMA_Init+0x694>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d022      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a45      	ldr	r2, [pc, #276]	; (8005b54 <HAL_DMA_Init+0x698>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01d      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a44      	ldr	r2, [pc, #272]	; (8005b58 <HAL_DMA_Init+0x69c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a42      	ldr	r2, [pc, #264]	; (8005b5c <HAL_DMA_Init+0x6a0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a41      	ldr	r2, [pc, #260]	; (8005b60 <HAL_DMA_Init+0x6a4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a3f      	ldr	r2, [pc, #252]	; (8005b64 <HAL_DMA_Init+0x6a8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a3e      	ldr	r2, [pc, #248]	; (8005b68 <HAL_DMA_Init+0x6ac>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_DMA_Init+0x5c2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a3c      	ldr	r2, [pc, #240]	; (8005b6c <HAL_DMA_Init+0x6b0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d101      	bne.n	8005a82 <HAL_DMA_Init+0x5c6>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <HAL_DMA_Init+0x5c8>
 8005a82:	2300      	movs	r3, #0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d032      	beq.n	8005aee <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f002 fbf9 	bl	8008280 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b80      	cmp	r3, #128	; 0x80
 8005a94:	d102      	bne.n	8005a9c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ab0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d010      	beq.n	8005adc <HAL_DMA_Init+0x620>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d80c      	bhi.n	8005adc <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f002 fc76 	bl	80083b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	e008      	b.n	8005aee <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	a7fdabf8 	.word	0xa7fdabf8
 8005b0c:	cccccccd 	.word	0xcccccccd
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
 8005b50:	58025408 	.word	0x58025408
 8005b54:	5802541c 	.word	0x5802541c
 8005b58:	58025430 	.word	0x58025430
 8005b5c:	58025444 	.word	0x58025444
 8005b60:	58025458 	.word	0x58025458
 8005b64:	5802546c 	.word	0x5802546c
 8005b68:	58025480 	.word	0x58025480
 8005b6c:	58025494 	.word	0x58025494

08005b70 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e1a8      	b.n	8005ed4 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a82      	ldr	r2, [pc, #520]	; (8005d90 <HAL_DMA_DeInit+0x220>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04a      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a80      	ldr	r2, [pc, #512]	; (8005d94 <HAL_DMA_DeInit+0x224>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d045      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a7f      	ldr	r2, [pc, #508]	; (8005d98 <HAL_DMA_DeInit+0x228>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d040      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a7d      	ldr	r2, [pc, #500]	; (8005d9c <HAL_DMA_DeInit+0x22c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d03b      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a7c      	ldr	r2, [pc, #496]	; (8005da0 <HAL_DMA_DeInit+0x230>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d036      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a7a      	ldr	r2, [pc, #488]	; (8005da4 <HAL_DMA_DeInit+0x234>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d031      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a79      	ldr	r2, [pc, #484]	; (8005da8 <HAL_DMA_DeInit+0x238>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d02c      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a77      	ldr	r2, [pc, #476]	; (8005dac <HAL_DMA_DeInit+0x23c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d027      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a76      	ldr	r2, [pc, #472]	; (8005db0 <HAL_DMA_DeInit+0x240>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a74      	ldr	r2, [pc, #464]	; (8005db4 <HAL_DMA_DeInit+0x244>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01d      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a73      	ldr	r2, [pc, #460]	; (8005db8 <HAL_DMA_DeInit+0x248>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a71      	ldr	r2, [pc, #452]	; (8005dbc <HAL_DMA_DeInit+0x24c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a70      	ldr	r2, [pc, #448]	; (8005dc0 <HAL_DMA_DeInit+0x250>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a6e      	ldr	r2, [pc, #440]	; (8005dc4 <HAL_DMA_DeInit+0x254>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a6d      	ldr	r2, [pc, #436]	; (8005dc8 <HAL_DMA_DeInit+0x258>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_DMA_DeInit+0xb2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a6b      	ldr	r2, [pc, #428]	; (8005dcc <HAL_DMA_DeInit+0x25c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d108      	bne.n	8005c34 <HAL_DMA_DeInit+0xc4>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e007      	b.n	8005c44 <HAL_DMA_DeInit+0xd4>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a51      	ldr	r2, [pc, #324]	; (8005d90 <HAL_DMA_DeInit+0x220>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d04a      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a50      	ldr	r2, [pc, #320]	; (8005d94 <HAL_DMA_DeInit+0x224>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d045      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a4e      	ldr	r2, [pc, #312]	; (8005d98 <HAL_DMA_DeInit+0x228>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d040      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a4d      	ldr	r2, [pc, #308]	; (8005d9c <HAL_DMA_DeInit+0x22c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d03b      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a4b      	ldr	r2, [pc, #300]	; (8005da0 <HAL_DMA_DeInit+0x230>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d036      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a4a      	ldr	r2, [pc, #296]	; (8005da4 <HAL_DMA_DeInit+0x234>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d031      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a48      	ldr	r2, [pc, #288]	; (8005da8 <HAL_DMA_DeInit+0x238>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d02c      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a47      	ldr	r2, [pc, #284]	; (8005dac <HAL_DMA_DeInit+0x23c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d027      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a45      	ldr	r2, [pc, #276]	; (8005db0 <HAL_DMA_DeInit+0x240>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d022      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a44      	ldr	r2, [pc, #272]	; (8005db4 <HAL_DMA_DeInit+0x244>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d01d      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a42      	ldr	r2, [pc, #264]	; (8005db8 <HAL_DMA_DeInit+0x248>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d018      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a41      	ldr	r2, [pc, #260]	; (8005dbc <HAL_DMA_DeInit+0x24c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d013      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a3f      	ldr	r2, [pc, #252]	; (8005dc0 <HAL_DMA_DeInit+0x250>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00e      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a3e      	ldr	r2, [pc, #248]	; (8005dc4 <HAL_DMA_DeInit+0x254>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d009      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a3c      	ldr	r2, [pc, #240]	; (8005dc8 <HAL_DMA_DeInit+0x258>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_DMA_DeInit+0x174>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a3b      	ldr	r2, [pc, #236]	; (8005dcc <HAL_DMA_DeInit+0x25c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d101      	bne.n	8005ce8 <HAL_DMA_DeInit+0x178>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <HAL_DMA_DeInit+0x17a>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d025      	beq.n	8005d3a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2200      	movs	r2, #0
 8005d04:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2221      	movs	r2, #33	; 0x21
 8005d1c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f002 f980 	bl	8008024 <DMA_CalcBaseAndBitshift>
 8005d24:	4603      	mov	r3, r0
 8005d26:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2c:	f003 031f 	and.w	r3, r3, #31
 8005d30:	223f      	movs	r2, #63	; 0x3f
 8005d32:	409a      	lsls	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	609a      	str	r2, [r3, #8]
 8005d38:	e081      	b.n	8005e3e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <HAL_DMA_DeInit+0x260>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_DMA_DeInit+0x21a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a22      	ldr	r2, [pc, #136]	; (8005dd4 <HAL_DMA_DeInit+0x264>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <HAL_DMA_DeInit+0x21a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a21      	ldr	r2, [pc, #132]	; (8005dd8 <HAL_DMA_DeInit+0x268>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_DMA_DeInit+0x21a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a1f      	ldr	r2, [pc, #124]	; (8005ddc <HAL_DMA_DeInit+0x26c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_DMA_DeInit+0x21a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a1e      	ldr	r2, [pc, #120]	; (8005de0 <HAL_DMA_DeInit+0x270>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_DMA_DeInit+0x21a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <HAL_DMA_DeInit+0x274>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_DMA_DeInit+0x21a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <HAL_DMA_DeInit+0x278>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_DMA_DeInit+0x21a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a19      	ldr	r2, [pc, #100]	; (8005dec <HAL_DMA_DeInit+0x27c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d132      	bne.n	8005df0 <HAL_DMA_DeInit+0x280>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e031      	b.n	8005df2 <HAL_DMA_DeInit+0x282>
 8005d8e:	bf00      	nop
 8005d90:	40020010 	.word	0x40020010
 8005d94:	40020028 	.word	0x40020028
 8005d98:	40020040 	.word	0x40020040
 8005d9c:	40020058 	.word	0x40020058
 8005da0:	40020070 	.word	0x40020070
 8005da4:	40020088 	.word	0x40020088
 8005da8:	400200a0 	.word	0x400200a0
 8005dac:	400200b8 	.word	0x400200b8
 8005db0:	40020410 	.word	0x40020410
 8005db4:	40020428 	.word	0x40020428
 8005db8:	40020440 	.word	0x40020440
 8005dbc:	40020458 	.word	0x40020458
 8005dc0:	40020470 	.word	0x40020470
 8005dc4:	40020488 	.word	0x40020488
 8005dc8:	400204a0 	.word	0x400204a0
 8005dcc:	400204b8 	.word	0x400204b8
 8005dd0:	58025408 	.word	0x58025408
 8005dd4:	5802541c 	.word	0x5802541c
 8005dd8:	58025430 	.word	0x58025430
 8005ddc:	58025444 	.word	0x58025444
 8005de0:	58025458 	.word	0x58025458
 8005de4:	5802546c 	.word	0x5802546c
 8005de8:	58025480 	.word	0x58025480
 8005dec:	58025494 	.word	0x58025494
 8005df0:	2300      	movs	r3, #0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d021      	beq.n	8005e3a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2200      	movs	r2, #0
 8005e04:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f002 f900 	bl	8008024 <DMA_CalcBaseAndBitshift>
 8005e24:	4603      	mov	r3, r0
 8005e26:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2c:	f003 031f 	and.w	r3, r3, #31
 8005e30:	2201      	movs	r2, #1
 8005e32:	409a      	lsls	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	e001      	b.n	8005e3e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e04a      	b.n	8005ed4 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f002 fa1e 	bl	8008280 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e5c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00f      	beq.n	8005e86 <HAL_DMA_DeInit+0x316>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d80b      	bhi.n	8005e86 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f002 faa0 	bl	80083b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e84:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e226      	b.n	8006346 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d101      	bne.n	8005f06 <HAL_DMA_Start_IT+0x2a>
 8005f02:	2302      	movs	r3, #2
 8005f04:	e21f      	b.n	8006346 <HAL_DMA_Start_IT+0x46a>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	f040 820a 	bne.w	8006330 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a68      	ldr	r2, [pc, #416]	; (80060d0 <HAL_DMA_Start_IT+0x1f4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d04a      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a66      	ldr	r2, [pc, #408]	; (80060d4 <HAL_DMA_Start_IT+0x1f8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d045      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a65      	ldr	r2, [pc, #404]	; (80060d8 <HAL_DMA_Start_IT+0x1fc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d040      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a63      	ldr	r2, [pc, #396]	; (80060dc <HAL_DMA_Start_IT+0x200>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d03b      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a62      	ldr	r2, [pc, #392]	; (80060e0 <HAL_DMA_Start_IT+0x204>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d036      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a60      	ldr	r2, [pc, #384]	; (80060e4 <HAL_DMA_Start_IT+0x208>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d031      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a5f      	ldr	r2, [pc, #380]	; (80060e8 <HAL_DMA_Start_IT+0x20c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d02c      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a5d      	ldr	r2, [pc, #372]	; (80060ec <HAL_DMA_Start_IT+0x210>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d027      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a5c      	ldr	r2, [pc, #368]	; (80060f0 <HAL_DMA_Start_IT+0x214>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d022      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a5a      	ldr	r2, [pc, #360]	; (80060f4 <HAL_DMA_Start_IT+0x218>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d01d      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a59      	ldr	r2, [pc, #356]	; (80060f8 <HAL_DMA_Start_IT+0x21c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d018      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a57      	ldr	r2, [pc, #348]	; (80060fc <HAL_DMA_Start_IT+0x220>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a56      	ldr	r2, [pc, #344]	; (8006100 <HAL_DMA_Start_IT+0x224>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00e      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a54      	ldr	r2, [pc, #336]	; (8006104 <HAL_DMA_Start_IT+0x228>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d009      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a53      	ldr	r2, [pc, #332]	; (8006108 <HAL_DMA_Start_IT+0x22c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d004      	beq.n	8005fca <HAL_DMA_Start_IT+0xee>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a51      	ldr	r2, [pc, #324]	; (800610c <HAL_DMA_Start_IT+0x230>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d108      	bne.n	8005fdc <HAL_DMA_Start_IT+0x100>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	e007      	b.n	8005fec <HAL_DMA_Start_IT+0x110>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f001 fe6a 	bl	8007ccc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a34      	ldr	r2, [pc, #208]	; (80060d0 <HAL_DMA_Start_IT+0x1f4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d04a      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a33      	ldr	r2, [pc, #204]	; (80060d4 <HAL_DMA_Start_IT+0x1f8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d045      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a31      	ldr	r2, [pc, #196]	; (80060d8 <HAL_DMA_Start_IT+0x1fc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d040      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a30      	ldr	r2, [pc, #192]	; (80060dc <HAL_DMA_Start_IT+0x200>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d03b      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a2e      	ldr	r2, [pc, #184]	; (80060e0 <HAL_DMA_Start_IT+0x204>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d036      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2d      	ldr	r2, [pc, #180]	; (80060e4 <HAL_DMA_Start_IT+0x208>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d031      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2b      	ldr	r2, [pc, #172]	; (80060e8 <HAL_DMA_Start_IT+0x20c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d02c      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2a      	ldr	r2, [pc, #168]	; (80060ec <HAL_DMA_Start_IT+0x210>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d027      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a28      	ldr	r2, [pc, #160]	; (80060f0 <HAL_DMA_Start_IT+0x214>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d022      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a27      	ldr	r2, [pc, #156]	; (80060f4 <HAL_DMA_Start_IT+0x218>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d01d      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a25      	ldr	r2, [pc, #148]	; (80060f8 <HAL_DMA_Start_IT+0x21c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d018      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a24      	ldr	r2, [pc, #144]	; (80060fc <HAL_DMA_Start_IT+0x220>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d013      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a22      	ldr	r2, [pc, #136]	; (8006100 <HAL_DMA_Start_IT+0x224>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00e      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a21      	ldr	r2, [pc, #132]	; (8006104 <HAL_DMA_Start_IT+0x228>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d009      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1f      	ldr	r2, [pc, #124]	; (8006108 <HAL_DMA_Start_IT+0x22c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_DMA_Start_IT+0x1bc>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1e      	ldr	r2, [pc, #120]	; (800610c <HAL_DMA_Start_IT+0x230>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d101      	bne.n	800609c <HAL_DMA_Start_IT+0x1c0>
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <HAL_DMA_Start_IT+0x1c2>
 800609c:	2300      	movs	r3, #0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d036      	beq.n	8006110 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f023 021e 	bic.w	r2, r3, #30
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0216 	orr.w	r2, r2, #22
 80060b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d03e      	beq.n	800613c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0208 	orr.w	r2, r2, #8
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e035      	b.n	800613c <HAL_DMA_Start_IT+0x260>
 80060d0:	40020010 	.word	0x40020010
 80060d4:	40020028 	.word	0x40020028
 80060d8:	40020040 	.word	0x40020040
 80060dc:	40020058 	.word	0x40020058
 80060e0:	40020070 	.word	0x40020070
 80060e4:	40020088 	.word	0x40020088
 80060e8:	400200a0 	.word	0x400200a0
 80060ec:	400200b8 	.word	0x400200b8
 80060f0:	40020410 	.word	0x40020410
 80060f4:	40020428 	.word	0x40020428
 80060f8:	40020440 	.word	0x40020440
 80060fc:	40020458 	.word	0x40020458
 8006100:	40020470 	.word	0x40020470
 8006104:	40020488 	.word	0x40020488
 8006108:	400204a0 	.word	0x400204a0
 800610c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f023 020e 	bic.w	r2, r3, #14
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 020a 	orr.w	r2, r2, #10
 8006122:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0204 	orr.w	r2, r2, #4
 800613a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a83      	ldr	r2, [pc, #524]	; (8006350 <HAL_DMA_Start_IT+0x474>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d072      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a82      	ldr	r2, [pc, #520]	; (8006354 <HAL_DMA_Start_IT+0x478>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d06d      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a80      	ldr	r2, [pc, #512]	; (8006358 <HAL_DMA_Start_IT+0x47c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d068      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a7f      	ldr	r2, [pc, #508]	; (800635c <HAL_DMA_Start_IT+0x480>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d063      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a7d      	ldr	r2, [pc, #500]	; (8006360 <HAL_DMA_Start_IT+0x484>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d05e      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a7c      	ldr	r2, [pc, #496]	; (8006364 <HAL_DMA_Start_IT+0x488>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d059      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7a      	ldr	r2, [pc, #488]	; (8006368 <HAL_DMA_Start_IT+0x48c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d054      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a79      	ldr	r2, [pc, #484]	; (800636c <HAL_DMA_Start_IT+0x490>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d04f      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a77      	ldr	r2, [pc, #476]	; (8006370 <HAL_DMA_Start_IT+0x494>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d04a      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a76      	ldr	r2, [pc, #472]	; (8006374 <HAL_DMA_Start_IT+0x498>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d045      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a74      	ldr	r2, [pc, #464]	; (8006378 <HAL_DMA_Start_IT+0x49c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d040      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a73      	ldr	r2, [pc, #460]	; (800637c <HAL_DMA_Start_IT+0x4a0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d03b      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a71      	ldr	r2, [pc, #452]	; (8006380 <HAL_DMA_Start_IT+0x4a4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d036      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a70      	ldr	r2, [pc, #448]	; (8006384 <HAL_DMA_Start_IT+0x4a8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d031      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a6e      	ldr	r2, [pc, #440]	; (8006388 <HAL_DMA_Start_IT+0x4ac>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d02c      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a6d      	ldr	r2, [pc, #436]	; (800638c <HAL_DMA_Start_IT+0x4b0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d027      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a6b      	ldr	r2, [pc, #428]	; (8006390 <HAL_DMA_Start_IT+0x4b4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d022      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6a      	ldr	r2, [pc, #424]	; (8006394 <HAL_DMA_Start_IT+0x4b8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d01d      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a68      	ldr	r2, [pc, #416]	; (8006398 <HAL_DMA_Start_IT+0x4bc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d018      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a67      	ldr	r2, [pc, #412]	; (800639c <HAL_DMA_Start_IT+0x4c0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d013      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a65      	ldr	r2, [pc, #404]	; (80063a0 <HAL_DMA_Start_IT+0x4c4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00e      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a64      	ldr	r2, [pc, #400]	; (80063a4 <HAL_DMA_Start_IT+0x4c8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d009      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a62      	ldr	r2, [pc, #392]	; (80063a8 <HAL_DMA_Start_IT+0x4cc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d004      	beq.n	800622c <HAL_DMA_Start_IT+0x350>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a61      	ldr	r2, [pc, #388]	; (80063ac <HAL_DMA_Start_IT+0x4d0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d101      	bne.n	8006230 <HAL_DMA_Start_IT+0x354>
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <HAL_DMA_Start_IT+0x356>
 8006230:	2300      	movs	r3, #0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01a      	beq.n	800626c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006252:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800626a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a37      	ldr	r2, [pc, #220]	; (8006350 <HAL_DMA_Start_IT+0x474>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d04a      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a36      	ldr	r2, [pc, #216]	; (8006354 <HAL_DMA_Start_IT+0x478>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d045      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a34      	ldr	r2, [pc, #208]	; (8006358 <HAL_DMA_Start_IT+0x47c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d040      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a33      	ldr	r2, [pc, #204]	; (800635c <HAL_DMA_Start_IT+0x480>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d03b      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a31      	ldr	r2, [pc, #196]	; (8006360 <HAL_DMA_Start_IT+0x484>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d036      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a30      	ldr	r2, [pc, #192]	; (8006364 <HAL_DMA_Start_IT+0x488>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d031      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2e      	ldr	r2, [pc, #184]	; (8006368 <HAL_DMA_Start_IT+0x48c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d02c      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a2d      	ldr	r2, [pc, #180]	; (800636c <HAL_DMA_Start_IT+0x490>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d027      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2b      	ldr	r2, [pc, #172]	; (8006370 <HAL_DMA_Start_IT+0x494>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d022      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2a      	ldr	r2, [pc, #168]	; (8006374 <HAL_DMA_Start_IT+0x498>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d01d      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a28      	ldr	r2, [pc, #160]	; (8006378 <HAL_DMA_Start_IT+0x49c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d018      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a27      	ldr	r2, [pc, #156]	; (800637c <HAL_DMA_Start_IT+0x4a0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d013      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a25      	ldr	r2, [pc, #148]	; (8006380 <HAL_DMA_Start_IT+0x4a4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00e      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a24      	ldr	r2, [pc, #144]	; (8006384 <HAL_DMA_Start_IT+0x4a8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d009      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a22      	ldr	r2, [pc, #136]	; (8006388 <HAL_DMA_Start_IT+0x4ac>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <HAL_DMA_Start_IT+0x430>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a21      	ldr	r2, [pc, #132]	; (800638c <HAL_DMA_Start_IT+0x4b0>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d108      	bne.n	800631e <HAL_DMA_Start_IT+0x442>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	e012      	b.n	8006344 <HAL_DMA_Start_IT+0x468>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0201 	orr.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e009      	b.n	8006344 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006336:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006344:	7dfb      	ldrb	r3, [r7, #23]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40020010 	.word	0x40020010
 8006354:	40020028 	.word	0x40020028
 8006358:	40020040 	.word	0x40020040
 800635c:	40020058 	.word	0x40020058
 8006360:	40020070 	.word	0x40020070
 8006364:	40020088 	.word	0x40020088
 8006368:	400200a0 	.word	0x400200a0
 800636c:	400200b8 	.word	0x400200b8
 8006370:	40020410 	.word	0x40020410
 8006374:	40020428 	.word	0x40020428
 8006378:	40020440 	.word	0x40020440
 800637c:	40020458 	.word	0x40020458
 8006380:	40020470 	.word	0x40020470
 8006384:	40020488 	.word	0x40020488
 8006388:	400204a0 	.word	0x400204a0
 800638c:	400204b8 	.word	0x400204b8
 8006390:	58025408 	.word	0x58025408
 8006394:	5802541c 	.word	0x5802541c
 8006398:	58025430 	.word	0x58025430
 800639c:	58025444 	.word	0x58025444
 80063a0:	58025458 	.word	0x58025458
 80063a4:	5802546c 	.word	0x5802546c
 80063a8:	58025480 	.word	0x58025480
 80063ac:	58025494 	.word	0x58025494

080063b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80063b8:	f7fe ff32 	bl	8005220 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e2dc      	b.n	8006982 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d008      	beq.n	80063e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2280      	movs	r2, #128	; 0x80
 80063d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e2cd      	b.n	8006982 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a76      	ldr	r2, [pc, #472]	; (80065c4 <HAL_DMA_Abort+0x214>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d04a      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a74      	ldr	r2, [pc, #464]	; (80065c8 <HAL_DMA_Abort+0x218>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d045      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a73      	ldr	r2, [pc, #460]	; (80065cc <HAL_DMA_Abort+0x21c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d040      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a71      	ldr	r2, [pc, #452]	; (80065d0 <HAL_DMA_Abort+0x220>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d03b      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a70      	ldr	r2, [pc, #448]	; (80065d4 <HAL_DMA_Abort+0x224>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d036      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a6e      	ldr	r2, [pc, #440]	; (80065d8 <HAL_DMA_Abort+0x228>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d031      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a6d      	ldr	r2, [pc, #436]	; (80065dc <HAL_DMA_Abort+0x22c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d02c      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a6b      	ldr	r2, [pc, #428]	; (80065e0 <HAL_DMA_Abort+0x230>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d027      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6a      	ldr	r2, [pc, #424]	; (80065e4 <HAL_DMA_Abort+0x234>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d022      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a68      	ldr	r2, [pc, #416]	; (80065e8 <HAL_DMA_Abort+0x238>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01d      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a67      	ldr	r2, [pc, #412]	; (80065ec <HAL_DMA_Abort+0x23c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d018      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a65      	ldr	r2, [pc, #404]	; (80065f0 <HAL_DMA_Abort+0x240>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a64      	ldr	r2, [pc, #400]	; (80065f4 <HAL_DMA_Abort+0x244>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00e      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a62      	ldr	r2, [pc, #392]	; (80065f8 <HAL_DMA_Abort+0x248>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d009      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a61      	ldr	r2, [pc, #388]	; (80065fc <HAL_DMA_Abort+0x24c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <HAL_DMA_Abort+0xd6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a5f      	ldr	r2, [pc, #380]	; (8006600 <HAL_DMA_Abort+0x250>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d101      	bne.n	800648a <HAL_DMA_Abort+0xda>
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <HAL_DMA_Abort+0xdc>
 800648a:	2300      	movs	r3, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d013      	beq.n	80064b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 021e 	bic.w	r2, r2, #30
 800649e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695a      	ldr	r2, [r3, #20]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e00a      	b.n	80064ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 020e 	bic.w	r2, r2, #14
 80064c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a3c      	ldr	r2, [pc, #240]	; (80065c4 <HAL_DMA_Abort+0x214>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d072      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a3a      	ldr	r2, [pc, #232]	; (80065c8 <HAL_DMA_Abort+0x218>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d06d      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a39      	ldr	r2, [pc, #228]	; (80065cc <HAL_DMA_Abort+0x21c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d068      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a37      	ldr	r2, [pc, #220]	; (80065d0 <HAL_DMA_Abort+0x220>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d063      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a36      	ldr	r2, [pc, #216]	; (80065d4 <HAL_DMA_Abort+0x224>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d05e      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a34      	ldr	r2, [pc, #208]	; (80065d8 <HAL_DMA_Abort+0x228>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d059      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a33      	ldr	r2, [pc, #204]	; (80065dc <HAL_DMA_Abort+0x22c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d054      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a31      	ldr	r2, [pc, #196]	; (80065e0 <HAL_DMA_Abort+0x230>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d04f      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a30      	ldr	r2, [pc, #192]	; (80065e4 <HAL_DMA_Abort+0x234>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d04a      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a2e      	ldr	r2, [pc, #184]	; (80065e8 <HAL_DMA_Abort+0x238>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d045      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2d      	ldr	r2, [pc, #180]	; (80065ec <HAL_DMA_Abort+0x23c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d040      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2b      	ldr	r2, [pc, #172]	; (80065f0 <HAL_DMA_Abort+0x240>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d03b      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a2a      	ldr	r2, [pc, #168]	; (80065f4 <HAL_DMA_Abort+0x244>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d036      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a28      	ldr	r2, [pc, #160]	; (80065f8 <HAL_DMA_Abort+0x248>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d031      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a27      	ldr	r2, [pc, #156]	; (80065fc <HAL_DMA_Abort+0x24c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d02c      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a25      	ldr	r2, [pc, #148]	; (8006600 <HAL_DMA_Abort+0x250>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d027      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a24      	ldr	r2, [pc, #144]	; (8006604 <HAL_DMA_Abort+0x254>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d022      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a22      	ldr	r2, [pc, #136]	; (8006608 <HAL_DMA_Abort+0x258>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01d      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a21      	ldr	r2, [pc, #132]	; (800660c <HAL_DMA_Abort+0x25c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d018      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1f      	ldr	r2, [pc, #124]	; (8006610 <HAL_DMA_Abort+0x260>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <HAL_DMA_Abort+0x264>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00e      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <HAL_DMA_Abort+0x268>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d009      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1b      	ldr	r2, [pc, #108]	; (800661c <HAL_DMA_Abort+0x26c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d004      	beq.n	80065be <HAL_DMA_Abort+0x20e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a19      	ldr	r2, [pc, #100]	; (8006620 <HAL_DMA_Abort+0x270>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d132      	bne.n	8006624 <HAL_DMA_Abort+0x274>
 80065be:	2301      	movs	r3, #1
 80065c0:	e031      	b.n	8006626 <HAL_DMA_Abort+0x276>
 80065c2:	bf00      	nop
 80065c4:	40020010 	.word	0x40020010
 80065c8:	40020028 	.word	0x40020028
 80065cc:	40020040 	.word	0x40020040
 80065d0:	40020058 	.word	0x40020058
 80065d4:	40020070 	.word	0x40020070
 80065d8:	40020088 	.word	0x40020088
 80065dc:	400200a0 	.word	0x400200a0
 80065e0:	400200b8 	.word	0x400200b8
 80065e4:	40020410 	.word	0x40020410
 80065e8:	40020428 	.word	0x40020428
 80065ec:	40020440 	.word	0x40020440
 80065f0:	40020458 	.word	0x40020458
 80065f4:	40020470 	.word	0x40020470
 80065f8:	40020488 	.word	0x40020488
 80065fc:	400204a0 	.word	0x400204a0
 8006600:	400204b8 	.word	0x400204b8
 8006604:	58025408 	.word	0x58025408
 8006608:	5802541c 	.word	0x5802541c
 800660c:	58025430 	.word	0x58025430
 8006610:	58025444 	.word	0x58025444
 8006614:	58025458 	.word	0x58025458
 8006618:	5802546c 	.word	0x5802546c
 800661c:	58025480 	.word	0x58025480
 8006620:	58025494 	.word	0x58025494
 8006624:	2300      	movs	r3, #0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006638:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a6d      	ldr	r2, [pc, #436]	; (80067f4 <HAL_DMA_Abort+0x444>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d04a      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a6b      	ldr	r2, [pc, #428]	; (80067f8 <HAL_DMA_Abort+0x448>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d045      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a6a      	ldr	r2, [pc, #424]	; (80067fc <HAL_DMA_Abort+0x44c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d040      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a68      	ldr	r2, [pc, #416]	; (8006800 <HAL_DMA_Abort+0x450>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d03b      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a67      	ldr	r2, [pc, #412]	; (8006804 <HAL_DMA_Abort+0x454>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d036      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a65      	ldr	r2, [pc, #404]	; (8006808 <HAL_DMA_Abort+0x458>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d031      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a64      	ldr	r2, [pc, #400]	; (800680c <HAL_DMA_Abort+0x45c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d02c      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a62      	ldr	r2, [pc, #392]	; (8006810 <HAL_DMA_Abort+0x460>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d027      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a61      	ldr	r2, [pc, #388]	; (8006814 <HAL_DMA_Abort+0x464>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d022      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a5f      	ldr	r2, [pc, #380]	; (8006818 <HAL_DMA_Abort+0x468>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01d      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a5e      	ldr	r2, [pc, #376]	; (800681c <HAL_DMA_Abort+0x46c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d018      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a5c      	ldr	r2, [pc, #368]	; (8006820 <HAL_DMA_Abort+0x470>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a5b      	ldr	r2, [pc, #364]	; (8006824 <HAL_DMA_Abort+0x474>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a59      	ldr	r2, [pc, #356]	; (8006828 <HAL_DMA_Abort+0x478>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a58      	ldr	r2, [pc, #352]	; (800682c <HAL_DMA_Abort+0x47c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_DMA_Abort+0x32a>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a56      	ldr	r2, [pc, #344]	; (8006830 <HAL_DMA_Abort+0x480>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d108      	bne.n	80066ec <HAL_DMA_Abort+0x33c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0201 	bic.w	r2, r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	e007      	b.n	80066fc <HAL_DMA_Abort+0x34c>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066fc:	e013      	b.n	8006726 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066fe:	f7fe fd8f 	bl	8005220 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b05      	cmp	r3, #5
 800670a:	d90c      	bls.n	8006726 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2203      	movs	r2, #3
 8006716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e12d      	b.n	8006982 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e5      	bne.n	80066fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a2f      	ldr	r2, [pc, #188]	; (80067f4 <HAL_DMA_Abort+0x444>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d04a      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2d      	ldr	r2, [pc, #180]	; (80067f8 <HAL_DMA_Abort+0x448>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d045      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2c      	ldr	r2, [pc, #176]	; (80067fc <HAL_DMA_Abort+0x44c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d040      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <HAL_DMA_Abort+0x450>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d03b      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a29      	ldr	r2, [pc, #164]	; (8006804 <HAL_DMA_Abort+0x454>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d036      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a27      	ldr	r2, [pc, #156]	; (8006808 <HAL_DMA_Abort+0x458>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d031      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a26      	ldr	r2, [pc, #152]	; (800680c <HAL_DMA_Abort+0x45c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d02c      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a24      	ldr	r2, [pc, #144]	; (8006810 <HAL_DMA_Abort+0x460>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d027      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a23      	ldr	r2, [pc, #140]	; (8006814 <HAL_DMA_Abort+0x464>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d022      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a21      	ldr	r2, [pc, #132]	; (8006818 <HAL_DMA_Abort+0x468>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d01d      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a20      	ldr	r2, [pc, #128]	; (800681c <HAL_DMA_Abort+0x46c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d018      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <HAL_DMA_Abort+0x470>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1d      	ldr	r2, [pc, #116]	; (8006824 <HAL_DMA_Abort+0x474>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1b      	ldr	r2, [pc, #108]	; (8006828 <HAL_DMA_Abort+0x478>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d009      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1a      	ldr	r2, [pc, #104]	; (800682c <HAL_DMA_Abort+0x47c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_DMA_Abort+0x422>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a18      	ldr	r2, [pc, #96]	; (8006830 <HAL_DMA_Abort+0x480>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d101      	bne.n	80067d6 <HAL_DMA_Abort+0x426>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <HAL_DMA_Abort+0x428>
 80067d6:	2300      	movs	r3, #0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d02b      	beq.n	8006834 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	223f      	movs	r2, #63	; 0x3f
 80067ec:	409a      	lsls	r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	609a      	str	r2, [r3, #8]
 80067f2:	e02a      	b.n	800684a <HAL_DMA_Abort+0x49a>
 80067f4:	40020010 	.word	0x40020010
 80067f8:	40020028 	.word	0x40020028
 80067fc:	40020040 	.word	0x40020040
 8006800:	40020058 	.word	0x40020058
 8006804:	40020070 	.word	0x40020070
 8006808:	40020088 	.word	0x40020088
 800680c:	400200a0 	.word	0x400200a0
 8006810:	400200b8 	.word	0x400200b8
 8006814:	40020410 	.word	0x40020410
 8006818:	40020428 	.word	0x40020428
 800681c:	40020440 	.word	0x40020440
 8006820:	40020458 	.word	0x40020458
 8006824:	40020470 	.word	0x40020470
 8006828:	40020488 	.word	0x40020488
 800682c:	400204a0 	.word	0x400204a0
 8006830:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006838:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2201      	movs	r2, #1
 8006844:	409a      	lsls	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a4f      	ldr	r2, [pc, #316]	; (800698c <HAL_DMA_Abort+0x5dc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d072      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a4d      	ldr	r2, [pc, #308]	; (8006990 <HAL_DMA_Abort+0x5e0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d06d      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a4c      	ldr	r2, [pc, #304]	; (8006994 <HAL_DMA_Abort+0x5e4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d068      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a4a      	ldr	r2, [pc, #296]	; (8006998 <HAL_DMA_Abort+0x5e8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d063      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a49      	ldr	r2, [pc, #292]	; (800699c <HAL_DMA_Abort+0x5ec>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d05e      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a47      	ldr	r2, [pc, #284]	; (80069a0 <HAL_DMA_Abort+0x5f0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d059      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a46      	ldr	r2, [pc, #280]	; (80069a4 <HAL_DMA_Abort+0x5f4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d054      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a44      	ldr	r2, [pc, #272]	; (80069a8 <HAL_DMA_Abort+0x5f8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d04f      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a43      	ldr	r2, [pc, #268]	; (80069ac <HAL_DMA_Abort+0x5fc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d04a      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a41      	ldr	r2, [pc, #260]	; (80069b0 <HAL_DMA_Abort+0x600>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d045      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a40      	ldr	r2, [pc, #256]	; (80069b4 <HAL_DMA_Abort+0x604>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d040      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a3e      	ldr	r2, [pc, #248]	; (80069b8 <HAL_DMA_Abort+0x608>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d03b      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a3d      	ldr	r2, [pc, #244]	; (80069bc <HAL_DMA_Abort+0x60c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d036      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a3b      	ldr	r2, [pc, #236]	; (80069c0 <HAL_DMA_Abort+0x610>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d031      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a3a      	ldr	r2, [pc, #232]	; (80069c4 <HAL_DMA_Abort+0x614>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d02c      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a38      	ldr	r2, [pc, #224]	; (80069c8 <HAL_DMA_Abort+0x618>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d027      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a37      	ldr	r2, [pc, #220]	; (80069cc <HAL_DMA_Abort+0x61c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d022      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a35      	ldr	r2, [pc, #212]	; (80069d0 <HAL_DMA_Abort+0x620>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01d      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a34      	ldr	r2, [pc, #208]	; (80069d4 <HAL_DMA_Abort+0x624>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d018      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a32      	ldr	r2, [pc, #200]	; (80069d8 <HAL_DMA_Abort+0x628>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d013      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a31      	ldr	r2, [pc, #196]	; (80069dc <HAL_DMA_Abort+0x62c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00e      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a2f      	ldr	r2, [pc, #188]	; (80069e0 <HAL_DMA_Abort+0x630>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d009      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a2e      	ldr	r2, [pc, #184]	; (80069e4 <HAL_DMA_Abort+0x634>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d004      	beq.n	800693a <HAL_DMA_Abort+0x58a>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2c      	ldr	r2, [pc, #176]	; (80069e8 <HAL_DMA_Abort+0x638>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d101      	bne.n	800693e <HAL_DMA_Abort+0x58e>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <HAL_DMA_Abort+0x590>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d015      	beq.n	8006970 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800694c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00c      	beq.n	8006970 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006964:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800696e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40020010 	.word	0x40020010
 8006990:	40020028 	.word	0x40020028
 8006994:	40020040 	.word	0x40020040
 8006998:	40020058 	.word	0x40020058
 800699c:	40020070 	.word	0x40020070
 80069a0:	40020088 	.word	0x40020088
 80069a4:	400200a0 	.word	0x400200a0
 80069a8:	400200b8 	.word	0x400200b8
 80069ac:	40020410 	.word	0x40020410
 80069b0:	40020428 	.word	0x40020428
 80069b4:	40020440 	.word	0x40020440
 80069b8:	40020458 	.word	0x40020458
 80069bc:	40020470 	.word	0x40020470
 80069c0:	40020488 	.word	0x40020488
 80069c4:	400204a0 	.word	0x400204a0
 80069c8:	400204b8 	.word	0x400204b8
 80069cc:	58025408 	.word	0x58025408
 80069d0:	5802541c 	.word	0x5802541c
 80069d4:	58025430 	.word	0x58025430
 80069d8:	58025444 	.word	0x58025444
 80069dc:	58025458 	.word	0x58025458
 80069e0:	5802546c 	.word	0x5802546c
 80069e4:	58025480 	.word	0x58025480
 80069e8:	58025494 	.word	0x58025494

080069ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e237      	b.n	8006e6e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d004      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2280      	movs	r2, #128	; 0x80
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e22c      	b.n	8006e6e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a5c      	ldr	r2, [pc, #368]	; (8006b8c <HAL_DMA_Abort_IT+0x1a0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d04a      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a5b      	ldr	r2, [pc, #364]	; (8006b90 <HAL_DMA_Abort_IT+0x1a4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d045      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a59      	ldr	r2, [pc, #356]	; (8006b94 <HAL_DMA_Abort_IT+0x1a8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d040      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a58      	ldr	r2, [pc, #352]	; (8006b98 <HAL_DMA_Abort_IT+0x1ac>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d03b      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a56      	ldr	r2, [pc, #344]	; (8006b9c <HAL_DMA_Abort_IT+0x1b0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d036      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a55      	ldr	r2, [pc, #340]	; (8006ba0 <HAL_DMA_Abort_IT+0x1b4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d031      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a53      	ldr	r2, [pc, #332]	; (8006ba4 <HAL_DMA_Abort_IT+0x1b8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d02c      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a52      	ldr	r2, [pc, #328]	; (8006ba8 <HAL_DMA_Abort_IT+0x1bc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d027      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a50      	ldr	r2, [pc, #320]	; (8006bac <HAL_DMA_Abort_IT+0x1c0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d022      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a4f      	ldr	r2, [pc, #316]	; (8006bb0 <HAL_DMA_Abort_IT+0x1c4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d01d      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a4d      	ldr	r2, [pc, #308]	; (8006bb4 <HAL_DMA_Abort_IT+0x1c8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d018      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a4c      	ldr	r2, [pc, #304]	; (8006bb8 <HAL_DMA_Abort_IT+0x1cc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a4a      	ldr	r2, [pc, #296]	; (8006bbc <HAL_DMA_Abort_IT+0x1d0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00e      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a49      	ldr	r2, [pc, #292]	; (8006bc0 <HAL_DMA_Abort_IT+0x1d4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a47      	ldr	r2, [pc, #284]	; (8006bc4 <HAL_DMA_Abort_IT+0x1d8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0xc8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a46      	ldr	r2, [pc, #280]	; (8006bc8 <HAL_DMA_Abort_IT+0x1dc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d101      	bne.n	8006ab8 <HAL_DMA_Abort_IT+0xcc>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <HAL_DMA_Abort_IT+0xce>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8086 	beq.w	8006bcc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a2f      	ldr	r2, [pc, #188]	; (8006b8c <HAL_DMA_Abort_IT+0x1a0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d04a      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a2e      	ldr	r2, [pc, #184]	; (8006b90 <HAL_DMA_Abort_IT+0x1a4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d045      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <HAL_DMA_Abort_IT+0x1a8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d040      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2b      	ldr	r2, [pc, #172]	; (8006b98 <HAL_DMA_Abort_IT+0x1ac>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d03b      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a29      	ldr	r2, [pc, #164]	; (8006b9c <HAL_DMA_Abort_IT+0x1b0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d036      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a28      	ldr	r2, [pc, #160]	; (8006ba0 <HAL_DMA_Abort_IT+0x1b4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d031      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a26      	ldr	r2, [pc, #152]	; (8006ba4 <HAL_DMA_Abort_IT+0x1b8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d02c      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a25      	ldr	r2, [pc, #148]	; (8006ba8 <HAL_DMA_Abort_IT+0x1bc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d027      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a23      	ldr	r2, [pc, #140]	; (8006bac <HAL_DMA_Abort_IT+0x1c0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d022      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a22      	ldr	r2, [pc, #136]	; (8006bb0 <HAL_DMA_Abort_IT+0x1c4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d01d      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a20      	ldr	r2, [pc, #128]	; (8006bb4 <HAL_DMA_Abort_IT+0x1c8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d018      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <HAL_DMA_Abort_IT+0x1cc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d013      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1d      	ldr	r2, [pc, #116]	; (8006bbc <HAL_DMA_Abort_IT+0x1d0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00e      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a1c      	ldr	r2, [pc, #112]	; (8006bc0 <HAL_DMA_Abort_IT+0x1d4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d009      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <HAL_DMA_Abort_IT+0x1d8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d004      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x17c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <HAL_DMA_Abort_IT+0x1dc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d108      	bne.n	8006b7a <HAL_DMA_Abort_IT+0x18e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0201 	bic.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	e178      	b.n	8006e6c <HAL_DMA_Abort_IT+0x480>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0201 	bic.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e16f      	b.n	8006e6c <HAL_DMA_Abort_IT+0x480>
 8006b8c:	40020010 	.word	0x40020010
 8006b90:	40020028 	.word	0x40020028
 8006b94:	40020040 	.word	0x40020040
 8006b98:	40020058 	.word	0x40020058
 8006b9c:	40020070 	.word	0x40020070
 8006ba0:	40020088 	.word	0x40020088
 8006ba4:	400200a0 	.word	0x400200a0
 8006ba8:	400200b8 	.word	0x400200b8
 8006bac:	40020410 	.word	0x40020410
 8006bb0:	40020428 	.word	0x40020428
 8006bb4:	40020440 	.word	0x40020440
 8006bb8:	40020458 	.word	0x40020458
 8006bbc:	40020470 	.word	0x40020470
 8006bc0:	40020488 	.word	0x40020488
 8006bc4:	400204a0 	.word	0x400204a0
 8006bc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 020e 	bic.w	r2, r2, #14
 8006bda:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a6c      	ldr	r2, [pc, #432]	; (8006d94 <HAL_DMA_Abort_IT+0x3a8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d04a      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a6b      	ldr	r2, [pc, #428]	; (8006d98 <HAL_DMA_Abort_IT+0x3ac>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d045      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a69      	ldr	r2, [pc, #420]	; (8006d9c <HAL_DMA_Abort_IT+0x3b0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d040      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a68      	ldr	r2, [pc, #416]	; (8006da0 <HAL_DMA_Abort_IT+0x3b4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d03b      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a66      	ldr	r2, [pc, #408]	; (8006da4 <HAL_DMA_Abort_IT+0x3b8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d036      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a65      	ldr	r2, [pc, #404]	; (8006da8 <HAL_DMA_Abort_IT+0x3bc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d031      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a63      	ldr	r2, [pc, #396]	; (8006dac <HAL_DMA_Abort_IT+0x3c0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d02c      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a62      	ldr	r2, [pc, #392]	; (8006db0 <HAL_DMA_Abort_IT+0x3c4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d027      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a60      	ldr	r2, [pc, #384]	; (8006db4 <HAL_DMA_Abort_IT+0x3c8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d022      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a5f      	ldr	r2, [pc, #380]	; (8006db8 <HAL_DMA_Abort_IT+0x3cc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01d      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a5d      	ldr	r2, [pc, #372]	; (8006dbc <HAL_DMA_Abort_IT+0x3d0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a5c      	ldr	r2, [pc, #368]	; (8006dc0 <HAL_DMA_Abort_IT+0x3d4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a5a      	ldr	r2, [pc, #360]	; (8006dc4 <HAL_DMA_Abort_IT+0x3d8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a59      	ldr	r2, [pc, #356]	; (8006dc8 <HAL_DMA_Abort_IT+0x3dc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a57      	ldr	r2, [pc, #348]	; (8006dcc <HAL_DMA_Abort_IT+0x3e0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <HAL_DMA_Abort_IT+0x290>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a56      	ldr	r2, [pc, #344]	; (8006dd0 <HAL_DMA_Abort_IT+0x3e4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d108      	bne.n	8006c8e <HAL_DMA_Abort_IT+0x2a2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0201 	bic.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e007      	b.n	8006c9e <HAL_DMA_Abort_IT+0x2b2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a3c      	ldr	r2, [pc, #240]	; (8006d94 <HAL_DMA_Abort_IT+0x3a8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d072      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a3a      	ldr	r2, [pc, #232]	; (8006d98 <HAL_DMA_Abort_IT+0x3ac>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d06d      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a39      	ldr	r2, [pc, #228]	; (8006d9c <HAL_DMA_Abort_IT+0x3b0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d068      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a37      	ldr	r2, [pc, #220]	; (8006da0 <HAL_DMA_Abort_IT+0x3b4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d063      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a36      	ldr	r2, [pc, #216]	; (8006da4 <HAL_DMA_Abort_IT+0x3b8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d05e      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a34      	ldr	r2, [pc, #208]	; (8006da8 <HAL_DMA_Abort_IT+0x3bc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d059      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a33      	ldr	r2, [pc, #204]	; (8006dac <HAL_DMA_Abort_IT+0x3c0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d054      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a31      	ldr	r2, [pc, #196]	; (8006db0 <HAL_DMA_Abort_IT+0x3c4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d04f      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a30      	ldr	r2, [pc, #192]	; (8006db4 <HAL_DMA_Abort_IT+0x3c8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d04a      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a2e      	ldr	r2, [pc, #184]	; (8006db8 <HAL_DMA_Abort_IT+0x3cc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d045      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2d      	ldr	r2, [pc, #180]	; (8006dbc <HAL_DMA_Abort_IT+0x3d0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d040      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2b      	ldr	r2, [pc, #172]	; (8006dc0 <HAL_DMA_Abort_IT+0x3d4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d03b      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2a      	ldr	r2, [pc, #168]	; (8006dc4 <HAL_DMA_Abort_IT+0x3d8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d036      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a28      	ldr	r2, [pc, #160]	; (8006dc8 <HAL_DMA_Abort_IT+0x3dc>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d031      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a27      	ldr	r2, [pc, #156]	; (8006dcc <HAL_DMA_Abort_IT+0x3e0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d02c      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a25      	ldr	r2, [pc, #148]	; (8006dd0 <HAL_DMA_Abort_IT+0x3e4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d027      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a24      	ldr	r2, [pc, #144]	; (8006dd4 <HAL_DMA_Abort_IT+0x3e8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d022      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <HAL_DMA_Abort_IT+0x3ec>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d01d      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <HAL_DMA_Abort_IT+0x3f0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d018      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <HAL_DMA_Abort_IT+0x3f4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d013      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <HAL_DMA_Abort_IT+0x3f8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00e      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <HAL_DMA_Abort_IT+0x3fc>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d009      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <HAL_DMA_Abort_IT+0x400>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d004      	beq.n	8006d8e <HAL_DMA_Abort_IT+0x3a2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a19      	ldr	r2, [pc, #100]	; (8006df0 <HAL_DMA_Abort_IT+0x404>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d132      	bne.n	8006df4 <HAL_DMA_Abort_IT+0x408>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e031      	b.n	8006df6 <HAL_DMA_Abort_IT+0x40a>
 8006d92:	bf00      	nop
 8006d94:	40020010 	.word	0x40020010
 8006d98:	40020028 	.word	0x40020028
 8006d9c:	40020040 	.word	0x40020040
 8006da0:	40020058 	.word	0x40020058
 8006da4:	40020070 	.word	0x40020070
 8006da8:	40020088 	.word	0x40020088
 8006dac:	400200a0 	.word	0x400200a0
 8006db0:	400200b8 	.word	0x400200b8
 8006db4:	40020410 	.word	0x40020410
 8006db8:	40020428 	.word	0x40020428
 8006dbc:	40020440 	.word	0x40020440
 8006dc0:	40020458 	.word	0x40020458
 8006dc4:	40020470 	.word	0x40020470
 8006dc8:	40020488 	.word	0x40020488
 8006dcc:	400204a0 	.word	0x400204a0
 8006dd0:	400204b8 	.word	0x400204b8
 8006dd4:	58025408 	.word	0x58025408
 8006dd8:	5802541c 	.word	0x5802541c
 8006ddc:	58025430 	.word	0x58025430
 8006de0:	58025444 	.word	0x58025444
 8006de4:	58025458 	.word	0x58025458
 8006de8:	5802546c 	.word	0x5802546c
 8006dec:	58025480 	.word	0x58025480
 8006df0:	58025494 	.word	0x58025494
 8006df4:	2300      	movs	r3, #0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d028      	beq.n	8006e4c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e08:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	2201      	movs	r2, #1
 8006e1a:	409a      	lsls	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e28:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e40:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e4a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop

08006e78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	; 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e84:	4b67      	ldr	r3, [pc, #412]	; (8007024 <HAL_DMA_IRQHandler+0x1ac>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a67      	ldr	r2, [pc, #412]	; (8007028 <HAL_DMA_IRQHandler+0x1b0>)
 8006e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8e:	0a9b      	lsrs	r3, r3, #10
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a5f      	ldr	r2, [pc, #380]	; (800702c <HAL_DMA_IRQHandler+0x1b4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d04a      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a5d      	ldr	r2, [pc, #372]	; (8007030 <HAL_DMA_IRQHandler+0x1b8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d045      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a5c      	ldr	r2, [pc, #368]	; (8007034 <HAL_DMA_IRQHandler+0x1bc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d040      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a5a      	ldr	r2, [pc, #360]	; (8007038 <HAL_DMA_IRQHandler+0x1c0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d03b      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a59      	ldr	r2, [pc, #356]	; (800703c <HAL_DMA_IRQHandler+0x1c4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d036      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a57      	ldr	r2, [pc, #348]	; (8007040 <HAL_DMA_IRQHandler+0x1c8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d031      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a56      	ldr	r2, [pc, #344]	; (8007044 <HAL_DMA_IRQHandler+0x1cc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d02c      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a54      	ldr	r2, [pc, #336]	; (8007048 <HAL_DMA_IRQHandler+0x1d0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d027      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a53      	ldr	r2, [pc, #332]	; (800704c <HAL_DMA_IRQHandler+0x1d4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d022      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a51      	ldr	r2, [pc, #324]	; (8007050 <HAL_DMA_IRQHandler+0x1d8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d01d      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a50      	ldr	r2, [pc, #320]	; (8007054 <HAL_DMA_IRQHandler+0x1dc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d018      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a4e      	ldr	r2, [pc, #312]	; (8007058 <HAL_DMA_IRQHandler+0x1e0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a4d      	ldr	r2, [pc, #308]	; (800705c <HAL_DMA_IRQHandler+0x1e4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00e      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a4b      	ldr	r2, [pc, #300]	; (8007060 <HAL_DMA_IRQHandler+0x1e8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d009      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a4a      	ldr	r2, [pc, #296]	; (8007064 <HAL_DMA_IRQHandler+0x1ec>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d004      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xd2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a48      	ldr	r2, [pc, #288]	; (8007068 <HAL_DMA_IRQHandler+0x1f0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d101      	bne.n	8006f4e <HAL_DMA_IRQHandler+0xd6>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <HAL_DMA_IRQHandler+0xd8>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 842b 	beq.w	80077ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5a:	f003 031f 	and.w	r3, r3, #31
 8006f5e:	2208      	movs	r2, #8
 8006f60:	409a      	lsls	r2, r3
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	4013      	ands	r3, r2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 80a2 	beq.w	80070b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a2e      	ldr	r2, [pc, #184]	; (800702c <HAL_DMA_IRQHandler+0x1b4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d04a      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a2d      	ldr	r2, [pc, #180]	; (8007030 <HAL_DMA_IRQHandler+0x1b8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d045      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a2b      	ldr	r2, [pc, #172]	; (8007034 <HAL_DMA_IRQHandler+0x1bc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d040      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a2a      	ldr	r2, [pc, #168]	; (8007038 <HAL_DMA_IRQHandler+0x1c0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d03b      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a28      	ldr	r2, [pc, #160]	; (800703c <HAL_DMA_IRQHandler+0x1c4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d036      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a27      	ldr	r2, [pc, #156]	; (8007040 <HAL_DMA_IRQHandler+0x1c8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d031      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a25      	ldr	r2, [pc, #148]	; (8007044 <HAL_DMA_IRQHandler+0x1cc>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d02c      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a24      	ldr	r2, [pc, #144]	; (8007048 <HAL_DMA_IRQHandler+0x1d0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d027      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a22      	ldr	r2, [pc, #136]	; (800704c <HAL_DMA_IRQHandler+0x1d4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d022      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a21      	ldr	r2, [pc, #132]	; (8007050 <HAL_DMA_IRQHandler+0x1d8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d01d      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a1f      	ldr	r2, [pc, #124]	; (8007054 <HAL_DMA_IRQHandler+0x1dc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d018      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a1e      	ldr	r2, [pc, #120]	; (8007058 <HAL_DMA_IRQHandler+0x1e0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d013      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1c      	ldr	r2, [pc, #112]	; (800705c <HAL_DMA_IRQHandler+0x1e4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00e      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1b      	ldr	r2, [pc, #108]	; (8007060 <HAL_DMA_IRQHandler+0x1e8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d009      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a19      	ldr	r2, [pc, #100]	; (8007064 <HAL_DMA_IRQHandler+0x1ec>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d004      	beq.n	800700c <HAL_DMA_IRQHandler+0x194>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a18      	ldr	r2, [pc, #96]	; (8007068 <HAL_DMA_IRQHandler+0x1f0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d12f      	bne.n	800706c <HAL_DMA_IRQHandler+0x1f4>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	bf14      	ite	ne
 800701a:	2301      	movne	r3, #1
 800701c:	2300      	moveq	r3, #0
 800701e:	b2db      	uxtb	r3, r3
 8007020:	e02e      	b.n	8007080 <HAL_DMA_IRQHandler+0x208>
 8007022:	bf00      	nop
 8007024:	240001c0 	.word	0x240001c0
 8007028:	1b4e81b5 	.word	0x1b4e81b5
 800702c:	40020010 	.word	0x40020010
 8007030:	40020028 	.word	0x40020028
 8007034:	40020040 	.word	0x40020040
 8007038:	40020058 	.word	0x40020058
 800703c:	40020070 	.word	0x40020070
 8007040:	40020088 	.word	0x40020088
 8007044:	400200a0 	.word	0x400200a0
 8007048:	400200b8 	.word	0x400200b8
 800704c:	40020410 	.word	0x40020410
 8007050:	40020428 	.word	0x40020428
 8007054:	40020440 	.word	0x40020440
 8007058:	40020458 	.word	0x40020458
 800705c:	40020470 	.word	0x40020470
 8007060:	40020488 	.word	0x40020488
 8007064:	400204a0 	.word	0x400204a0
 8007068:	400204b8 	.word	0x400204b8
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b00      	cmp	r3, #0
 8007078:	bf14      	ite	ne
 800707a:	2301      	movne	r3, #1
 800707c:	2300      	moveq	r3, #0
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d015      	beq.n	80070b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0204 	bic.w	r2, r2, #4
 8007092:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	2208      	movs	r2, #8
 800709e:	409a      	lsls	r2, r3
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a8:	f043 0201 	orr.w	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	fa22 f303 	lsr.w	r3, r2, r3
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d06e      	beq.n	80071a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a69      	ldr	r2, [pc, #420]	; (8007270 <HAL_DMA_IRQHandler+0x3f8>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d04a      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a67      	ldr	r2, [pc, #412]	; (8007274 <HAL_DMA_IRQHandler+0x3fc>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d045      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a66      	ldr	r2, [pc, #408]	; (8007278 <HAL_DMA_IRQHandler+0x400>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d040      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a64      	ldr	r2, [pc, #400]	; (800727c <HAL_DMA_IRQHandler+0x404>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d03b      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a63      	ldr	r2, [pc, #396]	; (8007280 <HAL_DMA_IRQHandler+0x408>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d036      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a61      	ldr	r2, [pc, #388]	; (8007284 <HAL_DMA_IRQHandler+0x40c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d031      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a60      	ldr	r2, [pc, #384]	; (8007288 <HAL_DMA_IRQHandler+0x410>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d02c      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a5e      	ldr	r2, [pc, #376]	; (800728c <HAL_DMA_IRQHandler+0x414>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d027      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a5d      	ldr	r2, [pc, #372]	; (8007290 <HAL_DMA_IRQHandler+0x418>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d022      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a5b      	ldr	r2, [pc, #364]	; (8007294 <HAL_DMA_IRQHandler+0x41c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01d      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a5a      	ldr	r2, [pc, #360]	; (8007298 <HAL_DMA_IRQHandler+0x420>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d018      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a58      	ldr	r2, [pc, #352]	; (800729c <HAL_DMA_IRQHandler+0x424>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d013      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a57      	ldr	r2, [pc, #348]	; (80072a0 <HAL_DMA_IRQHandler+0x428>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00e      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a55      	ldr	r2, [pc, #340]	; (80072a4 <HAL_DMA_IRQHandler+0x42c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d009      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a54      	ldr	r2, [pc, #336]	; (80072a8 <HAL_DMA_IRQHandler+0x430>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d004      	beq.n	8007166 <HAL_DMA_IRQHandler+0x2ee>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a52      	ldr	r2, [pc, #328]	; (80072ac <HAL_DMA_IRQHandler+0x434>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d10a      	bne.n	800717c <HAL_DMA_IRQHandler+0x304>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	bf14      	ite	ne
 8007174:	2301      	movne	r3, #1
 8007176:	2300      	moveq	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	e003      	b.n	8007184 <HAL_DMA_IRQHandler+0x30c>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2300      	movs	r3, #0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00d      	beq.n	80071a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718c:	f003 031f 	and.w	r3, r3, #31
 8007190:	2201      	movs	r2, #1
 8007192:	409a      	lsls	r2, r3
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719c:	f043 0202 	orr.w	r2, r3, #2
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	2204      	movs	r2, #4
 80071ae:	409a      	lsls	r2, r3
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	4013      	ands	r3, r2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 808f 	beq.w	80072d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a2c      	ldr	r2, [pc, #176]	; (8007270 <HAL_DMA_IRQHandler+0x3f8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d04a      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a2a      	ldr	r2, [pc, #168]	; (8007274 <HAL_DMA_IRQHandler+0x3fc>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d045      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a29      	ldr	r2, [pc, #164]	; (8007278 <HAL_DMA_IRQHandler+0x400>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d040      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a27      	ldr	r2, [pc, #156]	; (800727c <HAL_DMA_IRQHandler+0x404>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d03b      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a26      	ldr	r2, [pc, #152]	; (8007280 <HAL_DMA_IRQHandler+0x408>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d036      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a24      	ldr	r2, [pc, #144]	; (8007284 <HAL_DMA_IRQHandler+0x40c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d031      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a23      	ldr	r2, [pc, #140]	; (8007288 <HAL_DMA_IRQHandler+0x410>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d02c      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a21      	ldr	r2, [pc, #132]	; (800728c <HAL_DMA_IRQHandler+0x414>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d027      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a20      	ldr	r2, [pc, #128]	; (8007290 <HAL_DMA_IRQHandler+0x418>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d022      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1e      	ldr	r2, [pc, #120]	; (8007294 <HAL_DMA_IRQHandler+0x41c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d01d      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a1d      	ldr	r2, [pc, #116]	; (8007298 <HAL_DMA_IRQHandler+0x420>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d018      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1b      	ldr	r2, [pc, #108]	; (800729c <HAL_DMA_IRQHandler+0x424>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d013      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1a      	ldr	r2, [pc, #104]	; (80072a0 <HAL_DMA_IRQHandler+0x428>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00e      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <HAL_DMA_IRQHandler+0x42c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d009      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <HAL_DMA_IRQHandler+0x430>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d004      	beq.n	800725a <HAL_DMA_IRQHandler+0x3e2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a15      	ldr	r2, [pc, #84]	; (80072ac <HAL_DMA_IRQHandler+0x434>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d12a      	bne.n	80072b0 <HAL_DMA_IRQHandler+0x438>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	bf14      	ite	ne
 8007268:	2301      	movne	r3, #1
 800726a:	2300      	moveq	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	e023      	b.n	80072b8 <HAL_DMA_IRQHandler+0x440>
 8007270:	40020010 	.word	0x40020010
 8007274:	40020028 	.word	0x40020028
 8007278:	40020040 	.word	0x40020040
 800727c:	40020058 	.word	0x40020058
 8007280:	40020070 	.word	0x40020070
 8007284:	40020088 	.word	0x40020088
 8007288:	400200a0 	.word	0x400200a0
 800728c:	400200b8 	.word	0x400200b8
 8007290:	40020410 	.word	0x40020410
 8007294:	40020428 	.word	0x40020428
 8007298:	40020440 	.word	0x40020440
 800729c:	40020458 	.word	0x40020458
 80072a0:	40020470 	.word	0x40020470
 80072a4:	40020488 	.word	0x40020488
 80072a8:	400204a0 	.word	0x400204a0
 80072ac:	400204b8 	.word	0x400204b8
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2300      	movs	r3, #0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00d      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	2204      	movs	r2, #4
 80072c6:	409a      	lsls	r2, r3
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d0:	f043 0204 	orr.w	r2, r3, #4
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	2210      	movs	r2, #16
 80072e2:	409a      	lsls	r2, r3
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	4013      	ands	r3, r2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 80a6 	beq.w	800743a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a85      	ldr	r2, [pc, #532]	; (8007508 <HAL_DMA_IRQHandler+0x690>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d04a      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a83      	ldr	r2, [pc, #524]	; (800750c <HAL_DMA_IRQHandler+0x694>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d045      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a82      	ldr	r2, [pc, #520]	; (8007510 <HAL_DMA_IRQHandler+0x698>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d040      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a80      	ldr	r2, [pc, #512]	; (8007514 <HAL_DMA_IRQHandler+0x69c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d03b      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a7f      	ldr	r2, [pc, #508]	; (8007518 <HAL_DMA_IRQHandler+0x6a0>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d036      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a7d      	ldr	r2, [pc, #500]	; (800751c <HAL_DMA_IRQHandler+0x6a4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d031      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a7c      	ldr	r2, [pc, #496]	; (8007520 <HAL_DMA_IRQHandler+0x6a8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d02c      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a7a      	ldr	r2, [pc, #488]	; (8007524 <HAL_DMA_IRQHandler+0x6ac>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d027      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a79      	ldr	r2, [pc, #484]	; (8007528 <HAL_DMA_IRQHandler+0x6b0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d022      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a77      	ldr	r2, [pc, #476]	; (800752c <HAL_DMA_IRQHandler+0x6b4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01d      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a76      	ldr	r2, [pc, #472]	; (8007530 <HAL_DMA_IRQHandler+0x6b8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d018      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a74      	ldr	r2, [pc, #464]	; (8007534 <HAL_DMA_IRQHandler+0x6bc>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d013      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a73      	ldr	r2, [pc, #460]	; (8007538 <HAL_DMA_IRQHandler+0x6c0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00e      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a71      	ldr	r2, [pc, #452]	; (800753c <HAL_DMA_IRQHandler+0x6c4>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d009      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a70      	ldr	r2, [pc, #448]	; (8007540 <HAL_DMA_IRQHandler+0x6c8>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d004      	beq.n	800738e <HAL_DMA_IRQHandler+0x516>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a6e      	ldr	r2, [pc, #440]	; (8007544 <HAL_DMA_IRQHandler+0x6cc>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d10a      	bne.n	80073a4 <HAL_DMA_IRQHandler+0x52c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b00      	cmp	r3, #0
 800739a:	bf14      	ite	ne
 800739c:	2301      	movne	r3, #1
 800739e:	2300      	moveq	r3, #0
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	e009      	b.n	80073b8 <HAL_DMA_IRQHandler+0x540>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bf14      	ite	ne
 80073b2:	2301      	movne	r3, #1
 80073b4:	2300      	moveq	r3, #0
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d03e      	beq.n	800743a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c0:	f003 031f 	and.w	r3, r3, #31
 80073c4:	2210      	movs	r2, #16
 80073c6:	409a      	lsls	r2, r3
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d018      	beq.n	800740c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d108      	bne.n	80073fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d024      	beq.n	800743a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
 80073f8:	e01f      	b.n	800743a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01b      	beq.n	800743a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
 800740a:	e016      	b.n	800743a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007416:	2b00      	cmp	r3, #0
 8007418:	d107      	bne.n	800742a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0208 	bic.w	r2, r2, #8
 8007428:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	2220      	movs	r2, #32
 8007444:	409a      	lsls	r2, r3
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	4013      	ands	r3, r2
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8110 	beq.w	8007670 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a2c      	ldr	r2, [pc, #176]	; (8007508 <HAL_DMA_IRQHandler+0x690>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d04a      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a2b      	ldr	r2, [pc, #172]	; (800750c <HAL_DMA_IRQHandler+0x694>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d045      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a29      	ldr	r2, [pc, #164]	; (8007510 <HAL_DMA_IRQHandler+0x698>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d040      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a28      	ldr	r2, [pc, #160]	; (8007514 <HAL_DMA_IRQHandler+0x69c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d03b      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a26      	ldr	r2, [pc, #152]	; (8007518 <HAL_DMA_IRQHandler+0x6a0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d036      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a25      	ldr	r2, [pc, #148]	; (800751c <HAL_DMA_IRQHandler+0x6a4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d031      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a23      	ldr	r2, [pc, #140]	; (8007520 <HAL_DMA_IRQHandler+0x6a8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d02c      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a22      	ldr	r2, [pc, #136]	; (8007524 <HAL_DMA_IRQHandler+0x6ac>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d027      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a20      	ldr	r2, [pc, #128]	; (8007528 <HAL_DMA_IRQHandler+0x6b0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d022      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a1f      	ldr	r2, [pc, #124]	; (800752c <HAL_DMA_IRQHandler+0x6b4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d01d      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1d      	ldr	r2, [pc, #116]	; (8007530 <HAL_DMA_IRQHandler+0x6b8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d018      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1c      	ldr	r2, [pc, #112]	; (8007534 <HAL_DMA_IRQHandler+0x6bc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d013      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1a      	ldr	r2, [pc, #104]	; (8007538 <HAL_DMA_IRQHandler+0x6c0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00e      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a19      	ldr	r2, [pc, #100]	; (800753c <HAL_DMA_IRQHandler+0x6c4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d009      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a17      	ldr	r2, [pc, #92]	; (8007540 <HAL_DMA_IRQHandler+0x6c8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d004      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x678>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a16      	ldr	r2, [pc, #88]	; (8007544 <HAL_DMA_IRQHandler+0x6cc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d12b      	bne.n	8007548 <HAL_DMA_IRQHandler+0x6d0>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bf14      	ite	ne
 80074fe:	2301      	movne	r3, #1
 8007500:	2300      	moveq	r3, #0
 8007502:	b2db      	uxtb	r3, r3
 8007504:	e02a      	b.n	800755c <HAL_DMA_IRQHandler+0x6e4>
 8007506:	bf00      	nop
 8007508:	40020010 	.word	0x40020010
 800750c:	40020028 	.word	0x40020028
 8007510:	40020040 	.word	0x40020040
 8007514:	40020058 	.word	0x40020058
 8007518:	40020070 	.word	0x40020070
 800751c:	40020088 	.word	0x40020088
 8007520:	400200a0 	.word	0x400200a0
 8007524:	400200b8 	.word	0x400200b8
 8007528:	40020410 	.word	0x40020410
 800752c:	40020428 	.word	0x40020428
 8007530:	40020440 	.word	0x40020440
 8007534:	40020458 	.word	0x40020458
 8007538:	40020470 	.word	0x40020470
 800753c:	40020488 	.word	0x40020488
 8007540:	400204a0 	.word	0x400204a0
 8007544:	400204b8 	.word	0x400204b8
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	bf14      	ite	ne
 8007556:	2301      	movne	r3, #1
 8007558:	2300      	moveq	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8087 	beq.w	8007670 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007566:	f003 031f 	and.w	r3, r3, #31
 800756a:	2220      	movs	r2, #32
 800756c:	409a      	lsls	r2, r3
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b04      	cmp	r3, #4
 800757c:	d139      	bne.n	80075f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0216 	bic.w	r2, r2, #22
 800758c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695a      	ldr	r2, [r3, #20]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800759c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d103      	bne.n	80075ae <HAL_DMA_IRQHandler+0x736>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d007      	beq.n	80075be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0208 	bic.w	r2, r2, #8
 80075bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c2:	f003 031f 	and.w	r3, r3, #31
 80075c6:	223f      	movs	r2, #63	; 0x3f
 80075c8:	409a      	lsls	r2, r3
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 834a 	beq.w	8007c7c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
          }
          return;
 80075f0:	e344      	b.n	8007c7c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d018      	beq.n	8007632 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d108      	bne.n	8007620 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	2b00      	cmp	r3, #0
 8007614:	d02c      	beq.n	8007670 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
 800761e:	e027      	b.n	8007670 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d023      	beq.n	8007670 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	4798      	blx	r3
 8007630:	e01e      	b.n	8007670 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10f      	bne.n	8007660 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0210 	bic.w	r2, r2, #16
 800764e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 8306 	beq.w	8007c86 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 8088 	beq.w	8007798 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2204      	movs	r2, #4
 800768c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a7a      	ldr	r2, [pc, #488]	; (8007880 <HAL_DMA_IRQHandler+0xa08>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d04a      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a79      	ldr	r2, [pc, #484]	; (8007884 <HAL_DMA_IRQHandler+0xa0c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d045      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a77      	ldr	r2, [pc, #476]	; (8007888 <HAL_DMA_IRQHandler+0xa10>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d040      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a76      	ldr	r2, [pc, #472]	; (800788c <HAL_DMA_IRQHandler+0xa14>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d03b      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a74      	ldr	r2, [pc, #464]	; (8007890 <HAL_DMA_IRQHandler+0xa18>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d036      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a73      	ldr	r2, [pc, #460]	; (8007894 <HAL_DMA_IRQHandler+0xa1c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d031      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a71      	ldr	r2, [pc, #452]	; (8007898 <HAL_DMA_IRQHandler+0xa20>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d02c      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a70      	ldr	r2, [pc, #448]	; (800789c <HAL_DMA_IRQHandler+0xa24>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d027      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a6e      	ldr	r2, [pc, #440]	; (80078a0 <HAL_DMA_IRQHandler+0xa28>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d022      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a6d      	ldr	r2, [pc, #436]	; (80078a4 <HAL_DMA_IRQHandler+0xa2c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d01d      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a6b      	ldr	r2, [pc, #428]	; (80078a8 <HAL_DMA_IRQHandler+0xa30>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d018      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a6a      	ldr	r2, [pc, #424]	; (80078ac <HAL_DMA_IRQHandler+0xa34>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a68      	ldr	r2, [pc, #416]	; (80078b0 <HAL_DMA_IRQHandler+0xa38>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00e      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a67      	ldr	r2, [pc, #412]	; (80078b4 <HAL_DMA_IRQHandler+0xa3c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d009      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a65      	ldr	r2, [pc, #404]	; (80078b8 <HAL_DMA_IRQHandler+0xa40>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d004      	beq.n	8007730 <HAL_DMA_IRQHandler+0x8b8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a64      	ldr	r2, [pc, #400]	; (80078bc <HAL_DMA_IRQHandler+0xa44>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d108      	bne.n	8007742 <HAL_DMA_IRQHandler+0x8ca>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0201 	bic.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	e007      	b.n	8007752 <HAL_DMA_IRQHandler+0x8da>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0201 	bic.w	r2, r2, #1
 8007750:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3301      	adds	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775a:	429a      	cmp	r2, r3
 800775c:	d307      	bcc.n	800776e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f2      	bne.n	8007752 <HAL_DMA_IRQHandler+0x8da>
 800776c:	e000      	b.n	8007770 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800776e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d004      	beq.n	8007788 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2203      	movs	r2, #3
 8007782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007786:	e003      	b.n	8007790 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 8272 	beq.w	8007c86 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	4798      	blx	r3
 80077aa:	e26c      	b.n	8007c86 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a43      	ldr	r2, [pc, #268]	; (80078c0 <HAL_DMA_IRQHandler+0xa48>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d022      	beq.n	80077fc <HAL_DMA_IRQHandler+0x984>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a42      	ldr	r2, [pc, #264]	; (80078c4 <HAL_DMA_IRQHandler+0xa4c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d01d      	beq.n	80077fc <HAL_DMA_IRQHandler+0x984>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a40      	ldr	r2, [pc, #256]	; (80078c8 <HAL_DMA_IRQHandler+0xa50>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d018      	beq.n	80077fc <HAL_DMA_IRQHandler+0x984>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a3f      	ldr	r2, [pc, #252]	; (80078cc <HAL_DMA_IRQHandler+0xa54>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d013      	beq.n	80077fc <HAL_DMA_IRQHandler+0x984>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a3d      	ldr	r2, [pc, #244]	; (80078d0 <HAL_DMA_IRQHandler+0xa58>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00e      	beq.n	80077fc <HAL_DMA_IRQHandler+0x984>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a3c      	ldr	r2, [pc, #240]	; (80078d4 <HAL_DMA_IRQHandler+0xa5c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d009      	beq.n	80077fc <HAL_DMA_IRQHandler+0x984>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a3a      	ldr	r2, [pc, #232]	; (80078d8 <HAL_DMA_IRQHandler+0xa60>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <HAL_DMA_IRQHandler+0x984>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a39      	ldr	r2, [pc, #228]	; (80078dc <HAL_DMA_IRQHandler+0xa64>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d101      	bne.n	8007800 <HAL_DMA_IRQHandler+0x988>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <HAL_DMA_IRQHandler+0x98a>
 8007800:	2300      	movs	r3, #0
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 823f 	beq.w	8007c86 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007814:	f003 031f 	and.w	r3, r3, #31
 8007818:	2204      	movs	r2, #4
 800781a:	409a      	lsls	r2, r3
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80cd 	beq.w	80079c0 <HAL_DMA_IRQHandler+0xb48>
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80c7 	beq.w	80079c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	2204      	movs	r2, #4
 800783c:	409a      	lsls	r2, r3
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d049      	beq.n	80078e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d109      	bne.n	800786a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 8210 	beq.w	8007c80 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007868:	e20a      	b.n	8007c80 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 8206 	beq.w	8007c80 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800787c:	e200      	b.n	8007c80 <HAL_DMA_IRQHandler+0xe08>
 800787e:	bf00      	nop
 8007880:	40020010 	.word	0x40020010
 8007884:	40020028 	.word	0x40020028
 8007888:	40020040 	.word	0x40020040
 800788c:	40020058 	.word	0x40020058
 8007890:	40020070 	.word	0x40020070
 8007894:	40020088 	.word	0x40020088
 8007898:	400200a0 	.word	0x400200a0
 800789c:	400200b8 	.word	0x400200b8
 80078a0:	40020410 	.word	0x40020410
 80078a4:	40020428 	.word	0x40020428
 80078a8:	40020440 	.word	0x40020440
 80078ac:	40020458 	.word	0x40020458
 80078b0:	40020470 	.word	0x40020470
 80078b4:	40020488 	.word	0x40020488
 80078b8:	400204a0 	.word	0x400204a0
 80078bc:	400204b8 	.word	0x400204b8
 80078c0:	58025408 	.word	0x58025408
 80078c4:	5802541c 	.word	0x5802541c
 80078c8:	58025430 	.word	0x58025430
 80078cc:	58025444 	.word	0x58025444
 80078d0:	58025458 	.word	0x58025458
 80078d4:	5802546c 	.word	0x5802546c
 80078d8:	58025480 	.word	0x58025480
 80078dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d160      	bne.n	80079ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a7f      	ldr	r2, [pc, #508]	; (8007aec <HAL_DMA_IRQHandler+0xc74>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d04a      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a7d      	ldr	r2, [pc, #500]	; (8007af0 <HAL_DMA_IRQHandler+0xc78>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d045      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a7c      	ldr	r2, [pc, #496]	; (8007af4 <HAL_DMA_IRQHandler+0xc7c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d040      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a7a      	ldr	r2, [pc, #488]	; (8007af8 <HAL_DMA_IRQHandler+0xc80>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d03b      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a79      	ldr	r2, [pc, #484]	; (8007afc <HAL_DMA_IRQHandler+0xc84>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d036      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a77      	ldr	r2, [pc, #476]	; (8007b00 <HAL_DMA_IRQHandler+0xc88>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d031      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a76      	ldr	r2, [pc, #472]	; (8007b04 <HAL_DMA_IRQHandler+0xc8c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d02c      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a74      	ldr	r2, [pc, #464]	; (8007b08 <HAL_DMA_IRQHandler+0xc90>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d027      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a73      	ldr	r2, [pc, #460]	; (8007b0c <HAL_DMA_IRQHandler+0xc94>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d022      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a71      	ldr	r2, [pc, #452]	; (8007b10 <HAL_DMA_IRQHandler+0xc98>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d01d      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a70      	ldr	r2, [pc, #448]	; (8007b14 <HAL_DMA_IRQHandler+0xc9c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d018      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a6e      	ldr	r2, [pc, #440]	; (8007b18 <HAL_DMA_IRQHandler+0xca0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a6d      	ldr	r2, [pc, #436]	; (8007b1c <HAL_DMA_IRQHandler+0xca4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00e      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a6b      	ldr	r2, [pc, #428]	; (8007b20 <HAL_DMA_IRQHandler+0xca8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d009      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a6a      	ldr	r2, [pc, #424]	; (8007b24 <HAL_DMA_IRQHandler+0xcac>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d004      	beq.n	800798a <HAL_DMA_IRQHandler+0xb12>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a68      	ldr	r2, [pc, #416]	; (8007b28 <HAL_DMA_IRQHandler+0xcb0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d108      	bne.n	800799c <HAL_DMA_IRQHandler+0xb24>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0208 	bic.w	r2, r2, #8
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	e007      	b.n	80079ac <HAL_DMA_IRQHandler+0xb34>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0204 	bic.w	r2, r2, #4
 80079aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8165 	beq.w	8007c80 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079be:	e15f      	b.n	8007c80 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c4:	f003 031f 	and.w	r3, r3, #31
 80079c8:	2202      	movs	r2, #2
 80079ca:	409a      	lsls	r2, r3
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80c5 	beq.w	8007b60 <HAL_DMA_IRQHandler+0xce8>
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 80bf 	beq.w	8007b60 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	2202      	movs	r2, #2
 80079ec:	409a      	lsls	r2, r3
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d018      	beq.n	8007a2e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 813a 	beq.w	8007c84 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a18:	e134      	b.n	8007c84 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8130 	beq.w	8007c84 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a2c:	e12a      	b.n	8007c84 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f003 0320 	and.w	r3, r3, #32
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f040 8089 	bne.w	8007b4c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a2b      	ldr	r2, [pc, #172]	; (8007aec <HAL_DMA_IRQHandler+0xc74>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d04a      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a29      	ldr	r2, [pc, #164]	; (8007af0 <HAL_DMA_IRQHandler+0xc78>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d045      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a28      	ldr	r2, [pc, #160]	; (8007af4 <HAL_DMA_IRQHandler+0xc7c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d040      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a26      	ldr	r2, [pc, #152]	; (8007af8 <HAL_DMA_IRQHandler+0xc80>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d03b      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a25      	ldr	r2, [pc, #148]	; (8007afc <HAL_DMA_IRQHandler+0xc84>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d036      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a23      	ldr	r2, [pc, #140]	; (8007b00 <HAL_DMA_IRQHandler+0xc88>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d031      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a22      	ldr	r2, [pc, #136]	; (8007b04 <HAL_DMA_IRQHandler+0xc8c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d02c      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a20      	ldr	r2, [pc, #128]	; (8007b08 <HAL_DMA_IRQHandler+0xc90>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d027      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a1f      	ldr	r2, [pc, #124]	; (8007b0c <HAL_DMA_IRQHandler+0xc94>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d022      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a1d      	ldr	r2, [pc, #116]	; (8007b10 <HAL_DMA_IRQHandler+0xc98>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01d      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a1c      	ldr	r2, [pc, #112]	; (8007b14 <HAL_DMA_IRQHandler+0xc9c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d018      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1a      	ldr	r2, [pc, #104]	; (8007b18 <HAL_DMA_IRQHandler+0xca0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a19      	ldr	r2, [pc, #100]	; (8007b1c <HAL_DMA_IRQHandler+0xca4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00e      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a17      	ldr	r2, [pc, #92]	; (8007b20 <HAL_DMA_IRQHandler+0xca8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d009      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a16      	ldr	r2, [pc, #88]	; (8007b24 <HAL_DMA_IRQHandler+0xcac>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_DMA_IRQHandler+0xc62>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a14      	ldr	r2, [pc, #80]	; (8007b28 <HAL_DMA_IRQHandler+0xcb0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d128      	bne.n	8007b2c <HAL_DMA_IRQHandler+0xcb4>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0214 	bic.w	r2, r2, #20
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	e027      	b.n	8007b3c <HAL_DMA_IRQHandler+0xcc4>
 8007aec:	40020010 	.word	0x40020010
 8007af0:	40020028 	.word	0x40020028
 8007af4:	40020040 	.word	0x40020040
 8007af8:	40020058 	.word	0x40020058
 8007afc:	40020070 	.word	0x40020070
 8007b00:	40020088 	.word	0x40020088
 8007b04:	400200a0 	.word	0x400200a0
 8007b08:	400200b8 	.word	0x400200b8
 8007b0c:	40020410 	.word	0x40020410
 8007b10:	40020428 	.word	0x40020428
 8007b14:	40020440 	.word	0x40020440
 8007b18:	40020458 	.word	0x40020458
 8007b1c:	40020470 	.word	0x40020470
 8007b20:	40020488 	.word	0x40020488
 8007b24:	400204a0 	.word	0x400204a0
 8007b28:	400204b8 	.word	0x400204b8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 020a 	bic.w	r2, r2, #10
 8007b3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 8097 	beq.w	8007c84 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b5e:	e091      	b.n	8007c84 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b64:	f003 031f 	and.w	r3, r3, #31
 8007b68:	2208      	movs	r2, #8
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8088 	beq.w	8007c86 <HAL_DMA_IRQHandler+0xe0e>
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8082 	beq.w	8007c86 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a41      	ldr	r2, [pc, #260]	; (8007c8c <HAL_DMA_IRQHandler+0xe14>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d04a      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a3f      	ldr	r2, [pc, #252]	; (8007c90 <HAL_DMA_IRQHandler+0xe18>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d045      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a3e      	ldr	r2, [pc, #248]	; (8007c94 <HAL_DMA_IRQHandler+0xe1c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d040      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a3c      	ldr	r2, [pc, #240]	; (8007c98 <HAL_DMA_IRQHandler+0xe20>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d03b      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a3b      	ldr	r2, [pc, #236]	; (8007c9c <HAL_DMA_IRQHandler+0xe24>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d036      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a39      	ldr	r2, [pc, #228]	; (8007ca0 <HAL_DMA_IRQHandler+0xe28>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d031      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a38      	ldr	r2, [pc, #224]	; (8007ca4 <HAL_DMA_IRQHandler+0xe2c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d02c      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a36      	ldr	r2, [pc, #216]	; (8007ca8 <HAL_DMA_IRQHandler+0xe30>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d027      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a35      	ldr	r2, [pc, #212]	; (8007cac <HAL_DMA_IRQHandler+0xe34>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d022      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a33      	ldr	r2, [pc, #204]	; (8007cb0 <HAL_DMA_IRQHandler+0xe38>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d01d      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a32      	ldr	r2, [pc, #200]	; (8007cb4 <HAL_DMA_IRQHandler+0xe3c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d018      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a30      	ldr	r2, [pc, #192]	; (8007cb8 <HAL_DMA_IRQHandler+0xe40>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d013      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a2f      	ldr	r2, [pc, #188]	; (8007cbc <HAL_DMA_IRQHandler+0xe44>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00e      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a2d      	ldr	r2, [pc, #180]	; (8007cc0 <HAL_DMA_IRQHandler+0xe48>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d009      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a2c      	ldr	r2, [pc, #176]	; (8007cc4 <HAL_DMA_IRQHandler+0xe4c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d004      	beq.n	8007c22 <HAL_DMA_IRQHandler+0xdaa>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a2a      	ldr	r2, [pc, #168]	; (8007cc8 <HAL_DMA_IRQHandler+0xe50>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d108      	bne.n	8007c34 <HAL_DMA_IRQHandler+0xdbc>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 021c 	bic.w	r2, r2, #28
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	e007      	b.n	8007c44 <HAL_DMA_IRQHandler+0xdcc>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 020e 	bic.w	r2, r2, #14
 8007c42:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	409a      	lsls	r2, r3
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
 8007c7a:	e004      	b.n	8007c86 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c7c:	bf00      	nop
 8007c7e:	e002      	b.n	8007c86 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c80:	bf00      	nop
 8007c82:	e000      	b.n	8007c86 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c84:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c86:	3728      	adds	r7, #40	; 0x28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	40020010 	.word	0x40020010
 8007c90:	40020028 	.word	0x40020028
 8007c94:	40020040 	.word	0x40020040
 8007c98:	40020058 	.word	0x40020058
 8007c9c:	40020070 	.word	0x40020070
 8007ca0:	40020088 	.word	0x40020088
 8007ca4:	400200a0 	.word	0x400200a0
 8007ca8:	400200b8 	.word	0x400200b8
 8007cac:	40020410 	.word	0x40020410
 8007cb0:	40020428 	.word	0x40020428
 8007cb4:	40020440 	.word	0x40020440
 8007cb8:	40020458 	.word	0x40020458
 8007cbc:	40020470 	.word	0x40020470
 8007cc0:	40020488 	.word	0x40020488
 8007cc4:	400204a0 	.word	0x400204a0
 8007cc8:	400204b8 	.word	0x400204b8

08007ccc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cde:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a7f      	ldr	r2, [pc, #508]	; (8007ee8 <DMA_SetConfig+0x21c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d072      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a7d      	ldr	r2, [pc, #500]	; (8007eec <DMA_SetConfig+0x220>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d06d      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a7c      	ldr	r2, [pc, #496]	; (8007ef0 <DMA_SetConfig+0x224>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d068      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a7a      	ldr	r2, [pc, #488]	; (8007ef4 <DMA_SetConfig+0x228>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d063      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a79      	ldr	r2, [pc, #484]	; (8007ef8 <DMA_SetConfig+0x22c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d05e      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a77      	ldr	r2, [pc, #476]	; (8007efc <DMA_SetConfig+0x230>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d059      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a76      	ldr	r2, [pc, #472]	; (8007f00 <DMA_SetConfig+0x234>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d054      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a74      	ldr	r2, [pc, #464]	; (8007f04 <DMA_SetConfig+0x238>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d04f      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a73      	ldr	r2, [pc, #460]	; (8007f08 <DMA_SetConfig+0x23c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d04a      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a71      	ldr	r2, [pc, #452]	; (8007f0c <DMA_SetConfig+0x240>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d045      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a70      	ldr	r2, [pc, #448]	; (8007f10 <DMA_SetConfig+0x244>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d040      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a6e      	ldr	r2, [pc, #440]	; (8007f14 <DMA_SetConfig+0x248>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d03b      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a6d      	ldr	r2, [pc, #436]	; (8007f18 <DMA_SetConfig+0x24c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d036      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a6b      	ldr	r2, [pc, #428]	; (8007f1c <DMA_SetConfig+0x250>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d031      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a6a      	ldr	r2, [pc, #424]	; (8007f20 <DMA_SetConfig+0x254>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d02c      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a68      	ldr	r2, [pc, #416]	; (8007f24 <DMA_SetConfig+0x258>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d027      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a67      	ldr	r2, [pc, #412]	; (8007f28 <DMA_SetConfig+0x25c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d022      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a65      	ldr	r2, [pc, #404]	; (8007f2c <DMA_SetConfig+0x260>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d01d      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a64      	ldr	r2, [pc, #400]	; (8007f30 <DMA_SetConfig+0x264>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d018      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a62      	ldr	r2, [pc, #392]	; (8007f34 <DMA_SetConfig+0x268>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a61      	ldr	r2, [pc, #388]	; (8007f38 <DMA_SetConfig+0x26c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a5f      	ldr	r2, [pc, #380]	; (8007f3c <DMA_SetConfig+0x270>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a5e      	ldr	r2, [pc, #376]	; (8007f40 <DMA_SetConfig+0x274>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <DMA_SetConfig+0x10a>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a5c      	ldr	r2, [pc, #368]	; (8007f44 <DMA_SetConfig+0x278>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d101      	bne.n	8007dda <DMA_SetConfig+0x10e>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <DMA_SetConfig+0x110>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00d      	beq.n	8007dfc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007de8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d004      	beq.n	8007dfc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007dfa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a39      	ldr	r2, [pc, #228]	; (8007ee8 <DMA_SetConfig+0x21c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d04a      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a38      	ldr	r2, [pc, #224]	; (8007eec <DMA_SetConfig+0x220>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d045      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a36      	ldr	r2, [pc, #216]	; (8007ef0 <DMA_SetConfig+0x224>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d040      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a35      	ldr	r2, [pc, #212]	; (8007ef4 <DMA_SetConfig+0x228>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d03b      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a33      	ldr	r2, [pc, #204]	; (8007ef8 <DMA_SetConfig+0x22c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d036      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a32      	ldr	r2, [pc, #200]	; (8007efc <DMA_SetConfig+0x230>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d031      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a30      	ldr	r2, [pc, #192]	; (8007f00 <DMA_SetConfig+0x234>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d02c      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a2f      	ldr	r2, [pc, #188]	; (8007f04 <DMA_SetConfig+0x238>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d027      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a2d      	ldr	r2, [pc, #180]	; (8007f08 <DMA_SetConfig+0x23c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d022      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a2c      	ldr	r2, [pc, #176]	; (8007f0c <DMA_SetConfig+0x240>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d01d      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a2a      	ldr	r2, [pc, #168]	; (8007f10 <DMA_SetConfig+0x244>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d018      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a29      	ldr	r2, [pc, #164]	; (8007f14 <DMA_SetConfig+0x248>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d013      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a27      	ldr	r2, [pc, #156]	; (8007f18 <DMA_SetConfig+0x24c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00e      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a26      	ldr	r2, [pc, #152]	; (8007f1c <DMA_SetConfig+0x250>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d009      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a24      	ldr	r2, [pc, #144]	; (8007f20 <DMA_SetConfig+0x254>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d004      	beq.n	8007e9c <DMA_SetConfig+0x1d0>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a23      	ldr	r2, [pc, #140]	; (8007f24 <DMA_SetConfig+0x258>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d101      	bne.n	8007ea0 <DMA_SetConfig+0x1d4>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <DMA_SetConfig+0x1d6>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d059      	beq.n	8007f5a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	223f      	movs	r2, #63	; 0x3f
 8007eb0:	409a      	lsls	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ec4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	2b40      	cmp	r3, #64	; 0x40
 8007ed4:	d138      	bne.n	8007f48 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ee6:	e086      	b.n	8007ff6 <DMA_SetConfig+0x32a>
 8007ee8:	40020010 	.word	0x40020010
 8007eec:	40020028 	.word	0x40020028
 8007ef0:	40020040 	.word	0x40020040
 8007ef4:	40020058 	.word	0x40020058
 8007ef8:	40020070 	.word	0x40020070
 8007efc:	40020088 	.word	0x40020088
 8007f00:	400200a0 	.word	0x400200a0
 8007f04:	400200b8 	.word	0x400200b8
 8007f08:	40020410 	.word	0x40020410
 8007f0c:	40020428 	.word	0x40020428
 8007f10:	40020440 	.word	0x40020440
 8007f14:	40020458 	.word	0x40020458
 8007f18:	40020470 	.word	0x40020470
 8007f1c:	40020488 	.word	0x40020488
 8007f20:	400204a0 	.word	0x400204a0
 8007f24:	400204b8 	.word	0x400204b8
 8007f28:	58025408 	.word	0x58025408
 8007f2c:	5802541c 	.word	0x5802541c
 8007f30:	58025430 	.word	0x58025430
 8007f34:	58025444 	.word	0x58025444
 8007f38:	58025458 	.word	0x58025458
 8007f3c:	5802546c 	.word	0x5802546c
 8007f40:	58025480 	.word	0x58025480
 8007f44:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	60da      	str	r2, [r3, #12]
}
 8007f58:	e04d      	b.n	8007ff6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a29      	ldr	r2, [pc, #164]	; (8008004 <DMA_SetConfig+0x338>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d022      	beq.n	8007faa <DMA_SetConfig+0x2de>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a27      	ldr	r2, [pc, #156]	; (8008008 <DMA_SetConfig+0x33c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01d      	beq.n	8007faa <DMA_SetConfig+0x2de>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a26      	ldr	r2, [pc, #152]	; (800800c <DMA_SetConfig+0x340>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d018      	beq.n	8007faa <DMA_SetConfig+0x2de>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a24      	ldr	r2, [pc, #144]	; (8008010 <DMA_SetConfig+0x344>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d013      	beq.n	8007faa <DMA_SetConfig+0x2de>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a23      	ldr	r2, [pc, #140]	; (8008014 <DMA_SetConfig+0x348>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d00e      	beq.n	8007faa <DMA_SetConfig+0x2de>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a21      	ldr	r2, [pc, #132]	; (8008018 <DMA_SetConfig+0x34c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d009      	beq.n	8007faa <DMA_SetConfig+0x2de>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a20      	ldr	r2, [pc, #128]	; (800801c <DMA_SetConfig+0x350>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d004      	beq.n	8007faa <DMA_SetConfig+0x2de>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1e      	ldr	r2, [pc, #120]	; (8008020 <DMA_SetConfig+0x354>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d101      	bne.n	8007fae <DMA_SetConfig+0x2e2>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <DMA_SetConfig+0x2e4>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d020      	beq.n	8007ff6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb8:	f003 031f 	and.w	r3, r3, #31
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	409a      	lsls	r2, r3
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2b40      	cmp	r3, #64	; 0x40
 8007fd2:	d108      	bne.n	8007fe6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	60da      	str	r2, [r3, #12]
}
 8007fe4:	e007      	b.n	8007ff6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	60da      	str	r2, [r3, #12]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	58025408 	.word	0x58025408
 8008008:	5802541c 	.word	0x5802541c
 800800c:	58025430 	.word	0x58025430
 8008010:	58025444 	.word	0x58025444
 8008014:	58025458 	.word	0x58025458
 8008018:	5802546c 	.word	0x5802546c
 800801c:	58025480 	.word	0x58025480
 8008020:	58025494 	.word	0x58025494

08008024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a42      	ldr	r2, [pc, #264]	; (800813c <DMA_CalcBaseAndBitshift+0x118>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d04a      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a41      	ldr	r2, [pc, #260]	; (8008140 <DMA_CalcBaseAndBitshift+0x11c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d045      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a3f      	ldr	r2, [pc, #252]	; (8008144 <DMA_CalcBaseAndBitshift+0x120>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d040      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a3e      	ldr	r2, [pc, #248]	; (8008148 <DMA_CalcBaseAndBitshift+0x124>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d03b      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a3c      	ldr	r2, [pc, #240]	; (800814c <DMA_CalcBaseAndBitshift+0x128>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d036      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a3b      	ldr	r2, [pc, #236]	; (8008150 <DMA_CalcBaseAndBitshift+0x12c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d031      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a39      	ldr	r2, [pc, #228]	; (8008154 <DMA_CalcBaseAndBitshift+0x130>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d02c      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a38      	ldr	r2, [pc, #224]	; (8008158 <DMA_CalcBaseAndBitshift+0x134>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d027      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a36      	ldr	r2, [pc, #216]	; (800815c <DMA_CalcBaseAndBitshift+0x138>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d022      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a35      	ldr	r2, [pc, #212]	; (8008160 <DMA_CalcBaseAndBitshift+0x13c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d01d      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a33      	ldr	r2, [pc, #204]	; (8008164 <DMA_CalcBaseAndBitshift+0x140>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d018      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a32      	ldr	r2, [pc, #200]	; (8008168 <DMA_CalcBaseAndBitshift+0x144>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d013      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a30      	ldr	r2, [pc, #192]	; (800816c <DMA_CalcBaseAndBitshift+0x148>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d00e      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a2f      	ldr	r2, [pc, #188]	; (8008170 <DMA_CalcBaseAndBitshift+0x14c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d009      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a2d      	ldr	r2, [pc, #180]	; (8008174 <DMA_CalcBaseAndBitshift+0x150>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d004      	beq.n	80080cc <DMA_CalcBaseAndBitshift+0xa8>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a2c      	ldr	r2, [pc, #176]	; (8008178 <DMA_CalcBaseAndBitshift+0x154>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d101      	bne.n	80080d0 <DMA_CalcBaseAndBitshift+0xac>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e000      	b.n	80080d2 <DMA_CalcBaseAndBitshift+0xae>
 80080d0:	2300      	movs	r3, #0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d024      	beq.n	8008120 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	3b10      	subs	r3, #16
 80080de:	4a27      	ldr	r2, [pc, #156]	; (800817c <DMA_CalcBaseAndBitshift+0x158>)
 80080e0:	fba2 2303 	umull	r2, r3, r2, r3
 80080e4:	091b      	lsrs	r3, r3, #4
 80080e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	4a24      	ldr	r2, [pc, #144]	; (8008180 <DMA_CalcBaseAndBitshift+0x15c>)
 80080f0:	5cd3      	ldrb	r3, [r2, r3]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d908      	bls.n	8008110 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	4b1f      	ldr	r3, [pc, #124]	; (8008184 <DMA_CalcBaseAndBitshift+0x160>)
 8008106:	4013      	ands	r3, r2
 8008108:	1d1a      	adds	r2, r3, #4
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	659a      	str	r2, [r3, #88]	; 0x58
 800810e:	e00d      	b.n	800812c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	461a      	mov	r2, r3
 8008116:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <DMA_CalcBaseAndBitshift+0x160>)
 8008118:	4013      	ands	r3, r2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6593      	str	r3, [r2, #88]	; 0x58
 800811e:	e005      	b.n	800812c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	40020010 	.word	0x40020010
 8008140:	40020028 	.word	0x40020028
 8008144:	40020040 	.word	0x40020040
 8008148:	40020058 	.word	0x40020058
 800814c:	40020070 	.word	0x40020070
 8008150:	40020088 	.word	0x40020088
 8008154:	400200a0 	.word	0x400200a0
 8008158:	400200b8 	.word	0x400200b8
 800815c:	40020410 	.word	0x40020410
 8008160:	40020428 	.word	0x40020428
 8008164:	40020440 	.word	0x40020440
 8008168:	40020458 	.word	0x40020458
 800816c:	40020470 	.word	0x40020470
 8008170:	40020488 	.word	0x40020488
 8008174:	400204a0 	.word	0x400204a0
 8008178:	400204b8 	.word	0x400204b8
 800817c:	aaaaaaab 	.word	0xaaaaaaab
 8008180:	0800fe30 	.word	0x0800fe30
 8008184:	fffffc00 	.word	0xfffffc00

08008188 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d120      	bne.n	80081de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d858      	bhi.n	8008256 <DMA_CheckFifoParam+0xce>
 80081a4:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <DMA_CheckFifoParam+0x24>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	080081bd 	.word	0x080081bd
 80081b0:	080081cf 	.word	0x080081cf
 80081b4:	080081bd 	.word	0x080081bd
 80081b8:	08008257 	.word	0x08008257
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d048      	beq.n	800825a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081cc:	e045      	b.n	800825a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081d6:	d142      	bne.n	800825e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081dc:	e03f      	b.n	800825e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e6:	d123      	bne.n	8008230 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d838      	bhi.n	8008262 <DMA_CheckFifoParam+0xda>
 80081f0:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <DMA_CheckFifoParam+0x70>)
 80081f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f6:	bf00      	nop
 80081f8:	08008209 	.word	0x08008209
 80081fc:	0800820f 	.word	0x0800820f
 8008200:	08008209 	.word	0x08008209
 8008204:	08008221 	.word	0x08008221
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
        break;
 800820c:	e030      	b.n	8008270 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d025      	beq.n	8008266 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800821e:	e022      	b.n	8008266 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008228:	d11f      	bne.n	800826a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800822e:	e01c      	b.n	800826a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	2b02      	cmp	r3, #2
 8008236:	d902      	bls.n	800823e <DMA_CheckFifoParam+0xb6>
 8008238:	2b03      	cmp	r3, #3
 800823a:	d003      	beq.n	8008244 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800823c:	e018      	b.n	8008270 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
        break;
 8008242:	e015      	b.n	8008270 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00e      	beq.n	800826e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	73fb      	strb	r3, [r7, #15]
    break;
 8008254:	e00b      	b.n	800826e <DMA_CheckFifoParam+0xe6>
        break;
 8008256:	bf00      	nop
 8008258:	e00a      	b.n	8008270 <DMA_CheckFifoParam+0xe8>
        break;
 800825a:	bf00      	nop
 800825c:	e008      	b.n	8008270 <DMA_CheckFifoParam+0xe8>
        break;
 800825e:	bf00      	nop
 8008260:	e006      	b.n	8008270 <DMA_CheckFifoParam+0xe8>
        break;
 8008262:	bf00      	nop
 8008264:	e004      	b.n	8008270 <DMA_CheckFifoParam+0xe8>
        break;
 8008266:	bf00      	nop
 8008268:	e002      	b.n	8008270 <DMA_CheckFifoParam+0xe8>
        break;
 800826a:	bf00      	nop
 800826c:	e000      	b.n	8008270 <DMA_CheckFifoParam+0xe8>
    break;
 800826e:	bf00      	nop
    }
  }

  return status;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a38      	ldr	r2, [pc, #224]	; (8008374 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d022      	beq.n	80082de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a36      	ldr	r2, [pc, #216]	; (8008378 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d01d      	beq.n	80082de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a35      	ldr	r2, [pc, #212]	; (800837c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d018      	beq.n	80082de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a33      	ldr	r2, [pc, #204]	; (8008380 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d013      	beq.n	80082de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a32      	ldr	r2, [pc, #200]	; (8008384 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00e      	beq.n	80082de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a30      	ldr	r2, [pc, #192]	; (8008388 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d009      	beq.n	80082de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a2f      	ldr	r2, [pc, #188]	; (800838c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d004      	beq.n	80082de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a2d      	ldr	r2, [pc, #180]	; (8008390 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d101      	bne.n	80082e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80082e2:	2300      	movs	r3, #0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01a      	beq.n	800831e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	3b08      	subs	r3, #8
 80082f0:	4a28      	ldr	r2, [pc, #160]	; (8008394 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80082f2:	fba2 2303 	umull	r2, r3, r2, r3
 80082f6:	091b      	lsrs	r3, r3, #4
 80082f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	4b26      	ldr	r3, [pc, #152]	; (8008398 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a24      	ldr	r2, [pc, #144]	; (800839c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800830c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f003 031f 	and.w	r3, r3, #31
 8008314:	2201      	movs	r2, #1
 8008316:	409a      	lsls	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800831c:	e024      	b.n	8008368 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	3b10      	subs	r3, #16
 8008326:	4a1e      	ldr	r2, [pc, #120]	; (80083a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008328:	fba2 2303 	umull	r2, r3, r2, r3
 800832c:	091b      	lsrs	r3, r3, #4
 800832e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4a1c      	ldr	r2, [pc, #112]	; (80083a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d806      	bhi.n	8008346 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4a1b      	ldr	r2, [pc, #108]	; (80083a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d902      	bls.n	8008346 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3308      	adds	r3, #8
 8008344:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4b18      	ldr	r3, [pc, #96]	; (80083ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	461a      	mov	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a16      	ldr	r2, [pc, #88]	; (80083b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008358:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f003 031f 	and.w	r3, r3, #31
 8008360:	2201      	movs	r2, #1
 8008362:	409a      	lsls	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008368:	bf00      	nop
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	58025408 	.word	0x58025408
 8008378:	5802541c 	.word	0x5802541c
 800837c:	58025430 	.word	0x58025430
 8008380:	58025444 	.word	0x58025444
 8008384:	58025458 	.word	0x58025458
 8008388:	5802546c 	.word	0x5802546c
 800838c:	58025480 	.word	0x58025480
 8008390:	58025494 	.word	0x58025494
 8008394:	cccccccd 	.word	0xcccccccd
 8008398:	16009600 	.word	0x16009600
 800839c:	58025880 	.word	0x58025880
 80083a0:	aaaaaaab 	.word	0xaaaaaaab
 80083a4:	400204b8 	.word	0x400204b8
 80083a8:	4002040f 	.word	0x4002040f
 80083ac:	10008200 	.word	0x10008200
 80083b0:	40020880 	.word	0x40020880

080083b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d04a      	beq.n	8008460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d847      	bhi.n	8008460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a25      	ldr	r2, [pc, #148]	; (800846c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d022      	beq.n	8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a24      	ldr	r2, [pc, #144]	; (8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d01d      	beq.n	8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a22      	ldr	r2, [pc, #136]	; (8008474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d018      	beq.n	8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a21      	ldr	r2, [pc, #132]	; (8008478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d013      	beq.n	8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a1f      	ldr	r2, [pc, #124]	; (800847c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00e      	beq.n	8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a1e      	ldr	r2, [pc, #120]	; (8008480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d009      	beq.n	8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a1c      	ldr	r2, [pc, #112]	; (8008484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d004      	beq.n	8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a1b      	ldr	r2, [pc, #108]	; (8008488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d101      	bne.n	8008424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008420:	2301      	movs	r3, #1
 8008422:	e000      	b.n	8008426 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008424:	2300      	movs	r3, #0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	4b17      	ldr	r3, [pc, #92]	; (800848c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	461a      	mov	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a15      	ldr	r2, [pc, #84]	; (8008490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800843c:	671a      	str	r2, [r3, #112]	; 0x70
 800843e:	e009      	b.n	8008454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4b14      	ldr	r3, [pc, #80]	; (8008494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	461a      	mov	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a11      	ldr	r2, [pc, #68]	; (8008498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008452:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3b01      	subs	r3, #1
 8008458:	2201      	movs	r2, #1
 800845a:	409a      	lsls	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008460:	bf00      	nop
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	58025408 	.word	0x58025408
 8008470:	5802541c 	.word	0x5802541c
 8008474:	58025430 	.word	0x58025430
 8008478:	58025444 	.word	0x58025444
 800847c:	58025458 	.word	0x58025458
 8008480:	5802546c 	.word	0x5802546c
 8008484:	58025480 	.word	0x58025480
 8008488:	58025494 	.word	0x58025494
 800848c:	1600963f 	.word	0x1600963f
 8008490:	58025940 	.word	0x58025940
 8008494:	1000823f 	.word	0x1000823f
 8008498:	40020940 	.word	0x40020940

0800849c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800849c:	b480      	push	{r7}
 800849e:	b089      	sub	sp, #36	; 0x24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084aa:	4b86      	ldr	r3, [pc, #536]	; (80086c4 <HAL_GPIO_Init+0x228>)
 80084ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084ae:	e18c      	b.n	80087ca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	2101      	movs	r1, #1
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	fa01 f303 	lsl.w	r3, r1, r3
 80084bc:	4013      	ands	r3, r2
 80084be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 817e 	beq.w	80087c4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d005      	beq.n	80084e0 <HAL_GPIO_Init+0x44>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d130      	bne.n	8008542 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	2203      	movs	r2, #3
 80084ec:	fa02 f303 	lsl.w	r3, r2, r3
 80084f0:	43db      	mvns	r3, r3
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	4013      	ands	r3, r2
 80084f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	68da      	ldr	r2, [r3, #12]
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	fa02 f303 	lsl.w	r3, r2, r3
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	4313      	orrs	r3, r2
 8008508:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008516:	2201      	movs	r2, #1
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	fa02 f303 	lsl.w	r3, r2, r3
 800851e:	43db      	mvns	r3, r3
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	4013      	ands	r3, r2
 8008524:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	091b      	lsrs	r3, r3, #4
 800852c:	f003 0201 	and.w	r2, r3, #1
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	fa02 f303 	lsl.w	r3, r2, r3
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	4313      	orrs	r3, r2
 800853a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f003 0303 	and.w	r3, r3, #3
 800854a:	2b03      	cmp	r3, #3
 800854c:	d017      	beq.n	800857e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	2203      	movs	r2, #3
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	43db      	mvns	r3, r3
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	4013      	ands	r3, r2
 8008564:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	fa02 f303 	lsl.w	r3, r2, r3
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	4313      	orrs	r3, r2
 8008576:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d123      	bne.n	80085d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	08da      	lsrs	r2, r3, #3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3208      	adds	r2, #8
 8008592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f003 0307 	and.w	r3, r3, #7
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	220f      	movs	r2, #15
 80085a2:	fa02 f303 	lsl.w	r3, r2, r3
 80085a6:	43db      	mvns	r3, r3
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	4013      	ands	r3, r2
 80085ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	691a      	ldr	r2, [r3, #16]
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	f003 0307 	and.w	r3, r3, #7
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	fa02 f303 	lsl.w	r3, r2, r3
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	08da      	lsrs	r2, r3, #3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3208      	adds	r2, #8
 80085cc:	69b9      	ldr	r1, [r7, #24]
 80085ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	2203      	movs	r2, #3
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	43db      	mvns	r3, r3
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	4013      	ands	r3, r2
 80085e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f003 0203 	and.w	r2, r3, #3
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	fa02 f303 	lsl.w	r3, r2, r3
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80d8 	beq.w	80087c4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008614:	4b2c      	ldr	r3, [pc, #176]	; (80086c8 <HAL_GPIO_Init+0x22c>)
 8008616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800861a:	4a2b      	ldr	r2, [pc, #172]	; (80086c8 <HAL_GPIO_Init+0x22c>)
 800861c:	f043 0302 	orr.w	r3, r3, #2
 8008620:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008624:	4b28      	ldr	r3, [pc, #160]	; (80086c8 <HAL_GPIO_Init+0x22c>)
 8008626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008632:	4a26      	ldr	r2, [pc, #152]	; (80086cc <HAL_GPIO_Init+0x230>)
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	089b      	lsrs	r3, r3, #2
 8008638:	3302      	adds	r3, #2
 800863a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800863e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	220f      	movs	r2, #15
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	43db      	mvns	r3, r3
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	4013      	ands	r3, r2
 8008654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a1d      	ldr	r2, [pc, #116]	; (80086d0 <HAL_GPIO_Init+0x234>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d04a      	beq.n	80086f4 <HAL_GPIO_Init+0x258>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a1c      	ldr	r2, [pc, #112]	; (80086d4 <HAL_GPIO_Init+0x238>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d02b      	beq.n	80086be <HAL_GPIO_Init+0x222>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a1b      	ldr	r2, [pc, #108]	; (80086d8 <HAL_GPIO_Init+0x23c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d025      	beq.n	80086ba <HAL_GPIO_Init+0x21e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a1a      	ldr	r2, [pc, #104]	; (80086dc <HAL_GPIO_Init+0x240>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d01f      	beq.n	80086b6 <HAL_GPIO_Init+0x21a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a19      	ldr	r2, [pc, #100]	; (80086e0 <HAL_GPIO_Init+0x244>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d019      	beq.n	80086b2 <HAL_GPIO_Init+0x216>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a18      	ldr	r2, [pc, #96]	; (80086e4 <HAL_GPIO_Init+0x248>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d013      	beq.n	80086ae <HAL_GPIO_Init+0x212>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a17      	ldr	r2, [pc, #92]	; (80086e8 <HAL_GPIO_Init+0x24c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d00d      	beq.n	80086aa <HAL_GPIO_Init+0x20e>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a16      	ldr	r2, [pc, #88]	; (80086ec <HAL_GPIO_Init+0x250>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d007      	beq.n	80086a6 <HAL_GPIO_Init+0x20a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a15      	ldr	r2, [pc, #84]	; (80086f0 <HAL_GPIO_Init+0x254>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d101      	bne.n	80086a2 <HAL_GPIO_Init+0x206>
 800869e:	2309      	movs	r3, #9
 80086a0:	e029      	b.n	80086f6 <HAL_GPIO_Init+0x25a>
 80086a2:	230a      	movs	r3, #10
 80086a4:	e027      	b.n	80086f6 <HAL_GPIO_Init+0x25a>
 80086a6:	2307      	movs	r3, #7
 80086a8:	e025      	b.n	80086f6 <HAL_GPIO_Init+0x25a>
 80086aa:	2306      	movs	r3, #6
 80086ac:	e023      	b.n	80086f6 <HAL_GPIO_Init+0x25a>
 80086ae:	2305      	movs	r3, #5
 80086b0:	e021      	b.n	80086f6 <HAL_GPIO_Init+0x25a>
 80086b2:	2304      	movs	r3, #4
 80086b4:	e01f      	b.n	80086f6 <HAL_GPIO_Init+0x25a>
 80086b6:	2303      	movs	r3, #3
 80086b8:	e01d      	b.n	80086f6 <HAL_GPIO_Init+0x25a>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e01b      	b.n	80086f6 <HAL_GPIO_Init+0x25a>
 80086be:	2301      	movs	r3, #1
 80086c0:	e019      	b.n	80086f6 <HAL_GPIO_Init+0x25a>
 80086c2:	bf00      	nop
 80086c4:	58000080 	.word	0x58000080
 80086c8:	58024400 	.word	0x58024400
 80086cc:	58000400 	.word	0x58000400
 80086d0:	58020000 	.word	0x58020000
 80086d4:	58020400 	.word	0x58020400
 80086d8:	58020800 	.word	0x58020800
 80086dc:	58020c00 	.word	0x58020c00
 80086e0:	58021000 	.word	0x58021000
 80086e4:	58021400 	.word	0x58021400
 80086e8:	58021800 	.word	0x58021800
 80086ec:	58021c00 	.word	0x58021c00
 80086f0:	58022400 	.word	0x58022400
 80086f4:	2300      	movs	r3, #0
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	f002 0203 	and.w	r2, r2, #3
 80086fc:	0092      	lsls	r2, r2, #2
 80086fe:	4093      	lsls	r3, r2
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	4313      	orrs	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008706:	4938      	ldr	r1, [pc, #224]	; (80087e8 <HAL_GPIO_Init+0x34c>)
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	089b      	lsrs	r3, r3, #2
 800870c:	3302      	adds	r3, #2
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	43db      	mvns	r3, r3
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	4013      	ands	r3, r2
 8008724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800873a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	43db      	mvns	r3, r3
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	4013      	ands	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	43db      	mvns	r3, r3
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	4013      	ands	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	4313      	orrs	r3, r2
 8008792:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	43db      	mvns	r3, r3
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	4013      	ands	r3, r2
 80087a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	3301      	adds	r3, #1
 80087c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	fa22 f303 	lsr.w	r3, r2, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f47f ae6b 	bne.w	80084b0 <HAL_GPIO_Init+0x14>
  }
}
 80087da:	bf00      	nop
 80087dc:	bf00      	nop
 80087de:	3724      	adds	r7, #36	; 0x24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	58000400 	.word	0x58000400

080087ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80087fa:	4b72      	ldr	r3, [pc, #456]	; (80089c4 <HAL_GPIO_DeInit+0x1d8>)
 80087fc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80087fe:	e0d3      	b.n	80089a8 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008800:	2201      	movs	r2, #1
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	fa02 f303 	lsl.w	r3, r2, r3
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	4013      	ands	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 80c6 	beq.w	80089a2 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008816:	4a6c      	ldr	r2, [pc, #432]	; (80089c8 <HAL_GPIO_DeInit+0x1dc>)
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	089b      	lsrs	r3, r3, #2
 800881c:	3302      	adds	r3, #2
 800881e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008822:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	220f      	movs	r2, #15
 800882e:	fa02 f303 	lsl.w	r3, r2, r3
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	4013      	ands	r3, r2
 8008836:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a64      	ldr	r2, [pc, #400]	; (80089cc <HAL_GPIO_DeInit+0x1e0>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d031      	beq.n	80088a4 <HAL_GPIO_DeInit+0xb8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a63      	ldr	r2, [pc, #396]	; (80089d0 <HAL_GPIO_DeInit+0x1e4>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d02b      	beq.n	80088a0 <HAL_GPIO_DeInit+0xb4>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a62      	ldr	r2, [pc, #392]	; (80089d4 <HAL_GPIO_DeInit+0x1e8>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d025      	beq.n	800889c <HAL_GPIO_DeInit+0xb0>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a61      	ldr	r2, [pc, #388]	; (80089d8 <HAL_GPIO_DeInit+0x1ec>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d01f      	beq.n	8008898 <HAL_GPIO_DeInit+0xac>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a60      	ldr	r2, [pc, #384]	; (80089dc <HAL_GPIO_DeInit+0x1f0>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d019      	beq.n	8008894 <HAL_GPIO_DeInit+0xa8>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a5f      	ldr	r2, [pc, #380]	; (80089e0 <HAL_GPIO_DeInit+0x1f4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d013      	beq.n	8008890 <HAL_GPIO_DeInit+0xa4>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a5e      	ldr	r2, [pc, #376]	; (80089e4 <HAL_GPIO_DeInit+0x1f8>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00d      	beq.n	800888c <HAL_GPIO_DeInit+0xa0>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a5d      	ldr	r2, [pc, #372]	; (80089e8 <HAL_GPIO_DeInit+0x1fc>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d007      	beq.n	8008888 <HAL_GPIO_DeInit+0x9c>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a5c      	ldr	r2, [pc, #368]	; (80089ec <HAL_GPIO_DeInit+0x200>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d101      	bne.n	8008884 <HAL_GPIO_DeInit+0x98>
 8008880:	2309      	movs	r3, #9
 8008882:	e010      	b.n	80088a6 <HAL_GPIO_DeInit+0xba>
 8008884:	230a      	movs	r3, #10
 8008886:	e00e      	b.n	80088a6 <HAL_GPIO_DeInit+0xba>
 8008888:	2307      	movs	r3, #7
 800888a:	e00c      	b.n	80088a6 <HAL_GPIO_DeInit+0xba>
 800888c:	2306      	movs	r3, #6
 800888e:	e00a      	b.n	80088a6 <HAL_GPIO_DeInit+0xba>
 8008890:	2305      	movs	r3, #5
 8008892:	e008      	b.n	80088a6 <HAL_GPIO_DeInit+0xba>
 8008894:	2304      	movs	r3, #4
 8008896:	e006      	b.n	80088a6 <HAL_GPIO_DeInit+0xba>
 8008898:	2303      	movs	r3, #3
 800889a:	e004      	b.n	80088a6 <HAL_GPIO_DeInit+0xba>
 800889c:	2302      	movs	r3, #2
 800889e:	e002      	b.n	80088a6 <HAL_GPIO_DeInit+0xba>
 80088a0:	2301      	movs	r3, #1
 80088a2:	e000      	b.n	80088a6 <HAL_GPIO_DeInit+0xba>
 80088a4:	2300      	movs	r3, #0
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	f002 0203 	and.w	r2, r2, #3
 80088ac:	0092      	lsls	r2, r2, #2
 80088ae:	4093      	lsls	r3, r2
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d136      	bne.n	8008924 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	43db      	mvns	r3, r3
 80088be:	401a      	ands	r2, r3
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	43db      	mvns	r3, r3
 80088cc:	401a      	ands	r2, r3
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80088d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	43db      	mvns	r3, r3
 80088dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088e0:	4013      	ands	r3, r2
 80088e2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80088e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	43db      	mvns	r3, r3
 80088ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088f2:	4013      	ands	r3, r2
 80088f4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f003 0303 	and.w	r3, r3, #3
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	220f      	movs	r2, #15
 8008900:	fa02 f303 	lsl.w	r3, r2, r3
 8008904:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008906:	4a30      	ldr	r2, [pc, #192]	; (80089c8 <HAL_GPIO_DeInit+0x1dc>)
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	089b      	lsrs	r3, r3, #2
 800890c:	3302      	adds	r3, #2
 800890e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	43da      	mvns	r2, r3
 8008916:	482c      	ldr	r0, [pc, #176]	; (80089c8 <HAL_GPIO_DeInit+0x1dc>)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	089b      	lsrs	r3, r3, #2
 800891c:	400a      	ands	r2, r1
 800891e:	3302      	adds	r3, #2
 8008920:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	005b      	lsls	r3, r3, #1
 800892c:	2103      	movs	r1, #3
 800892e:	fa01 f303 	lsl.w	r3, r1, r3
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	08da      	lsrs	r2, r3, #3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3208      	adds	r2, #8
 8008940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	220f      	movs	r2, #15
 800894e:	fa02 f303 	lsl.w	r3, r2, r3
 8008952:	43db      	mvns	r3, r3
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	08d2      	lsrs	r2, r2, #3
 8008958:	4019      	ands	r1, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3208      	adds	r2, #8
 800895e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	2103      	movs	r1, #3
 800896c:	fa01 f303 	lsl.w	r3, r1, r3
 8008970:	43db      	mvns	r3, r3
 8008972:	401a      	ands	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	2101      	movs	r1, #1
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	fa01 f303 	lsl.w	r3, r1, r3
 8008984:	43db      	mvns	r3, r3
 8008986:	401a      	ands	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	2103      	movs	r1, #3
 8008996:	fa01 f303 	lsl.w	r3, r1, r3
 800899a:	43db      	mvns	r3, r3
 800899c:	401a      	ands	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	3301      	adds	r3, #1
 80089a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	fa22 f303 	lsr.w	r3, r2, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f47f af25 	bne.w	8008800 <HAL_GPIO_DeInit+0x14>
  }
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	58000080 	.word	0x58000080
 80089c8:	58000400 	.word	0x58000400
 80089cc:	58020000 	.word	0x58020000
 80089d0:	58020400 	.word	0x58020400
 80089d4:	58020800 	.word	0x58020800
 80089d8:	58020c00 	.word	0x58020c00
 80089dc:	58021000 	.word	0x58021000
 80089e0:	58021400 	.word	0x58021400
 80089e4:	58021800 	.word	0x58021800
 80089e8:	58021c00 	.word	0x58021c00
 80089ec:	58022400 	.word	0x58022400

080089f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	807b      	strh	r3, [r7, #2]
 80089fc:	4613      	mov	r3, r2
 80089fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a00:	787b      	ldrb	r3, [r7, #1]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a06:	887a      	ldrh	r2, [r7, #2]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008a0c:	e003      	b.n	8008a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008a0e:	887b      	ldrh	r3, [r7, #2]
 8008a10:	041a      	lsls	r2, r3, #16
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	619a      	str	r2, [r3, #24]
}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	4603      	mov	r3, r0
 8008a2a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008a34:	88fb      	ldrh	r3, [r7, #6]
 8008a36:	4013      	ands	r3, r2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d008      	beq.n	8008a4e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a40:	88fb      	ldrh	r3, [r7, #6]
 8008a42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a46:	88fb      	ldrh	r3, [r7, #6]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 f804 	bl	8008a56 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a74:	4b19      	ldr	r3, [pc, #100]	; (8008adc <HAL_PWREx_ConfigSupply+0x70>)
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d00a      	beq.n	8008a96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a80:	4b16      	ldr	r3, [pc, #88]	; (8008adc <HAL_PWREx_ConfigSupply+0x70>)
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f003 0307 	and.w	r3, r3, #7
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d001      	beq.n	8008a92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e01f      	b.n	8008ad2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e01d      	b.n	8008ad2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a96:	4b11      	ldr	r3, [pc, #68]	; (8008adc <HAL_PWREx_ConfigSupply+0x70>)
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f023 0207 	bic.w	r2, r3, #7
 8008a9e:	490f      	ldr	r1, [pc, #60]	; (8008adc <HAL_PWREx_ConfigSupply+0x70>)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008aa6:	f7fc fbbb 	bl	8005220 <HAL_GetTick>
 8008aaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008aac:	e009      	b.n	8008ac2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008aae:	f7fc fbb7 	bl	8005220 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008abc:	d901      	bls.n	8008ac2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e007      	b.n	8008ad2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ac2:	4b06      	ldr	r3, [pc, #24]	; (8008adc <HAL_PWREx_ConfigSupply+0x70>)
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ace:	d1ee      	bne.n	8008aae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	58024800 	.word	0x58024800

08008ae0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08c      	sub	sp, #48	; 0x30
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e39d      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 8087 	beq.w	8008c0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b00:	4b88      	ldr	r3, [pc, #544]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b0a:	4b86      	ldr	r3, [pc, #536]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	2b10      	cmp	r3, #16
 8008b14:	d007      	beq.n	8008b26 <HAL_RCC_OscConfig+0x46>
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	2b18      	cmp	r3, #24
 8008b1a:	d110      	bne.n	8008b3e <HAL_RCC_OscConfig+0x5e>
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d10b      	bne.n	8008b3e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b26:	4b7f      	ldr	r3, [pc, #508]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d06c      	beq.n	8008c0c <HAL_RCC_OscConfig+0x12c>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d168      	bne.n	8008c0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e377      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b46:	d106      	bne.n	8008b56 <HAL_RCC_OscConfig+0x76>
 8008b48:	4b76      	ldr	r3, [pc, #472]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a75      	ldr	r2, [pc, #468]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	e02e      	b.n	8008bb4 <HAL_RCC_OscConfig+0xd4>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10c      	bne.n	8008b78 <HAL_RCC_OscConfig+0x98>
 8008b5e:	4b71      	ldr	r3, [pc, #452]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a70      	ldr	r2, [pc, #448]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	4b6e      	ldr	r3, [pc, #440]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a6d      	ldr	r2, [pc, #436]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	e01d      	b.n	8008bb4 <HAL_RCC_OscConfig+0xd4>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b80:	d10c      	bne.n	8008b9c <HAL_RCC_OscConfig+0xbc>
 8008b82:	4b68      	ldr	r3, [pc, #416]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a67      	ldr	r2, [pc, #412]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	4b65      	ldr	r3, [pc, #404]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a64      	ldr	r2, [pc, #400]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	e00b      	b.n	8008bb4 <HAL_RCC_OscConfig+0xd4>
 8008b9c:	4b61      	ldr	r3, [pc, #388]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a60      	ldr	r2, [pc, #384]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	4b5e      	ldr	r3, [pc, #376]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a5d      	ldr	r2, [pc, #372]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d013      	beq.n	8008be4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bbc:	f7fc fb30 	bl	8005220 <HAL_GetTick>
 8008bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bc4:	f7fc fb2c 	bl	8005220 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b64      	cmp	r3, #100	; 0x64
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e32b      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bd6:	4b53      	ldr	r3, [pc, #332]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0f0      	beq.n	8008bc4 <HAL_RCC_OscConfig+0xe4>
 8008be2:	e014      	b.n	8008c0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be4:	f7fc fb1c 	bl	8005220 <HAL_GetTick>
 8008be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bea:	e008      	b.n	8008bfe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bec:	f7fc fb18 	bl	8005220 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b64      	cmp	r3, #100	; 0x64
 8008bf8:	d901      	bls.n	8008bfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e317      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bfe:	4b49      	ldr	r3, [pc, #292]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f0      	bne.n	8008bec <HAL_RCC_OscConfig+0x10c>
 8008c0a:	e000      	b.n	8008c0e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 808c 	beq.w	8008d34 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c1c:	4b41      	ldr	r3, [pc, #260]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c26:	4b3f      	ldr	r3, [pc, #252]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d007      	beq.n	8008c42 <HAL_RCC_OscConfig+0x162>
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	2b18      	cmp	r3, #24
 8008c36:	d137      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x1c8>
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d132      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c42:	4b38      	ldr	r3, [pc, #224]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d005      	beq.n	8008c5a <HAL_RCC_OscConfig+0x17a>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e2e9      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c5a:	4b32      	ldr	r3, [pc, #200]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f023 0219 	bic.w	r2, r3, #25
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	492f      	ldr	r1, [pc, #188]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c6c:	f7fc fad8 	bl	8005220 <HAL_GetTick>
 8008c70:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c72:	e008      	b.n	8008c86 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c74:	f7fc fad4 	bl	8005220 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e2d3      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c86:	4b27      	ldr	r3, [pc, #156]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0f0      	beq.n	8008c74 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c92:	4b24      	ldr	r3, [pc, #144]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	061b      	lsls	r3, r3, #24
 8008ca0:	4920      	ldr	r1, [pc, #128]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ca6:	e045      	b.n	8008d34 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d026      	beq.n	8008cfe <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cb0:	4b1c      	ldr	r3, [pc, #112]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f023 0219 	bic.w	r2, r3, #25
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	4919      	ldr	r1, [pc, #100]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc2:	f7fc faad 	bl	8005220 <HAL_GetTick>
 8008cc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cc8:	e008      	b.n	8008cdc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cca:	f7fc faa9 	bl	8005220 <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d901      	bls.n	8008cdc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e2a8      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cdc:	4b11      	ldr	r3, [pc, #68]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d0f0      	beq.n	8008cca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ce8:	4b0e      	ldr	r3, [pc, #56]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	061b      	lsls	r3, r3, #24
 8008cf6:	490b      	ldr	r1, [pc, #44]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	604b      	str	r3, [r1, #4]
 8008cfc:	e01a      	b.n	8008d34 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cfe:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a08      	ldr	r2, [pc, #32]	; (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d0a:	f7fc fa89 	bl	8005220 <HAL_GetTick>
 8008d0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d10:	e00a      	b.n	8008d28 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d12:	f7fc fa85 	bl	8005220 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d903      	bls.n	8008d28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e284      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
 8008d24:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d28:	4b96      	ldr	r3, [pc, #600]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1ee      	bne.n	8008d12 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d06a      	beq.n	8008e16 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d40:	4b90      	ldr	r3, [pc, #576]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d4a:	4b8e      	ldr	r3, [pc, #568]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d007      	beq.n	8008d66 <HAL_RCC_OscConfig+0x286>
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	2b18      	cmp	r3, #24
 8008d5a:	d11b      	bne.n	8008d94 <HAL_RCC_OscConfig+0x2b4>
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d116      	bne.n	8008d94 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d66:	4b87      	ldr	r3, [pc, #540]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d005      	beq.n	8008d7e <HAL_RCC_OscConfig+0x29e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	2b80      	cmp	r3, #128	; 0x80
 8008d78:	d001      	beq.n	8008d7e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e257      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d7e:	4b81      	ldr	r3, [pc, #516]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	061b      	lsls	r3, r3, #24
 8008d8c:	497d      	ldr	r1, [pc, #500]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d92:	e040      	b.n	8008e16 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d023      	beq.n	8008de4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008d9c:	4b79      	ldr	r3, [pc, #484]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a78      	ldr	r2, [pc, #480]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da8:	f7fc fa3a 	bl	8005220 <HAL_GetTick>
 8008dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dae:	e008      	b.n	8008dc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008db0:	f7fc fa36 	bl	8005220 <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d901      	bls.n	8008dc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e235      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dc2:	4b70      	ldr	r3, [pc, #448]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0f0      	beq.n	8008db0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008dce:	4b6d      	ldr	r3, [pc, #436]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	061b      	lsls	r3, r3, #24
 8008ddc:	4969      	ldr	r1, [pc, #420]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60cb      	str	r3, [r1, #12]
 8008de2:	e018      	b.n	8008e16 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008de4:	4b67      	ldr	r3, [pc, #412]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a66      	ldr	r2, [pc, #408]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df0:	f7fc fa16 	bl	8005220 <HAL_GetTick>
 8008df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008df6:	e008      	b.n	8008e0a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008df8:	f7fc fa12 	bl	8005220 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d901      	bls.n	8008e0a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e211      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008e0a:	4b5e      	ldr	r3, [pc, #376]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f0      	bne.n	8008df8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0308 	and.w	r3, r3, #8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d036      	beq.n	8008e90 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d019      	beq.n	8008e5e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e2a:	4b56      	ldr	r3, [pc, #344]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e2e:	4a55      	ldr	r2, [pc, #340]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008e30:	f043 0301 	orr.w	r3, r3, #1
 8008e34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e36:	f7fc f9f3 	bl	8005220 <HAL_GetTick>
 8008e3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e3c:	e008      	b.n	8008e50 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e3e:	f7fc f9ef 	bl	8005220 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d901      	bls.n	8008e50 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e1ee      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e50:	4b4c      	ldr	r3, [pc, #304]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0f0      	beq.n	8008e3e <HAL_RCC_OscConfig+0x35e>
 8008e5c:	e018      	b.n	8008e90 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e5e:	4b49      	ldr	r3, [pc, #292]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e62:	4a48      	ldr	r2, [pc, #288]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008e64:	f023 0301 	bic.w	r3, r3, #1
 8008e68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e6a:	f7fc f9d9 	bl	8005220 <HAL_GetTick>
 8008e6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e70:	e008      	b.n	8008e84 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e72:	f7fc f9d5 	bl	8005220 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e1d4      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e84:	4b3f      	ldr	r3, [pc, #252]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1f0      	bne.n	8008e72 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0320 	and.w	r3, r3, #32
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d036      	beq.n	8008f0a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d019      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ea4:	4b37      	ldr	r3, [pc, #220]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a36      	ldr	r2, [pc, #216]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008eaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008eae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008eb0:	f7fc f9b6 	bl	8005220 <HAL_GetTick>
 8008eb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008eb6:	e008      	b.n	8008eca <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008eb8:	f7fc f9b2 	bl	8005220 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e1b1      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008eca:	4b2e      	ldr	r3, [pc, #184]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0f0      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x3d8>
 8008ed6:	e018      	b.n	8008f0a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ed8:	4b2a      	ldr	r3, [pc, #168]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a29      	ldr	r2, [pc, #164]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ee2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ee4:	f7fc f99c 	bl	8005220 <HAL_GetTick>
 8008ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008eea:	e008      	b.n	8008efe <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008eec:	f7fc f998 	bl	8005220 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e197      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008efe:	4b21      	ldr	r3, [pc, #132]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1f0      	bne.n	8008eec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8086 	beq.w	8009024 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008f18:	4b1b      	ldr	r3, [pc, #108]	; (8008f88 <HAL_RCC_OscConfig+0x4a8>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a1a      	ldr	r2, [pc, #104]	; (8008f88 <HAL_RCC_OscConfig+0x4a8>)
 8008f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f24:	f7fc f97c 	bl	8005220 <HAL_GetTick>
 8008f28:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f2a:	e008      	b.n	8008f3e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008f2c:	f7fc f978 	bl	8005220 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	2b64      	cmp	r3, #100	; 0x64
 8008f38:	d901      	bls.n	8008f3e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e177      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f3e:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <HAL_RCC_OscConfig+0x4a8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0f0      	beq.n	8008f2c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d106      	bne.n	8008f60 <HAL_RCC_OscConfig+0x480>
 8008f52:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f56:	4a0b      	ldr	r2, [pc, #44]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008f58:	f043 0301 	orr.w	r3, r3, #1
 8008f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f5e:	e032      	b.n	8008fc6 <HAL_RCC_OscConfig+0x4e6>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d111      	bne.n	8008f8c <HAL_RCC_OscConfig+0x4ac>
 8008f68:	4b06      	ldr	r3, [pc, #24]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6c:	4a05      	ldr	r2, [pc, #20]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008f6e:	f023 0301 	bic.w	r3, r3, #1
 8008f72:	6713      	str	r3, [r2, #112]	; 0x70
 8008f74:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f78:	4a02      	ldr	r2, [pc, #8]	; (8008f84 <HAL_RCC_OscConfig+0x4a4>)
 8008f7a:	f023 0304 	bic.w	r3, r3, #4
 8008f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f80:	e021      	b.n	8008fc6 <HAL_RCC_OscConfig+0x4e6>
 8008f82:	bf00      	nop
 8008f84:	58024400 	.word	0x58024400
 8008f88:	58024800 	.word	0x58024800
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	2b05      	cmp	r3, #5
 8008f92:	d10c      	bne.n	8008fae <HAL_RCC_OscConfig+0x4ce>
 8008f94:	4b83      	ldr	r3, [pc, #524]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8008f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f98:	4a82      	ldr	r2, [pc, #520]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8008f9a:	f043 0304 	orr.w	r3, r3, #4
 8008f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8008fa0:	4b80      	ldr	r3, [pc, #512]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8008fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa4:	4a7f      	ldr	r2, [pc, #508]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8008fa6:	f043 0301 	orr.w	r3, r3, #1
 8008faa:	6713      	str	r3, [r2, #112]	; 0x70
 8008fac:	e00b      	b.n	8008fc6 <HAL_RCC_OscConfig+0x4e6>
 8008fae:	4b7d      	ldr	r3, [pc, #500]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8008fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb2:	4a7c      	ldr	r2, [pc, #496]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8008fb4:	f023 0301 	bic.w	r3, r3, #1
 8008fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8008fba:	4b7a      	ldr	r3, [pc, #488]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	4a79      	ldr	r2, [pc, #484]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8008fc0:	f023 0304 	bic.w	r3, r3, #4
 8008fc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d015      	beq.n	8008ffa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fce:	f7fc f927 	bl	8005220 <HAL_GetTick>
 8008fd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fd4:	e00a      	b.n	8008fec <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fd6:	f7fc f923 	bl	8005220 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d901      	bls.n	8008fec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e120      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fec:	4b6d      	ldr	r3, [pc, #436]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8008fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0ee      	beq.n	8008fd6 <HAL_RCC_OscConfig+0x4f6>
 8008ff8:	e014      	b.n	8009024 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ffa:	f7fc f911 	bl	8005220 <HAL_GetTick>
 8008ffe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009000:	e00a      	b.n	8009018 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009002:	f7fc f90d 	bl	8005220 <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009010:	4293      	cmp	r3, r2
 8009012:	d901      	bls.n	8009018 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e10a      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009018:	4b62      	ldr	r3, [pc, #392]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 800901a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800901c:	f003 0302 	and.w	r3, r3, #2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1ee      	bne.n	8009002 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 80ff 	beq.w	800922c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800902e:	4b5d      	ldr	r3, [pc, #372]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009036:	2b18      	cmp	r3, #24
 8009038:	f000 80ba 	beq.w	80091b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	2b02      	cmp	r3, #2
 8009042:	f040 8095 	bne.w	8009170 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009046:	4b57      	ldr	r3, [pc, #348]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a56      	ldr	r2, [pc, #344]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 800904c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009052:	f7fc f8e5 	bl	8005220 <HAL_GetTick>
 8009056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009058:	e008      	b.n	800906c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800905a:	f7fc f8e1 	bl	8005220 <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d901      	bls.n	800906c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e0e0      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800906c:	4b4d      	ldr	r3, [pc, #308]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f0      	bne.n	800905a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009078:	4b4a      	ldr	r3, [pc, #296]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 800907a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800907c:	4b4a      	ldr	r3, [pc, #296]	; (80091a8 <HAL_RCC_OscConfig+0x6c8>)
 800907e:	4013      	ands	r3, r2
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009088:	0112      	lsls	r2, r2, #4
 800908a:	430a      	orrs	r2, r1
 800908c:	4945      	ldr	r1, [pc, #276]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 800908e:	4313      	orrs	r3, r2
 8009090:	628b      	str	r3, [r1, #40]	; 0x28
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	3b01      	subs	r3, #1
 8009098:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a0:	3b01      	subs	r3, #1
 80090a2:	025b      	lsls	r3, r3, #9
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ac:	3b01      	subs	r3, #1
 80090ae:	041b      	lsls	r3, r3, #16
 80090b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090b4:	431a      	orrs	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ba:	3b01      	subs	r3, #1
 80090bc:	061b      	lsls	r3, r3, #24
 80090be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090c2:	4938      	ldr	r1, [pc, #224]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80090c8:	4b36      	ldr	r3, [pc, #216]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	4a35      	ldr	r2, [pc, #212]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 80090ce:	f023 0301 	bic.w	r3, r3, #1
 80090d2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090d4:	4b33      	ldr	r3, [pc, #204]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 80090d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090d8:	4b34      	ldr	r3, [pc, #208]	; (80091ac <HAL_RCC_OscConfig+0x6cc>)
 80090da:	4013      	ands	r3, r2
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80090e0:	00d2      	lsls	r2, r2, #3
 80090e2:	4930      	ldr	r1, [pc, #192]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80090e8:	4b2e      	ldr	r3, [pc, #184]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	f023 020c 	bic.w	r2, r3, #12
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f4:	492b      	ldr	r1, [pc, #172]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80090fa:	4b2a      	ldr	r3, [pc, #168]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 80090fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fe:	f023 0202 	bic.w	r2, r3, #2
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009106:	4927      	ldr	r1, [pc, #156]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009108:	4313      	orrs	r3, r2
 800910a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800910c:	4b25      	ldr	r3, [pc, #148]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	4a24      	ldr	r2, [pc, #144]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009116:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009118:	4b22      	ldr	r3, [pc, #136]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	4a21      	ldr	r2, [pc, #132]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 800911e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009122:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009124:	4b1f      	ldr	r3, [pc, #124]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	4a1e      	ldr	r2, [pc, #120]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 800912a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800912e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009130:	4b1c      	ldr	r3, [pc, #112]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	4a1b      	ldr	r2, [pc, #108]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009136:	f043 0301 	orr.w	r3, r3, #1
 800913a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800913c:	4b19      	ldr	r3, [pc, #100]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a18      	ldr	r2, [pc, #96]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009148:	f7fc f86a 	bl	8005220 <HAL_GetTick>
 800914c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800914e:	e008      	b.n	8009162 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009150:	f7fc f866 	bl	8005220 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b02      	cmp	r3, #2
 800915c:	d901      	bls.n	8009162 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e065      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009162:	4b10      	ldr	r3, [pc, #64]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d0f0      	beq.n	8009150 <HAL_RCC_OscConfig+0x670>
 800916e:	e05d      	b.n	800922c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009170:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a0b      	ldr	r2, [pc, #44]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800917a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800917c:	f7fc f850 	bl	8005220 <HAL_GetTick>
 8009180:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009182:	e008      	b.n	8009196 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009184:	f7fc f84c 	bl	8005220 <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b02      	cmp	r3, #2
 8009190:	d901      	bls.n	8009196 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e04b      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009196:	4b03      	ldr	r3, [pc, #12]	; (80091a4 <HAL_RCC_OscConfig+0x6c4>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f0      	bne.n	8009184 <HAL_RCC_OscConfig+0x6a4>
 80091a2:	e043      	b.n	800922c <HAL_RCC_OscConfig+0x74c>
 80091a4:	58024400 	.word	0x58024400
 80091a8:	fffffc0c 	.word	0xfffffc0c
 80091ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80091b0:	4b21      	ldr	r3, [pc, #132]	; (8009238 <HAL_RCC_OscConfig+0x758>)
 80091b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80091b6:	4b20      	ldr	r3, [pc, #128]	; (8009238 <HAL_RCC_OscConfig+0x758>)
 80091b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d031      	beq.n	8009228 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f003 0203 	and.w	r2, r3, #3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d12a      	bne.n	8009228 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	091b      	lsrs	r3, r3, #4
 80091d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091de:	429a      	cmp	r2, r3
 80091e0:	d122      	bne.n	8009228 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d11a      	bne.n	8009228 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	0a5b      	lsrs	r3, r3, #9
 80091f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009200:	429a      	cmp	r2, r3
 8009202:	d111      	bne.n	8009228 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	0c1b      	lsrs	r3, r3, #16
 8009208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009210:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009212:	429a      	cmp	r2, r3
 8009214:	d108      	bne.n	8009228 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	0e1b      	lsrs	r3, r3, #24
 800921a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009222:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009224:	429a      	cmp	r2, r3
 8009226:	d001      	beq.n	800922c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e000      	b.n	800922e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3730      	adds	r7, #48	; 0x30
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	58024400 	.word	0x58024400

0800923c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e19c      	b.n	800958a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009250:	4b8a      	ldr	r3, [pc, #552]	; (800947c <HAL_RCC_ClockConfig+0x240>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 030f 	and.w	r3, r3, #15
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	429a      	cmp	r2, r3
 800925c:	d910      	bls.n	8009280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800925e:	4b87      	ldr	r3, [pc, #540]	; (800947c <HAL_RCC_ClockConfig+0x240>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f023 020f 	bic.w	r2, r3, #15
 8009266:	4985      	ldr	r1, [pc, #532]	; (800947c <HAL_RCC_ClockConfig+0x240>)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	4313      	orrs	r3, r2
 800926c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800926e:	4b83      	ldr	r3, [pc, #524]	; (800947c <HAL_RCC_ClockConfig+0x240>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d001      	beq.n	8009280 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e184      	b.n	800958a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0304 	and.w	r3, r3, #4
 8009288:	2b00      	cmp	r3, #0
 800928a:	d010      	beq.n	80092ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691a      	ldr	r2, [r3, #16]
 8009290:	4b7b      	ldr	r3, [pc, #492]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009298:	429a      	cmp	r2, r3
 800929a:	d908      	bls.n	80092ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800929c:	4b78      	ldr	r3, [pc, #480]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	4975      	ldr	r1, [pc, #468]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0308 	and.w	r3, r3, #8
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d010      	beq.n	80092dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	695a      	ldr	r2, [r3, #20]
 80092be:	4b70      	ldr	r3, [pc, #448]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d908      	bls.n	80092dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092ca:	4b6d      	ldr	r3, [pc, #436]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	496a      	ldr	r1, [pc, #424]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0310 	and.w	r3, r3, #16
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d010      	beq.n	800930a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	699a      	ldr	r2, [r3, #24]
 80092ec:	4b64      	ldr	r3, [pc, #400]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d908      	bls.n	800930a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80092f8:	4b61      	ldr	r3, [pc, #388]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	495e      	ldr	r1, [pc, #376]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 8009306:	4313      	orrs	r3, r2
 8009308:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0320 	and.w	r3, r3, #32
 8009312:	2b00      	cmp	r3, #0
 8009314:	d010      	beq.n	8009338 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	69da      	ldr	r2, [r3, #28]
 800931a:	4b59      	ldr	r3, [pc, #356]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009322:	429a      	cmp	r2, r3
 8009324:	d908      	bls.n	8009338 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009326:	4b56      	ldr	r3, [pc, #344]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	4953      	ldr	r1, [pc, #332]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 8009334:	4313      	orrs	r3, r2
 8009336:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b00      	cmp	r3, #0
 8009342:	d010      	beq.n	8009366 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68da      	ldr	r2, [r3, #12]
 8009348:	4b4d      	ldr	r3, [pc, #308]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	f003 030f 	and.w	r3, r3, #15
 8009350:	429a      	cmp	r2, r3
 8009352:	d908      	bls.n	8009366 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009354:	4b4a      	ldr	r3, [pc, #296]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	f023 020f 	bic.w	r2, r3, #15
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	4947      	ldr	r1, [pc, #284]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 8009362:	4313      	orrs	r3, r2
 8009364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d055      	beq.n	800941e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009372:	4b43      	ldr	r3, [pc, #268]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	4940      	ldr	r1, [pc, #256]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 8009380:	4313      	orrs	r3, r2
 8009382:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	2b02      	cmp	r3, #2
 800938a:	d107      	bne.n	800939c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800938c:	4b3c      	ldr	r3, [pc, #240]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d121      	bne.n	80093dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e0f6      	b.n	800958a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d107      	bne.n	80093b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093a4:	4b36      	ldr	r3, [pc, #216]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d115      	bne.n	80093dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e0ea      	b.n	800958a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d107      	bne.n	80093cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093bc:	4b30      	ldr	r3, [pc, #192]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d109      	bne.n	80093dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e0de      	b.n	800958a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093cc:	4b2c      	ldr	r3, [pc, #176]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0304 	and.w	r3, r3, #4
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e0d6      	b.n	800958a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093dc:	4b28      	ldr	r3, [pc, #160]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	f023 0207 	bic.w	r2, r3, #7
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	4925      	ldr	r1, [pc, #148]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ee:	f7fb ff17 	bl	8005220 <HAL_GetTick>
 80093f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093f4:	e00a      	b.n	800940c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093f6:	f7fb ff13 	bl	8005220 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	f241 3288 	movw	r2, #5000	; 0x1388
 8009404:	4293      	cmp	r3, r2
 8009406:	d901      	bls.n	800940c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e0be      	b.n	800958a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800940c:	4b1c      	ldr	r3, [pc, #112]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	429a      	cmp	r2, r3
 800941c:	d1eb      	bne.n	80093f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b00      	cmp	r3, #0
 8009428:	d010      	beq.n	800944c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	4b14      	ldr	r3, [pc, #80]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	f003 030f 	and.w	r3, r3, #15
 8009436:	429a      	cmp	r2, r3
 8009438:	d208      	bcs.n	800944c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800943a:	4b11      	ldr	r3, [pc, #68]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	f023 020f 	bic.w	r2, r3, #15
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	490e      	ldr	r1, [pc, #56]	; (8009480 <HAL_RCC_ClockConfig+0x244>)
 8009448:	4313      	orrs	r3, r2
 800944a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800944c:	4b0b      	ldr	r3, [pc, #44]	; (800947c <HAL_RCC_ClockConfig+0x240>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 030f 	and.w	r3, r3, #15
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d214      	bcs.n	8009484 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800945a:	4b08      	ldr	r3, [pc, #32]	; (800947c <HAL_RCC_ClockConfig+0x240>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f023 020f 	bic.w	r2, r3, #15
 8009462:	4906      	ldr	r1, [pc, #24]	; (800947c <HAL_RCC_ClockConfig+0x240>)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	4313      	orrs	r3, r2
 8009468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800946a:	4b04      	ldr	r3, [pc, #16]	; (800947c <HAL_RCC_ClockConfig+0x240>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 030f 	and.w	r3, r3, #15
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d005      	beq.n	8009484 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e086      	b.n	800958a <HAL_RCC_ClockConfig+0x34e>
 800947c:	52002000 	.word	0x52002000
 8009480:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d010      	beq.n	80094b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	691a      	ldr	r2, [r3, #16]
 8009494:	4b3f      	ldr	r3, [pc, #252]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800949c:	429a      	cmp	r2, r3
 800949e:	d208      	bcs.n	80094b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094a0:	4b3c      	ldr	r3, [pc, #240]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	4939      	ldr	r1, [pc, #228]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0308 	and.w	r3, r3, #8
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d010      	beq.n	80094e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	695a      	ldr	r2, [r3, #20]
 80094c2:	4b34      	ldr	r3, [pc, #208]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d208      	bcs.n	80094e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094ce:	4b31      	ldr	r3, [pc, #196]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	492e      	ldr	r1, [pc, #184]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d010      	beq.n	800950e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	699a      	ldr	r2, [r3, #24]
 80094f0:	4b28      	ldr	r3, [pc, #160]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d208      	bcs.n	800950e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094fc:	4b25      	ldr	r3, [pc, #148]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	4922      	ldr	r1, [pc, #136]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 800950a:	4313      	orrs	r3, r2
 800950c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d010      	beq.n	800953c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	69da      	ldr	r2, [r3, #28]
 800951e:	4b1d      	ldr	r3, [pc, #116]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009526:	429a      	cmp	r2, r3
 8009528:	d208      	bcs.n	800953c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800952a:	4b1a      	ldr	r3, [pc, #104]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	4917      	ldr	r1, [pc, #92]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 8009538:	4313      	orrs	r3, r2
 800953a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800953c:	f000 f834 	bl	80095a8 <HAL_RCC_GetSysClockFreq>
 8009540:	4602      	mov	r2, r0
 8009542:	4b14      	ldr	r3, [pc, #80]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	0a1b      	lsrs	r3, r3, #8
 8009548:	f003 030f 	and.w	r3, r3, #15
 800954c:	4912      	ldr	r1, [pc, #72]	; (8009598 <HAL_RCC_ClockConfig+0x35c>)
 800954e:	5ccb      	ldrb	r3, [r1, r3]
 8009550:	f003 031f 	and.w	r3, r3, #31
 8009554:	fa22 f303 	lsr.w	r3, r2, r3
 8009558:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800955a:	4b0e      	ldr	r3, [pc, #56]	; (8009594 <HAL_RCC_ClockConfig+0x358>)
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	f003 030f 	and.w	r3, r3, #15
 8009562:	4a0d      	ldr	r2, [pc, #52]	; (8009598 <HAL_RCC_ClockConfig+0x35c>)
 8009564:	5cd3      	ldrb	r3, [r2, r3]
 8009566:	f003 031f 	and.w	r3, r3, #31
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	fa22 f303 	lsr.w	r3, r2, r3
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <HAL_RCC_ClockConfig+0x360>)
 8009572:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009574:	4a0a      	ldr	r2, [pc, #40]	; (80095a0 <HAL_RCC_ClockConfig+0x364>)
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800957a:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <HAL_RCC_ClockConfig+0x368>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4618      	mov	r0, r3
 8009580:	f7fb fe04 	bl	800518c <HAL_InitTick>
 8009584:	4603      	mov	r3, r0
 8009586:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009588:	7bfb      	ldrb	r3, [r7, #15]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	58024400 	.word	0x58024400
 8009598:	0800fe20 	.word	0x0800fe20
 800959c:	240001c4 	.word	0x240001c4
 80095a0:	240001c0 	.word	0x240001c0
 80095a4:	240001d0 	.word	0x240001d0

080095a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b089      	sub	sp, #36	; 0x24
 80095ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095ae:	4bb3      	ldr	r3, [pc, #716]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095b6:	2b18      	cmp	r3, #24
 80095b8:	f200 8155 	bhi.w	8009866 <HAL_RCC_GetSysClockFreq+0x2be>
 80095bc:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80095be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c2:	bf00      	nop
 80095c4:	08009629 	.word	0x08009629
 80095c8:	08009867 	.word	0x08009867
 80095cc:	08009867 	.word	0x08009867
 80095d0:	08009867 	.word	0x08009867
 80095d4:	08009867 	.word	0x08009867
 80095d8:	08009867 	.word	0x08009867
 80095dc:	08009867 	.word	0x08009867
 80095e0:	08009867 	.word	0x08009867
 80095e4:	0800964f 	.word	0x0800964f
 80095e8:	08009867 	.word	0x08009867
 80095ec:	08009867 	.word	0x08009867
 80095f0:	08009867 	.word	0x08009867
 80095f4:	08009867 	.word	0x08009867
 80095f8:	08009867 	.word	0x08009867
 80095fc:	08009867 	.word	0x08009867
 8009600:	08009867 	.word	0x08009867
 8009604:	08009655 	.word	0x08009655
 8009608:	08009867 	.word	0x08009867
 800960c:	08009867 	.word	0x08009867
 8009610:	08009867 	.word	0x08009867
 8009614:	08009867 	.word	0x08009867
 8009618:	08009867 	.word	0x08009867
 800961c:	08009867 	.word	0x08009867
 8009620:	08009867 	.word	0x08009867
 8009624:	0800965b 	.word	0x0800965b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009628:	4b94      	ldr	r3, [pc, #592]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0320 	and.w	r3, r3, #32
 8009630:	2b00      	cmp	r3, #0
 8009632:	d009      	beq.n	8009648 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009634:	4b91      	ldr	r3, [pc, #580]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	08db      	lsrs	r3, r3, #3
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	4a90      	ldr	r2, [pc, #576]	; (8009880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009640:	fa22 f303 	lsr.w	r3, r2, r3
 8009644:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009646:	e111      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009648:	4b8d      	ldr	r3, [pc, #564]	; (8009880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800964a:	61bb      	str	r3, [r7, #24]
    break;
 800964c:	e10e      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800964e:	4b8d      	ldr	r3, [pc, #564]	; (8009884 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009650:	61bb      	str	r3, [r7, #24]
    break;
 8009652:	e10b      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009654:	4b8c      	ldr	r3, [pc, #560]	; (8009888 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009656:	61bb      	str	r3, [r7, #24]
    break;
 8009658:	e108      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800965a:	4b88      	ldr	r3, [pc, #544]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009664:	4b85      	ldr	r3, [pc, #532]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009668:	091b      	lsrs	r3, r3, #4
 800966a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800966e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009670:	4b82      	ldr	r3, [pc, #520]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800967a:	4b80      	ldr	r3, [pc, #512]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800967c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967e:	08db      	lsrs	r3, r3, #3
 8009680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	fb02 f303 	mul.w	r3, r2, r3
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009692:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 80e1 	beq.w	8009860 <HAL_RCC_GetSysClockFreq+0x2b8>
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	f000 8083 	beq.w	80097ac <HAL_RCC_GetSysClockFreq+0x204>
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	f200 80a1 	bhi.w	80097f0 <HAL_RCC_GetSysClockFreq+0x248>
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <HAL_RCC_GetSysClockFreq+0x114>
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d056      	beq.n	8009768 <HAL_RCC_GetSysClockFreq+0x1c0>
 80096ba:	e099      	b.n	80097f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096bc:	4b6f      	ldr	r3, [pc, #444]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0320 	and.w	r3, r3, #32
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d02d      	beq.n	8009724 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096c8:	4b6c      	ldr	r3, [pc, #432]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	08db      	lsrs	r3, r3, #3
 80096ce:	f003 0303 	and.w	r3, r3, #3
 80096d2:	4a6b      	ldr	r2, [pc, #428]	; (8009880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80096d4:	fa22 f303 	lsr.w	r3, r2, r3
 80096d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f2:	4b62      	ldr	r3, [pc, #392]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fa:	ee07 3a90 	vmov	s15, r3
 80096fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009702:	ed97 6a02 	vldr	s12, [r7, #8]
 8009706:	eddf 5a61 	vldr	s11, [pc, #388]	; 800988c <HAL_RCC_GetSysClockFreq+0x2e4>
 800970a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009722:	e087      	b.n	8009834 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009890 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009736:	4b51      	ldr	r3, [pc, #324]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973e:	ee07 3a90 	vmov	s15, r3
 8009742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009746:	ed97 6a02 	vldr	s12, [r7, #8]
 800974a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800988c <HAL_RCC_GetSysClockFreq+0x2e4>
 800974e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800975a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800975e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009766:	e065      	b.n	8009834 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	ee07 3a90 	vmov	s15, r3
 800976e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009772:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009894 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800977a:	4b40      	ldr	r3, [pc, #256]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800977c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009782:	ee07 3a90 	vmov	s15, r3
 8009786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800978a:	ed97 6a02 	vldr	s12, [r7, #8]
 800978e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800988c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800979a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800979e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097aa:	e043      	b.n	8009834 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009898 <HAL_RCC_GetSysClockFreq+0x2f0>
 80097ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097be:	4b2f      	ldr	r3, [pc, #188]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c6:	ee07 3a90 	vmov	s15, r3
 80097ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80097d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800988c <HAL_RCC_GetSysClockFreq+0x2e4>
 80097d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097ee:	e021      	b.n	8009834 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009894 <HAL_RCC_GetSysClockFreq+0x2ec>
 80097fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009802:	4b1e      	ldr	r3, [pc, #120]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800980a:	ee07 3a90 	vmov	s15, r3
 800980e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009812:	ed97 6a02 	vldr	s12, [r7, #8]
 8009816:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800988c <HAL_RCC_GetSysClockFreq+0x2e4>
 800981a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800981e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800982a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800982e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009832:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009834:	4b11      	ldr	r3, [pc, #68]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009838:	0a5b      	lsrs	r3, r3, #9
 800983a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983e:	3301      	adds	r3, #1
 8009840:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	ee07 3a90 	vmov	s15, r3
 8009848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800984c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009858:	ee17 3a90 	vmov	r3, s15
 800985c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800985e:	e005      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	61bb      	str	r3, [r7, #24]
    break;
 8009864:	e002      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009866:	4b07      	ldr	r3, [pc, #28]	; (8009884 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009868:	61bb      	str	r3, [r7, #24]
    break;
 800986a:	bf00      	nop
  }

  return sysclockfreq;
 800986c:	69bb      	ldr	r3, [r7, #24]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3724      	adds	r7, #36	; 0x24
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	58024400 	.word	0x58024400
 8009880:	03d09000 	.word	0x03d09000
 8009884:	003d0900 	.word	0x003d0900
 8009888:	007a1200 	.word	0x007a1200
 800988c:	46000000 	.word	0x46000000
 8009890:	4c742400 	.word	0x4c742400
 8009894:	4a742400 	.word	0x4a742400
 8009898:	4af42400 	.word	0x4af42400

0800989c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80098a2:	f7ff fe81 	bl	80095a8 <HAL_RCC_GetSysClockFreq>
 80098a6:	4602      	mov	r2, r0
 80098a8:	4b10      	ldr	r3, [pc, #64]	; (80098ec <HAL_RCC_GetHCLKFreq+0x50>)
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	0a1b      	lsrs	r3, r3, #8
 80098ae:	f003 030f 	and.w	r3, r3, #15
 80098b2:	490f      	ldr	r1, [pc, #60]	; (80098f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80098b4:	5ccb      	ldrb	r3, [r1, r3]
 80098b6:	f003 031f 	and.w	r3, r3, #31
 80098ba:	fa22 f303 	lsr.w	r3, r2, r3
 80098be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80098c0:	4b0a      	ldr	r3, [pc, #40]	; (80098ec <HAL_RCC_GetHCLKFreq+0x50>)
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	f003 030f 	and.w	r3, r3, #15
 80098c8:	4a09      	ldr	r2, [pc, #36]	; (80098f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80098ca:	5cd3      	ldrb	r3, [r2, r3]
 80098cc:	f003 031f 	and.w	r3, r3, #31
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	fa22 f303 	lsr.w	r3, r2, r3
 80098d6:	4a07      	ldr	r2, [pc, #28]	; (80098f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80098d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098da:	4a07      	ldr	r2, [pc, #28]	; (80098f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80098e0:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80098e2:	681b      	ldr	r3, [r3, #0]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	58024400 	.word	0x58024400
 80098f0:	0800fe20 	.word	0x0800fe20
 80098f4:	240001c4 	.word	0x240001c4
 80098f8:	240001c0 	.word	0x240001c0

080098fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009900:	f7ff ffcc 	bl	800989c <HAL_RCC_GetHCLKFreq>
 8009904:	4602      	mov	r2, r0
 8009906:	4b06      	ldr	r3, [pc, #24]	; (8009920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	091b      	lsrs	r3, r3, #4
 800990c:	f003 0307 	and.w	r3, r3, #7
 8009910:	4904      	ldr	r1, [pc, #16]	; (8009924 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009912:	5ccb      	ldrb	r3, [r1, r3]
 8009914:	f003 031f 	and.w	r3, r3, #31
 8009918:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800991c:	4618      	mov	r0, r3
 800991e:	bd80      	pop	{r7, pc}
 8009920:	58024400 	.word	0x58024400
 8009924:	0800fe20 	.word	0x0800fe20

08009928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800992c:	f7ff ffb6 	bl	800989c <HAL_RCC_GetHCLKFreq>
 8009930:	4602      	mov	r2, r0
 8009932:	4b06      	ldr	r3, [pc, #24]	; (800994c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009934:	69db      	ldr	r3, [r3, #28]
 8009936:	0a1b      	lsrs	r3, r3, #8
 8009938:	f003 0307 	and.w	r3, r3, #7
 800993c:	4904      	ldr	r1, [pc, #16]	; (8009950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800993e:	5ccb      	ldrb	r3, [r1, r3]
 8009940:	f003 031f 	and.w	r3, r3, #31
 8009944:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009948:	4618      	mov	r0, r3
 800994a:	bd80      	pop	{r7, pc}
 800994c:	58024400 	.word	0x58024400
 8009950:	0800fe20 	.word	0x0800fe20

08009954 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800995c:	2300      	movs	r3, #0
 800995e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009960:	2300      	movs	r3, #0
 8009962:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d03f      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009974:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009978:	d02a      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800997a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800997e:	d824      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009984:	d018      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800998a:	d81e      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009994:	d007      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009996:	e018      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009998:	4ba4      	ldr	r3, [pc, #656]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	4aa3      	ldr	r2, [pc, #652]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800999e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099a4:	e015      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3304      	adds	r3, #4
 80099aa:	2102      	movs	r1, #2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 f989 	bl	800acc4 <RCCEx_PLL2_Config>
 80099b2:	4603      	mov	r3, r0
 80099b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099b6:	e00c      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3324      	adds	r3, #36	; 0x24
 80099bc:	2102      	movs	r1, #2
 80099be:	4618      	mov	r0, r3
 80099c0:	f001 fa32 	bl	800ae28 <RCCEx_PLL3_Config>
 80099c4:	4603      	mov	r3, r0
 80099c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099c8:	e003      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	75fb      	strb	r3, [r7, #23]
      break;
 80099ce:	e000      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80099d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d109      	bne.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80099d8:	4b94      	ldr	r3, [pc, #592]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099e4:	4991      	ldr	r1, [pc, #580]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	650b      	str	r3, [r1, #80]	; 0x50
 80099ea:	e001      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d03d      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a00:	2b04      	cmp	r3, #4
 8009a02:	d826      	bhi.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009a04:	a201      	add	r2, pc, #4	; (adr r2, 8009a0c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0a:	bf00      	nop
 8009a0c:	08009a21 	.word	0x08009a21
 8009a10:	08009a2f 	.word	0x08009a2f
 8009a14:	08009a41 	.word	0x08009a41
 8009a18:	08009a59 	.word	0x08009a59
 8009a1c:	08009a59 	.word	0x08009a59
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a20:	4b82      	ldr	r3, [pc, #520]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	4a81      	ldr	r2, [pc, #516]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a2c:	e015      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	3304      	adds	r3, #4
 8009a32:	2100      	movs	r1, #0
 8009a34:	4618      	mov	r0, r3
 8009a36:	f001 f945 	bl	800acc4 <RCCEx_PLL2_Config>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a3e:	e00c      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3324      	adds	r3, #36	; 0x24
 8009a44:	2100      	movs	r1, #0
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 f9ee 	bl	800ae28 <RCCEx_PLL3_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a50:	e003      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	75fb      	strb	r3, [r7, #23]
      break;
 8009a56:	e000      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a5a:	7dfb      	ldrb	r3, [r7, #23]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d109      	bne.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a60:	4b72      	ldr	r3, [pc, #456]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a64:	f023 0207 	bic.w	r2, r3, #7
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6c:	496f      	ldr	r1, [pc, #444]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	650b      	str	r3, [r1, #80]	; 0x50
 8009a72:	e001      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a74:	7dfb      	ldrb	r3, [r7, #23]
 8009a76:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d051      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a8a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009a8e:	d036      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009a90:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009a94:	d830      	bhi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009a96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a9a:	d032      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009a9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009aa0:	d82a      	bhi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009aa2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009aa6:	d02e      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009aa8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009aac:	d824      	bhi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ab2:	d018      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ab8:	d81e      	bhi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d003      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ac2:	d007      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009ac4:	e018      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ac6:	4b59      	ldr	r3, [pc, #356]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	4a58      	ldr	r2, [pc, #352]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ad2:	e019      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f001 f8f2 	bl	800acc4 <RCCEx_PLL2_Config>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009ae4:	e010      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3324      	adds	r3, #36	; 0x24
 8009aea:	2100      	movs	r1, #0
 8009aec:	4618      	mov	r0, r3
 8009aee:	f001 f99b 	bl	800ae28 <RCCEx_PLL3_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009af6:	e007      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	75fb      	strb	r3, [r7, #23]
      break;
 8009afc:	e004      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009afe:	bf00      	nop
 8009b00:	e002      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009b02:	bf00      	nop
 8009b04:	e000      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b0e:	4b47      	ldr	r3, [pc, #284]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b12:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b1c:	4943      	ldr	r1, [pc, #268]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	658b      	str	r3, [r1, #88]	; 0x58
 8009b22:	e001      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
 8009b26:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d051      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b3a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009b3e:	d036      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009b40:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009b44:	d830      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b4a:	d032      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b50:	d82a      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b56:	d02e      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009b58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b5c:	d824      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b62:	d018      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b68:	d81e      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009b6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b72:	d007      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009b74:	e018      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b76:	4b2d      	ldr	r3, [pc, #180]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7a:	4a2c      	ldr	r2, [pc, #176]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b82:	e019      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3304      	adds	r3, #4
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 f89a 	bl	800acc4 <RCCEx_PLL2_Config>
 8009b90:	4603      	mov	r3, r0
 8009b92:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009b94:	e010      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3324      	adds	r3, #36	; 0x24
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f001 f943 	bl	800ae28 <RCCEx_PLL3_Config>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ba6:	e007      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	75fb      	strb	r3, [r7, #23]
      break;
 8009bac:	e004      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009bae:	bf00      	nop
 8009bb0:	e002      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009bb2:	bf00      	nop
 8009bb4:	e000      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10a      	bne.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009bbe:	4b1b      	ldr	r3, [pc, #108]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009bcc:	4917      	ldr	r1, [pc, #92]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	658b      	str	r3, [r1, #88]	; 0x58
 8009bd2:	e001      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d035      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be8:	2b30      	cmp	r3, #48	; 0x30
 8009bea:	d01c      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009bec:	2b30      	cmp	r3, #48	; 0x30
 8009bee:	d817      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009bf0:	2b20      	cmp	r3, #32
 8009bf2:	d00c      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009bf4:	2b20      	cmp	r3, #32
 8009bf6:	d813      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d019      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009bfc:	2b10      	cmp	r3, #16
 8009bfe:	d10f      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c00:	4b0a      	ldr	r3, [pc, #40]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	4a09      	ldr	r2, [pc, #36]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009c0c:	e011      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	3304      	adds	r3, #4
 8009c12:	2102      	movs	r1, #2
 8009c14:	4618      	mov	r0, r3
 8009c16:	f001 f855 	bl	800acc4 <RCCEx_PLL2_Config>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009c1e:	e008      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	75fb      	strb	r3, [r7, #23]
      break;
 8009c24:	e005      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009c26:	bf00      	nop
 8009c28:	e003      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009c2a:	bf00      	nop
 8009c2c:	58024400 	.word	0x58024400
      break;
 8009c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d109      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009c38:	4ba3      	ldr	r3, [pc, #652]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c44:	49a0      	ldr	r1, [pc, #640]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c4a:	e001      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
 8009c4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d047      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c64:	d030      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c6a:	d82a      	bhi.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c70:	d02c      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009c72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c76:	d824      	bhi.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7c:	d018      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c82:	d81e      	bhi.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d003      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c8c:	d007      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009c8e:	e018      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c90:	4b8d      	ldr	r3, [pc, #564]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	4a8c      	ldr	r2, [pc, #560]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009c9c:	e017      	b.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f001 f80d 	bl	800acc4 <RCCEx_PLL2_Config>
 8009caa:	4603      	mov	r3, r0
 8009cac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009cae:	e00e      	b.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3324      	adds	r3, #36	; 0x24
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f001 f8b6 	bl	800ae28 <RCCEx_PLL3_Config>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009cc0:	e005      	b.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc6:	e002      	b.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009cc8:	bf00      	nop
 8009cca:	e000      	b.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d109      	bne.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009cd4:	4b7c      	ldr	r3, [pc, #496]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cd8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce0:	4979      	ldr	r1, [pc, #484]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	650b      	str	r3, [r1, #80]	; 0x50
 8009ce6:	e001      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d049      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d00:	d02e      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009d02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d06:	d828      	bhi.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d0c:	d02a      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009d0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d12:	d822      	bhi.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d18:	d026      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009d1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d1e:	d81c      	bhi.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d24:	d010      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d2a:	d816      	bhi.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d01d      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d34:	d111      	bne.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 ffc1 	bl	800acc4 <RCCEx_PLL2_Config>
 8009d42:	4603      	mov	r3, r0
 8009d44:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009d46:	e012      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3324      	adds	r3, #36	; 0x24
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 f86a 	bl	800ae28 <RCCEx_PLL3_Config>
 8009d54:	4603      	mov	r3, r0
 8009d56:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009d58:	e009      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d5e:	e006      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d60:	bf00      	nop
 8009d62:	e004      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d64:	bf00      	nop
 8009d66:	e002      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d68:	bf00      	nop
 8009d6a:	e000      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d109      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d74:	4b54      	ldr	r3, [pc, #336]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d78:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d80:	4951      	ldr	r1, [pc, #324]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	650b      	str	r3, [r1, #80]	; 0x50
 8009d86:	e001      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
 8009d8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d04b      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009da2:	d02e      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009da8:	d828      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dae:	d02a      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009db4:	d822      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009db6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dba:	d026      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009dbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dc0:	d81c      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dc6:	d010      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dcc:	d816      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d01d      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dd6:	d111      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	2101      	movs	r1, #1
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 ff70 	bl	800acc4 <RCCEx_PLL2_Config>
 8009de4:	4603      	mov	r3, r0
 8009de6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009de8:	e012      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	3324      	adds	r3, #36	; 0x24
 8009dee:	2101      	movs	r1, #1
 8009df0:	4618      	mov	r0, r3
 8009df2:	f001 f819 	bl	800ae28 <RCCEx_PLL3_Config>
 8009df6:	4603      	mov	r3, r0
 8009df8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009dfa:	e009      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8009e00:	e006      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009e02:	bf00      	nop
 8009e04:	e004      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009e06:	bf00      	nop
 8009e08:	e002      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009e0a:	bf00      	nop
 8009e0c:	e000      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10a      	bne.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009e16:	4b2c      	ldr	r3, [pc, #176]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e24:	4928      	ldr	r1, [pc, #160]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	658b      	str	r3, [r1, #88]	; 0x58
 8009e2a:	e001      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d02f      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e44:	d00e      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e4a:	d814      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d015      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e54:	d10f      	bne.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e56:	4b1c      	ldr	r3, [pc, #112]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	4a1b      	ldr	r2, [pc, #108]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009e62:	e00c      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3304      	adds	r3, #4
 8009e68:	2101      	movs	r1, #1
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 ff2a 	bl	800acc4 <RCCEx_PLL2_Config>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009e74:	e003      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7a:	e000      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d109      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e84:	4b10      	ldr	r3, [pc, #64]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e90:	490d      	ldr	r1, [pc, #52]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e92:	4313      	orrs	r3, r2
 8009e94:	650b      	str	r3, [r1, #80]	; 0x50
 8009e96:	e001      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d034      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eac:	2b03      	cmp	r3, #3
 8009eae:	d81d      	bhi.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009eb0:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb6:	bf00      	nop
 8009eb8:	08009ef3 	.word	0x08009ef3
 8009ebc:	08009ecd 	.word	0x08009ecd
 8009ec0:	08009edb 	.word	0x08009edb
 8009ec4:	08009ef3 	.word	0x08009ef3
 8009ec8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ecc:	4bb1      	ldr	r3, [pc, #708]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	4ab0      	ldr	r2, [pc, #704]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ed8:	e00c      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3304      	adds	r3, #4
 8009ede:	2102      	movs	r1, #2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 feef 	bl	800acc4 <RCCEx_PLL2_Config>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009eea:	e003      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef0:	e000      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d109      	bne.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009efa:	4ba6      	ldr	r3, [pc, #664]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009efe:	f023 0203 	bic.w	r2, r3, #3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f06:	49a3      	ldr	r1, [pc, #652]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f0c:	e001      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
 8009f10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 8086 	beq.w	800a02c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f20:	4b9d      	ldr	r3, [pc, #628]	; (800a198 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a9c      	ldr	r2, [pc, #624]	; (800a198 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f2c:	f7fb f978 	bl	8005220 <HAL_GetTick>
 8009f30:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f32:	e009      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f34:	f7fb f974 	bl	8005220 <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	2b64      	cmp	r3, #100	; 0x64
 8009f40:	d902      	bls.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	75fb      	strb	r3, [r7, #23]
        break;
 8009f46:	e005      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f48:	4b93      	ldr	r3, [pc, #588]	; (800a198 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0ef      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d166      	bne.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f5a:	4b8e      	ldr	r3, [pc, #568]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f64:	4053      	eors	r3, r2
 8009f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d013      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f6e:	4b89      	ldr	r3, [pc, #548]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f76:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f78:	4b86      	ldr	r3, [pc, #536]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7c:	4a85      	ldr	r2, [pc, #532]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f82:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f84:	4b83      	ldr	r3, [pc, #524]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f88:	4a82      	ldr	r2, [pc, #520]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f8e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f90:	4a80      	ldr	r2, [pc, #512]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fa0:	d115      	bne.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa2:	f7fb f93d 	bl	8005220 <HAL_GetTick>
 8009fa6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fa8:	e00b      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009faa:	f7fb f939 	bl	8005220 <HAL_GetTick>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d902      	bls.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	75fb      	strb	r3, [r7, #23]
            break;
 8009fc0:	e005      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fc2:	4b74      	ldr	r3, [pc, #464]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc6:	f003 0302 	and.w	r3, r3, #2
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0ed      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d126      	bne.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fe2:	d10d      	bne.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009fe4:	4b6b      	ldr	r3, [pc, #428]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ff2:	0919      	lsrs	r1, r3, #4
 8009ff4:	4b69      	ldr	r3, [pc, #420]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009ff6:	400b      	ands	r3, r1
 8009ff8:	4966      	ldr	r1, [pc, #408]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	610b      	str	r3, [r1, #16]
 8009ffe:	e005      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a000:	4b64      	ldr	r3, [pc, #400]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	4a63      	ldr	r2, [pc, #396]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a006:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a00a:	6113      	str	r3, [r2, #16]
 800a00c:	4b61      	ldr	r3, [pc, #388]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a00e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a01a:	495e      	ldr	r1, [pc, #376]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	670b      	str	r3, [r1, #112]	; 0x70
 800a020:	e004      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
 800a024:	75bb      	strb	r3, [r7, #22]
 800a026:	e001      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a028:	7dfb      	ldrb	r3, [r7, #23]
 800a02a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	d07e      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a03c:	2b28      	cmp	r3, #40	; 0x28
 800a03e:	d867      	bhi.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a040:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800a117 	.word	0x0800a117
 800a04c:	0800a111 	.word	0x0800a111
 800a050:	0800a111 	.word	0x0800a111
 800a054:	0800a111 	.word	0x0800a111
 800a058:	0800a111 	.word	0x0800a111
 800a05c:	0800a111 	.word	0x0800a111
 800a060:	0800a111 	.word	0x0800a111
 800a064:	0800a111 	.word	0x0800a111
 800a068:	0800a0ed 	.word	0x0800a0ed
 800a06c:	0800a111 	.word	0x0800a111
 800a070:	0800a111 	.word	0x0800a111
 800a074:	0800a111 	.word	0x0800a111
 800a078:	0800a111 	.word	0x0800a111
 800a07c:	0800a111 	.word	0x0800a111
 800a080:	0800a111 	.word	0x0800a111
 800a084:	0800a111 	.word	0x0800a111
 800a088:	0800a0ff 	.word	0x0800a0ff
 800a08c:	0800a111 	.word	0x0800a111
 800a090:	0800a111 	.word	0x0800a111
 800a094:	0800a111 	.word	0x0800a111
 800a098:	0800a111 	.word	0x0800a111
 800a09c:	0800a111 	.word	0x0800a111
 800a0a0:	0800a111 	.word	0x0800a111
 800a0a4:	0800a111 	.word	0x0800a111
 800a0a8:	0800a117 	.word	0x0800a117
 800a0ac:	0800a111 	.word	0x0800a111
 800a0b0:	0800a111 	.word	0x0800a111
 800a0b4:	0800a111 	.word	0x0800a111
 800a0b8:	0800a111 	.word	0x0800a111
 800a0bc:	0800a111 	.word	0x0800a111
 800a0c0:	0800a111 	.word	0x0800a111
 800a0c4:	0800a111 	.word	0x0800a111
 800a0c8:	0800a117 	.word	0x0800a117
 800a0cc:	0800a111 	.word	0x0800a111
 800a0d0:	0800a111 	.word	0x0800a111
 800a0d4:	0800a111 	.word	0x0800a111
 800a0d8:	0800a111 	.word	0x0800a111
 800a0dc:	0800a111 	.word	0x0800a111
 800a0e0:	0800a111 	.word	0x0800a111
 800a0e4:	0800a111 	.word	0x0800a111
 800a0e8:	0800a117 	.word	0x0800a117
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 fde6 	bl	800acc4 <RCCEx_PLL2_Config>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a0fc:	e00c      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	3324      	adds	r3, #36	; 0x24
 800a102:	2101      	movs	r1, #1
 800a104:	4618      	mov	r0, r3
 800a106:	f000 fe8f 	bl	800ae28 <RCCEx_PLL3_Config>
 800a10a:	4603      	mov	r3, r0
 800a10c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a10e:	e003      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	75fb      	strb	r3, [r7, #23]
      break;
 800a114:	e000      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a116:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d109      	bne.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a11e:	4b1d      	ldr	r3, [pc, #116]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a122:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a12a:	491a      	ldr	r1, [pc, #104]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	654b      	str	r3, [r1, #84]	; 0x54
 800a130:	e001      	b.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a132:	7dfb      	ldrb	r3, [r7, #23]
 800a134:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 0302 	and.w	r3, r3, #2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d03e      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a146:	2b05      	cmp	r3, #5
 800a148:	d820      	bhi.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a14a:	a201      	add	r2, pc, #4	; (adr r2, 800a150 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a150:	0800a1a1 	.word	0x0800a1a1
 800a154:	0800a169 	.word	0x0800a169
 800a158:	0800a17b 	.word	0x0800a17b
 800a15c:	0800a1a1 	.word	0x0800a1a1
 800a160:	0800a1a1 	.word	0x0800a1a1
 800a164:	0800a1a1 	.word	0x0800a1a1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3304      	adds	r3, #4
 800a16c:	2101      	movs	r1, #1
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 fda8 	bl	800acc4 <RCCEx_PLL2_Config>
 800a174:	4603      	mov	r3, r0
 800a176:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a178:	e013      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3324      	adds	r3, #36	; 0x24
 800a17e:	2101      	movs	r1, #1
 800a180:	4618      	mov	r0, r3
 800a182:	f000 fe51 	bl	800ae28 <RCCEx_PLL3_Config>
 800a186:	4603      	mov	r3, r0
 800a188:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a18a:	e00a      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]
      break;
 800a190:	e007      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a192:	bf00      	nop
 800a194:	58024400 	.word	0x58024400
 800a198:	58024800 	.word	0x58024800
 800a19c:	00ffffcf 	.word	0x00ffffcf
      break;
 800a1a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d109      	bne.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a1a8:	4b9f      	ldr	r3, [pc, #636]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a1aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ac:	f023 0207 	bic.w	r2, r3, #7
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b4:	499c      	ldr	r1, [pc, #624]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	654b      	str	r3, [r1, #84]	; 0x54
 800a1ba:	e001      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1bc:	7dfb      	ldrb	r3, [r7, #23]
 800a1be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d039      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1d2:	2b05      	cmp	r3, #5
 800a1d4:	d820      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a1d6:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1dc:	0800a21f 	.word	0x0800a21f
 800a1e0:	0800a1f5 	.word	0x0800a1f5
 800a1e4:	0800a207 	.word	0x0800a207
 800a1e8:	0800a21f 	.word	0x0800a21f
 800a1ec:	0800a21f 	.word	0x0800a21f
 800a1f0:	0800a21f 	.word	0x0800a21f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 fd62 	bl	800acc4 <RCCEx_PLL2_Config>
 800a200:	4603      	mov	r3, r0
 800a202:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a204:	e00c      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3324      	adds	r3, #36	; 0x24
 800a20a:	2101      	movs	r1, #1
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 fe0b 	bl	800ae28 <RCCEx_PLL3_Config>
 800a212:	4603      	mov	r3, r0
 800a214:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a216:	e003      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	75fb      	strb	r3, [r7, #23]
      break;
 800a21c:	e000      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a21e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10a      	bne.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a226:	4b80      	ldr	r3, [pc, #512]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22a:	f023 0207 	bic.w	r2, r3, #7
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a234:	497c      	ldr	r1, [pc, #496]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a236:	4313      	orrs	r3, r2
 800a238:	658b      	str	r3, [r1, #88]	; 0x58
 800a23a:	e001      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0320 	and.w	r3, r3, #32
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d04b      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a256:	d02e      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a25c:	d828      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a25e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a262:	d02a      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a268:	d822      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a26a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a26e:	d026      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a270:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a274:	d81c      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a27a:	d010      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a27c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a280:	d816      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d01d      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a28a:	d111      	bne.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3304      	adds	r3, #4
 800a290:	2100      	movs	r1, #0
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fd16 	bl	800acc4 <RCCEx_PLL2_Config>
 800a298:	4603      	mov	r3, r0
 800a29a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a29c:	e012      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3324      	adds	r3, #36	; 0x24
 800a2a2:	2102      	movs	r1, #2
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 fdbf 	bl	800ae28 <RCCEx_PLL3_Config>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a2ae:	e009      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b4:	e006      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2b6:	bf00      	nop
 800a2b8:	e004      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2ba:	bf00      	nop
 800a2bc:	e002      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2be:	bf00      	nop
 800a2c0:	e000      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10a      	bne.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2ca:	4b57      	ldr	r3, [pc, #348]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d8:	4953      	ldr	r1, [pc, #332]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	654b      	str	r3, [r1, #84]	; 0x54
 800a2de:	e001      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
 800a2e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d04b      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2fa:	d02e      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a2fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a300:	d828      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a306:	d02a      	beq.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a30c:	d822      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a30e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a312:	d026      	beq.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a318:	d81c      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a31a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31e:	d010      	beq.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a324:	d816      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d01d      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a32a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a32e:	d111      	bne.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3304      	adds	r3, #4
 800a334:	2100      	movs	r1, #0
 800a336:	4618      	mov	r0, r3
 800a338:	f000 fcc4 	bl	800acc4 <RCCEx_PLL2_Config>
 800a33c:	4603      	mov	r3, r0
 800a33e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a340:	e012      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3324      	adds	r3, #36	; 0x24
 800a346:	2102      	movs	r1, #2
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 fd6d 	bl	800ae28 <RCCEx_PLL3_Config>
 800a34e:	4603      	mov	r3, r0
 800a350:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a352:	e009      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	75fb      	strb	r3, [r7, #23]
      break;
 800a358:	e006      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a35a:	bf00      	nop
 800a35c:	e004      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a35e:	bf00      	nop
 800a360:	e002      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a362:	bf00      	nop
 800a364:	e000      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a366:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a36e:	4b2e      	ldr	r3, [pc, #184]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a372:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a37c:	492a      	ldr	r1, [pc, #168]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	658b      	str	r3, [r1, #88]	; 0x58
 800a382:	e001      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a384:	7dfb      	ldrb	r3, [r7, #23]
 800a386:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a390:	2b00      	cmp	r3, #0
 800a392:	d04d      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a39a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a39e:	d02e      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a3a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3a4:	d828      	bhi.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3aa:	d02a      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a3ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3b0:	d822      	bhi.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3b6:	d026      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a3b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3bc:	d81c      	bhi.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3c2:	d010      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a3c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3c8:	d816      	bhi.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d01d      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a3ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3d2:	d111      	bne.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	2100      	movs	r1, #0
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 fc72 	bl	800acc4 <RCCEx_PLL2_Config>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a3e4:	e012      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3324      	adds	r3, #36	; 0x24
 800a3ea:	2102      	movs	r1, #2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 fd1b 	bl	800ae28 <RCCEx_PLL3_Config>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a3f6:	e009      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a3fc:	e006      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a3fe:	bf00      	nop
 800a400:	e004      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a402:	bf00      	nop
 800a404:	e002      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a406:	bf00      	nop
 800a408:	e000      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a40a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10c      	bne.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a412:	4b05      	ldr	r3, [pc, #20]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a420:	4901      	ldr	r1, [pc, #4]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a422:	4313      	orrs	r3, r2
 800a424:	658b      	str	r3, [r1, #88]	; 0x58
 800a426:	e003      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0308 	and.w	r3, r3, #8
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d018      	beq.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a444:	d10a      	bne.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3324      	adds	r3, #36	; 0x24
 800a44a:	2102      	movs	r1, #2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fceb 	bl	800ae28 <RCCEx_PLL3_Config>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a45c:	4b8a      	ldr	r3, [pc, #552]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a45e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a460:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a468:	4987      	ldr	r1, [pc, #540]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 0310 	and.w	r3, r3, #16
 800a476:	2b00      	cmp	r3, #0
 800a478:	d01a      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a484:	d10a      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	3324      	adds	r3, #36	; 0x24
 800a48a:	2102      	movs	r1, #2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 fccb 	bl	800ae28 <RCCEx_PLL3_Config>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a49c:	4b7a      	ldr	r3, [pc, #488]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4aa:	4977      	ldr	r1, [pc, #476]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d034      	beq.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4c6:	d01d      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a4c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4cc:	d817      	bhi.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a4d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4d6:	d009      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4d8:	e011      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3304      	adds	r3, #4
 800a4de:	2100      	movs	r1, #0
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 fbef 	bl	800acc4 <RCCEx_PLL2_Config>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a4ea:	e00c      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3324      	adds	r3, #36	; 0x24
 800a4f0:	2102      	movs	r1, #2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f000 fc98 	bl	800ae28 <RCCEx_PLL3_Config>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a4fc:	e003      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	75fb      	strb	r3, [r7, #23]
      break;
 800a502:	e000      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a504:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a506:	7dfb      	ldrb	r3, [r7, #23]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10a      	bne.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a50c:	4b5e      	ldr	r3, [pc, #376]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a51a:	495b      	ldr	r1, [pc, #364]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	658b      	str	r3, [r1, #88]	; 0x58
 800a520:	e001      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d033      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a538:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a53c:	d01c      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a53e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a542:	d816      	bhi.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a548:	d003      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a54a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a54e:	d007      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a550:	e00f      	b.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a552:	4b4d      	ldr	r3, [pc, #308]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a556:	4a4c      	ldr	r2, [pc, #304]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a55c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a55e:	e00c      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3324      	adds	r3, #36	; 0x24
 800a564:	2101      	movs	r1, #1
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fc5e 	bl	800ae28 <RCCEx_PLL3_Config>
 800a56c:	4603      	mov	r3, r0
 800a56e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a570:	e003      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	75fb      	strb	r3, [r7, #23]
      break;
 800a576:	e000      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a580:	4b41      	ldr	r3, [pc, #260]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a584:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a58e:	493e      	ldr	r1, [pc, #248]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a590:	4313      	orrs	r3, r2
 800a592:	654b      	str	r3, [r1, #84]	; 0x54
 800a594:	e001      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d029      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a5ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5b2:	d007      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a5b4:	e00f      	b.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5b6:	4b34      	ldr	r3, [pc, #208]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ba:	4a33      	ldr	r2, [pc, #204]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a5c2:	e00b      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	2102      	movs	r1, #2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 fb7a 	bl	800acc4 <RCCEx_PLL2_Config>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a5d4:	e002      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a5da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d109      	bne.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a5e2:	4b29      	ldr	r3, [pc, #164]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ee:	4926      	ldr	r1, [pc, #152]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a5f4:	e001      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00a      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	3324      	adds	r3, #36	; 0x24
 800a60a:	2102      	movs	r1, #2
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 fc0b 	bl	800ae28 <RCCEx_PLL3_Config>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a624:	2b00      	cmp	r3, #0
 800a626:	d033      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a62c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a630:	d017      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a636:	d811      	bhi.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a63c:	d013      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a63e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a642:	d80b      	bhi.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d010      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a64c:	d106      	bne.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a64e:	4b0e      	ldr	r3, [pc, #56]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a652:	4a0d      	ldr	r2, [pc, #52]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a658:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a65a:	e007      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	75fb      	strb	r3, [r7, #23]
      break;
 800a660:	e004      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a662:	bf00      	nop
 800a664:	e002      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a666:	bf00      	nop
 800a668:	e000      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a66a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a66c:	7dfb      	ldrb	r3, [r7, #23]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10c      	bne.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a676:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a67e:	4902      	ldr	r1, [pc, #8]	; (800a688 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a680:	4313      	orrs	r3, r2
 800a682:	654b      	str	r3, [r1, #84]	; 0x54
 800a684:	e004      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a686:	bf00      	nop
 800a688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a68c:	7dfb      	ldrb	r3, [r7, #23]
 800a68e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d008      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a69c:	4b29      	ldr	r3, [pc, #164]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a8:	4926      	ldr	r1, [pc, #152]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d008      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a6ba:	4b22      	ldr	r3, [pc, #136]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c6:	491f      	ldr	r1, [pc, #124]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00d      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6d8:	4b1a      	ldr	r3, [pc, #104]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	4a19      	ldr	r2, [pc, #100]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6e2:	6113      	str	r3, [r2, #16]
 800a6e4:	4b17      	ldr	r3, [pc, #92]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6e6:	691a      	ldr	r2, [r3, #16]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6ee:	4915      	ldr	r1, [pc, #84]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	da08      	bge.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a6fc:	4b11      	ldr	r3, [pc, #68]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a700:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a708:	490e      	ldr	r1, [pc, #56]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d009      	beq.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a71a:	4b0a      	ldr	r3, [pc, #40]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a71e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a728:	4906      	ldr	r1, [pc, #24]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a72e:	7dbb      	ldrb	r3, [r7, #22]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	e000      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	58024400 	.word	0x58024400

0800a748 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a74c:	f7ff f8a6 	bl	800989c <HAL_RCC_GetHCLKFreq>
 800a750:	4602      	mov	r2, r0
 800a752:	4b06      	ldr	r3, [pc, #24]	; (800a76c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	091b      	lsrs	r3, r3, #4
 800a758:	f003 0307 	and.w	r3, r3, #7
 800a75c:	4904      	ldr	r1, [pc, #16]	; (800a770 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a75e:	5ccb      	ldrb	r3, [r1, r3]
 800a760:	f003 031f 	and.w	r3, r3, #31
 800a764:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a768:	4618      	mov	r0, r3
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	58024400 	.word	0x58024400
 800a770:	0800fe20 	.word	0x0800fe20

0800a774 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a774:	b480      	push	{r7}
 800a776:	b089      	sub	sp, #36	; 0x24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a77c:	4ba1      	ldr	r3, [pc, #644]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a780:	f003 0303 	and.w	r3, r3, #3
 800a784:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a786:	4b9f      	ldr	r3, [pc, #636]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78a:	0b1b      	lsrs	r3, r3, #12
 800a78c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a790:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a792:	4b9c      	ldr	r3, [pc, #624]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a796:	091b      	lsrs	r3, r3, #4
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a79e:	4b99      	ldr	r3, [pc, #612]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a2:	08db      	lsrs	r3, r3, #3
 800a7a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	fb02 f303 	mul.w	r3, r2, r3
 800a7ae:	ee07 3a90 	vmov	s15, r3
 800a7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 8111 	beq.w	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	f000 8083 	beq.w	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	f200 80a1 	bhi.w	800a914 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d003      	beq.n	800a7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d056      	beq.n	800a88c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a7de:	e099      	b.n	800a914 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7e0:	4b88      	ldr	r3, [pc, #544]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 0320 	and.w	r3, r3, #32
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d02d      	beq.n	800a848 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7ec:	4b85      	ldr	r3, [pc, #532]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	08db      	lsrs	r3, r3, #3
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	4a84      	ldr	r2, [pc, #528]	; (800aa08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a7f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	ee07 3a90 	vmov	s15, r3
 800a804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a816:	4b7b      	ldr	r3, [pc, #492]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a826:	ed97 6a03 	vldr	s12, [r7, #12]
 800a82a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aa0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a82e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a83a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a83e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a842:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a846:	e087      	b.n	800a958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	ee07 3a90 	vmov	s15, r3
 800a84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a852:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a85a:	4b6a      	ldr	r3, [pc, #424]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a862:	ee07 3a90 	vmov	s15, r3
 800a866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a86a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a86e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aa0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a87a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a87e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a882:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a88a:	e065      	b.n	800a958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a896:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aa14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a89a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a89e:	4b59      	ldr	r3, [pc, #356]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a6:	ee07 3a90 	vmov	s15, r3
 800a8aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aa0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8ce:	e043      	b.n	800a958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a8de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8e2:	4b48      	ldr	r3, [pc, #288]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ea:	ee07 3a90 	vmov	s15, r3
 800a8ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aa0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a90a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a90e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a912:	e021      	b.n	800a958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	ee07 3a90 	vmov	s15, r3
 800a91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a91e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aa14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a926:	4b37      	ldr	r3, [pc, #220]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a936:	ed97 6a03 	vldr	s12, [r7, #12]
 800a93a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aa0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a93e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a94a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a94e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a956:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a958:	4b2a      	ldr	r3, [pc, #168]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95c:	0a5b      	lsrs	r3, r3, #9
 800a95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a962:	ee07 3a90 	vmov	s15, r3
 800a966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a96e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a972:	edd7 6a07 	vldr	s13, [r7, #28]
 800a976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a97a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a97e:	ee17 2a90 	vmov	r2, s15
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a986:	4b1f      	ldr	r3, [pc, #124]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98a:	0c1b      	lsrs	r3, r3, #16
 800a98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a990:	ee07 3a90 	vmov	s15, r3
 800a994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a99c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ac:	ee17 2a90 	vmov	r2, s15
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a9b4:	4b13      	ldr	r3, [pc, #76]	; (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b8:	0e1b      	lsrs	r3, r3, #24
 800a9ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9be:	ee07 3a90 	vmov	s15, r3
 800a9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9da:	ee17 2a90 	vmov	r2, s15
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a9e2:	e008      	b.n	800a9f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	609a      	str	r2, [r3, #8]
}
 800a9f6:	bf00      	nop
 800a9f8:	3724      	adds	r7, #36	; 0x24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	58024400 	.word	0x58024400
 800aa08:	03d09000 	.word	0x03d09000
 800aa0c:	46000000 	.word	0x46000000
 800aa10:	4c742400 	.word	0x4c742400
 800aa14:	4a742400 	.word	0x4a742400
 800aa18:	4af42400 	.word	0x4af42400

0800aa1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b089      	sub	sp, #36	; 0x24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa24:	4ba1      	ldr	r3, [pc, #644]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa28:	f003 0303 	and.w	r3, r3, #3
 800aa2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800aa2e:	4b9f      	ldr	r3, [pc, #636]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa32:	0d1b      	lsrs	r3, r3, #20
 800aa34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aa3a:	4b9c      	ldr	r3, [pc, #624]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3e:	0a1b      	lsrs	r3, r3, #8
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800aa46:	4b99      	ldr	r3, [pc, #612]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa4a:	08db      	lsrs	r3, r3, #3
 800aa4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	fb02 f303 	mul.w	r3, r2, r3
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 8111 	beq.w	800ac8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	f000 8083 	beq.w	800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	f200 80a1 	bhi.w	800abbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d003      	beq.n	800aa88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d056      	beq.n	800ab34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa86:	e099      	b.n	800abbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa88:	4b88      	ldr	r3, [pc, #544]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0320 	and.w	r3, r3, #32
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d02d      	beq.n	800aaf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa94:	4b85      	ldr	r3, [pc, #532]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	08db      	lsrs	r3, r3, #3
 800aa9a:	f003 0303 	and.w	r3, r3, #3
 800aa9e:	4a84      	ldr	r2, [pc, #528]	; (800acb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aaa0:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	ee07 3a90 	vmov	s15, r3
 800aaac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aabe:	4b7b      	ldr	r3, [pc, #492]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aace:	ed97 6a03 	vldr	s12, [r7, #12]
 800aad2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800acb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aaee:	e087      	b.n	800ac00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aafe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab02:	4b6a      	ldr	r3, [pc, #424]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab0a:	ee07 3a90 	vmov	s15, r3
 800ab0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab16:	eddf 5a67 	vldr	s11, [pc, #412]	; 800acb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab32:	e065      	b.n	800ac00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	ee07 3a90 	vmov	s15, r3
 800ab3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab46:	4b59      	ldr	r3, [pc, #356]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4e:	ee07 3a90 	vmov	s15, r3
 800ab52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800acb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab76:	e043      	b.n	800ac00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	ee07 3a90 	vmov	s15, r3
 800ab7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab8a:	4b48      	ldr	r3, [pc, #288]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab92:	ee07 3a90 	vmov	s15, r3
 800ab96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800acb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abba:	e021      	b.n	800ac00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	ee07 3a90 	vmov	s15, r3
 800abc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800abca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abce:	4b37      	ldr	r3, [pc, #220]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd6:	ee07 3a90 	vmov	s15, r3
 800abda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abde:	ed97 6a03 	vldr	s12, [r7, #12]
 800abe2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800acb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ac00:	4b2a      	ldr	r3, [pc, #168]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac04:	0a5b      	lsrs	r3, r3, #9
 800ac06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac0a:	ee07 3a90 	vmov	s15, r3
 800ac0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac26:	ee17 2a90 	vmov	r2, s15
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ac2e:	4b1f      	ldr	r3, [pc, #124]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac32:	0c1b      	lsrs	r3, r3, #16
 800ac34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac38:	ee07 3a90 	vmov	s15, r3
 800ac3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac54:	ee17 2a90 	vmov	r2, s15
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ac5c:	4b13      	ldr	r3, [pc, #76]	; (800acac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac60:	0e1b      	lsrs	r3, r3, #24
 800ac62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac82:	ee17 2a90 	vmov	r2, s15
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac8a:	e008      	b.n	800ac9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	609a      	str	r2, [r3, #8]
}
 800ac9e:	bf00      	nop
 800aca0:	3724      	adds	r7, #36	; 0x24
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	58024400 	.word	0x58024400
 800acb0:	03d09000 	.word	0x03d09000
 800acb4:	46000000 	.word	0x46000000
 800acb8:	4c742400 	.word	0x4c742400
 800acbc:	4a742400 	.word	0x4a742400
 800acc0:	4af42400 	.word	0x4af42400

0800acc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800acd2:	4b53      	ldr	r3, [pc, #332]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800acd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd6:	f003 0303 	and.w	r3, r3, #3
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d101      	bne.n	800ace2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e099      	b.n	800ae16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ace2:	4b4f      	ldr	r3, [pc, #316]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a4e      	ldr	r2, [pc, #312]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ace8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800acec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acee:	f7fa fa97 	bl	8005220 <HAL_GetTick>
 800acf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acf4:	e008      	b.n	800ad08 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800acf6:	f7fa fa93 	bl	8005220 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d901      	bls.n	800ad08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e086      	b.n	800ae16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad08:	4b45      	ldr	r3, [pc, #276]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1f0      	bne.n	800acf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ad14:	4b42      	ldr	r3, [pc, #264]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	031b      	lsls	r3, r3, #12
 800ad22:	493f      	ldr	r1, [pc, #252]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad24:	4313      	orrs	r3, r2
 800ad26:	628b      	str	r3, [r1, #40]	; 0x28
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	3b01      	subs	r3, #1
 800ad38:	025b      	lsls	r3, r3, #9
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	3b01      	subs	r3, #1
 800ad44:	041b      	lsls	r3, r3, #16
 800ad46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad4a:	431a      	orrs	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	061b      	lsls	r3, r3, #24
 800ad54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad58:	4931      	ldr	r1, [pc, #196]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad5e:	4b30      	ldr	r3, [pc, #192]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	492d      	ldr	r1, [pc, #180]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad70:	4b2b      	ldr	r3, [pc, #172]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	f023 0220 	bic.w	r2, r3, #32
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	4928      	ldr	r1, [pc, #160]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad82:	4b27      	ldr	r3, [pc, #156]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad86:	4a26      	ldr	r2, [pc, #152]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad88:	f023 0310 	bic.w	r3, r3, #16
 800ad8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad8e:	4b24      	ldr	r3, [pc, #144]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad92:	4b24      	ldr	r3, [pc, #144]	; (800ae24 <RCCEx_PLL2_Config+0x160>)
 800ad94:	4013      	ands	r3, r2
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	69d2      	ldr	r2, [r2, #28]
 800ad9a:	00d2      	lsls	r2, r2, #3
 800ad9c:	4920      	ldr	r1, [pc, #128]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ada2:	4b1f      	ldr	r3, [pc, #124]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ada4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada6:	4a1e      	ldr	r2, [pc, #120]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ada8:	f043 0310 	orr.w	r3, r3, #16
 800adac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d106      	bne.n	800adc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800adb4:	4b1a      	ldr	r3, [pc, #104]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800adb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb8:	4a19      	ldr	r2, [pc, #100]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800adba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800adc0:	e00f      	b.n	800ade2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d106      	bne.n	800add6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800adc8:	4b15      	ldr	r3, [pc, #84]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	4a14      	ldr	r2, [pc, #80]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800adce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800add2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800add4:	e005      	b.n	800ade2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800add6:	4b12      	ldr	r3, [pc, #72]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800add8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adda:	4a11      	ldr	r2, [pc, #68]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800addc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ade0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ade2:	4b0f      	ldr	r3, [pc, #60]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a0e      	ldr	r2, [pc, #56]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ade8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800adec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adee:	f7fa fa17 	bl	8005220 <HAL_GetTick>
 800adf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adf4:	e008      	b.n	800ae08 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800adf6:	f7fa fa13 	bl	8005220 <HAL_GetTick>
 800adfa:	4602      	mov	r2, r0
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d901      	bls.n	800ae08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e006      	b.n	800ae16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae08:	4b05      	ldr	r3, [pc, #20]	; (800ae20 <RCCEx_PLL2_Config+0x15c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0f0      	beq.n	800adf6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	58024400 	.word	0x58024400
 800ae24:	ffff0007 	.word	0xffff0007

0800ae28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae36:	4b53      	ldr	r3, [pc, #332]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800ae38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3a:	f003 0303 	and.w	r3, r3, #3
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d101      	bne.n	800ae46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e099      	b.n	800af7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ae46:	4b4f      	ldr	r3, [pc, #316]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a4e      	ldr	r2, [pc, #312]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800ae4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae52:	f7fa f9e5 	bl	8005220 <HAL_GetTick>
 800ae56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae58:	e008      	b.n	800ae6c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ae5a:	f7fa f9e1 	bl	8005220 <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d901      	bls.n	800ae6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e086      	b.n	800af7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae6c:	4b45      	ldr	r3, [pc, #276]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1f0      	bne.n	800ae5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae78:	4b42      	ldr	r3, [pc, #264]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800ae7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	051b      	lsls	r3, r3, #20
 800ae86:	493f      	ldr	r1, [pc, #252]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	628b      	str	r3, [r1, #40]	; 0x28
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	3b01      	subs	r3, #1
 800ae92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	025b      	lsls	r3, r3, #9
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	431a      	orrs	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	041b      	lsls	r3, r3, #16
 800aeaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	061b      	lsls	r3, r3, #24
 800aeb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aebc:	4931      	ldr	r1, [pc, #196]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800aebe:	4313      	orrs	r3, r2
 800aec0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aec2:	4b30      	ldr	r3, [pc, #192]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800aec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	492d      	ldr	r1, [pc, #180]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aed4:	4b2b      	ldr	r3, [pc, #172]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800aed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	699b      	ldr	r3, [r3, #24]
 800aee0:	4928      	ldr	r1, [pc, #160]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800aee2:	4313      	orrs	r3, r2
 800aee4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aee6:	4b27      	ldr	r3, [pc, #156]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800aee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeea:	4a26      	ldr	r2, [pc, #152]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800aeec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aef0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aef2:	4b24      	ldr	r3, [pc, #144]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800aef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aef6:	4b24      	ldr	r3, [pc, #144]	; (800af88 <RCCEx_PLL3_Config+0x160>)
 800aef8:	4013      	ands	r3, r2
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	69d2      	ldr	r2, [r2, #28]
 800aefe:	00d2      	lsls	r2, r2, #3
 800af00:	4920      	ldr	r1, [pc, #128]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af02:	4313      	orrs	r3, r2
 800af04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800af06:	4b1f      	ldr	r3, [pc, #124]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	4a1e      	ldr	r2, [pc, #120]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d106      	bne.n	800af26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800af18:	4b1a      	ldr	r3, [pc, #104]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1c:	4a19      	ldr	r2, [pc, #100]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af24:	e00f      	b.n	800af46 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d106      	bne.n	800af3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800af2c:	4b15      	ldr	r3, [pc, #84]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	4a14      	ldr	r2, [pc, #80]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800af36:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af38:	e005      	b.n	800af46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800af3a:	4b12      	ldr	r3, [pc, #72]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3e:	4a11      	ldr	r2, [pc, #68]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800af46:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a0e      	ldr	r2, [pc, #56]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af52:	f7fa f965 	bl	8005220 <HAL_GetTick>
 800af56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af58:	e008      	b.n	800af6c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800af5a:	f7fa f961 	bl	8005220 <HAL_GetTick>
 800af5e:	4602      	mov	r2, r0
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	2b02      	cmp	r3, #2
 800af66:	d901      	bls.n	800af6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e006      	b.n	800af7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af6c:	4b05      	ldr	r3, [pc, #20]	; (800af84 <RCCEx_PLL3_Config+0x15c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af74:	2b00      	cmp	r3, #0
 800af76:	d0f0      	beq.n	800af5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af78:	7bfb      	ldrb	r3, [r7, #15]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	58024400 	.word	0x58024400
 800af88:	ffff0007 	.word	0xffff0007

0800af8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e049      	b.n	800b032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d106      	bne.n	800afb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7f9 fa14 	bl	80043e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2202      	movs	r2, #2
 800afbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3304      	adds	r3, #4
 800afc8:	4619      	mov	r1, r3
 800afca:	4610      	mov	r0, r2
 800afcc:	f000 feb8 	bl	800bd40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d001      	beq.n	800b054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	e05e      	b.n	800b112 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2202      	movs	r2, #2
 800b058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68da      	ldr	r2, [r3, #12]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f042 0201 	orr.w	r2, r2, #1
 800b06a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a2b      	ldr	r2, [pc, #172]	; (800b120 <HAL_TIM_Base_Start_IT+0xe4>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d02c      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x94>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b07e:	d027      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x94>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a27      	ldr	r2, [pc, #156]	; (800b124 <HAL_TIM_Base_Start_IT+0xe8>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d022      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x94>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a26      	ldr	r2, [pc, #152]	; (800b128 <HAL_TIM_Base_Start_IT+0xec>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d01d      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x94>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a24      	ldr	r2, [pc, #144]	; (800b12c <HAL_TIM_Base_Start_IT+0xf0>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d018      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x94>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a23      	ldr	r2, [pc, #140]	; (800b130 <HAL_TIM_Base_Start_IT+0xf4>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d013      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x94>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a21      	ldr	r2, [pc, #132]	; (800b134 <HAL_TIM_Base_Start_IT+0xf8>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d00e      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x94>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a20      	ldr	r2, [pc, #128]	; (800b138 <HAL_TIM_Base_Start_IT+0xfc>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d009      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x94>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a1e      	ldr	r2, [pc, #120]	; (800b13c <HAL_TIM_Base_Start_IT+0x100>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d004      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x94>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a1d      	ldr	r2, [pc, #116]	; (800b140 <HAL_TIM_Base_Start_IT+0x104>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d115      	bne.n	800b0fc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689a      	ldr	r2, [r3, #8]
 800b0d6:	4b1b      	ldr	r3, [pc, #108]	; (800b144 <HAL_TIM_Base_Start_IT+0x108>)
 800b0d8:	4013      	ands	r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b06      	cmp	r3, #6
 800b0e0:	d015      	beq.n	800b10e <HAL_TIM_Base_Start_IT+0xd2>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0e8:	d011      	beq.n	800b10e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0201 	orr.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0fa:	e008      	b.n	800b10e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f042 0201 	orr.w	r2, r2, #1
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	e000      	b.n	800b110 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b10e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	40010000 	.word	0x40010000
 800b124:	40000400 	.word	0x40000400
 800b128:	40000800 	.word	0x40000800
 800b12c:	40000c00 	.word	0x40000c00
 800b130:	40010400 	.word	0x40010400
 800b134:	40001800 	.word	0x40001800
 800b138:	40014000 	.word	0x40014000
 800b13c:	4000e000 	.word	0x4000e000
 800b140:	4000e400 	.word	0x4000e400
 800b144:	00010007 	.word	0x00010007

0800b148 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d101      	bne.n	800b15a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e049      	b.n	800b1ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d106      	bne.n	800b174 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f7f9 fa6e 	bl	8004650 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2202      	movs	r2, #2
 800b178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3304      	adds	r3, #4
 800b184:	4619      	mov	r1, r3
 800b186:	4610      	mov	r0, r2
 800b188:	f000 fdda 	bl	800bd40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
	...

0800b1f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d109      	bne.n	800b21c <HAL_TIM_PWM_Start+0x24>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b01      	cmp	r3, #1
 800b212:	bf14      	ite	ne
 800b214:	2301      	movne	r3, #1
 800b216:	2300      	moveq	r3, #0
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	e03c      	b.n	800b296 <HAL_TIM_PWM_Start+0x9e>
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2b04      	cmp	r3, #4
 800b220:	d109      	bne.n	800b236 <HAL_TIM_PWM_Start+0x3e>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	bf14      	ite	ne
 800b22e:	2301      	movne	r3, #1
 800b230:	2300      	moveq	r3, #0
 800b232:	b2db      	uxtb	r3, r3
 800b234:	e02f      	b.n	800b296 <HAL_TIM_PWM_Start+0x9e>
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	2b08      	cmp	r3, #8
 800b23a:	d109      	bne.n	800b250 <HAL_TIM_PWM_Start+0x58>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b01      	cmp	r3, #1
 800b246:	bf14      	ite	ne
 800b248:	2301      	movne	r3, #1
 800b24a:	2300      	moveq	r3, #0
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	e022      	b.n	800b296 <HAL_TIM_PWM_Start+0x9e>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2b0c      	cmp	r3, #12
 800b254:	d109      	bne.n	800b26a <HAL_TIM_PWM_Start+0x72>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b01      	cmp	r3, #1
 800b260:	bf14      	ite	ne
 800b262:	2301      	movne	r3, #1
 800b264:	2300      	moveq	r3, #0
 800b266:	b2db      	uxtb	r3, r3
 800b268:	e015      	b.n	800b296 <HAL_TIM_PWM_Start+0x9e>
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b10      	cmp	r3, #16
 800b26e:	d109      	bne.n	800b284 <HAL_TIM_PWM_Start+0x8c>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b01      	cmp	r3, #1
 800b27a:	bf14      	ite	ne
 800b27c:	2301      	movne	r3, #1
 800b27e:	2300      	moveq	r3, #0
 800b280:	b2db      	uxtb	r3, r3
 800b282:	e008      	b.n	800b296 <HAL_TIM_PWM_Start+0x9e>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	bf14      	ite	ne
 800b290:	2301      	movne	r3, #1
 800b292:	2300      	moveq	r3, #0
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e0ab      	b.n	800b3f6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d104      	bne.n	800b2ae <HAL_TIM_PWM_Start+0xb6>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2ac:	e023      	b.n	800b2f6 <HAL_TIM_PWM_Start+0xfe>
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b04      	cmp	r3, #4
 800b2b2:	d104      	bne.n	800b2be <HAL_TIM_PWM_Start+0xc6>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2bc:	e01b      	b.n	800b2f6 <HAL_TIM_PWM_Start+0xfe>
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b08      	cmp	r3, #8
 800b2c2:	d104      	bne.n	800b2ce <HAL_TIM_PWM_Start+0xd6>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2cc:	e013      	b.n	800b2f6 <HAL_TIM_PWM_Start+0xfe>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b0c      	cmp	r3, #12
 800b2d2:	d104      	bne.n	800b2de <HAL_TIM_PWM_Start+0xe6>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2dc:	e00b      	b.n	800b2f6 <HAL_TIM_PWM_Start+0xfe>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b10      	cmp	r3, #16
 800b2e2:	d104      	bne.n	800b2ee <HAL_TIM_PWM_Start+0xf6>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2ec:	e003      	b.n	800b2f6 <HAL_TIM_PWM_Start+0xfe>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f001 f938 	bl	800c574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a3d      	ldr	r2, [pc, #244]	; (800b400 <HAL_TIM_PWM_Start+0x208>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d013      	beq.n	800b336 <HAL_TIM_PWM_Start+0x13e>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a3c      	ldr	r2, [pc, #240]	; (800b404 <HAL_TIM_PWM_Start+0x20c>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d00e      	beq.n	800b336 <HAL_TIM_PWM_Start+0x13e>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a3a      	ldr	r2, [pc, #232]	; (800b408 <HAL_TIM_PWM_Start+0x210>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d009      	beq.n	800b336 <HAL_TIM_PWM_Start+0x13e>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a39      	ldr	r2, [pc, #228]	; (800b40c <HAL_TIM_PWM_Start+0x214>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d004      	beq.n	800b336 <HAL_TIM_PWM_Start+0x13e>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a37      	ldr	r2, [pc, #220]	; (800b410 <HAL_TIM_PWM_Start+0x218>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d101      	bne.n	800b33a <HAL_TIM_PWM_Start+0x142>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <HAL_TIM_PWM_Start+0x144>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d007      	beq.n	800b350 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b34e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a2a      	ldr	r2, [pc, #168]	; (800b400 <HAL_TIM_PWM_Start+0x208>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d02c      	beq.n	800b3b4 <HAL_TIM_PWM_Start+0x1bc>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b362:	d027      	beq.n	800b3b4 <HAL_TIM_PWM_Start+0x1bc>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a2a      	ldr	r2, [pc, #168]	; (800b414 <HAL_TIM_PWM_Start+0x21c>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d022      	beq.n	800b3b4 <HAL_TIM_PWM_Start+0x1bc>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a29      	ldr	r2, [pc, #164]	; (800b418 <HAL_TIM_PWM_Start+0x220>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d01d      	beq.n	800b3b4 <HAL_TIM_PWM_Start+0x1bc>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a27      	ldr	r2, [pc, #156]	; (800b41c <HAL_TIM_PWM_Start+0x224>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d018      	beq.n	800b3b4 <HAL_TIM_PWM_Start+0x1bc>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a1f      	ldr	r2, [pc, #124]	; (800b404 <HAL_TIM_PWM_Start+0x20c>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d013      	beq.n	800b3b4 <HAL_TIM_PWM_Start+0x1bc>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a23      	ldr	r2, [pc, #140]	; (800b420 <HAL_TIM_PWM_Start+0x228>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d00e      	beq.n	800b3b4 <HAL_TIM_PWM_Start+0x1bc>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a1b      	ldr	r2, [pc, #108]	; (800b408 <HAL_TIM_PWM_Start+0x210>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d009      	beq.n	800b3b4 <HAL_TIM_PWM_Start+0x1bc>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a1f      	ldr	r2, [pc, #124]	; (800b424 <HAL_TIM_PWM_Start+0x22c>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d004      	beq.n	800b3b4 <HAL_TIM_PWM_Start+0x1bc>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a1e      	ldr	r2, [pc, #120]	; (800b428 <HAL_TIM_PWM_Start+0x230>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d115      	bne.n	800b3e0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689a      	ldr	r2, [r3, #8]
 800b3ba:	4b1c      	ldr	r3, [pc, #112]	; (800b42c <HAL_TIM_PWM_Start+0x234>)
 800b3bc:	4013      	ands	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2b06      	cmp	r3, #6
 800b3c4:	d015      	beq.n	800b3f2 <HAL_TIM_PWM_Start+0x1fa>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3cc:	d011      	beq.n	800b3f2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f042 0201 	orr.w	r2, r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3de:	e008      	b.n	800b3f2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f042 0201 	orr.w	r2, r2, #1
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	e000      	b.n	800b3f4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	40010000 	.word	0x40010000
 800b404:	40010400 	.word	0x40010400
 800b408:	40014000 	.word	0x40014000
 800b40c:	40014400 	.word	0x40014400
 800b410:	40014800 	.word	0x40014800
 800b414:	40000400 	.word	0x40000400
 800b418:	40000800 	.word	0x40000800
 800b41c:	40000c00 	.word	0x40000c00
 800b420:	40001800 	.word	0x40001800
 800b424:	4000e000 	.word	0x4000e000
 800b428:	4000e400 	.word	0x4000e400
 800b42c:	00010007 	.word	0x00010007

0800b430 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d101      	bne.n	800b444 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	e08f      	b.n	800b564 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d106      	bne.n	800b45e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7f9 f807 	bl	800446c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2202      	movs	r2, #2
 800b462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	6899      	ldr	r1, [r3, #8]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	4b3e      	ldr	r3, [pc, #248]	; (800b56c <HAL_TIM_Encoder_Init+0x13c>)
 800b472:	400b      	ands	r3, r1
 800b474:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	3304      	adds	r3, #4
 800b47e:	4619      	mov	r1, r3
 800b480:	4610      	mov	r0, r2
 800b482:	f000 fc5d 	bl	800bd40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	6a1b      	ldr	r3, [r3, #32]
 800b49c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	4b31      	ldr	r3, [pc, #196]	; (800b570 <HAL_TIM_Encoder_Init+0x140>)
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	689a      	ldr	r2, [r3, #8]
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	021b      	lsls	r3, r3, #8
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	4b2b      	ldr	r3, [pc, #172]	; (800b574 <HAL_TIM_Encoder_Init+0x144>)
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	4b2a      	ldr	r3, [pc, #168]	; (800b578 <HAL_TIM_Encoder_Init+0x148>)
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	68da      	ldr	r2, [r3, #12]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	69db      	ldr	r3, [r3, #28]
 800b4da:	021b      	lsls	r3, r3, #8
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	011a      	lsls	r2, r3, #4
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	031b      	lsls	r3, r3, #12
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b4fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b506:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	695b      	ldr	r3, [r3, #20]
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	4313      	orrs	r3, r2
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2201      	movs	r2, #1
 800b53e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2201      	movs	r2, #1
 800b546:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2201      	movs	r2, #1
 800b54e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2201      	movs	r2, #1
 800b556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2201      	movs	r2, #1
 800b55e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	fffebff8 	.word	0xfffebff8
 800b570:	fffffcfc 	.word	0xfffffcfc
 800b574:	fffff3f3 	.word	0xfffff3f3
 800b578:	ffff0f0f 	.word	0xffff0f0f

0800b57c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b58c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b594:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b59c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d110      	bne.n	800b5ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d102      	bne.n	800b5b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b5b2:	7b7b      	ldrb	r3, [r7, #13]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d001      	beq.n	800b5bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e069      	b.n	800b690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2202      	movs	r2, #2
 800b5c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5cc:	e031      	b.n	800b632 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b04      	cmp	r3, #4
 800b5d2:	d110      	bne.n	800b5f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5d4:	7bbb      	ldrb	r3, [r7, #14]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d102      	bne.n	800b5e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b5da:	7b3b      	ldrb	r3, [r7, #12]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d001      	beq.n	800b5e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e055      	b.n	800b690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2202      	movs	r2, #2
 800b5f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5f4:	e01d      	b.n	800b632 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d108      	bne.n	800b60e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d105      	bne.n	800b60e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b602:	7b7b      	ldrb	r3, [r7, #13]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d102      	bne.n	800b60e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b608:	7b3b      	ldrb	r3, [r7, #12]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d001      	beq.n	800b612 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e03e      	b.n	800b690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2202      	movs	r2, #2
 800b616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2202      	movs	r2, #2
 800b61e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2202      	movs	r2, #2
 800b626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2202      	movs	r2, #2
 800b62e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d003      	beq.n	800b640 <HAL_TIM_Encoder_Start+0xc4>
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	2b04      	cmp	r3, #4
 800b63c:	d008      	beq.n	800b650 <HAL_TIM_Encoder_Start+0xd4>
 800b63e:	e00f      	b.n	800b660 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2201      	movs	r2, #1
 800b646:	2100      	movs	r1, #0
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 ff93 	bl	800c574 <TIM_CCxChannelCmd>
      break;
 800b64e:	e016      	b.n	800b67e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2201      	movs	r2, #1
 800b656:	2104      	movs	r1, #4
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 ff8b 	bl	800c574 <TIM_CCxChannelCmd>
      break;
 800b65e:	e00e      	b.n	800b67e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2201      	movs	r2, #1
 800b666:	2100      	movs	r1, #0
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 ff83 	bl	800c574 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2201      	movs	r2, #1
 800b674:	2104      	movs	r1, #4
 800b676:	4618      	mov	r0, r3
 800b678:	f000 ff7c 	bl	800c574 <TIM_CCxChannelCmd>
      break;
 800b67c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f042 0201 	orr.w	r2, r2, #1
 800b68c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	f003 0302 	and.w	r3, r3, #2
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d122      	bne.n	800b6f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	f003 0302 	and.w	r3, r3, #2
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d11b      	bne.n	800b6f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f06f 0202 	mvn.w	r2, #2
 800b6c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	f003 0303 	and.w	r3, r3, #3
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fb12 	bl	800bd04 <HAL_TIM_IC_CaptureCallback>
 800b6e0:	e005      	b.n	800b6ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fb04 	bl	800bcf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fb15 	bl	800bd18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	f003 0304 	and.w	r3, r3, #4
 800b6fe:	2b04      	cmp	r3, #4
 800b700:	d122      	bne.n	800b748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	f003 0304 	and.w	r3, r3, #4
 800b70c:	2b04      	cmp	r3, #4
 800b70e:	d11b      	bne.n	800b748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f06f 0204 	mvn.w	r2, #4
 800b718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2202      	movs	r2, #2
 800b71e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d003      	beq.n	800b736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fae8 	bl	800bd04 <HAL_TIM_IC_CaptureCallback>
 800b734:	e005      	b.n	800b742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fada 	bl	800bcf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 faeb 	bl	800bd18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	f003 0308 	and.w	r3, r3, #8
 800b752:	2b08      	cmp	r3, #8
 800b754:	d122      	bne.n	800b79c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	f003 0308 	and.w	r3, r3, #8
 800b760:	2b08      	cmp	r3, #8
 800b762:	d11b      	bne.n	800b79c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f06f 0208 	mvn.w	r2, #8
 800b76c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2204      	movs	r2, #4
 800b772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	f003 0303 	and.w	r3, r3, #3
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fabe 	bl	800bd04 <HAL_TIM_IC_CaptureCallback>
 800b788:	e005      	b.n	800b796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fab0 	bl	800bcf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fac1 	bl	800bd18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	f003 0310 	and.w	r3, r3, #16
 800b7a6:	2b10      	cmp	r3, #16
 800b7a8:	d122      	bne.n	800b7f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	f003 0310 	and.w	r3, r3, #16
 800b7b4:	2b10      	cmp	r3, #16
 800b7b6:	d11b      	bne.n	800b7f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f06f 0210 	mvn.w	r2, #16
 800b7c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2208      	movs	r2, #8
 800b7c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	69db      	ldr	r3, [r3, #28]
 800b7ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d003      	beq.n	800b7de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fa94 	bl	800bd04 <HAL_TIM_IC_CaptureCallback>
 800b7dc:	e005      	b.n	800b7ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fa86 	bl	800bcf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 fa97 	bl	800bd18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d10e      	bne.n	800b81c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d107      	bne.n	800b81c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f06f 0201 	mvn.w	r2, #1
 800b814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7f9 fa2a 	bl	8004c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b826:	2b80      	cmp	r3, #128	; 0x80
 800b828:	d10e      	bne.n	800b848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b834:	2b80      	cmp	r3, #128	; 0x80
 800b836:	d107      	bne.n	800b848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 f802 	bl	800c84c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b856:	d10e      	bne.n	800b876 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b862:	2b80      	cmp	r3, #128	; 0x80
 800b864:	d107      	bne.n	800b876 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b86e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fff5 	bl	800c860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b880:	2b40      	cmp	r3, #64	; 0x40
 800b882:	d10e      	bne.n	800b8a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88e:	2b40      	cmp	r3, #64	; 0x40
 800b890:	d107      	bne.n	800b8a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b89a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fa45 	bl	800bd2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	f003 0320 	and.w	r3, r3, #32
 800b8ac:	2b20      	cmp	r3, #32
 800b8ae:	d10e      	bne.n	800b8ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	f003 0320 	and.w	r3, r3, #32
 800b8ba:	2b20      	cmp	r3, #32
 800b8bc:	d107      	bne.n	800b8ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f06f 0220 	mvn.w	r2, #32
 800b8c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 ffb5 	bl	800c838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8ce:	bf00      	nop
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
	...

0800b8d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d101      	bne.n	800b8f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	e0ff      	b.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b14      	cmp	r3, #20
 800b902:	f200 80f0 	bhi.w	800bae6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b906:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90c:	0800b961 	.word	0x0800b961
 800b910:	0800bae7 	.word	0x0800bae7
 800b914:	0800bae7 	.word	0x0800bae7
 800b918:	0800bae7 	.word	0x0800bae7
 800b91c:	0800b9a1 	.word	0x0800b9a1
 800b920:	0800bae7 	.word	0x0800bae7
 800b924:	0800bae7 	.word	0x0800bae7
 800b928:	0800bae7 	.word	0x0800bae7
 800b92c:	0800b9e3 	.word	0x0800b9e3
 800b930:	0800bae7 	.word	0x0800bae7
 800b934:	0800bae7 	.word	0x0800bae7
 800b938:	0800bae7 	.word	0x0800bae7
 800b93c:	0800ba23 	.word	0x0800ba23
 800b940:	0800bae7 	.word	0x0800bae7
 800b944:	0800bae7 	.word	0x0800bae7
 800b948:	0800bae7 	.word	0x0800bae7
 800b94c:	0800ba65 	.word	0x0800ba65
 800b950:	0800bae7 	.word	0x0800bae7
 800b954:	0800bae7 	.word	0x0800bae7
 800b958:	0800bae7 	.word	0x0800bae7
 800b95c:	0800baa5 	.word	0x0800baa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68b9      	ldr	r1, [r7, #8]
 800b966:	4618      	mov	r0, r3
 800b968:	f000 fa90 	bl	800be8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	699a      	ldr	r2, [r3, #24]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f042 0208 	orr.w	r2, r2, #8
 800b97a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	699a      	ldr	r2, [r3, #24]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f022 0204 	bic.w	r2, r2, #4
 800b98a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6999      	ldr	r1, [r3, #24]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	691a      	ldr	r2, [r3, #16]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	430a      	orrs	r2, r1
 800b99c:	619a      	str	r2, [r3, #24]
      break;
 800b99e:	e0a5      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68b9      	ldr	r1, [r7, #8]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 fb00 	bl	800bfac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	699a      	ldr	r2, [r3, #24]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	699a      	ldr	r2, [r3, #24]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6999      	ldr	r1, [r3, #24]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	021a      	lsls	r2, r3, #8
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	619a      	str	r2, [r3, #24]
      break;
 800b9e0:	e084      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68b9      	ldr	r1, [r7, #8]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 fb69 	bl	800c0c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	69da      	ldr	r2, [r3, #28]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f042 0208 	orr.w	r2, r2, #8
 800b9fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69da      	ldr	r2, [r3, #28]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f022 0204 	bic.w	r2, r2, #4
 800ba0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	69d9      	ldr	r1, [r3, #28]
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	691a      	ldr	r2, [r3, #16]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	430a      	orrs	r2, r1
 800ba1e:	61da      	str	r2, [r3, #28]
      break;
 800ba20:	e064      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68b9      	ldr	r1, [r7, #8]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 fbd1 	bl	800c1d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	69da      	ldr	r2, [r3, #28]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	69da      	ldr	r2, [r3, #28]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	69d9      	ldr	r1, [r3, #28]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	021a      	lsls	r2, r3, #8
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	61da      	str	r2, [r3, #28]
      break;
 800ba62:	e043      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68b9      	ldr	r1, [r7, #8]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 fc1a 	bl	800c2a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f042 0208 	orr.w	r2, r2, #8
 800ba7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f022 0204 	bic.w	r2, r2, #4
 800ba8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	691a      	ldr	r2, [r3, #16]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	430a      	orrs	r2, r1
 800baa0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800baa2:	e023      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68b9      	ldr	r1, [r7, #8]
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 fc5e 	bl	800c36c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800babe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bace:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	021a      	lsls	r2, r3, #8
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	430a      	orrs	r2, r1
 800bae2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bae4:	e002      	b.n	800baec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	75fb      	strb	r3, [r7, #23]
      break;
 800baea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop

0800bb00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d101      	bne.n	800bb1c <HAL_TIM_ConfigClockSource+0x1c>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e0dc      	b.n	800bcd6 <HAL_TIM_ConfigClockSource+0x1d6>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2202      	movs	r2, #2
 800bb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	4b6a      	ldr	r3, [pc, #424]	; (800bce0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bb38:	4013      	ands	r3, r2
 800bb3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a64      	ldr	r2, [pc, #400]	; (800bce4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	f000 80a9 	beq.w	800bcaa <HAL_TIM_ConfigClockSource+0x1aa>
 800bb58:	4a62      	ldr	r2, [pc, #392]	; (800bce4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	f200 80ae 	bhi.w	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bb60:	4a61      	ldr	r2, [pc, #388]	; (800bce8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	f000 80a1 	beq.w	800bcaa <HAL_TIM_ConfigClockSource+0x1aa>
 800bb68:	4a5f      	ldr	r2, [pc, #380]	; (800bce8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	f200 80a6 	bhi.w	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bb70:	4a5e      	ldr	r2, [pc, #376]	; (800bcec <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	f000 8099 	beq.w	800bcaa <HAL_TIM_ConfigClockSource+0x1aa>
 800bb78:	4a5c      	ldr	r2, [pc, #368]	; (800bcec <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	f200 809e 	bhi.w	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bb80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bb84:	f000 8091 	beq.w	800bcaa <HAL_TIM_ConfigClockSource+0x1aa>
 800bb88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bb8c:	f200 8096 	bhi.w	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bb90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb94:	f000 8089 	beq.w	800bcaa <HAL_TIM_ConfigClockSource+0x1aa>
 800bb98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb9c:	f200 808e 	bhi.w	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba4:	d03e      	beq.n	800bc24 <HAL_TIM_ConfigClockSource+0x124>
 800bba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbaa:	f200 8087 	bhi.w	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bbae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb2:	f000 8086 	beq.w	800bcc2 <HAL_TIM_ConfigClockSource+0x1c2>
 800bbb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbba:	d87f      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bbbc:	2b70      	cmp	r3, #112	; 0x70
 800bbbe:	d01a      	beq.n	800bbf6 <HAL_TIM_ConfigClockSource+0xf6>
 800bbc0:	2b70      	cmp	r3, #112	; 0x70
 800bbc2:	d87b      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bbc4:	2b60      	cmp	r3, #96	; 0x60
 800bbc6:	d050      	beq.n	800bc6a <HAL_TIM_ConfigClockSource+0x16a>
 800bbc8:	2b60      	cmp	r3, #96	; 0x60
 800bbca:	d877      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bbcc:	2b50      	cmp	r3, #80	; 0x50
 800bbce:	d03c      	beq.n	800bc4a <HAL_TIM_ConfigClockSource+0x14a>
 800bbd0:	2b50      	cmp	r3, #80	; 0x50
 800bbd2:	d873      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bbd4:	2b40      	cmp	r3, #64	; 0x40
 800bbd6:	d058      	beq.n	800bc8a <HAL_TIM_ConfigClockSource+0x18a>
 800bbd8:	2b40      	cmp	r3, #64	; 0x40
 800bbda:	d86f      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bbdc:	2b30      	cmp	r3, #48	; 0x30
 800bbde:	d064      	beq.n	800bcaa <HAL_TIM_ConfigClockSource+0x1aa>
 800bbe0:	2b30      	cmp	r3, #48	; 0x30
 800bbe2:	d86b      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bbe4:	2b20      	cmp	r3, #32
 800bbe6:	d060      	beq.n	800bcaa <HAL_TIM_ConfigClockSource+0x1aa>
 800bbe8:	2b20      	cmp	r3, #32
 800bbea:	d867      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d05c      	beq.n	800bcaa <HAL_TIM_ConfigClockSource+0x1aa>
 800bbf0:	2b10      	cmp	r3, #16
 800bbf2:	d05a      	beq.n	800bcaa <HAL_TIM_ConfigClockSource+0x1aa>
 800bbf4:	e062      	b.n	800bcbc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6818      	ldr	r0, [r3, #0]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	6899      	ldr	r1, [r3, #8]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	f000 fc95 	bl	800c534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	609a      	str	r2, [r3, #8]
      break;
 800bc22:	e04f      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	6899      	ldr	r1, [r3, #8]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	f000 fc7e 	bl	800c534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689a      	ldr	r2, [r3, #8]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc46:	609a      	str	r2, [r3, #8]
      break;
 800bc48:	e03c      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6818      	ldr	r0, [r3, #0]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	6859      	ldr	r1, [r3, #4]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	461a      	mov	r2, r3
 800bc58:	f000 fbee 	bl	800c438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2150      	movs	r1, #80	; 0x50
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 fc48 	bl	800c4f8 <TIM_ITRx_SetConfig>
      break;
 800bc68:	e02c      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6818      	ldr	r0, [r3, #0]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	6859      	ldr	r1, [r3, #4]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	461a      	mov	r2, r3
 800bc78:	f000 fc0d 	bl	800c496 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2160      	movs	r1, #96	; 0x60
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 fc38 	bl	800c4f8 <TIM_ITRx_SetConfig>
      break;
 800bc88:	e01c      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6818      	ldr	r0, [r3, #0]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	6859      	ldr	r1, [r3, #4]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f000 fbce 	bl	800c438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2140      	movs	r1, #64	; 0x40
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 fc28 	bl	800c4f8 <TIM_ITRx_SetConfig>
      break;
 800bca8:	e00c      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	f000 fc1f 	bl	800c4f8 <TIM_ITRx_SetConfig>
      break;
 800bcba:	e003      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bcc0:	e000      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bcc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	ffceff88 	.word	0xffceff88
 800bce4:	00100040 	.word	0x00100040
 800bce8:	00100030 	.word	0x00100030
 800bcec:	00100020 	.word	0x00100020

0800bcf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd34:	bf00      	nop
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a44      	ldr	r2, [pc, #272]	; (800be64 <TIM_Base_SetConfig+0x124>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d013      	beq.n	800bd80 <TIM_Base_SetConfig+0x40>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd5e:	d00f      	beq.n	800bd80 <TIM_Base_SetConfig+0x40>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a41      	ldr	r2, [pc, #260]	; (800be68 <TIM_Base_SetConfig+0x128>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d00b      	beq.n	800bd80 <TIM_Base_SetConfig+0x40>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a40      	ldr	r2, [pc, #256]	; (800be6c <TIM_Base_SetConfig+0x12c>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d007      	beq.n	800bd80 <TIM_Base_SetConfig+0x40>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a3f      	ldr	r2, [pc, #252]	; (800be70 <TIM_Base_SetConfig+0x130>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d003      	beq.n	800bd80 <TIM_Base_SetConfig+0x40>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a3e      	ldr	r2, [pc, #248]	; (800be74 <TIM_Base_SetConfig+0x134>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d108      	bne.n	800bd92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a33      	ldr	r2, [pc, #204]	; (800be64 <TIM_Base_SetConfig+0x124>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d027      	beq.n	800bdea <TIM_Base_SetConfig+0xaa>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bda0:	d023      	beq.n	800bdea <TIM_Base_SetConfig+0xaa>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a30      	ldr	r2, [pc, #192]	; (800be68 <TIM_Base_SetConfig+0x128>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d01f      	beq.n	800bdea <TIM_Base_SetConfig+0xaa>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a2f      	ldr	r2, [pc, #188]	; (800be6c <TIM_Base_SetConfig+0x12c>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d01b      	beq.n	800bdea <TIM_Base_SetConfig+0xaa>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a2e      	ldr	r2, [pc, #184]	; (800be70 <TIM_Base_SetConfig+0x130>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d017      	beq.n	800bdea <TIM_Base_SetConfig+0xaa>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a2d      	ldr	r2, [pc, #180]	; (800be74 <TIM_Base_SetConfig+0x134>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d013      	beq.n	800bdea <TIM_Base_SetConfig+0xaa>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a2c      	ldr	r2, [pc, #176]	; (800be78 <TIM_Base_SetConfig+0x138>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d00f      	beq.n	800bdea <TIM_Base_SetConfig+0xaa>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a2b      	ldr	r2, [pc, #172]	; (800be7c <TIM_Base_SetConfig+0x13c>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d00b      	beq.n	800bdea <TIM_Base_SetConfig+0xaa>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a2a      	ldr	r2, [pc, #168]	; (800be80 <TIM_Base_SetConfig+0x140>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d007      	beq.n	800bdea <TIM_Base_SetConfig+0xaa>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a29      	ldr	r2, [pc, #164]	; (800be84 <TIM_Base_SetConfig+0x144>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d003      	beq.n	800bdea <TIM_Base_SetConfig+0xaa>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a28      	ldr	r2, [pc, #160]	; (800be88 <TIM_Base_SetConfig+0x148>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d108      	bne.n	800bdfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	695b      	ldr	r3, [r3, #20]
 800be06:	4313      	orrs	r3, r2
 800be08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	689a      	ldr	r2, [r3, #8]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4a10      	ldr	r2, [pc, #64]	; (800be64 <TIM_Base_SetConfig+0x124>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d00f      	beq.n	800be48 <TIM_Base_SetConfig+0x108>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4a12      	ldr	r2, [pc, #72]	; (800be74 <TIM_Base_SetConfig+0x134>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d00b      	beq.n	800be48 <TIM_Base_SetConfig+0x108>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a11      	ldr	r2, [pc, #68]	; (800be78 <TIM_Base_SetConfig+0x138>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d007      	beq.n	800be48 <TIM_Base_SetConfig+0x108>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a10      	ldr	r2, [pc, #64]	; (800be7c <TIM_Base_SetConfig+0x13c>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d003      	beq.n	800be48 <TIM_Base_SetConfig+0x108>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a0f      	ldr	r2, [pc, #60]	; (800be80 <TIM_Base_SetConfig+0x140>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d103      	bne.n	800be50 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	691a      	ldr	r2, [r3, #16]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	615a      	str	r2, [r3, #20]
}
 800be56:	bf00      	nop
 800be58:	3714      	adds	r7, #20
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	40010000 	.word	0x40010000
 800be68:	40000400 	.word	0x40000400
 800be6c:	40000800 	.word	0x40000800
 800be70:	40000c00 	.word	0x40000c00
 800be74:	40010400 	.word	0x40010400
 800be78:	40014000 	.word	0x40014000
 800be7c:	40014400 	.word	0x40014400
 800be80:	40014800 	.word	0x40014800
 800be84:	4000e000 	.word	0x4000e000
 800be88:	4000e400 	.word	0x4000e400

0800be8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b087      	sub	sp, #28
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	f023 0201 	bic.w	r2, r3, #1
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a1b      	ldr	r3, [r3, #32]
 800bea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	4b37      	ldr	r3, [pc, #220]	; (800bf94 <TIM_OC1_SetConfig+0x108>)
 800beb8:	4013      	ands	r3, r2
 800beba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f023 0303 	bic.w	r3, r3, #3
 800bec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	4313      	orrs	r3, r2
 800becc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f023 0302 	bic.w	r3, r3, #2
 800bed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	4313      	orrs	r3, r2
 800bede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a2d      	ldr	r2, [pc, #180]	; (800bf98 <TIM_OC1_SetConfig+0x10c>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d00f      	beq.n	800bf08 <TIM_OC1_SetConfig+0x7c>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a2c      	ldr	r2, [pc, #176]	; (800bf9c <TIM_OC1_SetConfig+0x110>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d00b      	beq.n	800bf08 <TIM_OC1_SetConfig+0x7c>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a2b      	ldr	r2, [pc, #172]	; (800bfa0 <TIM_OC1_SetConfig+0x114>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d007      	beq.n	800bf08 <TIM_OC1_SetConfig+0x7c>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a2a      	ldr	r2, [pc, #168]	; (800bfa4 <TIM_OC1_SetConfig+0x118>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d003      	beq.n	800bf08 <TIM_OC1_SetConfig+0x7c>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a29      	ldr	r2, [pc, #164]	; (800bfa8 <TIM_OC1_SetConfig+0x11c>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d10c      	bne.n	800bf22 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f023 0308 	bic.w	r3, r3, #8
 800bf0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f023 0304 	bic.w	r3, r3, #4
 800bf20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a1c      	ldr	r2, [pc, #112]	; (800bf98 <TIM_OC1_SetConfig+0x10c>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d00f      	beq.n	800bf4a <TIM_OC1_SetConfig+0xbe>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a1b      	ldr	r2, [pc, #108]	; (800bf9c <TIM_OC1_SetConfig+0x110>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d00b      	beq.n	800bf4a <TIM_OC1_SetConfig+0xbe>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a1a      	ldr	r2, [pc, #104]	; (800bfa0 <TIM_OC1_SetConfig+0x114>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d007      	beq.n	800bf4a <TIM_OC1_SetConfig+0xbe>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4a19      	ldr	r2, [pc, #100]	; (800bfa4 <TIM_OC1_SetConfig+0x118>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d003      	beq.n	800bf4a <TIM_OC1_SetConfig+0xbe>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4a18      	ldr	r2, [pc, #96]	; (800bfa8 <TIM_OC1_SetConfig+0x11c>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d111      	bne.n	800bf6e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	699b      	ldr	r3, [r3, #24]
 800bf68:	693a      	ldr	r2, [r7, #16]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	693a      	ldr	r2, [r7, #16]
 800bf72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	685a      	ldr	r2, [r3, #4]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	697a      	ldr	r2, [r7, #20]
 800bf86:	621a      	str	r2, [r3, #32]
}
 800bf88:	bf00      	nop
 800bf8a:	371c      	adds	r7, #28
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	fffeff8f 	.word	0xfffeff8f
 800bf98:	40010000 	.word	0x40010000
 800bf9c:	40010400 	.word	0x40010400
 800bfa0:	40014000 	.word	0x40014000
 800bfa4:	40014400 	.word	0x40014400
 800bfa8:	40014800 	.word	0x40014800

0800bfac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	f023 0210 	bic.w	r2, r3, #16
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	699b      	ldr	r3, [r3, #24]
 800bfd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	4b34      	ldr	r3, [pc, #208]	; (800c0a8 <TIM_OC2_SetConfig+0xfc>)
 800bfd8:	4013      	ands	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	021b      	lsls	r3, r3, #8
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	f023 0320 	bic.w	r3, r3, #32
 800bff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	011b      	lsls	r3, r3, #4
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	4313      	orrs	r3, r2
 800c002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a29      	ldr	r2, [pc, #164]	; (800c0ac <TIM_OC2_SetConfig+0x100>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d003      	beq.n	800c014 <TIM_OC2_SetConfig+0x68>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a28      	ldr	r2, [pc, #160]	; (800c0b0 <TIM_OC2_SetConfig+0x104>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d10d      	bne.n	800c030 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c01a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	011b      	lsls	r3, r3, #4
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	4313      	orrs	r3, r2
 800c026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c02e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a1e      	ldr	r2, [pc, #120]	; (800c0ac <TIM_OC2_SetConfig+0x100>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d00f      	beq.n	800c058 <TIM_OC2_SetConfig+0xac>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4a1d      	ldr	r2, [pc, #116]	; (800c0b0 <TIM_OC2_SetConfig+0x104>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d00b      	beq.n	800c058 <TIM_OC2_SetConfig+0xac>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a1c      	ldr	r2, [pc, #112]	; (800c0b4 <TIM_OC2_SetConfig+0x108>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d007      	beq.n	800c058 <TIM_OC2_SetConfig+0xac>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a1b      	ldr	r2, [pc, #108]	; (800c0b8 <TIM_OC2_SetConfig+0x10c>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d003      	beq.n	800c058 <TIM_OC2_SetConfig+0xac>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a1a      	ldr	r2, [pc, #104]	; (800c0bc <TIM_OC2_SetConfig+0x110>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d113      	bne.n	800c080 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c05e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	695b      	ldr	r3, [r3, #20]
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	4313      	orrs	r3, r2
 800c072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	693a      	ldr	r2, [r7, #16]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	621a      	str	r2, [r3, #32]
}
 800c09a:	bf00      	nop
 800c09c:	371c      	adds	r7, #28
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	feff8fff 	.word	0xfeff8fff
 800c0ac:	40010000 	.word	0x40010000
 800c0b0:	40010400 	.word	0x40010400
 800c0b4:	40014000 	.word	0x40014000
 800c0b8:	40014400 	.word	0x40014400
 800c0bc:	40014800 	.word	0x40014800

0800c0c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a1b      	ldr	r3, [r3, #32]
 800c0ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	69db      	ldr	r3, [r3, #28]
 800c0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	4b33      	ldr	r3, [pc, #204]	; (800c1b8 <TIM_OC3_SetConfig+0xf8>)
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f023 0303 	bic.w	r3, r3, #3
 800c0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	021b      	lsls	r3, r3, #8
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	4313      	orrs	r3, r2
 800c114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a28      	ldr	r2, [pc, #160]	; (800c1bc <TIM_OC3_SetConfig+0xfc>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d003      	beq.n	800c126 <TIM_OC3_SetConfig+0x66>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a27      	ldr	r2, [pc, #156]	; (800c1c0 <TIM_OC3_SetConfig+0x100>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d10d      	bne.n	800c142 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c12c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	021b      	lsls	r3, r3, #8
 800c134:	697a      	ldr	r2, [r7, #20]
 800c136:	4313      	orrs	r3, r2
 800c138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4a1d      	ldr	r2, [pc, #116]	; (800c1bc <TIM_OC3_SetConfig+0xfc>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d00f      	beq.n	800c16a <TIM_OC3_SetConfig+0xaa>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	4a1c      	ldr	r2, [pc, #112]	; (800c1c0 <TIM_OC3_SetConfig+0x100>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d00b      	beq.n	800c16a <TIM_OC3_SetConfig+0xaa>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4a1b      	ldr	r2, [pc, #108]	; (800c1c4 <TIM_OC3_SetConfig+0x104>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d007      	beq.n	800c16a <TIM_OC3_SetConfig+0xaa>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4a1a      	ldr	r2, [pc, #104]	; (800c1c8 <TIM_OC3_SetConfig+0x108>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d003      	beq.n	800c16a <TIM_OC3_SetConfig+0xaa>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a19      	ldr	r2, [pc, #100]	; (800c1cc <TIM_OC3_SetConfig+0x10c>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d113      	bne.n	800c192 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	695b      	ldr	r3, [r3, #20]
 800c17e:	011b      	lsls	r3, r3, #4
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	4313      	orrs	r3, r2
 800c184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	699b      	ldr	r3, [r3, #24]
 800c18a:	011b      	lsls	r3, r3, #4
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	4313      	orrs	r3, r2
 800c190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	693a      	ldr	r2, [r7, #16]
 800c196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	697a      	ldr	r2, [r7, #20]
 800c1aa:	621a      	str	r2, [r3, #32]
}
 800c1ac:	bf00      	nop
 800c1ae:	371c      	adds	r7, #28
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr
 800c1b8:	fffeff8f 	.word	0xfffeff8f
 800c1bc:	40010000 	.word	0x40010000
 800c1c0:	40010400 	.word	0x40010400
 800c1c4:	40014000 	.word	0x40014000
 800c1c8:	40014400 	.word	0x40014400
 800c1cc:	40014800 	.word	0x40014800

0800c1d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b087      	sub	sp, #28
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a1b      	ldr	r3, [r3, #32]
 800c1de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a1b      	ldr	r3, [r3, #32]
 800c1ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	69db      	ldr	r3, [r3, #28]
 800c1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	4b24      	ldr	r3, [pc, #144]	; (800c28c <TIM_OC4_SetConfig+0xbc>)
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	021b      	lsls	r3, r3, #8
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	4313      	orrs	r3, r2
 800c212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c21a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	031b      	lsls	r3, r3, #12
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	4313      	orrs	r3, r2
 800c226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a19      	ldr	r2, [pc, #100]	; (800c290 <TIM_OC4_SetConfig+0xc0>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d00f      	beq.n	800c250 <TIM_OC4_SetConfig+0x80>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a18      	ldr	r2, [pc, #96]	; (800c294 <TIM_OC4_SetConfig+0xc4>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d00b      	beq.n	800c250 <TIM_OC4_SetConfig+0x80>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a17      	ldr	r2, [pc, #92]	; (800c298 <TIM_OC4_SetConfig+0xc8>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d007      	beq.n	800c250 <TIM_OC4_SetConfig+0x80>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a16      	ldr	r2, [pc, #88]	; (800c29c <TIM_OC4_SetConfig+0xcc>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d003      	beq.n	800c250 <TIM_OC4_SetConfig+0x80>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a15      	ldr	r2, [pc, #84]	; (800c2a0 <TIM_OC4_SetConfig+0xd0>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d109      	bne.n	800c264 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	019b      	lsls	r3, r3, #6
 800c25e:	697a      	ldr	r2, [r7, #20]
 800c260:	4313      	orrs	r3, r2
 800c262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	697a      	ldr	r2, [r7, #20]
 800c268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	621a      	str	r2, [r3, #32]
}
 800c27e:	bf00      	nop
 800c280:	371c      	adds	r7, #28
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	feff8fff 	.word	0xfeff8fff
 800c290:	40010000 	.word	0x40010000
 800c294:	40010400 	.word	0x40010400
 800c298:	40014000 	.word	0x40014000
 800c29c:	40014400 	.word	0x40014400
 800c2a0:	40014800 	.word	0x40014800

0800c2a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b087      	sub	sp, #28
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a1b      	ldr	r3, [r3, #32]
 800c2b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a1b      	ldr	r3, [r3, #32]
 800c2be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	4b21      	ldr	r3, [pc, #132]	; (800c354 <TIM_OC5_SetConfig+0xb0>)
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c2e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	041b      	lsls	r3, r3, #16
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a18      	ldr	r2, [pc, #96]	; (800c358 <TIM_OC5_SetConfig+0xb4>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d00f      	beq.n	800c31a <TIM_OC5_SetConfig+0x76>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a17      	ldr	r2, [pc, #92]	; (800c35c <TIM_OC5_SetConfig+0xb8>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d00b      	beq.n	800c31a <TIM_OC5_SetConfig+0x76>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a16      	ldr	r2, [pc, #88]	; (800c360 <TIM_OC5_SetConfig+0xbc>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d007      	beq.n	800c31a <TIM_OC5_SetConfig+0x76>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a15      	ldr	r2, [pc, #84]	; (800c364 <TIM_OC5_SetConfig+0xc0>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d003      	beq.n	800c31a <TIM_OC5_SetConfig+0x76>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a14      	ldr	r2, [pc, #80]	; (800c368 <TIM_OC5_SetConfig+0xc4>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d109      	bne.n	800c32e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c320:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	695b      	ldr	r3, [r3, #20]
 800c326:	021b      	lsls	r3, r3, #8
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	685a      	ldr	r2, [r3, #4]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	693a      	ldr	r2, [r7, #16]
 800c346:	621a      	str	r2, [r3, #32]
}
 800c348:	bf00      	nop
 800c34a:	371c      	adds	r7, #28
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	fffeff8f 	.word	0xfffeff8f
 800c358:	40010000 	.word	0x40010000
 800c35c:	40010400 	.word	0x40010400
 800c360:	40014000 	.word	0x40014000
 800c364:	40014400 	.word	0x40014400
 800c368:	40014800 	.word	0x40014800

0800c36c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b087      	sub	sp, #28
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	4b22      	ldr	r3, [pc, #136]	; (800c420 <TIM_OC6_SetConfig+0xb4>)
 800c398:	4013      	ands	r3, r2
 800c39a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	021b      	lsls	r3, r3, #8
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c3ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	051b      	lsls	r3, r3, #20
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a19      	ldr	r2, [pc, #100]	; (800c424 <TIM_OC6_SetConfig+0xb8>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d00f      	beq.n	800c3e4 <TIM_OC6_SetConfig+0x78>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a18      	ldr	r2, [pc, #96]	; (800c428 <TIM_OC6_SetConfig+0xbc>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d00b      	beq.n	800c3e4 <TIM_OC6_SetConfig+0x78>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a17      	ldr	r2, [pc, #92]	; (800c42c <TIM_OC6_SetConfig+0xc0>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d007      	beq.n	800c3e4 <TIM_OC6_SetConfig+0x78>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a16      	ldr	r2, [pc, #88]	; (800c430 <TIM_OC6_SetConfig+0xc4>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d003      	beq.n	800c3e4 <TIM_OC6_SetConfig+0x78>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a15      	ldr	r2, [pc, #84]	; (800c434 <TIM_OC6_SetConfig+0xc8>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d109      	bne.n	800c3f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	029b      	lsls	r3, r3, #10
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	621a      	str	r2, [r3, #32]
}
 800c412:	bf00      	nop
 800c414:	371c      	adds	r7, #28
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	feff8fff 	.word	0xfeff8fff
 800c424:	40010000 	.word	0x40010000
 800c428:	40010400 	.word	0x40010400
 800c42c:	40014000 	.word	0x40014000
 800c430:	40014400 	.word	0x40014400
 800c434:	40014800 	.word	0x40014800

0800c438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6a1b      	ldr	r3, [r3, #32]
 800c448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	f023 0201 	bic.w	r2, r3, #1
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	011b      	lsls	r3, r3, #4
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f023 030a 	bic.w	r3, r3, #10
 800c474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	693a      	ldr	r2, [r7, #16]
 800c482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	621a      	str	r2, [r3, #32]
}
 800c48a:	bf00      	nop
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c496:	b480      	push	{r7}
 800c498:	b087      	sub	sp, #28
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	f023 0210 	bic.w	r2, r3, #16
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6a1b      	ldr	r3, [r3, #32]
 800c4b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	031b      	lsls	r3, r3, #12
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	011b      	lsls	r3, r3, #4
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	697a      	ldr	r2, [r7, #20]
 800c4e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	693a      	ldr	r2, [r7, #16]
 800c4e8:	621a      	str	r2, [r3, #32]
}
 800c4ea:	bf00      	nop
 800c4ec:	371c      	adds	r7, #28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
	...

0800c4f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	4b09      	ldr	r3, [pc, #36]	; (800c530 <TIM_ITRx_SetConfig+0x38>)
 800c50c:	4013      	ands	r3, r2
 800c50e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	4313      	orrs	r3, r2
 800c516:	f043 0307 	orr.w	r3, r3, #7
 800c51a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	609a      	str	r2, [r3, #8]
}
 800c522:	bf00      	nop
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	ffcfff8f 	.word	0xffcfff8f

0800c534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c534:	b480      	push	{r7}
 800c536:	b087      	sub	sp, #28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c54e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	021a      	lsls	r2, r3, #8
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	431a      	orrs	r2, r3
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	4313      	orrs	r3, r2
 800c560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	609a      	str	r2, [r3, #8]
}
 800c568:	bf00      	nop
 800c56a:	371c      	adds	r7, #28
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c574:	b480      	push	{r7}
 800c576:	b087      	sub	sp, #28
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	f003 031f 	and.w	r3, r3, #31
 800c586:	2201      	movs	r2, #1
 800c588:	fa02 f303 	lsl.w	r3, r2, r3
 800c58c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6a1a      	ldr	r2, [r3, #32]
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	43db      	mvns	r3, r3
 800c596:	401a      	ands	r2, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6a1a      	ldr	r2, [r3, #32]
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	f003 031f 	and.w	r3, r3, #31
 800c5a6:	6879      	ldr	r1, [r7, #4]
 800c5a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ac:	431a      	orrs	r2, r3
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	621a      	str	r2, [r3, #32]
}
 800c5b2:	bf00      	nop
 800c5b4:	371c      	adds	r7, #28
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
	...

0800c5c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d101      	bne.n	800c5d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	e077      	b.n	800c6c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a35      	ldr	r2, [pc, #212]	; (800c6d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d004      	beq.n	800c60c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a34      	ldr	r2, [pc, #208]	; (800c6d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d108      	bne.n	800c61e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c612:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c624:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a25      	ldr	r2, [pc, #148]	; (800c6d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d02c      	beq.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c64a:	d027      	beq.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a22      	ldr	r2, [pc, #136]	; (800c6dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d022      	beq.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a21      	ldr	r2, [pc, #132]	; (800c6e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d01d      	beq.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a1f      	ldr	r2, [pc, #124]	; (800c6e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d018      	beq.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a1a      	ldr	r2, [pc, #104]	; (800c6d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d013      	beq.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a1b      	ldr	r2, [pc, #108]	; (800c6e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d00e      	beq.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a1a      	ldr	r2, [pc, #104]	; (800c6ec <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d009      	beq.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a18      	ldr	r2, [pc, #96]	; (800c6f0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d004      	beq.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a17      	ldr	r2, [pc, #92]	; (800c6f4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d10c      	bne.n	800c6b6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3714      	adds	r7, #20
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr
 800c6d4:	40010000 	.word	0x40010000
 800c6d8:	40010400 	.word	0x40010400
 800c6dc:	40000400 	.word	0x40000400
 800c6e0:	40000800 	.word	0x40000800
 800c6e4:	40000c00 	.word	0x40000c00
 800c6e8:	40001800 	.word	0x40001800
 800c6ec:	40014000 	.word	0x40014000
 800c6f0:	4000e000 	.word	0x4000e000
 800c6f4:	4000e400 	.word	0x4000e400

0800c6f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c702:	2300      	movs	r3, #0
 800c704:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d101      	bne.n	800c714 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c710:	2302      	movs	r3, #2
 800c712:	e087      	b.n	800c824 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	4313      	orrs	r3, r2
 800c728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	4313      	orrs	r3, r2
 800c736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	4313      	orrs	r3, r2
 800c744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4313      	orrs	r3, r2
 800c752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	4313      	orrs	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c77a:	4313      	orrs	r3, r2
 800c77c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	699b      	ldr	r3, [r3, #24]
 800c788:	041b      	lsls	r3, r3, #16
 800c78a:	4313      	orrs	r3, r2
 800c78c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a27      	ldr	r2, [pc, #156]	; (800c830 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d004      	beq.n	800c7a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a25      	ldr	r2, [pc, #148]	; (800c834 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d106      	bne.n	800c7b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	69db      	ldr	r3, [r3, #28]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a1e      	ldr	r2, [pc, #120]	; (800c830 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d004      	beq.n	800c7c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a1d      	ldr	r2, [pc, #116]	; (800c834 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d126      	bne.n	800c812 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ce:	051b      	lsls	r3, r3, #20
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a0e      	ldr	r2, [pc, #56]	; (800c830 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d004      	beq.n	800c804 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a0d      	ldr	r2, [pc, #52]	; (800c834 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d106      	bne.n	800c812 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80e:	4313      	orrs	r3, r2
 800c810:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr
 800c830:	40010000 	.word	0x40010000
 800c834:	40010400 	.word	0x40010400

0800c838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c868:	bf00      	nop
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	e042      	b.n	800c90c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d106      	bne.n	800c89e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f7f7 ff99 	bl	80047d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2224      	movs	r2, #36	; 0x24
 800c8a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f022 0201 	bic.w	r2, r2, #1
 800c8b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fd0e 	bl	800d2d8 <UART_SetConfig>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d101      	bne.n	800c8c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e022      	b.n	800c90c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d002      	beq.n	800c8d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f001 fb6e 	bl	800dfb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	685a      	ldr	r2, [r3, #4]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	689a      	ldr	r2, [r3, #8]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f042 0201 	orr.w	r2, r2, #1
 800c902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f001 fbf5 	bl	800e0f4 <UART_CheckIdleState>
 800c90a:	4603      	mov	r3, r0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d101      	bne.n	800c926 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	e02e      	b.n	800c984 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2224      	movs	r2, #36	; 0x24
 800c92a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f022 0201 	bic.w	r2, r2, #1
 800c93c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2200      	movs	r2, #0
 800c944:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2200      	movs	r2, #0
 800c94c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2200      	movs	r2, #0
 800c954:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7f8 f822 	bl	80049a0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b08a      	sub	sp, #40	; 0x28
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	4613      	mov	r3, r2
 800c998:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9a0:	2b20      	cmp	r3, #32
 800c9a2:	d17a      	bne.n	800ca9a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d002      	beq.n	800c9b0 <HAL_UART_Transmit_DMA+0x24>
 800c9aa:	88fb      	ldrh	r3, [r7, #6]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e073      	b.n	800ca9c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d101      	bne.n	800c9c2 <HAL_UART_Transmit_DMA+0x36>
 800c9be:	2302      	movs	r3, #2
 800c9c0:	e06c      	b.n	800ca9c <HAL_UART_Transmit_DMA+0x110>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	88fa      	ldrh	r2, [r7, #6]
 800c9d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	88fa      	ldrh	r2, [r7, #6]
 800c9dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2221      	movs	r2, #33	; 0x21
 800c9ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d02c      	beq.n	800ca52 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9fc:	4a29      	ldr	r2, [pc, #164]	; (800caa4 <HAL_UART_Transmit_DMA+0x118>)
 800c9fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca04:	4a28      	ldr	r2, [pc, #160]	; (800caa8 <HAL_UART_Transmit_DMA+0x11c>)
 800ca06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca0c:	4a27      	ldr	r2, [pc, #156]	; (800caac <HAL_UART_Transmit_DMA+0x120>)
 800ca0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca14:	2200      	movs	r2, #0
 800ca16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca20:	4619      	mov	r1, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	3328      	adds	r3, #40	; 0x28
 800ca28:	461a      	mov	r2, r3
 800ca2a:	88fb      	ldrh	r3, [r7, #6]
 800ca2c:	f7f9 fa56 	bl	8005edc <HAL_DMA_Start_IT>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00d      	beq.n	800ca52 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2210      	movs	r2, #16
 800ca3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2220      	movs	r2, #32
 800ca4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e024      	b.n	800ca9c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2240      	movs	r2, #64	; 0x40
 800ca58:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	3308      	adds	r3, #8
 800ca68:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	e853 3f00 	ldrex	r3, [r3]
 800ca70:	613b      	str	r3, [r7, #16]
   return(result);
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca78:	627b      	str	r3, [r7, #36]	; 0x24
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3308      	adds	r3, #8
 800ca80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca82:	623a      	str	r2, [r7, #32]
 800ca84:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca86:	69f9      	ldr	r1, [r7, #28]
 800ca88:	6a3a      	ldr	r2, [r7, #32]
 800ca8a:	e841 2300 	strex	r3, r2, [r1]
 800ca8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca90:	69bb      	ldr	r3, [r7, #24]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1e5      	bne.n	800ca62 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ca96:	2300      	movs	r3, #0
 800ca98:	e000      	b.n	800ca9c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ca9a:	2302      	movs	r3, #2
  }
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3728      	adds	r7, #40	; 0x28
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	0800e5bd 	.word	0x0800e5bd
 800caa8:	0800e653 	.word	0x0800e653
 800caac:	0800e7c9 	.word	0x0800e7c9

0800cab0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b08a      	sub	sp, #40	; 0x28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	4613      	mov	r3, r2
 800cabc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cac4:	2b20      	cmp	r3, #32
 800cac6:	d142      	bne.n	800cb4e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d002      	beq.n	800cad4 <HAL_UART_Receive_DMA+0x24>
 800cace:	88fb      	ldrh	r3, [r7, #6]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d101      	bne.n	800cad8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	e03b      	b.n	800cb50 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d101      	bne.n	800cae6 <HAL_UART_Receive_DMA+0x36>
 800cae2:	2302      	movs	r3, #2
 800cae4:	e034      	b.n	800cb50 <HAL_UART_Receive_DMA+0xa0>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2201      	movs	r2, #1
 800caea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a17      	ldr	r2, [pc, #92]	; (800cb58 <HAL_UART_Receive_DMA+0xa8>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d01f      	beq.n	800cb3e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d018      	beq.n	800cb3e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	e853 3f00 	ldrex	r3, [r3]
 800cb18:	613b      	str	r3, [r7, #16]
   return(result);
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb20:	627b      	str	r3, [r7, #36]	; 0x24
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	623b      	str	r3, [r7, #32]
 800cb2c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2e:	69f9      	ldr	r1, [r7, #28]
 800cb30:	6a3a      	ldr	r2, [r7, #32]
 800cb32:	e841 2300 	strex	r3, r2, [r1]
 800cb36:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e6      	bne.n	800cb0c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb3e:	88fb      	ldrh	r3, [r7, #6]
 800cb40:	461a      	mov	r2, r3
 800cb42:	68b9      	ldr	r1, [r7, #8]
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f001 fbe9 	bl	800e31c <UART_Start_Receive_DMA>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	e000      	b.n	800cb50 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cb4e:	2302      	movs	r3, #2
  }
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3728      	adds	r7, #40	; 0x28
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	58000c00 	.word	0x58000c00

0800cb5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b0ba      	sub	sp, #232	; 0xe8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cb86:	f640 030f 	movw	r3, #2063	; 0x80f
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cb90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d11b      	bne.n	800cbd0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb9c:	f003 0320 	and.w	r3, r3, #32
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d015      	beq.n	800cbd0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cba8:	f003 0320 	and.w	r3, r3, #32
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d105      	bne.n	800cbbc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d009      	beq.n	800cbd0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f000 835a 	beq.w	800d27a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	4798      	blx	r3
      }
      return;
 800cbce:	e354      	b.n	800d27a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cbd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f000 811f 	beq.w	800ce18 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cbda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cbde:	4b8b      	ldr	r3, [pc, #556]	; (800ce0c <HAL_UART_IRQHandler+0x2b0>)
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cbe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cbea:	4b89      	ldr	r3, [pc, #548]	; (800ce10 <HAL_UART_IRQHandler+0x2b4>)
 800cbec:	4013      	ands	r3, r2
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f000 8112 	beq.w	800ce18 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cbf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d011      	beq.n	800cc24 <HAL_UART_IRQHandler+0xc8>
 800cc00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00b      	beq.n	800cc24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2201      	movs	r2, #1
 800cc12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc1a:	f043 0201 	orr.w	r2, r3, #1
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc28:	f003 0302 	and.w	r3, r3, #2
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d011      	beq.n	800cc54 <HAL_UART_IRQHandler+0xf8>
 800cc30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc34:	f003 0301 	and.w	r3, r3, #1
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00b      	beq.n	800cc54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2202      	movs	r2, #2
 800cc42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc4a:	f043 0204 	orr.w	r2, r3, #4
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc58:	f003 0304 	and.w	r3, r3, #4
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d011      	beq.n	800cc84 <HAL_UART_IRQHandler+0x128>
 800cc60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00b      	beq.n	800cc84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2204      	movs	r2, #4
 800cc72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc7a:	f043 0202 	orr.w	r2, r3, #2
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc88:	f003 0308 	and.w	r3, r3, #8
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d017      	beq.n	800ccc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc94:	f003 0320 	and.w	r3, r3, #32
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d105      	bne.n	800cca8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cc9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cca0:	4b5a      	ldr	r3, [pc, #360]	; (800ce0c <HAL_UART_IRQHandler+0x2b0>)
 800cca2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00b      	beq.n	800ccc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2208      	movs	r2, #8
 800ccae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccb6:	f043 0208 	orr.w	r2, r3, #8
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ccc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d012      	beq.n	800ccf2 <HAL_UART_IRQHandler+0x196>
 800cccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ccd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00c      	beq.n	800ccf2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cce8:	f043 0220 	orr.w	r2, r3, #32
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f000 82c0 	beq.w	800d27e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ccfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd02:	f003 0320 	and.w	r3, r3, #32
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d013      	beq.n	800cd32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd0e:	f003 0320 	and.w	r3, r3, #32
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d105      	bne.n	800cd22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d007      	beq.n	800cd32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d003      	beq.n	800cd32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd46:	2b40      	cmp	r3, #64	; 0x40
 800cd48:	d005      	beq.n	800cd56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d04f      	beq.n	800cdf6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f001 fbca 	bl	800e4f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd66:	2b40      	cmp	r3, #64	; 0x40
 800cd68:	d141      	bne.n	800cdee <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	3308      	adds	r3, #8
 800cd70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd78:	e853 3f00 	ldrex	r3, [r3]
 800cd7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cd80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	3308      	adds	r3, #8
 800cd92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cd96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cd9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cda2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cda6:	e841 2300 	strex	r3, r2, [r1]
 800cdaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cdae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1d9      	bne.n	800cd6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d013      	beq.n	800cde6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdc2:	4a14      	ldr	r2, [pc, #80]	; (800ce14 <HAL_UART_IRQHandler+0x2b8>)
 800cdc4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7f9 fe0e 	bl	80069ec <HAL_DMA_Abort_IT>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d017      	beq.n	800ce06 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cde0:	4610      	mov	r0, r2
 800cde2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cde4:	e00f      	b.n	800ce06 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f7f6 f9ee 	bl	80031c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdec:	e00b      	b.n	800ce06 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7f6 f9ea 	bl	80031c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdf4:	e007      	b.n	800ce06 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f7f6 f9e6 	bl	80031c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ce04:	e23b      	b.n	800d27e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce06:	bf00      	nop
    return;
 800ce08:	e239      	b.n	800d27e <HAL_UART_IRQHandler+0x722>
 800ce0a:	bf00      	nop
 800ce0c:	10000001 	.word	0x10000001
 800ce10:	04000120 	.word	0x04000120
 800ce14:	0800e849 	.word	0x0800e849

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	f040 81ce 	bne.w	800d1be <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce26:	f003 0310 	and.w	r3, r3, #16
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f000 81c7 	beq.w	800d1be <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce34:	f003 0310 	and.w	r3, r3, #16
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 81c0 	beq.w	800d1be <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2210      	movs	r2, #16
 800ce44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce50:	2b40      	cmp	r3, #64	; 0x40
 800ce52:	f040 813b 	bne.w	800d0cc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a8b      	ldr	r2, [pc, #556]	; (800d08c <HAL_UART_IRQHandler+0x530>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d059      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a89      	ldr	r2, [pc, #548]	; (800d090 <HAL_UART_IRQHandler+0x534>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d053      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a87      	ldr	r2, [pc, #540]	; (800d094 <HAL_UART_IRQHandler+0x538>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d04d      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a85      	ldr	r2, [pc, #532]	; (800d098 <HAL_UART_IRQHandler+0x53c>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d047      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a83      	ldr	r2, [pc, #524]	; (800d09c <HAL_UART_IRQHandler+0x540>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d041      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a81      	ldr	r2, [pc, #516]	; (800d0a0 <HAL_UART_IRQHandler+0x544>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d03b      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a7f      	ldr	r2, [pc, #508]	; (800d0a4 <HAL_UART_IRQHandler+0x548>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d035      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a7d      	ldr	r2, [pc, #500]	; (800d0a8 <HAL_UART_IRQHandler+0x54c>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d02f      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a7b      	ldr	r2, [pc, #492]	; (800d0ac <HAL_UART_IRQHandler+0x550>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d029      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a79      	ldr	r2, [pc, #484]	; (800d0b0 <HAL_UART_IRQHandler+0x554>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d023      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a77      	ldr	r2, [pc, #476]	; (800d0b4 <HAL_UART_IRQHandler+0x558>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d01d      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a75      	ldr	r2, [pc, #468]	; (800d0b8 <HAL_UART_IRQHandler+0x55c>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d017      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a73      	ldr	r2, [pc, #460]	; (800d0bc <HAL_UART_IRQHandler+0x560>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d011      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a71      	ldr	r2, [pc, #452]	; (800d0c0 <HAL_UART_IRQHandler+0x564>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d00b      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a6f      	ldr	r2, [pc, #444]	; (800d0c4 <HAL_UART_IRQHandler+0x568>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d005      	beq.n	800cf16 <HAL_UART_IRQHandler+0x3ba>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a6d      	ldr	r2, [pc, #436]	; (800d0c8 <HAL_UART_IRQHandler+0x56c>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d105      	bne.n	800cf22 <HAL_UART_IRQHandler+0x3c6>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	e004      	b.n	800cf2c <HAL_UART_IRQHandler+0x3d0>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cf30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f000 81a4 	beq.w	800d282 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cf44:	429a      	cmp	r2, r3
 800cf46:	f080 819c 	bcs.w	800d282 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cf50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf58:	69db      	ldr	r3, [r3, #28]
 800cf5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf5e:	f000 8086 	beq.w	800d06e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf6e:	e853 3f00 	ldrex	r3, [r3]
 800cf72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cf76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cf8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf90:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cf98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf9c:	e841 2300 	strex	r3, r2, [r1]
 800cfa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cfa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1da      	bne.n	800cf62 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3308      	adds	r3, #8
 800cfb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfb6:	e853 3f00 	ldrex	r3, [r3]
 800cfba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cfbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfbe:	f023 0301 	bic.w	r3, r3, #1
 800cfc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3308      	adds	r3, #8
 800cfcc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cfd0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cfd4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cfd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cfdc:	e841 2300 	strex	r3, r2, [r1]
 800cfe0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cfe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1e1      	bne.n	800cfac <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3308      	adds	r3, #8
 800cfee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cff2:	e853 3f00 	ldrex	r3, [r3]
 800cff6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	3308      	adds	r3, #8
 800d008:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d00c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d00e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d010:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d012:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d014:	e841 2300 	strex	r3, r2, [r1]
 800d018:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d01a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1e3      	bne.n	800cfe8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2220      	movs	r2, #32
 800d024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d036:	e853 3f00 	ldrex	r3, [r3]
 800d03a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d03c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d03e:	f023 0310 	bic.w	r3, r3, #16
 800d042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	461a      	mov	r2, r3
 800d04c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d050:	65bb      	str	r3, [r7, #88]	; 0x58
 800d052:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d054:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d058:	e841 2300 	strex	r3, r2, [r1]
 800d05c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d05e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1e4      	bne.n	800d02e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d068:	4618      	mov	r0, r3
 800d06a:	f7f9 f9a1 	bl	80063b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	b29b      	uxth	r3, r3
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 f91c 	bl	800d2c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d088:	e0fb      	b.n	800d282 <HAL_UART_IRQHandler+0x726>
 800d08a:	bf00      	nop
 800d08c:	40020010 	.word	0x40020010
 800d090:	40020028 	.word	0x40020028
 800d094:	40020040 	.word	0x40020040
 800d098:	40020058 	.word	0x40020058
 800d09c:	40020070 	.word	0x40020070
 800d0a0:	40020088 	.word	0x40020088
 800d0a4:	400200a0 	.word	0x400200a0
 800d0a8:	400200b8 	.word	0x400200b8
 800d0ac:	40020410 	.word	0x40020410
 800d0b0:	40020428 	.word	0x40020428
 800d0b4:	40020440 	.word	0x40020440
 800d0b8:	40020458 	.word	0x40020458
 800d0bc:	40020470 	.word	0x40020470
 800d0c0:	40020488 	.word	0x40020488
 800d0c4:	400204a0 	.word	0x400204a0
 800d0c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	1ad3      	subs	r3, r2, r3
 800d0dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 80cc 	beq.w	800d286 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d0ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	f000 80c7 	beq.w	800d286 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d100:	e853 3f00 	ldrex	r3, [r3]
 800d104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d10c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	461a      	mov	r2, r3
 800d116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d11a:	647b      	str	r3, [r7, #68]	; 0x44
 800d11c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d122:	e841 2300 	strex	r3, r2, [r1]
 800d126:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1e4      	bne.n	800d0f8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	3308      	adds	r3, #8
 800d134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d138:	e853 3f00 	ldrex	r3, [r3]
 800d13c:	623b      	str	r3, [r7, #32]
   return(result);
 800d13e:	6a3a      	ldr	r2, [r7, #32]
 800d140:	4b54      	ldr	r3, [pc, #336]	; (800d294 <HAL_UART_IRQHandler+0x738>)
 800d142:	4013      	ands	r3, r2
 800d144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3308      	adds	r3, #8
 800d14e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d152:	633a      	str	r2, [r7, #48]	; 0x30
 800d154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d15a:	e841 2300 	strex	r3, r2, [r1]
 800d15e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d162:	2b00      	cmp	r3, #0
 800d164:	d1e3      	bne.n	800d12e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2220      	movs	r2, #32
 800d16a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	e853 3f00 	ldrex	r3, [r3]
 800d186:	60fb      	str	r3, [r7, #12]
   return(result);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f023 0310 	bic.w	r3, r3, #16
 800d18e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	461a      	mov	r2, r3
 800d198:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d19c:	61fb      	str	r3, [r7, #28]
 800d19e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a0:	69b9      	ldr	r1, [r7, #24]
 800d1a2:	69fa      	ldr	r2, [r7, #28]
 800d1a4:	e841 2300 	strex	r3, r2, [r1]
 800d1a8:	617b      	str	r3, [r7, #20]
   return(result);
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d1e4      	bne.n	800d17a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d1b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 f882 	bl	800d2c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d1bc:	e063      	b.n	800d286 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00e      	beq.n	800d1e8 <HAL_UART_IRQHandler+0x68c>
 800d1ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d008      	beq.n	800d1e8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d1de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f001 fb72 	bl	800e8ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1e6:	e051      	b.n	800d28c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d014      	beq.n	800d21e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d105      	bne.n	800d20c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d008      	beq.n	800d21e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d210:	2b00      	cmp	r3, #0
 800d212:	d03a      	beq.n	800d28a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	4798      	blx	r3
    }
    return;
 800d21c:	e035      	b.n	800d28a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d226:	2b00      	cmp	r3, #0
 800d228:	d009      	beq.n	800d23e <HAL_UART_IRQHandler+0x6e2>
 800d22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d232:	2b00      	cmp	r3, #0
 800d234:	d003      	beq.n	800d23e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f001 fb1c 	bl	800e874 <UART_EndTransmit_IT>
    return;
 800d23c:	e026      	b.n	800d28c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d246:	2b00      	cmp	r3, #0
 800d248:	d009      	beq.n	800d25e <HAL_UART_IRQHandler+0x702>
 800d24a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d24e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d252:	2b00      	cmp	r3, #0
 800d254:	d003      	beq.n	800d25e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f001 fb4b 	bl	800e8f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d25c:	e016      	b.n	800d28c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d25e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d266:	2b00      	cmp	r3, #0
 800d268:	d010      	beq.n	800d28c <HAL_UART_IRQHandler+0x730>
 800d26a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	da0c      	bge.n	800d28c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f001 fb33 	bl	800e8de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d278:	e008      	b.n	800d28c <HAL_UART_IRQHandler+0x730>
      return;
 800d27a:	bf00      	nop
 800d27c:	e006      	b.n	800d28c <HAL_UART_IRQHandler+0x730>
    return;
 800d27e:	bf00      	nop
 800d280:	e004      	b.n	800d28c <HAL_UART_IRQHandler+0x730>
      return;
 800d282:	bf00      	nop
 800d284:	e002      	b.n	800d28c <HAL_UART_IRQHandler+0x730>
      return;
 800d286:	bf00      	nop
 800d288:	e000      	b.n	800d28c <HAL_UART_IRQHandler+0x730>
    return;
 800d28a:	bf00      	nop
  }
}
 800d28c:	37e8      	adds	r7, #232	; 0xe8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	effffffe 	.word	0xeffffffe

0800d298 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d2b4:	bf00      	nop
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2dc:	b092      	sub	sp, #72	; 0x48
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	689a      	ldr	r2, [r3, #8]
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	431a      	orrs	r2, r3
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	695b      	ldr	r3, [r3, #20]
 800d2f6:	431a      	orrs	r2, r3
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	69db      	ldr	r3, [r3, #28]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	4bbe      	ldr	r3, [pc, #760]	; (800d600 <UART_SetConfig+0x328>)
 800d308:	4013      	ands	r3, r2
 800d30a:	697a      	ldr	r2, [r7, #20]
 800d30c:	6812      	ldr	r2, [r2, #0]
 800d30e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d310:	430b      	orrs	r3, r1
 800d312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	68da      	ldr	r2, [r3, #12]
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	430a      	orrs	r2, r1
 800d328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4ab3      	ldr	r2, [pc, #716]	; (800d604 <UART_SetConfig+0x32c>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d004      	beq.n	800d344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d340:	4313      	orrs	r3, r2
 800d342:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	689a      	ldr	r2, [r3, #8]
 800d34a:	4baf      	ldr	r3, [pc, #700]	; (800d608 <UART_SetConfig+0x330>)
 800d34c:	4013      	ands	r3, r2
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	6812      	ldr	r2, [r2, #0]
 800d352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d354:	430b      	orrs	r3, r1
 800d356:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35e:	f023 010f 	bic.w	r1, r3, #15
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	430a      	orrs	r2, r1
 800d36c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4aa6      	ldr	r2, [pc, #664]	; (800d60c <UART_SetConfig+0x334>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d177      	bne.n	800d468 <UART_SetConfig+0x190>
 800d378:	4ba5      	ldr	r3, [pc, #660]	; (800d610 <UART_SetConfig+0x338>)
 800d37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d37c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d380:	2b28      	cmp	r3, #40	; 0x28
 800d382:	d86d      	bhi.n	800d460 <UART_SetConfig+0x188>
 800d384:	a201      	add	r2, pc, #4	; (adr r2, 800d38c <UART_SetConfig+0xb4>)
 800d386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38a:	bf00      	nop
 800d38c:	0800d431 	.word	0x0800d431
 800d390:	0800d461 	.word	0x0800d461
 800d394:	0800d461 	.word	0x0800d461
 800d398:	0800d461 	.word	0x0800d461
 800d39c:	0800d461 	.word	0x0800d461
 800d3a0:	0800d461 	.word	0x0800d461
 800d3a4:	0800d461 	.word	0x0800d461
 800d3a8:	0800d461 	.word	0x0800d461
 800d3ac:	0800d439 	.word	0x0800d439
 800d3b0:	0800d461 	.word	0x0800d461
 800d3b4:	0800d461 	.word	0x0800d461
 800d3b8:	0800d461 	.word	0x0800d461
 800d3bc:	0800d461 	.word	0x0800d461
 800d3c0:	0800d461 	.word	0x0800d461
 800d3c4:	0800d461 	.word	0x0800d461
 800d3c8:	0800d461 	.word	0x0800d461
 800d3cc:	0800d441 	.word	0x0800d441
 800d3d0:	0800d461 	.word	0x0800d461
 800d3d4:	0800d461 	.word	0x0800d461
 800d3d8:	0800d461 	.word	0x0800d461
 800d3dc:	0800d461 	.word	0x0800d461
 800d3e0:	0800d461 	.word	0x0800d461
 800d3e4:	0800d461 	.word	0x0800d461
 800d3e8:	0800d461 	.word	0x0800d461
 800d3ec:	0800d449 	.word	0x0800d449
 800d3f0:	0800d461 	.word	0x0800d461
 800d3f4:	0800d461 	.word	0x0800d461
 800d3f8:	0800d461 	.word	0x0800d461
 800d3fc:	0800d461 	.word	0x0800d461
 800d400:	0800d461 	.word	0x0800d461
 800d404:	0800d461 	.word	0x0800d461
 800d408:	0800d461 	.word	0x0800d461
 800d40c:	0800d451 	.word	0x0800d451
 800d410:	0800d461 	.word	0x0800d461
 800d414:	0800d461 	.word	0x0800d461
 800d418:	0800d461 	.word	0x0800d461
 800d41c:	0800d461 	.word	0x0800d461
 800d420:	0800d461 	.word	0x0800d461
 800d424:	0800d461 	.word	0x0800d461
 800d428:	0800d461 	.word	0x0800d461
 800d42c:	0800d459 	.word	0x0800d459
 800d430:	2301      	movs	r3, #1
 800d432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d436:	e326      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d438:	2304      	movs	r3, #4
 800d43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43e:	e322      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d440:	2308      	movs	r3, #8
 800d442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d446:	e31e      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d448:	2310      	movs	r3, #16
 800d44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44e:	e31a      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d450:	2320      	movs	r3, #32
 800d452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d456:	e316      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d458:	2340      	movs	r3, #64	; 0x40
 800d45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45e:	e312      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d460:	2380      	movs	r3, #128	; 0x80
 800d462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d466:	e30e      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a69      	ldr	r2, [pc, #420]	; (800d614 <UART_SetConfig+0x33c>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d130      	bne.n	800d4d4 <UART_SetConfig+0x1fc>
 800d472:	4b67      	ldr	r3, [pc, #412]	; (800d610 <UART_SetConfig+0x338>)
 800d474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d476:	f003 0307 	and.w	r3, r3, #7
 800d47a:	2b05      	cmp	r3, #5
 800d47c:	d826      	bhi.n	800d4cc <UART_SetConfig+0x1f4>
 800d47e:	a201      	add	r2, pc, #4	; (adr r2, 800d484 <UART_SetConfig+0x1ac>)
 800d480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d484:	0800d49d 	.word	0x0800d49d
 800d488:	0800d4a5 	.word	0x0800d4a5
 800d48c:	0800d4ad 	.word	0x0800d4ad
 800d490:	0800d4b5 	.word	0x0800d4b5
 800d494:	0800d4bd 	.word	0x0800d4bd
 800d498:	0800d4c5 	.word	0x0800d4c5
 800d49c:	2300      	movs	r3, #0
 800d49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a2:	e2f0      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d4a4:	2304      	movs	r3, #4
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4aa:	e2ec      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d4ac:	2308      	movs	r3, #8
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b2:	e2e8      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d4b4:	2310      	movs	r3, #16
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ba:	e2e4      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d4bc:	2320      	movs	r3, #32
 800d4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c2:	e2e0      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d4c4:	2340      	movs	r3, #64	; 0x40
 800d4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ca:	e2dc      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d4cc:	2380      	movs	r3, #128	; 0x80
 800d4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d2:	e2d8      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a4f      	ldr	r2, [pc, #316]	; (800d618 <UART_SetConfig+0x340>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d130      	bne.n	800d540 <UART_SetConfig+0x268>
 800d4de:	4b4c      	ldr	r3, [pc, #304]	; (800d610 <UART_SetConfig+0x338>)
 800d4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4e2:	f003 0307 	and.w	r3, r3, #7
 800d4e6:	2b05      	cmp	r3, #5
 800d4e8:	d826      	bhi.n	800d538 <UART_SetConfig+0x260>
 800d4ea:	a201      	add	r2, pc, #4	; (adr r2, 800d4f0 <UART_SetConfig+0x218>)
 800d4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f0:	0800d509 	.word	0x0800d509
 800d4f4:	0800d511 	.word	0x0800d511
 800d4f8:	0800d519 	.word	0x0800d519
 800d4fc:	0800d521 	.word	0x0800d521
 800d500:	0800d529 	.word	0x0800d529
 800d504:	0800d531 	.word	0x0800d531
 800d508:	2300      	movs	r3, #0
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d50e:	e2ba      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d510:	2304      	movs	r3, #4
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d516:	e2b6      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d518:	2308      	movs	r3, #8
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51e:	e2b2      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d520:	2310      	movs	r3, #16
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d526:	e2ae      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d528:	2320      	movs	r3, #32
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52e:	e2aa      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d530:	2340      	movs	r3, #64	; 0x40
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d536:	e2a6      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d538:	2380      	movs	r3, #128	; 0x80
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53e:	e2a2      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a35      	ldr	r2, [pc, #212]	; (800d61c <UART_SetConfig+0x344>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d130      	bne.n	800d5ac <UART_SetConfig+0x2d4>
 800d54a:	4b31      	ldr	r3, [pc, #196]	; (800d610 <UART_SetConfig+0x338>)
 800d54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d54e:	f003 0307 	and.w	r3, r3, #7
 800d552:	2b05      	cmp	r3, #5
 800d554:	d826      	bhi.n	800d5a4 <UART_SetConfig+0x2cc>
 800d556:	a201      	add	r2, pc, #4	; (adr r2, 800d55c <UART_SetConfig+0x284>)
 800d558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55c:	0800d575 	.word	0x0800d575
 800d560:	0800d57d 	.word	0x0800d57d
 800d564:	0800d585 	.word	0x0800d585
 800d568:	0800d58d 	.word	0x0800d58d
 800d56c:	0800d595 	.word	0x0800d595
 800d570:	0800d59d 	.word	0x0800d59d
 800d574:	2300      	movs	r3, #0
 800d576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d57a:	e284      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d57c:	2304      	movs	r3, #4
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d582:	e280      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d584:	2308      	movs	r3, #8
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58a:	e27c      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d58c:	2310      	movs	r3, #16
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d592:	e278      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d594:	2320      	movs	r3, #32
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59a:	e274      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d59c:	2340      	movs	r3, #64	; 0x40
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a2:	e270      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d5a4:	2380      	movs	r3, #128	; 0x80
 800d5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5aa:	e26c      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a1b      	ldr	r2, [pc, #108]	; (800d620 <UART_SetConfig+0x348>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d142      	bne.n	800d63c <UART_SetConfig+0x364>
 800d5b6:	4b16      	ldr	r3, [pc, #88]	; (800d610 <UART_SetConfig+0x338>)
 800d5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ba:	f003 0307 	and.w	r3, r3, #7
 800d5be:	2b05      	cmp	r3, #5
 800d5c0:	d838      	bhi.n	800d634 <UART_SetConfig+0x35c>
 800d5c2:	a201      	add	r2, pc, #4	; (adr r2, 800d5c8 <UART_SetConfig+0x2f0>)
 800d5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c8:	0800d5e1 	.word	0x0800d5e1
 800d5cc:	0800d5e9 	.word	0x0800d5e9
 800d5d0:	0800d5f1 	.word	0x0800d5f1
 800d5d4:	0800d5f9 	.word	0x0800d5f9
 800d5d8:	0800d625 	.word	0x0800d625
 800d5dc:	0800d62d 	.word	0x0800d62d
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5e6:	e24e      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d5e8:	2304      	movs	r3, #4
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ee:	e24a      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d5f0:	2308      	movs	r3, #8
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f6:	e246      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d5f8:	2310      	movs	r3, #16
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fe:	e242      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d600:	cfff69f3 	.word	0xcfff69f3
 800d604:	58000c00 	.word	0x58000c00
 800d608:	11fff4ff 	.word	0x11fff4ff
 800d60c:	40011000 	.word	0x40011000
 800d610:	58024400 	.word	0x58024400
 800d614:	40004400 	.word	0x40004400
 800d618:	40004800 	.word	0x40004800
 800d61c:	40004c00 	.word	0x40004c00
 800d620:	40005000 	.word	0x40005000
 800d624:	2320      	movs	r3, #32
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62a:	e22c      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d62c:	2340      	movs	r3, #64	; 0x40
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d632:	e228      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d634:	2380      	movs	r3, #128	; 0x80
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63a:	e224      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4ab1      	ldr	r2, [pc, #708]	; (800d908 <UART_SetConfig+0x630>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d176      	bne.n	800d734 <UART_SetConfig+0x45c>
 800d646:	4bb1      	ldr	r3, [pc, #708]	; (800d90c <UART_SetConfig+0x634>)
 800d648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d64a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d64e:	2b28      	cmp	r3, #40	; 0x28
 800d650:	d86c      	bhi.n	800d72c <UART_SetConfig+0x454>
 800d652:	a201      	add	r2, pc, #4	; (adr r2, 800d658 <UART_SetConfig+0x380>)
 800d654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d658:	0800d6fd 	.word	0x0800d6fd
 800d65c:	0800d72d 	.word	0x0800d72d
 800d660:	0800d72d 	.word	0x0800d72d
 800d664:	0800d72d 	.word	0x0800d72d
 800d668:	0800d72d 	.word	0x0800d72d
 800d66c:	0800d72d 	.word	0x0800d72d
 800d670:	0800d72d 	.word	0x0800d72d
 800d674:	0800d72d 	.word	0x0800d72d
 800d678:	0800d705 	.word	0x0800d705
 800d67c:	0800d72d 	.word	0x0800d72d
 800d680:	0800d72d 	.word	0x0800d72d
 800d684:	0800d72d 	.word	0x0800d72d
 800d688:	0800d72d 	.word	0x0800d72d
 800d68c:	0800d72d 	.word	0x0800d72d
 800d690:	0800d72d 	.word	0x0800d72d
 800d694:	0800d72d 	.word	0x0800d72d
 800d698:	0800d70d 	.word	0x0800d70d
 800d69c:	0800d72d 	.word	0x0800d72d
 800d6a0:	0800d72d 	.word	0x0800d72d
 800d6a4:	0800d72d 	.word	0x0800d72d
 800d6a8:	0800d72d 	.word	0x0800d72d
 800d6ac:	0800d72d 	.word	0x0800d72d
 800d6b0:	0800d72d 	.word	0x0800d72d
 800d6b4:	0800d72d 	.word	0x0800d72d
 800d6b8:	0800d715 	.word	0x0800d715
 800d6bc:	0800d72d 	.word	0x0800d72d
 800d6c0:	0800d72d 	.word	0x0800d72d
 800d6c4:	0800d72d 	.word	0x0800d72d
 800d6c8:	0800d72d 	.word	0x0800d72d
 800d6cc:	0800d72d 	.word	0x0800d72d
 800d6d0:	0800d72d 	.word	0x0800d72d
 800d6d4:	0800d72d 	.word	0x0800d72d
 800d6d8:	0800d71d 	.word	0x0800d71d
 800d6dc:	0800d72d 	.word	0x0800d72d
 800d6e0:	0800d72d 	.word	0x0800d72d
 800d6e4:	0800d72d 	.word	0x0800d72d
 800d6e8:	0800d72d 	.word	0x0800d72d
 800d6ec:	0800d72d 	.word	0x0800d72d
 800d6f0:	0800d72d 	.word	0x0800d72d
 800d6f4:	0800d72d 	.word	0x0800d72d
 800d6f8:	0800d725 	.word	0x0800d725
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d702:	e1c0      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d704:	2304      	movs	r3, #4
 800d706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d70a:	e1bc      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d70c:	2308      	movs	r3, #8
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d712:	e1b8      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d714:	2310      	movs	r3, #16
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71a:	e1b4      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d71c:	2320      	movs	r3, #32
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d722:	e1b0      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d724:	2340      	movs	r3, #64	; 0x40
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72a:	e1ac      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d72c:	2380      	movs	r3, #128	; 0x80
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e1a8      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a75      	ldr	r2, [pc, #468]	; (800d910 <UART_SetConfig+0x638>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d130      	bne.n	800d7a0 <UART_SetConfig+0x4c8>
 800d73e:	4b73      	ldr	r3, [pc, #460]	; (800d90c <UART_SetConfig+0x634>)
 800d740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d742:	f003 0307 	and.w	r3, r3, #7
 800d746:	2b05      	cmp	r3, #5
 800d748:	d826      	bhi.n	800d798 <UART_SetConfig+0x4c0>
 800d74a:	a201      	add	r2, pc, #4	; (adr r2, 800d750 <UART_SetConfig+0x478>)
 800d74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d750:	0800d769 	.word	0x0800d769
 800d754:	0800d771 	.word	0x0800d771
 800d758:	0800d779 	.word	0x0800d779
 800d75c:	0800d781 	.word	0x0800d781
 800d760:	0800d789 	.word	0x0800d789
 800d764:	0800d791 	.word	0x0800d791
 800d768:	2300      	movs	r3, #0
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d76e:	e18a      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d770:	2304      	movs	r3, #4
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d776:	e186      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d778:	2308      	movs	r3, #8
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77e:	e182      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d780:	2310      	movs	r3, #16
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d786:	e17e      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d788:	2320      	movs	r3, #32
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e17a      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d790:	2340      	movs	r3, #64	; 0x40
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e176      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d798:	2380      	movs	r3, #128	; 0x80
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e172      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a5b      	ldr	r2, [pc, #364]	; (800d914 <UART_SetConfig+0x63c>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d130      	bne.n	800d80c <UART_SetConfig+0x534>
 800d7aa:	4b58      	ldr	r3, [pc, #352]	; (800d90c <UART_SetConfig+0x634>)
 800d7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ae:	f003 0307 	and.w	r3, r3, #7
 800d7b2:	2b05      	cmp	r3, #5
 800d7b4:	d826      	bhi.n	800d804 <UART_SetConfig+0x52c>
 800d7b6:	a201      	add	r2, pc, #4	; (adr r2, 800d7bc <UART_SetConfig+0x4e4>)
 800d7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7bc:	0800d7d5 	.word	0x0800d7d5
 800d7c0:	0800d7dd 	.word	0x0800d7dd
 800d7c4:	0800d7e5 	.word	0x0800d7e5
 800d7c8:	0800d7ed 	.word	0x0800d7ed
 800d7cc:	0800d7f5 	.word	0x0800d7f5
 800d7d0:	0800d7fd 	.word	0x0800d7fd
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7da:	e154      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d7dc:	2304      	movs	r3, #4
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e2:	e150      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d7e4:	2308      	movs	r3, #8
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ea:	e14c      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d7ec:	2310      	movs	r3, #16
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f2:	e148      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d7f4:	2320      	movs	r3, #32
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fa:	e144      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d7fc:	2340      	movs	r3, #64	; 0x40
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d802:	e140      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d804:	2380      	movs	r3, #128	; 0x80
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e13c      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a41      	ldr	r2, [pc, #260]	; (800d918 <UART_SetConfig+0x640>)
 800d812:	4293      	cmp	r3, r2
 800d814:	f040 8082 	bne.w	800d91c <UART_SetConfig+0x644>
 800d818:	4b3c      	ldr	r3, [pc, #240]	; (800d90c <UART_SetConfig+0x634>)
 800d81a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d81c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d820:	2b28      	cmp	r3, #40	; 0x28
 800d822:	d86d      	bhi.n	800d900 <UART_SetConfig+0x628>
 800d824:	a201      	add	r2, pc, #4	; (adr r2, 800d82c <UART_SetConfig+0x554>)
 800d826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82a:	bf00      	nop
 800d82c:	0800d8d1 	.word	0x0800d8d1
 800d830:	0800d901 	.word	0x0800d901
 800d834:	0800d901 	.word	0x0800d901
 800d838:	0800d901 	.word	0x0800d901
 800d83c:	0800d901 	.word	0x0800d901
 800d840:	0800d901 	.word	0x0800d901
 800d844:	0800d901 	.word	0x0800d901
 800d848:	0800d901 	.word	0x0800d901
 800d84c:	0800d8d9 	.word	0x0800d8d9
 800d850:	0800d901 	.word	0x0800d901
 800d854:	0800d901 	.word	0x0800d901
 800d858:	0800d901 	.word	0x0800d901
 800d85c:	0800d901 	.word	0x0800d901
 800d860:	0800d901 	.word	0x0800d901
 800d864:	0800d901 	.word	0x0800d901
 800d868:	0800d901 	.word	0x0800d901
 800d86c:	0800d8e1 	.word	0x0800d8e1
 800d870:	0800d901 	.word	0x0800d901
 800d874:	0800d901 	.word	0x0800d901
 800d878:	0800d901 	.word	0x0800d901
 800d87c:	0800d901 	.word	0x0800d901
 800d880:	0800d901 	.word	0x0800d901
 800d884:	0800d901 	.word	0x0800d901
 800d888:	0800d901 	.word	0x0800d901
 800d88c:	0800d8e9 	.word	0x0800d8e9
 800d890:	0800d901 	.word	0x0800d901
 800d894:	0800d901 	.word	0x0800d901
 800d898:	0800d901 	.word	0x0800d901
 800d89c:	0800d901 	.word	0x0800d901
 800d8a0:	0800d901 	.word	0x0800d901
 800d8a4:	0800d901 	.word	0x0800d901
 800d8a8:	0800d901 	.word	0x0800d901
 800d8ac:	0800d8f1 	.word	0x0800d8f1
 800d8b0:	0800d901 	.word	0x0800d901
 800d8b4:	0800d901 	.word	0x0800d901
 800d8b8:	0800d901 	.word	0x0800d901
 800d8bc:	0800d901 	.word	0x0800d901
 800d8c0:	0800d901 	.word	0x0800d901
 800d8c4:	0800d901 	.word	0x0800d901
 800d8c8:	0800d901 	.word	0x0800d901
 800d8cc:	0800d8f9 	.word	0x0800d8f9
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8d6:	e0d6      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d8d8:	2304      	movs	r3, #4
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8de:	e0d2      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d8e0:	2308      	movs	r3, #8
 800d8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e6:	e0ce      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d8e8:	2310      	movs	r3, #16
 800d8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ee:	e0ca      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d8f0:	2320      	movs	r3, #32
 800d8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8f6:	e0c6      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d8f8:	2340      	movs	r3, #64	; 0x40
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fe:	e0c2      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d900:	2380      	movs	r3, #128	; 0x80
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d906:	e0be      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d908:	40011400 	.word	0x40011400
 800d90c:	58024400 	.word	0x58024400
 800d910:	40007800 	.word	0x40007800
 800d914:	40007c00 	.word	0x40007c00
 800d918:	40011800 	.word	0x40011800
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4aad      	ldr	r2, [pc, #692]	; (800dbd8 <UART_SetConfig+0x900>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d176      	bne.n	800da14 <UART_SetConfig+0x73c>
 800d926:	4bad      	ldr	r3, [pc, #692]	; (800dbdc <UART_SetConfig+0x904>)
 800d928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d92a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d92e:	2b28      	cmp	r3, #40	; 0x28
 800d930:	d86c      	bhi.n	800da0c <UART_SetConfig+0x734>
 800d932:	a201      	add	r2, pc, #4	; (adr r2, 800d938 <UART_SetConfig+0x660>)
 800d934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d938:	0800d9dd 	.word	0x0800d9dd
 800d93c:	0800da0d 	.word	0x0800da0d
 800d940:	0800da0d 	.word	0x0800da0d
 800d944:	0800da0d 	.word	0x0800da0d
 800d948:	0800da0d 	.word	0x0800da0d
 800d94c:	0800da0d 	.word	0x0800da0d
 800d950:	0800da0d 	.word	0x0800da0d
 800d954:	0800da0d 	.word	0x0800da0d
 800d958:	0800d9e5 	.word	0x0800d9e5
 800d95c:	0800da0d 	.word	0x0800da0d
 800d960:	0800da0d 	.word	0x0800da0d
 800d964:	0800da0d 	.word	0x0800da0d
 800d968:	0800da0d 	.word	0x0800da0d
 800d96c:	0800da0d 	.word	0x0800da0d
 800d970:	0800da0d 	.word	0x0800da0d
 800d974:	0800da0d 	.word	0x0800da0d
 800d978:	0800d9ed 	.word	0x0800d9ed
 800d97c:	0800da0d 	.word	0x0800da0d
 800d980:	0800da0d 	.word	0x0800da0d
 800d984:	0800da0d 	.word	0x0800da0d
 800d988:	0800da0d 	.word	0x0800da0d
 800d98c:	0800da0d 	.word	0x0800da0d
 800d990:	0800da0d 	.word	0x0800da0d
 800d994:	0800da0d 	.word	0x0800da0d
 800d998:	0800d9f5 	.word	0x0800d9f5
 800d99c:	0800da0d 	.word	0x0800da0d
 800d9a0:	0800da0d 	.word	0x0800da0d
 800d9a4:	0800da0d 	.word	0x0800da0d
 800d9a8:	0800da0d 	.word	0x0800da0d
 800d9ac:	0800da0d 	.word	0x0800da0d
 800d9b0:	0800da0d 	.word	0x0800da0d
 800d9b4:	0800da0d 	.word	0x0800da0d
 800d9b8:	0800d9fd 	.word	0x0800d9fd
 800d9bc:	0800da0d 	.word	0x0800da0d
 800d9c0:	0800da0d 	.word	0x0800da0d
 800d9c4:	0800da0d 	.word	0x0800da0d
 800d9c8:	0800da0d 	.word	0x0800da0d
 800d9cc:	0800da0d 	.word	0x0800da0d
 800d9d0:	0800da0d 	.word	0x0800da0d
 800d9d4:	0800da0d 	.word	0x0800da0d
 800d9d8:	0800da05 	.word	0x0800da05
 800d9dc:	2301      	movs	r3, #1
 800d9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9e2:	e050      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d9e4:	2304      	movs	r3, #4
 800d9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ea:	e04c      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d9ec:	2308      	movs	r3, #8
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f2:	e048      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d9f4:	2310      	movs	r3, #16
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fa:	e044      	b.n	800da86 <UART_SetConfig+0x7ae>
 800d9fc:	2320      	movs	r3, #32
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da02:	e040      	b.n	800da86 <UART_SetConfig+0x7ae>
 800da04:	2340      	movs	r3, #64	; 0x40
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0a:	e03c      	b.n	800da86 <UART_SetConfig+0x7ae>
 800da0c:	2380      	movs	r3, #128	; 0x80
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da12:	e038      	b.n	800da86 <UART_SetConfig+0x7ae>
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a71      	ldr	r2, [pc, #452]	; (800dbe0 <UART_SetConfig+0x908>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d130      	bne.n	800da80 <UART_SetConfig+0x7a8>
 800da1e:	4b6f      	ldr	r3, [pc, #444]	; (800dbdc <UART_SetConfig+0x904>)
 800da20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da22:	f003 0307 	and.w	r3, r3, #7
 800da26:	2b05      	cmp	r3, #5
 800da28:	d826      	bhi.n	800da78 <UART_SetConfig+0x7a0>
 800da2a:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <UART_SetConfig+0x758>)
 800da2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da30:	0800da49 	.word	0x0800da49
 800da34:	0800da51 	.word	0x0800da51
 800da38:	0800da59 	.word	0x0800da59
 800da3c:	0800da61 	.word	0x0800da61
 800da40:	0800da69 	.word	0x0800da69
 800da44:	0800da71 	.word	0x0800da71
 800da48:	2302      	movs	r3, #2
 800da4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4e:	e01a      	b.n	800da86 <UART_SetConfig+0x7ae>
 800da50:	2304      	movs	r3, #4
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da56:	e016      	b.n	800da86 <UART_SetConfig+0x7ae>
 800da58:	2308      	movs	r3, #8
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5e:	e012      	b.n	800da86 <UART_SetConfig+0x7ae>
 800da60:	2310      	movs	r3, #16
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da66:	e00e      	b.n	800da86 <UART_SetConfig+0x7ae>
 800da68:	2320      	movs	r3, #32
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6e:	e00a      	b.n	800da86 <UART_SetConfig+0x7ae>
 800da70:	2340      	movs	r3, #64	; 0x40
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da76:	e006      	b.n	800da86 <UART_SetConfig+0x7ae>
 800da78:	2380      	movs	r3, #128	; 0x80
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7e:	e002      	b.n	800da86 <UART_SetConfig+0x7ae>
 800da80:	2380      	movs	r3, #128	; 0x80
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a55      	ldr	r2, [pc, #340]	; (800dbe0 <UART_SetConfig+0x908>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	f040 80f8 	bne.w	800dc82 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da96:	2b20      	cmp	r3, #32
 800da98:	dc46      	bgt.n	800db28 <UART_SetConfig+0x850>
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	db75      	blt.n	800db8a <UART_SetConfig+0x8b2>
 800da9e:	3b02      	subs	r3, #2
 800daa0:	2b1e      	cmp	r3, #30
 800daa2:	d872      	bhi.n	800db8a <UART_SetConfig+0x8b2>
 800daa4:	a201      	add	r2, pc, #4	; (adr r2, 800daac <UART_SetConfig+0x7d4>)
 800daa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daaa:	bf00      	nop
 800daac:	0800db2f 	.word	0x0800db2f
 800dab0:	0800db8b 	.word	0x0800db8b
 800dab4:	0800db37 	.word	0x0800db37
 800dab8:	0800db8b 	.word	0x0800db8b
 800dabc:	0800db8b 	.word	0x0800db8b
 800dac0:	0800db8b 	.word	0x0800db8b
 800dac4:	0800db47 	.word	0x0800db47
 800dac8:	0800db8b 	.word	0x0800db8b
 800dacc:	0800db8b 	.word	0x0800db8b
 800dad0:	0800db8b 	.word	0x0800db8b
 800dad4:	0800db8b 	.word	0x0800db8b
 800dad8:	0800db8b 	.word	0x0800db8b
 800dadc:	0800db8b 	.word	0x0800db8b
 800dae0:	0800db8b 	.word	0x0800db8b
 800dae4:	0800db57 	.word	0x0800db57
 800dae8:	0800db8b 	.word	0x0800db8b
 800daec:	0800db8b 	.word	0x0800db8b
 800daf0:	0800db8b 	.word	0x0800db8b
 800daf4:	0800db8b 	.word	0x0800db8b
 800daf8:	0800db8b 	.word	0x0800db8b
 800dafc:	0800db8b 	.word	0x0800db8b
 800db00:	0800db8b 	.word	0x0800db8b
 800db04:	0800db8b 	.word	0x0800db8b
 800db08:	0800db8b 	.word	0x0800db8b
 800db0c:	0800db8b 	.word	0x0800db8b
 800db10:	0800db8b 	.word	0x0800db8b
 800db14:	0800db8b 	.word	0x0800db8b
 800db18:	0800db8b 	.word	0x0800db8b
 800db1c:	0800db8b 	.word	0x0800db8b
 800db20:	0800db8b 	.word	0x0800db8b
 800db24:	0800db7d 	.word	0x0800db7d
 800db28:	2b40      	cmp	r3, #64	; 0x40
 800db2a:	d02a      	beq.n	800db82 <UART_SetConfig+0x8aa>
 800db2c:	e02d      	b.n	800db8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800db2e:	f7fc fe0b 	bl	800a748 <HAL_RCCEx_GetD3PCLK1Freq>
 800db32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db34:	e02f      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7fc fe1a 	bl	800a774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db44:	e027      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db46:	f107 0318 	add.w	r3, r7, #24
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fc ff66 	bl	800aa1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db54:	e01f      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db56:	4b21      	ldr	r3, [pc, #132]	; (800dbdc <UART_SetConfig+0x904>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f003 0320 	and.w	r3, r3, #32
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d009      	beq.n	800db76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db62:	4b1e      	ldr	r3, [pc, #120]	; (800dbdc <UART_SetConfig+0x904>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	08db      	lsrs	r3, r3, #3
 800db68:	f003 0303 	and.w	r3, r3, #3
 800db6c:	4a1d      	ldr	r2, [pc, #116]	; (800dbe4 <UART_SetConfig+0x90c>)
 800db6e:	fa22 f303 	lsr.w	r3, r2, r3
 800db72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db74:	e00f      	b.n	800db96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800db76:	4b1b      	ldr	r3, [pc, #108]	; (800dbe4 <UART_SetConfig+0x90c>)
 800db78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db7a:	e00c      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db7c:	4b1a      	ldr	r3, [pc, #104]	; (800dbe8 <UART_SetConfig+0x910>)
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db80:	e009      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db88:	e005      	b.n	800db96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800db8a:	2300      	movs	r3, #0
 800db8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db8e:	2301      	movs	r3, #1
 800db90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800db94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800db96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f000 81ee 	beq.w	800df7a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba2:	4a12      	ldr	r2, [pc, #72]	; (800dbec <UART_SetConfig+0x914>)
 800dba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dba8:	461a      	mov	r2, r3
 800dbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbac:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbb0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	685a      	ldr	r2, [r3, #4]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	005b      	lsls	r3, r3, #1
 800dbba:	4413      	add	r3, r2
 800dbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d305      	bcc.n	800dbce <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d910      	bls.n	800dbf0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dbd4:	e1d1      	b.n	800df7a <UART_SetConfig+0xca2>
 800dbd6:	bf00      	nop
 800dbd8:	40011c00 	.word	0x40011c00
 800dbdc:	58024400 	.word	0x58024400
 800dbe0:	58000c00 	.word	0x58000c00
 800dbe4:	03d09000 	.word	0x03d09000
 800dbe8:	003d0900 	.word	0x003d0900
 800dbec:	0800fe38 	.word	0x0800fe38
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	60bb      	str	r3, [r7, #8]
 800dbf6:	60fa      	str	r2, [r7, #12]
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfc:	4ac0      	ldr	r2, [pc, #768]	; (800df00 <UART_SetConfig+0xc28>)
 800dbfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	2200      	movs	r2, #0
 800dc06:	603b      	str	r3, [r7, #0]
 800dc08:	607a      	str	r2, [r7, #4]
 800dc0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc12:	f7f2 fb85 	bl	8000320 <__aeabi_uldivmod>
 800dc16:	4602      	mov	r2, r0
 800dc18:	460b      	mov	r3, r1
 800dc1a:	4610      	mov	r0, r2
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	f04f 0200 	mov.w	r2, #0
 800dc22:	f04f 0300 	mov.w	r3, #0
 800dc26:	020b      	lsls	r3, r1, #8
 800dc28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc2c:	0202      	lsls	r2, r0, #8
 800dc2e:	6979      	ldr	r1, [r7, #20]
 800dc30:	6849      	ldr	r1, [r1, #4]
 800dc32:	0849      	lsrs	r1, r1, #1
 800dc34:	2000      	movs	r0, #0
 800dc36:	460c      	mov	r4, r1
 800dc38:	4605      	mov	r5, r0
 800dc3a:	eb12 0804 	adds.w	r8, r2, r4
 800dc3e:	eb43 0905 	adc.w	r9, r3, r5
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	469a      	mov	sl, r3
 800dc4a:	4693      	mov	fp, r2
 800dc4c:	4652      	mov	r2, sl
 800dc4e:	465b      	mov	r3, fp
 800dc50:	4640      	mov	r0, r8
 800dc52:	4649      	mov	r1, r9
 800dc54:	f7f2 fb64 	bl	8000320 <__aeabi_uldivmod>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc66:	d308      	bcc.n	800dc7a <UART_SetConfig+0x9a2>
 800dc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc6e:	d204      	bcs.n	800dc7a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc76:	60da      	str	r2, [r3, #12]
 800dc78:	e17f      	b.n	800df7a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dc80:	e17b      	b.n	800df7a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	69db      	ldr	r3, [r3, #28]
 800dc86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc8a:	f040 80bd 	bne.w	800de08 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dc8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc92:	2b20      	cmp	r3, #32
 800dc94:	dc48      	bgt.n	800dd28 <UART_SetConfig+0xa50>
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	db7b      	blt.n	800dd92 <UART_SetConfig+0xaba>
 800dc9a:	2b20      	cmp	r3, #32
 800dc9c:	d879      	bhi.n	800dd92 <UART_SetConfig+0xaba>
 800dc9e:	a201      	add	r2, pc, #4	; (adr r2, 800dca4 <UART_SetConfig+0x9cc>)
 800dca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca4:	0800dd2f 	.word	0x0800dd2f
 800dca8:	0800dd37 	.word	0x0800dd37
 800dcac:	0800dd93 	.word	0x0800dd93
 800dcb0:	0800dd93 	.word	0x0800dd93
 800dcb4:	0800dd3f 	.word	0x0800dd3f
 800dcb8:	0800dd93 	.word	0x0800dd93
 800dcbc:	0800dd93 	.word	0x0800dd93
 800dcc0:	0800dd93 	.word	0x0800dd93
 800dcc4:	0800dd4f 	.word	0x0800dd4f
 800dcc8:	0800dd93 	.word	0x0800dd93
 800dccc:	0800dd93 	.word	0x0800dd93
 800dcd0:	0800dd93 	.word	0x0800dd93
 800dcd4:	0800dd93 	.word	0x0800dd93
 800dcd8:	0800dd93 	.word	0x0800dd93
 800dcdc:	0800dd93 	.word	0x0800dd93
 800dce0:	0800dd93 	.word	0x0800dd93
 800dce4:	0800dd5f 	.word	0x0800dd5f
 800dce8:	0800dd93 	.word	0x0800dd93
 800dcec:	0800dd93 	.word	0x0800dd93
 800dcf0:	0800dd93 	.word	0x0800dd93
 800dcf4:	0800dd93 	.word	0x0800dd93
 800dcf8:	0800dd93 	.word	0x0800dd93
 800dcfc:	0800dd93 	.word	0x0800dd93
 800dd00:	0800dd93 	.word	0x0800dd93
 800dd04:	0800dd93 	.word	0x0800dd93
 800dd08:	0800dd93 	.word	0x0800dd93
 800dd0c:	0800dd93 	.word	0x0800dd93
 800dd10:	0800dd93 	.word	0x0800dd93
 800dd14:	0800dd93 	.word	0x0800dd93
 800dd18:	0800dd93 	.word	0x0800dd93
 800dd1c:	0800dd93 	.word	0x0800dd93
 800dd20:	0800dd93 	.word	0x0800dd93
 800dd24:	0800dd85 	.word	0x0800dd85
 800dd28:	2b40      	cmp	r3, #64	; 0x40
 800dd2a:	d02e      	beq.n	800dd8a <UART_SetConfig+0xab2>
 800dd2c:	e031      	b.n	800dd92 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd2e:	f7fb fde5 	bl	80098fc <HAL_RCC_GetPCLK1Freq>
 800dd32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd34:	e033      	b.n	800dd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd36:	f7fb fdf7 	bl	8009928 <HAL_RCC_GetPCLK2Freq>
 800dd3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd3c:	e02f      	b.n	800dd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fc fd16 	bl	800a774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd4c:	e027      	b.n	800dd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd4e:	f107 0318 	add.w	r3, r7, #24
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fc fe62 	bl	800aa1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd5c:	e01f      	b.n	800dd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd5e:	4b69      	ldr	r3, [pc, #420]	; (800df04 <UART_SetConfig+0xc2c>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f003 0320 	and.w	r3, r3, #32
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d009      	beq.n	800dd7e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd6a:	4b66      	ldr	r3, [pc, #408]	; (800df04 <UART_SetConfig+0xc2c>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	08db      	lsrs	r3, r3, #3
 800dd70:	f003 0303 	and.w	r3, r3, #3
 800dd74:	4a64      	ldr	r2, [pc, #400]	; (800df08 <UART_SetConfig+0xc30>)
 800dd76:	fa22 f303 	lsr.w	r3, r2, r3
 800dd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd7c:	e00f      	b.n	800dd9e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800dd7e:	4b62      	ldr	r3, [pc, #392]	; (800df08 <UART_SetConfig+0xc30>)
 800dd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd82:	e00c      	b.n	800dd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd84:	4b61      	ldr	r3, [pc, #388]	; (800df0c <UART_SetConfig+0xc34>)
 800dd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd88:	e009      	b.n	800dd9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd90:	e005      	b.n	800dd9e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dd92:	2300      	movs	r3, #0
 800dd94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dd9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f000 80ea 	beq.w	800df7a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddaa:	4a55      	ldr	r2, [pc, #340]	; (800df00 <UART_SetConfig+0xc28>)
 800ddac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddb8:	005a      	lsls	r2, r3, #1
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	085b      	lsrs	r3, r3, #1
 800ddc0:	441a      	add	r2, r3
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddce:	2b0f      	cmp	r3, #15
 800ddd0:	d916      	bls.n	800de00 <UART_SetConfig+0xb28>
 800ddd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddd8:	d212      	bcs.n	800de00 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ddda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	f023 030f 	bic.w	r3, r3, #15
 800dde2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde6:	085b      	lsrs	r3, r3, #1
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	f003 0307 	and.w	r3, r3, #7
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ddfc:	60da      	str	r2, [r3, #12]
 800ddfe:	e0bc      	b.n	800df7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800de00:	2301      	movs	r3, #1
 800de02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de06:	e0b8      	b.n	800df7a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800de08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de0c:	2b20      	cmp	r3, #32
 800de0e:	dc4b      	bgt.n	800dea8 <UART_SetConfig+0xbd0>
 800de10:	2b00      	cmp	r3, #0
 800de12:	f2c0 8087 	blt.w	800df24 <UART_SetConfig+0xc4c>
 800de16:	2b20      	cmp	r3, #32
 800de18:	f200 8084 	bhi.w	800df24 <UART_SetConfig+0xc4c>
 800de1c:	a201      	add	r2, pc, #4	; (adr r2, 800de24 <UART_SetConfig+0xb4c>)
 800de1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de22:	bf00      	nop
 800de24:	0800deaf 	.word	0x0800deaf
 800de28:	0800deb7 	.word	0x0800deb7
 800de2c:	0800df25 	.word	0x0800df25
 800de30:	0800df25 	.word	0x0800df25
 800de34:	0800debf 	.word	0x0800debf
 800de38:	0800df25 	.word	0x0800df25
 800de3c:	0800df25 	.word	0x0800df25
 800de40:	0800df25 	.word	0x0800df25
 800de44:	0800decf 	.word	0x0800decf
 800de48:	0800df25 	.word	0x0800df25
 800de4c:	0800df25 	.word	0x0800df25
 800de50:	0800df25 	.word	0x0800df25
 800de54:	0800df25 	.word	0x0800df25
 800de58:	0800df25 	.word	0x0800df25
 800de5c:	0800df25 	.word	0x0800df25
 800de60:	0800df25 	.word	0x0800df25
 800de64:	0800dedf 	.word	0x0800dedf
 800de68:	0800df25 	.word	0x0800df25
 800de6c:	0800df25 	.word	0x0800df25
 800de70:	0800df25 	.word	0x0800df25
 800de74:	0800df25 	.word	0x0800df25
 800de78:	0800df25 	.word	0x0800df25
 800de7c:	0800df25 	.word	0x0800df25
 800de80:	0800df25 	.word	0x0800df25
 800de84:	0800df25 	.word	0x0800df25
 800de88:	0800df25 	.word	0x0800df25
 800de8c:	0800df25 	.word	0x0800df25
 800de90:	0800df25 	.word	0x0800df25
 800de94:	0800df25 	.word	0x0800df25
 800de98:	0800df25 	.word	0x0800df25
 800de9c:	0800df25 	.word	0x0800df25
 800dea0:	0800df25 	.word	0x0800df25
 800dea4:	0800df17 	.word	0x0800df17
 800dea8:	2b40      	cmp	r3, #64	; 0x40
 800deaa:	d037      	beq.n	800df1c <UART_SetConfig+0xc44>
 800deac:	e03a      	b.n	800df24 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800deae:	f7fb fd25 	bl	80098fc <HAL_RCC_GetPCLK1Freq>
 800deb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800deb4:	e03c      	b.n	800df30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800deb6:	f7fb fd37 	bl	8009928 <HAL_RCC_GetPCLK2Freq>
 800deba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800debc:	e038      	b.n	800df30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800debe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fc fc56 	bl	800a774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800decc:	e030      	b.n	800df30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dece:	f107 0318 	add.w	r3, r7, #24
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fc fda2 	bl	800aa1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dedc:	e028      	b.n	800df30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dede:	4b09      	ldr	r3, [pc, #36]	; (800df04 <UART_SetConfig+0xc2c>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f003 0320 	and.w	r3, r3, #32
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d012      	beq.n	800df10 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800deea:	4b06      	ldr	r3, [pc, #24]	; (800df04 <UART_SetConfig+0xc2c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	08db      	lsrs	r3, r3, #3
 800def0:	f003 0303 	and.w	r3, r3, #3
 800def4:	4a04      	ldr	r2, [pc, #16]	; (800df08 <UART_SetConfig+0xc30>)
 800def6:	fa22 f303 	lsr.w	r3, r2, r3
 800defa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800defc:	e018      	b.n	800df30 <UART_SetConfig+0xc58>
 800defe:	bf00      	nop
 800df00:	0800fe38 	.word	0x0800fe38
 800df04:	58024400 	.word	0x58024400
 800df08:	03d09000 	.word	0x03d09000
 800df0c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800df10:	4b24      	ldr	r3, [pc, #144]	; (800dfa4 <UART_SetConfig+0xccc>)
 800df12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df14:	e00c      	b.n	800df30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df16:	4b24      	ldr	r3, [pc, #144]	; (800dfa8 <UART_SetConfig+0xcd0>)
 800df18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df1a:	e009      	b.n	800df30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df22:	e005      	b.n	800df30 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800df24:	2300      	movs	r3, #0
 800df26:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df28:	2301      	movs	r3, #1
 800df2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df2e:	bf00      	nop
    }

    if (pclk != 0U)
 800df30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df32:	2b00      	cmp	r3, #0
 800df34:	d021      	beq.n	800df7a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3a:	4a1c      	ldr	r2, [pc, #112]	; (800dfac <UART_SetConfig+0xcd4>)
 800df3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df40:	461a      	mov	r2, r3
 800df42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df44:	fbb3 f2f2 	udiv	r2, r3, r2
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	085b      	lsrs	r3, r3, #1
 800df4e:	441a      	add	r2, r3
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	fbb2 f3f3 	udiv	r3, r2, r3
 800df58:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5c:	2b0f      	cmp	r3, #15
 800df5e:	d909      	bls.n	800df74 <UART_SetConfig+0xc9c>
 800df60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df66:	d205      	bcs.n	800df74 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	60da      	str	r2, [r3, #12]
 800df72:	e002      	b.n	800df7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800df74:	2301      	movs	r3, #1
 800df76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	2201      	movs	r2, #1
 800df7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	2201      	movs	r2, #1
 800df86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2200      	movs	r2, #0
 800df8e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	2200      	movs	r2, #0
 800df94:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800df96:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3748      	adds	r7, #72	; 0x48
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfa4:	03d09000 	.word	0x03d09000
 800dfa8:	003d0900 	.word	0x003d0900
 800dfac:	0800fe38 	.word	0x0800fe38

0800dfb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b083      	sub	sp, #12
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfbc:	f003 0301 	and.w	r3, r3, #1
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d00a      	beq.n	800dfda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	430a      	orrs	r2, r1
 800dfd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfde:	f003 0302 	and.w	r3, r3, #2
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00a      	beq.n	800dffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	430a      	orrs	r2, r1
 800dffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e000:	f003 0304 	and.w	r3, r3, #4
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00a      	beq.n	800e01e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	430a      	orrs	r2, r1
 800e01c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e022:	f003 0308 	and.w	r3, r3, #8
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00a      	beq.n	800e040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	430a      	orrs	r2, r1
 800e03e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e044:	f003 0310 	and.w	r3, r3, #16
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00a      	beq.n	800e062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	430a      	orrs	r2, r1
 800e060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e066:	f003 0320 	and.w	r3, r3, #32
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00a      	beq.n	800e084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	430a      	orrs	r2, r1
 800e082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d01a      	beq.n	800e0c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	430a      	orrs	r2, r1
 800e0a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0ae:	d10a      	bne.n	800e0c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	430a      	orrs	r2, r1
 800e0c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00a      	beq.n	800e0e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	430a      	orrs	r2, r1
 800e0e6:	605a      	str	r2, [r3, #4]
  }
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af02      	add	r7, sp, #8
 800e0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e104:	f7f7 f88c 	bl	8005220 <HAL_GetTick>
 800e108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f003 0308 	and.w	r3, r3, #8
 800e114:	2b08      	cmp	r3, #8
 800e116:	d10e      	bne.n	800e136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e11c:	9300      	str	r3, [sp, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2200      	movs	r2, #0
 800e122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f82f 	bl	800e18a <UART_WaitOnFlagUntilTimeout>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e132:	2303      	movs	r3, #3
 800e134:	e025      	b.n	800e182 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f003 0304 	and.w	r3, r3, #4
 800e140:	2b04      	cmp	r3, #4
 800e142:	d10e      	bne.n	800e162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 f819 	bl	800e18a <UART_WaitOnFlagUntilTimeout>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e15e:	2303      	movs	r3, #3
 800e160:	e00f      	b.n	800e182 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2220      	movs	r2, #32
 800e166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2220      	movs	r2, #32
 800e16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e180:	2300      	movs	r3, #0
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b09c      	sub	sp, #112	; 0x70
 800e18e:	af00      	add	r7, sp, #0
 800e190:	60f8      	str	r0, [r7, #12]
 800e192:	60b9      	str	r1, [r7, #8]
 800e194:	603b      	str	r3, [r7, #0]
 800e196:	4613      	mov	r3, r2
 800e198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e19a:	e0a9      	b.n	800e2f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e19c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a2:	f000 80a5 	beq.w	800e2f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1a6:	f7f7 f83b 	bl	8005220 <HAL_GetTick>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d302      	bcc.n	800e1bc <UART_WaitOnFlagUntilTimeout+0x32>
 800e1b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d140      	bne.n	800e23e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1c4:	e853 3f00 	ldrex	r3, [r3]
 800e1c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1d0:	667b      	str	r3, [r7, #100]	; 0x64
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1e2:	e841 2300 	strex	r3, r2, [r1]
 800e1e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e1e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1e6      	bne.n	800e1bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1f8:	e853 3f00 	ldrex	r3, [r3]
 800e1fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e200:	f023 0301 	bic.w	r3, r3, #1
 800e204:	663b      	str	r3, [r7, #96]	; 0x60
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3308      	adds	r3, #8
 800e20c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e20e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e216:	e841 2300 	strex	r3, r2, [r1]
 800e21a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e21c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1e5      	bne.n	800e1ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2220      	movs	r2, #32
 800e226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2220      	movs	r2, #32
 800e22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2200      	movs	r2, #0
 800e236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e23a:	2303      	movs	r3, #3
 800e23c:	e069      	b.n	800e312 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f003 0304 	and.w	r3, r3, #4
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d051      	beq.n	800e2f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	69db      	ldr	r3, [r3, #28]
 800e252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e25a:	d149      	bne.n	800e2f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e264:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	e853 3f00 	ldrex	r3, [r3]
 800e272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e276:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e27a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	461a      	mov	r2, r3
 800e282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e284:	637b      	str	r3, [r7, #52]	; 0x34
 800e286:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e28a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e28c:	e841 2300 	strex	r3, r2, [r1]
 800e290:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1e6      	bne.n	800e266 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	3308      	adds	r3, #8
 800e29e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	e853 3f00 	ldrex	r3, [r3]
 800e2a6:	613b      	str	r3, [r7, #16]
   return(result);
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	f023 0301 	bic.w	r3, r3, #1
 800e2ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	3308      	adds	r3, #8
 800e2b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2b8:	623a      	str	r2, [r7, #32]
 800e2ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2bc:	69f9      	ldr	r1, [r7, #28]
 800e2be:	6a3a      	ldr	r2, [r7, #32]
 800e2c0:	e841 2300 	strex	r3, r2, [r1]
 800e2c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1e5      	bne.n	800e298 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2220      	movs	r2, #32
 800e2d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2220      	movs	r2, #32
 800e2d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2220      	movs	r2, #32
 800e2e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e2ec:	2303      	movs	r3, #3
 800e2ee:	e010      	b.n	800e312 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	69da      	ldr	r2, [r3, #28]
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	4013      	ands	r3, r2
 800e2fa:	68ba      	ldr	r2, [r7, #8]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	bf0c      	ite	eq
 800e300:	2301      	moveq	r3, #1
 800e302:	2300      	movne	r3, #0
 800e304:	b2db      	uxtb	r3, r3
 800e306:	461a      	mov	r2, r3
 800e308:	79fb      	ldrb	r3, [r7, #7]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	f43f af46 	beq.w	800e19c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3770      	adds	r7, #112	; 0x70
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
	...

0800e31c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b096      	sub	sp, #88	; 0x58
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	4613      	mov	r3, r2
 800e328:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	88fa      	ldrh	r2, [r7, #6]
 800e334:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2222      	movs	r2, #34	; 0x22
 800e344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d02c      	beq.n	800e3aa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e354:	4a42      	ldr	r2, [pc, #264]	; (800e460 <UART_Start_Receive_DMA+0x144>)
 800e356:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e35c:	4a41      	ldr	r2, [pc, #260]	; (800e464 <UART_Start_Receive_DMA+0x148>)
 800e35e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e364:	4a40      	ldr	r2, [pc, #256]	; (800e468 <UART_Start_Receive_DMA+0x14c>)
 800e366:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e36c:	2200      	movs	r2, #0
 800e36e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	3324      	adds	r3, #36	; 0x24
 800e37a:	4619      	mov	r1, r3
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e380:	461a      	mov	r2, r3
 800e382:	88fb      	ldrh	r3, [r7, #6]
 800e384:	f7f7 fdaa 	bl	8005edc <HAL_DMA_Start_IT>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00d      	beq.n	800e3aa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2210      	movs	r2, #16
 800e392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2220      	movs	r2, #32
 800e3a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e055      	b.n	800e456 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d018      	beq.n	800e3ec <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c2:	e853 3f00 	ldrex	r3, [r3]
 800e3c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3ce:	657b      	str	r3, [r7, #84]	; 0x54
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e3da:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3e0:	e841 2300 	strex	r3, r2, [r1]
 800e3e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e3e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d1e6      	bne.n	800e3ba <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3308      	adds	r3, #8
 800e3f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f6:	e853 3f00 	ldrex	r3, [r3]
 800e3fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	f043 0301 	orr.w	r3, r3, #1
 800e402:	653b      	str	r3, [r7, #80]	; 0x50
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	3308      	adds	r3, #8
 800e40a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e40c:	637a      	str	r2, [r7, #52]	; 0x34
 800e40e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e414:	e841 2300 	strex	r3, r2, [r1]
 800e418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1e5      	bne.n	800e3ec <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	3308      	adds	r3, #8
 800e426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	e853 3f00 	ldrex	r3, [r3]
 800e42e:	613b      	str	r3, [r7, #16]
   return(result);
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e436:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	3308      	adds	r3, #8
 800e43e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e440:	623a      	str	r2, [r7, #32]
 800e442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e444:	69f9      	ldr	r1, [r7, #28]
 800e446:	6a3a      	ldr	r2, [r7, #32]
 800e448:	e841 2300 	strex	r3, r2, [r1]
 800e44c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d1e5      	bne.n	800e420 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3758      	adds	r7, #88	; 0x58
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	bf00      	nop
 800e460:	0800e66f 	.word	0x0800e66f
 800e464:	0800e791 	.word	0x0800e791
 800e468:	0800e7c9 	.word	0x0800e7c9

0800e46c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b08f      	sub	sp, #60	; 0x3c
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47a:	6a3b      	ldr	r3, [r7, #32]
 800e47c:	e853 3f00 	ldrex	r3, [r3]
 800e480:	61fb      	str	r3, [r7, #28]
   return(result);
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e488:	637b      	str	r3, [r7, #52]	; 0x34
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	461a      	mov	r2, r3
 800e490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e492:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e494:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e49a:	e841 2300 	strex	r3, r2, [r1]
 800e49e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1e6      	bne.n	800e474 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	3308      	adds	r3, #8
 800e4ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	e853 3f00 	ldrex	r3, [r3]
 800e4b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e4bc:	633b      	str	r3, [r7, #48]	; 0x30
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	3308      	adds	r3, #8
 800e4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4c6:	61ba      	str	r2, [r7, #24]
 800e4c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ca:	6979      	ldr	r1, [r7, #20]
 800e4cc:	69ba      	ldr	r2, [r7, #24]
 800e4ce:	e841 2300 	strex	r3, r2, [r1]
 800e4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e5      	bne.n	800e4a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2220      	movs	r2, #32
 800e4de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e4e2:	bf00      	nop
 800e4e4:	373c      	adds	r7, #60	; 0x3c
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
	...

0800e4f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b095      	sub	sp, #84	; 0x54
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e500:	e853 3f00 	ldrex	r3, [r3]
 800e504:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e50c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	461a      	mov	r2, r3
 800e514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e516:	643b      	str	r3, [r7, #64]	; 0x40
 800e518:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e51a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e51c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e51e:	e841 2300 	strex	r3, r2, [r1]
 800e522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1e6      	bne.n	800e4f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3308      	adds	r3, #8
 800e530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	e853 3f00 	ldrex	r3, [r3]
 800e538:	61fb      	str	r3, [r7, #28]
   return(result);
 800e53a:	69fa      	ldr	r2, [r7, #28]
 800e53c:	4b1e      	ldr	r3, [pc, #120]	; (800e5b8 <UART_EndRxTransfer+0xc8>)
 800e53e:	4013      	ands	r3, r2
 800e540:	64bb      	str	r3, [r7, #72]	; 0x48
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3308      	adds	r3, #8
 800e548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e54a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e54c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e552:	e841 2300 	strex	r3, r2, [r1]
 800e556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d1e5      	bne.n	800e52a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e562:	2b01      	cmp	r3, #1
 800e564:	d118      	bne.n	800e598 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	e853 3f00 	ldrex	r3, [r3]
 800e572:	60bb      	str	r3, [r7, #8]
   return(result);
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	f023 0310 	bic.w	r3, r3, #16
 800e57a:	647b      	str	r3, [r7, #68]	; 0x44
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	461a      	mov	r2, r3
 800e582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e584:	61bb      	str	r3, [r7, #24]
 800e586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e588:	6979      	ldr	r1, [r7, #20]
 800e58a:	69ba      	ldr	r2, [r7, #24]
 800e58c:	e841 2300 	strex	r3, r2, [r1]
 800e590:	613b      	str	r3, [r7, #16]
   return(result);
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d1e6      	bne.n	800e566 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2220      	movs	r2, #32
 800e59c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e5ac:	bf00      	nop
 800e5ae:	3754      	adds	r7, #84	; 0x54
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr
 800e5b8:	effffffe 	.word	0xeffffffe

0800e5bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b090      	sub	sp, #64	; 0x40
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	69db      	ldr	r3, [r3, #28]
 800e5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5d2:	d037      	beq.n	800e644 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3308      	adds	r3, #8
 800e5e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	e853 3f00 	ldrex	r3, [r3]
 800e5ea:	623b      	str	r3, [r7, #32]
   return(result);
 800e5ec:	6a3b      	ldr	r3, [r7, #32]
 800e5ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	3308      	adds	r3, #8
 800e5fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5fc:	633a      	str	r2, [r7, #48]	; 0x30
 800e5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e604:	e841 2300 	strex	r3, r2, [r1]
 800e608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d1e5      	bne.n	800e5dc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	e853 3f00 	ldrex	r3, [r3]
 800e61c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e624:	637b      	str	r3, [r7, #52]	; 0x34
 800e626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	461a      	mov	r2, r3
 800e62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62e:	61fb      	str	r3, [r7, #28]
 800e630:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e632:	69b9      	ldr	r1, [r7, #24]
 800e634:	69fa      	ldr	r2, [r7, #28]
 800e636:	e841 2300 	strex	r3, r2, [r1]
 800e63a:	617b      	str	r3, [r7, #20]
   return(result);
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1e6      	bne.n	800e610 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e642:	e002      	b.n	800e64a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e644:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e646:	f7f4 fdf7 	bl	8003238 <HAL_UART_TxCpltCallback>
}
 800e64a:	bf00      	nop
 800e64c:	3740      	adds	r7, #64	; 0x40
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b084      	sub	sp, #16
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e65e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f7fe fe19 	bl	800d298 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e666:	bf00      	nop
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}

0800e66e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e66e:	b580      	push	{r7, lr}
 800e670:	b09c      	sub	sp, #112	; 0x70
 800e672:	af00      	add	r7, sp, #0
 800e674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e67a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	69db      	ldr	r3, [r3, #28]
 800e680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e684:	d071      	beq.n	800e76a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e688:	2200      	movs	r2, #0
 800e68a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e696:	e853 3f00 	ldrex	r3, [r3]
 800e69a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e69c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e69e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e6ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800e6ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e6b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6b4:	e841 2300 	strex	r3, r2, [r1]
 800e6b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1e6      	bne.n	800e68e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	3308      	adds	r3, #8
 800e6c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ca:	e853 3f00 	ldrex	r3, [r3]
 800e6ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d2:	f023 0301 	bic.w	r3, r3, #1
 800e6d6:	667b      	str	r3, [r7, #100]	; 0x64
 800e6d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	3308      	adds	r3, #8
 800e6de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e6e0:	647a      	str	r2, [r7, #68]	; 0x44
 800e6e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6e8:	e841 2300 	strex	r3, r2, [r1]
 800e6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d1e5      	bne.n	800e6c0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3308      	adds	r3, #8
 800e6fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fe:	e853 3f00 	ldrex	r3, [r3]
 800e702:	623b      	str	r3, [r7, #32]
   return(result);
 800e704:	6a3b      	ldr	r3, [r7, #32]
 800e706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e70a:	663b      	str	r3, [r7, #96]	; 0x60
 800e70c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3308      	adds	r3, #8
 800e712:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e714:	633a      	str	r2, [r7, #48]	; 0x30
 800e716:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e71a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e71c:	e841 2300 	strex	r3, r2, [r1]
 800e720:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e724:	2b00      	cmp	r3, #0
 800e726:	d1e5      	bne.n	800e6f4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e72a:	2220      	movs	r2, #32
 800e72c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e734:	2b01      	cmp	r3, #1
 800e736:	d118      	bne.n	800e76a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	e853 3f00 	ldrex	r3, [r3]
 800e744:	60fb      	str	r3, [r7, #12]
   return(result);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f023 0310 	bic.w	r3, r3, #16
 800e74c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e74e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	461a      	mov	r2, r3
 800e754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e756:	61fb      	str	r3, [r7, #28]
 800e758:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75a:	69b9      	ldr	r1, [r7, #24]
 800e75c:	69fa      	ldr	r2, [r7, #28]
 800e75e:	e841 2300 	strex	r3, r2, [r1]
 800e762:	617b      	str	r3, [r7, #20]
   return(result);
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1e6      	bne.n	800e738 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e76a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e76c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d107      	bne.n	800e782 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e778:	4619      	mov	r1, r3
 800e77a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e77c:	f7fe fda0 	bl	800d2c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e780:	e002      	b.n	800e788 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e782:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e784:	f7f4 fd6a 	bl	800325c <HAL_UART_RxCpltCallback>
}
 800e788:	bf00      	nop
 800e78a:	3770      	adds	r7, #112	; 0x70
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d109      	bne.n	800e7ba <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e7ac:	085b      	lsrs	r3, r3, #1
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f7fe fd84 	bl	800d2c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e7b8:	e002      	b.n	800e7c0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f7fe fd76 	bl	800d2ac <HAL_UART_RxHalfCpltCallback>
}
 800e7c0:	bf00      	nop
 800e7c2:	3710      	adds	r7, #16
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7f0:	2b80      	cmp	r3, #128	; 0x80
 800e7f2:	d109      	bne.n	800e808 <UART_DMAError+0x40>
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	2b21      	cmp	r3, #33	; 0x21
 800e7f8:	d106      	bne.n	800e808 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e802:	6978      	ldr	r0, [r7, #20]
 800e804:	f7ff fe32 	bl	800e46c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	689b      	ldr	r3, [r3, #8]
 800e80e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e812:	2b40      	cmp	r3, #64	; 0x40
 800e814:	d109      	bne.n	800e82a <UART_DMAError+0x62>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2b22      	cmp	r3, #34	; 0x22
 800e81a:	d106      	bne.n	800e82a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	2200      	movs	r2, #0
 800e820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e824:	6978      	ldr	r0, [r7, #20]
 800e826:	f7ff fe63 	bl	800e4f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e830:	f043 0210 	orr.w	r2, r3, #16
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e83a:	6978      	ldr	r0, [r7, #20]
 800e83c:	f7f4 fcc4 	bl	80031c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e840:	bf00      	nop
 800e842:	3718      	adds	r7, #24
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e854:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2200      	movs	r2, #0
 800e85a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2200      	movs	r2, #0
 800e862:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f7f4 fcae 	bl	80031c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e86c:	bf00      	nop
 800e86e:	3710      	adds	r7, #16
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b088      	sub	sp, #32
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	e853 3f00 	ldrex	r3, [r3]
 800e888:	60bb      	str	r3, [r7, #8]
   return(result);
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e890:	61fb      	str	r3, [r7, #28]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	61bb      	str	r3, [r7, #24]
 800e89c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89e:	6979      	ldr	r1, [r7, #20]
 800e8a0:	69ba      	ldr	r2, [r7, #24]
 800e8a2:	e841 2300 	strex	r3, r2, [r1]
 800e8a6:	613b      	str	r3, [r7, #16]
   return(result);
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1e6      	bne.n	800e87c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2220      	movs	r2, #32
 800e8b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7f4 fcbb 	bl	8003238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8c2:	bf00      	nop
 800e8c4:	3720      	adds	r7, #32
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e8ca:	b480      	push	{r7}
 800e8cc:	b083      	sub	sp, #12
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e8d2:	bf00      	nop
 800e8d4:	370c      	adds	r7, #12
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr

0800e8de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e8de:	b480      	push	{r7}
 800e8e0:	b083      	sub	sp, #12
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e8e6:	bf00      	nop
 800e8e8:	370c      	adds	r7, #12
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr

0800e8f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e8f2:	b480      	push	{r7}
 800e8f4:	b083      	sub	sp, #12
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e8fa:	bf00      	nop
 800e8fc:	370c      	adds	r7, #12
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr

0800e906 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e906:	b480      	push	{r7}
 800e908:	b085      	sub	sp, #20
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e914:	2b01      	cmp	r3, #1
 800e916:	d101      	bne.n	800e91c <HAL_UARTEx_DisableFifoMode+0x16>
 800e918:	2302      	movs	r3, #2
 800e91a:	e027      	b.n	800e96c <HAL_UARTEx_DisableFifoMode+0x66>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2224      	movs	r2, #36	; 0x24
 800e928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f022 0201 	bic.w	r2, r2, #1
 800e942:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e94a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	68fa      	ldr	r2, [r7, #12]
 800e958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2220      	movs	r2, #32
 800e95e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3714      	adds	r7, #20
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d101      	bne.n	800e990 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e98c:	2302      	movs	r3, #2
 800e98e:	e02d      	b.n	800e9ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2201      	movs	r2, #1
 800e994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2224      	movs	r2, #36	; 0x24
 800e99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f022 0201 	bic.w	r2, r2, #1
 800e9b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	683a      	ldr	r2, [r7, #0]
 800e9c8:	430a      	orrs	r2, r1
 800e9ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 f84f 	bl	800ea70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	68fa      	ldr	r2, [r7, #12]
 800e9d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2220      	movs	r2, #32
 800e9de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e9ea:	2300      	movs	r3, #0
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d101      	bne.n	800ea0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ea08:	2302      	movs	r3, #2
 800ea0a:	e02d      	b.n	800ea68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2201      	movs	r2, #1
 800ea10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2224      	movs	r2, #36	; 0x24
 800ea18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f022 0201 	bic.w	r2, r2, #1
 800ea32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	689b      	ldr	r3, [r3, #8]
 800ea3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	683a      	ldr	r2, [r7, #0]
 800ea44:	430a      	orrs	r2, r1
 800ea46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 f811 	bl	800ea70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2220      	movs	r2, #32
 800ea5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea66:	2300      	movs	r3, #0
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3710      	adds	r7, #16
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b085      	sub	sp, #20
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d108      	bne.n	800ea92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2201      	movs	r2, #1
 800ea84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea90:	e031      	b.n	800eaf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea92:	2310      	movs	r3, #16
 800ea94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ea96:	2310      	movs	r3, #16
 800ea98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	0e5b      	lsrs	r3, r3, #25
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	f003 0307 	and.w	r3, r3, #7
 800eaa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	689b      	ldr	r3, [r3, #8]
 800eab0:	0f5b      	lsrs	r3, r3, #29
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	f003 0307 	and.w	r3, r3, #7
 800eab8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eaba:	7bbb      	ldrb	r3, [r7, #14]
 800eabc:	7b3a      	ldrb	r2, [r7, #12]
 800eabe:	4911      	ldr	r1, [pc, #68]	; (800eb04 <UARTEx_SetNbDataToProcess+0x94>)
 800eac0:	5c8a      	ldrb	r2, [r1, r2]
 800eac2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eac6:	7b3a      	ldrb	r2, [r7, #12]
 800eac8:	490f      	ldr	r1, [pc, #60]	; (800eb08 <UARTEx_SetNbDataToProcess+0x98>)
 800eaca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eacc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ead8:	7bfb      	ldrb	r3, [r7, #15]
 800eada:	7b7a      	ldrb	r2, [r7, #13]
 800eadc:	4909      	ldr	r1, [pc, #36]	; (800eb04 <UARTEx_SetNbDataToProcess+0x94>)
 800eade:	5c8a      	ldrb	r2, [r1, r2]
 800eae0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eae4:	7b7a      	ldrb	r2, [r7, #13]
 800eae6:	4908      	ldr	r1, [pc, #32]	; (800eb08 <UARTEx_SetNbDataToProcess+0x98>)
 800eae8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eaea:	fb93 f3f2 	sdiv	r3, r3, r2
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800eaf6:	bf00      	nop
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	0800fe50 	.word	0x0800fe50
 800eb08:	0800fe58 	.word	0x0800fe58

0800eb0c <__cxa_pure_virtual>:
 800eb0c:	b508      	push	{r3, lr}
 800eb0e:	f000 f80d 	bl	800eb2c <_ZSt9terminatev>

0800eb12 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eb12:	b508      	push	{r3, lr}
 800eb14:	4780      	blx	r0
 800eb16:	f000 fe51 	bl	800f7bc <abort>
	...

0800eb1c <_ZSt13get_terminatev>:
 800eb1c:	4b02      	ldr	r3, [pc, #8]	; (800eb28 <_ZSt13get_terminatev+0xc>)
 800eb1e:	6818      	ldr	r0, [r3, #0]
 800eb20:	f3bf 8f5b 	dmb	ish
 800eb24:	4770      	bx	lr
 800eb26:	bf00      	nop
 800eb28:	240001d8 	.word	0x240001d8

0800eb2c <_ZSt9terminatev>:
 800eb2c:	b508      	push	{r3, lr}
 800eb2e:	f7ff fff5 	bl	800eb1c <_ZSt13get_terminatev>
 800eb32:	f7ff ffee 	bl	800eb12 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800eb38 <cos>:
 800eb38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb3a:	eeb0 7b40 	vmov.f64	d7, d0
 800eb3e:	ee17 3a90 	vmov	r3, s15
 800eb42:	4a21      	ldr	r2, [pc, #132]	; (800ebc8 <cos+0x90>)
 800eb44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	dc06      	bgt.n	800eb5a <cos+0x22>
 800eb4c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800ebc0 <cos+0x88>
 800eb50:	b005      	add	sp, #20
 800eb52:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb56:	f000 b9cb 	b.w	800eef0 <__kernel_cos>
 800eb5a:	4a1c      	ldr	r2, [pc, #112]	; (800ebcc <cos+0x94>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	dd04      	ble.n	800eb6a <cos+0x32>
 800eb60:	ee30 0b40 	vsub.f64	d0, d0, d0
 800eb64:	b005      	add	sp, #20
 800eb66:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb6a:	4668      	mov	r0, sp
 800eb6c:	f000 f87c 	bl	800ec68 <__ieee754_rem_pio2>
 800eb70:	f000 0003 	and.w	r0, r0, #3
 800eb74:	2801      	cmp	r0, #1
 800eb76:	d009      	beq.n	800eb8c <cos+0x54>
 800eb78:	2802      	cmp	r0, #2
 800eb7a:	d010      	beq.n	800eb9e <cos+0x66>
 800eb7c:	b9b0      	cbnz	r0, 800ebac <cos+0x74>
 800eb7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb82:	ed9d 0b00 	vldr	d0, [sp]
 800eb86:	f000 f9b3 	bl	800eef0 <__kernel_cos>
 800eb8a:	e7eb      	b.n	800eb64 <cos+0x2c>
 800eb8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb90:	ed9d 0b00 	vldr	d0, [sp]
 800eb94:	f000 fcb0 	bl	800f4f8 <__kernel_sin>
 800eb98:	eeb1 0b40 	vneg.f64	d0, d0
 800eb9c:	e7e2      	b.n	800eb64 <cos+0x2c>
 800eb9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eba2:	ed9d 0b00 	vldr	d0, [sp]
 800eba6:	f000 f9a3 	bl	800eef0 <__kernel_cos>
 800ebaa:	e7f5      	b.n	800eb98 <cos+0x60>
 800ebac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebb0:	ed9d 0b00 	vldr	d0, [sp]
 800ebb4:	2001      	movs	r0, #1
 800ebb6:	f000 fc9f 	bl	800f4f8 <__kernel_sin>
 800ebba:	e7d3      	b.n	800eb64 <cos+0x2c>
 800ebbc:	f3af 8000 	nop.w
	...
 800ebc8:	3fe921fb 	.word	0x3fe921fb
 800ebcc:	7fefffff 	.word	0x7fefffff

0800ebd0 <sin>:
 800ebd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebd2:	eeb0 7b40 	vmov.f64	d7, d0
 800ebd6:	ee17 3a90 	vmov	r3, s15
 800ebda:	4a21      	ldr	r2, [pc, #132]	; (800ec60 <sin+0x90>)
 800ebdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	dc07      	bgt.n	800ebf4 <sin+0x24>
 800ebe4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800ec58 <sin+0x88>
 800ebe8:	2000      	movs	r0, #0
 800ebea:	b005      	add	sp, #20
 800ebec:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebf0:	f000 bc82 	b.w	800f4f8 <__kernel_sin>
 800ebf4:	4a1b      	ldr	r2, [pc, #108]	; (800ec64 <sin+0x94>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	dd04      	ble.n	800ec04 <sin+0x34>
 800ebfa:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ebfe:	b005      	add	sp, #20
 800ec00:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec04:	4668      	mov	r0, sp
 800ec06:	f000 f82f 	bl	800ec68 <__ieee754_rem_pio2>
 800ec0a:	f000 0003 	and.w	r0, r0, #3
 800ec0e:	2801      	cmp	r0, #1
 800ec10:	d00a      	beq.n	800ec28 <sin+0x58>
 800ec12:	2802      	cmp	r0, #2
 800ec14:	d00f      	beq.n	800ec36 <sin+0x66>
 800ec16:	b9c0      	cbnz	r0, 800ec4a <sin+0x7a>
 800ec18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec1c:	ed9d 0b00 	vldr	d0, [sp]
 800ec20:	2001      	movs	r0, #1
 800ec22:	f000 fc69 	bl	800f4f8 <__kernel_sin>
 800ec26:	e7ea      	b.n	800ebfe <sin+0x2e>
 800ec28:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec2c:	ed9d 0b00 	vldr	d0, [sp]
 800ec30:	f000 f95e 	bl	800eef0 <__kernel_cos>
 800ec34:	e7e3      	b.n	800ebfe <sin+0x2e>
 800ec36:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec3a:	ed9d 0b00 	vldr	d0, [sp]
 800ec3e:	2001      	movs	r0, #1
 800ec40:	f000 fc5a 	bl	800f4f8 <__kernel_sin>
 800ec44:	eeb1 0b40 	vneg.f64	d0, d0
 800ec48:	e7d9      	b.n	800ebfe <sin+0x2e>
 800ec4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec4e:	ed9d 0b00 	vldr	d0, [sp]
 800ec52:	f000 f94d 	bl	800eef0 <__kernel_cos>
 800ec56:	e7f5      	b.n	800ec44 <sin+0x74>
	...
 800ec60:	3fe921fb 	.word	0x3fe921fb
 800ec64:	7fefffff 	.word	0x7fefffff

0800ec68 <__ieee754_rem_pio2>:
 800ec68:	b570      	push	{r4, r5, r6, lr}
 800ec6a:	eeb0 7b40 	vmov.f64	d7, d0
 800ec6e:	ee17 5a90 	vmov	r5, s15
 800ec72:	4b99      	ldr	r3, [pc, #612]	; (800eed8 <__ieee754_rem_pio2+0x270>)
 800ec74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ec78:	429e      	cmp	r6, r3
 800ec7a:	b088      	sub	sp, #32
 800ec7c:	4604      	mov	r4, r0
 800ec7e:	dc07      	bgt.n	800ec90 <__ieee754_rem_pio2+0x28>
 800ec80:	2200      	movs	r2, #0
 800ec82:	2300      	movs	r3, #0
 800ec84:	ed84 0b00 	vstr	d0, [r4]
 800ec88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ec8c:	2000      	movs	r0, #0
 800ec8e:	e01b      	b.n	800ecc8 <__ieee754_rem_pio2+0x60>
 800ec90:	4b92      	ldr	r3, [pc, #584]	; (800eedc <__ieee754_rem_pio2+0x274>)
 800ec92:	429e      	cmp	r6, r3
 800ec94:	dc3b      	bgt.n	800ed0e <__ieee754_rem_pio2+0xa6>
 800ec96:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800ec9a:	2d00      	cmp	r5, #0
 800ec9c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800ee98 <__ieee754_rem_pio2+0x230>
 800eca0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800eca4:	dd19      	ble.n	800ecda <__ieee754_rem_pio2+0x72>
 800eca6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ecaa:	429e      	cmp	r6, r3
 800ecac:	d00e      	beq.n	800eccc <__ieee754_rem_pio2+0x64>
 800ecae:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800eea0 <__ieee754_rem_pio2+0x238>
 800ecb2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800ecb6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ecba:	ed84 5b00 	vstr	d5, [r4]
 800ecbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ecc2:	ed84 7b02 	vstr	d7, [r4, #8]
 800ecc6:	2001      	movs	r0, #1
 800ecc8:	b008      	add	sp, #32
 800ecca:	bd70      	pop	{r4, r5, r6, pc}
 800eccc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800eea8 <__ieee754_rem_pio2+0x240>
 800ecd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ecd4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800eeb0 <__ieee754_rem_pio2+0x248>
 800ecd8:	e7eb      	b.n	800ecb2 <__ieee754_rem_pio2+0x4a>
 800ecda:	429e      	cmp	r6, r3
 800ecdc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ece0:	d00e      	beq.n	800ed00 <__ieee754_rem_pio2+0x98>
 800ece2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800eea0 <__ieee754_rem_pio2+0x238>
 800ece6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ecea:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ecee:	ed84 5b00 	vstr	d5, [r4]
 800ecf2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ecf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecfa:	ed84 7b02 	vstr	d7, [r4, #8]
 800ecfe:	e7e3      	b.n	800ecc8 <__ieee754_rem_pio2+0x60>
 800ed00:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800eea8 <__ieee754_rem_pio2+0x240>
 800ed04:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ed08:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800eeb0 <__ieee754_rem_pio2+0x248>
 800ed0c:	e7eb      	b.n	800ece6 <__ieee754_rem_pio2+0x7e>
 800ed0e:	4b74      	ldr	r3, [pc, #464]	; (800eee0 <__ieee754_rem_pio2+0x278>)
 800ed10:	429e      	cmp	r6, r3
 800ed12:	dc70      	bgt.n	800edf6 <__ieee754_rem_pio2+0x18e>
 800ed14:	f000 fc48 	bl	800f5a8 <fabs>
 800ed18:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ed1c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800eeb8 <__ieee754_rem_pio2+0x250>
 800ed20:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ed24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ed28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ed2c:	ee17 0a90 	vmov	r0, s15
 800ed30:	eeb1 4b45 	vneg.f64	d4, d5
 800ed34:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800ee98 <__ieee754_rem_pio2+0x230>
 800ed38:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ed3c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800eea0 <__ieee754_rem_pio2+0x238>
 800ed40:	281f      	cmp	r0, #31
 800ed42:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ed46:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ed4a:	dc08      	bgt.n	800ed5e <__ieee754_rem_pio2+0xf6>
 800ed4c:	4b65      	ldr	r3, [pc, #404]	; (800eee4 <__ieee754_rem_pio2+0x27c>)
 800ed4e:	1e42      	subs	r2, r0, #1
 800ed50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed54:	42b3      	cmp	r3, r6
 800ed56:	d002      	beq.n	800ed5e <__ieee754_rem_pio2+0xf6>
 800ed58:	ed84 6b00 	vstr	d6, [r4]
 800ed5c:	e026      	b.n	800edac <__ieee754_rem_pio2+0x144>
 800ed5e:	ee16 3a90 	vmov	r3, s13
 800ed62:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ed66:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ed6a:	2b10      	cmp	r3, #16
 800ed6c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ed70:	ddf2      	ble.n	800ed58 <__ieee754_rem_pio2+0xf0>
 800ed72:	eeb0 6b40 	vmov.f64	d6, d0
 800ed76:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800eea8 <__ieee754_rem_pio2+0x240>
 800ed7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800eeb0 <__ieee754_rem_pio2+0x248>
 800ed7e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ed82:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ed86:	eea4 0b07 	vfma.f64	d0, d4, d7
 800ed8a:	eeb0 7b40 	vmov.f64	d7, d0
 800ed8e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800ed92:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ed96:	ee13 3a90 	vmov	r3, s7
 800ed9a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ed9e:	1ad3      	subs	r3, r2, r3
 800eda0:	2b31      	cmp	r3, #49	; 0x31
 800eda2:	dc17      	bgt.n	800edd4 <__ieee754_rem_pio2+0x16c>
 800eda4:	eeb0 0b46 	vmov.f64	d0, d6
 800eda8:	ed84 3b00 	vstr	d3, [r4]
 800edac:	ed94 6b00 	vldr	d6, [r4]
 800edb0:	2d00      	cmp	r5, #0
 800edb2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800edb6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800edba:	ed84 0b02 	vstr	d0, [r4, #8]
 800edbe:	da83      	bge.n	800ecc8 <__ieee754_rem_pio2+0x60>
 800edc0:	eeb1 6b46 	vneg.f64	d6, d6
 800edc4:	eeb1 0b40 	vneg.f64	d0, d0
 800edc8:	ed84 6b00 	vstr	d6, [r4]
 800edcc:	ed84 0b02 	vstr	d0, [r4, #8]
 800edd0:	4240      	negs	r0, r0
 800edd2:	e779      	b.n	800ecc8 <__ieee754_rem_pio2+0x60>
 800edd4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800eec0 <__ieee754_rem_pio2+0x258>
 800edd8:	eeb0 0b46 	vmov.f64	d0, d6
 800eddc:	eea4 0b03 	vfma.f64	d0, d4, d3
 800ede0:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ede4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800eec8 <__ieee754_rem_pio2+0x260>
 800ede8:	eea4 7b03 	vfma.f64	d7, d4, d3
 800edec:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800edf0:	ee30 6b47 	vsub.f64	d6, d0, d7
 800edf4:	e7b0      	b.n	800ed58 <__ieee754_rem_pio2+0xf0>
 800edf6:	4b3c      	ldr	r3, [pc, #240]	; (800eee8 <__ieee754_rem_pio2+0x280>)
 800edf8:	429e      	cmp	r6, r3
 800edfa:	dd06      	ble.n	800ee0a <__ieee754_rem_pio2+0x1a2>
 800edfc:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ee00:	ed80 7b02 	vstr	d7, [r0, #8]
 800ee04:	ed80 7b00 	vstr	d7, [r0]
 800ee08:	e740      	b.n	800ec8c <__ieee754_rem_pio2+0x24>
 800ee0a:	1532      	asrs	r2, r6, #20
 800ee0c:	ee10 0a10 	vmov	r0, s0
 800ee10:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ee14:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ee18:	ec41 0b17 	vmov	d7, r0, r1
 800ee1c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ee20:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800eed0 <__ieee754_rem_pio2+0x268>
 800ee24:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ee28:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ee30:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ee34:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ee38:	a902      	add	r1, sp, #8
 800ee3a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ee3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee42:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ee46:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ee4a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee4e:	2603      	movs	r6, #3
 800ee50:	4608      	mov	r0, r1
 800ee52:	ed91 7b04 	vldr	d7, [r1, #16]
 800ee56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5e:	4633      	mov	r3, r6
 800ee60:	f1a1 0108 	sub.w	r1, r1, #8
 800ee64:	f106 36ff 	add.w	r6, r6, #4294967295
 800ee68:	d0f3      	beq.n	800ee52 <__ieee754_rem_pio2+0x1ea>
 800ee6a:	4920      	ldr	r1, [pc, #128]	; (800eeec <__ieee754_rem_pio2+0x284>)
 800ee6c:	9101      	str	r1, [sp, #4]
 800ee6e:	2102      	movs	r1, #2
 800ee70:	9100      	str	r1, [sp, #0]
 800ee72:	4621      	mov	r1, r4
 800ee74:	f000 f8a8 	bl	800efc8 <__kernel_rem_pio2>
 800ee78:	2d00      	cmp	r5, #0
 800ee7a:	f6bf af25 	bge.w	800ecc8 <__ieee754_rem_pio2+0x60>
 800ee7e:	ed94 7b00 	vldr	d7, [r4]
 800ee82:	eeb1 7b47 	vneg.f64	d7, d7
 800ee86:	ed84 7b00 	vstr	d7, [r4]
 800ee8a:	ed94 7b02 	vldr	d7, [r4, #8]
 800ee8e:	eeb1 7b47 	vneg.f64	d7, d7
 800ee92:	ed84 7b02 	vstr	d7, [r4, #8]
 800ee96:	e79b      	b.n	800edd0 <__ieee754_rem_pio2+0x168>
 800ee98:	54400000 	.word	0x54400000
 800ee9c:	3ff921fb 	.word	0x3ff921fb
 800eea0:	1a626331 	.word	0x1a626331
 800eea4:	3dd0b461 	.word	0x3dd0b461
 800eea8:	1a600000 	.word	0x1a600000
 800eeac:	3dd0b461 	.word	0x3dd0b461
 800eeb0:	2e037073 	.word	0x2e037073
 800eeb4:	3ba3198a 	.word	0x3ba3198a
 800eeb8:	6dc9c883 	.word	0x6dc9c883
 800eebc:	3fe45f30 	.word	0x3fe45f30
 800eec0:	2e000000 	.word	0x2e000000
 800eec4:	3ba3198a 	.word	0x3ba3198a
 800eec8:	252049c1 	.word	0x252049c1
 800eecc:	397b839a 	.word	0x397b839a
 800eed0:	00000000 	.word	0x00000000
 800eed4:	41700000 	.word	0x41700000
 800eed8:	3fe921fb 	.word	0x3fe921fb
 800eedc:	4002d97b 	.word	0x4002d97b
 800eee0:	413921fb 	.word	0x413921fb
 800eee4:	0800fe60 	.word	0x0800fe60
 800eee8:	7fefffff 	.word	0x7fefffff
 800eeec:	0800fee0 	.word	0x0800fee0

0800eef0 <__kernel_cos>:
 800eef0:	ee10 1a90 	vmov	r1, s1
 800eef4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800eef8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800eefc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800ef00:	da05      	bge.n	800ef0e <__kernel_cos+0x1e>
 800ef02:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ef06:	ee17 3a90 	vmov	r3, s15
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d03d      	beq.n	800ef8a <__kernel_cos+0x9a>
 800ef0e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800ef12:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ef90 <__kernel_cos+0xa0>
 800ef16:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ef98 <__kernel_cos+0xa8>
 800ef1a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800ef1e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800efa0 <__kernel_cos+0xb0>
 800ef22:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ef26:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800efa8 <__kernel_cos+0xb8>
 800ef2a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ef2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800efb0 <__kernel_cos+0xc0>
 800ef32:	4b23      	ldr	r3, [pc, #140]	; (800efc0 <__kernel_cos+0xd0>)
 800ef34:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ef38:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800efb8 <__kernel_cos+0xc8>
 800ef3c:	4299      	cmp	r1, r3
 800ef3e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ef42:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ef46:	ee26 5b03 	vmul.f64	d5, d6, d3
 800ef4a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ef4e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800ef52:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ef56:	dc04      	bgt.n	800ef62 <__kernel_cos+0x72>
 800ef58:	ee37 6b46 	vsub.f64	d6, d7, d6
 800ef5c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800ef60:	4770      	bx	lr
 800ef62:	4b18      	ldr	r3, [pc, #96]	; (800efc4 <__kernel_cos+0xd4>)
 800ef64:	4299      	cmp	r1, r3
 800ef66:	dc0d      	bgt.n	800ef84 <__kernel_cos+0x94>
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ef6e:	ec43 2b15 	vmov	d5, r2, r3
 800ef72:	ee34 0b45 	vsub.f64	d0, d4, d5
 800ef76:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ef7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef7e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ef82:	4770      	bx	lr
 800ef84:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ef88:	e7f3      	b.n	800ef72 <__kernel_cos+0x82>
 800ef8a:	eeb0 0b44 	vmov.f64	d0, d4
 800ef8e:	4770      	bx	lr
 800ef90:	be8838d4 	.word	0xbe8838d4
 800ef94:	bda8fae9 	.word	0xbda8fae9
 800ef98:	bdb4b1c4 	.word	0xbdb4b1c4
 800ef9c:	3e21ee9e 	.word	0x3e21ee9e
 800efa0:	809c52ad 	.word	0x809c52ad
 800efa4:	be927e4f 	.word	0xbe927e4f
 800efa8:	19cb1590 	.word	0x19cb1590
 800efac:	3efa01a0 	.word	0x3efa01a0
 800efb0:	16c15177 	.word	0x16c15177
 800efb4:	bf56c16c 	.word	0xbf56c16c
 800efb8:	5555554c 	.word	0x5555554c
 800efbc:	3fa55555 	.word	0x3fa55555
 800efc0:	3fd33332 	.word	0x3fd33332
 800efc4:	3fe90000 	.word	0x3fe90000

0800efc8 <__kernel_rem_pio2>:
 800efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	ed2d 8b06 	vpush	{d8-d10}
 800efd0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800efd4:	460f      	mov	r7, r1
 800efd6:	9002      	str	r0, [sp, #8]
 800efd8:	49c5      	ldr	r1, [pc, #788]	; (800f2f0 <__kernel_rem_pio2+0x328>)
 800efda:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800efdc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800efe0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	f112 0f14 	cmn.w	r2, #20
 800efea:	bfa8      	it	ge
 800efec:	2018      	movge	r0, #24
 800efee:	f103 31ff 	add.w	r1, r3, #4294967295
 800eff2:	bfb8      	it	lt
 800eff4:	2000      	movlt	r0, #0
 800eff6:	f06f 0417 	mvn.w	r4, #23
 800effa:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800f2d8 <__kernel_rem_pio2+0x310>
 800effe:	bfa4      	itt	ge
 800f000:	f1a2 0a03 	subge.w	sl, r2, #3
 800f004:	fb9a f0f0 	sdivge	r0, sl, r0
 800f008:	fb00 4404 	mla	r4, r0, r4, r4
 800f00c:	1a46      	subs	r6, r0, r1
 800f00e:	4414      	add	r4, r2
 800f010:	eb09 0c01 	add.w	ip, r9, r1
 800f014:	ad1a      	add	r5, sp, #104	; 0x68
 800f016:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800f01a:	2200      	movs	r2, #0
 800f01c:	4562      	cmp	r2, ip
 800f01e:	dd10      	ble.n	800f042 <__kernel_rem_pio2+0x7a>
 800f020:	9a01      	ldr	r2, [sp, #4]
 800f022:	ab1a      	add	r3, sp, #104	; 0x68
 800f024:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f028:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800f02c:	f04f 0c00 	mov.w	ip, #0
 800f030:	45cc      	cmp	ip, r9
 800f032:	dc26      	bgt.n	800f082 <__kernel_rem_pio2+0xba>
 800f034:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800f2d8 <__kernel_rem_pio2+0x310>
 800f038:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f03c:	4616      	mov	r6, r2
 800f03e:	2500      	movs	r5, #0
 800f040:	e015      	b.n	800f06e <__kernel_rem_pio2+0xa6>
 800f042:	42d6      	cmn	r6, r2
 800f044:	d409      	bmi.n	800f05a <__kernel_rem_pio2+0x92>
 800f046:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800f04a:	ee07 3a90 	vmov	s15, r3
 800f04e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f052:	eca5 7b02 	vstmia	r5!, {d7}
 800f056:	3201      	adds	r2, #1
 800f058:	e7e0      	b.n	800f01c <__kernel_rem_pio2+0x54>
 800f05a:	eeb0 7b46 	vmov.f64	d7, d6
 800f05e:	e7f8      	b.n	800f052 <__kernel_rem_pio2+0x8a>
 800f060:	ecb8 5b02 	vldmia	r8!, {d5}
 800f064:	ed96 6b00 	vldr	d6, [r6]
 800f068:	3501      	adds	r5, #1
 800f06a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f06e:	428d      	cmp	r5, r1
 800f070:	f1a6 0608 	sub.w	r6, r6, #8
 800f074:	ddf4      	ble.n	800f060 <__kernel_rem_pio2+0x98>
 800f076:	ecaa 7b02 	vstmia	sl!, {d7}
 800f07a:	f10c 0c01 	add.w	ip, ip, #1
 800f07e:	3208      	adds	r2, #8
 800f080:	e7d6      	b.n	800f030 <__kernel_rem_pio2+0x68>
 800f082:	ab06      	add	r3, sp, #24
 800f084:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800f2e0 <__kernel_rem_pio2+0x318>
 800f088:	ed9f ab97 	vldr	d10, [pc, #604]	; 800f2e8 <__kernel_rem_pio2+0x320>
 800f08c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f090:	9303      	str	r3, [sp, #12]
 800f092:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800f096:	464d      	mov	r5, r9
 800f098:	00eb      	lsls	r3, r5, #3
 800f09a:	9304      	str	r3, [sp, #16]
 800f09c:	ab92      	add	r3, sp, #584	; 0x248
 800f09e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800f0a2:	f10d 0b18 	add.w	fp, sp, #24
 800f0a6:	ab6a      	add	r3, sp, #424	; 0x1a8
 800f0a8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800f0ac:	465e      	mov	r6, fp
 800f0ae:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	f1a2 0208 	sub.w	r2, r2, #8
 800f0ba:	dc4c      	bgt.n	800f156 <__kernel_rem_pio2+0x18e>
 800f0bc:	4620      	mov	r0, r4
 800f0be:	9105      	str	r1, [sp, #20]
 800f0c0:	f000 faf2 	bl	800f6a8 <scalbn>
 800f0c4:	eeb0 8b40 	vmov.f64	d8, d0
 800f0c8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800f0cc:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f0d0:	f000 fa76 	bl	800f5c0 <floor>
 800f0d4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800f0d8:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f0dc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f0e0:	2c00      	cmp	r4, #0
 800f0e2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800f0e6:	ee17 8a90 	vmov	r8, s15
 800f0ea:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f0ee:	9905      	ldr	r1, [sp, #20]
 800f0f0:	dd43      	ble.n	800f17a <__kernel_rem_pio2+0x1b2>
 800f0f2:	1e68      	subs	r0, r5, #1
 800f0f4:	ab06      	add	r3, sp, #24
 800f0f6:	f1c4 0c18 	rsb	ip, r4, #24
 800f0fa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f0fe:	fa46 f20c 	asr.w	r2, r6, ip
 800f102:	4490      	add	r8, r2
 800f104:	fa02 f20c 	lsl.w	r2, r2, ip
 800f108:	1ab6      	subs	r6, r6, r2
 800f10a:	f1c4 0217 	rsb	r2, r4, #23
 800f10e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800f112:	4116      	asrs	r6, r2
 800f114:	2e00      	cmp	r6, #0
 800f116:	dd3f      	ble.n	800f198 <__kernel_rem_pio2+0x1d0>
 800f118:	f04f 0c00 	mov.w	ip, #0
 800f11c:	f108 0801 	add.w	r8, r8, #1
 800f120:	4660      	mov	r0, ip
 800f122:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800f126:	4565      	cmp	r5, ip
 800f128:	dc6e      	bgt.n	800f208 <__kernel_rem_pio2+0x240>
 800f12a:	2c00      	cmp	r4, #0
 800f12c:	dd04      	ble.n	800f138 <__kernel_rem_pio2+0x170>
 800f12e:	2c01      	cmp	r4, #1
 800f130:	d07f      	beq.n	800f232 <__kernel_rem_pio2+0x26a>
 800f132:	2c02      	cmp	r4, #2
 800f134:	f000 8087 	beq.w	800f246 <__kernel_rem_pio2+0x27e>
 800f138:	2e02      	cmp	r6, #2
 800f13a:	d12d      	bne.n	800f198 <__kernel_rem_pio2+0x1d0>
 800f13c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f140:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f144:	b340      	cbz	r0, 800f198 <__kernel_rem_pio2+0x1d0>
 800f146:	4620      	mov	r0, r4
 800f148:	9105      	str	r1, [sp, #20]
 800f14a:	f000 faad 	bl	800f6a8 <scalbn>
 800f14e:	9905      	ldr	r1, [sp, #20]
 800f150:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f154:	e020      	b.n	800f198 <__kernel_rem_pio2+0x1d0>
 800f156:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f15a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f15e:	3801      	subs	r0, #1
 800f160:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f164:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f168:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f16c:	eca6 0a01 	vstmia	r6!, {s0}
 800f170:	ed92 0b00 	vldr	d0, [r2]
 800f174:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f178:	e79c      	b.n	800f0b4 <__kernel_rem_pio2+0xec>
 800f17a:	d105      	bne.n	800f188 <__kernel_rem_pio2+0x1c0>
 800f17c:	1e6a      	subs	r2, r5, #1
 800f17e:	ab06      	add	r3, sp, #24
 800f180:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800f184:	15f6      	asrs	r6, r6, #23
 800f186:	e7c5      	b.n	800f114 <__kernel_rem_pio2+0x14c>
 800f188:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f18c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f194:	da36      	bge.n	800f204 <__kernel_rem_pio2+0x23c>
 800f196:	2600      	movs	r6, #0
 800f198:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a0:	f040 80aa 	bne.w	800f2f8 <__kernel_rem_pio2+0x330>
 800f1a4:	f105 3bff 	add.w	fp, r5, #4294967295
 800f1a8:	4658      	mov	r0, fp
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	4548      	cmp	r0, r9
 800f1ae:	da52      	bge.n	800f256 <__kernel_rem_pio2+0x28e>
 800f1b0:	2a00      	cmp	r2, #0
 800f1b2:	f000 8081 	beq.w	800f2b8 <__kernel_rem_pio2+0x2f0>
 800f1b6:	ab06      	add	r3, sp, #24
 800f1b8:	3c18      	subs	r4, #24
 800f1ba:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	f000 8087 	beq.w	800f2d2 <__kernel_rem_pio2+0x30a>
 800f1c4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	f000 fa6d 	bl	800f6a8 <scalbn>
 800f1ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f1d2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800f2e0 <__kernel_rem_pio2+0x318>
 800f1d6:	a96a      	add	r1, sp, #424	; 0x1a8
 800f1d8:	f103 0208 	add.w	r2, r3, #8
 800f1dc:	1888      	adds	r0, r1, r2
 800f1de:	4659      	mov	r1, fp
 800f1e0:	2900      	cmp	r1, #0
 800f1e2:	f280 80b7 	bge.w	800f354 <__kernel_rem_pio2+0x38c>
 800f1e6:	4659      	mov	r1, fp
 800f1e8:	2900      	cmp	r1, #0
 800f1ea:	f2c0 80d5 	blt.w	800f398 <__kernel_rem_pio2+0x3d0>
 800f1ee:	a86a      	add	r0, sp, #424	; 0x1a8
 800f1f0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800f1f4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800f2d8 <__kernel_rem_pio2+0x310>
 800f1f8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800f2f4 <__kernel_rem_pio2+0x32c>
 800f1fc:	2400      	movs	r4, #0
 800f1fe:	ebab 0001 	sub.w	r0, fp, r1
 800f202:	e0be      	b.n	800f382 <__kernel_rem_pio2+0x3ba>
 800f204:	2602      	movs	r6, #2
 800f206:	e787      	b.n	800f118 <__kernel_rem_pio2+0x150>
 800f208:	f8db 2000 	ldr.w	r2, [fp]
 800f20c:	b958      	cbnz	r0, 800f226 <__kernel_rem_pio2+0x25e>
 800f20e:	b122      	cbz	r2, 800f21a <__kernel_rem_pio2+0x252>
 800f210:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800f214:	f8cb 2000 	str.w	r2, [fp]
 800f218:	2201      	movs	r2, #1
 800f21a:	f10c 0c01 	add.w	ip, ip, #1
 800f21e:	f10b 0b04 	add.w	fp, fp, #4
 800f222:	4610      	mov	r0, r2
 800f224:	e77f      	b.n	800f126 <__kernel_rem_pio2+0x15e>
 800f226:	ebae 0202 	sub.w	r2, lr, r2
 800f22a:	f8cb 2000 	str.w	r2, [fp]
 800f22e:	4602      	mov	r2, r0
 800f230:	e7f3      	b.n	800f21a <__kernel_rem_pio2+0x252>
 800f232:	f105 3cff 	add.w	ip, r5, #4294967295
 800f236:	ab06      	add	r3, sp, #24
 800f238:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f23c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f240:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800f244:	e778      	b.n	800f138 <__kernel_rem_pio2+0x170>
 800f246:	f105 3cff 	add.w	ip, r5, #4294967295
 800f24a:	ab06      	add	r3, sp, #24
 800f24c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f250:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800f254:	e7f4      	b.n	800f240 <__kernel_rem_pio2+0x278>
 800f256:	ab06      	add	r3, sp, #24
 800f258:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f25c:	3801      	subs	r0, #1
 800f25e:	431a      	orrs	r2, r3
 800f260:	e7a4      	b.n	800f1ac <__kernel_rem_pio2+0x1e4>
 800f262:	f10c 0c01 	add.w	ip, ip, #1
 800f266:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d0f9      	beq.n	800f262 <__kernel_rem_pio2+0x29a>
 800f26e:	9b04      	ldr	r3, [sp, #16]
 800f270:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f274:	eb0d 0203 	add.w	r2, sp, r3
 800f278:	9b01      	ldr	r3, [sp, #4]
 800f27a:	18e8      	adds	r0, r5, r3
 800f27c:	ab1a      	add	r3, sp, #104	; 0x68
 800f27e:	1c6e      	adds	r6, r5, #1
 800f280:	3a98      	subs	r2, #152	; 0x98
 800f282:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f286:	4465      	add	r5, ip
 800f288:	42b5      	cmp	r5, r6
 800f28a:	f6ff af05 	blt.w	800f098 <__kernel_rem_pio2+0xd0>
 800f28e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800f292:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f296:	ee07 3a90 	vmov	s15, r3
 800f29a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f29e:	f04f 0c00 	mov.w	ip, #0
 800f2a2:	eca0 7b02 	vstmia	r0!, {d7}
 800f2a6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f2d8 <__kernel_rem_pio2+0x310>
 800f2aa:	4680      	mov	r8, r0
 800f2ac:	458c      	cmp	ip, r1
 800f2ae:	dd07      	ble.n	800f2c0 <__kernel_rem_pio2+0x2f8>
 800f2b0:	eca2 7b02 	vstmia	r2!, {d7}
 800f2b4:	3601      	adds	r6, #1
 800f2b6:	e7e7      	b.n	800f288 <__kernel_rem_pio2+0x2c0>
 800f2b8:	9a03      	ldr	r2, [sp, #12]
 800f2ba:	f04f 0c01 	mov.w	ip, #1
 800f2be:	e7d2      	b.n	800f266 <__kernel_rem_pio2+0x29e>
 800f2c0:	ecbe 5b02 	vldmia	lr!, {d5}
 800f2c4:	ed38 6b02 	vldmdb	r8!, {d6}
 800f2c8:	f10c 0c01 	add.w	ip, ip, #1
 800f2cc:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f2d0:	e7ec      	b.n	800f2ac <__kernel_rem_pio2+0x2e4>
 800f2d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2d6:	e76e      	b.n	800f1b6 <__kernel_rem_pio2+0x1ee>
	...
 800f2e4:	3e700000 	.word	0x3e700000
 800f2e8:	00000000 	.word	0x00000000
 800f2ec:	41700000 	.word	0x41700000
 800f2f0:	08010028 	.word	0x08010028
 800f2f4:	0800ffe8 	.word	0x0800ffe8
 800f2f8:	4260      	negs	r0, r4
 800f2fa:	eeb0 0b48 	vmov.f64	d0, d8
 800f2fe:	f000 f9d3 	bl	800f6a8 <scalbn>
 800f302:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f4e0 <__kernel_rem_pio2+0x518>
 800f306:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f30e:	db18      	blt.n	800f342 <__kernel_rem_pio2+0x37a>
 800f310:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800f4e8 <__kernel_rem_pio2+0x520>
 800f314:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f318:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f31c:	aa06      	add	r2, sp, #24
 800f31e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f322:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f326:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f32a:	f105 0b01 	add.w	fp, r5, #1
 800f32e:	ee10 3a10 	vmov	r3, s0
 800f332:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f336:	ee17 3a10 	vmov	r3, s14
 800f33a:	3418      	adds	r4, #24
 800f33c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800f340:	e740      	b.n	800f1c4 <__kernel_rem_pio2+0x1fc>
 800f342:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f346:	aa06      	add	r2, sp, #24
 800f348:	ee10 3a10 	vmov	r3, s0
 800f34c:	46ab      	mov	fp, r5
 800f34e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f352:	e737      	b.n	800f1c4 <__kernel_rem_pio2+0x1fc>
 800f354:	ac06      	add	r4, sp, #24
 800f356:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800f35a:	9401      	str	r4, [sp, #4]
 800f35c:	ee07 4a90 	vmov	s15, r4
 800f360:	3901      	subs	r1, #1
 800f362:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f366:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f36a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f36e:	ed20 7b02 	vstmdb	r0!, {d7}
 800f372:	e735      	b.n	800f1e0 <__kernel_rem_pio2+0x218>
 800f374:	ecbc 5b02 	vldmia	ip!, {d5}
 800f378:	ecb5 6b02 	vldmia	r5!, {d6}
 800f37c:	3401      	adds	r4, #1
 800f37e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f382:	454c      	cmp	r4, r9
 800f384:	dc01      	bgt.n	800f38a <__kernel_rem_pio2+0x3c2>
 800f386:	4284      	cmp	r4, r0
 800f388:	ddf4      	ble.n	800f374 <__kernel_rem_pio2+0x3ac>
 800f38a:	ac42      	add	r4, sp, #264	; 0x108
 800f38c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800f390:	ed80 7b00 	vstr	d7, [r0]
 800f394:	3901      	subs	r1, #1
 800f396:	e727      	b.n	800f1e8 <__kernel_rem_pio2+0x220>
 800f398:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800f39a:	2902      	cmp	r1, #2
 800f39c:	dc0a      	bgt.n	800f3b4 <__kernel_rem_pio2+0x3ec>
 800f39e:	2900      	cmp	r1, #0
 800f3a0:	dc2c      	bgt.n	800f3fc <__kernel_rem_pio2+0x434>
 800f3a2:	d045      	beq.n	800f430 <__kernel_rem_pio2+0x468>
 800f3a4:	f008 0007 	and.w	r0, r8, #7
 800f3a8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800f3ac:	ecbd 8b06 	vpop	{d8-d10}
 800f3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800f3b6:	2a03      	cmp	r2, #3
 800f3b8:	d1f4      	bne.n	800f3a4 <__kernel_rem_pio2+0x3dc>
 800f3ba:	aa42      	add	r2, sp, #264	; 0x108
 800f3bc:	4413      	add	r3, r2
 800f3be:	461a      	mov	r2, r3
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	4658      	mov	r0, fp
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	f1a1 0108 	sub.w	r1, r1, #8
 800f3ca:	dc54      	bgt.n	800f476 <__kernel_rem_pio2+0x4ae>
 800f3cc:	4659      	mov	r1, fp
 800f3ce:	2901      	cmp	r1, #1
 800f3d0:	f1a2 0208 	sub.w	r2, r2, #8
 800f3d4:	dc5f      	bgt.n	800f496 <__kernel_rem_pio2+0x4ce>
 800f3d6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800f4f0 <__kernel_rem_pio2+0x528>
 800f3da:	3308      	adds	r3, #8
 800f3dc:	f1bb 0f01 	cmp.w	fp, #1
 800f3e0:	dc69      	bgt.n	800f4b6 <__kernel_rem_pio2+0x4ee>
 800f3e2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800f3e6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800f3ea:	2e00      	cmp	r6, #0
 800f3ec:	d16a      	bne.n	800f4c4 <__kernel_rem_pio2+0x4fc>
 800f3ee:	ed87 5b00 	vstr	d5, [r7]
 800f3f2:	ed87 6b02 	vstr	d6, [r7, #8]
 800f3f6:	ed87 7b04 	vstr	d7, [r7, #16]
 800f3fa:	e7d3      	b.n	800f3a4 <__kernel_rem_pio2+0x3dc>
 800f3fc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f4f0 <__kernel_rem_pio2+0x528>
 800f400:	ab42      	add	r3, sp, #264	; 0x108
 800f402:	441a      	add	r2, r3
 800f404:	465b      	mov	r3, fp
 800f406:	2b00      	cmp	r3, #0
 800f408:	da26      	bge.n	800f458 <__kernel_rem_pio2+0x490>
 800f40a:	b35e      	cbz	r6, 800f464 <__kernel_rem_pio2+0x49c>
 800f40c:	eeb1 7b46 	vneg.f64	d7, d6
 800f410:	ed87 7b00 	vstr	d7, [r7]
 800f414:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800f418:	aa44      	add	r2, sp, #272	; 0x110
 800f41a:	2301      	movs	r3, #1
 800f41c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f420:	459b      	cmp	fp, r3
 800f422:	da22      	bge.n	800f46a <__kernel_rem_pio2+0x4a2>
 800f424:	b10e      	cbz	r6, 800f42a <__kernel_rem_pio2+0x462>
 800f426:	eeb1 7b47 	vneg.f64	d7, d7
 800f42a:	ed87 7b02 	vstr	d7, [r7, #8]
 800f42e:	e7b9      	b.n	800f3a4 <__kernel_rem_pio2+0x3dc>
 800f430:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800f4f0 <__kernel_rem_pio2+0x528>
 800f434:	ab42      	add	r3, sp, #264	; 0x108
 800f436:	441a      	add	r2, r3
 800f438:	f1bb 0f00 	cmp.w	fp, #0
 800f43c:	da05      	bge.n	800f44a <__kernel_rem_pio2+0x482>
 800f43e:	b10e      	cbz	r6, 800f444 <__kernel_rem_pio2+0x47c>
 800f440:	eeb1 7b47 	vneg.f64	d7, d7
 800f444:	ed87 7b00 	vstr	d7, [r7]
 800f448:	e7ac      	b.n	800f3a4 <__kernel_rem_pio2+0x3dc>
 800f44a:	ed32 6b02 	vldmdb	r2!, {d6}
 800f44e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f452:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f456:	e7ef      	b.n	800f438 <__kernel_rem_pio2+0x470>
 800f458:	ed32 7b02 	vldmdb	r2!, {d7}
 800f45c:	3b01      	subs	r3, #1
 800f45e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f462:	e7d0      	b.n	800f406 <__kernel_rem_pio2+0x43e>
 800f464:	eeb0 7b46 	vmov.f64	d7, d6
 800f468:	e7d2      	b.n	800f410 <__kernel_rem_pio2+0x448>
 800f46a:	ecb2 6b02 	vldmia	r2!, {d6}
 800f46e:	3301      	adds	r3, #1
 800f470:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f474:	e7d4      	b.n	800f420 <__kernel_rem_pio2+0x458>
 800f476:	ed91 7b00 	vldr	d7, [r1]
 800f47a:	ed91 5b02 	vldr	d5, [r1, #8]
 800f47e:	3801      	subs	r0, #1
 800f480:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f484:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f488:	ed81 6b00 	vstr	d6, [r1]
 800f48c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f490:	ed81 7b02 	vstr	d7, [r1, #8]
 800f494:	e796      	b.n	800f3c4 <__kernel_rem_pio2+0x3fc>
 800f496:	ed92 7b00 	vldr	d7, [r2]
 800f49a:	ed92 5b02 	vldr	d5, [r2, #8]
 800f49e:	3901      	subs	r1, #1
 800f4a0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f4a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f4a8:	ed82 6b00 	vstr	d6, [r2]
 800f4ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f4b0:	ed82 7b02 	vstr	d7, [r2, #8]
 800f4b4:	e78b      	b.n	800f3ce <__kernel_rem_pio2+0x406>
 800f4b6:	ed33 6b02 	vldmdb	r3!, {d6}
 800f4ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4be:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f4c2:	e78b      	b.n	800f3dc <__kernel_rem_pio2+0x414>
 800f4c4:	eeb1 5b45 	vneg.f64	d5, d5
 800f4c8:	eeb1 6b46 	vneg.f64	d6, d6
 800f4cc:	ed87 5b00 	vstr	d5, [r7]
 800f4d0:	eeb1 7b47 	vneg.f64	d7, d7
 800f4d4:	ed87 6b02 	vstr	d6, [r7, #8]
 800f4d8:	e78d      	b.n	800f3f6 <__kernel_rem_pio2+0x42e>
 800f4da:	bf00      	nop
 800f4dc:	f3af 8000 	nop.w
 800f4e0:	00000000 	.word	0x00000000
 800f4e4:	41700000 	.word	0x41700000
 800f4e8:	00000000 	.word	0x00000000
 800f4ec:	3e700000 	.word	0x3e700000
	...

0800f4f8 <__kernel_sin>:
 800f4f8:	ee10 3a90 	vmov	r3, s1
 800f4fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f500:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f504:	da04      	bge.n	800f510 <__kernel_sin+0x18>
 800f506:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f50a:	ee17 3a90 	vmov	r3, s15
 800f50e:	b35b      	cbz	r3, 800f568 <__kernel_sin+0x70>
 800f510:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f514:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f518:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f570 <__kernel_sin+0x78>
 800f51c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f578 <__kernel_sin+0x80>
 800f520:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f524:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f580 <__kernel_sin+0x88>
 800f528:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f52c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f588 <__kernel_sin+0x90>
 800f530:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f534:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f590 <__kernel_sin+0x98>
 800f538:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f53c:	b930      	cbnz	r0, 800f54c <__kernel_sin+0x54>
 800f53e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f598 <__kernel_sin+0xa0>
 800f542:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f546:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f54a:	4770      	bx	lr
 800f54c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f550:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f554:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f558:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f55c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f5a0 <__kernel_sin+0xa8>
 800f560:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f564:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	f3af 8000 	nop.w
 800f570:	5acfd57c 	.word	0x5acfd57c
 800f574:	3de5d93a 	.word	0x3de5d93a
 800f578:	8a2b9ceb 	.word	0x8a2b9ceb
 800f57c:	be5ae5e6 	.word	0xbe5ae5e6
 800f580:	57b1fe7d 	.word	0x57b1fe7d
 800f584:	3ec71de3 	.word	0x3ec71de3
 800f588:	19c161d5 	.word	0x19c161d5
 800f58c:	bf2a01a0 	.word	0xbf2a01a0
 800f590:	1110f8a6 	.word	0x1110f8a6
 800f594:	3f811111 	.word	0x3f811111
 800f598:	55555549 	.word	0x55555549
 800f59c:	bfc55555 	.word	0xbfc55555
 800f5a0:	55555549 	.word	0x55555549
 800f5a4:	3fc55555 	.word	0x3fc55555

0800f5a8 <fabs>:
 800f5a8:	ec51 0b10 	vmov	r0, r1, d0
 800f5ac:	ee10 2a10 	vmov	r2, s0
 800f5b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f5b4:	ec43 2b10 	vmov	d0, r2, r3
 800f5b8:	4770      	bx	lr
 800f5ba:	0000      	movs	r0, r0
 800f5bc:	0000      	movs	r0, r0
	...

0800f5c0 <floor>:
 800f5c0:	ee10 1a90 	vmov	r1, s1
 800f5c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f5c8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f5cc:	2b13      	cmp	r3, #19
 800f5ce:	b530      	push	{r4, r5, lr}
 800f5d0:	ee10 0a10 	vmov	r0, s0
 800f5d4:	ee10 5a10 	vmov	r5, s0
 800f5d8:	dc31      	bgt.n	800f63e <floor+0x7e>
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	da15      	bge.n	800f60a <floor+0x4a>
 800f5de:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f698 <floor+0xd8>
 800f5e2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f5e6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ee:	dd07      	ble.n	800f600 <floor+0x40>
 800f5f0:	2900      	cmp	r1, #0
 800f5f2:	da4e      	bge.n	800f692 <floor+0xd2>
 800f5f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f5f8:	4318      	orrs	r0, r3
 800f5fa:	d001      	beq.n	800f600 <floor+0x40>
 800f5fc:	4928      	ldr	r1, [pc, #160]	; (800f6a0 <floor+0xe0>)
 800f5fe:	2000      	movs	r0, #0
 800f600:	460b      	mov	r3, r1
 800f602:	4602      	mov	r2, r0
 800f604:	ec43 2b10 	vmov	d0, r2, r3
 800f608:	e020      	b.n	800f64c <floor+0x8c>
 800f60a:	4a26      	ldr	r2, [pc, #152]	; (800f6a4 <floor+0xe4>)
 800f60c:	411a      	asrs	r2, r3
 800f60e:	ea01 0402 	and.w	r4, r1, r2
 800f612:	4304      	orrs	r4, r0
 800f614:	d01a      	beq.n	800f64c <floor+0x8c>
 800f616:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f698 <floor+0xd8>
 800f61a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f61e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f626:	ddeb      	ble.n	800f600 <floor+0x40>
 800f628:	2900      	cmp	r1, #0
 800f62a:	bfbe      	ittt	lt
 800f62c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f630:	fa40 f303 	asrlt.w	r3, r0, r3
 800f634:	18c9      	addlt	r1, r1, r3
 800f636:	ea21 0102 	bic.w	r1, r1, r2
 800f63a:	2000      	movs	r0, #0
 800f63c:	e7e0      	b.n	800f600 <floor+0x40>
 800f63e:	2b33      	cmp	r3, #51	; 0x33
 800f640:	dd05      	ble.n	800f64e <floor+0x8e>
 800f642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f646:	d101      	bne.n	800f64c <floor+0x8c>
 800f648:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f64c:	bd30      	pop	{r4, r5, pc}
 800f64e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f652:	f04f 32ff 	mov.w	r2, #4294967295
 800f656:	40e2      	lsrs	r2, r4
 800f658:	4202      	tst	r2, r0
 800f65a:	d0f7      	beq.n	800f64c <floor+0x8c>
 800f65c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f698 <floor+0xd8>
 800f660:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f664:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f66c:	ddc8      	ble.n	800f600 <floor+0x40>
 800f66e:	2900      	cmp	r1, #0
 800f670:	da02      	bge.n	800f678 <floor+0xb8>
 800f672:	2b14      	cmp	r3, #20
 800f674:	d103      	bne.n	800f67e <floor+0xbe>
 800f676:	3101      	adds	r1, #1
 800f678:	ea20 0002 	bic.w	r0, r0, r2
 800f67c:	e7c0      	b.n	800f600 <floor+0x40>
 800f67e:	2401      	movs	r4, #1
 800f680:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f684:	fa04 f303 	lsl.w	r3, r4, r3
 800f688:	4418      	add	r0, r3
 800f68a:	42a8      	cmp	r0, r5
 800f68c:	bf38      	it	cc
 800f68e:	1909      	addcc	r1, r1, r4
 800f690:	e7f2      	b.n	800f678 <floor+0xb8>
 800f692:	2000      	movs	r0, #0
 800f694:	4601      	mov	r1, r0
 800f696:	e7b3      	b.n	800f600 <floor+0x40>
 800f698:	8800759c 	.word	0x8800759c
 800f69c:	7e37e43c 	.word	0x7e37e43c
 800f6a0:	bff00000 	.word	0xbff00000
 800f6a4:	000fffff 	.word	0x000fffff

0800f6a8 <scalbn>:
 800f6a8:	ee10 1a90 	vmov	r1, s1
 800f6ac:	b510      	push	{r4, lr}
 800f6ae:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f6b2:	b98c      	cbnz	r4, 800f6d8 <scalbn+0x30>
 800f6b4:	ee10 3a10 	vmov	r3, s0
 800f6b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f6bc:	430b      	orrs	r3, r1
 800f6be:	d011      	beq.n	800f6e4 <scalbn+0x3c>
 800f6c0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800f788 <scalbn+0xe0>
 800f6c4:	4b3c      	ldr	r3, [pc, #240]	; (800f7b8 <scalbn+0x110>)
 800f6c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f6ca:	4298      	cmp	r0, r3
 800f6cc:	da0b      	bge.n	800f6e6 <scalbn+0x3e>
 800f6ce:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f790 <scalbn+0xe8>
 800f6d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f6d6:	e005      	b.n	800f6e4 <scalbn+0x3c>
 800f6d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800f6dc:	429c      	cmp	r4, r3
 800f6de:	d107      	bne.n	800f6f0 <scalbn+0x48>
 800f6e0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f6e4:	bd10      	pop	{r4, pc}
 800f6e6:	ee10 1a90 	vmov	r1, s1
 800f6ea:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f6ee:	3c36      	subs	r4, #54	; 0x36
 800f6f0:	4404      	add	r4, r0
 800f6f2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800f6f6:	429c      	cmp	r4, r3
 800f6f8:	dd0d      	ble.n	800f716 <scalbn+0x6e>
 800f6fa:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f798 <scalbn+0xf0>
 800f6fe:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f7a0 <scalbn+0xf8>
 800f702:	eeb0 6b47 	vmov.f64	d6, d7
 800f706:	ee10 3a90 	vmov	r3, s1
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f710:	ee27 0b06 	vmul.f64	d0, d7, d6
 800f714:	e7e6      	b.n	800f6e4 <scalbn+0x3c>
 800f716:	2c00      	cmp	r4, #0
 800f718:	dd0a      	ble.n	800f730 <scalbn+0x88>
 800f71a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f71e:	ec53 2b10 	vmov	r2, r3, d0
 800f722:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f726:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f72a:	ec43 2b10 	vmov	d0, r2, r3
 800f72e:	e7d9      	b.n	800f6e4 <scalbn+0x3c>
 800f730:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800f734:	da19      	bge.n	800f76a <scalbn+0xc2>
 800f736:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f73a:	4298      	cmp	r0, r3
 800f73c:	ee10 3a90 	vmov	r3, s1
 800f740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f744:	dd09      	ble.n	800f75a <scalbn+0xb2>
 800f746:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800f798 <scalbn+0xf0>
 800f74a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800f7a0 <scalbn+0xf8>
 800f74e:	eeb0 7b40 	vmov.f64	d7, d0
 800f752:	2b00      	cmp	r3, #0
 800f754:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800f758:	e7bb      	b.n	800f6d2 <scalbn+0x2a>
 800f75a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800f790 <scalbn+0xe8>
 800f75e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800f7a8 <scalbn+0x100>
 800f762:	eeb0 7b40 	vmov.f64	d7, d0
 800f766:	2b00      	cmp	r3, #0
 800f768:	e7f4      	b.n	800f754 <scalbn+0xac>
 800f76a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f76e:	ec53 2b10 	vmov	r2, r3, d0
 800f772:	3436      	adds	r4, #54	; 0x36
 800f774:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f778:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f77c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f7b0 <scalbn+0x108>
 800f780:	ec43 2b10 	vmov	d0, r2, r3
 800f784:	e7a5      	b.n	800f6d2 <scalbn+0x2a>
 800f786:	bf00      	nop
 800f788:	00000000 	.word	0x00000000
 800f78c:	43500000 	.word	0x43500000
 800f790:	c2f8f359 	.word	0xc2f8f359
 800f794:	01a56e1f 	.word	0x01a56e1f
 800f798:	8800759c 	.word	0x8800759c
 800f79c:	7e37e43c 	.word	0x7e37e43c
 800f7a0:	8800759c 	.word	0x8800759c
 800f7a4:	fe37e43c 	.word	0xfe37e43c
 800f7a8:	c2f8f359 	.word	0xc2f8f359
 800f7ac:	81a56e1f 	.word	0x81a56e1f
 800f7b0:	00000000 	.word	0x00000000
 800f7b4:	3c900000 	.word	0x3c900000
 800f7b8:	ffff3cb0 	.word	0xffff3cb0

0800f7bc <abort>:
 800f7bc:	b508      	push	{r3, lr}
 800f7be:	2006      	movs	r0, #6
 800f7c0:	f000 f874 	bl	800f8ac <raise>
 800f7c4:	2001      	movs	r0, #1
 800f7c6:	f7f5 f99b 	bl	8004b00 <_exit>
	...

0800f7cc <__errno>:
 800f7cc:	4b01      	ldr	r3, [pc, #4]	; (800f7d4 <__errno+0x8>)
 800f7ce:	6818      	ldr	r0, [r3, #0]
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	240001dc 	.word	0x240001dc

0800f7d8 <__libc_init_array>:
 800f7d8:	b570      	push	{r4, r5, r6, lr}
 800f7da:	4d0d      	ldr	r5, [pc, #52]	; (800f810 <__libc_init_array+0x38>)
 800f7dc:	4c0d      	ldr	r4, [pc, #52]	; (800f814 <__libc_init_array+0x3c>)
 800f7de:	1b64      	subs	r4, r4, r5
 800f7e0:	10a4      	asrs	r4, r4, #2
 800f7e2:	2600      	movs	r6, #0
 800f7e4:	42a6      	cmp	r6, r4
 800f7e6:	d109      	bne.n	800f7fc <__libc_init_array+0x24>
 800f7e8:	4d0b      	ldr	r5, [pc, #44]	; (800f818 <__libc_init_array+0x40>)
 800f7ea:	4c0c      	ldr	r4, [pc, #48]	; (800f81c <__libc_init_array+0x44>)
 800f7ec:	f000 f9b0 	bl	800fb50 <_init>
 800f7f0:	1b64      	subs	r4, r4, r5
 800f7f2:	10a4      	asrs	r4, r4, #2
 800f7f4:	2600      	movs	r6, #0
 800f7f6:	42a6      	cmp	r6, r4
 800f7f8:	d105      	bne.n	800f806 <__libc_init_array+0x2e>
 800f7fa:	bd70      	pop	{r4, r5, r6, pc}
 800f7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f800:	4798      	blx	r3
 800f802:	3601      	adds	r6, #1
 800f804:	e7ee      	b.n	800f7e4 <__libc_init_array+0xc>
 800f806:	f855 3b04 	ldr.w	r3, [r5], #4
 800f80a:	4798      	blx	r3
 800f80c:	3601      	adds	r6, #1
 800f80e:	e7f2      	b.n	800f7f6 <__libc_init_array+0x1e>
 800f810:	08010040 	.word	0x08010040
 800f814:	08010040 	.word	0x08010040
 800f818:	08010040 	.word	0x08010040
 800f81c:	08010048 	.word	0x08010048

0800f820 <memcpy>:
 800f820:	440a      	add	r2, r1
 800f822:	4291      	cmp	r1, r2
 800f824:	f100 33ff 	add.w	r3, r0, #4294967295
 800f828:	d100      	bne.n	800f82c <memcpy+0xc>
 800f82a:	4770      	bx	lr
 800f82c:	b510      	push	{r4, lr}
 800f82e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f832:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f836:	4291      	cmp	r1, r2
 800f838:	d1f9      	bne.n	800f82e <memcpy+0xe>
 800f83a:	bd10      	pop	{r4, pc}

0800f83c <memset>:
 800f83c:	4402      	add	r2, r0
 800f83e:	4603      	mov	r3, r0
 800f840:	4293      	cmp	r3, r2
 800f842:	d100      	bne.n	800f846 <memset+0xa>
 800f844:	4770      	bx	lr
 800f846:	f803 1b01 	strb.w	r1, [r3], #1
 800f84a:	e7f9      	b.n	800f840 <memset+0x4>

0800f84c <realloc>:
 800f84c:	4b02      	ldr	r3, [pc, #8]	; (800f858 <realloc+0xc>)
 800f84e:	460a      	mov	r2, r1
 800f850:	4601      	mov	r1, r0
 800f852:	6818      	ldr	r0, [r3, #0]
 800f854:	f000 b8da 	b.w	800fa0c <_realloc_r>
 800f858:	240001dc 	.word	0x240001dc

0800f85c <_raise_r>:
 800f85c:	291f      	cmp	r1, #31
 800f85e:	b538      	push	{r3, r4, r5, lr}
 800f860:	4604      	mov	r4, r0
 800f862:	460d      	mov	r5, r1
 800f864:	d904      	bls.n	800f870 <_raise_r+0x14>
 800f866:	2316      	movs	r3, #22
 800f868:	6003      	str	r3, [r0, #0]
 800f86a:	f04f 30ff 	mov.w	r0, #4294967295
 800f86e:	bd38      	pop	{r3, r4, r5, pc}
 800f870:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f872:	b112      	cbz	r2, 800f87a <_raise_r+0x1e>
 800f874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f878:	b94b      	cbnz	r3, 800f88e <_raise_r+0x32>
 800f87a:	4620      	mov	r0, r4
 800f87c:	f000 f830 	bl	800f8e0 <_getpid_r>
 800f880:	462a      	mov	r2, r5
 800f882:	4601      	mov	r1, r0
 800f884:	4620      	mov	r0, r4
 800f886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f88a:	f000 b817 	b.w	800f8bc <_kill_r>
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d00a      	beq.n	800f8a8 <_raise_r+0x4c>
 800f892:	1c59      	adds	r1, r3, #1
 800f894:	d103      	bne.n	800f89e <_raise_r+0x42>
 800f896:	2316      	movs	r3, #22
 800f898:	6003      	str	r3, [r0, #0]
 800f89a:	2001      	movs	r0, #1
 800f89c:	e7e7      	b.n	800f86e <_raise_r+0x12>
 800f89e:	2400      	movs	r4, #0
 800f8a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	4798      	blx	r3
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e7e0      	b.n	800f86e <_raise_r+0x12>

0800f8ac <raise>:
 800f8ac:	4b02      	ldr	r3, [pc, #8]	; (800f8b8 <raise+0xc>)
 800f8ae:	4601      	mov	r1, r0
 800f8b0:	6818      	ldr	r0, [r3, #0]
 800f8b2:	f7ff bfd3 	b.w	800f85c <_raise_r>
 800f8b6:	bf00      	nop
 800f8b8:	240001dc 	.word	0x240001dc

0800f8bc <_kill_r>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	4d07      	ldr	r5, [pc, #28]	; (800f8dc <_kill_r+0x20>)
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	4608      	mov	r0, r1
 800f8c6:	4611      	mov	r1, r2
 800f8c8:	602b      	str	r3, [r5, #0]
 800f8ca:	f7f5 f909 	bl	8004ae0 <_kill>
 800f8ce:	1c43      	adds	r3, r0, #1
 800f8d0:	d102      	bne.n	800f8d8 <_kill_r+0x1c>
 800f8d2:	682b      	ldr	r3, [r5, #0]
 800f8d4:	b103      	cbz	r3, 800f8d8 <_kill_r+0x1c>
 800f8d6:	6023      	str	r3, [r4, #0]
 800f8d8:	bd38      	pop	{r3, r4, r5, pc}
 800f8da:	bf00      	nop
 800f8dc:	24001ca4 	.word	0x24001ca4

0800f8e0 <_getpid_r>:
 800f8e0:	f7f5 b8f6 	b.w	8004ad0 <_getpid>

0800f8e4 <sbrk_aligned>:
 800f8e4:	b570      	push	{r4, r5, r6, lr}
 800f8e6:	4e0e      	ldr	r6, [pc, #56]	; (800f920 <sbrk_aligned+0x3c>)
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	6831      	ldr	r1, [r6, #0]
 800f8ec:	4605      	mov	r5, r0
 800f8ee:	b911      	cbnz	r1, 800f8f6 <sbrk_aligned+0x12>
 800f8f0:	f000 f8bc 	bl	800fa6c <_sbrk_r>
 800f8f4:	6030      	str	r0, [r6, #0]
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	f000 f8b7 	bl	800fa6c <_sbrk_r>
 800f8fe:	1c43      	adds	r3, r0, #1
 800f900:	d00a      	beq.n	800f918 <sbrk_aligned+0x34>
 800f902:	1cc4      	adds	r4, r0, #3
 800f904:	f024 0403 	bic.w	r4, r4, #3
 800f908:	42a0      	cmp	r0, r4
 800f90a:	d007      	beq.n	800f91c <sbrk_aligned+0x38>
 800f90c:	1a21      	subs	r1, r4, r0
 800f90e:	4628      	mov	r0, r5
 800f910:	f000 f8ac 	bl	800fa6c <_sbrk_r>
 800f914:	3001      	adds	r0, #1
 800f916:	d101      	bne.n	800f91c <sbrk_aligned+0x38>
 800f918:	f04f 34ff 	mov.w	r4, #4294967295
 800f91c:	4620      	mov	r0, r4
 800f91e:	bd70      	pop	{r4, r5, r6, pc}
 800f920:	24001ca0 	.word	0x24001ca0

0800f924 <_malloc_r>:
 800f924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f928:	1ccd      	adds	r5, r1, #3
 800f92a:	f025 0503 	bic.w	r5, r5, #3
 800f92e:	3508      	adds	r5, #8
 800f930:	2d0c      	cmp	r5, #12
 800f932:	bf38      	it	cc
 800f934:	250c      	movcc	r5, #12
 800f936:	2d00      	cmp	r5, #0
 800f938:	4607      	mov	r7, r0
 800f93a:	db01      	blt.n	800f940 <_malloc_r+0x1c>
 800f93c:	42a9      	cmp	r1, r5
 800f93e:	d905      	bls.n	800f94c <_malloc_r+0x28>
 800f940:	230c      	movs	r3, #12
 800f942:	603b      	str	r3, [r7, #0]
 800f944:	2600      	movs	r6, #0
 800f946:	4630      	mov	r0, r6
 800f948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f94c:	4e2e      	ldr	r6, [pc, #184]	; (800fa08 <_malloc_r+0xe4>)
 800f94e:	f000 f89d 	bl	800fa8c <__malloc_lock>
 800f952:	6833      	ldr	r3, [r6, #0]
 800f954:	461c      	mov	r4, r3
 800f956:	bb34      	cbnz	r4, 800f9a6 <_malloc_r+0x82>
 800f958:	4629      	mov	r1, r5
 800f95a:	4638      	mov	r0, r7
 800f95c:	f7ff ffc2 	bl	800f8e4 <sbrk_aligned>
 800f960:	1c43      	adds	r3, r0, #1
 800f962:	4604      	mov	r4, r0
 800f964:	d14d      	bne.n	800fa02 <_malloc_r+0xde>
 800f966:	6834      	ldr	r4, [r6, #0]
 800f968:	4626      	mov	r6, r4
 800f96a:	2e00      	cmp	r6, #0
 800f96c:	d140      	bne.n	800f9f0 <_malloc_r+0xcc>
 800f96e:	6823      	ldr	r3, [r4, #0]
 800f970:	4631      	mov	r1, r6
 800f972:	4638      	mov	r0, r7
 800f974:	eb04 0803 	add.w	r8, r4, r3
 800f978:	f000 f878 	bl	800fa6c <_sbrk_r>
 800f97c:	4580      	cmp	r8, r0
 800f97e:	d13a      	bne.n	800f9f6 <_malloc_r+0xd2>
 800f980:	6821      	ldr	r1, [r4, #0]
 800f982:	3503      	adds	r5, #3
 800f984:	1a6d      	subs	r5, r5, r1
 800f986:	f025 0503 	bic.w	r5, r5, #3
 800f98a:	3508      	adds	r5, #8
 800f98c:	2d0c      	cmp	r5, #12
 800f98e:	bf38      	it	cc
 800f990:	250c      	movcc	r5, #12
 800f992:	4629      	mov	r1, r5
 800f994:	4638      	mov	r0, r7
 800f996:	f7ff ffa5 	bl	800f8e4 <sbrk_aligned>
 800f99a:	3001      	adds	r0, #1
 800f99c:	d02b      	beq.n	800f9f6 <_malloc_r+0xd2>
 800f99e:	6823      	ldr	r3, [r4, #0]
 800f9a0:	442b      	add	r3, r5
 800f9a2:	6023      	str	r3, [r4, #0]
 800f9a4:	e00e      	b.n	800f9c4 <_malloc_r+0xa0>
 800f9a6:	6822      	ldr	r2, [r4, #0]
 800f9a8:	1b52      	subs	r2, r2, r5
 800f9aa:	d41e      	bmi.n	800f9ea <_malloc_r+0xc6>
 800f9ac:	2a0b      	cmp	r2, #11
 800f9ae:	d916      	bls.n	800f9de <_malloc_r+0xba>
 800f9b0:	1961      	adds	r1, r4, r5
 800f9b2:	42a3      	cmp	r3, r4
 800f9b4:	6025      	str	r5, [r4, #0]
 800f9b6:	bf18      	it	ne
 800f9b8:	6059      	strne	r1, [r3, #4]
 800f9ba:	6863      	ldr	r3, [r4, #4]
 800f9bc:	bf08      	it	eq
 800f9be:	6031      	streq	r1, [r6, #0]
 800f9c0:	5162      	str	r2, [r4, r5]
 800f9c2:	604b      	str	r3, [r1, #4]
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	f104 060b 	add.w	r6, r4, #11
 800f9ca:	f000 f865 	bl	800fa98 <__malloc_unlock>
 800f9ce:	f026 0607 	bic.w	r6, r6, #7
 800f9d2:	1d23      	adds	r3, r4, #4
 800f9d4:	1af2      	subs	r2, r6, r3
 800f9d6:	d0b6      	beq.n	800f946 <_malloc_r+0x22>
 800f9d8:	1b9b      	subs	r3, r3, r6
 800f9da:	50a3      	str	r3, [r4, r2]
 800f9dc:	e7b3      	b.n	800f946 <_malloc_r+0x22>
 800f9de:	6862      	ldr	r2, [r4, #4]
 800f9e0:	42a3      	cmp	r3, r4
 800f9e2:	bf0c      	ite	eq
 800f9e4:	6032      	streq	r2, [r6, #0]
 800f9e6:	605a      	strne	r2, [r3, #4]
 800f9e8:	e7ec      	b.n	800f9c4 <_malloc_r+0xa0>
 800f9ea:	4623      	mov	r3, r4
 800f9ec:	6864      	ldr	r4, [r4, #4]
 800f9ee:	e7b2      	b.n	800f956 <_malloc_r+0x32>
 800f9f0:	4634      	mov	r4, r6
 800f9f2:	6876      	ldr	r6, [r6, #4]
 800f9f4:	e7b9      	b.n	800f96a <_malloc_r+0x46>
 800f9f6:	230c      	movs	r3, #12
 800f9f8:	603b      	str	r3, [r7, #0]
 800f9fa:	4638      	mov	r0, r7
 800f9fc:	f000 f84c 	bl	800fa98 <__malloc_unlock>
 800fa00:	e7a1      	b.n	800f946 <_malloc_r+0x22>
 800fa02:	6025      	str	r5, [r4, #0]
 800fa04:	e7de      	b.n	800f9c4 <_malloc_r+0xa0>
 800fa06:	bf00      	nop
 800fa08:	24001c9c 	.word	0x24001c9c

0800fa0c <_realloc_r>:
 800fa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa10:	4680      	mov	r8, r0
 800fa12:	4614      	mov	r4, r2
 800fa14:	460e      	mov	r6, r1
 800fa16:	b921      	cbnz	r1, 800fa22 <_realloc_r+0x16>
 800fa18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa1c:	4611      	mov	r1, r2
 800fa1e:	f7ff bf81 	b.w	800f924 <_malloc_r>
 800fa22:	b92a      	cbnz	r2, 800fa30 <_realloc_r+0x24>
 800fa24:	f000 f83e 	bl	800faa4 <_free_r>
 800fa28:	4625      	mov	r5, r4
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa30:	f000 f884 	bl	800fb3c <_malloc_usable_size_r>
 800fa34:	4284      	cmp	r4, r0
 800fa36:	4607      	mov	r7, r0
 800fa38:	d802      	bhi.n	800fa40 <_realloc_r+0x34>
 800fa3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fa3e:	d812      	bhi.n	800fa66 <_realloc_r+0x5a>
 800fa40:	4621      	mov	r1, r4
 800fa42:	4640      	mov	r0, r8
 800fa44:	f7ff ff6e 	bl	800f924 <_malloc_r>
 800fa48:	4605      	mov	r5, r0
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	d0ed      	beq.n	800fa2a <_realloc_r+0x1e>
 800fa4e:	42bc      	cmp	r4, r7
 800fa50:	4622      	mov	r2, r4
 800fa52:	4631      	mov	r1, r6
 800fa54:	bf28      	it	cs
 800fa56:	463a      	movcs	r2, r7
 800fa58:	f7ff fee2 	bl	800f820 <memcpy>
 800fa5c:	4631      	mov	r1, r6
 800fa5e:	4640      	mov	r0, r8
 800fa60:	f000 f820 	bl	800faa4 <_free_r>
 800fa64:	e7e1      	b.n	800fa2a <_realloc_r+0x1e>
 800fa66:	4635      	mov	r5, r6
 800fa68:	e7df      	b.n	800fa2a <_realloc_r+0x1e>
	...

0800fa6c <_sbrk_r>:
 800fa6c:	b538      	push	{r3, r4, r5, lr}
 800fa6e:	4d06      	ldr	r5, [pc, #24]	; (800fa88 <_sbrk_r+0x1c>)
 800fa70:	2300      	movs	r3, #0
 800fa72:	4604      	mov	r4, r0
 800fa74:	4608      	mov	r0, r1
 800fa76:	602b      	str	r3, [r5, #0]
 800fa78:	f7f5 f84c 	bl	8004b14 <_sbrk>
 800fa7c:	1c43      	adds	r3, r0, #1
 800fa7e:	d102      	bne.n	800fa86 <_sbrk_r+0x1a>
 800fa80:	682b      	ldr	r3, [r5, #0]
 800fa82:	b103      	cbz	r3, 800fa86 <_sbrk_r+0x1a>
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	bd38      	pop	{r3, r4, r5, pc}
 800fa88:	24001ca4 	.word	0x24001ca4

0800fa8c <__malloc_lock>:
 800fa8c:	4801      	ldr	r0, [pc, #4]	; (800fa94 <__malloc_lock+0x8>)
 800fa8e:	f000 b85d 	b.w	800fb4c <__retarget_lock_acquire_recursive>
 800fa92:	bf00      	nop
 800fa94:	24001ca8 	.word	0x24001ca8

0800fa98 <__malloc_unlock>:
 800fa98:	4801      	ldr	r0, [pc, #4]	; (800faa0 <__malloc_unlock+0x8>)
 800fa9a:	f000 b858 	b.w	800fb4e <__retarget_lock_release_recursive>
 800fa9e:	bf00      	nop
 800faa0:	24001ca8 	.word	0x24001ca8

0800faa4 <_free_r>:
 800faa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800faa6:	2900      	cmp	r1, #0
 800faa8:	d044      	beq.n	800fb34 <_free_r+0x90>
 800faaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faae:	9001      	str	r0, [sp, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f1a1 0404 	sub.w	r4, r1, #4
 800fab6:	bfb8      	it	lt
 800fab8:	18e4      	addlt	r4, r4, r3
 800faba:	f7ff ffe7 	bl	800fa8c <__malloc_lock>
 800fabe:	4a1e      	ldr	r2, [pc, #120]	; (800fb38 <_free_r+0x94>)
 800fac0:	9801      	ldr	r0, [sp, #4]
 800fac2:	6813      	ldr	r3, [r2, #0]
 800fac4:	b933      	cbnz	r3, 800fad4 <_free_r+0x30>
 800fac6:	6063      	str	r3, [r4, #4]
 800fac8:	6014      	str	r4, [r2, #0]
 800faca:	b003      	add	sp, #12
 800facc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fad0:	f7ff bfe2 	b.w	800fa98 <__malloc_unlock>
 800fad4:	42a3      	cmp	r3, r4
 800fad6:	d908      	bls.n	800faea <_free_r+0x46>
 800fad8:	6825      	ldr	r5, [r4, #0]
 800fada:	1961      	adds	r1, r4, r5
 800fadc:	428b      	cmp	r3, r1
 800fade:	bf01      	itttt	eq
 800fae0:	6819      	ldreq	r1, [r3, #0]
 800fae2:	685b      	ldreq	r3, [r3, #4]
 800fae4:	1949      	addeq	r1, r1, r5
 800fae6:	6021      	streq	r1, [r4, #0]
 800fae8:	e7ed      	b.n	800fac6 <_free_r+0x22>
 800faea:	461a      	mov	r2, r3
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	b10b      	cbz	r3, 800faf4 <_free_r+0x50>
 800faf0:	42a3      	cmp	r3, r4
 800faf2:	d9fa      	bls.n	800faea <_free_r+0x46>
 800faf4:	6811      	ldr	r1, [r2, #0]
 800faf6:	1855      	adds	r5, r2, r1
 800faf8:	42a5      	cmp	r5, r4
 800fafa:	d10b      	bne.n	800fb14 <_free_r+0x70>
 800fafc:	6824      	ldr	r4, [r4, #0]
 800fafe:	4421      	add	r1, r4
 800fb00:	1854      	adds	r4, r2, r1
 800fb02:	42a3      	cmp	r3, r4
 800fb04:	6011      	str	r1, [r2, #0]
 800fb06:	d1e0      	bne.n	800faca <_free_r+0x26>
 800fb08:	681c      	ldr	r4, [r3, #0]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	6053      	str	r3, [r2, #4]
 800fb0e:	4421      	add	r1, r4
 800fb10:	6011      	str	r1, [r2, #0]
 800fb12:	e7da      	b.n	800faca <_free_r+0x26>
 800fb14:	d902      	bls.n	800fb1c <_free_r+0x78>
 800fb16:	230c      	movs	r3, #12
 800fb18:	6003      	str	r3, [r0, #0]
 800fb1a:	e7d6      	b.n	800faca <_free_r+0x26>
 800fb1c:	6825      	ldr	r5, [r4, #0]
 800fb1e:	1961      	adds	r1, r4, r5
 800fb20:	428b      	cmp	r3, r1
 800fb22:	bf04      	itt	eq
 800fb24:	6819      	ldreq	r1, [r3, #0]
 800fb26:	685b      	ldreq	r3, [r3, #4]
 800fb28:	6063      	str	r3, [r4, #4]
 800fb2a:	bf04      	itt	eq
 800fb2c:	1949      	addeq	r1, r1, r5
 800fb2e:	6021      	streq	r1, [r4, #0]
 800fb30:	6054      	str	r4, [r2, #4]
 800fb32:	e7ca      	b.n	800faca <_free_r+0x26>
 800fb34:	b003      	add	sp, #12
 800fb36:	bd30      	pop	{r4, r5, pc}
 800fb38:	24001c9c 	.word	0x24001c9c

0800fb3c <_malloc_usable_size_r>:
 800fb3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb40:	1f18      	subs	r0, r3, #4
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	bfbc      	itt	lt
 800fb46:	580b      	ldrlt	r3, [r1, r0]
 800fb48:	18c0      	addlt	r0, r0, r3
 800fb4a:	4770      	bx	lr

0800fb4c <__retarget_lock_acquire_recursive>:
 800fb4c:	4770      	bx	lr

0800fb4e <__retarget_lock_release_recursive>:
 800fb4e:	4770      	bx	lr

0800fb50 <_init>:
 800fb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb52:	bf00      	nop
 800fb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb56:	bc08      	pop	{r3}
 800fb58:	469e      	mov	lr, r3
 800fb5a:	4770      	bx	lr

0800fb5c <_fini>:
 800fb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb5e:	bf00      	nop
 800fb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb62:	bc08      	pop	{r3}
 800fb64:	469e      	mov	lr, r3
 800fb66:	4770      	bx	lr
