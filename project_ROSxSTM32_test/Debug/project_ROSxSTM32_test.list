
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f840  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800fb10  0800fb10  0001fb10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ffe0  0800ffe0  0001ffe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ffe8  0800ffe8  0001ffe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fff0  0800fff0  0001fff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000240  24000000  0800fff4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a78  24000240  08010234  00020240  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001cb8  08010234  00021cb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022eb4  00000000  00000000  0002026e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000394d  00000000  00000000  00043122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e0  00000000  00000000  00046a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c0  00000000  00000000  00047f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034f9b  00000000  00000000  00049310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bfe2  00000000  00000000  0007e2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153730  00000000  00000000  0009a28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ed9bd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ecc  00000000  00000000  001eda10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000240 	.word	0x24000240
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800faf8 	.word	0x0800faf8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000244 	.word	0x24000244
 800030c:	0800faf8 	.word	0x0800faf8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[1]},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[2]},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[3]}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	49c7      	ldr	r1, [pc, #796]	; (80009a8 <pidCtrl+0x328>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	440b      	add	r3, r1
 8000696:	3318      	adds	r3, #24
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000980 <pidCtrl+0x300>
 80006a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006ac:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000988 <pidCtrl+0x308>
 80006b0:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 80006b4:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8000990 <pidCtrl+0x310>
 80006b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006bc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000998 <pidCtrl+0x318>
 80006c0:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c4:	49b8      	ldr	r1, [pc, #736]	; (80009a8 <pidCtrl+0x328>)
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	440b      	add	r3, r1
 80006d2:	3328      	adds	r3, #40	; 0x28
 80006d4:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d8:	49b3      	ldr	r1, [pc, #716]	; (80009a8 <pidCtrl+0x328>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4613      	mov	r3, r2
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	440b      	add	r3, r1
 80006e6:	3320      	adds	r3, #32
 80006e8:	ed93 6b00 	vldr	d6, [r3]
 80006ec:	49ae      	ldr	r1, [pc, #696]	; (80009a8 <pidCtrl+0x328>)
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4613      	mov	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	440b      	add	r3, r1
 80006fa:	3328      	adds	r3, #40	; 0x28
 80006fc:	ed93 7b00 	vldr	d7, [r3]
 8000700:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000704:	49a8      	ldr	r1, [pc, #672]	; (80009a8 <pidCtrl+0x328>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	440b      	add	r3, r1
 8000712:	3330      	adds	r3, #48	; 0x30
 8000714:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000718:	49a3      	ldr	r1, [pc, #652]	; (80009a8 <pidCtrl+0x328>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	440b      	add	r3, r1
 8000726:	ed93 6b00 	vldr	d6, [r3]
 800072a:	499f      	ldr	r1, [pc, #636]	; (80009a8 <pidCtrl+0x328>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	440b      	add	r3, r1
 8000738:	3330      	adds	r3, #48	; 0x30
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000742:	4999      	ldr	r1, [pc, #612]	; (80009a8 <pidCtrl+0x328>)
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4613      	mov	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	1a9b      	subs	r3, r3, r2
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	440b      	add	r3, r1
 8000750:	3348      	adds	r3, #72	; 0x48
 8000752:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000756:	4994      	ldr	r1, [pc, #592]	; (80009a8 <pidCtrl+0x328>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	1a9b      	subs	r3, r3, r2
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	440b      	add	r3, r1
 8000764:	3350      	adds	r3, #80	; 0x50
 8000766:	ed93 6b00 	vldr	d6, [r3]
 800076a:	498f      	ldr	r1, [pc, #572]	; (80009a8 <pidCtrl+0x328>)
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	440b      	add	r3, r1
 8000778:	3308      	adds	r3, #8
 800077a:	ed93 5b00 	vldr	d5, [r3]
 800077e:	498a      	ldr	r1, [pc, #552]	; (80009a8 <pidCtrl+0x328>)
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	440b      	add	r3, r1
 800078c:	3338      	adds	r3, #56	; 0x38
 800078e:	ed93 7b00 	vldr	d7, [r3]
 8000792:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000796:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8000998 <pidCtrl+0x318>
 800079a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800079e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007a2:	4981      	ldr	r1, [pc, #516]	; (80009a8 <pidCtrl+0x328>)
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	440b      	add	r3, r1
 80007b0:	3350      	adds	r3, #80	; 0x50
 80007b2:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007b6:	497c      	ldr	r1, [pc, #496]	; (80009a8 <pidCtrl+0x328>)
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	440b      	add	r3, r1
 80007c4:	3310      	adds	r3, #16
 80007c6:	ed93 6b00 	vldr	d6, [r3]
 80007ca:	4977      	ldr	r1, [pc, #476]	; (80009a8 <pidCtrl+0x328>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	440b      	add	r3, r1
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	ed93 5b00 	vldr	d5, [r3]
 80007de:	4972      	ldr	r1, [pc, #456]	; (80009a8 <pidCtrl+0x328>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	440b      	add	r3, r1
 80007ec:	3338      	adds	r3, #56	; 0x38
 80007ee:	ed93 7b00 	vldr	d7, [r3]
 80007f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007fa:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000998 <pidCtrl+0x318>
 80007fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000802:	4969      	ldr	r1, [pc, #420]	; (80009a8 <pidCtrl+0x328>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	1a9b      	subs	r3, r3, r2
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	440b      	add	r3, r1
 8000810:	3358      	adds	r3, #88	; 0x58
 8000812:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 8000816:	4964      	ldr	r1, [pc, #400]	; (80009a8 <pidCtrl+0x328>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	440b      	add	r3, r1
 8000824:	3350      	adds	r3, #80	; 0x50
 8000826:	ed93 7b00 	vldr	d7, [r3]
 800082a:	eeb0 7bc7 	vabs.f64	d7, d7
 800082e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000832:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	dd1f      	ble.n	800087c <pidCtrl+0x1fc>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800083c:	495a      	ldr	r1, [pc, #360]	; (80009a8 <pidCtrl+0x328>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	1a9b      	subs	r3, r3, r2
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	440b      	add	r3, r1
 800084a:	3350      	adds	r3, #80	; 0x50
 800084c:	ed93 7b00 	vldr	d7, [r3]
 8000850:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000858:	db03      	blt.n	8000862 <pidCtrl+0x1e2>
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	4953      	ldr	r1, [pc, #332]	; (80009ac <pidCtrl+0x32c>)
 8000860:	e002      	b.n	8000868 <pidCtrl+0x1e8>
 8000862:	f04f 0000 	mov.w	r0, #0
 8000866:	4952      	ldr	r1, [pc, #328]	; (80009b0 <pidCtrl+0x330>)
 8000868:	4c4f      	ldr	r4, [pc, #316]	; (80009a8 <pidCtrl+0x328>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	4423      	add	r3, r4
 8000876:	3350      	adds	r3, #80	; 0x50
 8000878:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 800087c:	494a      	ldr	r1, [pc, #296]	; (80009a8 <pidCtrl+0x328>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4613      	mov	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	440b      	add	r3, r1
 800088a:	3348      	adds	r3, #72	; 0x48
 800088c:	ed93 6b00 	vldr	d6, [r3]
 8000890:	4945      	ldr	r1, [pc, #276]	; (80009a8 <pidCtrl+0x328>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4613      	mov	r3, r2
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	1a9b      	subs	r3, r3, r2
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	440b      	add	r3, r1
 800089e:	3350      	adds	r3, #80	; 0x50
 80008a0:	ed93 7b00 	vldr	d7, [r3]
 80008a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008a8:	493f      	ldr	r1, [pc, #252]	; (80009a8 <pidCtrl+0x328>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	440b      	add	r3, r1
 80008b6:	3358      	adds	r3, #88	; 0x58
 80008b8:	ed93 7b00 	vldr	d7, [r3]
 80008bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008c0:	4939      	ldr	r1, [pc, #228]	; (80009a8 <pidCtrl+0x328>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	1a9b      	subs	r3, r3, r2
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	440b      	add	r3, r1
 80008ce:	3340      	adds	r3, #64	; 0x40
 80008d0:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008d4:	4934      	ldr	r1, [pc, #208]	; (80009a8 <pidCtrl+0x328>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	1a9b      	subs	r3, r3, r2
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	440b      	add	r3, r1
 80008e2:	3330      	adds	r3, #48	; 0x30
 80008e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008e8:	4c2f      	ldr	r4, [pc, #188]	; (80009a8 <pidCtrl+0x328>)
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4613      	mov	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4423      	add	r3, r4
 80008f6:	3338      	adds	r3, #56	; 0x38
 80008f8:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80008fc:	492a      	ldr	r1, [pc, #168]	; (80009a8 <pidCtrl+0x328>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4613      	mov	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	440b      	add	r3, r1
 800090a:	3340      	adds	r3, #64	; 0x40
 800090c:	ed93 7b00 	vldr	d7, [r3]
 8000910:	eeb0 7bc7 	vabs.f64	d7, d7
 8000914:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80009a0 <pidCtrl+0x320>
 8000918:	ee27 7b06 	vmul.f64	d7, d7, d6
 800091c:	4922      	ldr	r1, [pc, #136]	; (80009a8 <pidCtrl+0x328>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4613      	mov	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	440b      	add	r3, r1
 800092a:	3360      	adds	r3, #96	; 0x60
 800092c:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <pidCtrl+0x328>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4613      	mov	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	440b      	add	r3, r1
 800093e:	3360      	adds	r3, #96	; 0x60
 8000940:	ed93 7b00 	vldr	d7, [r3]
 8000944:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80009a0 <pidCtrl+0x320>
 8000948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000950:	dc00      	bgt.n	8000954 <pidCtrl+0x2d4>
}
 8000952:	e00d      	b.n	8000970 <pidCtrl+0x2f0>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000954:	4914      	ldr	r1, [pc, #80]	; (80009a8 <pidCtrl+0x328>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	440b      	add	r3, r1
 8000962:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8000966:	a30e      	add	r3, pc, #56	; (adr r3, 80009a0 <pidCtrl+0x320>)
 8000968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bc90      	pop	{r4, r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	f3af 8000 	nop.w
 8000980:	54cadf99 	.word	0x54cadf99
 8000984:	400921fb 	.word	0x400921fb
 8000988:	b6ae7d56 	.word	0xb6ae7d56
 800098c:	3fb97f62 	.word	0x3fb97f62
 8000990:	cccccccd 	.word	0xcccccccd
 8000994:	40e4cccc 	.word	0x40e4cccc
 8000998:	00000000 	.word	0x00000000
 800099c:	408f4000 	.word	0x408f4000
 80009a0:	00000000 	.word	0x00000000
 80009a4:	40b06800 	.word	0x40b06800
 80009a8:	24000000 	.word	0x24000000
 80009ac:	3ff00000 	.word	0x3ff00000
 80009b0:	bff00000 	.word	0xbff00000

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f004 fb7e 	bl	80050b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f862 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 fc68 	bl	8001294 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c4:	f000 fc3e 	bl	8001244 <MX_DMA_Init>
  MX_USART10_UART_Init();
 80009c8:	f000 fbf0 	bl	80011ac <MX_USART10_UART_Init>
  MX_TIM3_Init();
 80009cc:	f000 f91a 	bl	8000c04 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009d0:	f000 f96e 	bl	8000cb0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009d4:	f000 f9c2 	bl	8000d5c <MX_TIM5_Init>
  MX_TIM8_Init();
 80009d8:	f000 fa0e 	bl	8000df8 <MX_TIM8_Init>
  MX_TIM15_Init();
 80009dc:	f000 faa8 	bl	8000f30 <MX_TIM15_Init>
  MX_TIM23_Init();
 80009e0:	f000 fb38 	bl	8001054 <MX_TIM23_Init>
  MX_TIM24_Init();
 80009e4:	f000 fb8c 	bl	8001100 <MX_TIM24_Init>
  MX_TIM2_Init();
 80009e8:	f000 f8be 	bl	8000b68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 80009ec:	481d      	ldr	r0, [pc, #116]	; (8000a64 <main+0xb0>)
 80009ee:	f00a faf7 	bl	800afe0 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <main+0xb4>)
 80009f4:	f00a faf4 	bl	800afe0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80009f8:	2108      	movs	r1, #8
 80009fa:	481c      	ldr	r0, [pc, #112]	; (8000a6c <main+0xb8>)
 80009fc:	f00a fbce 	bl	800b19c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000a00:	210c      	movs	r1, #12
 8000a02:	481a      	ldr	r0, [pc, #104]	; (8000a6c <main+0xb8>)
 8000a04:	f00a fbca 	bl	800b19c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4819      	ldr	r0, [pc, #100]	; (8000a70 <main+0xbc>)
 8000a0c:	f00a fbc6 	bl	800b19c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000a10:	2104      	movs	r1, #4
 8000a12:	4817      	ldr	r0, [pc, #92]	; (8000a70 <main+0xbc>)
 8000a14:	f00a fbc2 	bl	800b19c <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4816      	ldr	r0, [pc, #88]	; (8000a74 <main+0xc0>)
 8000a1c:	f00a fd80 	bl	800b520 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 8000a20:	2104      	movs	r1, #4
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <main+0xc0>)
 8000a24:	f00a fd7c 	bl	800b520 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <main+0xc4>)
 8000a2c:	f00a fd78 	bl	800b520 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <main+0xc4>)
 8000a34:	f00a fd74 	bl	800b520 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <main+0xc8>)
 8000a3c:	f00a fd70 	bl	800b520 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000a40:	2104      	movs	r1, #4
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <main+0xc8>)
 8000a44:	f00a fd6c 	bl	800b520 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <main+0xcc>)
 8000a4c:	f00a fd68 	bl	800b520 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 8000a50:	2104      	movs	r1, #4
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <main+0xcc>)
 8000a54:	f00a fd64 	bl	800b520 <HAL_TIM_Encoder_Start>


    setup();
 8000a58:	f002 fc22 	bl	80032a0 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 8000a5c:	f002 fc50 	bl	8003300 <loop>
 8000a60:	e7fc      	b.n	8000a5c <main+0xa8>
 8000a62:	bf00      	nop
 8000a64:	24000340 	.word	0x24000340
 8000a68:	2400025c 	.word	0x2400025c
 8000a6c:	2400038c 	.word	0x2400038c
 8000a70:	240003d8 	.word	0x240003d8
 8000a74:	24000470 	.word	0x24000470
 8000a78:	240002a8 	.word	0x240002a8
 8000a7c:	240002f4 	.word	0x240002f4
 8000a80:	24000424 	.word	0x24000424

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f00e fea6 	bl	800f7e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00e fea0 	bl	800f7e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f007 ffb3 	bl	8008a10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab6:	4a2b      	ldr	r2, [pc, #172]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aca:	bf00      	nop
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad8:	d1f8      	bne.n	8000acc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000af2:	2315      	movs	r3, #21
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 ffb6 	bl	8008a84 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b1e:	f000 fc79 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	233f      	movs	r3, #63	; 0x3f
 8000b24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2303      	movs	r3, #3
 8000b28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000b2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b30:	2308      	movs	r3, #8
 8000b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b34:	2340      	movs	r3, #64	; 0x40
 8000b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b38:	2340      	movs	r3, #64	; 0x40
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f008 fb48 	bl	80091e0 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000b56:	f000 fc5d 	bl	8001414 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3770      	adds	r7, #112	; 0x70
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	58024800 	.word	0x58024800

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b90:	2253      	movs	r2, #83	; 0x53
 8000b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b9c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bae:	4814      	ldr	r0, [pc, #80]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bb0:	f00a f9be 	bl	800af30 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bba:	f000 fc2b 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bcc:	f00a ff6a 	bl	800baa4 <HAL_TIM_ConfigClockSource>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bd6:	f000 fc1d 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000be8:	f00b fcbc 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bf2:	f000 fc0f 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2400025c 	.word	0x2400025c

08000c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2224      	movs	r2, #36	; 0x24
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00e fde6 	bl	800f7e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c24:	4a21      	ldr	r2, [pc, #132]	; (8000cac <MX_TIM3_Init+0xa8>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c60:	2301      	movs	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c74:	f00a fbae 	bl	800b3d4 <HAL_TIM_Encoder_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c7e:	f000 fbc9 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c90:	f00b fc68 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c9a:	f000 fbbb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	240002a8 	.word	0x240002a8
 8000cac:	40000400 	.word	0x40000400

08000cb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2224      	movs	r2, #36	; 0x24
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00e fd90 	bl	800f7e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000d20:	f00a fb58 	bl	800b3d4 <HAL_TIM_Encoder_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d2a:	f000 fb73 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000d3c:	f00b fc12 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d46:	f000 fb65 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3730      	adds	r7, #48	; 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	240002f4 	.word	0x240002f4
 8000d58:	40000800 	.word	0x40000800

08000d5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <MX_TIM5_Init+0x98>)
 8000d7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d82:	2253      	movs	r2, #83	; 0x53
 8000d84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000da2:	f00a f8c5 	bl	800af30 <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000dac:	f000 fb32 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000dbe:	f00a fe71 	bl	800baa4 <HAL_TIM_ConfigClockSource>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000dc8:	f000 fb24 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000dda:	f00b fbc3 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 fb16 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000340 	.word	0x24000340
 8000df4:	40000c00 	.word	0x40000c00

08000df8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b098      	sub	sp, #96	; 0x60
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2234      	movs	r2, #52	; 0x34
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00e fcdd 	bl	800f7e4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e2c:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <MX_TIM8_Init+0x134>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4199;
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e3e:	f241 0267 	movw	r2, #4199	; 0x1067
 8000e42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e56:	4834      	ldr	r0, [pc, #208]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e58:	f00a f948 	bl	800b0ec <HAL_TIM_PWM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f000 fad7 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e76:	4619      	mov	r1, r3
 8000e78:	482b      	ldr	r0, [pc, #172]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e7a:	f00b fb73 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e84:	f000 fac6 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e94:	2300      	movs	r3, #0
 8000e96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481e      	ldr	r0, [pc, #120]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000eae:	f00a fce5 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000eb8:	f000 faac 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ebc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4818      	ldr	r0, [pc, #96]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000ec6:	f00a fcd9 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000ed0:	f000 faa0 	bl	8001414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000f0a:	f00b fbc7 	bl	800c69c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000f14:	f000 fa7e 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000f1a:	f003 fbbd 	bl	8004698 <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3760      	adds	r7, #96	; 0x60
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2400038c 	.word	0x2400038c
 8000f2c:	40010400 	.word	0x40010400

08000f30 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b098      	sub	sp, #96	; 0x60
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2234      	movs	r2, #52	; 0x34
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00e fc41 	bl	800f7e4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f64:	4a3a      	ldr	r2, [pc, #232]	; (8001050 <MX_TIM15_Init+0x120>)
 8000f66:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f76:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000f7a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b33      	ldr	r3, [pc, #204]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f8e:	482f      	ldr	r0, [pc, #188]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f90:	f00a f8ac 	bl	800b0ec <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 fa3b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000faa:	4619      	mov	r1, r3
 8000fac:	4827      	ldr	r0, [pc, #156]	; (800104c <MX_TIM15_Init+0x11c>)
 8000fae:	f00b fad9 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 fa2c 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbc:	2360      	movs	r3, #96	; 0x60
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481a      	ldr	r0, [pc, #104]	; (800104c <MX_TIM15_Init+0x11c>)
 8000fe2:	f00a fc4b 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000fec:	f000 fa12 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4814      	ldr	r0, [pc, #80]	; (800104c <MX_TIM15_Init+0x11c>)
 8000ffa:	f00a fc3f 	bl	800b87c <HAL_TIM_PWM_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001004:	f000 fa06 	bl	8001414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <MX_TIM15_Init+0x11c>)
 8001030:	f00b fb34 	bl	800c69c <HAL_TIMEx_ConfigBreakDeadTime>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800103a:	f000 f9eb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <MX_TIM15_Init+0x11c>)
 8001040:	f003 fb2a 	bl	8004698 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3760      	adds	r7, #96	; 0x60
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	240003d8 	.word	0x240003d8
 8001050:	40014000 	.word	0x40014000

08001054 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f00e fbbe 	bl	800f7e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <MX_TIM23_Init+0xa8>)
 8001076:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_TIM23_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001086:	f04f 32ff 	mov.w	r2, #4294967295
 800108a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_TIM23_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001098:	2303      	movs	r3, #3
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_TIM23_Init+0xa4>)
 80010c4:	f00a f986 	bl	800b3d4 <HAL_TIM_Encoder_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 80010ce:	f000 f9a1 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_TIM23_Init+0xa4>)
 80010e0:	f00b fa40 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80010ea:	f000 f993 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3730      	adds	r7, #48	; 0x30
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	24000424 	.word	0x24000424
 80010fc:	4000e000 	.word	0x4000e000

08001100 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2224      	movs	r2, #36	; 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f00e fb68 	bl	800f7e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <MX_TIM24_Init+0xa8>)
 8001122:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001132:	f04f 32ff 	mov.w	r2, #4294967295
 8001136:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001144:	2303      	movs	r3, #3
 8001146:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001170:	f00a f930 	bl	800b3d4 <HAL_TIM_Encoder_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 800117a:	f000 f94b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800118c:	f00b f9ea 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8001196:	f000 f93d 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3730      	adds	r7, #48	; 0x30
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000470 	.word	0x24000470
 80011a8:	4000e400 	.word	0x4000e400

080011ac <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_USART10_UART_Init+0x94>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 57600;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011bc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011f6:	f00b fb0f 	bl	800c818 <HAL_UART_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 f908 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_USART10_UART_Init+0x90>)
 8001208:	f00d fb88 	bl	800e91c <HAL_UARTEx_SetTxFifoThreshold>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8001212:	f000 f8ff 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <MX_USART10_UART_Init+0x90>)
 800121a:	f00d fbbd 	bl	800e998 <HAL_UARTEx_SetRxFifoThreshold>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8001224:	f000 f8f6 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_USART10_UART_Init+0x90>)
 800122a:	f00d fb3e 	bl	800e8aa <HAL_UARTEx_DisableFifoMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 f8ee 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	240004bc 	.word	0x240004bc
 8001240:	40011c00 	.word	0x40011c00

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_DMA_Init+0x4c>)
 800124c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_DMA_Init+0x4c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_DMA_Init+0x4c>)
 800125c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	200b      	movs	r0, #11
 800126e:	f004 f8b4 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001272:	200b      	movs	r0, #11
 8001274:	f004 f8cb 	bl	800540e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	200c      	movs	r0, #12
 800127e:	f004 f8ac 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001282:	200c      	movs	r0, #12
 8001284:	f004 f8c3 	bl	800540e <HAL_NVIC_EnableIRQ>

}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	58024400 	.word	0x58024400

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <MX_GPIO_Init+0x170>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <MX_GPIO_Init+0x170>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <MX_GPIO_Init+0x170>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <MX_GPIO_Init+0x170>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <MX_GPIO_Init+0x170>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <MX_GPIO_Init+0x170>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <MX_GPIO_Init+0x170>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a3e      	ldr	r2, [pc, #248]	; (8001404 <MX_GPIO_Init+0x170>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <MX_GPIO_Init+0x170>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <MX_GPIO_Init+0x170>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a36      	ldr	r2, [pc, #216]	; (8001404 <MX_GPIO_Init+0x170>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <MX_GPIO_Init+0x170>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <MX_GPIO_Init+0x170>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <MX_GPIO_Init+0x170>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <MX_GPIO_Init+0x170>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_GPIO_Init+0x170>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <MX_GPIO_Init+0x170>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <MX_GPIO_Init+0x170>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800137c:	2200      	movs	r2, #0
 800137e:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <MX_GPIO_Init+0x174>)
 8001384:	f007 fb06 	bl	8008994 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_GPIO_Init+0x178>)
 8001390:	f007 fb00 	bl	8008994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001394:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001398:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4816      	ldr	r0, [pc, #88]	; (8001408 <MX_GPIO_Init+0x174>)
 80013ae:	f007 f847 	bl	8008440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_GPIO_Init+0x17c>)
 80013ca:	f007 f839 	bl	8008440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <MX_GPIO_Init+0x178>)
 80013e8:	f007 f82a 	bl	8008440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2028      	movs	r0, #40	; 0x28
 80013f2:	f003 fff2 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013f6:	2028      	movs	r0, #40	; 0x28
 80013f8:	f004 f809 	bl	800540e <HAL_NVIC_EnableIRQ>

}
 80013fc:	bf00      	nop
 80013fe:	3730      	adds	r7, #48	; 0x30
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58024400 	.word	0x58024400
 8001408:	58021000 	.word	0x58021000
 800140c:	58020400 	.word	0x58020400
 8001410:	58020800 	.word	0x58020800

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>

0800141e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <_ZN3ros3MsgC1Ev+0x1c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	0800fdb8 	.word	0x0800fdb8

08001460 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
      data()
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ffe8 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ffcf 	bl	800141e <_ZN3ros4TimeC1Ev>
    {
    }
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800fda0 	.word	0x0800fda0

08001490 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6859      	ldr	r1, [r3, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	0a19      	lsrs	r1, r3, #8
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	0c19      	lsrs	r1, r3, #16
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3302      	adds	r3, #2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	b2ca      	uxtb	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	0e19      	lsrs	r1, r3, #24
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3303      	adds	r3, #3
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3304      	adds	r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6899      	ldr	r1, [r3, #8]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	0a19      	lsrs	r1, r3, #8
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3301      	adds	r3, #1
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	4413      	add	r3, r2
 8001504:	b2ca      	uxtb	r2, r1
 8001506:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	0c19      	lsrs	r1, r3, #16
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3302      	adds	r3, #2
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	0e19      	lsrs	r1, r3, #24
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3303      	adds	r3, #3
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4413      	add	r3, r2
 8001528:	b2ca      	uxtb	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3304      	adds	r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
      return offset;
 8001532:	68fb      	ldr	r3, [r7, #12]
    }
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	440b      	add	r3, r1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3302      	adds	r3, #2
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3303      	adds	r3, #3
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	440b      	add	r3, r1
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	061b      	lsls	r3, r3, #24
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	6839      	ldr	r1, [r7, #0]
 80015bc:	440b      	add	r3, r1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3302      	adds	r3, #2
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	440b      	add	r3, r1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	041b      	lsls	r3, r3, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3303      	adds	r3, #3
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	440b      	add	r3, r1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3304      	adds	r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]
     return offset;
 80015fa:	68fb      	ldr	r3, [r7, #12]
    }
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	0800fb10 	.word	0x0800fb10

08001624 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	0800fb24 	.word	0x0800fb24

08001640 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fef8 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	809a      	strh	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    {
    }
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0800fd88 	.word	0x0800fd88
 8001684:	0800fb48 	.word	0x0800fb48

08001688 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	8899      	ldrh	r1, [r3, #4]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	b2ca      	uxtb	r2, r1
 80016a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	889b      	ldrh	r3, [r3, #4]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b299      	uxth	r1, r3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3301      	adds	r3, #1
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	3302      	adds	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe24 	bl	8000310 <strlen>
 80016c8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	69b9      	ldr	r1, [r7, #24]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fe20 	bl	8003318 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3304      	adds	r3, #4
 80016dc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	18d0      	adds	r0, r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4619      	mov	r1, r3
 80016ec:	f00e f86c 	bl	800f7c8 <memcpy>
      offset += length_topic_name;
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4413      	add	r3, r2
 80016f6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fe07 	bl	8000310 <strlen>
 8001702:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	6979      	ldr	r1, [r7, #20]
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fe03 	bl	8003318 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	18d0      	adds	r0, r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4619      	mov	r1, r3
 8001726:	f00e f84f 	bl	800f7c8 <memcpy>
      offset += length_message_type;
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	4413      	add	r3, r2
 8001730:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fdea 	bl	8000310 <strlen>
 800173c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fde6 	bl	8003318 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	3304      	adds	r3, #4
 8001750:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	18d0      	adds	r0, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4619      	mov	r1, r3
 8001760:	f00e f832 	bl	800f7c8 <memcpy>
      offset += length_md5sum;
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4413      	add	r3, r2
 800176a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4413      	add	r3, r2
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	0a19      	lsrs	r1, r3, #8
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0c19      	lsrs	r1, r3, #16
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3302      	adds	r3, #2
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0e19      	lsrs	r1, r3, #24
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3303      	adds	r3, #3
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	61fb      	str	r3, [r7, #28]
      return offset;
 80017b4:	69fb      	ldr	r3, [r7, #28]
    }
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017be:	b580      	push	{r7, lr}
 80017c0:	b08a      	sub	sp, #40	; 0x28
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	889b      	ldrh	r3, [r3, #4]
 80017de:	b21a      	sxth	r2, r3
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	3301      	adds	r3, #1
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	440b      	add	r3, r1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3302      	adds	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	441a      	add	r2, r3
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fda2 	bl	8003354 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3304      	adds	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	4413      	add	r3, r2
 8001820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	441a      	add	r2, r3
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3b01      	subs	r3, #1
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	440b      	add	r3, r1
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3301      	adds	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	e7ec      	b.n	800181a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4413      	add	r3, r2
 8001846:	3b01      	subs	r3, #1
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	4413      	add	r3, r2
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	3b01      	subs	r3, #1
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	441a      	add	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	441a      	add	r2, r3
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fd6f 	bl	8003354 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	3304      	adds	r3, #4
 800187a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	6a3a      	ldr	r2, [r7, #32]
 8001888:	429a      	cmp	r2, r3
 800188a:	d20c      	bcs.n	80018a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	441a      	add	r2, r3
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	3b01      	subs	r3, #1
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	440b      	add	r3, r1
 800189a:	7812      	ldrb	r2, [r2, #0]
 800189c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	3301      	adds	r3, #1
 80018a2:	623b      	str	r3, [r7, #32]
 80018a4:	e7ec      	b.n	8001880 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	3b01      	subs	r3, #1
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	441a      	add	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4413      	add	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	441a      	add	r2, r3
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 fd3c 	bl	8003354 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	3304      	adds	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d20c      	bcs.n	800190c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	441a      	add	r2, r3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	440b      	add	r3, r1
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3301      	adds	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e7ec      	b.n	80018e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4413      	add	r3, r2
 8001912:	3b01      	subs	r3, #1
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	3b01      	subs	r3, #1
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	441a      	add	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	440a      	add	r2, r1
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	3301      	adds	r3, #1
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	440b      	add	r3, r1
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	4313      	orrs	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3302      	adds	r3, #2
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	440b      	add	r3, r1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	4313      	orrs	r3, r2
 8001964:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	3303      	adds	r3, #3
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	440b      	add	r3, r1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	061b      	lsls	r3, r3, #24
 8001974:	4313      	orrs	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	3304      	adds	r3, #4
 8001982:	61bb      	str	r3, [r7, #24]
     return offset;
 8001984:	69bb      	ldr	r3, [r7, #24]
    }
 8001986:	4618      	mov	r0, r3
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	0800fb4c 	.word	0x0800fb4c

080019ac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	0800fb68 	.word	0x0800fb68

080019c8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fd34 	bl	8001440 <_ZN3ros3MsgC1Ev>
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	711a      	strb	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80019e8:	609a      	str	r2, [r3, #8]
    {
    }
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	0800fd70 	.word	0x0800fd70
 80019f8:	0800fb48 	.word	0x0800fb48

080019fc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	7912      	ldrb	r2, [r2, #4]
 8001a14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fc75 	bl	8000310 <strlen>
 8001a26:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fc71 	bl	8003318 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	18d0      	adds	r0, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f00d febd 	bl	800f7c8 <memcpy>
      offset += length_msg;
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a56:	68fb      	ldr	r3, [r7, #12]
    }
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	441a      	add	r2, r3
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fc61 	bl	8003354 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	3304      	adds	r3, #4
 8001a96:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d20c      	bcs.n	8001ac2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	441a      	add	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e7ec      	b.n	8001a9c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	441a      	add	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
     return offset;
 8001ae6:	693b      	ldr	r3, [r7, #16]
    }
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	0800fb8c 	.word	0x0800fb8c

08001b0c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	0800fba0 	.word	0x0800fba0

08001b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fc84 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	0800fd58 	.word	0x0800fd58

08001b70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	b2ca      	uxtb	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0a19      	lsrs	r1, r3, #8
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0c19      	lsrs	r1, r3, #16
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	b2ca      	uxtb	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	0e19      	lsrs	r1, r3, #24
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3303      	adds	r3, #3
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d22b      	bcs.n	8001c2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	0a19      	lsrs	r1, r3, #8
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2ca      	uxtb	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	0c19      	lsrs	r1, r3, #16
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	3302      	adds	r3, #2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	0e19      	lsrs	r1, r3, #24
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3303      	adds	r3, #3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	3304      	adds	r3, #4
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	e7ce      	b.n	8001bcc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6919      	ldr	r1, [r3, #16]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	b2ca      	uxtb	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	0a19      	lsrs	r1, r3, #8
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	0c19      	lsrs	r1, r3, #16
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3302      	adds	r3, #2
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2ca      	uxtb	r2, r1
 8001c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	0e19      	lsrs	r1, r3, #24
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3303      	adds	r3, #3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3304      	adds	r3, #4
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d22b      	bcs.n	8001cde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b2ca      	uxtb	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	0a19      	lsrs	r1, r3, #8
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0c19      	lsrs	r1, r3, #16
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b2ca      	uxtb	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	0e19      	lsrs	r1, r3, #24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	e7ce      	b.n	8001c7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69d9      	ldr	r1, [r3, #28]
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b2ca      	uxtb	r2, r1
 8001cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	0a19      	lsrs	r1, r3, #8
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	0c19      	lsrs	r1, r3, #16
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	3302      	adds	r3, #2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	0e19      	lsrs	r1, r3, #24
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3303      	adds	r3, #3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3304      	adds	r3, #4
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d228      	bcs.n	8001d88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fae4 	bl	8000310 <strlen>
 8001d48:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fae0 	bl	8003318 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	18d0      	adds	r0, r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4619      	mov	r1, r3
 8001d74:	f00d fd28 	bl	800f7c8 <memcpy>
      offset += length_stringsi;
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	e7d1      	b.n	8001d2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b08e      	sub	sp, #56	; 0x38
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	3301      	adds	r3, #1
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	6a3a      	ldr	r2, [r7, #32]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	6a3a      	ldr	r2, [r7, #32]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	6a3a      	ldr	r2, [r7, #32]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	3304      	adds	r3, #4
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	6a3a      	ldr	r2, [r7, #32]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d90a      	bls.n	8001e06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f00d fcfa 	bl	800f7f4 <realloc>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a3a      	ldr	r2, [r7, #32]
 8001e0a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d236      	bcs.n	8001e88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	440a      	add	r2, r1
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	3301      	adds	r3, #1
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	440b      	add	r3, r1
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	3302      	adds	r3, #2
 8001e44:	6839      	ldr	r1, [r7, #0]
 8001e46:	440b      	add	r3, r1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	3303      	adds	r3, #3
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	440b      	add	r3, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e82:	3301      	adds	r3, #1
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
 8001e86:	e7c3      	b.n	8001e10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	3301      	adds	r3, #1
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb8:	3303      	adds	r3, #3
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	3304      	adds	r3, #4
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d90a      	bls.n	8001eee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f00d fc86 	bl	800f7f4 <realloc>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d236      	bcs.n	8001f70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	440a      	add	r2, r1
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	3301      	adds	r3, #1
 8001f1a:	6839      	ldr	r1, [r7, #0]
 8001f1c:	440b      	add	r3, r1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	440b      	add	r3, r1
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	041b      	lsls	r3, r3, #16
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	440b      	add	r3, r1
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	3304      	adds	r3, #4
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	3214      	adds	r2, #20
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6e:	e7c3      	b.n	8001ef8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	3302      	adds	r3, #2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d90a      	bls.n	8001fd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f00d fc12 	bl	800f7f4 <realloc>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d23f      	bcs.n	800206a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	441a      	add	r2, r3
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 f9ac 	bl	8003354 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffe:	3304      	adds	r3, #4
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200e:	429a      	cmp	r2, r3
 8002010:	d20c      	bcs.n	800202c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	441a      	add	r2, r3
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3b01      	subs	r3, #1
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	440b      	add	r3, r1
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	3301      	adds	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e7ec      	b.n	8002006 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800202c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	3b01      	subs	r3, #1
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	3b01      	subs	r3, #1
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	441a      	add	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	3220      	adds	r2, #32
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	3301      	adds	r3, #1
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
 8002068:	e7ba      	b.n	8001fe0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800206c:	4618      	mov	r0, r3
 800206e:	3738      	adds	r7, #56	; 0x38
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	0800fcac 	.word	0x0800fcac

08002090 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0800fbc4 	.word	0x0800fbc4

080020ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68d8      	ldr	r0, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6891      	ldr	r1, [r2, #8]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4798      	blx	r3
 80020f8:	4603      	mov	r3, r0
  };
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
  }
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a42      	ldr	r2, [pc, #264]	; (8002238 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d068      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a40      	ldr	r2, [pc, #256]	; (800223c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d061      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d05a      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d053      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d04c      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a36      	ldr	r2, [pc, #216]	; (800224c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d045      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a33      	ldr	r2, [pc, #204]	; (8002250 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d03e      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d037      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d030      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2c      	ldr	r2, [pc, #176]	; (800225c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d029      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a27      	ldr	r2, [pc, #156]	; (8002264 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d01b      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a24      	ldr	r2, [pc, #144]	; (8002268 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d014      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a22      	ldr	r2, [pc, #136]	; (800226c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d006      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d109      	bne.n	8002218 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002216:	e008      	b.n	800222a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40020010 	.word	0x40020010
 800223c:	40020028 	.word	0x40020028
 8002240:	40020040 	.word	0x40020040
 8002244:	40020058 	.word	0x40020058
 8002248:	40020070 	.word	0x40020070
 800224c:	40020088 	.word	0x40020088
 8002250:	400200a0 	.word	0x400200a0
 8002254:	400200b8 	.word	0x400200b8
 8002258:	40020410 	.word	0x40020410
 800225c:	40020428 	.word	0x40020428
 8002260:	40020440 	.word	0x40020440
 8002264:	40020458 	.word	0x40020458
 8002268:	40020470 	.word	0x40020470
 800226c:	40020488 	.word	0x40020488
 8002270:	400204a0 	.word	0x400204a0
 8002274:	400204b8 	.word	0x400204b8

08002278 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	461a      	mov	r2, r3
 8002296:	2300      	movs	r3, #0
 8002298:	6093      	str	r3, [r2, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	461a      	mov	r2, r3
 80022a2:	2300      	movs	r3, #0
 80022a4:	60d3      	str	r3, [r2, #12]
    }
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	240004bc 	.word	0x240004bc

080022b8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f804 	bl	80022ce <_ZN13STM32Hardware10reset_rbufEv>
    }
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022e2:	4619      	mov	r1, r3
 80022e4:	f00a fbb6 	bl	800ca54 <HAL_UART_Receive_DMA>
    }
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff09 	bl	800211c <_ZN13STM32Hardware10getRdmaIndEv>
 800230a:	4603      	mov	r3, r0
 800230c:	429c      	cmp	r4, r3
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002320:	1c59      	adds	r1, r3, #1
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002336:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002340:	68fb      	ldr	r3, [r7, #12]
    }
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
	...

0800234c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235c:	2b20      	cmp	r3, #32
 800235e:	d108      	bne.n	8002372 <_ZN13STM32Hardware5flushEv+0x26>
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f083 0301 	eor.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <_ZN13STM32Hardware5flushEv+0x26>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <_ZN13STM32Hardware5flushEv+0x28>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d049      	beq.n	800240c <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	d039      	beq.n	8002406 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d20c      	bcs.n	80023c0 <_ZN13STM32Hardware5flushEv+0x74>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	e007      	b.n	80023d0 <_ZN13STM32Hardware5flushEv+0x84>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	89fa      	ldrh	r2, [r7, #14]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f00a faa1 	bl	800c930 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	4413      	add	r3, r2
 80023fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002404:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002406:	4b03      	ldr	r3, [pc, #12]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
      }
    }
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2400063c 	.word	0x2400063c

08002418 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
      int n = length;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242e:	bfa8      	it	ge
 8002430:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002434:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4293      	cmp	r3, r2
 8002446:	bf28      	it	cs
 8002448:	4613      	movcs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	4618      	mov	r0, r3
 8002462:	f00d f9b1 	bl	800f7c8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4413      	add	r3, r2
 8002472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	429a      	cmp	r2, r3
 8002484:	d00b      	beq.n	800249e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f603 0008 	addw	r0, r3, #2056	; 0x808
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	18d1      	adds	r1, r2, r3
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	461a      	mov	r2, r3
 800249a:	f00d f995 	bl	800f7c8 <memcpy>
      }

      flush();
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff54 	bl	800234c <_ZN13STM32Hardware5flushEv>
    }
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	f002 fe86 	bl	80051c4 <HAL_GetTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ffb6 	bl	8001440 <_ZN3ros3MsgC1Ev>
 80024d4:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	0800fd14 	.word	0x0800fd14

08002514 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002514:	b480      	push	{r7}
 8002516:	b08b      	sub	sp, #44	; 0x2c
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002528:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800252c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002532:	6838      	ldr	r0, [r7, #0]
 8002534:	4401      	add	r1, r0
 8002536:	b2d3      	uxtb	r3, r2
 8002538:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800253a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	0a02      	lsrs	r2, r0, #8
 8002548:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800254c:	0a0b      	lsrs	r3, r1, #8
 800254e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002550:	3101      	adds	r1, #1
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	4401      	add	r1, r0
 8002556:	b2d3      	uxtb	r3, r2
 8002558:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800255a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	0c02      	lsrs	r2, r0, #16
 8002568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800256c:	0c0b      	lsrs	r3, r1, #16
 800256e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002570:	3102      	adds	r1, #2
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	4401      	add	r1, r0
 8002576:	b2d3      	uxtb	r3, r2
 8002578:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800257a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	0e02      	lsrs	r2, r0, #24
 8002588:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800258c:	0e0b      	lsrs	r3, r1, #24
 800258e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002590:	3103      	adds	r1, #3
 8002592:	6838      	ldr	r0, [r7, #0]
 8002594:	4401      	add	r1, r0
 8002596:	b2d3      	uxtb	r3, r2
 8002598:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800259a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	000a      	movs	r2, r1
 80025a8:	2300      	movs	r3, #0
 80025aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ac:	3104      	adds	r1, #4
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	4401      	add	r1, r0
 80025b2:	b2d3      	uxtb	r3, r2
 80025b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80025b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	0a0a      	lsrs	r2, r1, #8
 80025c4:	2300      	movs	r3, #0
 80025c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c8:	3105      	adds	r1, #5
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	4401      	add	r1, r0
 80025ce:	b2d3      	uxtb	r3, r2
 80025d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80025d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	0c0a      	lsrs	r2, r1, #16
 80025e0:	2300      	movs	r3, #0
 80025e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e4:	3106      	adds	r1, #6
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	4401      	add	r1, r0
 80025ea:	b2d3      	uxtb	r3, r2
 80025ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80025ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	0e0a      	lsrs	r2, r1, #24
 80025fc:	2300      	movs	r3, #0
 80025fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002600:	3107      	adds	r1, #7
 8002602:	6838      	ldr	r0, [r7, #0]
 8002604:	4401      	add	r1, r0
 8002606:	b2d3      	uxtb	r3, r2
 8002608:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	3308      	adds	r3, #8
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002616:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800261a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800261e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002620:	6838      	ldr	r0, [r7, #0]
 8002622:	4401      	add	r1, r0
 8002624:	b2d3      	uxtb	r3, r2
 8002626:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002628:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	0a02      	lsrs	r2, r0, #8
 8002636:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800263a:	0a0b      	lsrs	r3, r1, #8
 800263c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263e:	3101      	adds	r1, #1
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	4401      	add	r1, r0
 8002644:	b2d3      	uxtb	r3, r2
 8002646:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002648:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	0c02      	lsrs	r2, r0, #16
 8002656:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800265a:	0c0b      	lsrs	r3, r1, #16
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	3102      	adds	r1, #2
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	4401      	add	r1, r0
 8002664:	b2d3      	uxtb	r3, r2
 8002666:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002668:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	0e02      	lsrs	r2, r0, #24
 8002676:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800267a:	0e0b      	lsrs	r3, r1, #24
 800267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267e:	3103      	adds	r1, #3
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	4401      	add	r1, r0
 8002684:	b2d3      	uxtb	r3, r2
 8002686:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002688:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	000a      	movs	r2, r1
 8002696:	2300      	movs	r3, #0
 8002698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269a:	3104      	adds	r1, #4
 800269c:	6838      	ldr	r0, [r7, #0]
 800269e:	4401      	add	r1, r0
 80026a0:	b2d3      	uxtb	r3, r2
 80026a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80026a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	0a0a      	lsrs	r2, r1, #8
 80026b2:	2300      	movs	r3, #0
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	3105      	adds	r1, #5
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	4401      	add	r1, r0
 80026bc:	b2d3      	uxtb	r3, r2
 80026be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80026c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	0c0a      	lsrs	r2, r1, #16
 80026ce:	2300      	movs	r3, #0
 80026d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d2:	3106      	adds	r1, #6
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	4401      	add	r1, r0
 80026d8:	b2d3      	uxtb	r3, r2
 80026da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80026dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	0e0a      	lsrs	r2, r1, #24
 80026ea:	2300      	movs	r3, #0
 80026ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ee:	3107      	adds	r1, #7
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	4401      	add	r1, r0
 80026f4:	b2d3      	uxtb	r3, r2
 80026f6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	3308      	adds	r3, #8
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002704:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800270c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	4401      	add	r1, r0
 8002712:	b2d3      	uxtb	r3, r2
 8002714:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	0a02      	lsrs	r2, r0, #8
 8002724:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002728:	0a0b      	lsrs	r3, r1, #8
 800272a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272c:	3101      	adds	r1, #1
 800272e:	6838      	ldr	r0, [r7, #0]
 8002730:	4401      	add	r1, r0
 8002732:	b2d3      	uxtb	r3, r2
 8002734:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002736:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	0c02      	lsrs	r2, r0, #16
 8002744:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002748:	0c0b      	lsrs	r3, r1, #16
 800274a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274c:	3102      	adds	r1, #2
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	4401      	add	r1, r0
 8002752:	b2d3      	uxtb	r3, r2
 8002754:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	0e02      	lsrs	r2, r0, #24
 8002764:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002768:	0e0b      	lsrs	r3, r1, #24
 800276a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276c:	3103      	adds	r1, #3
 800276e:	6838      	ldr	r0, [r7, #0]
 8002770:	4401      	add	r1, r0
 8002772:	b2d3      	uxtb	r3, r2
 8002774:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	000a      	movs	r2, r1
 8002784:	2300      	movs	r3, #0
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	3104      	adds	r1, #4
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	4401      	add	r1, r0
 800278e:	b2d3      	uxtb	r3, r2
 8002790:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	0a0a      	lsrs	r2, r1, #8
 80027a0:	2300      	movs	r3, #0
 80027a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a4:	3105      	adds	r1, #5
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	4401      	add	r1, r0
 80027aa:	b2d3      	uxtb	r3, r2
 80027ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80027ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	0c0a      	lsrs	r2, r1, #16
 80027bc:	2300      	movs	r3, #0
 80027be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c0:	3106      	adds	r1, #6
 80027c2:	6838      	ldr	r0, [r7, #0]
 80027c4:	4401      	add	r1, r0
 80027c6:	b2d3      	uxtb	r3, r2
 80027c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80027ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	0e0a      	lsrs	r2, r1, #24
 80027d8:	2300      	movs	r3, #0
 80027da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027dc:	3107      	adds	r1, #7
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	4401      	add	r1, r0
 80027e2:	b2d3      	uxtb	r3, r2
 80027e4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3308      	adds	r3, #8
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027ee:	4618      	mov	r0, r3
 80027f0:	372c      	adds	r7, #44	; 0x2c
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027fa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027fe:	b0eb      	sub	sp, #428	; 0x1ac
 8002800:	af00      	add	r7, sp, #0
 8002802:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002806:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800281c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002820:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002824:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2200      	movs	r2, #0
 8002830:	461c      	mov	r4, r3
 8002832:	4615      	mov	r5, r2
 8002834:	ea40 0804 	orr.w	r8, r0, r4
 8002838:	ea41 0905 	orr.w	r9, r1, r5
 800283c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002840:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002844:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2200      	movs	r2, #0
 8002856:	469a      	mov	sl, r3
 8002858:	4693      	mov	fp, r2
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002866:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800286a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800286e:	ea40 0402 	orr.w	r4, r0, r2
 8002872:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002876:	430b      	orrs	r3, r1
 8002878:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800287c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002880:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002884:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002888:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800289e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80028ae:	464c      	mov	r4, r9
 80028b0:	0423      	lsls	r3, r4, #16
 80028b2:	4644      	mov	r4, r8
 80028b4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80028b8:	4644      	mov	r4, r8
 80028ba:	0422      	lsls	r2, r4, #16
 80028bc:	ea40 0402 	orr.w	r4, r0, r2
 80028c0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80028c4:	430b      	orrs	r3, r1
 80028c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80028ca:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80028ce:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028d2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028da:	1cda      	adds	r2, r3, #3
 80028dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028e0:	4413      	add	r3, r2
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80028ec:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80028f0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80028f4:	4623      	mov	r3, r4
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80028fc:	4623      	mov	r3, r4
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002904:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002908:	4623      	mov	r3, r4
 800290a:	4303      	orrs	r3, r0
 800290c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002910:	462b      	mov	r3, r5
 8002912:	430b      	orrs	r3, r1
 8002914:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002918:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800291c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002920:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002924:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002928:	1d1a      	adds	r2, r3, #4
 800292a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800293a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800294a:	0023      	movs	r3, r4
 800294c:	2200      	movs	r2, #0
 800294e:	ea40 0402 	orr.w	r4, r0, r2
 8002952:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002956:	430b      	orrs	r3, r1
 8002958:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800295c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002960:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002964:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002968:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800296c:	1d5a      	adds	r2, r3, #5
 800296e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2200      	movs	r2, #0
 800297a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800297e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800298e:	0223      	lsls	r3, r4, #8
 8002990:	2200      	movs	r2, #0
 8002992:	ea40 0402 	orr.w	r4, r0, r2
 8002996:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800299a:	430b      	orrs	r3, r1
 800299c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80029a0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80029a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80029a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b0:	1d9a      	adds	r2, r3, #6
 80029b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029c2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80029d2:	0423      	lsls	r3, r4, #16
 80029d4:	2200      	movs	r2, #0
 80029d6:	ea40 0402 	orr.w	r4, r0, r2
 80029da:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80029de:	430b      	orrs	r3, r1
 80029e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029e4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80029e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80029ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f4:	1dda      	adds	r2, r3, #7
 80029f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002a06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002a16:	0623      	lsls	r3, r4, #24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	ea40 0402 	orr.w	r4, r0, r2
 8002a1e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002a22:	430b      	orrs	r3, r1
 8002a24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a28:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002a2c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002a30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a34:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a38:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002a3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a40:	3308      	adds	r3, #8
 8002a42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a56:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a6a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002a6e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002a72:	4623      	mov	r3, r4
 8002a74:	4303      	orrs	r3, r0
 8002a76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a82:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002a86:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002aa4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002ab4:	464c      	mov	r4, r9
 8002ab6:	0223      	lsls	r3, r4, #8
 8002ab8:	4644      	mov	r4, r8
 8002aba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002abe:	4644      	mov	r4, r8
 8002ac0:	0222      	lsls	r2, r4, #8
 8002ac2:	ea40 0402 	orr.w	r4, r0, r2
 8002ac6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002aca:	430b      	orrs	r3, r1
 8002acc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ad0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002ad4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ad8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ae0:	1c9a      	adds	r2, r3, #2
 8002ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002b02:	464c      	mov	r4, r9
 8002b04:	0423      	lsls	r3, r4, #16
 8002b06:	4644      	mov	r4, r8
 8002b08:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b0c:	4644      	mov	r4, r8
 8002b0e:	0422      	lsls	r2, r4, #16
 8002b10:	ea40 0402 	orr.w	r4, r0, r2
 8002b14:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b1e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002b22:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b2e:	1cda      	adds	r2, r3, #3
 8002b30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b40:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b44:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002b48:	4623      	mov	r3, r4
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b50:	4623      	mov	r3, r4
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b58:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002b5c:	4623      	mov	r3, r4
 8002b5e:	4303      	orrs	r3, r0
 8002b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b64:	462b      	mov	r3, r5
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b6c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002b70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b7c:	1d1a      	adds	r2, r3, #4
 8002b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b8e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002b9e:	0023      	movs	r3, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	ea40 0402 	orr.w	r4, r0, r2
 8002ba6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002baa:	430b      	orrs	r3, r1
 8002bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002bb0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002bb4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002bb8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc0:	1d5a      	adds	r2, r3, #5
 8002bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bd2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002be2:	0223      	lsls	r3, r4, #8
 8002be4:	2200      	movs	r2, #0
 8002be6:	ea40 0402 	orr.w	r4, r0, r2
 8002bea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bf4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002bf8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002bfc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c04:	1d9a      	adds	r2, r3, #6
 8002c06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002c26:	0423      	lsls	r3, r4, #16
 8002c28:	2200      	movs	r2, #0
 8002c2a:	ea40 0402 	orr.w	r4, r0, r2
 8002c2e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002c32:	430b      	orrs	r3, r1
 8002c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c38:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002c3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c48:	1dda      	adds	r2, r3, #7
 8002c4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002c6a:	0623      	lsls	r3, r4, #24
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	ea40 0402 	orr.w	r4, r0, r2
 8002c72:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002c76:	430b      	orrs	r3, r1
 8002c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c7c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002c80:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002c84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c88:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c8c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002c90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ca6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002caa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002cae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cbe:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002cc2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	4303      	orrs	r3, r0
 8002cca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ccc:	462b      	mov	r3, r5
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cd2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002cd6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002cde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ce8:	4413      	add	r3, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2200      	movs	r2, #0
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
 8002cf2:	677a      	str	r2, [r7, #116]	; 0x74
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d00:	464c      	mov	r4, r9
 8002d02:	0223      	lsls	r3, r4, #8
 8002d04:	4644      	mov	r4, r8
 8002d06:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d0a:	4644      	mov	r4, r8
 8002d0c:	0222      	lsls	r2, r4, #8
 8002d0e:	ea40 0402 	orr.w	r4, r0, r2
 8002d12:	66bc      	str	r4, [r7, #104]	; 0x68
 8002d14:	430b      	orrs	r3, r1
 8002d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d18:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002d1c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d20:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d28:	1c9a      	adds	r2, r3, #2
 8002d2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2200      	movs	r2, #0
 8002d36:	663b      	str	r3, [r7, #96]	; 0x60
 8002d38:	667a      	str	r2, [r7, #100]	; 0x64
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d46:	464c      	mov	r4, r9
 8002d48:	0423      	lsls	r3, r4, #16
 8002d4a:	4644      	mov	r4, r8
 8002d4c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d50:	4644      	mov	r4, r8
 8002d52:	0422      	lsls	r2, r4, #16
 8002d54:	ea40 0402 	orr.w	r4, r0, r2
 8002d58:	65bc      	str	r4, [r7, #88]	; 0x58
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d5e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002d62:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d66:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d6e:	1cda      	adds	r2, r3, #3
 8002d70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d7e:	657a      	str	r2, [r7, #84]	; 0x54
 8002d80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002d84:	4623      	mov	r3, r4
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002d94:	4623      	mov	r3, r4
 8002d96:	4303      	orrs	r3, r0
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002da0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002da4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002da8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002db0:	1d1a      	adds	r2, r3, #4
 8002db2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002dcc:	0023      	movs	r3, r4
 8002dce:	2200      	movs	r2, #0
 8002dd0:	ea40 0402 	orr.w	r4, r0, r2
 8002dd4:	633c      	str	r4, [r7, #48]	; 0x30
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dda:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002dde:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002de2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002de6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dea:	1d5a      	adds	r2, r3, #5
 8002dec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2200      	movs	r2, #0
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002e06:	0223      	lsls	r3, r4, #8
 8002e08:	2200      	movs	r2, #0
 8002e0a:	ea40 0402 	orr.w	r4, r0, r2
 8002e0e:	623c      	str	r4, [r7, #32]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
 8002e14:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002e18:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e1c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e24:	3306      	adds	r3, #6
 8002e26:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	61fa      	str	r2, [r7, #28]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	69bc      	ldr	r4, [r7, #24]
 8002e40:	0423      	lsls	r3, r4, #16
 8002e42:	2200      	movs	r2, #0
 8002e44:	ea40 0402 	orr.w	r4, r0, r2
 8002e48:	613c      	str	r4, [r7, #16]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e52:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e56:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e5e:	3307      	adds	r3, #7
 8002e60:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e64:	4413      	add	r3, r2
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	60fa      	str	r2, [r7, #12]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	68bc      	ldr	r4, [r7, #8]
 8002e7a:	0623      	lsls	r3, r4, #24
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	ea40 0402 	orr.w	r4, r0, r2
 8002e82:	603c      	str	r4, [r7, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e8c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002e90:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002e94:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002e98:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002e9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002ea6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002eb6:	4770      	bx	lr

08002eb8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	0800fbe8 	.word	0x0800fbe8

08002ed4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	0800fc00 	.word	0x0800fc00

08002ef0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe faa0 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8002f00:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3308      	adds	r3, #8
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fada 	bl	80024c4 <_ZN13geometry_msgs7Vector3C1Ev>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3328      	adds	r3, #40	; 0x28
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fad5 	bl	80024c4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0800fcfc 	.word	0x0800fcfc

08002f28 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f103 0008 	add.w	r0, r3, #8
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7ff fae6 	bl	8002514 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7ff fad9 	bl	8002514 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    }
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f103 0008 	add.w	r0, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7ff fc33 	bl	80027fa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7ff fc26 	bl	80027fa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
     return offset;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    }
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	0800fc24 	.word	0x0800fc24

08002fdc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	0800fc38 	.word	0x0800fc38

08002ff8 <_Z8callbackRKN13geometry_msgs5TwistE>:
ros::NodeHandle nh;
bool ifFirstPush = false;
double Vx, Vy, W, rVx, rVy, rW;
double WX, WY, WW;

void callback(const geometry_msgs::Twist &msg){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	WX = msg.linear.x;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003006:	491e      	ldr	r1, [pc, #120]	; (8003080 <_Z8callbackRKN13geometry_msgs5TwistE+0x88>)
 8003008:	e9c1 2300 	strd	r2, r3, [r1]
	WY = msg.linear.y;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003012:	491c      	ldr	r1, [pc, #112]	; (8003084 <_Z8callbackRKN13geometry_msgs5TwistE+0x8c>)
 8003014:	e9c1 2300 	strd	r2, r3, [r1]
	WW = msg.angular.z;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800301e:	491a      	ldr	r1, [pc, #104]	; (8003088 <_Z8callbackRKN13geometry_msgs5TwistE+0x90>)
 8003020:	e9c1 2300 	strd	r2, r3, [r1]
	Vx = vel_World2Car('x', WX, WY);
 8003024:	4b16      	ldr	r3, [pc, #88]	; (8003080 <_Z8callbackRKN13geometry_msgs5TwistE+0x88>)
 8003026:	ed93 7b00 	vldr	d7, [r3]
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <_Z8callbackRKN13geometry_msgs5TwistE+0x8c>)
 800302c:	ed93 6b00 	vldr	d6, [r3]
 8003030:	eeb0 1b46 	vmov.f64	d1, d6
 8003034:	eeb0 0b47 	vmov.f64	d0, d7
 8003038:	2078      	movs	r0, #120	; 0x78
 800303a:	f001 f8fb 	bl	8004234 <vel_World2Car>
 800303e:	eeb0 7b40 	vmov.f64	d7, d0
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <_Z8callbackRKN13geometry_msgs5TwistE+0x94>)
 8003044:	ed83 7b00 	vstr	d7, [r3]
	Vy = vel_World2Car('y', WX, WY);
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <_Z8callbackRKN13geometry_msgs5TwistE+0x88>)
 800304a:	ed93 7b00 	vldr	d7, [r3]
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <_Z8callbackRKN13geometry_msgs5TwistE+0x8c>)
 8003050:	ed93 6b00 	vldr	d6, [r3]
 8003054:	eeb0 1b46 	vmov.f64	d1, d6
 8003058:	eeb0 0b47 	vmov.f64	d0, d7
 800305c:	2079      	movs	r0, #121	; 0x79
 800305e:	f001 f8e9 	bl	8004234 <vel_World2Car>
 8003062:	eeb0 7b40 	vmov.f64	d7, d0
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <_Z8callbackRKN13geometry_msgs5TwistE+0x98>)
 8003068:	ed83 7b00 	vstr	d7, [r3]
	W = WW;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <_Z8callbackRKN13geometry_msgs5TwistE+0x90>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	4908      	ldr	r1, [pc, #32]	; (8003094 <_Z8callbackRKN13geometry_msgs5TwistE+0x9c>)
 8003074:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	24001bb0 	.word	0x24001bb0
 8003084:	24001bb8 	.word	0x24001bb8
 8003088:	24001bc0 	.word	0x24001bc0
 800308c:	24001b80 	.word	0x24001b80
 8003090:	24001b88 	.word	0x24001b88
 8003094:	24001b90 	.word	0x24001b90

08003098 <interPub>:
ros::Publisher pub("/ins_vel", &insVel);
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);

int timeout = 0;

void interPub(void){
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
	insVel.linear.x = rVx;
 800309c:	4b18      	ldr	r3, [pc, #96]	; (8003100 <interPub+0x68>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	4918      	ldr	r1, [pc, #96]	; (8003104 <interPub+0x6c>)
 80030a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	insVel.linear.y = rVy;
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <interPub+0x70>)
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	4915      	ldr	r1, [pc, #84]	; (8003104 <interPub+0x6c>)
 80030b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	insVel.angular.z = rW;
 80030b4:	4b15      	ldr	r3, [pc, #84]	; (800310c <interPub+0x74>)
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	4912      	ldr	r1, [pc, #72]	; (8003104 <interPub+0x6c>)
 80030bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	insVel.angular.x = odom.x;
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <interPub+0x78>)
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	490f      	ldr	r1, [pc, #60]	; (8003104 <interPub+0x6c>)
 80030c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	insVel.angular.y = odom.y;
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <interPub+0x78>)
 80030ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030d2:	490c      	ldr	r1, [pc, #48]	; (8003104 <interPub+0x6c>)
 80030d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	insVel.linear.z = odom.theta;
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <interPub+0x78>)
 80030da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030de:	4909      	ldr	r1, [pc, #36]	; (8003104 <interPub+0x6c>)
 80030e0:	e9c1 2308 	strd	r2, r3, [r1, #32]

	if(ifFirstPush)		pub.publish(&insVel);
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <interPub+0x7c>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <interPub+0x5c>
 80030ec:	4905      	ldr	r1, [pc, #20]	; (8003104 <interPub+0x6c>)
 80030ee:	480a      	ldr	r0, [pc, #40]	; (8003118 <interPub+0x80>)
 80030f0:	f7fe fff3 	bl	80020da <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	ifFirstPush = true;
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <interPub+0x7c>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	24001b98 	.word	0x24001b98
 8003104:	24001bc8 	.word	0x24001bc8
 8003108:	24001ba0 	.word	0x24001ba0
 800310c:	24001ba8 	.word	0x24001ba8
 8003110:	24001c88 	.word	0x24001c88
 8003114:	24001b7c 	.word	0x24001b7c
 8003118:	24001c10 	.word	0x24001c10

0800311c <_Z13Error_Handlerv>:
	W = 0;
}

/* UART Communication */
void Error_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003120:	b672      	cpsid	i
}
 8003122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003124:	e7fe      	b.n	8003124 <_Z13Error_Handlerv+0x8>
	...

08003128 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 800312c:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800312e:	4a2d      	ldr	r2, [pc, #180]	; (80031e4 <_ZL20MX_USART10_UART_Initv+0xbc>)
 8003130:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8003132:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003138:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800313a:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8003146:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003148:	2200      	movs	r2, #0
 800314a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800314e:	220c      	movs	r2, #12
 8003150:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800315a:	2200      	movs	r2, #0
 800315c:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003160:	2200      	movs	r2, #0
 8003162:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003164:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003166:	2200      	movs	r2, #0
 8003168:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800316c:	2200      	movs	r2, #0
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8003170:	481b      	ldr	r0, [pc, #108]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003172:	f009 fb51 	bl	800c818 <HAL_UART_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 8003186:	f7ff ffc9 	bl	800311c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800318a:	2100      	movs	r1, #0
 800318c:	4814      	ldr	r0, [pc, #80]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800318e:	f00b fbc5 	bl	800e91c <HAL_UARTEx_SetTxFifoThreshold>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 80031a2:	f7ff ffbb 	bl	800311c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031a6:	2100      	movs	r1, #0
 80031a8:	480d      	ldr	r0, [pc, #52]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80031aa:	f00b fbf5 	bl	800e998 <HAL_UARTEx_SetRxFifoThreshold>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 80031be:	f7ff ffad 	bl	800311c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80031c2:	4807      	ldr	r0, [pc, #28]	; (80031e0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80031c4:	f00b fb71 	bl	800e8aa <HAL_UARTEx_DisableFifoMode>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 80031d8:	f7ff ffa0 	bl	800311c <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	240004bc 	.word	0x240004bc
 80031e4:	40011c00 	.word	0x40011c00

080031e8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a14      	ldr	r2, [pc, #80]	; (8003244 <HAL_UART_ErrorCallback+0x5c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d120      	bne.n	800323a <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 80031f8:	4913      	ldr	r1, [pc, #76]	; (8003248 <HAL_UART_ErrorCallback+0x60>)
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 8003206:	4911      	ldr	r1, [pc, #68]	; (800324c <HAL_UART_ErrorCallback+0x64>)
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 8003214:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_UART_ErrorCallback+0x68>)
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 8003222:	4808      	ldr	r0, [pc, #32]	; (8003244 <HAL_UART_ErrorCallback+0x5c>)
 8003224:	f009 fb48 	bl	800c8b8 <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 8003228:	f7ff ff7e 	bl	8003128 <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 800322c:	4809      	ldr	r0, [pc, #36]	; (8003254 <HAL_UART_ErrorCallback+0x6c>)
 800322e:	f000 f995 	bl	800355c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003232:	4603      	mov	r3, r0
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f83f 	bl	80022b8 <_ZN13STM32Hardware4initEv>
    }
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	240004bc 	.word	0x240004bc
 8003248:	24001b80 	.word	0x24001b80
 800324c:	24001b88 	.word	0x24001b88
 8003250:	24001b90 	.word	0x24001b90
 8003254:	24000640 	.word	0x24000640

08003258 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003260:	4805      	ldr	r0, [pc, #20]	; (8003278 <HAL_UART_TxCpltCallback+0x20>)
 8003262:	f000 f97b 	bl	800355c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003266:	4603      	mov	r3, r0
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff f86f 	bl	800234c <_ZN13STM32Hardware5flushEv>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	24000640 	.word	0x24000640

0800327c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003284:	4805      	ldr	r0, [pc, #20]	; (800329c <HAL_UART_RxCpltCallback+0x20>)
 8003286:	f000 f969 	bl	800355c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800328a:	4603      	mov	r3, r0
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff f81e 	bl	80022ce <_ZN13STM32Hardware10reset_rbufEv>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	24000640 	.word	0x24000640

080032a0 <setup>:

void setup(void){
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
    nh.initNode();
 80032a4:	4812      	ldr	r0, [pc, #72]	; (80032f0 <setup+0x50>)
 80032a6:	f000 f965 	bl	8003574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 80032aa:	4912      	ldr	r1, [pc, #72]	; (80032f4 <setup+0x54>)
 80032ac:	4810      	ldr	r0, [pc, #64]	; (80032f0 <setup+0x50>)
 80032ae:	f000 f98a 	bl	80035c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 80032b2:	4911      	ldr	r1, [pc, #68]	; (80032f8 <setup+0x58>)
 80032b4:	480e      	ldr	r0, [pc, #56]	; (80032f0 <setup+0x50>)
 80032b6:	f000 f9b1 	bl	800361c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    odom.x = 0;		odom.y = 0;		odom.theta = (double)PI/2;
 80032ba:	4910      	ldr	r1, [pc, #64]	; (80032fc <setup+0x5c>)
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9c1 2300 	strd	r2, r3, [r1]
 80032c8:	490c      	ldr	r1, [pc, #48]	; (80032fc <setup+0x5c>)
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80032d6:	4909      	ldr	r1, [pc, #36]	; (80032fc <setup+0x5c>)
 80032d8:	a303      	add	r3, pc, #12	; (adr r3, 80032e8 <setup+0x48>)
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	54cadf99 	.word	0x54cadf99
 80032ec:	3ff921fb 	.word	0x3ff921fb
 80032f0:	24000640 	.word	0x24000640
 80032f4:	24001c28 	.word	0x24001c28
 80032f8:	24001c10 	.word	0x24001c10
 80032fc:	24001c88 	.word	0x24001c88

08003300 <loop>:
void loop(void){
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
    if(!nh.spinOnce()){
 8003304:	4803      	ldr	r0, [pc, #12]	; (8003314 <loop+0x14>)
 8003306:	f000 f9b9 	bl	800367c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
//    	stop();
//    	timeout = 0;
//    }
//    Vx = vel_World2Car('x', WX, WY);
//	Vy = vel_World2Car('y', WX, WY);
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	24000640 	.word	0x24000640

08003318 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d80d      	bhi.n	8003348 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	fa22 f103 	lsr.w	r1, r2, r3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	b2ca      	uxtb	r2, r1
 800333e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3301      	adds	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e7ee      	b.n	8003326 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d811      	bhi.n	8003392 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6839      	ldr	r1, [r7, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	440a      	add	r2, r1
 8003378:	7812      	ldrb	r2, [r2, #0]
 800337a:	4611      	mov	r1, r2
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	00d2      	lsls	r2, r2, #3
 8003380:	fa01 f202 	lsl.w	r2, r1, r2
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3301      	adds	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e7ea      	b.n	8003368 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	0800fd44 	.word	0x0800fd44

080033c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ffe8 	bl	80033a0 <_ZN3ros15NodeHandleBase_C1Ev>
 80033d0:	4a47      	ldr	r2, [pc, #284]	; (80034f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe ff4c 	bl	8002278 <_ZN13STM32HardwareC1Ev>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	f241 5314 	movw	r3, #5396	; 0x1514
 80033f2:	4413      	add	r3, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fb97 	bl	8001b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b18      	cmp	r3, #24
 8003402:	d80b      	bhi.n	800341c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3301      	adds	r3, #1
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e7f0      	b.n	80033fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b18      	cmp	r3, #24
 8003424:	d80a      	bhi.n	800343c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800342e:	2100      	movs	r1, #0
 8003430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	3301      	adds	r3, #1
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e7f1      	b.n	8003420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003446:	d20b      	bcs.n	8003460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	441a      	add	r2, r3
 800344e:	f241 0324 	movw	r3, #4132	; 0x1024
 8003452:	4413      	add	r3, r2
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3301      	adds	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e7ef      	b.n	8003440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346a:	d20b      	bcs.n	8003484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	441a      	add	r2, r3
 8003472:	f241 2324 	movw	r3, #4644	; 0x1224
 8003476:	4413      	add	r3, r2
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	3301      	adds	r3, #1
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	e7ef      	b.n	8003464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348a:	461a      	mov	r2, r3
 800348c:	2300      	movs	r3, #0
 800348e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003498:	461a      	mov	r2, r3
 800349a:	2300      	movs	r3, #0
 800349c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034a6:	461a      	mov	r2, r3
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b4:	461a      	mov	r2, r3
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c2:	461a      	mov	r2, r3
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d0:	461a      	mov	r2, r3
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034de:	461a      	mov	r2, r3
 80034e0:	2300      	movs	r3, #0
 80034e2:	6213      	str	r3, [r2, #32]
  }
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	0800fce8 	.word	0x0800fce8

080034f4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	0800fd2c 	.word	0x0800fd2c

08003514 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ffe5 	bl	80034f4 <_ZN3ros11Subscriber_C1Ev>
 800352a:	4a0b      	ldr	r2, [pc, #44]	; (8003558 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3310      	adds	r3, #16
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fcdb 	bl	8002ef0 <_ZN13geometry_msgs5TwistC1Ev>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	659a      	str	r2, [r3, #88]	; 0x58
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]
  };
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	0800fcd0 	.word	0x0800fcd0

0800355c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
  }
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe fe99 	bl	80022b8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358c:	461a      	mov	r2, r3
 800358e:	2300      	movs	r3, #0
 8003590:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359a:	461a      	mov	r2, r3
 800359c:	2300      	movs	r3, #0
 800359e:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a8:	461a      	mov	r2, r3
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b6:	461a      	mov	r2, r3
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b18      	cmp	r3, #24
 80035d8:	dc19      	bgt.n	800360e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80035e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10d      	bne.n	8003606 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80035ea:	6839      	ldr	r1, [r7, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80035f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	605a      	str	r2, [r3, #4]
        return true;
 8003602:	2301      	movs	r3, #1
 8003604:	e004      	b.n	8003610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3301      	adds	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e7e2      	b.n	80035d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800360e:	2300      	movs	r3, #0
  }
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b18      	cmp	r3, #24
 800362e:	dc1e      	bgt.n	800366e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d111      	bne.n	8003666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	60da      	str	r2, [r3, #12]
        return true;
 8003662:	2301      	movs	r3, #1
 8003664:	e004      	b.n	8003670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3301      	adds	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e7dd      	b.n	800362a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800366e:	2300      	movs	r3, #0
  }
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4618      	mov	r0, r3
 800368a:	f7fe ff0f 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 800368e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003696:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d905      	bls.n	80036b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c6:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d906      	bls.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d6:	461a      	mov	r2, r3
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d015      	beq.n	8003716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe fedc 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad2      	subs	r2, r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	429a      	cmp	r2, r3
 8003704:	bf8c      	ite	hi
 8003706:	2301      	movhi	r3, #1
 8003708:	2300      	movls	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8003710:	f06f 0301 	mvn.w	r3, #1
 8003714:	e226      	b.n	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fde8 	bl	80022f0 <_ZN13STM32Hardware4readEv>
 8003720:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f2c0 81ff 	blt.w	8003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003730:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4413      	add	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800373e:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003748:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800374c:	2b07      	cmp	r3, #7
 800374e:	d12d      	bne.n	80037ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003756:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8003762:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	b2d1      	uxtb	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	441a      	add	r2, r3
 800376e:	f241 0324 	movw	r3, #4132	; 0x1024
 8003772:	4413      	add	r3, r2
 8003774:	460a      	mov	r2, r1
 8003776:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800377e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003782:	3b01      	subs	r3, #1
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800378a:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003794:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1a0      	bne.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a2:	461a      	mov	r2, r3
 80037a4:	2308      	movs	r3, #8
 80037a6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80037aa:	e798      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d130      	bne.n	800381c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2bff      	cmp	r3, #255	; 0xff
 80037be:	d112      	bne.n	80037e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037ca:	3301      	adds	r3, #1
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037d2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3314      	adds	r3, #20
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037e0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80037e4:	e77b      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe fe5e 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	bf8c      	ite	hi
 80037fe:	2301      	movhi	r3, #1
 8003800:	2300      	movls	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	f43f af6a 	beq.w	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8003816:	f06f 0301 	mvn.w	r3, #1
 800381a:	e1a3      	b.n	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003822:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003826:	2b01      	cmp	r3, #1
 8003828:	d121      	bne.n	800386e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2bfe      	cmp	r3, #254	; 0xfe
 800382e:	d10b      	bne.n	8003848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003836:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800383a:	3301      	adds	r3, #1
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003842:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003846:	e74a      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384e:	461a      	mov	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385c:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f af3c 	bne.w	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f980 	bl	8003b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800386c:	e737      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003874:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003878:	2b02      	cmp	r3, #2
 800387a:	d120      	bne.n	80038be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003882:	461a      	mov	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003890:	461a      	mov	r2, r3
 8003892:	2300      	movs	r3, #0
 8003894:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038a2:	3301      	adds	r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038aa:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b4:	461a      	mov	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80038bc:	e70f      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d118      	bne.n	80038fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d2:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	4413      	add	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038e2:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ec:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038f0:	3301      	adds	r3, #1
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038f8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80038fc:	e6ef      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003904:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003908:	2b04      	cmp	r3, #4
 800390a:	d11f      	bne.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003912:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003916:	425a      	negs	r2, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	bf58      	it	pl
 800391e:	4253      	negpl	r3, r2
 8003920:	2bff      	cmp	r3, #255	; 0xff
 8003922:	d10b      	bne.n	800393c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800392a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800392e:	3301      	adds	r3, #1
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003936:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800393a:	e6d0      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003942:	461a      	mov	r2, r3
 8003944:	2300      	movs	r3, #0
 8003946:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800394a:	e6c8      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003952:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003956:	2b05      	cmp	r3, #5
 8003958:	d119      	bne.n	800398e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800396e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003972:	3301      	adds	r3, #1
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800397a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003984:	461a      	mov	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800398c:	e6a7      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003994:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003998:	2b06      	cmp	r3, #6
 800399a:	d123      	bne.n	80039e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a2:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	4413      	add	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039b2:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039bc:	461a      	mov	r2, r3
 80039be:	2307      	movs	r3, #7
 80039c0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ca:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f47f ae85 	bne.w	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039da:	461a      	mov	r2, r3
 80039dc:	2308      	movs	r3, #8
 80039de:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80039e2:	e67c      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ea:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	f47f ae75 	bne.w	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039fa:	461a      	mov	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a08:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a0c:	425a      	negs	r2, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	bf58      	it	pl
 8003a14:	4253      	negpl	r3, r2
 8003a16:	2bff      	cmp	r3, #255	; 0xff
 8003a18:	f47f ae61 	bne.w	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a22:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f89e 	bl	8003b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8ba 	bl	8003baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	e085      	b.n	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a62:	2b0a      	cmp	r3, #10
 8003a64:	d108      	bne.n	8003a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	f241 0324 	movw	r3, #4132	; 0x1024
 8003a6c:	4413      	add	r3, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f97b 	bl	8003d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003a76:	e632      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d112      	bne.n	8003aac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	f241 5314 	movw	r3, #5396	; 0x1514
 8003a8c:	4413      	add	r3, r2
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	f241 0224 	movw	r2, #4132	; 0x1024
 8003a94:	440a      	add	r2, r1
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe f97a 	bl	8001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8003aaa:	e618      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003ab6:	2b0b      	cmp	r3, #11
 8003ab8:	d106      	bne.n	8003ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003ac6:	e60a      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ace:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003ad2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f43f adfc 	beq.w	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aec:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003af0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003afa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b04:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003b08:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	f241 0324 	movw	r3, #4132	; 0x1024
 8003b20:	440b      	add	r3, r1
 8003b22:	4619      	mov	r1, r3
 8003b24:	4790      	blx	r2
    while (true)
 8003b26:	e5da      	b.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8003b28:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b30:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d014      	beq.n	8003b62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d909      	bls.n	8003b62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f80c 	bl	8003b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8003b62:	2300      	movs	r3, #0
  }
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd fc71 	bl	8001460 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f107 020c 	add.w	r2, r7, #12
 8003b88:	210a      	movs	r1, #10
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
    rt_time = hardware_.time();
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fc8a 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba0:	615a      	str	r2, [r3, #20]
  }
 8003ba2:	bf00      	nop
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003baa:	b590      	push	{r4, r7, lr}
 8003bac:	b08b      	sub	sp, #44	; 0x2c
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003bb2:	f107 030c 	add.w	r3, r7, #12
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fd42 	bl	8001640 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	2b18      	cmp	r3, #24
 8003bc4:	dc63      	bgt.n	8003c8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d056      	beq.n	8003c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3308      	adds	r3, #8
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4608      	mov	r0, r1
 8003c26:	4798      	blx	r3
 8003c28:	4603      	mov	r3, r0
 8003c2a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4608      	mov	r0, r1
 8003c54:	4798      	blx	r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c5e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681c      	ldr	r4, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fa44 	bl	8002102 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003c7a:	4601      	mov	r1, r0
 8003c7c:	f107 030c 	add.w	r3, r7, #12
 8003c80:	461a      	mov	r2, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	3301      	adds	r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	e798      	b.n	8003bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	2b18      	cmp	r3, #24
 8003c96:	dc5f      	bgt.n	8003d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d053      	beq.n	8003d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cac:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbe:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cda:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4798      	blx	r3
 8003cec:	4603      	mov	r3, r0
 8003cee:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003cf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d00:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4608      	mov	r0, r1
 8003d10:	4798      	blx	r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d1a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681c      	ldr	r4, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d32:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4798      	blx	r3
 8003d44:	4601      	mov	r1, r0
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	3301      	adds	r3, #1
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
 8003d56:	e79c      	b.n	8003c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8003d64:	bf00      	nop
 8003d66:	372c      	adds	r7, #44	; 0x2c
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd90      	pop	{r4, r7, pc}

08003d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003d76:	f107 0308 	add.w	r3, r7, #8
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd fb70 	bl	8001460 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fb91 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003d98:	f107 0308 	add.w	r3, r7, #8
 8003d9c:	6839      	ldr	r1, [r7, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd fbce 	bl	8001540 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4915      	ldr	r1, [pc, #84]	; (8003e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003daa:	fba1 1303 	umull	r1, r3, r1, r3
 8003dae:	099b      	lsrs	r3, r3, #6
 8003db0:	4413      	add	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003db4:	6939      	ldr	r1, [r7, #16]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003dba:	fba3 0302 	umull	r0, r3, r3, r2
 8003dbe:	099b      	lsrs	r3, r3, #6
 8003dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dc4:	fb00 f303 	mul.w	r3, r0, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003dcc:	fb02 f303 	mul.w	r3, r2, r3
 8003dd0:	440b      	add	r3, r1
 8003dd2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003dd4:	f107 0308 	add.w	r3, r7, #8
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f8bf 	bl	8003f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fb60 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8003df8:	bf00      	nop
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	10624dd3 	.word	0x10624dd3
 8003e04:	000f4240 	.word	0x000f4240

08003e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b63      	cmp	r3, #99	; 0x63
 8003e18:	dd0b      	ble.n	8003e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e20:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003e24:	f083 0301 	eor.w	r3, r3, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e090      	b.n	8003f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68f9      	ldr	r1, [r7, #12]
 8003e3a:	f241 2324 	movw	r3, #4644	; 0x1224
 8003e3e:	440b      	add	r3, r1
 8003e40:	3307      	adds	r3, #7
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4790      	blx	r2
 8003e48:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e50:	22ff      	movs	r2, #255	; 0xff
 8003e52:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5c:	22fe      	movs	r2, #254	; 0xfe
 8003e5e:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6c:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	0a1b      	lsrs	r3, r3, #8
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e80:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8a:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e94:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8003e98:	4413      	add	r3, r2
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	b21b      	sxth	r3, r3
 8003ebc:	121b      	asrs	r3, r3, #8
 8003ebe:	b21b      	sxth	r3, r3
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec8:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ed0:	2305      	movs	r3, #5
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	3306      	adds	r3, #6
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	dc0e      	bgt.n	8003efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	441a      	add	r2, r3
 8003ee4:	f241 2324 	movw	r3, #4644	; 0x1224
 8003ee8:	4413      	add	r3, r2
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e7eb      	b.n	8003ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3307      	adds	r3, #7
 8003f00:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	425a      	negs	r2, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	bf58      	it	pl
 8003f0c:	4253      	negpl	r3, r2
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	1c59      	adds	r1, r3, #1
 8003f14:	6179      	str	r1, [r7, #20]
 8003f16:	43d2      	mvns	r2, r2
 8003f18:	b2d1      	uxtb	r1, r2
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	441a      	add	r2, r3
 8003f1e:	f241 2324 	movw	r3, #4644	; 0x1224
 8003f22:	4413      	add	r3, r2
 8003f24:	460a      	mov	r2, r1
 8003f26:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2e:	dc0b      	bgt.n	8003f48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1d18      	adds	r0, r3, #4
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	f241 2324 	movw	r3, #4644	; 0x1224
 8003f3a:	4413      	add	r3, r2
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f7fe fa6a 	bl	8002418 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	e005      	b.n	8003f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003f48:	4904      	ldr	r1, [pc, #16]	; (8003f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f84c 	bl	8003fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003f50:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003f54:	4618      	mov	r0, r3
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	0800fc5c 	.word	0x0800fc5c

08003f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fa9c 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003f74:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4917      	ldr	r1, [pc, #92]	; (8003fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003f7e:	fba1 1303 	umull	r1, r3, r1, r3
 8003f82:	099b      	lsrs	r3, r3, #6
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f8e:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003f98:	fba3 0302 	umull	r0, r3, r3, r2
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fa2:	fb00 f303 	mul.w	r3, r0, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	4a0d      	ldr	r2, [pc, #52]	; (8003fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	1aca      	subs	r2, r1, r3
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8003fb2:	4413      	add	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fba:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	f241 0318 	movw	r3, #4120	; 0x1018
 8003fc2:	4413      	add	r3, r2
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	f241 021c 	movw	r2, #4124	; 0x101c
 8003fca:	440a      	add	r2, r1
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc fb28 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	10624dd3 	.word	0x10624dd3
 8003fe0:	000f4240 	.word	0x000f4240
 8003fe4:	3b9aca00 	.word	0x3b9aca00

08003fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	2103      	movs	r1, #3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f804 	bl	8004004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	460b      	mov	r3, r1
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004012:	f107 0314 	add.w	r3, r7, #20
 8004016:	4618      	mov	r0, r3
 8004018:	f7fd fcd6 	bl	80019c8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800401c:	7afb      	ldrb	r3, [r7, #11]
 800401e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f107 0214 	add.w	r2, r7, #20
 800402e:	2107      	movs	r1, #7
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	4798      	blx	r3
  }
 8004034:	bf00      	nop
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <_Z41__static_initialization_and_destruction_0ii>:
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d116      	bne.n	800407a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004052:	4293      	cmp	r3, r2
 8004054:	d111      	bne.n	800407a <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8004056:	480b      	ldr	r0, [pc, #44]	; (8004084 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004058:	f7ff f9b2 	bl	80033c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist insVel;
 800405c:	480a      	ldr	r0, [pc, #40]	; (8004088 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800405e:	f7fe ff47 	bl	8002ef0 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("/ins_vel", &insVel);
 8004062:	2300      	movs	r3, #0
 8004064:	4a08      	ldr	r2, [pc, #32]	; (8004088 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004066:	4909      	ldr	r1, [pc, #36]	; (800408c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004068:	4809      	ldr	r0, [pc, #36]	; (8004090 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800406a:	f7fe f81f 	bl	80020ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 800406e:	2301      	movs	r3, #1
 8004070:	4a08      	ldr	r2, [pc, #32]	; (8004094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004072:	4909      	ldr	r1, [pc, #36]	; (8004098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004074:	4809      	ldr	r0, [pc, #36]	; (800409c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004076:	f7ff fa4d 	bl	8003514 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	24000640 	.word	0x24000640
 8004088:	24001bc8 	.word	0x24001bc8
 800408c:	0800fc98 	.word	0x0800fc98
 8004090:	24001c10 	.word	0x24001c10
 8004094:	08002ff9 	.word	0x08002ff9
 8004098:	0800fca4 	.word	0x0800fca4
 800409c:	24001c28 	.word	0x24001c28

080040a0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3310      	adds	r3, #16
 80040ae:	6839      	ldr	r1, [r7, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe ff5f 	bl	8002f74 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	3210      	adds	r2, #16
 80040be:	4610      	mov	r0, r2
 80040c0:	4798      	blx	r3
  }
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3310      	adds	r3, #16
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe ff66 	bl	8002fc0 <_ZN13geometry_msgs5Twist7getTypeEv>
 80040f4:	4603      	mov	r3, r0
  }
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3310      	adds	r3, #16
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe ff66 	bl	8002fdc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004110:	4603      	mov	r3, r0
  }
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
    return configured_;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004128:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_GLOBAL__sub_I_nh>:
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
 800413c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004140:	2001      	movs	r0, #1
 8004142:	f7ff ff7b 	bl	800403c <_Z41__static_initialization_and_destruction_0ii>
 8004146:	bd80      	pop	{r7, pc}

08004148 <odom_update>:
#include "odometry.h"

ODOM odom;

void odom_update(double Vx_world, double Vy_world, double W){
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004152:	ed87 1b02 	vstr	d1, [r7, #8]
 8004156:	ed87 2b00 	vstr	d2, [r7]
    odom.x += (double)Vx_world * dt;
 800415a:	4b35      	ldr	r3, [pc, #212]	; (8004230 <odom_update+0xe8>)
 800415c:	ed93 6b00 	vldr	d6, [r3]
 8004160:	ed97 7b04 	vldr	d7, [r7, #16]
 8004164:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8004210 <odom_update+0xc8>
 8004168:	ee27 7b05 	vmul.f64	d7, d7, d5
 800416c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004170:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <odom_update+0xe8>)
 8004172:	ed83 7b00 	vstr	d7, [r3]
    odom.y += (double)Vy_world * dt;
 8004176:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <odom_update+0xe8>)
 8004178:	ed93 6b02 	vldr	d6, [r3, #8]
 800417c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004180:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8004210 <odom_update+0xc8>
 8004184:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004188:	ee36 7b07 	vadd.f64	d7, d6, d7
 800418c:	4b28      	ldr	r3, [pc, #160]	; (8004230 <odom_update+0xe8>)
 800418e:	ed83 7b02 	vstr	d7, [r3, #8]
    odom.theta += (double)W * dt;
 8004192:	4b27      	ldr	r3, [pc, #156]	; (8004230 <odom_update+0xe8>)
 8004194:	ed93 6b04 	vldr	d6, [r3, #16]
 8004198:	ed97 7b00 	vldr	d7, [r7]
 800419c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8004210 <odom_update+0xc8>
 80041a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80041a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041a8:	4b21      	ldr	r3, [pc, #132]	; (8004230 <odom_update+0xe8>)
 80041aa:	ed83 7b04 	vstr	d7, [r3, #16]
    while(odom.theta > PI)  odom.theta -= 2*PI;
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <odom_update+0xe8>)
 80041b0:	ed93 7b04 	vldr	d7, [r3, #16]
 80041b4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8004218 <odom_update+0xd0>
 80041b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80041bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c0:	dc00      	bgt.n	80041c4 <odom_update+0x7c>
 80041c2:	e00a      	b.n	80041da <odom_update+0x92>
 80041c4:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <odom_update+0xe8>)
 80041c6:	ed93 7b04 	vldr	d7, [r3, #16]
 80041ca:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8004220 <odom_update+0xd8>
 80041ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <odom_update+0xe8>)
 80041d4:	ed83 7b04 	vstr	d7, [r3, #16]
 80041d8:	e7e9      	b.n	80041ae <odom_update+0x66>
    while(odom.theta < -1*PI) odom.theta += 2*PI;
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <odom_update+0xe8>)
 80041dc:	ed93 7b04 	vldr	d7, [r3, #16]
 80041e0:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8004228 <odom_update+0xe0>
 80041e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80041e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ec:	d400      	bmi.n	80041f0 <odom_update+0xa8>
    return;
 80041ee:	e00a      	b.n	8004206 <odom_update+0xbe>
    while(odom.theta < -1*PI) odom.theta += 2*PI;
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <odom_update+0xe8>)
 80041f2:	ed93 7b04 	vldr	d7, [r3, #16]
 80041f6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8004220 <odom_update+0xd8>
 80041fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <odom_update+0xe8>)
 8004200:	ed83 7b04 	vstr	d7, [r3, #16]
 8004204:	e7e9      	b.n	80041da <odom_update+0x92>
}
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	d2f1a9fc 	.word	0xd2f1a9fc
 8004214:	3f50624d 	.word	0x3f50624d
 8004218:	54cadf99 	.word	0x54cadf99
 800421c:	400921fb 	.word	0x400921fb
 8004220:	54cadf99 	.word	0x54cadf99
 8004224:	401921fb 	.word	0x401921fb
 8004228:	54cadf99 	.word	0x54cadf99
 800422c:	c00921fb 	.word	0xc00921fb
 8004230:	24001c88 	.word	0x24001c88

08004234 <vel_World2Car>:
double vel_World2Car(char coor, double Vx_world, double Vy_world){
 8004234:	b580      	push	{r7, lr}
 8004236:	ed2d 8b02 	vpush	{d8}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	ed87 0b02 	vstr	d0, [r7, #8]
 8004244:	ed87 1b00 	vstr	d1, [r7]
 8004248:	75fb      	strb	r3, [r7, #23]
	if(coor == 'x')
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	2b78      	cmp	r3, #120	; 0x78
 800424e:	d11c      	bne.n	800428a <vel_World2Car+0x56>
		return Vx_world * sin( odom.theta ) - Vy_world * cos( odom.theta );
 8004250:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <vel_World2Car+0x9c>)
 8004252:	ed93 7b04 	vldr	d7, [r3, #16]
 8004256:	eeb0 0b47 	vmov.f64	d0, d7
 800425a:	f00a fc8d 	bl	800eb78 <sin>
 800425e:	eeb0 6b40 	vmov.f64	d6, d0
 8004262:	ed97 7b02 	vldr	d7, [r7, #8]
 8004266:	ee26 8b07 	vmul.f64	d8, d6, d7
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <vel_World2Car+0x9c>)
 800426c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004270:	eeb0 0b47 	vmov.f64	d0, d7
 8004274:	f00a fc34 	bl	800eae0 <cos>
 8004278:	eeb0 6b40 	vmov.f64	d6, d0
 800427c:	ed97 7b00 	vldr	d7, [r7]
 8004280:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004284:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004288:	e01b      	b.n	80042c2 <vel_World2Car+0x8e>
	else
		return Vx_world * cos( odom.theta ) + Vy_world * sin( odom.theta );
 800428a:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <vel_World2Car+0x9c>)
 800428c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004290:	eeb0 0b47 	vmov.f64	d0, d7
 8004294:	f00a fc24 	bl	800eae0 <cos>
 8004298:	eeb0 6b40 	vmov.f64	d6, d0
 800429c:	ed97 7b02 	vldr	d7, [r7, #8]
 80042a0:	ee26 8b07 	vmul.f64	d8, d6, d7
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <vel_World2Car+0x9c>)
 80042a6:	ed93 7b04 	vldr	d7, [r3, #16]
 80042aa:	eeb0 0b47 	vmov.f64	d0, d7
 80042ae:	f00a fc63 	bl	800eb78 <sin>
 80042b2:	eeb0 6b40 	vmov.f64	d6, d0
 80042b6:	ed97 7b00 	vldr	d7, [r7]
 80042ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80042be:	ee38 7b07 	vadd.f64	d7, d8, d7
}
 80042c2:	eeb0 0b47 	vmov.f64	d0, d7
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	ecbd 8b02 	vpop	{d8}
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	24001c88 	.word	0x24001c88

080042d4 <vel_Car2World>:
double vel_Car2World(char coor, double Vx, double Vy){
 80042d4:	b580      	push	{r7, lr}
 80042d6:	ed2d 8b02 	vpush	{d8}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	ed87 0b02 	vstr	d0, [r7, #8]
 80042e4:	ed87 1b00 	vstr	d1, [r7]
 80042e8:	75fb      	strb	r3, [r7, #23]
	if(coor == 'x')
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	2b78      	cmp	r3, #120	; 0x78
 80042ee:	d11c      	bne.n	800432a <vel_Car2World+0x56>
		return Vx * sin( odom.theta ) + Vy * cos( odom.theta );
 80042f0:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <vel_Car2World+0x9c>)
 80042f2:	ed93 7b04 	vldr	d7, [r3, #16]
 80042f6:	eeb0 0b47 	vmov.f64	d0, d7
 80042fa:	f00a fc3d 	bl	800eb78 <sin>
 80042fe:	eeb0 6b40 	vmov.f64	d6, d0
 8004302:	ed97 7b02 	vldr	d7, [r7, #8]
 8004306:	ee26 8b07 	vmul.f64	d8, d6, d7
 800430a:	4b19      	ldr	r3, [pc, #100]	; (8004370 <vel_Car2World+0x9c>)
 800430c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004310:	eeb0 0b47 	vmov.f64	d0, d7
 8004314:	f00a fbe4 	bl	800eae0 <cos>
 8004318:	eeb0 6b40 	vmov.f64	d6, d0
 800431c:	ed97 7b00 	vldr	d7, [r7]
 8004320:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004324:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004328:	e01b      	b.n	8004362 <vel_Car2World+0x8e>
	else
		return Vy * sin( odom.theta ) - Vx * cos( odom.theta );
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <vel_Car2World+0x9c>)
 800432c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004330:	eeb0 0b47 	vmov.f64	d0, d7
 8004334:	f00a fc20 	bl	800eb78 <sin>
 8004338:	eeb0 6b40 	vmov.f64	d6, d0
 800433c:	ed97 7b00 	vldr	d7, [r7]
 8004340:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <vel_Car2World+0x9c>)
 8004346:	ed93 7b04 	vldr	d7, [r3, #16]
 800434a:	eeb0 0b47 	vmov.f64	d0, d7
 800434e:	f00a fbc7 	bl	800eae0 <cos>
 8004352:	eeb0 6b40 	vmov.f64	d6, d0
 8004356:	ed97 7b02 	vldr	d7, [r7, #8]
 800435a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800435e:	ee38 7b47 	vsub.f64	d7, d8, d7
}
 8004362:	eeb0 0b47 	vmov.f64	d0, d7
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	ecbd 8b02 	vpop	{d8}
 800436e:	bd80      	pop	{r7, pc}
 8004370:	24001c88 	.word	0x24001c88

08004374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <HAL_MspInit+0x3c>)
 800437c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004380:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <HAL_MspInit+0x3c>)
 8004382:	f043 0302 	orr.w	r3, r3, #2
 8004386:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_MspInit+0x3c>)
 800438c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004398:	2200      	movs	r2, #0
 800439a:	2100      	movs	r1, #0
 800439c:	2005      	movs	r0, #5
 800439e:	f001 f81c 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80043a2:	2005      	movs	r0, #5
 80043a4:	f001 f833 	bl	800540e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	58024400 	.word	0x58024400

080043b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c4:	d117      	bne.n	80043f6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043c6:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <HAL_TIM_Base_MspInit+0x84>)
 80043c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043cc:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <HAL_TIM_Base_MspInit+0x84>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <HAL_TIM_Base_MspInit+0x84>)
 80043d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80043e4:	2200      	movs	r2, #0
 80043e6:	2100      	movs	r1, #0
 80043e8:	201c      	movs	r0, #28
 80043ea:	f000 fff6 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043ee:	201c      	movs	r0, #28
 80043f0:	f001 f80d 	bl	800540e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80043f4:	e01b      	b.n	800442e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a10      	ldr	r2, [pc, #64]	; (800443c <HAL_TIM_Base_MspInit+0x88>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d116      	bne.n	800442e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <HAL_TIM_Base_MspInit+0x84>)
 8004402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004406:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <HAL_TIM_Base_MspInit+0x84>)
 8004408:	f043 0308 	orr.w	r3, r3, #8
 800440c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <HAL_TIM_Base_MspInit+0x84>)
 8004412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800441e:	2200      	movs	r2, #0
 8004420:	2100      	movs	r1, #0
 8004422:	2032      	movs	r0, #50	; 0x32
 8004424:	f000 ffd9 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004428:	2032      	movs	r0, #50	; 0x32
 800442a:	f000 fff0 	bl	800540e <HAL_NVIC_EnableIRQ>
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	58024400 	.word	0x58024400
 800443c:	40000c00 	.word	0x40000c00

08004440 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b090      	sub	sp, #64	; 0x40
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	60da      	str	r2, [r3, #12]
 8004456:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a69      	ldr	r2, [pc, #420]	; (8004604 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d12e      	bne.n	80044c0 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004462:	4b69      	ldr	r3, [pc, #420]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004468:	4a67      	ldr	r2, [pc, #412]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800446a:	f043 0302 	orr.w	r3, r3, #2
 800446e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004472:	4b65      	ldr	r3, [pc, #404]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	62bb      	str	r3, [r7, #40]	; 0x28
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004480:	4b61      	ldr	r3, [pc, #388]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004486:	4a60      	ldr	r2, [pc, #384]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004490:	4b5d      	ldr	r3, [pc, #372]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800449e:	23c0      	movs	r3, #192	; 0xc0
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a2:	2302      	movs	r3, #2
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044aa:	2300      	movs	r3, #0
 80044ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044ae:	2302      	movs	r3, #2
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044b6:	4619      	mov	r1, r3
 80044b8:	4854      	ldr	r0, [pc, #336]	; (800460c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80044ba:	f003 ffc1 	bl	8008440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80044be:	e09c      	b.n	80045fa <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d12f      	bne.n	800452a <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044ca:	4b4f      	ldr	r3, [pc, #316]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044d0:	4a4d      	ldr	r2, [pc, #308]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044da:	4b4b      	ldr	r3, [pc, #300]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	623b      	str	r3, [r7, #32]
 80044e6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044e8:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ee:	4a46      	ldr	r2, [pc, #280]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044f0:	f043 0308 	orr.w	r3, r3, #8
 80044f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044f8:	4b43      	ldr	r3, [pc, #268]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80044fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004506:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450c:	2302      	movs	r3, #2
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	2300      	movs	r3, #0
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004514:	2300      	movs	r3, #0
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004518:	2302      	movs	r3, #2
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800451c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004520:	4619      	mov	r1, r3
 8004522:	483c      	ldr	r0, [pc, #240]	; (8004614 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004524:	f003 ff8c 	bl	8008440 <HAL_GPIO_Init>
}
 8004528:	e067      	b.n	80045fa <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3a      	ldr	r2, [pc, #232]	; (8004618 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d12e      	bne.n	8004592 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004534:	4b34      	ldr	r3, [pc, #208]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004536:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800453a:	4a33      	ldr	r2, [pc, #204]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800453c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004540:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004544:	4b30      	ldr	r3, [pc, #192]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004546:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800454a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004552:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004558:	4a2b      	ldr	r2, [pc, #172]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800455a:	f043 0320 	orr.w	r3, r3, #32
 800455e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004562:	4b29      	ldr	r3, [pc, #164]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004570:	2303      	movs	r3, #3
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004574:	2302      	movs	r3, #2
 8004576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2300      	movs	r3, #0
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457c:	2300      	movs	r3, #0
 800457e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004580:	230d      	movs	r3, #13
 8004582:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004588:	4619      	mov	r1, r3
 800458a:	4824      	ldr	r0, [pc, #144]	; (800461c <HAL_TIM_Encoder_MspInit+0x1dc>)
 800458c:	f003 ff58 	bl	8008440 <HAL_GPIO_Init>
}
 8004590:	e033      	b.n	80045fa <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a22      	ldr	r2, [pc, #136]	; (8004620 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d12e      	bne.n	80045fa <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800459c:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800459e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045a2:	4a19      	ldr	r2, [pc, #100]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045a8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80045ac:	4b16      	ldr	r3, [pc, #88]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045c0:	4a11      	ldr	r2, [pc, #68]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045c2:	f043 0320 	orr.w	r3, r3, #32
 80045c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045ca:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80045cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80045d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045de:	2302      	movs	r3, #2
 80045e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e6:	2300      	movs	r3, #0
 80045e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80045ea:	230e      	movs	r3, #14
 80045ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045f2:	4619      	mov	r1, r3
 80045f4:	4809      	ldr	r0, [pc, #36]	; (800461c <HAL_TIM_Encoder_MspInit+0x1dc>)
 80045f6:	f003 ff23 	bl	8008440 <HAL_GPIO_Init>
}
 80045fa:	bf00      	nop
 80045fc:	3740      	adds	r7, #64	; 0x40
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40000400 	.word	0x40000400
 8004608:	58024400 	.word	0x58024400
 800460c:	58020000 	.word	0x58020000
 8004610:	40000800 	.word	0x40000800
 8004614:	58020c00 	.word	0x58020c00
 8004618:	4000e000 	.word	0x4000e000
 800461c:	58021400 	.word	0x58021400
 8004620:	4000e400 	.word	0x4000e400

08004624 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a16      	ldr	r2, [pc, #88]	; (800468c <HAL_TIM_PWM_MspInit+0x68>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10f      	bne.n	8004656 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <HAL_TIM_PWM_MspInit+0x6c>)
 8004638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800463c:	4a14      	ldr	r2, [pc, #80]	; (8004690 <HAL_TIM_PWM_MspInit+0x6c>)
 800463e:	f043 0302 	orr.w	r3, r3, #2
 8004642:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_TIM_PWM_MspInit+0x6c>)
 8004648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004654:	e013      	b.n	800467e <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a0e      	ldr	r2, [pc, #56]	; (8004694 <HAL_TIM_PWM_MspInit+0x70>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10e      	bne.n	800467e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_TIM_PWM_MspInit+0x6c>)
 8004662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004666:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <HAL_TIM_PWM_MspInit+0x6c>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <HAL_TIM_PWM_MspInit+0x6c>)
 8004672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010400 	.word	0x40010400
 8004690:	58024400 	.word	0x58024400
 8004694:	40014000 	.word	0x40014000

08004698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a35      	ldr	r2, [pc, #212]	; (800478c <HAL_TIM_MspPostInit+0xf4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d120      	bne.n	80046fc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ba:	4b35      	ldr	r3, [pc, #212]	; (8004790 <HAL_TIM_MspPostInit+0xf8>)
 80046bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c0:	4a33      	ldr	r2, [pc, #204]	; (8004790 <HAL_TIM_MspPostInit+0xf8>)
 80046c2:	f043 0304 	orr.w	r3, r3, #4
 80046c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046ca:	4b31      	ldr	r3, [pc, #196]	; (8004790 <HAL_TIM_MspPostInit+0xf8>)
 80046cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80046d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046de:	2302      	movs	r3, #2
 80046e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e6:	2300      	movs	r3, #0
 80046e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80046ea:	2303      	movs	r3, #3
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	4619      	mov	r1, r3
 80046f4:	4827      	ldr	r0, [pc, #156]	; (8004794 <HAL_TIM_MspPostInit+0xfc>)
 80046f6:	f003 fea3 	bl	8008440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80046fa:	e042      	b.n	8004782 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a25      	ldr	r2, [pc, #148]	; (8004798 <HAL_TIM_MspPostInit+0x100>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d13d      	bne.n	8004782 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004706:	4b22      	ldr	r3, [pc, #136]	; (8004790 <HAL_TIM_MspPostInit+0xf8>)
 8004708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800470c:	4a20      	ldr	r2, [pc, #128]	; (8004790 <HAL_TIM_MspPostInit+0xf8>)
 800470e:	f043 0310 	orr.w	r3, r3, #16
 8004712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004716:	4b1e      	ldr	r3, [pc, #120]	; (8004790 <HAL_TIM_MspPostInit+0xf8>)
 8004718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004724:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <HAL_TIM_MspPostInit+0xf8>)
 8004726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800472a:	4a19      	ldr	r2, [pc, #100]	; (8004790 <HAL_TIM_MspPostInit+0xf8>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004734:	4b16      	ldr	r3, [pc, #88]	; (8004790 <HAL_TIM_MspPostInit+0xf8>)
 8004736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004742:	2320      	movs	r3, #32
 8004744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004746:	2302      	movs	r3, #2
 8004748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004752:	2304      	movs	r3, #4
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004756:	f107 0314 	add.w	r3, r7, #20
 800475a:	4619      	mov	r1, r3
 800475c:	480f      	ldr	r0, [pc, #60]	; (800479c <HAL_TIM_MspPostInit+0x104>)
 800475e:	f003 fe6f 	bl	8008440 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004762:	2308      	movs	r3, #8
 8004764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
 8004768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476e:	2300      	movs	r3, #0
 8004770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004772:	2304      	movs	r3, #4
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	4619      	mov	r1, r3
 800477c:	4808      	ldr	r0, [pc, #32]	; (80047a0 <HAL_TIM_MspPostInit+0x108>)
 800477e:	f003 fe5f 	bl	8008440 <HAL_GPIO_Init>
}
 8004782:	bf00      	nop
 8004784:	3728      	adds	r7, #40	; 0x28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40010400 	.word	0x40010400
 8004790:	58024400 	.word	0x58024400
 8004794:	58020800 	.word	0x58020800
 8004798:	40014000 	.word	0x40014000
 800479c:	58021000 	.word	0x58021000
 80047a0:	58020000 	.word	0x58020000

080047a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b0b6      	sub	sp, #216	; 0xd8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	60da      	str	r2, [r3, #12]
 80047ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047bc:	f107 0310 	add.w	r3, r7, #16
 80047c0:	22b4      	movs	r2, #180	; 0xb4
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f00b f80d 	bl	800f7e4 <memset>
  if(huart->Instance==USART10)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a62      	ldr	r2, [pc, #392]	; (8004958 <HAL_UART_MspInit+0x1b4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	f040 80bc 	bne.w	800494e <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 80047d6:	2301      	movs	r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80047da:	2300      	movs	r3, #0
 80047dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047e0:	f107 0310 	add.w	r3, r7, #16
 80047e4:	4618      	mov	r0, r3
 80047e6:	f005 f887 	bl	80098f8 <HAL_RCCEx_PeriphCLKConfig>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80047f0:	f7fc fe10 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 80047f4:	4b59      	ldr	r3, [pc, #356]	; (800495c <HAL_UART_MspInit+0x1b8>)
 80047f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047fa:	4a58      	ldr	r2, [pc, #352]	; (800495c <HAL_UART_MspInit+0x1b8>)
 80047fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004800:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004804:	4b55      	ldr	r3, [pc, #340]	; (800495c <HAL_UART_MspInit+0x1b8>)
 8004806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800480a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004812:	4b52      	ldr	r3, [pc, #328]	; (800495c <HAL_UART_MspInit+0x1b8>)
 8004814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004818:	4a50      	ldr	r2, [pc, #320]	; (800495c <HAL_UART_MspInit+0x1b8>)
 800481a:	f043 0310 	orr.w	r3, r3, #16
 800481e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004822:	4b4e      	ldr	r3, [pc, #312]	; (800495c <HAL_UART_MspInit+0x1b8>)
 8004824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004830:	2304      	movs	r3, #4
 8004832:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2302      	movs	r3, #2
 8004838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483c:	2300      	movs	r3, #0
 800483e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004842:	2300      	movs	r3, #0
 8004844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8004848:	2304      	movs	r3, #4
 800484a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800484e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004852:	4619      	mov	r1, r3
 8004854:	4842      	ldr	r0, [pc, #264]	; (8004960 <HAL_UART_MspInit+0x1bc>)
 8004856:	f003 fdf3 	bl	8008440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800485a:	2308      	movs	r3, #8
 800485c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004860:	2302      	movs	r3, #2
 8004862:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004866:	2300      	movs	r3, #0
 8004868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486c:	2300      	movs	r3, #0
 800486e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8004872:	230b      	movs	r3, #11
 8004874:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004878:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800487c:	4619      	mov	r1, r3
 800487e:	4838      	ldr	r0, [pc, #224]	; (8004960 <HAL_UART_MspInit+0x1bc>)
 8004880:	f003 fdde 	bl	8008440 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 8004884:	4b37      	ldr	r3, [pc, #220]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 8004886:	4a38      	ldr	r2, [pc, #224]	; (8004968 <HAL_UART_MspInit+0x1c4>)
 8004888:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 800488a:	4b36      	ldr	r3, [pc, #216]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 800488c:	2276      	movs	r2, #118	; 0x76
 800488e:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004890:	4b34      	ldr	r3, [pc, #208]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 8004892:	2200      	movs	r2, #0
 8004894:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004896:	4b33      	ldr	r3, [pc, #204]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 8004898:	2200      	movs	r2, #0
 800489a:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 800489c:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 800489e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048a2:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048a4:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048aa:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 80048b0:	4b2c      	ldr	r3, [pc, #176]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 80048b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048b6:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80048b8:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 80048ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048be:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048c0:	4b28      	ldr	r3, [pc, #160]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 80048c6:	4827      	ldr	r0, [pc, #156]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 80048c8:	f000 fdca 	bl	8005460 <HAL_DMA_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80048d2:	f7fc fd9f 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a22      	ldr	r2, [pc, #136]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 80048da:	67da      	str	r2, [r3, #124]	; 0x7c
 80048dc:	4a21      	ldr	r2, [pc, #132]	; (8004964 <HAL_UART_MspInit+0x1c0>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 80048e2:	4b22      	ldr	r3, [pc, #136]	; (800496c <HAL_UART_MspInit+0x1c8>)
 80048e4:	4a22      	ldr	r2, [pc, #136]	; (8004970 <HAL_UART_MspInit+0x1cc>)
 80048e6:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 80048e8:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_UART_MspInit+0x1c8>)
 80048ea:	2277      	movs	r2, #119	; 0x77
 80048ec:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048ee:	4b1f      	ldr	r3, [pc, #124]	; (800496c <HAL_UART_MspInit+0x1c8>)
 80048f0:	2240      	movs	r2, #64	; 0x40
 80048f2:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <HAL_UART_MspInit+0x1c8>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048fa:	4b1c      	ldr	r3, [pc, #112]	; (800496c <HAL_UART_MspInit+0x1c8>)
 80048fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004900:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <HAL_UART_MspInit+0x1c8>)
 8004904:	2200      	movs	r2, #0
 8004906:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004908:	4b18      	ldr	r3, [pc, #96]	; (800496c <HAL_UART_MspInit+0x1c8>)
 800490a:	2200      	movs	r2, #0
 800490c:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <HAL_UART_MspInit+0x1c8>)
 8004910:	2200      	movs	r2, #0
 8004912:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004914:	4b15      	ldr	r3, [pc, #84]	; (800496c <HAL_UART_MspInit+0x1c8>)
 8004916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800491a:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800491c:	4b13      	ldr	r3, [pc, #76]	; (800496c <HAL_UART_MspInit+0x1c8>)
 800491e:	2200      	movs	r2, #0
 8004920:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 8004922:	4812      	ldr	r0, [pc, #72]	; (800496c <HAL_UART_MspInit+0x1c8>)
 8004924:	f000 fd9c 	bl	8005460 <HAL_DMA_Init>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 800492e:	f7fc fd71 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a0d      	ldr	r2, [pc, #52]	; (800496c <HAL_UART_MspInit+0x1c8>)
 8004936:	679a      	str	r2, [r3, #120]	; 0x78
 8004938:	4a0c      	ldr	r2, [pc, #48]	; (800496c <HAL_UART_MspInit+0x1c8>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 800493e:	2200      	movs	r2, #0
 8004940:	2100      	movs	r1, #0
 8004942:	209c      	movs	r0, #156	; 0x9c
 8004944:	f000 fd49 	bl	80053da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004948:	209c      	movs	r0, #156	; 0x9c
 800494a:	f000 fd60 	bl	800540e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 800494e:	bf00      	nop
 8004950:	37d8      	adds	r7, #216	; 0xd8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40011c00 	.word	0x40011c00
 800495c:	58024400 	.word	0x58024400
 8004960:	58021000 	.word	0x58021000
 8004964:	2400054c 	.word	0x2400054c
 8004968:	40020010 	.word	0x40020010
 800496c:	240005c4 	.word	0x240005c4
 8004970:	40020028 	.word	0x40020028

08004974 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <HAL_UART_MspDeInit+0x4c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d118      	bne.n	80049b8 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 8004986:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <HAL_UART_MspDeInit+0x50>)
 8004988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800498c:	4a0d      	ldr	r2, [pc, #52]	; (80049c4 <HAL_UART_MspDeInit+0x50>)
 800498e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004992:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 8004996:	210c      	movs	r1, #12
 8004998:	480b      	ldr	r0, [pc, #44]	; (80049c8 <HAL_UART_MspDeInit+0x54>)
 800499a:	f003 fef9 	bl	8008790 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 f8b6 	bl	8005b14 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 f8b1 	bl	8005b14 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 80049b2:	209c      	movs	r0, #156	; 0x9c
 80049b4:	f000 fd39 	bl	800542a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40011c00 	.word	0x40011c00
 80049c4:	58024400 	.word	0x58024400
 80049c8:	58021000 	.word	0x58021000

080049cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049d0:	e7fe      	b.n	80049d0 <NMI_Handler+0x4>

080049d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049d6:	e7fe      	b.n	80049d6 <HardFault_Handler+0x4>

080049d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049dc:	e7fe      	b.n	80049dc <MemManage_Handler+0x4>

080049de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049de:	b480      	push	{r7}
 80049e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049e2:	e7fe      	b.n	80049e2 <BusFault_Handler+0x4>

080049e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049e8:	e7fe      	b.n	80049e8 <UsageFault_Handler+0x4>

080049ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049ea:	b480      	push	{r7}
 80049ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049fc:	bf00      	nop
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a18:	f000 fbc0 	bl	800519c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a1c:	bf00      	nop
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 8004a34:	4802      	ldr	r0, [pc, #8]	; (8004a40 <DMA1_Stream0_IRQHandler+0x10>)
 8004a36:	f002 f9f1 	bl	8006e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2400054c 	.word	0x2400054c

08004a44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8004a48:	4802      	ldr	r0, [pc, #8]	; (8004a54 <DMA1_Stream1_IRQHandler+0x10>)
 8004a4a:	f002 f9e7 	bl	8006e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	240005c4 	.word	0x240005c4

08004a58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a5c:	4802      	ldr	r0, [pc, #8]	; (8004a68 <TIM2_IRQHandler+0x10>)
 8004a5e:	f006 fded 	bl	800b63c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2400025c 	.word	0x2400025c

08004a6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004a74:	f003 ffa7 	bl	80089c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a78:	bf00      	nop
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <TIM5_IRQHandler+0x10>)
 8004a82:	f006 fddb 	bl	800b63c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	24000340 	.word	0x24000340

08004a90 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <USART10_IRQHandler+0x10>)
 8004a96:	f008 f833 	bl	800cb00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	240004bc 	.word	0x240004bc

08004aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
	return 1;
 8004aa8:	2301      	movs	r3, #1
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <_kill>:

int _kill(int pid, int sig)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004abe:	f00a fe59 	bl	800f774 <__errno>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2216      	movs	r2, #22
 8004ac6:	601a      	str	r2, [r3, #0]
	return -1;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <_exit>:

void _exit (int status)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ffe7 	bl	8004ab4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ae6:	e7fe      	b.n	8004ae6 <_exit+0x12>

08004ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004af0:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <_sbrk+0x5c>)
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <_sbrk+0x60>)
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004afc:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <_sbrk+0x64>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <_sbrk+0x64>)
 8004b06:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <_sbrk+0x68>)
 8004b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <_sbrk+0x64>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d207      	bcs.n	8004b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b18:	f00a fe2c 	bl	800f774 <__errno>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	220c      	movs	r2, #12
 8004b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	e009      	b.n	8004b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <_sbrk+0x64>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <_sbrk+0x64>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4413      	add	r3, r2
 8004b36:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <_sbrk+0x64>)
 8004b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	24050000 	.word	0x24050000
 8004b48:	00000400 	.word	0x00000400
 8004b4c:	24001ca0 	.word	0x24001ca0
 8004b50:	24001cb8 	.word	0x24001cb8

08004b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004b58:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <SystemInit+0xd0>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	4a31      	ldr	r2, [pc, #196]	; (8004c24 <SystemInit+0xd0>)
 8004b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004b68:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <SystemInit+0xd4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	2b06      	cmp	r3, #6
 8004b72:	d807      	bhi.n	8004b84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004b74:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <SystemInit+0xd4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 030f 	bic.w	r3, r3, #15
 8004b7c:	4a2a      	ldr	r2, [pc, #168]	; (8004c28 <SystemInit+0xd4>)
 8004b7e:	f043 0307 	orr.w	r3, r3, #7
 8004b82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004b84:	4b29      	ldr	r3, [pc, #164]	; (8004c2c <SystemInit+0xd8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a28      	ldr	r2, [pc, #160]	; (8004c2c <SystemInit+0xd8>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b90:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <SystemInit+0xd8>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004b96:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <SystemInit+0xd8>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4924      	ldr	r1, [pc, #144]	; (8004c2c <SystemInit+0xd8>)
 8004b9c:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <SystemInit+0xdc>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ba2:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <SystemInit+0xd4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004bae:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <SystemInit+0xd4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 030f 	bic.w	r3, r3, #15
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <SystemInit+0xd4>)
 8004bb8:	f043 0307 	orr.w	r3, r3, #7
 8004bbc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <SystemInit+0xd8>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004bc4:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <SystemInit+0xd8>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <SystemInit+0xd8>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004bd0:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <SystemInit+0xd8>)
 8004bd2:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <SystemInit+0xe0>)
 8004bd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004bd6:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <SystemInit+0xd8>)
 8004bd8:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <SystemInit+0xe4>)
 8004bda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004bdc:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <SystemInit+0xd8>)
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <SystemInit+0xe8>)
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004be2:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <SystemInit+0xd8>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004be8:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <SystemInit+0xd8>)
 8004bea:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <SystemInit+0xe8>)
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004bee:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <SystemInit+0xd8>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <SystemInit+0xd8>)
 8004bf6:	4a11      	ldr	r2, [pc, #68]	; (8004c3c <SystemInit+0xe8>)
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <SystemInit+0xd8>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <SystemInit+0xd8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <SystemInit+0xd8>)
 8004c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c0c:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <SystemInit+0xd8>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <SystemInit+0xec>)
 8004c14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c1a:	bf00      	nop
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	e000ed00 	.word	0xe000ed00
 8004c28:	52002000 	.word	0x52002000
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c34:	02020200 	.word	0x02020200
 8004c38:	01ff0000 	.word	0x01ff0000
 8004c3c:	01010280 	.word	0x01010280
 8004c40:	52004000 	.word	0x52004000

08004c44 <HAL_TIM_PeriodElapsedCallback>:

int ccc = 0;
double coeffab = 0.5 * (width + length);
double angle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	ed2d 8b02 	vpush	{d8}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c58:	d101      	bne.n	8004c5e <HAL_TIM_PeriodElapsedCallback+0x1a>
		interPub();
 8004c5a:	f7fe fa1d 	bl	8003098 <interPub>
	}
	if (htim->Instance == TIM5) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4aa6      	ldr	r2, [pc, #664]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	f040 81eb 	bne.w	8005040 <HAL_TIM_PeriodElapsedCallback+0x3fc>
		Kpid[0].goalVel = Vy + Vx + (W * coeffab);
 8004c6a:	4ba5      	ldr	r3, [pc, #660]	; (8004f00 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004c6c:	ed93 6b00 	vldr	d6, [r3]
 8004c70:	4ba4      	ldr	r3, [pc, #656]	; (8004f04 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004c72:	ed93 7b00 	vldr	d7, [r3]
 8004c76:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c7a:	4ba3      	ldr	r3, [pc, #652]	; (8004f08 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004c7c:	ed93 5b00 	vldr	d5, [r3]
 8004c80:	4ba2      	ldr	r3, [pc, #648]	; (8004f0c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004c82:	ed93 7b00 	vldr	d7, [r3]
 8004c86:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004c8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c8e:	4ba0      	ldr	r3, [pc, #640]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004c90:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vy - Vx - (W * coeffab);
 8004c94:	4b9a      	ldr	r3, [pc, #616]	; (8004f00 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004c96:	ed93 6b00 	vldr	d6, [r3]
 8004c9a:	4b9a      	ldr	r3, [pc, #616]	; (8004f04 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004c9c:	ed93 7b00 	vldr	d7, [r3]
 8004ca0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004ca4:	4b98      	ldr	r3, [pc, #608]	; (8004f08 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004ca6:	ed93 5b00 	vldr	d5, [r3]
 8004caa:	4b98      	ldr	r3, [pc, #608]	; (8004f0c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004cac:	ed93 7b00 	vldr	d7, [r3]
 8004cb0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004cb4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004cb8:	4b95      	ldr	r3, [pc, #596]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004cba:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vy + Vx - (W * coeffab);
 8004cbe:	4b90      	ldr	r3, [pc, #576]	; (8004f00 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004cc0:	ed93 6b00 	vldr	d6, [r3]
 8004cc4:	4b8f      	ldr	r3, [pc, #572]	; (8004f04 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004cc6:	ed93 7b00 	vldr	d7, [r3]
 8004cca:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004cce:	4b8e      	ldr	r3, [pc, #568]	; (8004f08 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004cd0:	ed93 5b00 	vldr	d5, [r3]
 8004cd4:	4b8d      	ldr	r3, [pc, #564]	; (8004f0c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004cd6:	ed93 7b00 	vldr	d7, [r3]
 8004cda:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004cde:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ce2:	4b8b      	ldr	r3, [pc, #556]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004ce4:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vy - Vx + (W * coeffab);
 8004ce8:	4b85      	ldr	r3, [pc, #532]	; (8004f00 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004cea:	ed93 6b00 	vldr	d6, [r3]
 8004cee:	4b85      	ldr	r3, [pc, #532]	; (8004f04 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004cf0:	ed93 7b00 	vldr	d7, [r3]
 8004cf4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004cf8:	4b83      	ldr	r3, [pc, #524]	; (8004f08 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004cfa:	ed93 5b00 	vldr	d5, [r3]
 8004cfe:	4b83      	ldr	r3, [pc, #524]	; (8004f0c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004d00:	ed93 7b00 	vldr	d7, [r3]
 8004d04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d0c:	4b80      	ldr	r3, [pc, #512]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d0e:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(&htim23);
 8004d12:	4b80      	ldr	r3, [pc, #512]	; (8004f14 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	b21a      	sxth	r2, r3
 8004d1a:	4b7d      	ldr	r3, [pc, #500]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d1c:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim4) * -1;
 8004d1e:	4b7e      	ldr	r3, [pc, #504]	; (8004f18 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	425b      	negs	r3, r3
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	b21a      	sxth	r2, r3
 8004d2c:	4b78      	ldr	r3, [pc, #480]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d2e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim24);
 8004d32:	4b7a      	ldr	r3, [pc, #488]	; (8004f1c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	b21a      	sxth	r2, r3
 8004d3a:	4b75      	ldr	r3, [pc, #468]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d3c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim3);
 8004d40:	4b77      	ldr	r3, [pc, #476]	; (8004f20 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	b21a      	sxth	r2, r3
 8004d48:	4b71      	ldr	r3, [pc, #452]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d4a:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(&htim24, 0);
 8004d4e:	4b73      	ldr	r3, [pc, #460]	; (8004f1c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 8004d56:	4b6f      	ldr	r3, [pc, #444]	; (8004f14 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 8004d5e:	4b70      	ldr	r3, [pc, #448]	; (8004f20 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 8004d66:	4b6c      	ldr	r3, [pc, #432]	; (8004f18 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

		for( int i = 0; i < 4; i ++){
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	dc06      	bgt.n	8004d86 <HAL_TIM_PeriodElapsedCallback+0x142>
			pidCtrl(i);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7fb fc81 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3301      	adds	r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e7f5      	b.n	8004d72 <HAL_TIM_PeriodElapsedCallback+0x12e>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, Kpid[0].pulse);
 8004d86:	4b62      	ldr	r3, [pc, #392]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d88:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8004d8c:	4b65      	ldr	r3, [pc, #404]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004d94:	ee17 2a90 	vmov	r2, s15
 8004d98:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, Kpid[1].pulse);
 8004d9a:	4b5d      	ldr	r3, [pc, #372]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004d9c:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004da0:	4b60      	ldr	r3, [pc, #384]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004da8:	ee17 2a90 	vmov	r2, s15
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[2].pulse);
 8004dae:	4b58      	ldr	r3, [pc, #352]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004db0:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8004db4:	4b5c      	ldr	r3, [pc, #368]	; (8004f28 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004dbc:	ee17 2a90 	vmov	r2, s15
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[3].pulse);
 8004dc2:	4b53      	ldr	r3, [pc, #332]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004dc4:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8004dc8:	4b57      	ldr	r3, [pc, #348]	; (8004f28 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004dd0:	ee17 2a90 	vmov	r2, s15
 8004dd4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ddc:	4853      	ldr	r0, [pc, #332]	; (8004f2c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004dde:	f003 fdd9 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8004de2:	2200      	movs	r2, #0
 8004de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004de8:	4850      	ldr	r0, [pc, #320]	; (8004f2c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004dea:	f003 fdd3 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004dee:	2200      	movs	r2, #0
 8004df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004df4:	484e      	ldr	r0, [pc, #312]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004df6:	f003 fdcd 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2140      	movs	r1, #64	; 0x40
 8004dfe:	484c      	ldr	r0, [pc, #304]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e00:	f003 fdc8 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8004e04:	2200      	movs	r2, #0
 8004e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e0a:	4849      	ldr	r0, [pc, #292]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e0c:	f003 fdc2 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e16:	4846      	ldr	r0, [pc, #280]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e18:	f003 fdbc 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e22:	4843      	ldr	r0, [pc, #268]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e24:	f003 fdb6 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	4840      	ldr	r0, [pc, #256]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e2e:	f003 fdb1 	bl	8008994 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004e32:	4b37      	ldr	r3, [pc, #220]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004e34:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004e38:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e40:	dd06      	ble.n	8004e50 <HAL_TIM_PeriodElapsedCallback+0x20c>
 8004e42:	2201      	movs	r2, #1
 8004e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e48:	4838      	ldr	r0, [pc, #224]	; (8004f2c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004e4a:	f003 fda3 	bl	8008994 <HAL_GPIO_WritePin>
 8004e4e:	e00d      	b.n	8004e6c <HAL_TIM_PeriodElapsedCallback+0x228>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004e50:	4b2f      	ldr	r3, [pc, #188]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004e52:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004e56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5e:	d505      	bpl.n	8004e6c <HAL_TIM_PeriodElapsedCallback+0x228>
 8004e60:	2201      	movs	r2, #1
 8004e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e66:	4831      	ldr	r0, [pc, #196]	; (8004f2c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004e68:	f003 fd94 	bl	8008994 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8004e6c:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004e6e:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004e72:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7a:	dd06      	ble.n	8004e8a <HAL_TIM_PeriodElapsedCallback+0x246>
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e82:	482b      	ldr	r0, [pc, #172]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004e84:	f003 fd86 	bl	8008994 <HAL_GPIO_WritePin>
 8004e88:	e00c      	b.n	8004ea4 <HAL_TIM_PeriodElapsedCallback+0x260>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8004e8a:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004e8c:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004e90:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e98:	d504      	bpl.n	8004ea4 <HAL_TIM_PeriodElapsedCallback+0x260>
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	2140      	movs	r1, #64	; 0x40
 8004e9e:	4824      	ldr	r0, [pc, #144]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004ea0:	f003 fd78 	bl	8008994 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004ea6:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8004eaa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb2:	dd06      	ble.n	8004ec2 <HAL_TIM_PeriodElapsedCallback+0x27e>
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eba:	481d      	ldr	r0, [pc, #116]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004ebc:	f003 fd6a 	bl	8008994 <HAL_GPIO_WritePin>
 8004ec0:	e00d      	b.n	8004ede <HAL_TIM_PeriodElapsedCallback+0x29a>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8004ec2:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004ec4:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8004ec8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed0:	d505      	bpl.n	8004ede <HAL_TIM_PeriodElapsedCallback+0x29a>
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ed8:	4815      	ldr	r0, [pc, #84]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004eda:	f003 fd5b 	bl	8008994 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8004ede:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004ee0:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8004ee4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eec:	dd22      	ble.n	8004f34 <HAL_TIM_PeriodElapsedCallback+0x2f0>
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ef4:	480e      	ldr	r0, [pc, #56]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004ef6:	f003 fd4d 	bl	8008994 <HAL_GPIO_WritePin>
 8004efa:	e028      	b.n	8004f4e <HAL_TIM_PeriodElapsedCallback+0x30a>
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	24001b88 	.word	0x24001b88
 8004f04:	24001b80 	.word	0x24001b80
 8004f08:	24001b90 	.word	0x24001b90
 8004f0c:	240001c8 	.word	0x240001c8
 8004f10:	24000000 	.word	0x24000000
 8004f14:	24000424 	.word	0x24000424
 8004f18:	240002f4 	.word	0x240002f4
 8004f1c:	24000470 	.word	0x24000470
 8004f20:	240002a8 	.word	0x240002a8
 8004f24:	2400038c 	.word	0x2400038c
 8004f28:	240003d8 	.word	0x240003d8
 8004f2c:	58020400 	.word	0x58020400
 8004f30:	58021000 	.word	0x58021000
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8004f34:	4b45      	ldr	r3, [pc, #276]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004f36:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8004f3a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f42:	d504      	bpl.n	8004f4e <HAL_TIM_PeriodElapsedCallback+0x30a>
 8004f44:	2201      	movs	r2, #1
 8004f46:	2180      	movs	r1, #128	; 0x80
 8004f48:	4841      	ldr	r0, [pc, #260]	; (8005050 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8004f4a:	f003 fd23 	bl	8008994 <HAL_GPIO_WritePin>

		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004f4e:	4b3f      	ldr	r3, [pc, #252]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004f50:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004f54:	4b3d      	ldr	r3, [pc, #244]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004f56:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004f5a:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ Kpid[2].insVel + Kpid[3].insVel );
 8004f5e:	4b3b      	ldr	r3, [pc, #236]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004f60:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004f64:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004f68:	4b38      	ldr	r3, [pc, #224]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004f6a:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004f6e:	ee36 7b07 	vadd.f64	d7, d6, d7
		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004f72:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004f76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f7a:	4b36      	ldr	r3, [pc, #216]	; (8005054 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8004f7c:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004f80:	4b32      	ldr	r3, [pc, #200]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004f82:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004f86:	4b31      	ldr	r3, [pc, #196]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004f88:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004f8c:	ee36 6b47 	vsub.f64	d6, d6, d7
				+ Kpid[2].insVel - Kpid[3].insVel );
 8004f90:	4b2e      	ldr	r3, [pc, #184]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004f92:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004f96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004f9a:	4b2c      	ldr	r3, [pc, #176]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004f9c:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004fa0:	ee36 7b47 	vsub.f64	d7, d6, d7
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004fa4:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004fa8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004fac:	4b2a      	ldr	r3, [pc, #168]	; (8005058 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8004fae:	ed83 7b00 	vstr	d7, [r3]
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004fb2:	4b26      	ldr	r3, [pc, #152]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004fb4:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004fb8:	4b24      	ldr	r3, [pc, #144]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004fba:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004fbe:	ee36 6b47 	vsub.f64	d6, d6, d7
				- Kpid[2].insVel + Kpid[3].insVel ) / coeffab;
 8004fc2:	4b22      	ldr	r3, [pc, #136]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004fc4:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004fc8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004fcc:	4b1f      	ldr	r3, [pc, #124]	; (800504c <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004fce:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004fd2:	ee36 7b07 	vadd.f64	d7, d6, d7
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004fd6:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004fda:	ee27 5b06 	vmul.f64	d5, d7, d6
				- Kpid[2].insVel + Kpid[3].insVel ) / coeffab;
 8004fde:	4b1f      	ldr	r3, [pc, #124]	; (800505c <HAL_TIM_PeriodElapsedCallback+0x418>)
 8004fe0:	ed93 6b00 	vldr	d6, [r3]
 8004fe4:	ee85 7b06 	vdiv.f64	d7, d5, d6
		rW = (double)0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8004fea:	ed83 7b00 	vstr	d7, [r3]

		odom_update(vel_Car2World('x',rVx,rVy), vel_Car2World('y',rVx,rVy), rW);
 8004fee:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8004ff0:	ed93 7b00 	vldr	d7, [r3]
 8004ff4:	4b17      	ldr	r3, [pc, #92]	; (8005054 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8004ff6:	ed93 6b00 	vldr	d6, [r3]
 8004ffa:	eeb0 1b46 	vmov.f64	d1, d6
 8004ffe:	eeb0 0b47 	vmov.f64	d0, d7
 8005002:	2078      	movs	r0, #120	; 0x78
 8005004:	f7ff f966 	bl	80042d4 <vel_Car2World>
 8005008:	eeb0 8b40 	vmov.f64	d8, d0
 800500c:	4b12      	ldr	r3, [pc, #72]	; (8005058 <HAL_TIM_PeriodElapsedCallback+0x414>)
 800500e:	ed93 7b00 	vldr	d7, [r3]
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8005014:	ed93 6b00 	vldr	d6, [r3]
 8005018:	eeb0 1b46 	vmov.f64	d1, d6
 800501c:	eeb0 0b47 	vmov.f64	d0, d7
 8005020:	2079      	movs	r0, #121	; 0x79
 8005022:	f7ff f957 	bl	80042d4 <vel_Car2World>
 8005026:	eeb0 6b40 	vmov.f64	d6, d0
 800502a:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800502c:	ed93 7b00 	vldr	d7, [r3]
 8005030:	eeb0 2b47 	vmov.f64	d2, d7
 8005034:	eeb0 1b46 	vmov.f64	d1, d6
 8005038:	eeb0 0b48 	vmov.f64	d0, d8
 800503c:	f7ff f884 	bl	8004148 <odom_update>
	}
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	ecbd 8b02 	vpop	{d8}
 800504a:	bd80      	pop	{r7, pc}
 800504c:	24000000 	.word	0x24000000
 8005050:	58021000 	.word	0x58021000
 8005054:	24001ba0 	.word	0x24001ba0
 8005058:	24001b98 	.word	0x24001b98
 800505c:	240001c8 	.word	0x240001c8
 8005060:	24001ba8 	.word	0x24001ba8

08005064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800509c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005068:	f7ff fd74 	bl	8004b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800506c:	480c      	ldr	r0, [pc, #48]	; (80050a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800506e:	490d      	ldr	r1, [pc, #52]	; (80050a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005070:	4a0d      	ldr	r2, [pc, #52]	; (80050a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005074:	e002      	b.n	800507c <LoopCopyDataInit>

08005076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800507a:	3304      	adds	r3, #4

0800507c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800507c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800507e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005080:	d3f9      	bcc.n	8005076 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005082:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005084:	4c0a      	ldr	r4, [pc, #40]	; (80050b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005088:	e001      	b.n	800508e <LoopFillZerobss>

0800508a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800508a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800508c:	3204      	adds	r2, #4

0800508e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800508e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005090:	d3fb      	bcc.n	800508a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005092:	f00a fb75 	bl	800f780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005096:	f7fb fc8d 	bl	80009b4 <main>
  bx  lr
 800509a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800509c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80050a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80050a4:	24000240 	.word	0x24000240
  ldr r2, =_sidata
 80050a8:	0800fff4 	.word	0x0800fff4
  ldr r2, =_sbss
 80050ac:	24000240 	.word	0x24000240
  ldr r4, =_ebss
 80050b0:	24001cb8 	.word	0x24001cb8

080050b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050b4:	e7fe      	b.n	80050b4 <ADC3_IRQHandler>
	...

080050b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050be:	2003      	movs	r0, #3
 80050c0:	f000 f980 	bl	80053c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050c4:	f004 fa42 	bl	800954c <HAL_RCC_GetSysClockFreq>
 80050c8:	4602      	mov	r2, r0
 80050ca:	4b15      	ldr	r3, [pc, #84]	; (8005120 <HAL_Init+0x68>)
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	0a1b      	lsrs	r3, r3, #8
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	4913      	ldr	r1, [pc, #76]	; (8005124 <HAL_Init+0x6c>)
 80050d6:	5ccb      	ldrb	r3, [r1, r3]
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
 80050e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050e2:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <HAL_Init+0x68>)
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	4a0e      	ldr	r2, [pc, #56]	; (8005124 <HAL_Init+0x6c>)
 80050ec:	5cd3      	ldrb	r3, [r2, r3]
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <HAL_Init+0x70>)
 80050fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <HAL_Init+0x74>)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005102:	200f      	movs	r0, #15
 8005104:	f000 f814 	bl	8005130 <HAL_InitTick>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e002      	b.n	8005118 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005112:	f7ff f92f 	bl	8004374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	58024400 	.word	0x58024400
 8005124:	0800fdc8 	.word	0x0800fdc8
 8005128:	240001c4 	.word	0x240001c4
 800512c:	240001c0 	.word	0x240001c0

08005130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005138:	4b15      	ldr	r3, [pc, #84]	; (8005190 <HAL_InitTick+0x60>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e021      	b.n	8005188 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005144:	4b13      	ldr	r3, [pc, #76]	; (8005194 <HAL_InitTick+0x64>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <HAL_InitTick+0x60>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	4619      	mov	r1, r3
 800514e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005152:	fbb3 f3f1 	udiv	r3, r3, r1
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	4618      	mov	r0, r3
 800515c:	f000 f973 	bl	8005446 <HAL_SYSTICK_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e00e      	b.n	8005188 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b0f      	cmp	r3, #15
 800516e:	d80a      	bhi.n	8005186 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005170:	2200      	movs	r2, #0
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	f000 f92f 	bl	80053da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800517c:	4a06      	ldr	r2, [pc, #24]	; (8005198 <HAL_InitTick+0x68>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	e000      	b.n	8005188 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	240001d4 	.word	0x240001d4
 8005194:	240001c0 	.word	0x240001c0
 8005198:	240001d0 	.word	0x240001d0

0800519c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <HAL_IncTick+0x20>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <HAL_IncTick+0x24>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4413      	add	r3, r2
 80051ac:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <HAL_IncTick+0x24>)
 80051ae:	6013      	str	r3, [r2, #0]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	240001d4 	.word	0x240001d4
 80051c0:	24001ca4 	.word	0x24001ca4

080051c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return uwTick;
 80051c8:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <HAL_GetTick+0x14>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	24001ca4 	.word	0x24001ca4

080051dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <__NVIC_SetPriorityGrouping+0x40>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051f8:	4013      	ands	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <__NVIC_SetPriorityGrouping+0x44>)
 8005206:	4313      	orrs	r3, r2
 8005208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800520a:	4a04      	ldr	r2, [pc, #16]	; (800521c <__NVIC_SetPriorityGrouping+0x40>)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	60d3      	str	r3, [r2, #12]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	e000ed00 	.word	0xe000ed00
 8005220:	05fa0000 	.word	0x05fa0000

08005224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <__NVIC_GetPriorityGrouping+0x18>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	0a1b      	lsrs	r3, r3, #8
 800522e:	f003 0307 	and.w	r3, r3, #7
}
 8005232:	4618      	mov	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800524a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	db0b      	blt.n	800526a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	f003 021f 	and.w	r2, r3, #31
 8005258:	4907      	ldr	r1, [pc, #28]	; (8005278 <__NVIC_EnableIRQ+0x38>)
 800525a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2001      	movs	r0, #1
 8005262:	fa00 f202 	lsl.w	r2, r0, r2
 8005266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	e000e100 	.word	0xe000e100

0800527c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800528a:	2b00      	cmp	r3, #0
 800528c:	db12      	blt.n	80052b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	f003 021f 	and.w	r2, r3, #31
 8005294:	490a      	ldr	r1, [pc, #40]	; (80052c0 <__NVIC_DisableIRQ+0x44>)
 8005296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	2001      	movs	r0, #1
 800529e:	fa00 f202 	lsl.w	r2, r0, r2
 80052a2:	3320      	adds	r3, #32
 80052a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80052a8:	f3bf 8f4f 	dsb	sy
}
 80052ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052ae:	f3bf 8f6f 	isb	sy
}
 80052b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	e000e100 	.word	0xe000e100

080052c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	6039      	str	r1, [r7, #0]
 80052ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	db0a      	blt.n	80052ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	490c      	ldr	r1, [pc, #48]	; (8005310 <__NVIC_SetPriority+0x4c>)
 80052de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052e2:	0112      	lsls	r2, r2, #4
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	440b      	add	r3, r1
 80052e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052ec:	e00a      	b.n	8005304 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	4908      	ldr	r1, [pc, #32]	; (8005314 <__NVIC_SetPriority+0x50>)
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	3b04      	subs	r3, #4
 80052fc:	0112      	lsls	r2, r2, #4
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	440b      	add	r3, r1
 8005302:	761a      	strb	r2, [r3, #24]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000e100 	.word	0xe000e100
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005318:	b480      	push	{r7}
 800531a:	b089      	sub	sp, #36	; 0x24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f1c3 0307 	rsb	r3, r3, #7
 8005332:	2b04      	cmp	r3, #4
 8005334:	bf28      	it	cs
 8005336:	2304      	movcs	r3, #4
 8005338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3304      	adds	r3, #4
 800533e:	2b06      	cmp	r3, #6
 8005340:	d902      	bls.n	8005348 <NVIC_EncodePriority+0x30>
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3b03      	subs	r3, #3
 8005346:	e000      	b.n	800534a <NVIC_EncodePriority+0x32>
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	43da      	mvns	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	401a      	ands	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005360:	f04f 31ff 	mov.w	r1, #4294967295
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	43d9      	mvns	r1, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005370:	4313      	orrs	r3, r2
         );
}
 8005372:	4618      	mov	r0, r3
 8005374:	3724      	adds	r7, #36	; 0x24
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3b01      	subs	r3, #1
 800538c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005390:	d301      	bcc.n	8005396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005392:	2301      	movs	r3, #1
 8005394:	e00f      	b.n	80053b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005396:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <SysTick_Config+0x40>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3b01      	subs	r3, #1
 800539c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800539e:	210f      	movs	r1, #15
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	f7ff ff8e 	bl	80052c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <SysTick_Config+0x40>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <SysTick_Config+0x40>)
 80053b0:	2207      	movs	r2, #7
 80053b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	e000e010 	.word	0xe000e010

080053c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7ff ff05 	bl	80051dc <__NVIC_SetPriorityGrouping>
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	4603      	mov	r3, r0
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
 80053e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053e8:	f7ff ff1c 	bl	8005224 <__NVIC_GetPriorityGrouping>
 80053ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	6978      	ldr	r0, [r7, #20]
 80053f4:	f7ff ff90 	bl	8005318 <NVIC_EncodePriority>
 80053f8:	4602      	mov	r2, r0
 80053fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff5f 	bl	80052c4 <__NVIC_SetPriority>
}
 8005406:	bf00      	nop
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	4603      	mov	r3, r0
 8005416:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff ff0f 	bl	8005240 <__NVIC_EnableIRQ>
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	4603      	mov	r3, r0
 8005432:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff ff1f 	bl	800527c <__NVIC_DisableIRQ>
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ff96 	bl	8005380 <SysTick_Config>
 8005454:	4603      	mov	r3, r0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005468:	f7ff feac 	bl	80051c4 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e314      	b.n	8005aa2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a66      	ldr	r2, [pc, #408]	; (8005618 <HAL_DMA_Init+0x1b8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d04a      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a65      	ldr	r2, [pc, #404]	; (800561c <HAL_DMA_Init+0x1bc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d045      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a63      	ldr	r2, [pc, #396]	; (8005620 <HAL_DMA_Init+0x1c0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d040      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a62      	ldr	r2, [pc, #392]	; (8005624 <HAL_DMA_Init+0x1c4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d03b      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a60      	ldr	r2, [pc, #384]	; (8005628 <HAL_DMA_Init+0x1c8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d036      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a5f      	ldr	r2, [pc, #380]	; (800562c <HAL_DMA_Init+0x1cc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d031      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a5d      	ldr	r2, [pc, #372]	; (8005630 <HAL_DMA_Init+0x1d0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d02c      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a5c      	ldr	r2, [pc, #368]	; (8005634 <HAL_DMA_Init+0x1d4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d027      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a5a      	ldr	r2, [pc, #360]	; (8005638 <HAL_DMA_Init+0x1d8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a59      	ldr	r2, [pc, #356]	; (800563c <HAL_DMA_Init+0x1dc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01d      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a57      	ldr	r2, [pc, #348]	; (8005640 <HAL_DMA_Init+0x1e0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a56      	ldr	r2, [pc, #344]	; (8005644 <HAL_DMA_Init+0x1e4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a54      	ldr	r2, [pc, #336]	; (8005648 <HAL_DMA_Init+0x1e8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a53      	ldr	r2, [pc, #332]	; (800564c <HAL_DMA_Init+0x1ec>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a51      	ldr	r2, [pc, #324]	; (8005650 <HAL_DMA_Init+0x1f0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_DMA_Init+0xb8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a50      	ldr	r2, [pc, #320]	; (8005654 <HAL_DMA_Init+0x1f4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d101      	bne.n	800551c <HAL_DMA_Init+0xbc>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_DMA_Init+0xbe>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 813c 	beq.w	800579c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a37      	ldr	r2, [pc, #220]	; (8005618 <HAL_DMA_Init+0x1b8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d04a      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a36      	ldr	r2, [pc, #216]	; (800561c <HAL_DMA_Init+0x1bc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d045      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a34      	ldr	r2, [pc, #208]	; (8005620 <HAL_DMA_Init+0x1c0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d040      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a33      	ldr	r2, [pc, #204]	; (8005624 <HAL_DMA_Init+0x1c4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d03b      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a31      	ldr	r2, [pc, #196]	; (8005628 <HAL_DMA_Init+0x1c8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d036      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a30      	ldr	r2, [pc, #192]	; (800562c <HAL_DMA_Init+0x1cc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d031      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2e      	ldr	r2, [pc, #184]	; (8005630 <HAL_DMA_Init+0x1d0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d02c      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2d      	ldr	r2, [pc, #180]	; (8005634 <HAL_DMA_Init+0x1d4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d027      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2b      	ldr	r2, [pc, #172]	; (8005638 <HAL_DMA_Init+0x1d8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d022      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2a      	ldr	r2, [pc, #168]	; (800563c <HAL_DMA_Init+0x1dc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d01d      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a28      	ldr	r2, [pc, #160]	; (8005640 <HAL_DMA_Init+0x1e0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d018      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a27      	ldr	r2, [pc, #156]	; (8005644 <HAL_DMA_Init+0x1e4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d013      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a25      	ldr	r2, [pc, #148]	; (8005648 <HAL_DMA_Init+0x1e8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00e      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a24      	ldr	r2, [pc, #144]	; (800564c <HAL_DMA_Init+0x1ec>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d009      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a22      	ldr	r2, [pc, #136]	; (8005650 <HAL_DMA_Init+0x1f0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_DMA_Init+0x174>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a21      	ldr	r2, [pc, #132]	; (8005654 <HAL_DMA_Init+0x1f4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d108      	bne.n	80055e6 <HAL_DMA_Init+0x186>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e007      	b.n	80055f6 <HAL_DMA_Init+0x196>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055f6:	e02f      	b.n	8005658 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055f8:	f7ff fde4 	bl	80051c4 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b05      	cmp	r3, #5
 8005604:	d928      	bls.n	8005658 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2203      	movs	r2, #3
 8005610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e244      	b.n	8005aa2 <HAL_DMA_Init+0x642>
 8005618:	40020010 	.word	0x40020010
 800561c:	40020028 	.word	0x40020028
 8005620:	40020040 	.word	0x40020040
 8005624:	40020058 	.word	0x40020058
 8005628:	40020070 	.word	0x40020070
 800562c:	40020088 	.word	0x40020088
 8005630:	400200a0 	.word	0x400200a0
 8005634:	400200b8 	.word	0x400200b8
 8005638:	40020410 	.word	0x40020410
 800563c:	40020428 	.word	0x40020428
 8005640:	40020440 	.word	0x40020440
 8005644:	40020458 	.word	0x40020458
 8005648:	40020470 	.word	0x40020470
 800564c:	40020488 	.word	0x40020488
 8005650:	400204a0 	.word	0x400204a0
 8005654:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1c8      	bne.n	80055f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4b84      	ldr	r3, [pc, #528]	; (8005884 <HAL_DMA_Init+0x424>)
 8005672:	4013      	ands	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800567e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800568a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005696:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d107      	bne.n	80056bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	4313      	orrs	r3, r2
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b28      	cmp	r3, #40	; 0x28
 80056c2:	d903      	bls.n	80056cc <HAL_DMA_Init+0x26c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b2e      	cmp	r3, #46	; 0x2e
 80056ca:	d91f      	bls.n	800570c <HAL_DMA_Init+0x2ac>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2b3e      	cmp	r3, #62	; 0x3e
 80056d2:	d903      	bls.n	80056dc <HAL_DMA_Init+0x27c>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b42      	cmp	r3, #66	; 0x42
 80056da:	d917      	bls.n	800570c <HAL_DMA_Init+0x2ac>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b46      	cmp	r3, #70	; 0x46
 80056e2:	d903      	bls.n	80056ec <HAL_DMA_Init+0x28c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b48      	cmp	r3, #72	; 0x48
 80056ea:	d90f      	bls.n	800570c <HAL_DMA_Init+0x2ac>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b4e      	cmp	r3, #78	; 0x4e
 80056f2:	d903      	bls.n	80056fc <HAL_DMA_Init+0x29c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b52      	cmp	r3, #82	; 0x52
 80056fa:	d907      	bls.n	800570c <HAL_DMA_Init+0x2ac>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b73      	cmp	r3, #115	; 0x73
 8005702:	d905      	bls.n	8005710 <HAL_DMA_Init+0x2b0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b77      	cmp	r3, #119	; 0x77
 800570a:	d801      	bhi.n	8005710 <HAL_DMA_Init+0x2b0>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <HAL_DMA_Init+0x2b2>
 8005710:	2300      	movs	r3, #0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800571c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 0307 	bic.w	r3, r3, #7
 8005734:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	2b04      	cmp	r3, #4
 8005746:	d117      	bne.n	8005778 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f002 fce6 	bl	800812c <DMA_CheckFifoParam>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2240      	movs	r2, #64	; 0x40
 800576a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e194      	b.n	8005aa2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f002 fc21 	bl	8007fc8 <DMA_CalcBaseAndBitshift>
 8005786:	4603      	mov	r3, r0
 8005788:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	223f      	movs	r2, #63	; 0x3f
 8005794:	409a      	lsls	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	609a      	str	r2, [r3, #8]
 800579a:	e0ca      	b.n	8005932 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a39      	ldr	r2, [pc, #228]	; (8005888 <HAL_DMA_Init+0x428>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d022      	beq.n	80057ec <HAL_DMA_Init+0x38c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a38      	ldr	r2, [pc, #224]	; (800588c <HAL_DMA_Init+0x42c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d01d      	beq.n	80057ec <HAL_DMA_Init+0x38c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a36      	ldr	r2, [pc, #216]	; (8005890 <HAL_DMA_Init+0x430>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d018      	beq.n	80057ec <HAL_DMA_Init+0x38c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a35      	ldr	r2, [pc, #212]	; (8005894 <HAL_DMA_Init+0x434>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d013      	beq.n	80057ec <HAL_DMA_Init+0x38c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a33      	ldr	r2, [pc, #204]	; (8005898 <HAL_DMA_Init+0x438>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_DMA_Init+0x38c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a32      	ldr	r2, [pc, #200]	; (800589c <HAL_DMA_Init+0x43c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_DMA_Init+0x38c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a30      	ldr	r2, [pc, #192]	; (80058a0 <HAL_DMA_Init+0x440>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_DMA_Init+0x38c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a2f      	ldr	r2, [pc, #188]	; (80058a4 <HAL_DMA_Init+0x444>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d101      	bne.n	80057f0 <HAL_DMA_Init+0x390>
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <HAL_DMA_Init+0x392>
 80057f0:	2300      	movs	r3, #0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8094 	beq.w	8005920 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a22      	ldr	r2, [pc, #136]	; (8005888 <HAL_DMA_Init+0x428>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d021      	beq.n	8005846 <HAL_DMA_Init+0x3e6>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a21      	ldr	r2, [pc, #132]	; (800588c <HAL_DMA_Init+0x42c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d01c      	beq.n	8005846 <HAL_DMA_Init+0x3e6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1f      	ldr	r2, [pc, #124]	; (8005890 <HAL_DMA_Init+0x430>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d017      	beq.n	8005846 <HAL_DMA_Init+0x3e6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <HAL_DMA_Init+0x434>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d012      	beq.n	8005846 <HAL_DMA_Init+0x3e6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <HAL_DMA_Init+0x438>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00d      	beq.n	8005846 <HAL_DMA_Init+0x3e6>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1b      	ldr	r2, [pc, #108]	; (800589c <HAL_DMA_Init+0x43c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d008      	beq.n	8005846 <HAL_DMA_Init+0x3e6>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <HAL_DMA_Init+0x440>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <HAL_DMA_Init+0x3e6>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <HAL_DMA_Init+0x444>)
 8005844:	4293      	cmp	r3, r2
 8005846:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <HAL_DMA_Init+0x448>)
 8005864:	4013      	ands	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d01d      	beq.n	80058ac <HAL_DMA_Init+0x44c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b80      	cmp	r3, #128	; 0x80
 8005876:	d102      	bne.n	800587e <HAL_DMA_Init+0x41e>
 8005878:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800587c:	e017      	b.n	80058ae <HAL_DMA_Init+0x44e>
 800587e:	2300      	movs	r3, #0
 8005880:	e015      	b.n	80058ae <HAL_DMA_Init+0x44e>
 8005882:	bf00      	nop
 8005884:	fe10803f 	.word	0xfe10803f
 8005888:	58025408 	.word	0x58025408
 800588c:	5802541c 	.word	0x5802541c
 8005890:	58025430 	.word	0x58025430
 8005894:	58025444 	.word	0x58025444
 8005898:	58025458 	.word	0x58025458
 800589c:	5802546c 	.word	0x5802546c
 80058a0:	58025480 	.word	0x58025480
 80058a4:	58025494 	.word	0x58025494
 80058a8:	fffe000f 	.word	0xfffe000f
 80058ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	68d2      	ldr	r2, [r2, #12]
 80058b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	4b6e      	ldr	r3, [pc, #440]	; (8005aac <HAL_DMA_Init+0x64c>)
 80058f4:	4413      	add	r3, r2
 80058f6:	4a6e      	ldr	r2, [pc, #440]	; (8005ab0 <HAL_DMA_Init+0x650>)
 80058f8:	fba2 2303 	umull	r2, r3, r2, r3
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	009a      	lsls	r2, r3, #2
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f002 fb5f 	bl	8007fc8 <DMA_CalcBaseAndBitshift>
 800590a:	4603      	mov	r3, r0
 800590c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005912:	f003 031f 	and.w	r3, r3, #31
 8005916:	2201      	movs	r2, #1
 8005918:	409a      	lsls	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	605a      	str	r2, [r3, #4]
 800591e:	e008      	b.n	8005932 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2240      	movs	r2, #64	; 0x40
 8005924:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2203      	movs	r2, #3
 800592a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e0b7      	b.n	8005aa2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a5f      	ldr	r2, [pc, #380]	; (8005ab4 <HAL_DMA_Init+0x654>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d072      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a5d      	ldr	r2, [pc, #372]	; (8005ab8 <HAL_DMA_Init+0x658>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d06d      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a5c      	ldr	r2, [pc, #368]	; (8005abc <HAL_DMA_Init+0x65c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d068      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a5a      	ldr	r2, [pc, #360]	; (8005ac0 <HAL_DMA_Init+0x660>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d063      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a59      	ldr	r2, [pc, #356]	; (8005ac4 <HAL_DMA_Init+0x664>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d05e      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a57      	ldr	r2, [pc, #348]	; (8005ac8 <HAL_DMA_Init+0x668>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d059      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a56      	ldr	r2, [pc, #344]	; (8005acc <HAL_DMA_Init+0x66c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d054      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a54      	ldr	r2, [pc, #336]	; (8005ad0 <HAL_DMA_Init+0x670>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d04f      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a53      	ldr	r2, [pc, #332]	; (8005ad4 <HAL_DMA_Init+0x674>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d04a      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a51      	ldr	r2, [pc, #324]	; (8005ad8 <HAL_DMA_Init+0x678>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d045      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a50      	ldr	r2, [pc, #320]	; (8005adc <HAL_DMA_Init+0x67c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d040      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a4e      	ldr	r2, [pc, #312]	; (8005ae0 <HAL_DMA_Init+0x680>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d03b      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a4d      	ldr	r2, [pc, #308]	; (8005ae4 <HAL_DMA_Init+0x684>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d036      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a4b      	ldr	r2, [pc, #300]	; (8005ae8 <HAL_DMA_Init+0x688>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d031      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a4a      	ldr	r2, [pc, #296]	; (8005aec <HAL_DMA_Init+0x68c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d02c      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a48      	ldr	r2, [pc, #288]	; (8005af0 <HAL_DMA_Init+0x690>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d027      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a47      	ldr	r2, [pc, #284]	; (8005af4 <HAL_DMA_Init+0x694>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d022      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a45      	ldr	r2, [pc, #276]	; (8005af8 <HAL_DMA_Init+0x698>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01d      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a44      	ldr	r2, [pc, #272]	; (8005afc <HAL_DMA_Init+0x69c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a42      	ldr	r2, [pc, #264]	; (8005b00 <HAL_DMA_Init+0x6a0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a41      	ldr	r2, [pc, #260]	; (8005b04 <HAL_DMA_Init+0x6a4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <HAL_DMA_Init+0x6a8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a3e      	ldr	r2, [pc, #248]	; (8005b0c <HAL_DMA_Init+0x6ac>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_DMA_Init+0x5c2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a3c      	ldr	r2, [pc, #240]	; (8005b10 <HAL_DMA_Init+0x6b0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d101      	bne.n	8005a26 <HAL_DMA_Init+0x5c6>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <HAL_DMA_Init+0x5c8>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d032      	beq.n	8005a92 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f002 fbf9 	bl	8008224 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b80      	cmp	r3, #128	; 0x80
 8005a38:	d102      	bne.n	8005a40 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a54:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d010      	beq.n	8005a80 <HAL_DMA_Init+0x620>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d80c      	bhi.n	8005a80 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f002 fc76 	bl	8008358 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	e008      	b.n	8005a92 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	a7fdabf8 	.word	0xa7fdabf8
 8005ab0:	cccccccd 	.word	0xcccccccd
 8005ab4:	40020010 	.word	0x40020010
 8005ab8:	40020028 	.word	0x40020028
 8005abc:	40020040 	.word	0x40020040
 8005ac0:	40020058 	.word	0x40020058
 8005ac4:	40020070 	.word	0x40020070
 8005ac8:	40020088 	.word	0x40020088
 8005acc:	400200a0 	.word	0x400200a0
 8005ad0:	400200b8 	.word	0x400200b8
 8005ad4:	40020410 	.word	0x40020410
 8005ad8:	40020428 	.word	0x40020428
 8005adc:	40020440 	.word	0x40020440
 8005ae0:	40020458 	.word	0x40020458
 8005ae4:	40020470 	.word	0x40020470
 8005ae8:	40020488 	.word	0x40020488
 8005aec:	400204a0 	.word	0x400204a0
 8005af0:	400204b8 	.word	0x400204b8
 8005af4:	58025408 	.word	0x58025408
 8005af8:	5802541c 	.word	0x5802541c
 8005afc:	58025430 	.word	0x58025430
 8005b00:	58025444 	.word	0x58025444
 8005b04:	58025458 	.word	0x58025458
 8005b08:	5802546c 	.word	0x5802546c
 8005b0c:	58025480 	.word	0x58025480
 8005b10:	58025494 	.word	0x58025494

08005b14 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e1a8      	b.n	8005e78 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a82      	ldr	r2, [pc, #520]	; (8005d34 <HAL_DMA_DeInit+0x220>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d04a      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a80      	ldr	r2, [pc, #512]	; (8005d38 <HAL_DMA_DeInit+0x224>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d045      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a7f      	ldr	r2, [pc, #508]	; (8005d3c <HAL_DMA_DeInit+0x228>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d040      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a7d      	ldr	r2, [pc, #500]	; (8005d40 <HAL_DMA_DeInit+0x22c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d03b      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a7c      	ldr	r2, [pc, #496]	; (8005d44 <HAL_DMA_DeInit+0x230>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d036      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a7a      	ldr	r2, [pc, #488]	; (8005d48 <HAL_DMA_DeInit+0x234>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d031      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a79      	ldr	r2, [pc, #484]	; (8005d4c <HAL_DMA_DeInit+0x238>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d02c      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a77      	ldr	r2, [pc, #476]	; (8005d50 <HAL_DMA_DeInit+0x23c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d027      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a76      	ldr	r2, [pc, #472]	; (8005d54 <HAL_DMA_DeInit+0x240>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d022      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a74      	ldr	r2, [pc, #464]	; (8005d58 <HAL_DMA_DeInit+0x244>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d01d      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a73      	ldr	r2, [pc, #460]	; (8005d5c <HAL_DMA_DeInit+0x248>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d018      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a71      	ldr	r2, [pc, #452]	; (8005d60 <HAL_DMA_DeInit+0x24c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a70      	ldr	r2, [pc, #448]	; (8005d64 <HAL_DMA_DeInit+0x250>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6e      	ldr	r2, [pc, #440]	; (8005d68 <HAL_DMA_DeInit+0x254>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a6d      	ldr	r2, [pc, #436]	; (8005d6c <HAL_DMA_DeInit+0x258>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_DMA_DeInit+0xb2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a6b      	ldr	r2, [pc, #428]	; (8005d70 <HAL_DMA_DeInit+0x25c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d108      	bne.n	8005bd8 <HAL_DMA_DeInit+0xc4>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0201 	bic.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e007      	b.n	8005be8 <HAL_DMA_DeInit+0xd4>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a51      	ldr	r2, [pc, #324]	; (8005d34 <HAL_DMA_DeInit+0x220>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d04a      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a50      	ldr	r2, [pc, #320]	; (8005d38 <HAL_DMA_DeInit+0x224>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d045      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a4e      	ldr	r2, [pc, #312]	; (8005d3c <HAL_DMA_DeInit+0x228>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d040      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a4d      	ldr	r2, [pc, #308]	; (8005d40 <HAL_DMA_DeInit+0x22c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d03b      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a4b      	ldr	r2, [pc, #300]	; (8005d44 <HAL_DMA_DeInit+0x230>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d036      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a4a      	ldr	r2, [pc, #296]	; (8005d48 <HAL_DMA_DeInit+0x234>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d031      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a48      	ldr	r2, [pc, #288]	; (8005d4c <HAL_DMA_DeInit+0x238>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d02c      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a47      	ldr	r2, [pc, #284]	; (8005d50 <HAL_DMA_DeInit+0x23c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d027      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a45      	ldr	r2, [pc, #276]	; (8005d54 <HAL_DMA_DeInit+0x240>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d022      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a44      	ldr	r2, [pc, #272]	; (8005d58 <HAL_DMA_DeInit+0x244>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d01d      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a42      	ldr	r2, [pc, #264]	; (8005d5c <HAL_DMA_DeInit+0x248>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d018      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a41      	ldr	r2, [pc, #260]	; (8005d60 <HAL_DMA_DeInit+0x24c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d013      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a3f      	ldr	r2, [pc, #252]	; (8005d64 <HAL_DMA_DeInit+0x250>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00e      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a3e      	ldr	r2, [pc, #248]	; (8005d68 <HAL_DMA_DeInit+0x254>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d009      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a3c      	ldr	r2, [pc, #240]	; (8005d6c <HAL_DMA_DeInit+0x258>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <HAL_DMA_DeInit+0x174>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a3b      	ldr	r2, [pc, #236]	; (8005d70 <HAL_DMA_DeInit+0x25c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d101      	bne.n	8005c8c <HAL_DMA_DeInit+0x178>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <HAL_DMA_DeInit+0x17a>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d025      	beq.n	8005cde <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2221      	movs	r2, #33	; 0x21
 8005cc0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f002 f980 	bl	8007fc8 <DMA_CalcBaseAndBitshift>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	f003 031f 	and.w	r3, r3, #31
 8005cd4:	223f      	movs	r2, #63	; 0x3f
 8005cd6:	409a      	lsls	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	e081      	b.n	8005de2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a24      	ldr	r2, [pc, #144]	; (8005d74 <HAL_DMA_DeInit+0x260>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d022      	beq.n	8005d2e <HAL_DMA_DeInit+0x21a>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a22      	ldr	r2, [pc, #136]	; (8005d78 <HAL_DMA_DeInit+0x264>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d01d      	beq.n	8005d2e <HAL_DMA_DeInit+0x21a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <HAL_DMA_DeInit+0x268>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d018      	beq.n	8005d2e <HAL_DMA_DeInit+0x21a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <HAL_DMA_DeInit+0x26c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_DMA_DeInit+0x21a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <HAL_DMA_DeInit+0x270>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <HAL_DMA_DeInit+0x21a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <HAL_DMA_DeInit+0x274>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d009      	beq.n	8005d2e <HAL_DMA_DeInit+0x21a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <HAL_DMA_DeInit+0x278>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <HAL_DMA_DeInit+0x21a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <HAL_DMA_DeInit+0x27c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d132      	bne.n	8005d94 <HAL_DMA_DeInit+0x280>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e031      	b.n	8005d96 <HAL_DMA_DeInit+0x282>
 8005d32:	bf00      	nop
 8005d34:	40020010 	.word	0x40020010
 8005d38:	40020028 	.word	0x40020028
 8005d3c:	40020040 	.word	0x40020040
 8005d40:	40020058 	.word	0x40020058
 8005d44:	40020070 	.word	0x40020070
 8005d48:	40020088 	.word	0x40020088
 8005d4c:	400200a0 	.word	0x400200a0
 8005d50:	400200b8 	.word	0x400200b8
 8005d54:	40020410 	.word	0x40020410
 8005d58:	40020428 	.word	0x40020428
 8005d5c:	40020440 	.word	0x40020440
 8005d60:	40020458 	.word	0x40020458
 8005d64:	40020470 	.word	0x40020470
 8005d68:	40020488 	.word	0x40020488
 8005d6c:	400204a0 	.word	0x400204a0
 8005d70:	400204b8 	.word	0x400204b8
 8005d74:	58025408 	.word	0x58025408
 8005d78:	5802541c 	.word	0x5802541c
 8005d7c:	58025430 	.word	0x58025430
 8005d80:	58025444 	.word	0x58025444
 8005d84:	58025458 	.word	0x58025458
 8005d88:	5802546c 	.word	0x5802546c
 8005d8c:	58025480 	.word	0x58025480
 8005d90:	58025494 	.word	0x58025494
 8005d94:	2300      	movs	r3, #0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d021      	beq.n	8005dde <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2200      	movs	r2, #0
 8005db0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2200      	movs	r2, #0
 8005db8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f002 f900 	bl	8007fc8 <DMA_CalcBaseAndBitshift>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	409a      	lsls	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	e001      	b.n	8005de2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e04a      	b.n	8005e78 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f002 fa1e 	bl	8008224 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e00:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00f      	beq.n	8005e2a <HAL_DMA_DeInit+0x316>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d80b      	bhi.n	8005e2a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f002 faa0 	bl	8008358 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e28:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e226      	b.n	80062ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_DMA_Start_IT+0x2a>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e21f      	b.n	80062ea <HAL_DMA_Start_IT+0x46a>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	f040 820a 	bne.w	80062d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a68      	ldr	r2, [pc, #416]	; (8006074 <HAL_DMA_Start_IT+0x1f4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d04a      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a66      	ldr	r2, [pc, #408]	; (8006078 <HAL_DMA_Start_IT+0x1f8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d045      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a65      	ldr	r2, [pc, #404]	; (800607c <HAL_DMA_Start_IT+0x1fc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d040      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a63      	ldr	r2, [pc, #396]	; (8006080 <HAL_DMA_Start_IT+0x200>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d03b      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a62      	ldr	r2, [pc, #392]	; (8006084 <HAL_DMA_Start_IT+0x204>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d036      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a60      	ldr	r2, [pc, #384]	; (8006088 <HAL_DMA_Start_IT+0x208>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d031      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a5f      	ldr	r2, [pc, #380]	; (800608c <HAL_DMA_Start_IT+0x20c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d02c      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a5d      	ldr	r2, [pc, #372]	; (8006090 <HAL_DMA_Start_IT+0x210>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d027      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a5c      	ldr	r2, [pc, #368]	; (8006094 <HAL_DMA_Start_IT+0x214>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d022      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a5a      	ldr	r2, [pc, #360]	; (8006098 <HAL_DMA_Start_IT+0x218>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d01d      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a59      	ldr	r2, [pc, #356]	; (800609c <HAL_DMA_Start_IT+0x21c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d018      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a57      	ldr	r2, [pc, #348]	; (80060a0 <HAL_DMA_Start_IT+0x220>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a56      	ldr	r2, [pc, #344]	; (80060a4 <HAL_DMA_Start_IT+0x224>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00e      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a54      	ldr	r2, [pc, #336]	; (80060a8 <HAL_DMA_Start_IT+0x228>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a53      	ldr	r2, [pc, #332]	; (80060ac <HAL_DMA_Start_IT+0x22c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_DMA_Start_IT+0xee>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a51      	ldr	r2, [pc, #324]	; (80060b0 <HAL_DMA_Start_IT+0x230>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d108      	bne.n	8005f80 <HAL_DMA_Start_IT+0x100>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0201 	bic.w	r2, r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e007      	b.n	8005f90 <HAL_DMA_Start_IT+0x110>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0201 	bic.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f001 fe6a 	bl	8007c70 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a34      	ldr	r2, [pc, #208]	; (8006074 <HAL_DMA_Start_IT+0x1f4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d04a      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a33      	ldr	r2, [pc, #204]	; (8006078 <HAL_DMA_Start_IT+0x1f8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d045      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a31      	ldr	r2, [pc, #196]	; (800607c <HAL_DMA_Start_IT+0x1fc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d040      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a30      	ldr	r2, [pc, #192]	; (8006080 <HAL_DMA_Start_IT+0x200>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d03b      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2e      	ldr	r2, [pc, #184]	; (8006084 <HAL_DMA_Start_IT+0x204>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d036      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <HAL_DMA_Start_IT+0x208>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d031      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2b      	ldr	r2, [pc, #172]	; (800608c <HAL_DMA_Start_IT+0x20c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d02c      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2a      	ldr	r2, [pc, #168]	; (8006090 <HAL_DMA_Start_IT+0x210>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d027      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a28      	ldr	r2, [pc, #160]	; (8006094 <HAL_DMA_Start_IT+0x214>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d022      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a27      	ldr	r2, [pc, #156]	; (8006098 <HAL_DMA_Start_IT+0x218>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d01d      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a25      	ldr	r2, [pc, #148]	; (800609c <HAL_DMA_Start_IT+0x21c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d018      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <HAL_DMA_Start_IT+0x220>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <HAL_DMA_Start_IT+0x224>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00e      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <HAL_DMA_Start_IT+0x228>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d009      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <HAL_DMA_Start_IT+0x22c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d004      	beq.n	800603c <HAL_DMA_Start_IT+0x1bc>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_DMA_Start_IT+0x230>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d101      	bne.n	8006040 <HAL_DMA_Start_IT+0x1c0>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <HAL_DMA_Start_IT+0x1c2>
 8006040:	2300      	movs	r3, #0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d036      	beq.n	80060b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f023 021e 	bic.w	r2, r3, #30
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0216 	orr.w	r2, r2, #22
 8006058:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d03e      	beq.n	80060e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0208 	orr.w	r2, r2, #8
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	e035      	b.n	80060e0 <HAL_DMA_Start_IT+0x260>
 8006074:	40020010 	.word	0x40020010
 8006078:	40020028 	.word	0x40020028
 800607c:	40020040 	.word	0x40020040
 8006080:	40020058 	.word	0x40020058
 8006084:	40020070 	.word	0x40020070
 8006088:	40020088 	.word	0x40020088
 800608c:	400200a0 	.word	0x400200a0
 8006090:	400200b8 	.word	0x400200b8
 8006094:	40020410 	.word	0x40020410
 8006098:	40020428 	.word	0x40020428
 800609c:	40020440 	.word	0x40020440
 80060a0:	40020458 	.word	0x40020458
 80060a4:	40020470 	.word	0x40020470
 80060a8:	40020488 	.word	0x40020488
 80060ac:	400204a0 	.word	0x400204a0
 80060b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f023 020e 	bic.w	r2, r3, #14
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 020a 	orr.w	r2, r2, #10
 80060c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0204 	orr.w	r2, r2, #4
 80060de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a83      	ldr	r2, [pc, #524]	; (80062f4 <HAL_DMA_Start_IT+0x474>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d072      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a82      	ldr	r2, [pc, #520]	; (80062f8 <HAL_DMA_Start_IT+0x478>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d06d      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a80      	ldr	r2, [pc, #512]	; (80062fc <HAL_DMA_Start_IT+0x47c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d068      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a7f      	ldr	r2, [pc, #508]	; (8006300 <HAL_DMA_Start_IT+0x480>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d063      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a7d      	ldr	r2, [pc, #500]	; (8006304 <HAL_DMA_Start_IT+0x484>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d05e      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a7c      	ldr	r2, [pc, #496]	; (8006308 <HAL_DMA_Start_IT+0x488>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d059      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a7a      	ldr	r2, [pc, #488]	; (800630c <HAL_DMA_Start_IT+0x48c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d054      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a79      	ldr	r2, [pc, #484]	; (8006310 <HAL_DMA_Start_IT+0x490>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d04f      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a77      	ldr	r2, [pc, #476]	; (8006314 <HAL_DMA_Start_IT+0x494>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d04a      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a76      	ldr	r2, [pc, #472]	; (8006318 <HAL_DMA_Start_IT+0x498>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d045      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a74      	ldr	r2, [pc, #464]	; (800631c <HAL_DMA_Start_IT+0x49c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d040      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a73      	ldr	r2, [pc, #460]	; (8006320 <HAL_DMA_Start_IT+0x4a0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d03b      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a71      	ldr	r2, [pc, #452]	; (8006324 <HAL_DMA_Start_IT+0x4a4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d036      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a70      	ldr	r2, [pc, #448]	; (8006328 <HAL_DMA_Start_IT+0x4a8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d031      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a6e      	ldr	r2, [pc, #440]	; (800632c <HAL_DMA_Start_IT+0x4ac>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d02c      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a6d      	ldr	r2, [pc, #436]	; (8006330 <HAL_DMA_Start_IT+0x4b0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d027      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a6b      	ldr	r2, [pc, #428]	; (8006334 <HAL_DMA_Start_IT+0x4b4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d022      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a6a      	ldr	r2, [pc, #424]	; (8006338 <HAL_DMA_Start_IT+0x4b8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d01d      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a68      	ldr	r2, [pc, #416]	; (800633c <HAL_DMA_Start_IT+0x4bc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d018      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a67      	ldr	r2, [pc, #412]	; (8006340 <HAL_DMA_Start_IT+0x4c0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d013      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a65      	ldr	r2, [pc, #404]	; (8006344 <HAL_DMA_Start_IT+0x4c4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00e      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a64      	ldr	r2, [pc, #400]	; (8006348 <HAL_DMA_Start_IT+0x4c8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d009      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a62      	ldr	r2, [pc, #392]	; (800634c <HAL_DMA_Start_IT+0x4cc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d004      	beq.n	80061d0 <HAL_DMA_Start_IT+0x350>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a61      	ldr	r2, [pc, #388]	; (8006350 <HAL_DMA_Start_IT+0x4d0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d101      	bne.n	80061d4 <HAL_DMA_Start_IT+0x354>
 80061d0:	2301      	movs	r3, #1
 80061d2:	e000      	b.n	80061d6 <HAL_DMA_Start_IT+0x356>
 80061d4:	2300      	movs	r3, #0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01a      	beq.n	8006210 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800620a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800620e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a37      	ldr	r2, [pc, #220]	; (80062f4 <HAL_DMA_Start_IT+0x474>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d04a      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a36      	ldr	r2, [pc, #216]	; (80062f8 <HAL_DMA_Start_IT+0x478>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d045      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a34      	ldr	r2, [pc, #208]	; (80062fc <HAL_DMA_Start_IT+0x47c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d040      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a33      	ldr	r2, [pc, #204]	; (8006300 <HAL_DMA_Start_IT+0x480>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d03b      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a31      	ldr	r2, [pc, #196]	; (8006304 <HAL_DMA_Start_IT+0x484>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d036      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a30      	ldr	r2, [pc, #192]	; (8006308 <HAL_DMA_Start_IT+0x488>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d031      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2e      	ldr	r2, [pc, #184]	; (800630c <HAL_DMA_Start_IT+0x48c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d02c      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2d      	ldr	r2, [pc, #180]	; (8006310 <HAL_DMA_Start_IT+0x490>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d027      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2b      	ldr	r2, [pc, #172]	; (8006314 <HAL_DMA_Start_IT+0x494>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d022      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <HAL_DMA_Start_IT+0x498>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d01d      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a28      	ldr	r2, [pc, #160]	; (800631c <HAL_DMA_Start_IT+0x49c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d018      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a27      	ldr	r2, [pc, #156]	; (8006320 <HAL_DMA_Start_IT+0x4a0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d013      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a25      	ldr	r2, [pc, #148]	; (8006324 <HAL_DMA_Start_IT+0x4a4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00e      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a24      	ldr	r2, [pc, #144]	; (8006328 <HAL_DMA_Start_IT+0x4a8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d009      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a22      	ldr	r2, [pc, #136]	; (800632c <HAL_DMA_Start_IT+0x4ac>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d004      	beq.n	80062b0 <HAL_DMA_Start_IT+0x430>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a21      	ldr	r2, [pc, #132]	; (8006330 <HAL_DMA_Start_IT+0x4b0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d108      	bne.n	80062c2 <HAL_DMA_Start_IT+0x442>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	e012      	b.n	80062e8 <HAL_DMA_Start_IT+0x468>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0201 	orr.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e009      	b.n	80062e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8
 8006334:	58025408 	.word	0x58025408
 8006338:	5802541c 	.word	0x5802541c
 800633c:	58025430 	.word	0x58025430
 8006340:	58025444 	.word	0x58025444
 8006344:	58025458 	.word	0x58025458
 8006348:	5802546c 	.word	0x5802546c
 800634c:	58025480 	.word	0x58025480
 8006350:	58025494 	.word	0x58025494

08006354 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800635c:	f7fe ff32 	bl	80051c4 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e2dc      	b.n	8006926 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d008      	beq.n	800638a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2280      	movs	r2, #128	; 0x80
 800637c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e2cd      	b.n	8006926 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a76      	ldr	r2, [pc, #472]	; (8006568 <HAL_DMA_Abort+0x214>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d04a      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a74      	ldr	r2, [pc, #464]	; (800656c <HAL_DMA_Abort+0x218>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d045      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a73      	ldr	r2, [pc, #460]	; (8006570 <HAL_DMA_Abort+0x21c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d040      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a71      	ldr	r2, [pc, #452]	; (8006574 <HAL_DMA_Abort+0x220>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d03b      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a70      	ldr	r2, [pc, #448]	; (8006578 <HAL_DMA_Abort+0x224>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d036      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a6e      	ldr	r2, [pc, #440]	; (800657c <HAL_DMA_Abort+0x228>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d031      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a6d      	ldr	r2, [pc, #436]	; (8006580 <HAL_DMA_Abort+0x22c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d02c      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a6b      	ldr	r2, [pc, #428]	; (8006584 <HAL_DMA_Abort+0x230>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d027      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a6a      	ldr	r2, [pc, #424]	; (8006588 <HAL_DMA_Abort+0x234>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d022      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a68      	ldr	r2, [pc, #416]	; (800658c <HAL_DMA_Abort+0x238>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01d      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a67      	ldr	r2, [pc, #412]	; (8006590 <HAL_DMA_Abort+0x23c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d018      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a65      	ldr	r2, [pc, #404]	; (8006594 <HAL_DMA_Abort+0x240>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a64      	ldr	r2, [pc, #400]	; (8006598 <HAL_DMA_Abort+0x244>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a62      	ldr	r2, [pc, #392]	; (800659c <HAL_DMA_Abort+0x248>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a61      	ldr	r2, [pc, #388]	; (80065a0 <HAL_DMA_Abort+0x24c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_DMA_Abort+0xd6>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a5f      	ldr	r2, [pc, #380]	; (80065a4 <HAL_DMA_Abort+0x250>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d101      	bne.n	800642e <HAL_DMA_Abort+0xda>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <HAL_DMA_Abort+0xdc>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d013      	beq.n	800645c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 021e 	bic.w	r2, r2, #30
 8006442:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006452:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	e00a      	b.n	8006472 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 020e 	bic.w	r2, r2, #14
 800646a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a3c      	ldr	r2, [pc, #240]	; (8006568 <HAL_DMA_Abort+0x214>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d072      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a3a      	ldr	r2, [pc, #232]	; (800656c <HAL_DMA_Abort+0x218>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d06d      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a39      	ldr	r2, [pc, #228]	; (8006570 <HAL_DMA_Abort+0x21c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d068      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a37      	ldr	r2, [pc, #220]	; (8006574 <HAL_DMA_Abort+0x220>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d063      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a36      	ldr	r2, [pc, #216]	; (8006578 <HAL_DMA_Abort+0x224>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d05e      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a34      	ldr	r2, [pc, #208]	; (800657c <HAL_DMA_Abort+0x228>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d059      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a33      	ldr	r2, [pc, #204]	; (8006580 <HAL_DMA_Abort+0x22c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d054      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a31      	ldr	r2, [pc, #196]	; (8006584 <HAL_DMA_Abort+0x230>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d04f      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a30      	ldr	r2, [pc, #192]	; (8006588 <HAL_DMA_Abort+0x234>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d04a      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a2e      	ldr	r2, [pc, #184]	; (800658c <HAL_DMA_Abort+0x238>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d045      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2d      	ldr	r2, [pc, #180]	; (8006590 <HAL_DMA_Abort+0x23c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d040      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a2b      	ldr	r2, [pc, #172]	; (8006594 <HAL_DMA_Abort+0x240>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d03b      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <HAL_DMA_Abort+0x244>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d036      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a28      	ldr	r2, [pc, #160]	; (800659c <HAL_DMA_Abort+0x248>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d031      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a27      	ldr	r2, [pc, #156]	; (80065a0 <HAL_DMA_Abort+0x24c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d02c      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a25      	ldr	r2, [pc, #148]	; (80065a4 <HAL_DMA_Abort+0x250>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d027      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a24      	ldr	r2, [pc, #144]	; (80065a8 <HAL_DMA_Abort+0x254>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d022      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a22      	ldr	r2, [pc, #136]	; (80065ac <HAL_DMA_Abort+0x258>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01d      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a21      	ldr	r2, [pc, #132]	; (80065b0 <HAL_DMA_Abort+0x25c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d018      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1f      	ldr	r2, [pc, #124]	; (80065b4 <HAL_DMA_Abort+0x260>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1e      	ldr	r2, [pc, #120]	; (80065b8 <HAL_DMA_Abort+0x264>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00e      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1c      	ldr	r2, [pc, #112]	; (80065bc <HAL_DMA_Abort+0x268>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d009      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <HAL_DMA_Abort+0x26c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <HAL_DMA_Abort+0x20e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a19      	ldr	r2, [pc, #100]	; (80065c4 <HAL_DMA_Abort+0x270>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d132      	bne.n	80065c8 <HAL_DMA_Abort+0x274>
 8006562:	2301      	movs	r3, #1
 8006564:	e031      	b.n	80065ca <HAL_DMA_Abort+0x276>
 8006566:	bf00      	nop
 8006568:	40020010 	.word	0x40020010
 800656c:	40020028 	.word	0x40020028
 8006570:	40020040 	.word	0x40020040
 8006574:	40020058 	.word	0x40020058
 8006578:	40020070 	.word	0x40020070
 800657c:	40020088 	.word	0x40020088
 8006580:	400200a0 	.word	0x400200a0
 8006584:	400200b8 	.word	0x400200b8
 8006588:	40020410 	.word	0x40020410
 800658c:	40020428 	.word	0x40020428
 8006590:	40020440 	.word	0x40020440
 8006594:	40020458 	.word	0x40020458
 8006598:	40020470 	.word	0x40020470
 800659c:	40020488 	.word	0x40020488
 80065a0:	400204a0 	.word	0x400204a0
 80065a4:	400204b8 	.word	0x400204b8
 80065a8:	58025408 	.word	0x58025408
 80065ac:	5802541c 	.word	0x5802541c
 80065b0:	58025430 	.word	0x58025430
 80065b4:	58025444 	.word	0x58025444
 80065b8:	58025458 	.word	0x58025458
 80065bc:	5802546c 	.word	0x5802546c
 80065c0:	58025480 	.word	0x58025480
 80065c4:	58025494 	.word	0x58025494
 80065c8:	2300      	movs	r3, #0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d007      	beq.n	80065de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a6d      	ldr	r2, [pc, #436]	; (8006798 <HAL_DMA_Abort+0x444>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d04a      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a6b      	ldr	r2, [pc, #428]	; (800679c <HAL_DMA_Abort+0x448>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d045      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a6a      	ldr	r2, [pc, #424]	; (80067a0 <HAL_DMA_Abort+0x44c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d040      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a68      	ldr	r2, [pc, #416]	; (80067a4 <HAL_DMA_Abort+0x450>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d03b      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a67      	ldr	r2, [pc, #412]	; (80067a8 <HAL_DMA_Abort+0x454>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d036      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a65      	ldr	r2, [pc, #404]	; (80067ac <HAL_DMA_Abort+0x458>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d031      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a64      	ldr	r2, [pc, #400]	; (80067b0 <HAL_DMA_Abort+0x45c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d02c      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a62      	ldr	r2, [pc, #392]	; (80067b4 <HAL_DMA_Abort+0x460>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d027      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a61      	ldr	r2, [pc, #388]	; (80067b8 <HAL_DMA_Abort+0x464>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d022      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a5f      	ldr	r2, [pc, #380]	; (80067bc <HAL_DMA_Abort+0x468>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01d      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a5e      	ldr	r2, [pc, #376]	; (80067c0 <HAL_DMA_Abort+0x46c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d018      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a5c      	ldr	r2, [pc, #368]	; (80067c4 <HAL_DMA_Abort+0x470>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a5b      	ldr	r2, [pc, #364]	; (80067c8 <HAL_DMA_Abort+0x474>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00e      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a59      	ldr	r2, [pc, #356]	; (80067cc <HAL_DMA_Abort+0x478>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a58      	ldr	r2, [pc, #352]	; (80067d0 <HAL_DMA_Abort+0x47c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <HAL_DMA_Abort+0x32a>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a56      	ldr	r2, [pc, #344]	; (80067d4 <HAL_DMA_Abort+0x480>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d108      	bne.n	8006690 <HAL_DMA_Abort+0x33c>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e007      	b.n	80066a0 <HAL_DMA_Abort+0x34c>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066a0:	e013      	b.n	80066ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066a2:	f7fe fd8f 	bl	80051c4 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b05      	cmp	r3, #5
 80066ae:	d90c      	bls.n	80066ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2203      	movs	r2, #3
 80066ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e12d      	b.n	8006926 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e5      	bne.n	80066a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a2f      	ldr	r2, [pc, #188]	; (8006798 <HAL_DMA_Abort+0x444>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d04a      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a2d      	ldr	r2, [pc, #180]	; (800679c <HAL_DMA_Abort+0x448>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d045      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a2c      	ldr	r2, [pc, #176]	; (80067a0 <HAL_DMA_Abort+0x44c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d040      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a2a      	ldr	r2, [pc, #168]	; (80067a4 <HAL_DMA_Abort+0x450>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d03b      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a29      	ldr	r2, [pc, #164]	; (80067a8 <HAL_DMA_Abort+0x454>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d036      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a27      	ldr	r2, [pc, #156]	; (80067ac <HAL_DMA_Abort+0x458>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d031      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a26      	ldr	r2, [pc, #152]	; (80067b0 <HAL_DMA_Abort+0x45c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d02c      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a24      	ldr	r2, [pc, #144]	; (80067b4 <HAL_DMA_Abort+0x460>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d027      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a23      	ldr	r2, [pc, #140]	; (80067b8 <HAL_DMA_Abort+0x464>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d022      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a21      	ldr	r2, [pc, #132]	; (80067bc <HAL_DMA_Abort+0x468>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d01d      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a20      	ldr	r2, [pc, #128]	; (80067c0 <HAL_DMA_Abort+0x46c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d018      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a1e      	ldr	r2, [pc, #120]	; (80067c4 <HAL_DMA_Abort+0x470>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d013      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <HAL_DMA_Abort+0x474>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00e      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1b      	ldr	r2, [pc, #108]	; (80067cc <HAL_DMA_Abort+0x478>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1a      	ldr	r2, [pc, #104]	; (80067d0 <HAL_DMA_Abort+0x47c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d004      	beq.n	8006776 <HAL_DMA_Abort+0x422>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a18      	ldr	r2, [pc, #96]	; (80067d4 <HAL_DMA_Abort+0x480>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d101      	bne.n	800677a <HAL_DMA_Abort+0x426>
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <HAL_DMA_Abort+0x428>
 800677a:	2300      	movs	r3, #0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d02b      	beq.n	80067d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006784:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	223f      	movs	r2, #63	; 0x3f
 8006790:	409a      	lsls	r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	609a      	str	r2, [r3, #8]
 8006796:	e02a      	b.n	80067ee <HAL_DMA_Abort+0x49a>
 8006798:	40020010 	.word	0x40020010
 800679c:	40020028 	.word	0x40020028
 80067a0:	40020040 	.word	0x40020040
 80067a4:	40020058 	.word	0x40020058
 80067a8:	40020070 	.word	0x40020070
 80067ac:	40020088 	.word	0x40020088
 80067b0:	400200a0 	.word	0x400200a0
 80067b4:	400200b8 	.word	0x400200b8
 80067b8:	40020410 	.word	0x40020410
 80067bc:	40020428 	.word	0x40020428
 80067c0:	40020440 	.word	0x40020440
 80067c4:	40020458 	.word	0x40020458
 80067c8:	40020470 	.word	0x40020470
 80067cc:	40020488 	.word	0x40020488
 80067d0:	400204a0 	.word	0x400204a0
 80067d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2201      	movs	r2, #1
 80067e8:	409a      	lsls	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a4f      	ldr	r2, [pc, #316]	; (8006930 <HAL_DMA_Abort+0x5dc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d072      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a4d      	ldr	r2, [pc, #308]	; (8006934 <HAL_DMA_Abort+0x5e0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d06d      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a4c      	ldr	r2, [pc, #304]	; (8006938 <HAL_DMA_Abort+0x5e4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d068      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a4a      	ldr	r2, [pc, #296]	; (800693c <HAL_DMA_Abort+0x5e8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d063      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a49      	ldr	r2, [pc, #292]	; (8006940 <HAL_DMA_Abort+0x5ec>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d05e      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a47      	ldr	r2, [pc, #284]	; (8006944 <HAL_DMA_Abort+0x5f0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d059      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a46      	ldr	r2, [pc, #280]	; (8006948 <HAL_DMA_Abort+0x5f4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d054      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a44      	ldr	r2, [pc, #272]	; (800694c <HAL_DMA_Abort+0x5f8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d04f      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a43      	ldr	r2, [pc, #268]	; (8006950 <HAL_DMA_Abort+0x5fc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d04a      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a41      	ldr	r2, [pc, #260]	; (8006954 <HAL_DMA_Abort+0x600>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d045      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a40      	ldr	r2, [pc, #256]	; (8006958 <HAL_DMA_Abort+0x604>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d040      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a3e      	ldr	r2, [pc, #248]	; (800695c <HAL_DMA_Abort+0x608>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d03b      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a3d      	ldr	r2, [pc, #244]	; (8006960 <HAL_DMA_Abort+0x60c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d036      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a3b      	ldr	r2, [pc, #236]	; (8006964 <HAL_DMA_Abort+0x610>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d031      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a3a      	ldr	r2, [pc, #232]	; (8006968 <HAL_DMA_Abort+0x614>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d02c      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a38      	ldr	r2, [pc, #224]	; (800696c <HAL_DMA_Abort+0x618>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d027      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a37      	ldr	r2, [pc, #220]	; (8006970 <HAL_DMA_Abort+0x61c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d022      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a35      	ldr	r2, [pc, #212]	; (8006974 <HAL_DMA_Abort+0x620>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01d      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a34      	ldr	r2, [pc, #208]	; (8006978 <HAL_DMA_Abort+0x624>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d018      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a32      	ldr	r2, [pc, #200]	; (800697c <HAL_DMA_Abort+0x628>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d013      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a31      	ldr	r2, [pc, #196]	; (8006980 <HAL_DMA_Abort+0x62c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00e      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a2f      	ldr	r2, [pc, #188]	; (8006984 <HAL_DMA_Abort+0x630>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a2e      	ldr	r2, [pc, #184]	; (8006988 <HAL_DMA_Abort+0x634>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_DMA_Abort+0x58a>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a2c      	ldr	r2, [pc, #176]	; (800698c <HAL_DMA_Abort+0x638>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d101      	bne.n	80068e2 <HAL_DMA_Abort+0x58e>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <HAL_DMA_Abort+0x590>
 80068e2:	2300      	movs	r3, #0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d015      	beq.n	8006914 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00c      	beq.n	8006914 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006908:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006912:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	40020010 	.word	0x40020010
 8006934:	40020028 	.word	0x40020028
 8006938:	40020040 	.word	0x40020040
 800693c:	40020058 	.word	0x40020058
 8006940:	40020070 	.word	0x40020070
 8006944:	40020088 	.word	0x40020088
 8006948:	400200a0 	.word	0x400200a0
 800694c:	400200b8 	.word	0x400200b8
 8006950:	40020410 	.word	0x40020410
 8006954:	40020428 	.word	0x40020428
 8006958:	40020440 	.word	0x40020440
 800695c:	40020458 	.word	0x40020458
 8006960:	40020470 	.word	0x40020470
 8006964:	40020488 	.word	0x40020488
 8006968:	400204a0 	.word	0x400204a0
 800696c:	400204b8 	.word	0x400204b8
 8006970:	58025408 	.word	0x58025408
 8006974:	5802541c 	.word	0x5802541c
 8006978:	58025430 	.word	0x58025430
 800697c:	58025444 	.word	0x58025444
 8006980:	58025458 	.word	0x58025458
 8006984:	5802546c 	.word	0x5802546c
 8006988:	58025480 	.word	0x58025480
 800698c:	58025494 	.word	0x58025494

08006990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e237      	b.n	8006e12 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d004      	beq.n	80069b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2280      	movs	r2, #128	; 0x80
 80069b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e22c      	b.n	8006e12 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a5c      	ldr	r2, [pc, #368]	; (8006b30 <HAL_DMA_Abort_IT+0x1a0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d04a      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a5b      	ldr	r2, [pc, #364]	; (8006b34 <HAL_DMA_Abort_IT+0x1a4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d045      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a59      	ldr	r2, [pc, #356]	; (8006b38 <HAL_DMA_Abort_IT+0x1a8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d040      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a58      	ldr	r2, [pc, #352]	; (8006b3c <HAL_DMA_Abort_IT+0x1ac>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d03b      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a56      	ldr	r2, [pc, #344]	; (8006b40 <HAL_DMA_Abort_IT+0x1b0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d036      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a55      	ldr	r2, [pc, #340]	; (8006b44 <HAL_DMA_Abort_IT+0x1b4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d031      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a53      	ldr	r2, [pc, #332]	; (8006b48 <HAL_DMA_Abort_IT+0x1b8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d02c      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a52      	ldr	r2, [pc, #328]	; (8006b4c <HAL_DMA_Abort_IT+0x1bc>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d027      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a50      	ldr	r2, [pc, #320]	; (8006b50 <HAL_DMA_Abort_IT+0x1c0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d022      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a4f      	ldr	r2, [pc, #316]	; (8006b54 <HAL_DMA_Abort_IT+0x1c4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d01d      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a4d      	ldr	r2, [pc, #308]	; (8006b58 <HAL_DMA_Abort_IT+0x1c8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d018      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a4c      	ldr	r2, [pc, #304]	; (8006b5c <HAL_DMA_Abort_IT+0x1cc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d013      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a4a      	ldr	r2, [pc, #296]	; (8006b60 <HAL_DMA_Abort_IT+0x1d0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00e      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a49      	ldr	r2, [pc, #292]	; (8006b64 <HAL_DMA_Abort_IT+0x1d4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d009      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a47      	ldr	r2, [pc, #284]	; (8006b68 <HAL_DMA_Abort_IT+0x1d8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_DMA_Abort_IT+0xc8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a46      	ldr	r2, [pc, #280]	; (8006b6c <HAL_DMA_Abort_IT+0x1dc>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d101      	bne.n	8006a5c <HAL_DMA_Abort_IT+0xcc>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_DMA_Abort_IT+0xce>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8086 	beq.w	8006b70 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2204      	movs	r2, #4
 8006a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a2f      	ldr	r2, [pc, #188]	; (8006b30 <HAL_DMA_Abort_IT+0x1a0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d04a      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a2e      	ldr	r2, [pc, #184]	; (8006b34 <HAL_DMA_Abort_IT+0x1a4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d045      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2c      	ldr	r2, [pc, #176]	; (8006b38 <HAL_DMA_Abort_IT+0x1a8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d040      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2b      	ldr	r2, [pc, #172]	; (8006b3c <HAL_DMA_Abort_IT+0x1ac>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d03b      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a29      	ldr	r2, [pc, #164]	; (8006b40 <HAL_DMA_Abort_IT+0x1b0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d036      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a28      	ldr	r2, [pc, #160]	; (8006b44 <HAL_DMA_Abort_IT+0x1b4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d031      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a26      	ldr	r2, [pc, #152]	; (8006b48 <HAL_DMA_Abort_IT+0x1b8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d02c      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <HAL_DMA_Abort_IT+0x1bc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d027      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a23      	ldr	r2, [pc, #140]	; (8006b50 <HAL_DMA_Abort_IT+0x1c0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d022      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a22      	ldr	r2, [pc, #136]	; (8006b54 <HAL_DMA_Abort_IT+0x1c4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d01d      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a20      	ldr	r2, [pc, #128]	; (8006b58 <HAL_DMA_Abort_IT+0x1c8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <HAL_DMA_Abort_IT+0x1cc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1d      	ldr	r2, [pc, #116]	; (8006b60 <HAL_DMA_Abort_IT+0x1d0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <HAL_DMA_Abort_IT+0x1d4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1a      	ldr	r2, [pc, #104]	; (8006b68 <HAL_DMA_Abort_IT+0x1d8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x17c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <HAL_DMA_Abort_IT+0x1dc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d108      	bne.n	8006b1e <HAL_DMA_Abort_IT+0x18e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0201 	bic.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e178      	b.n	8006e10 <HAL_DMA_Abort_IT+0x480>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e16f      	b.n	8006e10 <HAL_DMA_Abort_IT+0x480>
 8006b30:	40020010 	.word	0x40020010
 8006b34:	40020028 	.word	0x40020028
 8006b38:	40020040 	.word	0x40020040
 8006b3c:	40020058 	.word	0x40020058
 8006b40:	40020070 	.word	0x40020070
 8006b44:	40020088 	.word	0x40020088
 8006b48:	400200a0 	.word	0x400200a0
 8006b4c:	400200b8 	.word	0x400200b8
 8006b50:	40020410 	.word	0x40020410
 8006b54:	40020428 	.word	0x40020428
 8006b58:	40020440 	.word	0x40020440
 8006b5c:	40020458 	.word	0x40020458
 8006b60:	40020470 	.word	0x40020470
 8006b64:	40020488 	.word	0x40020488
 8006b68:	400204a0 	.word	0x400204a0
 8006b6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 020e 	bic.w	r2, r2, #14
 8006b7e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a6c      	ldr	r2, [pc, #432]	; (8006d38 <HAL_DMA_Abort_IT+0x3a8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d04a      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a6b      	ldr	r2, [pc, #428]	; (8006d3c <HAL_DMA_Abort_IT+0x3ac>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d045      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a69      	ldr	r2, [pc, #420]	; (8006d40 <HAL_DMA_Abort_IT+0x3b0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d040      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a68      	ldr	r2, [pc, #416]	; (8006d44 <HAL_DMA_Abort_IT+0x3b4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d03b      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a66      	ldr	r2, [pc, #408]	; (8006d48 <HAL_DMA_Abort_IT+0x3b8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d036      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a65      	ldr	r2, [pc, #404]	; (8006d4c <HAL_DMA_Abort_IT+0x3bc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d031      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a63      	ldr	r2, [pc, #396]	; (8006d50 <HAL_DMA_Abort_IT+0x3c0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d02c      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a62      	ldr	r2, [pc, #392]	; (8006d54 <HAL_DMA_Abort_IT+0x3c4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d027      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a60      	ldr	r2, [pc, #384]	; (8006d58 <HAL_DMA_Abort_IT+0x3c8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d022      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a5f      	ldr	r2, [pc, #380]	; (8006d5c <HAL_DMA_Abort_IT+0x3cc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d01d      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a5d      	ldr	r2, [pc, #372]	; (8006d60 <HAL_DMA_Abort_IT+0x3d0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d018      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a5c      	ldr	r2, [pc, #368]	; (8006d64 <HAL_DMA_Abort_IT+0x3d4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a5a      	ldr	r2, [pc, #360]	; (8006d68 <HAL_DMA_Abort_IT+0x3d8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00e      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a59      	ldr	r2, [pc, #356]	; (8006d6c <HAL_DMA_Abort_IT+0x3dc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d009      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a57      	ldr	r2, [pc, #348]	; (8006d70 <HAL_DMA_Abort_IT+0x3e0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d004      	beq.n	8006c20 <HAL_DMA_Abort_IT+0x290>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a56      	ldr	r2, [pc, #344]	; (8006d74 <HAL_DMA_Abort_IT+0x3e4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d108      	bne.n	8006c32 <HAL_DMA_Abort_IT+0x2a2>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	e007      	b.n	8006c42 <HAL_DMA_Abort_IT+0x2b2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a3c      	ldr	r2, [pc, #240]	; (8006d38 <HAL_DMA_Abort_IT+0x3a8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d072      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a3a      	ldr	r2, [pc, #232]	; (8006d3c <HAL_DMA_Abort_IT+0x3ac>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d06d      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a39      	ldr	r2, [pc, #228]	; (8006d40 <HAL_DMA_Abort_IT+0x3b0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d068      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a37      	ldr	r2, [pc, #220]	; (8006d44 <HAL_DMA_Abort_IT+0x3b4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d063      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a36      	ldr	r2, [pc, #216]	; (8006d48 <HAL_DMA_Abort_IT+0x3b8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d05e      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a34      	ldr	r2, [pc, #208]	; (8006d4c <HAL_DMA_Abort_IT+0x3bc>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d059      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a33      	ldr	r2, [pc, #204]	; (8006d50 <HAL_DMA_Abort_IT+0x3c0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d054      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a31      	ldr	r2, [pc, #196]	; (8006d54 <HAL_DMA_Abort_IT+0x3c4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d04f      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a30      	ldr	r2, [pc, #192]	; (8006d58 <HAL_DMA_Abort_IT+0x3c8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d04a      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a2e      	ldr	r2, [pc, #184]	; (8006d5c <HAL_DMA_Abort_IT+0x3cc>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d045      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a2d      	ldr	r2, [pc, #180]	; (8006d60 <HAL_DMA_Abort_IT+0x3d0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d040      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a2b      	ldr	r2, [pc, #172]	; (8006d64 <HAL_DMA_Abort_IT+0x3d4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d03b      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a2a      	ldr	r2, [pc, #168]	; (8006d68 <HAL_DMA_Abort_IT+0x3d8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d036      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a28      	ldr	r2, [pc, #160]	; (8006d6c <HAL_DMA_Abort_IT+0x3dc>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d031      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a27      	ldr	r2, [pc, #156]	; (8006d70 <HAL_DMA_Abort_IT+0x3e0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d02c      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a25      	ldr	r2, [pc, #148]	; (8006d74 <HAL_DMA_Abort_IT+0x3e4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d027      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a24      	ldr	r2, [pc, #144]	; (8006d78 <HAL_DMA_Abort_IT+0x3e8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d022      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a22      	ldr	r2, [pc, #136]	; (8006d7c <HAL_DMA_Abort_IT+0x3ec>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d01d      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a21      	ldr	r2, [pc, #132]	; (8006d80 <HAL_DMA_Abort_IT+0x3f0>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d018      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1f      	ldr	r2, [pc, #124]	; (8006d84 <HAL_DMA_Abort_IT+0x3f4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <HAL_DMA_Abort_IT+0x3f8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00e      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1c      	ldr	r2, [pc, #112]	; (8006d8c <HAL_DMA_Abort_IT+0x3fc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d009      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1b      	ldr	r2, [pc, #108]	; (8006d90 <HAL_DMA_Abort_IT+0x400>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <HAL_DMA_Abort_IT+0x3a2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <HAL_DMA_Abort_IT+0x404>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d132      	bne.n	8006d98 <HAL_DMA_Abort_IT+0x408>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e031      	b.n	8006d9a <HAL_DMA_Abort_IT+0x40a>
 8006d36:	bf00      	nop
 8006d38:	40020010 	.word	0x40020010
 8006d3c:	40020028 	.word	0x40020028
 8006d40:	40020040 	.word	0x40020040
 8006d44:	40020058 	.word	0x40020058
 8006d48:	40020070 	.word	0x40020070
 8006d4c:	40020088 	.word	0x40020088
 8006d50:	400200a0 	.word	0x400200a0
 8006d54:	400200b8 	.word	0x400200b8
 8006d58:	40020410 	.word	0x40020410
 8006d5c:	40020428 	.word	0x40020428
 8006d60:	40020440 	.word	0x40020440
 8006d64:	40020458 	.word	0x40020458
 8006d68:	40020470 	.word	0x40020470
 8006d6c:	40020488 	.word	0x40020488
 8006d70:	400204a0 	.word	0x400204a0
 8006d74:	400204b8 	.word	0x400204b8
 8006d78:	58025408 	.word	0x58025408
 8006d7c:	5802541c 	.word	0x5802541c
 8006d80:	58025430 	.word	0x58025430
 8006d84:	58025444 	.word	0x58025444
 8006d88:	58025458 	.word	0x58025458
 8006d8c:	5802546c 	.word	0x5802546c
 8006d90:	58025480 	.word	0x58025480
 8006d94:	58025494 	.word	0x58025494
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d028      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	409a      	lsls	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006dcc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00c      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006de4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006dee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop

08006e1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	; 0x28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e28:	4b67      	ldr	r3, [pc, #412]	; (8006fc8 <HAL_DMA_IRQHandler+0x1ac>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a67      	ldr	r2, [pc, #412]	; (8006fcc <HAL_DMA_IRQHandler+0x1b0>)
 8006e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e32:	0a9b      	lsrs	r3, r3, #10
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a5f      	ldr	r2, [pc, #380]	; (8006fd0 <HAL_DMA_IRQHandler+0x1b4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d04a      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a5d      	ldr	r2, [pc, #372]	; (8006fd4 <HAL_DMA_IRQHandler+0x1b8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d045      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a5c      	ldr	r2, [pc, #368]	; (8006fd8 <HAL_DMA_IRQHandler+0x1bc>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d040      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a5a      	ldr	r2, [pc, #360]	; (8006fdc <HAL_DMA_IRQHandler+0x1c0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d03b      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a59      	ldr	r2, [pc, #356]	; (8006fe0 <HAL_DMA_IRQHandler+0x1c4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d036      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a57      	ldr	r2, [pc, #348]	; (8006fe4 <HAL_DMA_IRQHandler+0x1c8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d031      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a56      	ldr	r2, [pc, #344]	; (8006fe8 <HAL_DMA_IRQHandler+0x1cc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d02c      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a54      	ldr	r2, [pc, #336]	; (8006fec <HAL_DMA_IRQHandler+0x1d0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d027      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a53      	ldr	r2, [pc, #332]	; (8006ff0 <HAL_DMA_IRQHandler+0x1d4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d022      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a51      	ldr	r2, [pc, #324]	; (8006ff4 <HAL_DMA_IRQHandler+0x1d8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01d      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a50      	ldr	r2, [pc, #320]	; (8006ff8 <HAL_DMA_IRQHandler+0x1dc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d018      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a4e      	ldr	r2, [pc, #312]	; (8006ffc <HAL_DMA_IRQHandler+0x1e0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a4d      	ldr	r2, [pc, #308]	; (8007000 <HAL_DMA_IRQHandler+0x1e4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a4b      	ldr	r2, [pc, #300]	; (8007004 <HAL_DMA_IRQHandler+0x1e8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a4a      	ldr	r2, [pc, #296]	; (8007008 <HAL_DMA_IRQHandler+0x1ec>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <HAL_DMA_IRQHandler+0xd2>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a48      	ldr	r2, [pc, #288]	; (800700c <HAL_DMA_IRQHandler+0x1f0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d101      	bne.n	8006ef2 <HAL_DMA_IRQHandler+0xd6>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <HAL_DMA_IRQHandler+0xd8>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 842b 	beq.w	8007750 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	2208      	movs	r2, #8
 8006f04:	409a      	lsls	r2, r3
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 80a2 	beq.w	8007054 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2e      	ldr	r2, [pc, #184]	; (8006fd0 <HAL_DMA_IRQHandler+0x1b4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d04a      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a2d      	ldr	r2, [pc, #180]	; (8006fd4 <HAL_DMA_IRQHandler+0x1b8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d045      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a2b      	ldr	r2, [pc, #172]	; (8006fd8 <HAL_DMA_IRQHandler+0x1bc>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d040      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a2a      	ldr	r2, [pc, #168]	; (8006fdc <HAL_DMA_IRQHandler+0x1c0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d03b      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a28      	ldr	r2, [pc, #160]	; (8006fe0 <HAL_DMA_IRQHandler+0x1c4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d036      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a27      	ldr	r2, [pc, #156]	; (8006fe4 <HAL_DMA_IRQHandler+0x1c8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d031      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a25      	ldr	r2, [pc, #148]	; (8006fe8 <HAL_DMA_IRQHandler+0x1cc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d02c      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a24      	ldr	r2, [pc, #144]	; (8006fec <HAL_DMA_IRQHandler+0x1d0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d027      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a22      	ldr	r2, [pc, #136]	; (8006ff0 <HAL_DMA_IRQHandler+0x1d4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d022      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a21      	ldr	r2, [pc, #132]	; (8006ff4 <HAL_DMA_IRQHandler+0x1d8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d01d      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1f      	ldr	r2, [pc, #124]	; (8006ff8 <HAL_DMA_IRQHandler+0x1dc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d018      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a1e      	ldr	r2, [pc, #120]	; (8006ffc <HAL_DMA_IRQHandler+0x1e0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d013      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a1c      	ldr	r2, [pc, #112]	; (8007000 <HAL_DMA_IRQHandler+0x1e4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00e      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a1b      	ldr	r2, [pc, #108]	; (8007004 <HAL_DMA_IRQHandler+0x1e8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d009      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a19      	ldr	r2, [pc, #100]	; (8007008 <HAL_DMA_IRQHandler+0x1ec>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_DMA_IRQHandler+0x194>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a18      	ldr	r2, [pc, #96]	; (800700c <HAL_DMA_IRQHandler+0x1f0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d12f      	bne.n	8007010 <HAL_DMA_IRQHandler+0x1f4>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bf14      	ite	ne
 8006fbe:	2301      	movne	r3, #1
 8006fc0:	2300      	moveq	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	e02e      	b.n	8007024 <HAL_DMA_IRQHandler+0x208>
 8006fc6:	bf00      	nop
 8006fc8:	240001c0 	.word	0x240001c0
 8006fcc:	1b4e81b5 	.word	0x1b4e81b5
 8006fd0:	40020010 	.word	0x40020010
 8006fd4:	40020028 	.word	0x40020028
 8006fd8:	40020040 	.word	0x40020040
 8006fdc:	40020058 	.word	0x40020058
 8006fe0:	40020070 	.word	0x40020070
 8006fe4:	40020088 	.word	0x40020088
 8006fe8:	400200a0 	.word	0x400200a0
 8006fec:	400200b8 	.word	0x400200b8
 8006ff0:	40020410 	.word	0x40020410
 8006ff4:	40020428 	.word	0x40020428
 8006ff8:	40020440 	.word	0x40020440
 8006ffc:	40020458 	.word	0x40020458
 8007000:	40020470 	.word	0x40020470
 8007004:	40020488 	.word	0x40020488
 8007008:	400204a0 	.word	0x400204a0
 800700c:	400204b8 	.word	0x400204b8
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	bf14      	ite	ne
 800701e:	2301      	movne	r3, #1
 8007020:	2300      	moveq	r3, #0
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d015      	beq.n	8007054 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0204 	bic.w	r2, r2, #4
 8007036:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800703c:	f003 031f 	and.w	r3, r3, #31
 8007040:	2208      	movs	r2, #8
 8007042:	409a      	lsls	r2, r3
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704c:	f043 0201 	orr.w	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007058:	f003 031f 	and.w	r3, r3, #31
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	fa22 f303 	lsr.w	r3, r2, r3
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d06e      	beq.n	8007148 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a69      	ldr	r2, [pc, #420]	; (8007214 <HAL_DMA_IRQHandler+0x3f8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d04a      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a67      	ldr	r2, [pc, #412]	; (8007218 <HAL_DMA_IRQHandler+0x3fc>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d045      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a66      	ldr	r2, [pc, #408]	; (800721c <HAL_DMA_IRQHandler+0x400>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d040      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a64      	ldr	r2, [pc, #400]	; (8007220 <HAL_DMA_IRQHandler+0x404>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d03b      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a63      	ldr	r2, [pc, #396]	; (8007224 <HAL_DMA_IRQHandler+0x408>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d036      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a61      	ldr	r2, [pc, #388]	; (8007228 <HAL_DMA_IRQHandler+0x40c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d031      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a60      	ldr	r2, [pc, #384]	; (800722c <HAL_DMA_IRQHandler+0x410>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d02c      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a5e      	ldr	r2, [pc, #376]	; (8007230 <HAL_DMA_IRQHandler+0x414>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d027      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a5d      	ldr	r2, [pc, #372]	; (8007234 <HAL_DMA_IRQHandler+0x418>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d022      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a5b      	ldr	r2, [pc, #364]	; (8007238 <HAL_DMA_IRQHandler+0x41c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01d      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a5a      	ldr	r2, [pc, #360]	; (800723c <HAL_DMA_IRQHandler+0x420>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a58      	ldr	r2, [pc, #352]	; (8007240 <HAL_DMA_IRQHandler+0x424>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a57      	ldr	r2, [pc, #348]	; (8007244 <HAL_DMA_IRQHandler+0x428>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a55      	ldr	r2, [pc, #340]	; (8007248 <HAL_DMA_IRQHandler+0x42c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a54      	ldr	r2, [pc, #336]	; (800724c <HAL_DMA_IRQHandler+0x430>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_DMA_IRQHandler+0x2ee>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a52      	ldr	r2, [pc, #328]	; (8007250 <HAL_DMA_IRQHandler+0x434>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d10a      	bne.n	8007120 <HAL_DMA_IRQHandler+0x304>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007114:	2b00      	cmp	r3, #0
 8007116:	bf14      	ite	ne
 8007118:	2301      	movne	r3, #1
 800711a:	2300      	moveq	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	e003      	b.n	8007128 <HAL_DMA_IRQHandler+0x30c>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2300      	movs	r3, #0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007130:	f003 031f 	and.w	r3, r3, #31
 8007134:	2201      	movs	r2, #1
 8007136:	409a      	lsls	r2, r3
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007140:	f043 0202 	orr.w	r2, r3, #2
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714c:	f003 031f 	and.w	r3, r3, #31
 8007150:	2204      	movs	r2, #4
 8007152:	409a      	lsls	r2, r3
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	4013      	ands	r3, r2
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 808f 	beq.w	800727c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2c      	ldr	r2, [pc, #176]	; (8007214 <HAL_DMA_IRQHandler+0x3f8>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d04a      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2a      	ldr	r2, [pc, #168]	; (8007218 <HAL_DMA_IRQHandler+0x3fc>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d045      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a29      	ldr	r2, [pc, #164]	; (800721c <HAL_DMA_IRQHandler+0x400>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d040      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a27      	ldr	r2, [pc, #156]	; (8007220 <HAL_DMA_IRQHandler+0x404>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d03b      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a26      	ldr	r2, [pc, #152]	; (8007224 <HAL_DMA_IRQHandler+0x408>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d036      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a24      	ldr	r2, [pc, #144]	; (8007228 <HAL_DMA_IRQHandler+0x40c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d031      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a23      	ldr	r2, [pc, #140]	; (800722c <HAL_DMA_IRQHandler+0x410>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d02c      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a21      	ldr	r2, [pc, #132]	; (8007230 <HAL_DMA_IRQHandler+0x414>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d027      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a20      	ldr	r2, [pc, #128]	; (8007234 <HAL_DMA_IRQHandler+0x418>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d022      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1e      	ldr	r2, [pc, #120]	; (8007238 <HAL_DMA_IRQHandler+0x41c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01d      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1d      	ldr	r2, [pc, #116]	; (800723c <HAL_DMA_IRQHandler+0x420>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d018      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1b      	ldr	r2, [pc, #108]	; (8007240 <HAL_DMA_IRQHandler+0x424>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1a      	ldr	r2, [pc, #104]	; (8007244 <HAL_DMA_IRQHandler+0x428>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00e      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a18      	ldr	r2, [pc, #96]	; (8007248 <HAL_DMA_IRQHandler+0x42c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d009      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a17      	ldr	r2, [pc, #92]	; (800724c <HAL_DMA_IRQHandler+0x430>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d004      	beq.n	80071fe <HAL_DMA_IRQHandler+0x3e2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a15      	ldr	r2, [pc, #84]	; (8007250 <HAL_DMA_IRQHandler+0x434>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d12a      	bne.n	8007254 <HAL_DMA_IRQHandler+0x438>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	bf14      	ite	ne
 800720c:	2301      	movne	r3, #1
 800720e:	2300      	moveq	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	e023      	b.n	800725c <HAL_DMA_IRQHandler+0x440>
 8007214:	40020010 	.word	0x40020010
 8007218:	40020028 	.word	0x40020028
 800721c:	40020040 	.word	0x40020040
 8007220:	40020058 	.word	0x40020058
 8007224:	40020070 	.word	0x40020070
 8007228:	40020088 	.word	0x40020088
 800722c:	400200a0 	.word	0x400200a0
 8007230:	400200b8 	.word	0x400200b8
 8007234:	40020410 	.word	0x40020410
 8007238:	40020428 	.word	0x40020428
 800723c:	40020440 	.word	0x40020440
 8007240:	40020458 	.word	0x40020458
 8007244:	40020470 	.word	0x40020470
 8007248:	40020488 	.word	0x40020488
 800724c:	400204a0 	.word	0x400204a0
 8007250:	400204b8 	.word	0x400204b8
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00d      	beq.n	800727c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	2204      	movs	r2, #4
 800726a:	409a      	lsls	r2, r3
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007274:	f043 0204 	orr.w	r2, r3, #4
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2210      	movs	r2, #16
 8007286:	409a      	lsls	r2, r3
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 80a6 	beq.w	80073de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a85      	ldr	r2, [pc, #532]	; (80074ac <HAL_DMA_IRQHandler+0x690>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d04a      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a83      	ldr	r2, [pc, #524]	; (80074b0 <HAL_DMA_IRQHandler+0x694>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d045      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a82      	ldr	r2, [pc, #520]	; (80074b4 <HAL_DMA_IRQHandler+0x698>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d040      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a80      	ldr	r2, [pc, #512]	; (80074b8 <HAL_DMA_IRQHandler+0x69c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d03b      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a7f      	ldr	r2, [pc, #508]	; (80074bc <HAL_DMA_IRQHandler+0x6a0>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d036      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a7d      	ldr	r2, [pc, #500]	; (80074c0 <HAL_DMA_IRQHandler+0x6a4>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d031      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a7c      	ldr	r2, [pc, #496]	; (80074c4 <HAL_DMA_IRQHandler+0x6a8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d02c      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a7a      	ldr	r2, [pc, #488]	; (80074c8 <HAL_DMA_IRQHandler+0x6ac>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d027      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a79      	ldr	r2, [pc, #484]	; (80074cc <HAL_DMA_IRQHandler+0x6b0>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d022      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a77      	ldr	r2, [pc, #476]	; (80074d0 <HAL_DMA_IRQHandler+0x6b4>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d01d      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a76      	ldr	r2, [pc, #472]	; (80074d4 <HAL_DMA_IRQHandler+0x6b8>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d018      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a74      	ldr	r2, [pc, #464]	; (80074d8 <HAL_DMA_IRQHandler+0x6bc>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a73      	ldr	r2, [pc, #460]	; (80074dc <HAL_DMA_IRQHandler+0x6c0>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a71      	ldr	r2, [pc, #452]	; (80074e0 <HAL_DMA_IRQHandler+0x6c4>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a70      	ldr	r2, [pc, #448]	; (80074e4 <HAL_DMA_IRQHandler+0x6c8>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_DMA_IRQHandler+0x516>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6e      	ldr	r2, [pc, #440]	; (80074e8 <HAL_DMA_IRQHandler+0x6cc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d10a      	bne.n	8007348 <HAL_DMA_IRQHandler+0x52c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b00      	cmp	r3, #0
 800733e:	bf14      	ite	ne
 8007340:	2301      	movne	r3, #1
 8007342:	2300      	moveq	r3, #0
 8007344:	b2db      	uxtb	r3, r3
 8007346:	e009      	b.n	800735c <HAL_DMA_IRQHandler+0x540>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b00      	cmp	r3, #0
 8007354:	bf14      	ite	ne
 8007356:	2301      	movne	r3, #1
 8007358:	2300      	moveq	r3, #0
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d03e      	beq.n	80073de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007364:	f003 031f 	and.w	r3, r3, #31
 8007368:	2210      	movs	r2, #16
 800736a:	409a      	lsls	r2, r3
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d018      	beq.n	80073b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d108      	bne.n	800739e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d024      	beq.n	80073de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	4798      	blx	r3
 800739c:	e01f      	b.n	80073de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01b      	beq.n	80073de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
 80073ae:	e016      	b.n	80073de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d107      	bne.n	80073ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0208 	bic.w	r2, r2, #8
 80073cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e2:	f003 031f 	and.w	r3, r3, #31
 80073e6:	2220      	movs	r2, #32
 80073e8:	409a      	lsls	r2, r3
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	4013      	ands	r3, r2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 8110 	beq.w	8007614 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a2c      	ldr	r2, [pc, #176]	; (80074ac <HAL_DMA_IRQHandler+0x690>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d04a      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a2b      	ldr	r2, [pc, #172]	; (80074b0 <HAL_DMA_IRQHandler+0x694>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d045      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a29      	ldr	r2, [pc, #164]	; (80074b4 <HAL_DMA_IRQHandler+0x698>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d040      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a28      	ldr	r2, [pc, #160]	; (80074b8 <HAL_DMA_IRQHandler+0x69c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d03b      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a26      	ldr	r2, [pc, #152]	; (80074bc <HAL_DMA_IRQHandler+0x6a0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d036      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a25      	ldr	r2, [pc, #148]	; (80074c0 <HAL_DMA_IRQHandler+0x6a4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d031      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a23      	ldr	r2, [pc, #140]	; (80074c4 <HAL_DMA_IRQHandler+0x6a8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d02c      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a22      	ldr	r2, [pc, #136]	; (80074c8 <HAL_DMA_IRQHandler+0x6ac>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d027      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a20      	ldr	r2, [pc, #128]	; (80074cc <HAL_DMA_IRQHandler+0x6b0>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d022      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a1f      	ldr	r2, [pc, #124]	; (80074d0 <HAL_DMA_IRQHandler+0x6b4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d01d      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1d      	ldr	r2, [pc, #116]	; (80074d4 <HAL_DMA_IRQHandler+0x6b8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d018      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1c      	ldr	r2, [pc, #112]	; (80074d8 <HAL_DMA_IRQHandler+0x6bc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d013      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1a      	ldr	r2, [pc, #104]	; (80074dc <HAL_DMA_IRQHandler+0x6c0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00e      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a19      	ldr	r2, [pc, #100]	; (80074e0 <HAL_DMA_IRQHandler+0x6c4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d009      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a17      	ldr	r2, [pc, #92]	; (80074e4 <HAL_DMA_IRQHandler+0x6c8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d004      	beq.n	8007494 <HAL_DMA_IRQHandler+0x678>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a16      	ldr	r2, [pc, #88]	; (80074e8 <HAL_DMA_IRQHandler+0x6cc>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d12b      	bne.n	80074ec <HAL_DMA_IRQHandler+0x6d0>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0310 	and.w	r3, r3, #16
 800749e:	2b00      	cmp	r3, #0
 80074a0:	bf14      	ite	ne
 80074a2:	2301      	movne	r3, #1
 80074a4:	2300      	moveq	r3, #0
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	e02a      	b.n	8007500 <HAL_DMA_IRQHandler+0x6e4>
 80074aa:	bf00      	nop
 80074ac:	40020010 	.word	0x40020010
 80074b0:	40020028 	.word	0x40020028
 80074b4:	40020040 	.word	0x40020040
 80074b8:	40020058 	.word	0x40020058
 80074bc:	40020070 	.word	0x40020070
 80074c0:	40020088 	.word	0x40020088
 80074c4:	400200a0 	.word	0x400200a0
 80074c8:	400200b8 	.word	0x400200b8
 80074cc:	40020410 	.word	0x40020410
 80074d0:	40020428 	.word	0x40020428
 80074d4:	40020440 	.word	0x40020440
 80074d8:	40020458 	.word	0x40020458
 80074dc:	40020470 	.word	0x40020470
 80074e0:	40020488 	.word	0x40020488
 80074e4:	400204a0 	.word	0x400204a0
 80074e8:	400204b8 	.word	0x400204b8
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf14      	ite	ne
 80074fa:	2301      	movne	r3, #1
 80074fc:	2300      	moveq	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8087 	beq.w	8007614 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2220      	movs	r2, #32
 8007510:	409a      	lsls	r2, r3
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b04      	cmp	r3, #4
 8007520:	d139      	bne.n	8007596 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0216 	bic.w	r2, r2, #22
 8007530:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695a      	ldr	r2, [r3, #20]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007540:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <HAL_DMA_IRQHandler+0x736>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0208 	bic.w	r2, r2, #8
 8007560:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007566:	f003 031f 	and.w	r3, r3, #31
 800756a:	223f      	movs	r2, #63	; 0x3f
 800756c:	409a      	lsls	r2, r3
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 834a 	beq.w	8007c20 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
          }
          return;
 8007594:	e344      	b.n	8007c20 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d018      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d108      	bne.n	80075c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d02c      	beq.n	8007614 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
 80075c2:	e027      	b.n	8007614 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d023      	beq.n	8007614 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
 80075d4:	e01e      	b.n	8007614 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10f      	bne.n	8007604 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0210 	bic.w	r2, r2, #16
 80075f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8306 	beq.w	8007c2a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 8088 	beq.w	800773c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2204      	movs	r2, #4
 8007630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a7a      	ldr	r2, [pc, #488]	; (8007824 <HAL_DMA_IRQHandler+0xa08>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d04a      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a79      	ldr	r2, [pc, #484]	; (8007828 <HAL_DMA_IRQHandler+0xa0c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d045      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a77      	ldr	r2, [pc, #476]	; (800782c <HAL_DMA_IRQHandler+0xa10>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d040      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a76      	ldr	r2, [pc, #472]	; (8007830 <HAL_DMA_IRQHandler+0xa14>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d03b      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a74      	ldr	r2, [pc, #464]	; (8007834 <HAL_DMA_IRQHandler+0xa18>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d036      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a73      	ldr	r2, [pc, #460]	; (8007838 <HAL_DMA_IRQHandler+0xa1c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d031      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a71      	ldr	r2, [pc, #452]	; (800783c <HAL_DMA_IRQHandler+0xa20>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d02c      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a70      	ldr	r2, [pc, #448]	; (8007840 <HAL_DMA_IRQHandler+0xa24>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d027      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a6e      	ldr	r2, [pc, #440]	; (8007844 <HAL_DMA_IRQHandler+0xa28>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d022      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a6d      	ldr	r2, [pc, #436]	; (8007848 <HAL_DMA_IRQHandler+0xa2c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d01d      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a6b      	ldr	r2, [pc, #428]	; (800784c <HAL_DMA_IRQHandler+0xa30>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d018      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a6a      	ldr	r2, [pc, #424]	; (8007850 <HAL_DMA_IRQHandler+0xa34>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d013      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a68      	ldr	r2, [pc, #416]	; (8007854 <HAL_DMA_IRQHandler+0xa38>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00e      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a67      	ldr	r2, [pc, #412]	; (8007858 <HAL_DMA_IRQHandler+0xa3c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d009      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a65      	ldr	r2, [pc, #404]	; (800785c <HAL_DMA_IRQHandler+0xa40>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d004      	beq.n	80076d4 <HAL_DMA_IRQHandler+0x8b8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a64      	ldr	r2, [pc, #400]	; (8007860 <HAL_DMA_IRQHandler+0xa44>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d108      	bne.n	80076e6 <HAL_DMA_IRQHandler+0x8ca>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0201 	bic.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	e007      	b.n	80076f6 <HAL_DMA_IRQHandler+0x8da>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0201 	bic.w	r2, r2, #1
 80076f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3301      	adds	r3, #1
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fe:	429a      	cmp	r2, r3
 8007700:	d307      	bcc.n	8007712 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1f2      	bne.n	80076f6 <HAL_DMA_IRQHandler+0x8da>
 8007710:	e000      	b.n	8007714 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007712:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2203      	movs	r2, #3
 8007726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800772a:	e003      	b.n	8007734 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8272 	beq.w	8007c2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
 800774e:	e26c      	b.n	8007c2a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a43      	ldr	r2, [pc, #268]	; (8007864 <HAL_DMA_IRQHandler+0xa48>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d022      	beq.n	80077a0 <HAL_DMA_IRQHandler+0x984>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a42      	ldr	r2, [pc, #264]	; (8007868 <HAL_DMA_IRQHandler+0xa4c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d01d      	beq.n	80077a0 <HAL_DMA_IRQHandler+0x984>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a40      	ldr	r2, [pc, #256]	; (800786c <HAL_DMA_IRQHandler+0xa50>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d018      	beq.n	80077a0 <HAL_DMA_IRQHandler+0x984>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a3f      	ldr	r2, [pc, #252]	; (8007870 <HAL_DMA_IRQHandler+0xa54>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d013      	beq.n	80077a0 <HAL_DMA_IRQHandler+0x984>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a3d      	ldr	r2, [pc, #244]	; (8007874 <HAL_DMA_IRQHandler+0xa58>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00e      	beq.n	80077a0 <HAL_DMA_IRQHandler+0x984>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a3c      	ldr	r2, [pc, #240]	; (8007878 <HAL_DMA_IRQHandler+0xa5c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d009      	beq.n	80077a0 <HAL_DMA_IRQHandler+0x984>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a3a      	ldr	r2, [pc, #232]	; (800787c <HAL_DMA_IRQHandler+0xa60>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d004      	beq.n	80077a0 <HAL_DMA_IRQHandler+0x984>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a39      	ldr	r2, [pc, #228]	; (8007880 <HAL_DMA_IRQHandler+0xa64>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d101      	bne.n	80077a4 <HAL_DMA_IRQHandler+0x988>
 80077a0:	2301      	movs	r3, #1
 80077a2:	e000      	b.n	80077a6 <HAL_DMA_IRQHandler+0x98a>
 80077a4:	2300      	movs	r3, #0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 823f 	beq.w	8007c2a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b8:	f003 031f 	and.w	r3, r3, #31
 80077bc:	2204      	movs	r2, #4
 80077be:	409a      	lsls	r2, r3
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	4013      	ands	r3, r2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80cd 	beq.w	8007964 <HAL_DMA_IRQHandler+0xb48>
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80c7 	beq.w	8007964 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077da:	f003 031f 	and.w	r3, r3, #31
 80077de:	2204      	movs	r2, #4
 80077e0:	409a      	lsls	r2, r3
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d049      	beq.n	8007884 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8210 	beq.w	8007c24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800780c:	e20a      	b.n	8007c24 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 8206 	beq.w	8007c24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007820:	e200      	b.n	8007c24 <HAL_DMA_IRQHandler+0xe08>
 8007822:	bf00      	nop
 8007824:	40020010 	.word	0x40020010
 8007828:	40020028 	.word	0x40020028
 800782c:	40020040 	.word	0x40020040
 8007830:	40020058 	.word	0x40020058
 8007834:	40020070 	.word	0x40020070
 8007838:	40020088 	.word	0x40020088
 800783c:	400200a0 	.word	0x400200a0
 8007840:	400200b8 	.word	0x400200b8
 8007844:	40020410 	.word	0x40020410
 8007848:	40020428 	.word	0x40020428
 800784c:	40020440 	.word	0x40020440
 8007850:	40020458 	.word	0x40020458
 8007854:	40020470 	.word	0x40020470
 8007858:	40020488 	.word	0x40020488
 800785c:	400204a0 	.word	0x400204a0
 8007860:	400204b8 	.word	0x400204b8
 8007864:	58025408 	.word	0x58025408
 8007868:	5802541c 	.word	0x5802541c
 800786c:	58025430 	.word	0x58025430
 8007870:	58025444 	.word	0x58025444
 8007874:	58025458 	.word	0x58025458
 8007878:	5802546c 	.word	0x5802546c
 800787c:	58025480 	.word	0x58025480
 8007880:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d160      	bne.n	8007950 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a7f      	ldr	r2, [pc, #508]	; (8007a90 <HAL_DMA_IRQHandler+0xc74>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d04a      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a7d      	ldr	r2, [pc, #500]	; (8007a94 <HAL_DMA_IRQHandler+0xc78>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d045      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a7c      	ldr	r2, [pc, #496]	; (8007a98 <HAL_DMA_IRQHandler+0xc7c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d040      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a7a      	ldr	r2, [pc, #488]	; (8007a9c <HAL_DMA_IRQHandler+0xc80>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d03b      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a79      	ldr	r2, [pc, #484]	; (8007aa0 <HAL_DMA_IRQHandler+0xc84>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d036      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a77      	ldr	r2, [pc, #476]	; (8007aa4 <HAL_DMA_IRQHandler+0xc88>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d031      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a76      	ldr	r2, [pc, #472]	; (8007aa8 <HAL_DMA_IRQHandler+0xc8c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d02c      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a74      	ldr	r2, [pc, #464]	; (8007aac <HAL_DMA_IRQHandler+0xc90>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d027      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a73      	ldr	r2, [pc, #460]	; (8007ab0 <HAL_DMA_IRQHandler+0xc94>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d022      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a71      	ldr	r2, [pc, #452]	; (8007ab4 <HAL_DMA_IRQHandler+0xc98>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d01d      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a70      	ldr	r2, [pc, #448]	; (8007ab8 <HAL_DMA_IRQHandler+0xc9c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d018      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a6e      	ldr	r2, [pc, #440]	; (8007abc <HAL_DMA_IRQHandler+0xca0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d013      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a6d      	ldr	r2, [pc, #436]	; (8007ac0 <HAL_DMA_IRQHandler+0xca4>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d00e      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a6b      	ldr	r2, [pc, #428]	; (8007ac4 <HAL_DMA_IRQHandler+0xca8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d009      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a6a      	ldr	r2, [pc, #424]	; (8007ac8 <HAL_DMA_IRQHandler+0xcac>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d004      	beq.n	800792e <HAL_DMA_IRQHandler+0xb12>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a68      	ldr	r2, [pc, #416]	; (8007acc <HAL_DMA_IRQHandler+0xcb0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d108      	bne.n	8007940 <HAL_DMA_IRQHandler+0xb24>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0208 	bic.w	r2, r2, #8
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e007      	b.n	8007950 <HAL_DMA_IRQHandler+0xb34>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0204 	bic.w	r2, r2, #4
 800794e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8165 	beq.w	8007c24 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007962:	e15f      	b.n	8007c24 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007968:	f003 031f 	and.w	r3, r3, #31
 800796c:	2202      	movs	r2, #2
 800796e:	409a      	lsls	r2, r3
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	4013      	ands	r3, r2
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 80c5 	beq.w	8007b04 <HAL_DMA_IRQHandler+0xce8>
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 80bf 	beq.w	8007b04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800798a:	f003 031f 	and.w	r3, r3, #31
 800798e:	2202      	movs	r2, #2
 8007990:	409a      	lsls	r2, r3
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d018      	beq.n	80079d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d109      	bne.n	80079be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 813a 	beq.w	8007c28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079bc:	e134      	b.n	8007c28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8130 	beq.w	8007c28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079d0:	e12a      	b.n	8007c28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f040 8089 	bne.w	8007af0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a2b      	ldr	r2, [pc, #172]	; (8007a90 <HAL_DMA_IRQHandler+0xc74>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d04a      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a29      	ldr	r2, [pc, #164]	; (8007a94 <HAL_DMA_IRQHandler+0xc78>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d045      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a28      	ldr	r2, [pc, #160]	; (8007a98 <HAL_DMA_IRQHandler+0xc7c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d040      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a26      	ldr	r2, [pc, #152]	; (8007a9c <HAL_DMA_IRQHandler+0xc80>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d03b      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a25      	ldr	r2, [pc, #148]	; (8007aa0 <HAL_DMA_IRQHandler+0xc84>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d036      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a23      	ldr	r2, [pc, #140]	; (8007aa4 <HAL_DMA_IRQHandler+0xc88>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d031      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a22      	ldr	r2, [pc, #136]	; (8007aa8 <HAL_DMA_IRQHandler+0xc8c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d02c      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a20      	ldr	r2, [pc, #128]	; (8007aac <HAL_DMA_IRQHandler+0xc90>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d027      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a1f      	ldr	r2, [pc, #124]	; (8007ab0 <HAL_DMA_IRQHandler+0xc94>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d022      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1d      	ldr	r2, [pc, #116]	; (8007ab4 <HAL_DMA_IRQHandler+0xc98>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d01d      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1c      	ldr	r2, [pc, #112]	; (8007ab8 <HAL_DMA_IRQHandler+0xc9c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d018      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1a      	ldr	r2, [pc, #104]	; (8007abc <HAL_DMA_IRQHandler+0xca0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d013      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a19      	ldr	r2, [pc, #100]	; (8007ac0 <HAL_DMA_IRQHandler+0xca4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00e      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a17      	ldr	r2, [pc, #92]	; (8007ac4 <HAL_DMA_IRQHandler+0xca8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d009      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a16      	ldr	r2, [pc, #88]	; (8007ac8 <HAL_DMA_IRQHandler+0xcac>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d004      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc62>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a14      	ldr	r2, [pc, #80]	; (8007acc <HAL_DMA_IRQHandler+0xcb0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d128      	bne.n	8007ad0 <HAL_DMA_IRQHandler+0xcb4>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0214 	bic.w	r2, r2, #20
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e027      	b.n	8007ae0 <HAL_DMA_IRQHandler+0xcc4>
 8007a90:	40020010 	.word	0x40020010
 8007a94:	40020028 	.word	0x40020028
 8007a98:	40020040 	.word	0x40020040
 8007a9c:	40020058 	.word	0x40020058
 8007aa0:	40020070 	.word	0x40020070
 8007aa4:	40020088 	.word	0x40020088
 8007aa8:	400200a0 	.word	0x400200a0
 8007aac:	400200b8 	.word	0x400200b8
 8007ab0:	40020410 	.word	0x40020410
 8007ab4:	40020428 	.word	0x40020428
 8007ab8:	40020440 	.word	0x40020440
 8007abc:	40020458 	.word	0x40020458
 8007ac0:	40020470 	.word	0x40020470
 8007ac4:	40020488 	.word	0x40020488
 8007ac8:	400204a0 	.word	0x400204a0
 8007acc:	400204b8 	.word	0x400204b8
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 020a 	bic.w	r2, r2, #10
 8007ade:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8097 	beq.w	8007c28 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b02:	e091      	b.n	8007c28 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b08:	f003 031f 	and.w	r3, r3, #31
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	409a      	lsls	r2, r3
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	4013      	ands	r3, r2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8088 	beq.w	8007c2a <HAL_DMA_IRQHandler+0xe0e>
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f003 0308 	and.w	r3, r3, #8
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 8082 	beq.w	8007c2a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a41      	ldr	r2, [pc, #260]	; (8007c30 <HAL_DMA_IRQHandler+0xe14>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d04a      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a3f      	ldr	r2, [pc, #252]	; (8007c34 <HAL_DMA_IRQHandler+0xe18>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d045      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a3e      	ldr	r2, [pc, #248]	; (8007c38 <HAL_DMA_IRQHandler+0xe1c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d040      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a3c      	ldr	r2, [pc, #240]	; (8007c3c <HAL_DMA_IRQHandler+0xe20>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d03b      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a3b      	ldr	r2, [pc, #236]	; (8007c40 <HAL_DMA_IRQHandler+0xe24>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d036      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a39      	ldr	r2, [pc, #228]	; (8007c44 <HAL_DMA_IRQHandler+0xe28>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d031      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a38      	ldr	r2, [pc, #224]	; (8007c48 <HAL_DMA_IRQHandler+0xe2c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d02c      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a36      	ldr	r2, [pc, #216]	; (8007c4c <HAL_DMA_IRQHandler+0xe30>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d027      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a35      	ldr	r2, [pc, #212]	; (8007c50 <HAL_DMA_IRQHandler+0xe34>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d022      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a33      	ldr	r2, [pc, #204]	; (8007c54 <HAL_DMA_IRQHandler+0xe38>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d01d      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a32      	ldr	r2, [pc, #200]	; (8007c58 <HAL_DMA_IRQHandler+0xe3c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d018      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a30      	ldr	r2, [pc, #192]	; (8007c5c <HAL_DMA_IRQHandler+0xe40>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d013      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a2f      	ldr	r2, [pc, #188]	; (8007c60 <HAL_DMA_IRQHandler+0xe44>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00e      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a2d      	ldr	r2, [pc, #180]	; (8007c64 <HAL_DMA_IRQHandler+0xe48>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d009      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a2c      	ldr	r2, [pc, #176]	; (8007c68 <HAL_DMA_IRQHandler+0xe4c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d004      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0xdaa>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a2a      	ldr	r2, [pc, #168]	; (8007c6c <HAL_DMA_IRQHandler+0xe50>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d108      	bne.n	8007bd8 <HAL_DMA_IRQHandler+0xdbc>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 021c 	bic.w	r2, r2, #28
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	e007      	b.n	8007be8 <HAL_DMA_IRQHandler+0xdcc>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 020e 	bic.w	r2, r2, #14
 8007be6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bec:	f003 031f 	and.w	r3, r3, #31
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	409a      	lsls	r2, r3
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d009      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	4798      	blx	r3
 8007c1e:	e004      	b.n	8007c2a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c20:	bf00      	nop
 8007c22:	e002      	b.n	8007c2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c24:	bf00      	nop
 8007c26:	e000      	b.n	8007c2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c2a:	3728      	adds	r7, #40	; 0x28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	40020010 	.word	0x40020010
 8007c34:	40020028 	.word	0x40020028
 8007c38:	40020040 	.word	0x40020040
 8007c3c:	40020058 	.word	0x40020058
 8007c40:	40020070 	.word	0x40020070
 8007c44:	40020088 	.word	0x40020088
 8007c48:	400200a0 	.word	0x400200a0
 8007c4c:	400200b8 	.word	0x400200b8
 8007c50:	40020410 	.word	0x40020410
 8007c54:	40020428 	.word	0x40020428
 8007c58:	40020440 	.word	0x40020440
 8007c5c:	40020458 	.word	0x40020458
 8007c60:	40020470 	.word	0x40020470
 8007c64:	40020488 	.word	0x40020488
 8007c68:	400204a0 	.word	0x400204a0
 8007c6c:	400204b8 	.word	0x400204b8

08007c70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c82:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c88:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a7f      	ldr	r2, [pc, #508]	; (8007e8c <DMA_SetConfig+0x21c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d072      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a7d      	ldr	r2, [pc, #500]	; (8007e90 <DMA_SetConfig+0x220>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d06d      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a7c      	ldr	r2, [pc, #496]	; (8007e94 <DMA_SetConfig+0x224>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d068      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a7a      	ldr	r2, [pc, #488]	; (8007e98 <DMA_SetConfig+0x228>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d063      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a79      	ldr	r2, [pc, #484]	; (8007e9c <DMA_SetConfig+0x22c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d05e      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a77      	ldr	r2, [pc, #476]	; (8007ea0 <DMA_SetConfig+0x230>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d059      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a76      	ldr	r2, [pc, #472]	; (8007ea4 <DMA_SetConfig+0x234>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d054      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a74      	ldr	r2, [pc, #464]	; (8007ea8 <DMA_SetConfig+0x238>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d04f      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a73      	ldr	r2, [pc, #460]	; (8007eac <DMA_SetConfig+0x23c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d04a      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a71      	ldr	r2, [pc, #452]	; (8007eb0 <DMA_SetConfig+0x240>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d045      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a70      	ldr	r2, [pc, #448]	; (8007eb4 <DMA_SetConfig+0x244>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d040      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a6e      	ldr	r2, [pc, #440]	; (8007eb8 <DMA_SetConfig+0x248>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d03b      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a6d      	ldr	r2, [pc, #436]	; (8007ebc <DMA_SetConfig+0x24c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d036      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a6b      	ldr	r2, [pc, #428]	; (8007ec0 <DMA_SetConfig+0x250>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d031      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a6a      	ldr	r2, [pc, #424]	; (8007ec4 <DMA_SetConfig+0x254>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d02c      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a68      	ldr	r2, [pc, #416]	; (8007ec8 <DMA_SetConfig+0x258>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d027      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a67      	ldr	r2, [pc, #412]	; (8007ecc <DMA_SetConfig+0x25c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d022      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a65      	ldr	r2, [pc, #404]	; (8007ed0 <DMA_SetConfig+0x260>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d01d      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a64      	ldr	r2, [pc, #400]	; (8007ed4 <DMA_SetConfig+0x264>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d018      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a62      	ldr	r2, [pc, #392]	; (8007ed8 <DMA_SetConfig+0x268>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d013      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a61      	ldr	r2, [pc, #388]	; (8007edc <DMA_SetConfig+0x26c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00e      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a5f      	ldr	r2, [pc, #380]	; (8007ee0 <DMA_SetConfig+0x270>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d009      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a5e      	ldr	r2, [pc, #376]	; (8007ee4 <DMA_SetConfig+0x274>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d004      	beq.n	8007d7a <DMA_SetConfig+0x10a>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a5c      	ldr	r2, [pc, #368]	; (8007ee8 <DMA_SetConfig+0x278>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d101      	bne.n	8007d7e <DMA_SetConfig+0x10e>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e000      	b.n	8007d80 <DMA_SetConfig+0x110>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00d      	beq.n	8007da0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d004      	beq.n	8007da0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a39      	ldr	r2, [pc, #228]	; (8007e8c <DMA_SetConfig+0x21c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d04a      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a38      	ldr	r2, [pc, #224]	; (8007e90 <DMA_SetConfig+0x220>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d045      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a36      	ldr	r2, [pc, #216]	; (8007e94 <DMA_SetConfig+0x224>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d040      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a35      	ldr	r2, [pc, #212]	; (8007e98 <DMA_SetConfig+0x228>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d03b      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a33      	ldr	r2, [pc, #204]	; (8007e9c <DMA_SetConfig+0x22c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d036      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a32      	ldr	r2, [pc, #200]	; (8007ea0 <DMA_SetConfig+0x230>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d031      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a30      	ldr	r2, [pc, #192]	; (8007ea4 <DMA_SetConfig+0x234>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d02c      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a2f      	ldr	r2, [pc, #188]	; (8007ea8 <DMA_SetConfig+0x238>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d027      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a2d      	ldr	r2, [pc, #180]	; (8007eac <DMA_SetConfig+0x23c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d022      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a2c      	ldr	r2, [pc, #176]	; (8007eb0 <DMA_SetConfig+0x240>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d01d      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a2a      	ldr	r2, [pc, #168]	; (8007eb4 <DMA_SetConfig+0x244>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d018      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a29      	ldr	r2, [pc, #164]	; (8007eb8 <DMA_SetConfig+0x248>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d013      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a27      	ldr	r2, [pc, #156]	; (8007ebc <DMA_SetConfig+0x24c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00e      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a26      	ldr	r2, [pc, #152]	; (8007ec0 <DMA_SetConfig+0x250>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d009      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a24      	ldr	r2, [pc, #144]	; (8007ec4 <DMA_SetConfig+0x254>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d004      	beq.n	8007e40 <DMA_SetConfig+0x1d0>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a23      	ldr	r2, [pc, #140]	; (8007ec8 <DMA_SetConfig+0x258>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d101      	bne.n	8007e44 <DMA_SetConfig+0x1d4>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e000      	b.n	8007e46 <DMA_SetConfig+0x1d6>
 8007e44:	2300      	movs	r3, #0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d059      	beq.n	8007efe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4e:	f003 031f 	and.w	r3, r3, #31
 8007e52:	223f      	movs	r2, #63	; 0x3f
 8007e54:	409a      	lsls	r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e68:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	d138      	bne.n	8007eec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e8a:	e086      	b.n	8007f9a <DMA_SetConfig+0x32a>
 8007e8c:	40020010 	.word	0x40020010
 8007e90:	40020028 	.word	0x40020028
 8007e94:	40020040 	.word	0x40020040
 8007e98:	40020058 	.word	0x40020058
 8007e9c:	40020070 	.word	0x40020070
 8007ea0:	40020088 	.word	0x40020088
 8007ea4:	400200a0 	.word	0x400200a0
 8007ea8:	400200b8 	.word	0x400200b8
 8007eac:	40020410 	.word	0x40020410
 8007eb0:	40020428 	.word	0x40020428
 8007eb4:	40020440 	.word	0x40020440
 8007eb8:	40020458 	.word	0x40020458
 8007ebc:	40020470 	.word	0x40020470
 8007ec0:	40020488 	.word	0x40020488
 8007ec4:	400204a0 	.word	0x400204a0
 8007ec8:	400204b8 	.word	0x400204b8
 8007ecc:	58025408 	.word	0x58025408
 8007ed0:	5802541c 	.word	0x5802541c
 8007ed4:	58025430 	.word	0x58025430
 8007ed8:	58025444 	.word	0x58025444
 8007edc:	58025458 	.word	0x58025458
 8007ee0:	5802546c 	.word	0x5802546c
 8007ee4:	58025480 	.word	0x58025480
 8007ee8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	60da      	str	r2, [r3, #12]
}
 8007efc:	e04d      	b.n	8007f9a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a29      	ldr	r2, [pc, #164]	; (8007fa8 <DMA_SetConfig+0x338>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d022      	beq.n	8007f4e <DMA_SetConfig+0x2de>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a27      	ldr	r2, [pc, #156]	; (8007fac <DMA_SetConfig+0x33c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d01d      	beq.n	8007f4e <DMA_SetConfig+0x2de>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a26      	ldr	r2, [pc, #152]	; (8007fb0 <DMA_SetConfig+0x340>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d018      	beq.n	8007f4e <DMA_SetConfig+0x2de>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a24      	ldr	r2, [pc, #144]	; (8007fb4 <DMA_SetConfig+0x344>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d013      	beq.n	8007f4e <DMA_SetConfig+0x2de>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a23      	ldr	r2, [pc, #140]	; (8007fb8 <DMA_SetConfig+0x348>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00e      	beq.n	8007f4e <DMA_SetConfig+0x2de>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a21      	ldr	r2, [pc, #132]	; (8007fbc <DMA_SetConfig+0x34c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d009      	beq.n	8007f4e <DMA_SetConfig+0x2de>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a20      	ldr	r2, [pc, #128]	; (8007fc0 <DMA_SetConfig+0x350>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d004      	beq.n	8007f4e <DMA_SetConfig+0x2de>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <DMA_SetConfig+0x354>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d101      	bne.n	8007f52 <DMA_SetConfig+0x2e2>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <DMA_SetConfig+0x2e4>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d020      	beq.n	8007f9a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f5c:	f003 031f 	and.w	r3, r3, #31
 8007f60:	2201      	movs	r2, #1
 8007f62:	409a      	lsls	r2, r3
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	2b40      	cmp	r3, #64	; 0x40
 8007f76:	d108      	bne.n	8007f8a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	60da      	str	r2, [r3, #12]
}
 8007f88:	e007      	b.n	8007f9a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	60da      	str	r2, [r3, #12]
}
 8007f9a:	bf00      	nop
 8007f9c:	371c      	adds	r7, #28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	58025408 	.word	0x58025408
 8007fac:	5802541c 	.word	0x5802541c
 8007fb0:	58025430 	.word	0x58025430
 8007fb4:	58025444 	.word	0x58025444
 8007fb8:	58025458 	.word	0x58025458
 8007fbc:	5802546c 	.word	0x5802546c
 8007fc0:	58025480 	.word	0x58025480
 8007fc4:	58025494 	.word	0x58025494

08007fc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a42      	ldr	r2, [pc, #264]	; (80080e0 <DMA_CalcBaseAndBitshift+0x118>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d04a      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a41      	ldr	r2, [pc, #260]	; (80080e4 <DMA_CalcBaseAndBitshift+0x11c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d045      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a3f      	ldr	r2, [pc, #252]	; (80080e8 <DMA_CalcBaseAndBitshift+0x120>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d040      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a3e      	ldr	r2, [pc, #248]	; (80080ec <DMA_CalcBaseAndBitshift+0x124>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d03b      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a3c      	ldr	r2, [pc, #240]	; (80080f0 <DMA_CalcBaseAndBitshift+0x128>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d036      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a3b      	ldr	r2, [pc, #236]	; (80080f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d031      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a39      	ldr	r2, [pc, #228]	; (80080f8 <DMA_CalcBaseAndBitshift+0x130>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d02c      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a38      	ldr	r2, [pc, #224]	; (80080fc <DMA_CalcBaseAndBitshift+0x134>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d027      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a36      	ldr	r2, [pc, #216]	; (8008100 <DMA_CalcBaseAndBitshift+0x138>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d022      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a35      	ldr	r2, [pc, #212]	; (8008104 <DMA_CalcBaseAndBitshift+0x13c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d01d      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a33      	ldr	r2, [pc, #204]	; (8008108 <DMA_CalcBaseAndBitshift+0x140>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d018      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a32      	ldr	r2, [pc, #200]	; (800810c <DMA_CalcBaseAndBitshift+0x144>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d013      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a30      	ldr	r2, [pc, #192]	; (8008110 <DMA_CalcBaseAndBitshift+0x148>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00e      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a2f      	ldr	r2, [pc, #188]	; (8008114 <DMA_CalcBaseAndBitshift+0x14c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d009      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a2d      	ldr	r2, [pc, #180]	; (8008118 <DMA_CalcBaseAndBitshift+0x150>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <DMA_CalcBaseAndBitshift+0xa8>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a2c      	ldr	r2, [pc, #176]	; (800811c <DMA_CalcBaseAndBitshift+0x154>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d101      	bne.n	8008074 <DMA_CalcBaseAndBitshift+0xac>
 8008070:	2301      	movs	r3, #1
 8008072:	e000      	b.n	8008076 <DMA_CalcBaseAndBitshift+0xae>
 8008074:	2300      	movs	r3, #0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d024      	beq.n	80080c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	3b10      	subs	r3, #16
 8008082:	4a27      	ldr	r2, [pc, #156]	; (8008120 <DMA_CalcBaseAndBitshift+0x158>)
 8008084:	fba2 2303 	umull	r2, r3, r2, r3
 8008088:	091b      	lsrs	r3, r3, #4
 800808a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	4a24      	ldr	r2, [pc, #144]	; (8008124 <DMA_CalcBaseAndBitshift+0x15c>)
 8008094:	5cd3      	ldrb	r3, [r2, r3]
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d908      	bls.n	80080b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <DMA_CalcBaseAndBitshift+0x160>)
 80080aa:	4013      	ands	r3, r2
 80080ac:	1d1a      	adds	r2, r3, #4
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	659a      	str	r2, [r3, #88]	; 0x58
 80080b2:	e00d      	b.n	80080d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <DMA_CalcBaseAndBitshift+0x160>)
 80080bc:	4013      	ands	r3, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	6593      	str	r3, [r2, #88]	; 0x58
 80080c2:	e005      	b.n	80080d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	40020010 	.word	0x40020010
 80080e4:	40020028 	.word	0x40020028
 80080e8:	40020040 	.word	0x40020040
 80080ec:	40020058 	.word	0x40020058
 80080f0:	40020070 	.word	0x40020070
 80080f4:	40020088 	.word	0x40020088
 80080f8:	400200a0 	.word	0x400200a0
 80080fc:	400200b8 	.word	0x400200b8
 8008100:	40020410 	.word	0x40020410
 8008104:	40020428 	.word	0x40020428
 8008108:	40020440 	.word	0x40020440
 800810c:	40020458 	.word	0x40020458
 8008110:	40020470 	.word	0x40020470
 8008114:	40020488 	.word	0x40020488
 8008118:	400204a0 	.word	0x400204a0
 800811c:	400204b8 	.word	0x400204b8
 8008120:	aaaaaaab 	.word	0xaaaaaaab
 8008124:	0800fdd8 	.word	0x0800fdd8
 8008128:	fffffc00 	.word	0xfffffc00

0800812c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d120      	bne.n	8008182 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008144:	2b03      	cmp	r3, #3
 8008146:	d858      	bhi.n	80081fa <DMA_CheckFifoParam+0xce>
 8008148:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <DMA_CheckFifoParam+0x24>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008161 	.word	0x08008161
 8008154:	08008173 	.word	0x08008173
 8008158:	08008161 	.word	0x08008161
 800815c:	080081fb 	.word	0x080081fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d048      	beq.n	80081fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008170:	e045      	b.n	80081fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008176:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800817a:	d142      	bne.n	8008202 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008180:	e03f      	b.n	8008202 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800818a:	d123      	bne.n	80081d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	2b03      	cmp	r3, #3
 8008192:	d838      	bhi.n	8008206 <DMA_CheckFifoParam+0xda>
 8008194:	a201      	add	r2, pc, #4	; (adr r2, 800819c <DMA_CheckFifoParam+0x70>)
 8008196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819a:	bf00      	nop
 800819c:	080081ad 	.word	0x080081ad
 80081a0:	080081b3 	.word	0x080081b3
 80081a4:	080081ad 	.word	0x080081ad
 80081a8:	080081c5 	.word	0x080081c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	73fb      	strb	r3, [r7, #15]
        break;
 80081b0:	e030      	b.n	8008214 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d025      	beq.n	800820a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081c2:	e022      	b.n	800820a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081cc:	d11f      	bne.n	800820e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081d2:	e01c      	b.n	800820e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d902      	bls.n	80081e2 <DMA_CheckFifoParam+0xb6>
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d003      	beq.n	80081e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80081e0:	e018      	b.n	8008214 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	73fb      	strb	r3, [r7, #15]
        break;
 80081e6:	e015      	b.n	8008214 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00e      	beq.n	8008212 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	73fb      	strb	r3, [r7, #15]
    break;
 80081f8:	e00b      	b.n	8008212 <DMA_CheckFifoParam+0xe6>
        break;
 80081fa:	bf00      	nop
 80081fc:	e00a      	b.n	8008214 <DMA_CheckFifoParam+0xe8>
        break;
 80081fe:	bf00      	nop
 8008200:	e008      	b.n	8008214 <DMA_CheckFifoParam+0xe8>
        break;
 8008202:	bf00      	nop
 8008204:	e006      	b.n	8008214 <DMA_CheckFifoParam+0xe8>
        break;
 8008206:	bf00      	nop
 8008208:	e004      	b.n	8008214 <DMA_CheckFifoParam+0xe8>
        break;
 800820a:	bf00      	nop
 800820c:	e002      	b.n	8008214 <DMA_CheckFifoParam+0xe8>
        break;
 800820e:	bf00      	nop
 8008210:	e000      	b.n	8008214 <DMA_CheckFifoParam+0xe8>
    break;
 8008212:	bf00      	nop
    }
  }

  return status;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop

08008224 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a38      	ldr	r2, [pc, #224]	; (8008318 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d022      	beq.n	8008282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a36      	ldr	r2, [pc, #216]	; (800831c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01d      	beq.n	8008282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a35      	ldr	r2, [pc, #212]	; (8008320 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d018      	beq.n	8008282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a33      	ldr	r2, [pc, #204]	; (8008324 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a32      	ldr	r2, [pc, #200]	; (8008328 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00e      	beq.n	8008282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a30      	ldr	r2, [pc, #192]	; (800832c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d009      	beq.n	8008282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a2f      	ldr	r2, [pc, #188]	; (8008330 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d004      	beq.n	8008282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a2d      	ldr	r2, [pc, #180]	; (8008334 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d101      	bne.n	8008286 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01a      	beq.n	80082c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	3b08      	subs	r3, #8
 8008294:	4a28      	ldr	r2, [pc, #160]	; (8008338 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008296:	fba2 2303 	umull	r2, r3, r2, r3
 800829a:	091b      	lsrs	r3, r3, #4
 800829c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4b26      	ldr	r3, [pc, #152]	; (800833c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a24      	ldr	r2, [pc, #144]	; (8008340 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80082b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f003 031f 	and.w	r3, r3, #31
 80082b8:	2201      	movs	r2, #1
 80082ba:	409a      	lsls	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80082c0:	e024      	b.n	800830c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	3b10      	subs	r3, #16
 80082ca:	4a1e      	ldr	r2, [pc, #120]	; (8008344 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80082cc:	fba2 2303 	umull	r2, r3, r2, r3
 80082d0:	091b      	lsrs	r3, r3, #4
 80082d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	4a1c      	ldr	r2, [pc, #112]	; (8008348 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d806      	bhi.n	80082ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4a1b      	ldr	r2, [pc, #108]	; (800834c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d902      	bls.n	80082ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3308      	adds	r3, #8
 80082e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	4b18      	ldr	r3, [pc, #96]	; (8008350 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	461a      	mov	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a16      	ldr	r2, [pc, #88]	; (8008354 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80082fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f003 031f 	and.w	r3, r3, #31
 8008304:	2201      	movs	r2, #1
 8008306:	409a      	lsls	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800830c:	bf00      	nop
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	58025408 	.word	0x58025408
 800831c:	5802541c 	.word	0x5802541c
 8008320:	58025430 	.word	0x58025430
 8008324:	58025444 	.word	0x58025444
 8008328:	58025458 	.word	0x58025458
 800832c:	5802546c 	.word	0x5802546c
 8008330:	58025480 	.word	0x58025480
 8008334:	58025494 	.word	0x58025494
 8008338:	cccccccd 	.word	0xcccccccd
 800833c:	16009600 	.word	0x16009600
 8008340:	58025880 	.word	0x58025880
 8008344:	aaaaaaab 	.word	0xaaaaaaab
 8008348:	400204b8 	.word	0x400204b8
 800834c:	4002040f 	.word	0x4002040f
 8008350:	10008200 	.word	0x10008200
 8008354:	40020880 	.word	0x40020880

08008358 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	b2db      	uxtb	r3, r3
 8008366:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d04a      	beq.n	8008404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b08      	cmp	r3, #8
 8008372:	d847      	bhi.n	8008404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a25      	ldr	r2, [pc, #148]	; (8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d022      	beq.n	80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a24      	ldr	r2, [pc, #144]	; (8008414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d01d      	beq.n	80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a22      	ldr	r2, [pc, #136]	; (8008418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d018      	beq.n	80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a21      	ldr	r2, [pc, #132]	; (800841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d013      	beq.n	80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a1f      	ldr	r2, [pc, #124]	; (8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d00e      	beq.n	80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a1e      	ldr	r2, [pc, #120]	; (8008424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d009      	beq.n	80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a1c      	ldr	r2, [pc, #112]	; (8008428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d004      	beq.n	80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a1b      	ldr	r2, [pc, #108]	; (800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d101      	bne.n	80083c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e000      	b.n	80083ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80083c8:	2300      	movs	r3, #0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4b17      	ldr	r3, [pc, #92]	; (8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	461a      	mov	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a15      	ldr	r2, [pc, #84]	; (8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80083e0:	671a      	str	r2, [r3, #112]	; 0x70
 80083e2:	e009      	b.n	80083f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4b14      	ldr	r3, [pc, #80]	; (8008438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	461a      	mov	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a11      	ldr	r2, [pc, #68]	; (800843c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80083f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	2201      	movs	r2, #1
 80083fe:	409a      	lsls	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008404:	bf00      	nop
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	58025408 	.word	0x58025408
 8008414:	5802541c 	.word	0x5802541c
 8008418:	58025430 	.word	0x58025430
 800841c:	58025444 	.word	0x58025444
 8008420:	58025458 	.word	0x58025458
 8008424:	5802546c 	.word	0x5802546c
 8008428:	58025480 	.word	0x58025480
 800842c:	58025494 	.word	0x58025494
 8008430:	1600963f 	.word	0x1600963f
 8008434:	58025940 	.word	0x58025940
 8008438:	1000823f 	.word	0x1000823f
 800843c:	40020940 	.word	0x40020940

08008440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008440:	b480      	push	{r7}
 8008442:	b089      	sub	sp, #36	; 0x24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800844a:	2300      	movs	r3, #0
 800844c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800844e:	4b86      	ldr	r3, [pc, #536]	; (8008668 <HAL_GPIO_Init+0x228>)
 8008450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008452:	e18c      	b.n	800876e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	2101      	movs	r1, #1
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	fa01 f303 	lsl.w	r3, r1, r3
 8008460:	4013      	ands	r3, r2
 8008462:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 817e 	beq.w	8008768 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f003 0303 	and.w	r3, r3, #3
 8008474:	2b01      	cmp	r3, #1
 8008476:	d005      	beq.n	8008484 <HAL_GPIO_Init+0x44>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d130      	bne.n	80084e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	2203      	movs	r2, #3
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	43db      	mvns	r3, r3
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	4013      	ands	r3, r2
 800849a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	fa02 f303 	lsl.w	r3, r2, r3
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80084ba:	2201      	movs	r2, #1
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	43db      	mvns	r3, r3
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	4013      	ands	r3, r2
 80084c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	091b      	lsrs	r3, r3, #4
 80084d0:	f003 0201 	and.w	r2, r3, #1
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	4313      	orrs	r3, r2
 80084de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d017      	beq.n	8008522 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	005b      	lsls	r3, r3, #1
 80084fc:	2203      	movs	r2, #3
 80084fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008502:	43db      	mvns	r3, r3
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	4013      	ands	r3, r2
 8008508:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	fa02 f303 	lsl.w	r3, r2, r3
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	4313      	orrs	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f003 0303 	and.w	r3, r3, #3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d123      	bne.n	8008576 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	08da      	lsrs	r2, r3, #3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3208      	adds	r2, #8
 8008536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	220f      	movs	r2, #15
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	43db      	mvns	r3, r3
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	4013      	ands	r3, r2
 8008550:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	691a      	ldr	r2, [r3, #16]
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	4313      	orrs	r3, r2
 8008566:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	08da      	lsrs	r2, r3, #3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3208      	adds	r2, #8
 8008570:	69b9      	ldr	r1, [r7, #24]
 8008572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	2203      	movs	r2, #3
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	43db      	mvns	r3, r3
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	4013      	ands	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f003 0203 	and.w	r2, r3, #3
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	fa02 f303 	lsl.w	r3, r2, r3
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 80d8 	beq.w	8008768 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085b8:	4b2c      	ldr	r3, [pc, #176]	; (800866c <HAL_GPIO_Init+0x22c>)
 80085ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085be:	4a2b      	ldr	r2, [pc, #172]	; (800866c <HAL_GPIO_Init+0x22c>)
 80085c0:	f043 0302 	orr.w	r3, r3, #2
 80085c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80085c8:	4b28      	ldr	r3, [pc, #160]	; (800866c <HAL_GPIO_Init+0x22c>)
 80085ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085d6:	4a26      	ldr	r2, [pc, #152]	; (8008670 <HAL_GPIO_Init+0x230>)
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	089b      	lsrs	r3, r3, #2
 80085dc:	3302      	adds	r3, #2
 80085de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	220f      	movs	r2, #15
 80085ee:	fa02 f303 	lsl.w	r3, r2, r3
 80085f2:	43db      	mvns	r3, r3
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	4013      	ands	r3, r2
 80085f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a1d      	ldr	r2, [pc, #116]	; (8008674 <HAL_GPIO_Init+0x234>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d04a      	beq.n	8008698 <HAL_GPIO_Init+0x258>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a1c      	ldr	r2, [pc, #112]	; (8008678 <HAL_GPIO_Init+0x238>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d02b      	beq.n	8008662 <HAL_GPIO_Init+0x222>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a1b      	ldr	r2, [pc, #108]	; (800867c <HAL_GPIO_Init+0x23c>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d025      	beq.n	800865e <HAL_GPIO_Init+0x21e>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a1a      	ldr	r2, [pc, #104]	; (8008680 <HAL_GPIO_Init+0x240>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d01f      	beq.n	800865a <HAL_GPIO_Init+0x21a>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a19      	ldr	r2, [pc, #100]	; (8008684 <HAL_GPIO_Init+0x244>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d019      	beq.n	8008656 <HAL_GPIO_Init+0x216>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a18      	ldr	r2, [pc, #96]	; (8008688 <HAL_GPIO_Init+0x248>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d013      	beq.n	8008652 <HAL_GPIO_Init+0x212>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a17      	ldr	r2, [pc, #92]	; (800868c <HAL_GPIO_Init+0x24c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d00d      	beq.n	800864e <HAL_GPIO_Init+0x20e>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a16      	ldr	r2, [pc, #88]	; (8008690 <HAL_GPIO_Init+0x250>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d007      	beq.n	800864a <HAL_GPIO_Init+0x20a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a15      	ldr	r2, [pc, #84]	; (8008694 <HAL_GPIO_Init+0x254>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d101      	bne.n	8008646 <HAL_GPIO_Init+0x206>
 8008642:	2309      	movs	r3, #9
 8008644:	e029      	b.n	800869a <HAL_GPIO_Init+0x25a>
 8008646:	230a      	movs	r3, #10
 8008648:	e027      	b.n	800869a <HAL_GPIO_Init+0x25a>
 800864a:	2307      	movs	r3, #7
 800864c:	e025      	b.n	800869a <HAL_GPIO_Init+0x25a>
 800864e:	2306      	movs	r3, #6
 8008650:	e023      	b.n	800869a <HAL_GPIO_Init+0x25a>
 8008652:	2305      	movs	r3, #5
 8008654:	e021      	b.n	800869a <HAL_GPIO_Init+0x25a>
 8008656:	2304      	movs	r3, #4
 8008658:	e01f      	b.n	800869a <HAL_GPIO_Init+0x25a>
 800865a:	2303      	movs	r3, #3
 800865c:	e01d      	b.n	800869a <HAL_GPIO_Init+0x25a>
 800865e:	2302      	movs	r3, #2
 8008660:	e01b      	b.n	800869a <HAL_GPIO_Init+0x25a>
 8008662:	2301      	movs	r3, #1
 8008664:	e019      	b.n	800869a <HAL_GPIO_Init+0x25a>
 8008666:	bf00      	nop
 8008668:	58000080 	.word	0x58000080
 800866c:	58024400 	.word	0x58024400
 8008670:	58000400 	.word	0x58000400
 8008674:	58020000 	.word	0x58020000
 8008678:	58020400 	.word	0x58020400
 800867c:	58020800 	.word	0x58020800
 8008680:	58020c00 	.word	0x58020c00
 8008684:	58021000 	.word	0x58021000
 8008688:	58021400 	.word	0x58021400
 800868c:	58021800 	.word	0x58021800
 8008690:	58021c00 	.word	0x58021c00
 8008694:	58022400 	.word	0x58022400
 8008698:	2300      	movs	r3, #0
 800869a:	69fa      	ldr	r2, [r7, #28]
 800869c:	f002 0203 	and.w	r2, r2, #3
 80086a0:	0092      	lsls	r2, r2, #2
 80086a2:	4093      	lsls	r3, r2
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086aa:	4938      	ldr	r1, [pc, #224]	; (800878c <HAL_GPIO_Init+0x34c>)
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	089b      	lsrs	r3, r3, #2
 80086b0:	3302      	adds	r3, #2
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80086b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	43db      	mvns	r3, r3
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	4013      	ands	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80086de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80086e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	43db      	mvns	r3, r3
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	4013      	ands	r3, r2
 80086f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800870c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	43db      	mvns	r3, r3
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	4013      	ands	r3, r2
 8008722:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d003      	beq.n	8008738 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	43db      	mvns	r3, r3
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	4013      	ands	r3, r2
 800874c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	4313      	orrs	r3, r2
 8008760:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	3301      	adds	r3, #1
 800876c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	f47f ae6b 	bne.w	8008454 <HAL_GPIO_Init+0x14>
  }
}
 800877e:	bf00      	nop
 8008780:	bf00      	nop
 8008782:	3724      	adds	r7, #36	; 0x24
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	58000400 	.word	0x58000400

08008790 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800879e:	4b72      	ldr	r3, [pc, #456]	; (8008968 <HAL_GPIO_DeInit+0x1d8>)
 80087a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80087a2:	e0d3      	b.n	800894c <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80087a4:	2201      	movs	r2, #1
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	4013      	ands	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 80c6 	beq.w	8008946 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80087ba:	4a6c      	ldr	r2, [pc, #432]	; (800896c <HAL_GPIO_DeInit+0x1dc>)
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	089b      	lsrs	r3, r3, #2
 80087c0:	3302      	adds	r3, #2
 80087c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087c6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	220f      	movs	r2, #15
 80087d2:	fa02 f303 	lsl.w	r3, r2, r3
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	4013      	ands	r3, r2
 80087da:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a64      	ldr	r2, [pc, #400]	; (8008970 <HAL_GPIO_DeInit+0x1e0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d031      	beq.n	8008848 <HAL_GPIO_DeInit+0xb8>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a63      	ldr	r2, [pc, #396]	; (8008974 <HAL_GPIO_DeInit+0x1e4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d02b      	beq.n	8008844 <HAL_GPIO_DeInit+0xb4>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a62      	ldr	r2, [pc, #392]	; (8008978 <HAL_GPIO_DeInit+0x1e8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d025      	beq.n	8008840 <HAL_GPIO_DeInit+0xb0>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a61      	ldr	r2, [pc, #388]	; (800897c <HAL_GPIO_DeInit+0x1ec>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d01f      	beq.n	800883c <HAL_GPIO_DeInit+0xac>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a60      	ldr	r2, [pc, #384]	; (8008980 <HAL_GPIO_DeInit+0x1f0>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d019      	beq.n	8008838 <HAL_GPIO_DeInit+0xa8>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a5f      	ldr	r2, [pc, #380]	; (8008984 <HAL_GPIO_DeInit+0x1f4>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d013      	beq.n	8008834 <HAL_GPIO_DeInit+0xa4>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a5e      	ldr	r2, [pc, #376]	; (8008988 <HAL_GPIO_DeInit+0x1f8>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00d      	beq.n	8008830 <HAL_GPIO_DeInit+0xa0>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a5d      	ldr	r2, [pc, #372]	; (800898c <HAL_GPIO_DeInit+0x1fc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d007      	beq.n	800882c <HAL_GPIO_DeInit+0x9c>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a5c      	ldr	r2, [pc, #368]	; (8008990 <HAL_GPIO_DeInit+0x200>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d101      	bne.n	8008828 <HAL_GPIO_DeInit+0x98>
 8008824:	2309      	movs	r3, #9
 8008826:	e010      	b.n	800884a <HAL_GPIO_DeInit+0xba>
 8008828:	230a      	movs	r3, #10
 800882a:	e00e      	b.n	800884a <HAL_GPIO_DeInit+0xba>
 800882c:	2307      	movs	r3, #7
 800882e:	e00c      	b.n	800884a <HAL_GPIO_DeInit+0xba>
 8008830:	2306      	movs	r3, #6
 8008832:	e00a      	b.n	800884a <HAL_GPIO_DeInit+0xba>
 8008834:	2305      	movs	r3, #5
 8008836:	e008      	b.n	800884a <HAL_GPIO_DeInit+0xba>
 8008838:	2304      	movs	r3, #4
 800883a:	e006      	b.n	800884a <HAL_GPIO_DeInit+0xba>
 800883c:	2303      	movs	r3, #3
 800883e:	e004      	b.n	800884a <HAL_GPIO_DeInit+0xba>
 8008840:	2302      	movs	r3, #2
 8008842:	e002      	b.n	800884a <HAL_GPIO_DeInit+0xba>
 8008844:	2301      	movs	r3, #1
 8008846:	e000      	b.n	800884a <HAL_GPIO_DeInit+0xba>
 8008848:	2300      	movs	r3, #0
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	f002 0203 	and.w	r2, r2, #3
 8008850:	0092      	lsls	r2, r2, #2
 8008852:	4093      	lsls	r3, r2
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	429a      	cmp	r2, r3
 8008858:	d136      	bne.n	80088c8 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	43db      	mvns	r3, r3
 8008862:	401a      	ands	r2, r3
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	43db      	mvns	r3, r3
 8008870:	401a      	ands	r2, r3
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	43db      	mvns	r3, r3
 8008880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008884:	4013      	ands	r3, r2
 8008886:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	43db      	mvns	r3, r3
 8008892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008896:	4013      	ands	r3, r2
 8008898:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	220f      	movs	r2, #15
 80088a4:	fa02 f303 	lsl.w	r3, r2, r3
 80088a8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80088aa:	4a30      	ldr	r2, [pc, #192]	; (800896c <HAL_GPIO_DeInit+0x1dc>)
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	089b      	lsrs	r3, r3, #2
 80088b0:	3302      	adds	r3, #2
 80088b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	43da      	mvns	r2, r3
 80088ba:	482c      	ldr	r0, [pc, #176]	; (800896c <HAL_GPIO_DeInit+0x1dc>)
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	089b      	lsrs	r3, r3, #2
 80088c0:	400a      	ands	r2, r1
 80088c2:	3302      	adds	r3, #2
 80088c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	2103      	movs	r1, #3
 80088d2:	fa01 f303 	lsl.w	r3, r1, r3
 80088d6:	431a      	orrs	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	08da      	lsrs	r2, r3, #3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3208      	adds	r2, #8
 80088e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	220f      	movs	r2, #15
 80088f2:	fa02 f303 	lsl.w	r3, r2, r3
 80088f6:	43db      	mvns	r3, r3
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	08d2      	lsrs	r2, r2, #3
 80088fc:	4019      	ands	r1, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3208      	adds	r2, #8
 8008902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	2103      	movs	r1, #3
 8008910:	fa01 f303 	lsl.w	r3, r1, r3
 8008914:	43db      	mvns	r3, r3
 8008916:	401a      	ands	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	2101      	movs	r1, #1
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	fa01 f303 	lsl.w	r3, r1, r3
 8008928:	43db      	mvns	r3, r3
 800892a:	401a      	ands	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	2103      	movs	r1, #3
 800893a:	fa01 f303 	lsl.w	r3, r1, r3
 800893e:	43db      	mvns	r3, r3
 8008940:	401a      	ands	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	3301      	adds	r3, #1
 800894a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	fa22 f303 	lsr.w	r3, r2, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	f47f af25 	bne.w	80087a4 <HAL_GPIO_DeInit+0x14>
  }
}
 800895a:	bf00      	nop
 800895c:	bf00      	nop
 800895e:	371c      	adds	r7, #28
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	58000080 	.word	0x58000080
 800896c:	58000400 	.word	0x58000400
 8008970:	58020000 	.word	0x58020000
 8008974:	58020400 	.word	0x58020400
 8008978:	58020800 	.word	0x58020800
 800897c:	58020c00 	.word	0x58020c00
 8008980:	58021000 	.word	0x58021000
 8008984:	58021400 	.word	0x58021400
 8008988:	58021800 	.word	0x58021800
 800898c:	58021c00 	.word	0x58021c00
 8008990:	58022400 	.word	0x58022400

08008994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	807b      	strh	r3, [r7, #2]
 80089a0:	4613      	mov	r3, r2
 80089a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80089a4:	787b      	ldrb	r3, [r7, #1]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089aa:	887a      	ldrh	r2, [r7, #2]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80089b0:	e003      	b.n	80089ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80089b2:	887b      	ldrh	r3, [r7, #2]
 80089b4:	041a      	lsls	r2, r3, #16
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	619a      	str	r2, [r3, #24]
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	4603      	mov	r3, r0
 80089ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80089d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d008      	beq.n	80089f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80089e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089e4:	88fb      	ldrh	r3, [r7, #6]
 80089e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f804 	bl	80089fa <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80089f2:	bf00      	nop
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	4603      	mov	r3, r0
 8008a02:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a18:	4b19      	ldr	r3, [pc, #100]	; (8008a80 <HAL_PWREx_ConfigSupply+0x70>)
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	2b04      	cmp	r3, #4
 8008a22:	d00a      	beq.n	8008a3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a24:	4b16      	ldr	r3, [pc, #88]	; (8008a80 <HAL_PWREx_ConfigSupply+0x70>)
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d001      	beq.n	8008a36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e01f      	b.n	8008a76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e01d      	b.n	8008a76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a3a:	4b11      	ldr	r3, [pc, #68]	; (8008a80 <HAL_PWREx_ConfigSupply+0x70>)
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f023 0207 	bic.w	r2, r3, #7
 8008a42:	490f      	ldr	r1, [pc, #60]	; (8008a80 <HAL_PWREx_ConfigSupply+0x70>)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008a4a:	f7fc fbbb 	bl	80051c4 <HAL_GetTick>
 8008a4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a50:	e009      	b.n	8008a66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008a52:	f7fc fbb7 	bl	80051c4 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a60:	d901      	bls.n	8008a66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e007      	b.n	8008a76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a66:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <HAL_PWREx_ConfigSupply+0x70>)
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a72:	d1ee      	bne.n	8008a52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	58024800 	.word	0x58024800

08008a84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08c      	sub	sp, #48	; 0x30
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e39d      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 8087 	beq.w	8008bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008aa4:	4b88      	ldr	r3, [pc, #544]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008aae:	4b86      	ldr	r3, [pc, #536]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	2b10      	cmp	r3, #16
 8008ab8:	d007      	beq.n	8008aca <HAL_RCC_OscConfig+0x46>
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	2b18      	cmp	r3, #24
 8008abe:	d110      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x5e>
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	f003 0303 	and.w	r3, r3, #3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d10b      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aca:	4b7f      	ldr	r3, [pc, #508]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d06c      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x12c>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d168      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e377      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aea:	d106      	bne.n	8008afa <HAL_RCC_OscConfig+0x76>
 8008aec:	4b76      	ldr	r3, [pc, #472]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a75      	ldr	r2, [pc, #468]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	e02e      	b.n	8008b58 <HAL_RCC_OscConfig+0xd4>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10c      	bne.n	8008b1c <HAL_RCC_OscConfig+0x98>
 8008b02:	4b71      	ldr	r3, [pc, #452]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a70      	ldr	r2, [pc, #448]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	4b6e      	ldr	r3, [pc, #440]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a6d      	ldr	r2, [pc, #436]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	e01d      	b.n	8008b58 <HAL_RCC_OscConfig+0xd4>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b24:	d10c      	bne.n	8008b40 <HAL_RCC_OscConfig+0xbc>
 8008b26:	4b68      	ldr	r3, [pc, #416]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a67      	ldr	r2, [pc, #412]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b30:	6013      	str	r3, [r2, #0]
 8008b32:	4b65      	ldr	r3, [pc, #404]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a64      	ldr	r2, [pc, #400]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	e00b      	b.n	8008b58 <HAL_RCC_OscConfig+0xd4>
 8008b40:	4b61      	ldr	r3, [pc, #388]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a60      	ldr	r2, [pc, #384]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	4b5e      	ldr	r3, [pc, #376]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a5d      	ldr	r2, [pc, #372]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d013      	beq.n	8008b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b60:	f7fc fb30 	bl	80051c4 <HAL_GetTick>
 8008b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b68:	f7fc fb2c 	bl	80051c4 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b64      	cmp	r3, #100	; 0x64
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e32b      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b7a:	4b53      	ldr	r3, [pc, #332]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0f0      	beq.n	8008b68 <HAL_RCC_OscConfig+0xe4>
 8008b86:	e014      	b.n	8008bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b88:	f7fc fb1c 	bl	80051c4 <HAL_GetTick>
 8008b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008b8e:	e008      	b.n	8008ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b90:	f7fc fb18 	bl	80051c4 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b64      	cmp	r3, #100	; 0x64
 8008b9c:	d901      	bls.n	8008ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e317      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ba2:	4b49      	ldr	r3, [pc, #292]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1f0      	bne.n	8008b90 <HAL_RCC_OscConfig+0x10c>
 8008bae:	e000      	b.n	8008bb2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 808c 	beq.w	8008cd8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bc0:	4b41      	ldr	r3, [pc, #260]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bca:	4b3f      	ldr	r3, [pc, #252]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008bd0:	6a3b      	ldr	r3, [r7, #32]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d007      	beq.n	8008be6 <HAL_RCC_OscConfig+0x162>
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	2b18      	cmp	r3, #24
 8008bda:	d137      	bne.n	8008c4c <HAL_RCC_OscConfig+0x1c8>
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d132      	bne.n	8008c4c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008be6:	4b38      	ldr	r3, [pc, #224]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0304 	and.w	r3, r3, #4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d005      	beq.n	8008bfe <HAL_RCC_OscConfig+0x17a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e2e9      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008bfe:	4b32      	ldr	r3, [pc, #200]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f023 0219 	bic.w	r2, r3, #25
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	492f      	ldr	r1, [pc, #188]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c10:	f7fc fad8 	bl	80051c4 <HAL_GetTick>
 8008c14:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c16:	e008      	b.n	8008c2a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c18:	f7fc fad4 	bl	80051c4 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d901      	bls.n	8008c2a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e2d3      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c2a:	4b27      	ldr	r3, [pc, #156]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0304 	and.w	r3, r3, #4
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0f0      	beq.n	8008c18 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c36:	4b24      	ldr	r3, [pc, #144]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	061b      	lsls	r3, r3, #24
 8008c44:	4920      	ldr	r1, [pc, #128]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c4a:	e045      	b.n	8008cd8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d026      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c54:	4b1c      	ldr	r3, [pc, #112]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f023 0219 	bic.w	r2, r3, #25
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	4919      	ldr	r1, [pc, #100]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c66:	f7fc faad 	bl	80051c4 <HAL_GetTick>
 8008c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c6c:	e008      	b.n	8008c80 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c6e:	f7fc faa9 	bl	80051c4 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d901      	bls.n	8008c80 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e2a8      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c80:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0304 	and.w	r3, r3, #4
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0f0      	beq.n	8008c6e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c8c:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	061b      	lsls	r3, r3, #24
 8008c9a:	490b      	ldr	r1, [pc, #44]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	604b      	str	r3, [r1, #4]
 8008ca0:	e01a      	b.n	8008cd8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ca2:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a08      	ldr	r2, [pc, #32]	; (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008ca8:	f023 0301 	bic.w	r3, r3, #1
 8008cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cae:	f7fc fa89 	bl	80051c4 <HAL_GetTick>
 8008cb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008cb4:	e00a      	b.n	8008ccc <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cb6:	f7fc fa85 	bl	80051c4 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d903      	bls.n	8008ccc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e284      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
 8008cc8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ccc:	4b96      	ldr	r3, [pc, #600]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0304 	and.w	r3, r3, #4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1ee      	bne.n	8008cb6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d06a      	beq.n	8008dba <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ce4:	4b90      	ldr	r3, [pc, #576]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cee:	4b8e      	ldr	r3, [pc, #568]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	d007      	beq.n	8008d0a <HAL_RCC_OscConfig+0x286>
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	2b18      	cmp	r3, #24
 8008cfe:	d11b      	bne.n	8008d38 <HAL_RCC_OscConfig+0x2b4>
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d116      	bne.n	8008d38 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d0a:	4b87      	ldr	r3, [pc, #540]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <HAL_RCC_OscConfig+0x29e>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	2b80      	cmp	r3, #128	; 0x80
 8008d1c:	d001      	beq.n	8008d22 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e257      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d22:	4b81      	ldr	r3, [pc, #516]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	061b      	lsls	r3, r3, #24
 8008d30:	497d      	ldr	r1, [pc, #500]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d36:	e040      	b.n	8008dba <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	69db      	ldr	r3, [r3, #28]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d023      	beq.n	8008d88 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008d40:	4b79      	ldr	r3, [pc, #484]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a78      	ldr	r2, [pc, #480]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4c:	f7fc fa3a 	bl	80051c4 <HAL_GetTick>
 8008d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008d54:	f7fc fa36 	bl	80051c4 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e235      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d66:	4b70      	ldr	r3, [pc, #448]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f0      	beq.n	8008d54 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d72:	4b6d      	ldr	r3, [pc, #436]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	061b      	lsls	r3, r3, #24
 8008d80:	4969      	ldr	r1, [pc, #420]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60cb      	str	r3, [r1, #12]
 8008d86:	e018      	b.n	8008dba <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008d88:	4b67      	ldr	r3, [pc, #412]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a66      	ldr	r2, [pc, #408]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d94:	f7fc fa16 	bl	80051c4 <HAL_GetTick>
 8008d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008d9a:	e008      	b.n	8008dae <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008d9c:	f7fc fa12 	bl	80051c4 <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e211      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008dae:	4b5e      	ldr	r3, [pc, #376]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1f0      	bne.n	8008d9c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d036      	beq.n	8008e34 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d019      	beq.n	8008e02 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dce:	4b56      	ldr	r3, [pc, #344]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd2:	4a55      	ldr	r2, [pc, #340]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008dd4:	f043 0301 	orr.w	r3, r3, #1
 8008dd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dda:	f7fc f9f3 	bl	80051c4 <HAL_GetTick>
 8008dde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008de0:	e008      	b.n	8008df4 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008de2:	f7fc f9ef 	bl	80051c4 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e1ee      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008df4:	4b4c      	ldr	r3, [pc, #304]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008df8:	f003 0302 	and.w	r3, r3, #2
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d0f0      	beq.n	8008de2 <HAL_RCC_OscConfig+0x35e>
 8008e00:	e018      	b.n	8008e34 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e02:	4b49      	ldr	r3, [pc, #292]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e06:	4a48      	ldr	r2, [pc, #288]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008e08:	f023 0301 	bic.w	r3, r3, #1
 8008e0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e0e:	f7fc f9d9 	bl	80051c4 <HAL_GetTick>
 8008e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e14:	e008      	b.n	8008e28 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e16:	f7fc f9d5 	bl	80051c4 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d901      	bls.n	8008e28 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e1d4      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e28:	4b3f      	ldr	r3, [pc, #252]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e2c:	f003 0302 	and.w	r3, r3, #2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1f0      	bne.n	8008e16 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d036      	beq.n	8008eae <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d019      	beq.n	8008e7c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e48:	4b37      	ldr	r3, [pc, #220]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a36      	ldr	r2, [pc, #216]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008e4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008e54:	f7fc f9b6 	bl	80051c4 <HAL_GetTick>
 8008e58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e5a:	e008      	b.n	8008e6e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008e5c:	f7fc f9b2 	bl	80051c4 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e1b1      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e6e:	4b2e      	ldr	r3, [pc, #184]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0f0      	beq.n	8008e5c <HAL_RCC_OscConfig+0x3d8>
 8008e7a:	e018      	b.n	8008eae <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e7c:	4b2a      	ldr	r3, [pc, #168]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a29      	ldr	r2, [pc, #164]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008e88:	f7fc f99c 	bl	80051c4 <HAL_GetTick>
 8008e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008e8e:	e008      	b.n	8008ea2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008e90:	f7fc f998 	bl	80051c4 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e197      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ea2:	4b21      	ldr	r3, [pc, #132]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1f0      	bne.n	8008e90 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0304 	and.w	r3, r3, #4
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 8086 	beq.w	8008fc8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ebc:	4b1b      	ldr	r3, [pc, #108]	; (8008f2c <HAL_RCC_OscConfig+0x4a8>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a1a      	ldr	r2, [pc, #104]	; (8008f2c <HAL_RCC_OscConfig+0x4a8>)
 8008ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ec6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ec8:	f7fc f97c 	bl	80051c4 <HAL_GetTick>
 8008ecc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ece:	e008      	b.n	8008ee2 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008ed0:	f7fc f978 	bl	80051c4 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b64      	cmp	r3, #100	; 0x64
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e177      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ee2:	4b12      	ldr	r3, [pc, #72]	; (8008f2c <HAL_RCC_OscConfig+0x4a8>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0f0      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d106      	bne.n	8008f04 <HAL_RCC_OscConfig+0x480>
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efa:	4a0b      	ldr	r2, [pc, #44]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008efc:	f043 0301 	orr.w	r3, r3, #1
 8008f00:	6713      	str	r3, [r2, #112]	; 0x70
 8008f02:	e032      	b.n	8008f6a <HAL_RCC_OscConfig+0x4e6>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d111      	bne.n	8008f30 <HAL_RCC_OscConfig+0x4ac>
 8008f0c:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f10:	4a05      	ldr	r2, [pc, #20]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008f12:	f023 0301 	bic.w	r3, r3, #1
 8008f16:	6713      	str	r3, [r2, #112]	; 0x70
 8008f18:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f1c:	4a02      	ldr	r2, [pc, #8]	; (8008f28 <HAL_RCC_OscConfig+0x4a4>)
 8008f1e:	f023 0304 	bic.w	r3, r3, #4
 8008f22:	6713      	str	r3, [r2, #112]	; 0x70
 8008f24:	e021      	b.n	8008f6a <HAL_RCC_OscConfig+0x4e6>
 8008f26:	bf00      	nop
 8008f28:	58024400 	.word	0x58024400
 8008f2c:	58024800 	.word	0x58024800
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	2b05      	cmp	r3, #5
 8008f36:	d10c      	bne.n	8008f52 <HAL_RCC_OscConfig+0x4ce>
 8008f38:	4b83      	ldr	r3, [pc, #524]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3c:	4a82      	ldr	r2, [pc, #520]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008f3e:	f043 0304 	orr.w	r3, r3, #4
 8008f42:	6713      	str	r3, [r2, #112]	; 0x70
 8008f44:	4b80      	ldr	r3, [pc, #512]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f48:	4a7f      	ldr	r2, [pc, #508]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008f4a:	f043 0301 	orr.w	r3, r3, #1
 8008f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f50:	e00b      	b.n	8008f6a <HAL_RCC_OscConfig+0x4e6>
 8008f52:	4b7d      	ldr	r3, [pc, #500]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f56:	4a7c      	ldr	r2, [pc, #496]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f5e:	4b7a      	ldr	r3, [pc, #488]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f62:	4a79      	ldr	r2, [pc, #484]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008f64:	f023 0304 	bic.w	r3, r3, #4
 8008f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d015      	beq.n	8008f9e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f72:	f7fc f927 	bl	80051c4 <HAL_GetTick>
 8008f76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f78:	e00a      	b.n	8008f90 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f7a:	f7fc f923 	bl	80051c4 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d901      	bls.n	8008f90 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e120      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f90:	4b6d      	ldr	r3, [pc, #436]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d0ee      	beq.n	8008f7a <HAL_RCC_OscConfig+0x4f6>
 8008f9c:	e014      	b.n	8008fc8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f9e:	f7fc f911 	bl	80051c4 <HAL_GetTick>
 8008fa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008fa4:	e00a      	b.n	8008fbc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fa6:	f7fc f90d 	bl	80051c4 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d901      	bls.n	8008fbc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e10a      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008fbc:	4b62      	ldr	r3, [pc, #392]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1ee      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 80ff 	beq.w	80091d0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008fd2:	4b5d      	ldr	r3, [pc, #372]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fda:	2b18      	cmp	r3, #24
 8008fdc:	f000 80ba 	beq.w	8009154 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	f040 8095 	bne.w	8009114 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fea:	4b57      	ldr	r3, [pc, #348]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a56      	ldr	r2, [pc, #344]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8008ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff6:	f7fc f8e5 	bl	80051c4 <HAL_GetTick>
 8008ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ffc:	e008      	b.n	8009010 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ffe:	f7fc f8e1 	bl	80051c4 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	2b02      	cmp	r3, #2
 800900a:	d901      	bls.n	8009010 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e0e0      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009010:	4b4d      	ldr	r3, [pc, #308]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1f0      	bne.n	8008ffe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800901c:	4b4a      	ldr	r3, [pc, #296]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 800901e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009020:	4b4a      	ldr	r3, [pc, #296]	; (800914c <HAL_RCC_OscConfig+0x6c8>)
 8009022:	4013      	ands	r3, r2
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800902c:	0112      	lsls	r2, r2, #4
 800902e:	430a      	orrs	r2, r1
 8009030:	4945      	ldr	r1, [pc, #276]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8009032:	4313      	orrs	r3, r2
 8009034:	628b      	str	r3, [r1, #40]	; 0x28
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903a:	3b01      	subs	r3, #1
 800903c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009044:	3b01      	subs	r3, #1
 8009046:	025b      	lsls	r3, r3, #9
 8009048:	b29b      	uxth	r3, r3
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	3b01      	subs	r3, #1
 8009052:	041b      	lsls	r3, r3, #16
 8009054:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905e:	3b01      	subs	r3, #1
 8009060:	061b      	lsls	r3, r3, #24
 8009062:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009066:	4938      	ldr	r1, [pc, #224]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8009068:	4313      	orrs	r3, r2
 800906a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800906c:	4b36      	ldr	r3, [pc, #216]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	4a35      	ldr	r2, [pc, #212]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8009072:	f023 0301 	bic.w	r3, r3, #1
 8009076:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009078:	4b33      	ldr	r3, [pc, #204]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 800907a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800907c:	4b34      	ldr	r3, [pc, #208]	; (8009150 <HAL_RCC_OscConfig+0x6cc>)
 800907e:	4013      	ands	r3, r2
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009084:	00d2      	lsls	r2, r2, #3
 8009086:	4930      	ldr	r1, [pc, #192]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8009088:	4313      	orrs	r3, r2
 800908a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800908c:	4b2e      	ldr	r3, [pc, #184]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	f023 020c 	bic.w	r2, r3, #12
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009098:	492b      	ldr	r1, [pc, #172]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 800909a:	4313      	orrs	r3, r2
 800909c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800909e:	4b2a      	ldr	r3, [pc, #168]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a2:	f023 0202 	bic.w	r2, r3, #2
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090aa:	4927      	ldr	r1, [pc, #156]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80090b0:	4b25      	ldr	r3, [pc, #148]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b4:	4a24      	ldr	r2, [pc, #144]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090bc:	4b22      	ldr	r3, [pc, #136]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	4a21      	ldr	r2, [pc, #132]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80090c8:	4b1f      	ldr	r3, [pc, #124]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	4a1e      	ldr	r2, [pc, #120]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80090d4:	4b1c      	ldr	r3, [pc, #112]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	4a1b      	ldr	r2, [pc, #108]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090da:	f043 0301 	orr.w	r3, r3, #1
 80090de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090e0:	4b19      	ldr	r3, [pc, #100]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a18      	ldr	r2, [pc, #96]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 80090e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ec:	f7fc f86a 	bl	80051c4 <HAL_GetTick>
 80090f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090f2:	e008      	b.n	8009106 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090f4:	f7fc f866 	bl	80051c4 <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d901      	bls.n	8009106 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e065      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009106:	4b10      	ldr	r3, [pc, #64]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0f0      	beq.n	80090f4 <HAL_RCC_OscConfig+0x670>
 8009112:	e05d      	b.n	80091d0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009114:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a0b      	ldr	r2, [pc, #44]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 800911a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800911e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009120:	f7fc f850 	bl	80051c4 <HAL_GetTick>
 8009124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009126:	e008      	b.n	800913a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009128:	f7fc f84c 	bl	80051c4 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b02      	cmp	r3, #2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e04b      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800913a:	4b03      	ldr	r3, [pc, #12]	; (8009148 <HAL_RCC_OscConfig+0x6c4>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1f0      	bne.n	8009128 <HAL_RCC_OscConfig+0x6a4>
 8009146:	e043      	b.n	80091d0 <HAL_RCC_OscConfig+0x74c>
 8009148:	58024400 	.word	0x58024400
 800914c:	fffffc0c 	.word	0xfffffc0c
 8009150:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009154:	4b21      	ldr	r3, [pc, #132]	; (80091dc <HAL_RCC_OscConfig+0x758>)
 8009156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009158:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800915a:	4b20      	ldr	r3, [pc, #128]	; (80091dc <HAL_RCC_OscConfig+0x758>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	2b01      	cmp	r3, #1
 8009166:	d031      	beq.n	80091cc <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f003 0203 	and.w	r2, r3, #3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009172:	429a      	cmp	r2, r3
 8009174:	d12a      	bne.n	80091cc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	091b      	lsrs	r3, r3, #4
 800917a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009182:	429a      	cmp	r2, r3
 8009184:	d122      	bne.n	80091cc <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009190:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009192:	429a      	cmp	r2, r3
 8009194:	d11a      	bne.n	80091cc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	0a5b      	lsrs	r3, r3, #9
 800919a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d111      	bne.n	80091cc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	0c1b      	lsrs	r3, r3, #16
 80091ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d108      	bne.n	80091cc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	0e1b      	lsrs	r3, r3, #24
 80091be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d001      	beq.n	80091d0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3730      	adds	r7, #48	; 0x30
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	58024400 	.word	0x58024400

080091e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e19c      	b.n	800952e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80091f4:	4b8a      	ldr	r3, [pc, #552]	; (8009420 <HAL_RCC_ClockConfig+0x240>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 030f 	and.w	r3, r3, #15
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d910      	bls.n	8009224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009202:	4b87      	ldr	r3, [pc, #540]	; (8009420 <HAL_RCC_ClockConfig+0x240>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f023 020f 	bic.w	r2, r3, #15
 800920a:	4985      	ldr	r1, [pc, #532]	; (8009420 <HAL_RCC_ClockConfig+0x240>)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	4313      	orrs	r3, r2
 8009210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009212:	4b83      	ldr	r3, [pc, #524]	; (8009420 <HAL_RCC_ClockConfig+0x240>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d001      	beq.n	8009224 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e184      	b.n	800952e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0304 	and.w	r3, r3, #4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d010      	beq.n	8009252 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	4b7b      	ldr	r3, [pc, #492]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800923c:	429a      	cmp	r2, r3
 800923e:	d908      	bls.n	8009252 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009240:	4b78      	ldr	r3, [pc, #480]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	4975      	ldr	r1, [pc, #468]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 800924e:	4313      	orrs	r3, r2
 8009250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0308 	and.w	r3, r3, #8
 800925a:	2b00      	cmp	r3, #0
 800925c:	d010      	beq.n	8009280 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	695a      	ldr	r2, [r3, #20]
 8009262:	4b70      	ldr	r3, [pc, #448]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800926a:	429a      	cmp	r2, r3
 800926c:	d908      	bls.n	8009280 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800926e:	4b6d      	ldr	r3, [pc, #436]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	496a      	ldr	r1, [pc, #424]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 800927c:	4313      	orrs	r3, r2
 800927e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0310 	and.w	r3, r3, #16
 8009288:	2b00      	cmp	r3, #0
 800928a:	d010      	beq.n	80092ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699a      	ldr	r2, [r3, #24]
 8009290:	4b64      	ldr	r3, [pc, #400]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009298:	429a      	cmp	r2, r3
 800929a:	d908      	bls.n	80092ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800929c:	4b61      	ldr	r3, [pc, #388]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	495e      	ldr	r1, [pc, #376]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0320 	and.w	r3, r3, #32
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d010      	beq.n	80092dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69da      	ldr	r2, [r3, #28]
 80092be:	4b59      	ldr	r3, [pc, #356]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d908      	bls.n	80092dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80092ca:	4b56      	ldr	r3, [pc, #344]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	4953      	ldr	r1, [pc, #332]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d010      	beq.n	800930a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	4b4d      	ldr	r3, [pc, #308]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	f003 030f 	and.w	r3, r3, #15
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d908      	bls.n	800930a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092f8:	4b4a      	ldr	r3, [pc, #296]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	f023 020f 	bic.w	r2, r3, #15
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	4947      	ldr	r1, [pc, #284]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009306:	4313      	orrs	r3, r2
 8009308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d055      	beq.n	80093c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009316:	4b43      	ldr	r3, [pc, #268]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	4940      	ldr	r1, [pc, #256]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009324:	4313      	orrs	r3, r2
 8009326:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2b02      	cmp	r3, #2
 800932e:	d107      	bne.n	8009340 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009330:	4b3c      	ldr	r3, [pc, #240]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d121      	bne.n	8009380 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e0f6      	b.n	800952e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d107      	bne.n	8009358 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009348:	4b36      	ldr	r3, [pc, #216]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d115      	bne.n	8009380 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e0ea      	b.n	800952e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d107      	bne.n	8009370 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009360:	4b30      	ldr	r3, [pc, #192]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009368:	2b00      	cmp	r3, #0
 800936a:	d109      	bne.n	8009380 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e0de      	b.n	800952e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009370:	4b2c      	ldr	r3, [pc, #176]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0304 	and.w	r3, r3, #4
 8009378:	2b00      	cmp	r3, #0
 800937a:	d101      	bne.n	8009380 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e0d6      	b.n	800952e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009380:	4b28      	ldr	r3, [pc, #160]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	f023 0207 	bic.w	r2, r3, #7
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	4925      	ldr	r1, [pc, #148]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 800938e:	4313      	orrs	r3, r2
 8009390:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009392:	f7fb ff17 	bl	80051c4 <HAL_GetTick>
 8009396:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009398:	e00a      	b.n	80093b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800939a:	f7fb ff13 	bl	80051c4 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d901      	bls.n	80093b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e0be      	b.n	800952e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093b0:	4b1c      	ldr	r3, [pc, #112]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	429a      	cmp	r2, r3
 80093c0:	d1eb      	bne.n	800939a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d010      	beq.n	80093f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	4b14      	ldr	r3, [pc, #80]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	429a      	cmp	r2, r3
 80093dc:	d208      	bcs.n	80093f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093de:	4b11      	ldr	r3, [pc, #68]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	f023 020f 	bic.w	r2, r3, #15
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	490e      	ldr	r1, [pc, #56]	; (8009424 <HAL_RCC_ClockConfig+0x244>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093f0:	4b0b      	ldr	r3, [pc, #44]	; (8009420 <HAL_RCC_ClockConfig+0x240>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 030f 	and.w	r3, r3, #15
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d214      	bcs.n	8009428 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093fe:	4b08      	ldr	r3, [pc, #32]	; (8009420 <HAL_RCC_ClockConfig+0x240>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f023 020f 	bic.w	r2, r3, #15
 8009406:	4906      	ldr	r1, [pc, #24]	; (8009420 <HAL_RCC_ClockConfig+0x240>)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	4313      	orrs	r3, r2
 800940c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800940e:	4b04      	ldr	r3, [pc, #16]	; (8009420 <HAL_RCC_ClockConfig+0x240>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 030f 	and.w	r3, r3, #15
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d005      	beq.n	8009428 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e086      	b.n	800952e <HAL_RCC_ClockConfig+0x34e>
 8009420:	52002000 	.word	0x52002000
 8009424:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d010      	beq.n	8009456 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691a      	ldr	r2, [r3, #16]
 8009438:	4b3f      	ldr	r3, [pc, #252]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009440:	429a      	cmp	r2, r3
 8009442:	d208      	bcs.n	8009456 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009444:	4b3c      	ldr	r3, [pc, #240]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	4939      	ldr	r1, [pc, #228]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 8009452:	4313      	orrs	r3, r2
 8009454:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0308 	and.w	r3, r3, #8
 800945e:	2b00      	cmp	r3, #0
 8009460:	d010      	beq.n	8009484 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	695a      	ldr	r2, [r3, #20]
 8009466:	4b34      	ldr	r3, [pc, #208]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800946e:	429a      	cmp	r2, r3
 8009470:	d208      	bcs.n	8009484 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009472:	4b31      	ldr	r3, [pc, #196]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	492e      	ldr	r1, [pc, #184]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 8009480:	4313      	orrs	r3, r2
 8009482:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0310 	and.w	r3, r3, #16
 800948c:	2b00      	cmp	r3, #0
 800948e:	d010      	beq.n	80094b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	699a      	ldr	r2, [r3, #24]
 8009494:	4b28      	ldr	r3, [pc, #160]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800949c:	429a      	cmp	r2, r3
 800949e:	d208      	bcs.n	80094b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094a0:	4b25      	ldr	r3, [pc, #148]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 80094a2:	69db      	ldr	r3, [r3, #28]
 80094a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	4922      	ldr	r1, [pc, #136]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d010      	beq.n	80094e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	69da      	ldr	r2, [r3, #28]
 80094c2:	4b1d      	ldr	r3, [pc, #116]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d208      	bcs.n	80094e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80094ce:	4b1a      	ldr	r3, [pc, #104]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	4917      	ldr	r1, [pc, #92]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80094e0:	f000 f834 	bl	800954c <HAL_RCC_GetSysClockFreq>
 80094e4:	4602      	mov	r2, r0
 80094e6:	4b14      	ldr	r3, [pc, #80]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	0a1b      	lsrs	r3, r3, #8
 80094ec:	f003 030f 	and.w	r3, r3, #15
 80094f0:	4912      	ldr	r1, [pc, #72]	; (800953c <HAL_RCC_ClockConfig+0x35c>)
 80094f2:	5ccb      	ldrb	r3, [r1, r3]
 80094f4:	f003 031f 	and.w	r3, r3, #31
 80094f8:	fa22 f303 	lsr.w	r3, r2, r3
 80094fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094fe:	4b0e      	ldr	r3, [pc, #56]	; (8009538 <HAL_RCC_ClockConfig+0x358>)
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f003 030f 	and.w	r3, r3, #15
 8009506:	4a0d      	ldr	r2, [pc, #52]	; (800953c <HAL_RCC_ClockConfig+0x35c>)
 8009508:	5cd3      	ldrb	r3, [r2, r3]
 800950a:	f003 031f 	and.w	r3, r3, #31
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	fa22 f303 	lsr.w	r3, r2, r3
 8009514:	4a0a      	ldr	r2, [pc, #40]	; (8009540 <HAL_RCC_ClockConfig+0x360>)
 8009516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009518:	4a0a      	ldr	r2, [pc, #40]	; (8009544 <HAL_RCC_ClockConfig+0x364>)
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800951e:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <HAL_RCC_ClockConfig+0x368>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4618      	mov	r0, r3
 8009524:	f7fb fe04 	bl	8005130 <HAL_InitTick>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800952c:	7bfb      	ldrb	r3, [r7, #15]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	58024400 	.word	0x58024400
 800953c:	0800fdc8 	.word	0x0800fdc8
 8009540:	240001c4 	.word	0x240001c4
 8009544:	240001c0 	.word	0x240001c0
 8009548:	240001d0 	.word	0x240001d0

0800954c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800954c:	b480      	push	{r7}
 800954e:	b089      	sub	sp, #36	; 0x24
 8009550:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009552:	4bb3      	ldr	r3, [pc, #716]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800955a:	2b18      	cmp	r3, #24
 800955c:	f200 8155 	bhi.w	800980a <HAL_RCC_GetSysClockFreq+0x2be>
 8009560:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009566:	bf00      	nop
 8009568:	080095cd 	.word	0x080095cd
 800956c:	0800980b 	.word	0x0800980b
 8009570:	0800980b 	.word	0x0800980b
 8009574:	0800980b 	.word	0x0800980b
 8009578:	0800980b 	.word	0x0800980b
 800957c:	0800980b 	.word	0x0800980b
 8009580:	0800980b 	.word	0x0800980b
 8009584:	0800980b 	.word	0x0800980b
 8009588:	080095f3 	.word	0x080095f3
 800958c:	0800980b 	.word	0x0800980b
 8009590:	0800980b 	.word	0x0800980b
 8009594:	0800980b 	.word	0x0800980b
 8009598:	0800980b 	.word	0x0800980b
 800959c:	0800980b 	.word	0x0800980b
 80095a0:	0800980b 	.word	0x0800980b
 80095a4:	0800980b 	.word	0x0800980b
 80095a8:	080095f9 	.word	0x080095f9
 80095ac:	0800980b 	.word	0x0800980b
 80095b0:	0800980b 	.word	0x0800980b
 80095b4:	0800980b 	.word	0x0800980b
 80095b8:	0800980b 	.word	0x0800980b
 80095bc:	0800980b 	.word	0x0800980b
 80095c0:	0800980b 	.word	0x0800980b
 80095c4:	0800980b 	.word	0x0800980b
 80095c8:	080095ff 	.word	0x080095ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095cc:	4b94      	ldr	r3, [pc, #592]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 0320 	and.w	r3, r3, #32
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d009      	beq.n	80095ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095d8:	4b91      	ldr	r3, [pc, #580]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	08db      	lsrs	r3, r3, #3
 80095de:	f003 0303 	and.w	r3, r3, #3
 80095e2:	4a90      	ldr	r2, [pc, #576]	; (8009824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095e4:	fa22 f303 	lsr.w	r3, r2, r3
 80095e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80095ea:	e111      	b.n	8009810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80095ec:	4b8d      	ldr	r3, [pc, #564]	; (8009824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095ee:	61bb      	str	r3, [r7, #24]
    break;
 80095f0:	e10e      	b.n	8009810 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80095f2:	4b8d      	ldr	r3, [pc, #564]	; (8009828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095f4:	61bb      	str	r3, [r7, #24]
    break;
 80095f6:	e10b      	b.n	8009810 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80095f8:	4b8c      	ldr	r3, [pc, #560]	; (800982c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80095fa:	61bb      	str	r3, [r7, #24]
    break;
 80095fc:	e108      	b.n	8009810 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095fe:	4b88      	ldr	r3, [pc, #544]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009608:	4b85      	ldr	r3, [pc, #532]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800960a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960c:	091b      	lsrs	r3, r3, #4
 800960e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009612:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009614:	4b82      	ldr	r3, [pc, #520]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800961e:	4b80      	ldr	r3, [pc, #512]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009622:	08db      	lsrs	r3, r3, #3
 8009624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009636:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 80e1 	beq.w	8009804 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2b02      	cmp	r3, #2
 8009646:	f000 8083 	beq.w	8009750 <HAL_RCC_GetSysClockFreq+0x204>
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2b02      	cmp	r3, #2
 800964e:	f200 80a1 	bhi.w	8009794 <HAL_RCC_GetSysClockFreq+0x248>
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <HAL_RCC_GetSysClockFreq+0x114>
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d056      	beq.n	800970c <HAL_RCC_GetSysClockFreq+0x1c0>
 800965e:	e099      	b.n	8009794 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009660:	4b6f      	ldr	r3, [pc, #444]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b00      	cmp	r3, #0
 800966a:	d02d      	beq.n	80096c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800966c:	4b6c      	ldr	r3, [pc, #432]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	08db      	lsrs	r3, r3, #3
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	4a6b      	ldr	r2, [pc, #428]	; (8009824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009678:	fa22 f303 	lsr.w	r3, r2, r3
 800967c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	ee07 3a90 	vmov	s15, r3
 8009684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009696:	4b62      	ldr	r3, [pc, #392]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80096aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80096c6:	e087      	b.n	80097d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009834 <HAL_RCC_GetSysClockFreq+0x2e8>
 80096d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096da:	4b51      	ldr	r3, [pc, #324]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80096ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800970a:	e065      	b.n	80097d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	ee07 3a90 	vmov	s15, r3
 8009712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009716:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009838 <HAL_RCC_GetSysClockFreq+0x2ec>
 800971a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800971e:	4b40      	ldr	r3, [pc, #256]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800972e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009732:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009830 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800973a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800973e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800974e:	e043      	b.n	80097d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800983c <HAL_RCC_GetSysClockFreq+0x2f0>
 800975e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009762:	4b2f      	ldr	r3, [pc, #188]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976a:	ee07 3a90 	vmov	s15, r3
 800976e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009772:	ed97 6a02 	vldr	s12, [r7, #8]
 8009776:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800977a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800977e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800978a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800978e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009792:	e021      	b.n	80097d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009838 <HAL_RCC_GetSysClockFreq+0x2ec>
 80097a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097a6:	4b1e      	ldr	r3, [pc, #120]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80097ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80097d8:	4b11      	ldr	r3, [pc, #68]	; (8009820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097dc:	0a5b      	lsrs	r3, r3, #9
 80097de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e2:	3301      	adds	r3, #1
 80097e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	ee07 3a90 	vmov	s15, r3
 80097ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80097f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097fc:	ee17 3a90 	vmov	r3, s15
 8009800:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009802:	e005      	b.n	8009810 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	61bb      	str	r3, [r7, #24]
    break;
 8009808:	e002      	b.n	8009810 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800980a:	4b07      	ldr	r3, [pc, #28]	; (8009828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800980c:	61bb      	str	r3, [r7, #24]
    break;
 800980e:	bf00      	nop
  }

  return sysclockfreq;
 8009810:	69bb      	ldr	r3, [r7, #24]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3724      	adds	r7, #36	; 0x24
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	58024400 	.word	0x58024400
 8009824:	03d09000 	.word	0x03d09000
 8009828:	003d0900 	.word	0x003d0900
 800982c:	007a1200 	.word	0x007a1200
 8009830:	46000000 	.word	0x46000000
 8009834:	4c742400 	.word	0x4c742400
 8009838:	4a742400 	.word	0x4a742400
 800983c:	4af42400 	.word	0x4af42400

08009840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009846:	f7ff fe81 	bl	800954c <HAL_RCC_GetSysClockFreq>
 800984a:	4602      	mov	r2, r0
 800984c:	4b10      	ldr	r3, [pc, #64]	; (8009890 <HAL_RCC_GetHCLKFreq+0x50>)
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	0a1b      	lsrs	r3, r3, #8
 8009852:	f003 030f 	and.w	r3, r3, #15
 8009856:	490f      	ldr	r1, [pc, #60]	; (8009894 <HAL_RCC_GetHCLKFreq+0x54>)
 8009858:	5ccb      	ldrb	r3, [r1, r3]
 800985a:	f003 031f 	and.w	r3, r3, #31
 800985e:	fa22 f303 	lsr.w	r3, r2, r3
 8009862:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009864:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <HAL_RCC_GetHCLKFreq+0x50>)
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f003 030f 	and.w	r3, r3, #15
 800986c:	4a09      	ldr	r2, [pc, #36]	; (8009894 <HAL_RCC_GetHCLKFreq+0x54>)
 800986e:	5cd3      	ldrb	r3, [r2, r3]
 8009870:	f003 031f 	and.w	r3, r3, #31
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	fa22 f303 	lsr.w	r3, r2, r3
 800987a:	4a07      	ldr	r2, [pc, #28]	; (8009898 <HAL_RCC_GetHCLKFreq+0x58>)
 800987c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800987e:	4a07      	ldr	r2, [pc, #28]	; (800989c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009884:	4b04      	ldr	r3, [pc, #16]	; (8009898 <HAL_RCC_GetHCLKFreq+0x58>)
 8009886:	681b      	ldr	r3, [r3, #0]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	58024400 	.word	0x58024400
 8009894:	0800fdc8 	.word	0x0800fdc8
 8009898:	240001c4 	.word	0x240001c4
 800989c:	240001c0 	.word	0x240001c0

080098a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80098a4:	f7ff ffcc 	bl	8009840 <HAL_RCC_GetHCLKFreq>
 80098a8:	4602      	mov	r2, r0
 80098aa:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80098ac:	69db      	ldr	r3, [r3, #28]
 80098ae:	091b      	lsrs	r3, r3, #4
 80098b0:	f003 0307 	and.w	r3, r3, #7
 80098b4:	4904      	ldr	r1, [pc, #16]	; (80098c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80098b6:	5ccb      	ldrb	r3, [r1, r3]
 80098b8:	f003 031f 	and.w	r3, r3, #31
 80098bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	58024400 	.word	0x58024400
 80098c8:	0800fdc8 	.word	0x0800fdc8

080098cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80098d0:	f7ff ffb6 	bl	8009840 <HAL_RCC_GetHCLKFreq>
 80098d4:	4602      	mov	r2, r0
 80098d6:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	0a1b      	lsrs	r3, r3, #8
 80098dc:	f003 0307 	and.w	r3, r3, #7
 80098e0:	4904      	ldr	r1, [pc, #16]	; (80098f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80098e2:	5ccb      	ldrb	r3, [r1, r3]
 80098e4:	f003 031f 	and.w	r3, r3, #31
 80098e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	58024400 	.word	0x58024400
 80098f4:	0800fdc8 	.word	0x0800fdc8

080098f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009900:	2300      	movs	r3, #0
 8009902:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009904:	2300      	movs	r3, #0
 8009906:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d03f      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009918:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800991c:	d02a      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800991e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009922:	d824      	bhi.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009928:	d018      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800992a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800992e:	d81e      	bhi.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009938:	d007      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800993a:	e018      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800993c:	4ba4      	ldr	r3, [pc, #656]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800993e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009940:	4aa3      	ldr	r2, [pc, #652]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009948:	e015      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3304      	adds	r3, #4
 800994e:	2102      	movs	r1, #2
 8009950:	4618      	mov	r0, r3
 8009952:	f001 f989 	bl	800ac68 <RCCEx_PLL2_Config>
 8009956:	4603      	mov	r3, r0
 8009958:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800995a:	e00c      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3324      	adds	r3, #36	; 0x24
 8009960:	2102      	movs	r1, #2
 8009962:	4618      	mov	r0, r3
 8009964:	f001 fa32 	bl	800adcc <RCCEx_PLL3_Config>
 8009968:	4603      	mov	r3, r0
 800996a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800996c:	e003      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	75fb      	strb	r3, [r7, #23]
      break;
 8009972:	e000      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d109      	bne.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800997c:	4b94      	ldr	r3, [pc, #592]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800997e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009988:	4991      	ldr	r1, [pc, #580]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800998a:	4313      	orrs	r3, r2
 800998c:	650b      	str	r3, [r1, #80]	; 0x50
 800998e:	e001      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800999c:	2b00      	cmp	r3, #0
 800999e:	d03d      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	d826      	bhi.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80099a8:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099c5 	.word	0x080099c5
 80099b4:	080099d3 	.word	0x080099d3
 80099b8:	080099e5 	.word	0x080099e5
 80099bc:	080099fd 	.word	0x080099fd
 80099c0:	080099fd 	.word	0x080099fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099c4:	4b82      	ldr	r3, [pc, #520]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c8:	4a81      	ldr	r2, [pc, #516]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099d0:	e015      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	3304      	adds	r3, #4
 80099d6:	2100      	movs	r1, #0
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 f945 	bl	800ac68 <RCCEx_PLL2_Config>
 80099de:	4603      	mov	r3, r0
 80099e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099e2:	e00c      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3324      	adds	r3, #36	; 0x24
 80099e8:	2100      	movs	r1, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f001 f9ee 	bl	800adcc <RCCEx_PLL3_Config>
 80099f0:	4603      	mov	r3, r0
 80099f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099f4:	e003      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	75fb      	strb	r3, [r7, #23]
      break;
 80099fa:	e000      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80099fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d109      	bne.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a04:	4b72      	ldr	r3, [pc, #456]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a08:	f023 0207 	bic.w	r2, r3, #7
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a10:	496f      	ldr	r1, [pc, #444]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	650b      	str	r3, [r1, #80]	; 0x50
 8009a16:	e001      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
 8009a1a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d051      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a2e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009a32:	d036      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009a34:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009a38:	d830      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a3e:	d032      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009a40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a44:	d82a      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009a46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a4a:	d02e      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009a4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a50:	d824      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a56:	d018      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a5c:	d81e      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a66:	d007      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009a68:	e018      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a6a:	4b59      	ldr	r3, [pc, #356]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	4a58      	ldr	r2, [pc, #352]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a76:	e019      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f001 f8f2 	bl	800ac68 <RCCEx_PLL2_Config>
 8009a84:	4603      	mov	r3, r0
 8009a86:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009a88:	e010      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	3324      	adds	r3, #36	; 0x24
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 f99b 	bl	800adcc <RCCEx_PLL3_Config>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a9a:	e007      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009aa0:	e004      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009aa2:	bf00      	nop
 8009aa4:	e002      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009aa6:	bf00      	nop
 8009aa8:	e000      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10a      	bne.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009ab2:	4b47      	ldr	r3, [pc, #284]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ac0:	4943      	ldr	r1, [pc, #268]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	658b      	str	r3, [r1, #88]	; 0x58
 8009ac6:	e001      	b.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d051      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ade:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009ae2:	d036      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009ae4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009ae8:	d830      	bhi.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009aee:	d032      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009af4:	d82a      	bhi.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009af6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009afa:	d02e      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009afc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b00:	d824      	bhi.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b06:	d018      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b0c:	d81e      	bhi.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d003      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b16:	d007      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009b18:	e018      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b1a:	4b2d      	ldr	r3, [pc, #180]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1e:	4a2c      	ldr	r2, [pc, #176]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b26:	e019      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f001 f89a 	bl	800ac68 <RCCEx_PLL2_Config>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009b38:	e010      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	3324      	adds	r3, #36	; 0x24
 8009b3e:	2100      	movs	r1, #0
 8009b40:	4618      	mov	r0, r3
 8009b42:	f001 f943 	bl	800adcc <RCCEx_PLL3_Config>
 8009b46:	4603      	mov	r3, r0
 8009b48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b4a:	e007      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b50:	e004      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009b52:	bf00      	nop
 8009b54:	e002      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009b56:	bf00      	nop
 8009b58:	e000      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009b62:	4b1b      	ldr	r3, [pc, #108]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b66:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b70:	4917      	ldr	r1, [pc, #92]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	658b      	str	r3, [r1, #88]	; 0x58
 8009b76:	e001      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d035      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b8c:	2b30      	cmp	r3, #48	; 0x30
 8009b8e:	d01c      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009b90:	2b30      	cmp	r3, #48	; 0x30
 8009b92:	d817      	bhi.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009b94:	2b20      	cmp	r3, #32
 8009b96:	d00c      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009b98:	2b20      	cmp	r3, #32
 8009b9a:	d813      	bhi.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d019      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009ba0:	2b10      	cmp	r3, #16
 8009ba2:	d10f      	bne.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ba4:	4b0a      	ldr	r3, [pc, #40]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	4a09      	ldr	r2, [pc, #36]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009bb0:	e011      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	2102      	movs	r1, #2
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f001 f855 	bl	800ac68 <RCCEx_PLL2_Config>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009bc2:	e008      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009bc8:	e005      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009bca:	bf00      	nop
 8009bcc:	e003      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009bce:	bf00      	nop
 8009bd0:	58024400 	.word	0x58024400
      break;
 8009bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d109      	bne.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009bdc:	4ba3      	ldr	r3, [pc, #652]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be8:	49a0      	ldr	r1, [pc, #640]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009bee:	e001      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d047      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c08:	d030      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c0e:	d82a      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c14:	d02c      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009c16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c1a:	d824      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c20:	d018      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c26:	d81e      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d003      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c30:	d007      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009c32:	e018      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c34:	4b8d      	ldr	r3, [pc, #564]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	4a8c      	ldr	r2, [pc, #560]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009c40:	e017      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3304      	adds	r3, #4
 8009c46:	2100      	movs	r1, #0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 f80d 	bl	800ac68 <RCCEx_PLL2_Config>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009c52:	e00e      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3324      	adds	r3, #36	; 0x24
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f001 f8b6 	bl	800adcc <RCCEx_PLL3_Config>
 8009c60:	4603      	mov	r3, r0
 8009c62:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009c64:	e005      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]
      break;
 8009c6a:	e002      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009c6c:	bf00      	nop
 8009c6e:	e000      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d109      	bne.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c78:	4b7c      	ldr	r3, [pc, #496]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c84:	4979      	ldr	r1, [pc, #484]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	650b      	str	r3, [r1, #80]	; 0x50
 8009c8a:	e001      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
 8009c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d049      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ca4:	d02e      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009caa:	d828      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009cac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009cb0:	d02a      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009cb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009cb6:	d822      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009cb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cbc:	d026      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cc2:	d81c      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cc8:	d010      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cce:	d816      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01d      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd8:	d111      	bne.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3304      	adds	r3, #4
 8009cde:	2101      	movs	r1, #1
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 ffc1 	bl	800ac68 <RCCEx_PLL2_Config>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009cea:	e012      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3324      	adds	r3, #36	; 0x24
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 f86a 	bl	800adcc <RCCEx_PLL3_Config>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009cfc:	e009      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	75fb      	strb	r3, [r7, #23]
      break;
 8009d02:	e006      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d04:	bf00      	nop
 8009d06:	e004      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d08:	bf00      	nop
 8009d0a:	e002      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d0c:	bf00      	nop
 8009d0e:	e000      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d12:	7dfb      	ldrb	r3, [r7, #23]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d109      	bne.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d18:	4b54      	ldr	r3, [pc, #336]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d1c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d24:	4951      	ldr	r1, [pc, #324]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d26:	4313      	orrs	r3, r2
 8009d28:	650b      	str	r3, [r1, #80]	; 0x50
 8009d2a:	e001      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d04b      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d46:	d02e      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d4c:	d828      	bhi.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d52:	d02a      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d58:	d822      	bhi.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009d5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d5e:	d026      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009d60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d64:	d81c      	bhi.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d6a:	d010      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d70:	d816      	bhi.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d01d      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d7a:	d111      	bne.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	2101      	movs	r1, #1
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 ff70 	bl	800ac68 <RCCEx_PLL2_Config>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009d8c:	e012      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	3324      	adds	r3, #36	; 0x24
 8009d92:	2101      	movs	r1, #1
 8009d94:	4618      	mov	r0, r3
 8009d96:	f001 f819 	bl	800adcc <RCCEx_PLL3_Config>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009d9e:	e009      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	75fb      	strb	r3, [r7, #23]
      break;
 8009da4:	e006      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009da6:	bf00      	nop
 8009da8:	e004      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009daa:	bf00      	nop
 8009dac:	e002      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009dae:	bf00      	nop
 8009db0:	e000      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10a      	bne.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009dba:	4b2c      	ldr	r3, [pc, #176]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dc8:	4928      	ldr	r1, [pc, #160]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	658b      	str	r3, [r1, #88]	; 0x58
 8009dce:	e001      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d02f      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009de8:	d00e      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dee:	d814      	bhi.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d015      	beq.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009df4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009df8:	d10f      	bne.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dfa:	4b1c      	ldr	r3, [pc, #112]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	4a1b      	ldr	r2, [pc, #108]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009e06:	e00c      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 ff2a 	bl	800ac68 <RCCEx_PLL2_Config>
 8009e14:	4603      	mov	r3, r0
 8009e16:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009e18:	e003      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e1e:	e000      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e28:	4b10      	ldr	r3, [pc, #64]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e34:	490d      	ldr	r1, [pc, #52]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	650b      	str	r3, [r1, #80]	; 0x50
 8009e3a:	e001      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d034      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d81d      	bhi.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009e54:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009e97 	.word	0x08009e97
 8009e60:	08009e71 	.word	0x08009e71
 8009e64:	08009e7f 	.word	0x08009e7f
 8009e68:	08009e97 	.word	0x08009e97
 8009e6c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e70:	4bb1      	ldr	r3, [pc, #708]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	4ab0      	ldr	r2, [pc, #704]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009e7c:	e00c      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3304      	adds	r3, #4
 8009e82:	2102      	movs	r1, #2
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 feef 	bl	800ac68 <RCCEx_PLL2_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009e8e:	e003      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	75fb      	strb	r3, [r7, #23]
      break;
 8009e94:	e000      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d109      	bne.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e9e:	4ba6      	ldr	r3, [pc, #664]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ea2:	f023 0203 	bic.w	r2, r3, #3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eaa:	49a3      	ldr	r1, [pc, #652]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009eb0:	e001      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 8086 	beq.w	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ec4:	4b9d      	ldr	r3, [pc, #628]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a9c      	ldr	r2, [pc, #624]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ece:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ed0:	f7fb f978 	bl	80051c4 <HAL_GetTick>
 8009ed4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ed6:	e009      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ed8:	f7fb f974 	bl	80051c4 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b64      	cmp	r3, #100	; 0x64
 8009ee4:	d902      	bls.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	75fb      	strb	r3, [r7, #23]
        break;
 8009eea:	e005      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009eec:	4b93      	ldr	r3, [pc, #588]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0ef      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d166      	bne.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009efe:	4b8e      	ldr	r3, [pc, #568]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f08:	4053      	eors	r3, r2
 8009f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d013      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f12:	4b89      	ldr	r3, [pc, #548]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f1a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f1c:	4b86      	ldr	r3, [pc, #536]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f20:	4a85      	ldr	r2, [pc, #532]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f26:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f28:	4b83      	ldr	r3, [pc, #524]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2c:	4a82      	ldr	r2, [pc, #520]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f32:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f34:	4a80      	ldr	r2, [pc, #512]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f44:	d115      	bne.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f46:	f7fb f93d 	bl	80051c4 <HAL_GetTick>
 8009f4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f4c:	e00b      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f4e:	f7fb f939 	bl	80051c4 <HAL_GetTick>
 8009f52:	4602      	mov	r2, r0
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d902      	bls.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	75fb      	strb	r3, [r7, #23]
            break;
 8009f64:	e005      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f66:	4b74      	ldr	r3, [pc, #464]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0ed      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d126      	bne.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f86:	d10d      	bne.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009f88:	4b6b      	ldr	r3, [pc, #428]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f96:	0919      	lsrs	r1, r3, #4
 8009f98:	4b69      	ldr	r3, [pc, #420]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009f9a:	400b      	ands	r3, r1
 8009f9c:	4966      	ldr	r1, [pc, #408]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	610b      	str	r3, [r1, #16]
 8009fa2:	e005      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009fa4:	4b64      	ldr	r3, [pc, #400]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	4a63      	ldr	r2, [pc, #396]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009faa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009fae:	6113      	str	r3, [r2, #16]
 8009fb0:	4b61      	ldr	r3, [pc, #388]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009fb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fbe:	495e      	ldr	r1, [pc, #376]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	670b      	str	r3, [r1, #112]	; 0x70
 8009fc4:	e004      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009fc6:	7dfb      	ldrb	r3, [r7, #23]
 8009fc8:	75bb      	strb	r3, [r7, #22]
 8009fca:	e001      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d07e      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe0:	2b28      	cmp	r3, #40	; 0x28
 8009fe2:	d867      	bhi.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009fe4:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	0800a0bb 	.word	0x0800a0bb
 8009ff0:	0800a0b5 	.word	0x0800a0b5
 8009ff4:	0800a0b5 	.word	0x0800a0b5
 8009ff8:	0800a0b5 	.word	0x0800a0b5
 8009ffc:	0800a0b5 	.word	0x0800a0b5
 800a000:	0800a0b5 	.word	0x0800a0b5
 800a004:	0800a0b5 	.word	0x0800a0b5
 800a008:	0800a0b5 	.word	0x0800a0b5
 800a00c:	0800a091 	.word	0x0800a091
 800a010:	0800a0b5 	.word	0x0800a0b5
 800a014:	0800a0b5 	.word	0x0800a0b5
 800a018:	0800a0b5 	.word	0x0800a0b5
 800a01c:	0800a0b5 	.word	0x0800a0b5
 800a020:	0800a0b5 	.word	0x0800a0b5
 800a024:	0800a0b5 	.word	0x0800a0b5
 800a028:	0800a0b5 	.word	0x0800a0b5
 800a02c:	0800a0a3 	.word	0x0800a0a3
 800a030:	0800a0b5 	.word	0x0800a0b5
 800a034:	0800a0b5 	.word	0x0800a0b5
 800a038:	0800a0b5 	.word	0x0800a0b5
 800a03c:	0800a0b5 	.word	0x0800a0b5
 800a040:	0800a0b5 	.word	0x0800a0b5
 800a044:	0800a0b5 	.word	0x0800a0b5
 800a048:	0800a0b5 	.word	0x0800a0b5
 800a04c:	0800a0bb 	.word	0x0800a0bb
 800a050:	0800a0b5 	.word	0x0800a0b5
 800a054:	0800a0b5 	.word	0x0800a0b5
 800a058:	0800a0b5 	.word	0x0800a0b5
 800a05c:	0800a0b5 	.word	0x0800a0b5
 800a060:	0800a0b5 	.word	0x0800a0b5
 800a064:	0800a0b5 	.word	0x0800a0b5
 800a068:	0800a0b5 	.word	0x0800a0b5
 800a06c:	0800a0bb 	.word	0x0800a0bb
 800a070:	0800a0b5 	.word	0x0800a0b5
 800a074:	0800a0b5 	.word	0x0800a0b5
 800a078:	0800a0b5 	.word	0x0800a0b5
 800a07c:	0800a0b5 	.word	0x0800a0b5
 800a080:	0800a0b5 	.word	0x0800a0b5
 800a084:	0800a0b5 	.word	0x0800a0b5
 800a088:	0800a0b5 	.word	0x0800a0b5
 800a08c:	0800a0bb 	.word	0x0800a0bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3304      	adds	r3, #4
 800a094:	2101      	movs	r1, #1
 800a096:	4618      	mov	r0, r3
 800a098:	f000 fde6 	bl	800ac68 <RCCEx_PLL2_Config>
 800a09c:	4603      	mov	r3, r0
 800a09e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a0a0:	e00c      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3324      	adds	r3, #36	; 0x24
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 fe8f 	bl	800adcc <RCCEx_PLL3_Config>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a0b2:	e003      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0b8:	e000      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a0ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d109      	bne.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a0c2:	4b1d      	ldr	r3, [pc, #116]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ce:	491a      	ldr	r1, [pc, #104]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	654b      	str	r3, [r1, #84]	; 0x54
 800a0d4:	e001      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d6:	7dfb      	ldrb	r3, [r7, #23]
 800a0d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d03e      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ea:	2b05      	cmp	r3, #5
 800a0ec:	d820      	bhi.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a0ee:	a201      	add	r2, pc, #4	; (adr r2, 800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f4:	0800a145 	.word	0x0800a145
 800a0f8:	0800a10d 	.word	0x0800a10d
 800a0fc:	0800a11f 	.word	0x0800a11f
 800a100:	0800a145 	.word	0x0800a145
 800a104:	0800a145 	.word	0x0800a145
 800a108:	0800a145 	.word	0x0800a145
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	3304      	adds	r3, #4
 800a110:	2101      	movs	r1, #1
 800a112:	4618      	mov	r0, r3
 800a114:	f000 fda8 	bl	800ac68 <RCCEx_PLL2_Config>
 800a118:	4603      	mov	r3, r0
 800a11a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a11c:	e013      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	3324      	adds	r3, #36	; 0x24
 800a122:	2101      	movs	r1, #1
 800a124:	4618      	mov	r0, r3
 800a126:	f000 fe51 	bl	800adcc <RCCEx_PLL3_Config>
 800a12a:	4603      	mov	r3, r0
 800a12c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a12e:	e00a      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	75fb      	strb	r3, [r7, #23]
      break;
 800a134:	e007      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a136:	bf00      	nop
 800a138:	58024400 	.word	0x58024400
 800a13c:	58024800 	.word	0x58024800
 800a140:	00ffffcf 	.word	0x00ffffcf
      break;
 800a144:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d109      	bne.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a14c:	4b9f      	ldr	r3, [pc, #636]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a14e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a150:	f023 0207 	bic.w	r2, r3, #7
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a158:	499c      	ldr	r1, [pc, #624]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	654b      	str	r3, [r1, #84]	; 0x54
 800a15e:	e001      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0304 	and.w	r3, r3, #4
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d039      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a176:	2b05      	cmp	r3, #5
 800a178:	d820      	bhi.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a17a:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a180:	0800a1c3 	.word	0x0800a1c3
 800a184:	0800a199 	.word	0x0800a199
 800a188:	0800a1ab 	.word	0x0800a1ab
 800a18c:	0800a1c3 	.word	0x0800a1c3
 800a190:	0800a1c3 	.word	0x0800a1c3
 800a194:	0800a1c3 	.word	0x0800a1c3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3304      	adds	r3, #4
 800a19c:	2101      	movs	r1, #1
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 fd62 	bl	800ac68 <RCCEx_PLL2_Config>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a1a8:	e00c      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3324      	adds	r3, #36	; 0x24
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 fe0b 	bl	800adcc <RCCEx_PLL3_Config>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a1ba:	e003      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c0:	e000      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a1c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1c4:	7dfb      	ldrb	r3, [r7, #23]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10a      	bne.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a1ca:	4b80      	ldr	r3, [pc, #512]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a1cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ce:	f023 0207 	bic.w	r2, r3, #7
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1d8:	497c      	ldr	r1, [pc, #496]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	658b      	str	r3, [r1, #88]	; 0x58
 800a1de:	e001      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d04b      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1fa:	d02e      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a1fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a200:	d828      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a206:	d02a      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a20c:	d822      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a20e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a212:	d026      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a214:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a218:	d81c      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a21a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a21e:	d010      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a224:	d816      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d01d      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a22a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a22e:	d111      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	3304      	adds	r3, #4
 800a234:	2100      	movs	r1, #0
 800a236:	4618      	mov	r0, r3
 800a238:	f000 fd16 	bl	800ac68 <RCCEx_PLL2_Config>
 800a23c:	4603      	mov	r3, r0
 800a23e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a240:	e012      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	3324      	adds	r3, #36	; 0x24
 800a246:	2102      	movs	r1, #2
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 fdbf 	bl	800adcc <RCCEx_PLL3_Config>
 800a24e:	4603      	mov	r3, r0
 800a250:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a252:	e009      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	75fb      	strb	r3, [r7, #23]
      break;
 800a258:	e006      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a25a:	bf00      	nop
 800a25c:	e004      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a25e:	bf00      	nop
 800a260:	e002      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a262:	bf00      	nop
 800a264:	e000      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a266:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a268:	7dfb      	ldrb	r3, [r7, #23]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10a      	bne.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a26e:	4b57      	ldr	r3, [pc, #348]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a272:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27c:	4953      	ldr	r1, [pc, #332]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a27e:	4313      	orrs	r3, r2
 800a280:	654b      	str	r3, [r1, #84]	; 0x54
 800a282:	e001      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a284:	7dfb      	ldrb	r3, [r7, #23]
 800a286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a290:	2b00      	cmp	r3, #0
 800a292:	d04b      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a29a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a29e:	d02e      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a2a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2a4:	d828      	bhi.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a2a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2aa:	d02a      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a2ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2b0:	d822      	bhi.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a2b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2b6:	d026      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a2b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2bc:	d81c      	bhi.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a2be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2c2:	d010      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a2c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2c8:	d816      	bhi.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d01d      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a2ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d2:	d111      	bne.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	2100      	movs	r1, #0
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 fcc4 	bl	800ac68 <RCCEx_PLL2_Config>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a2e4:	e012      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3324      	adds	r3, #36	; 0x24
 800a2ea:	2102      	movs	r1, #2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f000 fd6d 	bl	800adcc <RCCEx_PLL3_Config>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a2f6:	e009      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a2fc:	e006      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a2fe:	bf00      	nop
 800a300:	e004      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a302:	bf00      	nop
 800a304:	e002      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a306:	bf00      	nop
 800a308:	e000      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a30a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a30c:	7dfb      	ldrb	r3, [r7, #23]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10a      	bne.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a312:	4b2e      	ldr	r3, [pc, #184]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a316:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a320:	492a      	ldr	r1, [pc, #168]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a322:	4313      	orrs	r3, r2
 800a324:	658b      	str	r3, [r1, #88]	; 0x58
 800a326:	e001      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a334:	2b00      	cmp	r3, #0
 800a336:	d04d      	beq.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a33e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a342:	d02e      	beq.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a344:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a348:	d828      	bhi.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a34a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a34e:	d02a      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a354:	d822      	bhi.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a356:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a35a:	d026      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a35c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a360:	d81c      	bhi.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a366:	d010      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a36c:	d816      	bhi.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d01d      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a376:	d111      	bne.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3304      	adds	r3, #4
 800a37c:	2100      	movs	r1, #0
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 fc72 	bl	800ac68 <RCCEx_PLL2_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a388:	e012      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3324      	adds	r3, #36	; 0x24
 800a38e:	2102      	movs	r1, #2
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fd1b 	bl	800adcc <RCCEx_PLL3_Config>
 800a396:	4603      	mov	r3, r0
 800a398:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a39a:	e009      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a0:	e006      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a3a2:	bf00      	nop
 800a3a4:	e004      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a3a6:	bf00      	nop
 800a3a8:	e002      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a3aa:	bf00      	nop
 800a3ac:	e000      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a3ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10c      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a3b6:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3c4:	4901      	ldr	r1, [pc, #4]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	658b      	str	r3, [r1, #88]	; 0x58
 800a3ca:	e003      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a3cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
 800a3d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 0308 	and.w	r3, r3, #8
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d018      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3e8:	d10a      	bne.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3324      	adds	r3, #36	; 0x24
 800a3ee:	2102      	movs	r1, #2
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f000 fceb 	bl	800adcc <RCCEx_PLL3_Config>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a400:	4b8a      	ldr	r3, [pc, #552]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a404:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a40c:	4987      	ldr	r1, [pc, #540]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a40e:	4313      	orrs	r3, r2
 800a410:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0310 	and.w	r3, r3, #16
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d01a      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a428:	d10a      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3324      	adds	r3, #36	; 0x24
 800a42e:	2102      	movs	r1, #2
 800a430:	4618      	mov	r0, r3
 800a432:	f000 fccb 	bl	800adcc <RCCEx_PLL3_Config>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a440:	4b7a      	ldr	r3, [pc, #488]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a44e:	4977      	ldr	r1, [pc, #476]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a450:	4313      	orrs	r3, r2
 800a452:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d034      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a46a:	d01d      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a46c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a470:	d817      	bhi.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d003      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a47a:	d009      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a47c:	e011      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3304      	adds	r3, #4
 800a482:	2100      	movs	r1, #0
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fbef 	bl	800ac68 <RCCEx_PLL2_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a48e:	e00c      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3324      	adds	r3, #36	; 0x24
 800a494:	2102      	movs	r1, #2
 800a496:	4618      	mov	r0, r3
 800a498:	f000 fc98 	bl	800adcc <RCCEx_PLL3_Config>
 800a49c:	4603      	mov	r3, r0
 800a49e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a4a0:	e003      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a4a6:	e000      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a4a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4aa:	7dfb      	ldrb	r3, [r7, #23]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4b0:	4b5e      	ldr	r3, [pc, #376]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4be:	495b      	ldr	r1, [pc, #364]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	658b      	str	r3, [r1, #88]	; 0x58
 800a4c4:	e001      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
 800a4c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d033      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4e0:	d01c      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a4e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4e6:	d816      	bhi.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a4e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ec:	d003      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a4ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4f2:	d007      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a4f4:	e00f      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4f6:	4b4d      	ldr	r3, [pc, #308]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fa:	4a4c      	ldr	r2, [pc, #304]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a500:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a502:	e00c      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	3324      	adds	r3, #36	; 0x24
 800a508:	2101      	movs	r1, #1
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 fc5e 	bl	800adcc <RCCEx_PLL3_Config>
 800a510:	4603      	mov	r3, r0
 800a512:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a514:	e003      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	75fb      	strb	r3, [r7, #23]
      break;
 800a51a:	e000      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a51c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a524:	4b41      	ldr	r3, [pc, #260]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a528:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a532:	493e      	ldr	r1, [pc, #248]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a534:	4313      	orrs	r3, r2
 800a536:	654b      	str	r3, [r1, #84]	; 0x54
 800a538:	e001      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d029      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a556:	d007      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a558:	e00f      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a55a:	4b34      	ldr	r3, [pc, #208]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55e:	4a33      	ldr	r2, [pc, #204]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a566:	e00b      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3304      	adds	r3, #4
 800a56c:	2102      	movs	r1, #2
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 fb7a 	bl	800ac68 <RCCEx_PLL2_Config>
 800a574:	4603      	mov	r3, r0
 800a576:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a578:	e002      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	75fb      	strb	r3, [r7, #23]
      break;
 800a57e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d109      	bne.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a586:	4b29      	ldr	r3, [pc, #164]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a58a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a592:	4926      	ldr	r1, [pc, #152]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a594:	4313      	orrs	r3, r2
 800a596:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a598:	e001      	b.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3324      	adds	r3, #36	; 0x24
 800a5ae:	2102      	movs	r1, #2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 fc0b 	bl	800adcc <RCCEx_PLL3_Config>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d033      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5d4:	d017      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a5d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5da:	d811      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a5dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5e0:	d013      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a5e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5e6:	d80b      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d010      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a5ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5f0:	d106      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5f2:	4b0e      	ldr	r3, [pc, #56]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f6:	4a0d      	ldr	r2, [pc, #52]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a5fe:	e007      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	75fb      	strb	r3, [r7, #23]
      break;
 800a604:	e004      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a606:	bf00      	nop
 800a608:	e002      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a60a:	bf00      	nop
 800a60c:	e000      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a60e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a610:	7dfb      	ldrb	r3, [r7, #23]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10c      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a616:	4b05      	ldr	r3, [pc, #20]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a622:	4902      	ldr	r1, [pc, #8]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a624:	4313      	orrs	r3, r2
 800a626:	654b      	str	r3, [r1, #84]	; 0x54
 800a628:	e004      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a62a:	bf00      	nop
 800a62c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d008      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a640:	4b29      	ldr	r3, [pc, #164]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a644:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a64c:	4926      	ldr	r1, [pc, #152]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d008      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a65e:	4b22      	ldr	r3, [pc, #136]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a662:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a66a:	491f      	ldr	r1, [pc, #124]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a66c:	4313      	orrs	r3, r2
 800a66e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00d      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a67c:	4b1a      	ldr	r3, [pc, #104]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	4a19      	ldr	r2, [pc, #100]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a682:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a686:	6113      	str	r3, [r2, #16]
 800a688:	4b17      	ldr	r3, [pc, #92]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a68a:	691a      	ldr	r2, [r3, #16]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a692:	4915      	ldr	r1, [pc, #84]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a694:	4313      	orrs	r3, r2
 800a696:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da08      	bge.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a6a0:	4b11      	ldr	r3, [pc, #68]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ac:	490e      	ldr	r1, [pc, #56]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a6be:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6cc:	4906      	ldr	r1, [pc, #24]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a6d2:	7dbb      	ldrb	r3, [r7, #22]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e000      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	58024400 	.word	0x58024400

0800a6ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a6f0:	f7ff f8a6 	bl	8009840 <HAL_RCC_GetHCLKFreq>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	4b06      	ldr	r3, [pc, #24]	; (800a710 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	091b      	lsrs	r3, r3, #4
 800a6fc:	f003 0307 	and.w	r3, r3, #7
 800a700:	4904      	ldr	r1, [pc, #16]	; (800a714 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a702:	5ccb      	ldrb	r3, [r1, r3]
 800a704:	f003 031f 	and.w	r3, r3, #31
 800a708:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	58024400 	.word	0x58024400
 800a714:	0800fdc8 	.word	0x0800fdc8

0800a718 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a718:	b480      	push	{r7}
 800a71a:	b089      	sub	sp, #36	; 0x24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a720:	4ba1      	ldr	r3, [pc, #644]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a724:	f003 0303 	and.w	r3, r3, #3
 800a728:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a72a:	4b9f      	ldr	r3, [pc, #636]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72e:	0b1b      	lsrs	r3, r3, #12
 800a730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a734:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a736:	4b9c      	ldr	r3, [pc, #624]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	091b      	lsrs	r3, r3, #4
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a742:	4b99      	ldr	r3, [pc, #612]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a746:	08db      	lsrs	r3, r3, #3
 800a748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	fb02 f303 	mul.w	r3, r2, r3
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 8111 	beq.w	800a988 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	2b02      	cmp	r3, #2
 800a76a:	f000 8083 	beq.w	800a874 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	2b02      	cmp	r3, #2
 800a772:	f200 80a1 	bhi.w	800a8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d056      	beq.n	800a830 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a782:	e099      	b.n	800a8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a784:	4b88      	ldr	r3, [pc, #544]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0320 	and.w	r3, r3, #32
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d02d      	beq.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a790:	4b85      	ldr	r3, [pc, #532]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	08db      	lsrs	r3, r3, #3
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	4a84      	ldr	r2, [pc, #528]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a79c:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	ee07 3a90 	vmov	s15, r3
 800a7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	ee07 3a90 	vmov	s15, r3
 800a7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ba:	4b7b      	ldr	r3, [pc, #492]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a7ea:	e087      	b.n	800a8fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	ee07 3a90 	vmov	s15, r3
 800a7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7fe:	4b6a      	ldr	r3, [pc, #424]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a812:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a82e:	e065      	b.n	800a8fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a842:	4b59      	ldr	r3, [pc, #356]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a84a:	ee07 3a90 	vmov	s15, r3
 800a84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a852:	ed97 6a03 	vldr	s12, [r7, #12]
 800a856:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a872:	e043      	b.n	800a8fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a87e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a886:	4b48      	ldr	r3, [pc, #288]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a896:	ed97 6a03 	vldr	s12, [r7, #12]
 800a89a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8b6:	e021      	b.n	800a8fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	ee07 3a90 	vmov	s15, r3
 800a8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ca:	4b37      	ldr	r3, [pc, #220]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a8fc:	4b2a      	ldr	r3, [pc, #168]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	0a5b      	lsrs	r3, r3, #9
 800a902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a906:	ee07 3a90 	vmov	s15, r3
 800a90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a912:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a916:	edd7 6a07 	vldr	s13, [r7, #28]
 800a91a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a91e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a922:	ee17 2a90 	vmov	r2, s15
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a92a:	4b1f      	ldr	r3, [pc, #124]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92e:	0c1b      	lsrs	r3, r3, #16
 800a930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a934:	ee07 3a90 	vmov	s15, r3
 800a938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a93c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a940:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a944:	edd7 6a07 	vldr	s13, [r7, #28]
 800a948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a94c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a950:	ee17 2a90 	vmov	r2, s15
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a958:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95c:	0e1b      	lsrs	r3, r3, #24
 800a95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a962:	ee07 3a90 	vmov	s15, r3
 800a966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a96e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a972:	edd7 6a07 	vldr	s13, [r7, #28]
 800a976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a97a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a97e:	ee17 2a90 	vmov	r2, s15
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a986:	e008      	b.n	800a99a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	609a      	str	r2, [r3, #8]
}
 800a99a:	bf00      	nop
 800a99c:	3724      	adds	r7, #36	; 0x24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	58024400 	.word	0x58024400
 800a9ac:	03d09000 	.word	0x03d09000
 800a9b0:	46000000 	.word	0x46000000
 800a9b4:	4c742400 	.word	0x4c742400
 800a9b8:	4a742400 	.word	0x4a742400
 800a9bc:	4af42400 	.word	0x4af42400

0800a9c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b089      	sub	sp, #36	; 0x24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9c8:	4ba1      	ldr	r3, [pc, #644]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a9d2:	4b9f      	ldr	r3, [pc, #636]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d6:	0d1b      	lsrs	r3, r3, #20
 800a9d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a9de:	4b9c      	ldr	r3, [pc, #624]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e2:	0a1b      	lsrs	r3, r3, #8
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a9ea:	4b99      	ldr	r3, [pc, #612]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ee:	08db      	lsrs	r3, r3, #3
 800a9f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	fb02 f303 	mul.w	r3, r2, r3
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 8111 	beq.w	800ac30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	f000 8083 	beq.w	800ab1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	f200 80a1 	bhi.w	800ab60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d003      	beq.n	800aa2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d056      	beq.n	800aad8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa2a:	e099      	b.n	800ab60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa2c:	4b88      	ldr	r3, [pc, #544]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0320 	and.w	r3, r3, #32
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d02d      	beq.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa38:	4b85      	ldr	r3, [pc, #532]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	08db      	lsrs	r3, r3, #3
 800aa3e:	f003 0303 	and.w	r3, r3, #3
 800aa42:	4a84      	ldr	r2, [pc, #528]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aa44:	fa22 f303 	lsr.w	r3, r2, r3
 800aa48:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	ee07 3a90 	vmov	s15, r3
 800aa50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa62:	4b7b      	ldr	r3, [pc, #492]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa72:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa76:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa92:	e087      	b.n	800aba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aaa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa6:	4b6a      	ldr	r3, [pc, #424]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaae:	ee07 3a90 	vmov	s15, r3
 800aab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aabe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aad6:	e065      	b.n	800aba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	ee07 3a90 	vmov	s15, r3
 800aade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaea:	4b59      	ldr	r3, [pc, #356]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aafa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aafe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab1a:	e043      	b.n	800aba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	ee07 3a90 	vmov	s15, r3
 800ab22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab2e:	4b48      	ldr	r3, [pc, #288]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab36:	ee07 3a90 	vmov	s15, r3
 800ab3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab42:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab5e:	e021      	b.n	800aba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	ee07 3a90 	vmov	s15, r3
 800ab66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab72:	4b37      	ldr	r3, [pc, #220]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7a:	ee07 3a90 	vmov	s15, r3
 800ab7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab86:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aba2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aba4:	4b2a      	ldr	r3, [pc, #168]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	0a5b      	lsrs	r3, r3, #9
 800abaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800abc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abca:	ee17 2a90 	vmov	r2, s15
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800abd2:	4b1f      	ldr	r3, [pc, #124]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	0c1b      	lsrs	r3, r3, #16
 800abd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abdc:	ee07 3a90 	vmov	s15, r3
 800abe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abec:	edd7 6a07 	vldr	s13, [r7, #28]
 800abf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abf8:	ee17 2a90 	vmov	r2, s15
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ac00:	4b13      	ldr	r3, [pc, #76]	; (800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac04:	0e1b      	lsrs	r3, r3, #24
 800ac06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac0a:	ee07 3a90 	vmov	s15, r3
 800ac0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac26:	ee17 2a90 	vmov	r2, s15
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac2e:	e008      	b.n	800ac42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	609a      	str	r2, [r3, #8]
}
 800ac42:	bf00      	nop
 800ac44:	3724      	adds	r7, #36	; 0x24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	58024400 	.word	0x58024400
 800ac54:	03d09000 	.word	0x03d09000
 800ac58:	46000000 	.word	0x46000000
 800ac5c:	4c742400 	.word	0x4c742400
 800ac60:	4a742400 	.word	0x4a742400
 800ac64:	4af42400 	.word	0x4af42400

0800ac68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac76:	4b53      	ldr	r3, [pc, #332]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ac78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7a:	f003 0303 	and.w	r3, r3, #3
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d101      	bne.n	800ac86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e099      	b.n	800adba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac86:	4b4f      	ldr	r3, [pc, #316]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a4e      	ldr	r2, [pc, #312]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ac8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac92:	f7fa fa97 	bl	80051c4 <HAL_GetTick>
 800ac96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac98:	e008      	b.n	800acac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ac9a:	f7fa fa93 	bl	80051c4 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d901      	bls.n	800acac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e086      	b.n	800adba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acac:	4b45      	ldr	r3, [pc, #276]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1f0      	bne.n	800ac9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acb8:	4b42      	ldr	r3, [pc, #264]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800acba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	031b      	lsls	r3, r3, #12
 800acc6:	493f      	ldr	r1, [pc, #252]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	628b      	str	r3, [r1, #40]	; 0x28
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	3b01      	subs	r3, #1
 800acdc:	025b      	lsls	r3, r3, #9
 800acde:	b29b      	uxth	r3, r3
 800ace0:	431a      	orrs	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	041b      	lsls	r3, r3, #16
 800acea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800acee:	431a      	orrs	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	061b      	lsls	r3, r3, #24
 800acf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800acfc:	4931      	ldr	r1, [pc, #196]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800acfe:	4313      	orrs	r3, r2
 800ad00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad02:	4b30      	ldr	r3, [pc, #192]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	492d      	ldr	r1, [pc, #180]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad14:	4b2b      	ldr	r3, [pc, #172]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad18:	f023 0220 	bic.w	r2, r3, #32
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	4928      	ldr	r1, [pc, #160]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad22:	4313      	orrs	r3, r2
 800ad24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad26:	4b27      	ldr	r3, [pc, #156]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2a:	4a26      	ldr	r2, [pc, #152]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad2c:	f023 0310 	bic.w	r3, r3, #16
 800ad30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad32:	4b24      	ldr	r3, [pc, #144]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad36:	4b24      	ldr	r3, [pc, #144]	; (800adc8 <RCCEx_PLL2_Config+0x160>)
 800ad38:	4013      	ands	r3, r2
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	69d2      	ldr	r2, [r2, #28]
 800ad3e:	00d2      	lsls	r2, r2, #3
 800ad40:	4920      	ldr	r1, [pc, #128]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad42:	4313      	orrs	r3, r2
 800ad44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad46:	4b1f      	ldr	r3, [pc, #124]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4a:	4a1e      	ldr	r2, [pc, #120]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad4c:	f043 0310 	orr.w	r3, r3, #16
 800ad50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d106      	bne.n	800ad66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad58:	4b1a      	ldr	r3, [pc, #104]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5c:	4a19      	ldr	r2, [pc, #100]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad62:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad64:	e00f      	b.n	800ad86 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d106      	bne.n	800ad7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad6c:	4b15      	ldr	r3, [pc, #84]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad76:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad78:	e005      	b.n	800ad86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad7a:	4b12      	ldr	r3, [pc, #72]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7e:	4a11      	ldr	r2, [pc, #68]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad86:	4b0f      	ldr	r3, [pc, #60]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a0e      	ldr	r2, [pc, #56]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800ad8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad92:	f7fa fa17 	bl	80051c4 <HAL_GetTick>
 800ad96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad98:	e008      	b.n	800adac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ad9a:	f7fa fa13 	bl	80051c4 <HAL_GetTick>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d901      	bls.n	800adac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ada8:	2303      	movs	r3, #3
 800adaa:	e006      	b.n	800adba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adac:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <RCCEx_PLL2_Config+0x15c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d0f0      	beq.n	800ad9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	58024400 	.word	0x58024400
 800adc8:	ffff0007 	.word	0xffff0007

0800adcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adda:	4b53      	ldr	r3, [pc, #332]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800addc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adde:	f003 0303 	and.w	r3, r3, #3
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d101      	bne.n	800adea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e099      	b.n	800af1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800adea:	4b4f      	ldr	r3, [pc, #316]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a4e      	ldr	r2, [pc, #312]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800adf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adf6:	f7fa f9e5 	bl	80051c4 <HAL_GetTick>
 800adfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800adfc:	e008      	b.n	800ae10 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800adfe:	f7fa f9e1 	bl	80051c4 <HAL_GetTick>
 800ae02:	4602      	mov	r2, r0
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d901      	bls.n	800ae10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e086      	b.n	800af1e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae10:	4b45      	ldr	r3, [pc, #276]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1f0      	bne.n	800adfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae1c:	4b42      	ldr	r3, [pc, #264]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	051b      	lsls	r3, r3, #20
 800ae2a:	493f      	ldr	r1, [pc, #252]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	628b      	str	r3, [r1, #40]	; 0x28
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	025b      	lsls	r3, r3, #9
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	431a      	orrs	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	041b      	lsls	r3, r3, #16
 800ae4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae52:	431a      	orrs	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	061b      	lsls	r3, r3, #24
 800ae5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae60:	4931      	ldr	r1, [pc, #196]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae66:	4b30      	ldr	r3, [pc, #192]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	492d      	ldr	r1, [pc, #180]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae78:	4b2b      	ldr	r3, [pc, #172]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	4928      	ldr	r1, [pc, #160]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae8a:	4b27      	ldr	r3, [pc, #156]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8e:	4a26      	ldr	r2, [pc, #152]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ae96:	4b24      	ldr	r3, [pc, #144]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800ae98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae9a:	4b24      	ldr	r3, [pc, #144]	; (800af2c <RCCEx_PLL3_Config+0x160>)
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	69d2      	ldr	r2, [r2, #28]
 800aea2:	00d2      	lsls	r2, r2, #3
 800aea4:	4920      	ldr	r1, [pc, #128]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aeaa:	4b1f      	ldr	r3, [pc, #124]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeae:	4a1e      	ldr	r2, [pc, #120]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aeb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d106      	bne.n	800aeca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aebc:	4b1a      	ldr	r3, [pc, #104]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec0:	4a19      	ldr	r2, [pc, #100]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aec2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aec8:	e00f      	b.n	800aeea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d106      	bne.n	800aede <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aed0:	4b15      	ldr	r3, [pc, #84]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed4:	4a14      	ldr	r2, [pc, #80]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aed6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aeda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aedc:	e005      	b.n	800aeea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aede:	4b12      	ldr	r3, [pc, #72]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee2:	4a11      	ldr	r2, [pc, #68]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aee8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aeea:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a0e      	ldr	r2, [pc, #56]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800aef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aef6:	f7fa f965 	bl	80051c4 <HAL_GetTick>
 800aefa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aefc:	e008      	b.n	800af10 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aefe:	f7fa f961 	bl	80051c4 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d901      	bls.n	800af10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e006      	b.n	800af1e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af10:	4b05      	ldr	r3, [pc, #20]	; (800af28 <RCCEx_PLL3_Config+0x15c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0f0      	beq.n	800aefe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	58024400 	.word	0x58024400
 800af2c:	ffff0007 	.word	0xffff0007

0800af30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e049      	b.n	800afd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d106      	bne.n	800af5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7f9 fa2c 	bl	80043b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2202      	movs	r2, #2
 800af60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3304      	adds	r3, #4
 800af6c:	4619      	mov	r1, r3
 800af6e:	4610      	mov	r0, r2
 800af70:	f000 feb8 	bl	800bce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d001      	beq.n	800aff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e05e      	b.n	800b0b6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f042 0201 	orr.w	r2, r2, #1
 800b00e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a2b      	ldr	r2, [pc, #172]	; (800b0c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d02c      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x94>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b022:	d027      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x94>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a27      	ldr	r2, [pc, #156]	; (800b0c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d022      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x94>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a26      	ldr	r2, [pc, #152]	; (800b0cc <HAL_TIM_Base_Start_IT+0xec>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d01d      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x94>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a24      	ldr	r2, [pc, #144]	; (800b0d0 <HAL_TIM_Base_Start_IT+0xf0>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d018      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x94>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a23      	ldr	r2, [pc, #140]	; (800b0d4 <HAL_TIM_Base_Start_IT+0xf4>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d013      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x94>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a21      	ldr	r2, [pc, #132]	; (800b0d8 <HAL_TIM_Base_Start_IT+0xf8>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d00e      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x94>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a20      	ldr	r2, [pc, #128]	; (800b0dc <HAL_TIM_Base_Start_IT+0xfc>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d009      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x94>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a1e      	ldr	r2, [pc, #120]	; (800b0e0 <HAL_TIM_Base_Start_IT+0x100>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d004      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x94>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a1d      	ldr	r2, [pc, #116]	; (800b0e4 <HAL_TIM_Base_Start_IT+0x104>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d115      	bne.n	800b0a0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	689a      	ldr	r2, [r3, #8]
 800b07a:	4b1b      	ldr	r3, [pc, #108]	; (800b0e8 <HAL_TIM_Base_Start_IT+0x108>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b06      	cmp	r3, #6
 800b084:	d015      	beq.n	800b0b2 <HAL_TIM_Base_Start_IT+0xd2>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b08c:	d011      	beq.n	800b0b2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f042 0201 	orr.w	r2, r2, #1
 800b09c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b09e:	e008      	b.n	800b0b2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f042 0201 	orr.w	r2, r2, #1
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	e000      	b.n	800b0b4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	40010000 	.word	0x40010000
 800b0c8:	40000400 	.word	0x40000400
 800b0cc:	40000800 	.word	0x40000800
 800b0d0:	40000c00 	.word	0x40000c00
 800b0d4:	40010400 	.word	0x40010400
 800b0d8:	40001800 	.word	0x40001800
 800b0dc:	40014000 	.word	0x40014000
 800b0e0:	4000e000 	.word	0x4000e000
 800b0e4:	4000e400 	.word	0x4000e400
 800b0e8:	00010007 	.word	0x00010007

0800b0ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e049      	b.n	800b192 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b104:	b2db      	uxtb	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	d106      	bne.n	800b118 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f7f9 fa86 	bl	8004624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2202      	movs	r2, #2
 800b11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3304      	adds	r3, #4
 800b128:	4619      	mov	r1, r3
 800b12a:	4610      	mov	r0, r2
 800b12c:	f000 fdda 	bl	800bce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d109      	bne.n	800b1c0 <HAL_TIM_PWM_Start+0x24>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	bf14      	ite	ne
 800b1b8:	2301      	movne	r3, #1
 800b1ba:	2300      	moveq	r3, #0
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	e03c      	b.n	800b23a <HAL_TIM_PWM_Start+0x9e>
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	2b04      	cmp	r3, #4
 800b1c4:	d109      	bne.n	800b1da <HAL_TIM_PWM_Start+0x3e>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	bf14      	ite	ne
 800b1d2:	2301      	movne	r3, #1
 800b1d4:	2300      	moveq	r3, #0
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	e02f      	b.n	800b23a <HAL_TIM_PWM_Start+0x9e>
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	2b08      	cmp	r3, #8
 800b1de:	d109      	bne.n	800b1f4 <HAL_TIM_PWM_Start+0x58>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	bf14      	ite	ne
 800b1ec:	2301      	movne	r3, #1
 800b1ee:	2300      	moveq	r3, #0
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	e022      	b.n	800b23a <HAL_TIM_PWM_Start+0x9e>
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	2b0c      	cmp	r3, #12
 800b1f8:	d109      	bne.n	800b20e <HAL_TIM_PWM_Start+0x72>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b01      	cmp	r3, #1
 800b204:	bf14      	ite	ne
 800b206:	2301      	movne	r3, #1
 800b208:	2300      	moveq	r3, #0
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	e015      	b.n	800b23a <HAL_TIM_PWM_Start+0x9e>
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b10      	cmp	r3, #16
 800b212:	d109      	bne.n	800b228 <HAL_TIM_PWM_Start+0x8c>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	bf14      	ite	ne
 800b220:	2301      	movne	r3, #1
 800b222:	2300      	moveq	r3, #0
 800b224:	b2db      	uxtb	r3, r3
 800b226:	e008      	b.n	800b23a <HAL_TIM_PWM_Start+0x9e>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b01      	cmp	r3, #1
 800b232:	bf14      	ite	ne
 800b234:	2301      	movne	r3, #1
 800b236:	2300      	moveq	r3, #0
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e0ab      	b.n	800b39a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d104      	bne.n	800b252 <HAL_TIM_PWM_Start+0xb6>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2202      	movs	r2, #2
 800b24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b250:	e023      	b.n	800b29a <HAL_TIM_PWM_Start+0xfe>
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2b04      	cmp	r3, #4
 800b256:	d104      	bne.n	800b262 <HAL_TIM_PWM_Start+0xc6>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2202      	movs	r2, #2
 800b25c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b260:	e01b      	b.n	800b29a <HAL_TIM_PWM_Start+0xfe>
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b08      	cmp	r3, #8
 800b266:	d104      	bne.n	800b272 <HAL_TIM_PWM_Start+0xd6>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2202      	movs	r2, #2
 800b26c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b270:	e013      	b.n	800b29a <HAL_TIM_PWM_Start+0xfe>
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2b0c      	cmp	r3, #12
 800b276:	d104      	bne.n	800b282 <HAL_TIM_PWM_Start+0xe6>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2202      	movs	r2, #2
 800b27c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b280:	e00b      	b.n	800b29a <HAL_TIM_PWM_Start+0xfe>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2b10      	cmp	r3, #16
 800b286:	d104      	bne.n	800b292 <HAL_TIM_PWM_Start+0xf6>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2202      	movs	r2, #2
 800b28c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b290:	e003      	b.n	800b29a <HAL_TIM_PWM_Start+0xfe>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2202      	movs	r2, #2
 800b296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f001 f938 	bl	800c518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a3d      	ldr	r2, [pc, #244]	; (800b3a4 <HAL_TIM_PWM_Start+0x208>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d013      	beq.n	800b2da <HAL_TIM_PWM_Start+0x13e>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a3c      	ldr	r2, [pc, #240]	; (800b3a8 <HAL_TIM_PWM_Start+0x20c>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d00e      	beq.n	800b2da <HAL_TIM_PWM_Start+0x13e>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a3a      	ldr	r2, [pc, #232]	; (800b3ac <HAL_TIM_PWM_Start+0x210>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d009      	beq.n	800b2da <HAL_TIM_PWM_Start+0x13e>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a39      	ldr	r2, [pc, #228]	; (800b3b0 <HAL_TIM_PWM_Start+0x214>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d004      	beq.n	800b2da <HAL_TIM_PWM_Start+0x13e>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a37      	ldr	r2, [pc, #220]	; (800b3b4 <HAL_TIM_PWM_Start+0x218>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d101      	bne.n	800b2de <HAL_TIM_PWM_Start+0x142>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <HAL_TIM_PWM_Start+0x144>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d007      	beq.n	800b2f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a2a      	ldr	r2, [pc, #168]	; (800b3a4 <HAL_TIM_PWM_Start+0x208>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d02c      	beq.n	800b358 <HAL_TIM_PWM_Start+0x1bc>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b306:	d027      	beq.n	800b358 <HAL_TIM_PWM_Start+0x1bc>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a2a      	ldr	r2, [pc, #168]	; (800b3b8 <HAL_TIM_PWM_Start+0x21c>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d022      	beq.n	800b358 <HAL_TIM_PWM_Start+0x1bc>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a29      	ldr	r2, [pc, #164]	; (800b3bc <HAL_TIM_PWM_Start+0x220>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d01d      	beq.n	800b358 <HAL_TIM_PWM_Start+0x1bc>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a27      	ldr	r2, [pc, #156]	; (800b3c0 <HAL_TIM_PWM_Start+0x224>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d018      	beq.n	800b358 <HAL_TIM_PWM_Start+0x1bc>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a1f      	ldr	r2, [pc, #124]	; (800b3a8 <HAL_TIM_PWM_Start+0x20c>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d013      	beq.n	800b358 <HAL_TIM_PWM_Start+0x1bc>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a23      	ldr	r2, [pc, #140]	; (800b3c4 <HAL_TIM_PWM_Start+0x228>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d00e      	beq.n	800b358 <HAL_TIM_PWM_Start+0x1bc>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a1b      	ldr	r2, [pc, #108]	; (800b3ac <HAL_TIM_PWM_Start+0x210>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d009      	beq.n	800b358 <HAL_TIM_PWM_Start+0x1bc>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a1f      	ldr	r2, [pc, #124]	; (800b3c8 <HAL_TIM_PWM_Start+0x22c>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d004      	beq.n	800b358 <HAL_TIM_PWM_Start+0x1bc>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a1e      	ldr	r2, [pc, #120]	; (800b3cc <HAL_TIM_PWM_Start+0x230>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d115      	bne.n	800b384 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689a      	ldr	r2, [r3, #8]
 800b35e:	4b1c      	ldr	r3, [pc, #112]	; (800b3d0 <HAL_TIM_PWM_Start+0x234>)
 800b360:	4013      	ands	r3, r2
 800b362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b06      	cmp	r3, #6
 800b368:	d015      	beq.n	800b396 <HAL_TIM_PWM_Start+0x1fa>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b370:	d011      	beq.n	800b396 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f042 0201 	orr.w	r2, r2, #1
 800b380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b382:	e008      	b.n	800b396 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f042 0201 	orr.w	r2, r2, #1
 800b392:	601a      	str	r2, [r3, #0]
 800b394:	e000      	b.n	800b398 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	40010000 	.word	0x40010000
 800b3a8:	40010400 	.word	0x40010400
 800b3ac:	40014000 	.word	0x40014000
 800b3b0:	40014400 	.word	0x40014400
 800b3b4:	40014800 	.word	0x40014800
 800b3b8:	40000400 	.word	0x40000400
 800b3bc:	40000800 	.word	0x40000800
 800b3c0:	40000c00 	.word	0x40000c00
 800b3c4:	40001800 	.word	0x40001800
 800b3c8:	4000e000 	.word	0x4000e000
 800b3cc:	4000e400 	.word	0x4000e400
 800b3d0:	00010007 	.word	0x00010007

0800b3d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e08f      	b.n	800b508 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d106      	bne.n	800b402 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7f9 f81f 	bl	8004440 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2202      	movs	r2, #2
 800b406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6899      	ldr	r1, [r3, #8]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	4b3e      	ldr	r3, [pc, #248]	; (800b510 <HAL_TIM_Encoder_Init+0x13c>)
 800b416:	400b      	ands	r3, r1
 800b418:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3304      	adds	r3, #4
 800b422:	4619      	mov	r1, r3
 800b424:	4610      	mov	r0, r2
 800b426:	f000 fc5d 	bl	800bce4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	6a1b      	ldr	r3, [r3, #32]
 800b440:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	4313      	orrs	r3, r2
 800b44a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	4b31      	ldr	r3, [pc, #196]	; (800b514 <HAL_TIM_Encoder_Init+0x140>)
 800b450:	4013      	ands	r3, r2
 800b452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	689a      	ldr	r2, [r3, #8]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	021b      	lsls	r3, r3, #8
 800b45e:	4313      	orrs	r3, r2
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	4313      	orrs	r3, r2
 800b464:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	4b2b      	ldr	r3, [pc, #172]	; (800b518 <HAL_TIM_Encoder_Init+0x144>)
 800b46a:	4013      	ands	r3, r2
 800b46c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b46e:	693a      	ldr	r2, [r7, #16]
 800b470:	4b2a      	ldr	r3, [pc, #168]	; (800b51c <HAL_TIM_Encoder_Init+0x148>)
 800b472:	4013      	ands	r3, r2
 800b474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	68da      	ldr	r2, [r3, #12]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	69db      	ldr	r3, [r3, #28]
 800b47e:	021b      	lsls	r3, r3, #8
 800b480:	4313      	orrs	r3, r2
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	4313      	orrs	r3, r2
 800b486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	011a      	lsls	r2, r3, #4
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	031b      	lsls	r3, r3, #12
 800b494:	4313      	orrs	r3, r2
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	4313      	orrs	r3, r2
 800b49a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b4a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b4aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	685a      	ldr	r2, [r3, #4]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	695b      	ldr	r3, [r3, #20]
 800b4b4:	011b      	lsls	r3, r3, #4
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	697a      	ldr	r2, [r7, #20]
 800b4c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	fffebff8 	.word	0xfffebff8
 800b514:	fffffcfc 	.word	0xfffffcfc
 800b518:	fffff3f3 	.word	0xfffff3f3
 800b51c:	ffff0f0f 	.word	0xffff0f0f

0800b520 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b530:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b538:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b540:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b548:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d110      	bne.n	800b572 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b550:	7bfb      	ldrb	r3, [r7, #15]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d102      	bne.n	800b55c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b556:	7b7b      	ldrb	r3, [r7, #13]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d001      	beq.n	800b560 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e069      	b.n	800b634 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2202      	movs	r2, #2
 800b564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b570:	e031      	b.n	800b5d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b04      	cmp	r3, #4
 800b576:	d110      	bne.n	800b59a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b578:	7bbb      	ldrb	r3, [r7, #14]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d102      	bne.n	800b584 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b57e:	7b3b      	ldrb	r3, [r7, #12]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d001      	beq.n	800b588 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	e055      	b.n	800b634 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2202      	movs	r2, #2
 800b58c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2202      	movs	r2, #2
 800b594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b598:	e01d      	b.n	800b5d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d108      	bne.n	800b5b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5a0:	7bbb      	ldrb	r3, [r7, #14]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d105      	bne.n	800b5b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5a6:	7b7b      	ldrb	r3, [r7, #13]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d102      	bne.n	800b5b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b5ac:	7b3b      	ldrb	r3, [r7, #12]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d001      	beq.n	800b5b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e03e      	b.n	800b634 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2202      	movs	r2, #2
 800b5c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <HAL_TIM_Encoder_Start+0xc4>
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	2b04      	cmp	r3, #4
 800b5e0:	d008      	beq.n	800b5f4 <HAL_TIM_Encoder_Start+0xd4>
 800b5e2:	e00f      	b.n	800b604 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 ff93 	bl	800c518 <TIM_CCxChannelCmd>
      break;
 800b5f2:	e016      	b.n	800b622 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	2104      	movs	r1, #4
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 ff8b 	bl	800c518 <TIM_CCxChannelCmd>
      break;
 800b602:	e00e      	b.n	800b622 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2201      	movs	r2, #1
 800b60a:	2100      	movs	r1, #0
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 ff83 	bl	800c518 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2201      	movs	r2, #1
 800b618:	2104      	movs	r1, #4
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 ff7c 	bl	800c518 <TIM_CCxChannelCmd>
      break;
 800b620:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f042 0201 	orr.w	r2, r2, #1
 800b630:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	f003 0302 	and.w	r3, r3, #2
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d122      	bne.n	800b698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	f003 0302 	and.w	r3, r3, #2
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d11b      	bne.n	800b698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f06f 0202 	mvn.w	r2, #2
 800b668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	f003 0303 	and.w	r3, r3, #3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fb12 	bl	800bca8 <HAL_TIM_IC_CaptureCallback>
 800b684:	e005      	b.n	800b692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fb04 	bl	800bc94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fb15 	bl	800bcbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	f003 0304 	and.w	r3, r3, #4
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	d122      	bne.n	800b6ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f003 0304 	and.w	r3, r3, #4
 800b6b0:	2b04      	cmp	r3, #4
 800b6b2:	d11b      	bne.n	800b6ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f06f 0204 	mvn.w	r2, #4
 800b6bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fae8 	bl	800bca8 <HAL_TIM_IC_CaptureCallback>
 800b6d8:	e005      	b.n	800b6e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fada 	bl	800bc94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 faeb 	bl	800bcbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	f003 0308 	and.w	r3, r3, #8
 800b6f6:	2b08      	cmp	r3, #8
 800b6f8:	d122      	bne.n	800b740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	f003 0308 	and.w	r3, r3, #8
 800b704:	2b08      	cmp	r3, #8
 800b706:	d11b      	bne.n	800b740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f06f 0208 	mvn.w	r2, #8
 800b710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2204      	movs	r2, #4
 800b716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	f003 0303 	and.w	r3, r3, #3
 800b722:	2b00      	cmp	r3, #0
 800b724:	d003      	beq.n	800b72e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fabe 	bl	800bca8 <HAL_TIM_IC_CaptureCallback>
 800b72c:	e005      	b.n	800b73a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fab0 	bl	800bc94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fac1 	bl	800bcbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	f003 0310 	and.w	r3, r3, #16
 800b74a:	2b10      	cmp	r3, #16
 800b74c:	d122      	bne.n	800b794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	f003 0310 	and.w	r3, r3, #16
 800b758:	2b10      	cmp	r3, #16
 800b75a:	d11b      	bne.n	800b794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f06f 0210 	mvn.w	r2, #16
 800b764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2208      	movs	r2, #8
 800b76a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	69db      	ldr	r3, [r3, #28]
 800b772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b776:	2b00      	cmp	r3, #0
 800b778:	d003      	beq.n	800b782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa94 	bl	800bca8 <HAL_TIM_IC_CaptureCallback>
 800b780:	e005      	b.n	800b78e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fa86 	bl	800bc94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 fa97 	bl	800bcbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	f003 0301 	and.w	r3, r3, #1
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d10e      	bne.n	800b7c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d107      	bne.n	800b7c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f06f 0201 	mvn.w	r2, #1
 800b7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7f9 fa42 	bl	8004c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ca:	2b80      	cmp	r3, #128	; 0x80
 800b7cc:	d10e      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7d8:	2b80      	cmp	r3, #128	; 0x80
 800b7da:	d107      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 f802 	bl	800c7f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7fa:	d10e      	bne.n	800b81a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b806:	2b80      	cmp	r3, #128	; 0x80
 800b808:	d107      	bne.n	800b81a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fff5 	bl	800c804 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b824:	2b40      	cmp	r3, #64	; 0x40
 800b826:	d10e      	bne.n	800b846 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b832:	2b40      	cmp	r3, #64	; 0x40
 800b834:	d107      	bne.n	800b846 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b83e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fa45 	bl	800bcd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	f003 0320 	and.w	r3, r3, #32
 800b850:	2b20      	cmp	r3, #32
 800b852:	d10e      	bne.n	800b872 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	f003 0320 	and.w	r3, r3, #32
 800b85e:	2b20      	cmp	r3, #32
 800b860:	d107      	bne.n	800b872 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f06f 0220 	mvn.w	r2, #32
 800b86a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 ffb5 	bl	800c7dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b872:	bf00      	nop
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
	...

0800b87c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b892:	2b01      	cmp	r3, #1
 800b894:	d101      	bne.n	800b89a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b896:	2302      	movs	r3, #2
 800b898:	e0ff      	b.n	800ba9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b14      	cmp	r3, #20
 800b8a6:	f200 80f0 	bhi.w	800ba8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b8aa:	a201      	add	r2, pc, #4	; (adr r2, 800b8b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b0:	0800b905 	.word	0x0800b905
 800b8b4:	0800ba8b 	.word	0x0800ba8b
 800b8b8:	0800ba8b 	.word	0x0800ba8b
 800b8bc:	0800ba8b 	.word	0x0800ba8b
 800b8c0:	0800b945 	.word	0x0800b945
 800b8c4:	0800ba8b 	.word	0x0800ba8b
 800b8c8:	0800ba8b 	.word	0x0800ba8b
 800b8cc:	0800ba8b 	.word	0x0800ba8b
 800b8d0:	0800b987 	.word	0x0800b987
 800b8d4:	0800ba8b 	.word	0x0800ba8b
 800b8d8:	0800ba8b 	.word	0x0800ba8b
 800b8dc:	0800ba8b 	.word	0x0800ba8b
 800b8e0:	0800b9c7 	.word	0x0800b9c7
 800b8e4:	0800ba8b 	.word	0x0800ba8b
 800b8e8:	0800ba8b 	.word	0x0800ba8b
 800b8ec:	0800ba8b 	.word	0x0800ba8b
 800b8f0:	0800ba09 	.word	0x0800ba09
 800b8f4:	0800ba8b 	.word	0x0800ba8b
 800b8f8:	0800ba8b 	.word	0x0800ba8b
 800b8fc:	0800ba8b 	.word	0x0800ba8b
 800b900:	0800ba49 	.word	0x0800ba49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68b9      	ldr	r1, [r7, #8]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 fa90 	bl	800be30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	699a      	ldr	r2, [r3, #24]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f042 0208 	orr.w	r2, r2, #8
 800b91e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	699a      	ldr	r2, [r3, #24]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f022 0204 	bic.w	r2, r2, #4
 800b92e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6999      	ldr	r1, [r3, #24]
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	691a      	ldr	r2, [r3, #16]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	430a      	orrs	r2, r1
 800b940:	619a      	str	r2, [r3, #24]
      break;
 800b942:	e0a5      	b.n	800ba90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68b9      	ldr	r1, [r7, #8]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 fb00 	bl	800bf50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	699a      	ldr	r2, [r3, #24]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b95e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	699a      	ldr	r2, [r3, #24]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b96e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6999      	ldr	r1, [r3, #24]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	021a      	lsls	r2, r3, #8
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	619a      	str	r2, [r3, #24]
      break;
 800b984:	e084      	b.n	800ba90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68b9      	ldr	r1, [r7, #8]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 fb69 	bl	800c064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	69da      	ldr	r2, [r3, #28]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f042 0208 	orr.w	r2, r2, #8
 800b9a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	69da      	ldr	r2, [r3, #28]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f022 0204 	bic.w	r2, r2, #4
 800b9b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	69d9      	ldr	r1, [r3, #28]
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	691a      	ldr	r2, [r3, #16]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	430a      	orrs	r2, r1
 800b9c2:	61da      	str	r2, [r3, #28]
      break;
 800b9c4:	e064      	b.n	800ba90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68b9      	ldr	r1, [r7, #8]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f000 fbd1 	bl	800c174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	69da      	ldr	r2, [r3, #28]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69da      	ldr	r2, [r3, #28]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	69d9      	ldr	r1, [r3, #28]
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	021a      	lsls	r2, r3, #8
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	430a      	orrs	r2, r1
 800ba04:	61da      	str	r2, [r3, #28]
      break;
 800ba06:	e043      	b.n	800ba90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68b9      	ldr	r1, [r7, #8]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 fc1a 	bl	800c248 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f042 0208 	orr.w	r2, r2, #8
 800ba22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f022 0204 	bic.w	r2, r2, #4
 800ba32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	691a      	ldr	r2, [r3, #16]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	430a      	orrs	r2, r1
 800ba44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba46:	e023      	b.n	800ba90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68b9      	ldr	r1, [r7, #8]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 fc5e 	bl	800c310 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	021a      	lsls	r2, r3, #8
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	430a      	orrs	r2, r1
 800ba86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba88:	e002      	b.n	800ba90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop

0800baa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d101      	bne.n	800bac0 <HAL_TIM_ConfigClockSource+0x1c>
 800babc:	2302      	movs	r3, #2
 800babe:	e0dc      	b.n	800bc7a <HAL_TIM_ConfigClockSource+0x1d6>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2202      	movs	r2, #2
 800bacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	4b6a      	ldr	r3, [pc, #424]	; (800bc84 <HAL_TIM_ConfigClockSource+0x1e0>)
 800badc:	4013      	ands	r3, r2
 800bade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a64      	ldr	r2, [pc, #400]	; (800bc88 <HAL_TIM_ConfigClockSource+0x1e4>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	f000 80a9 	beq.w	800bc4e <HAL_TIM_ConfigClockSource+0x1aa>
 800bafc:	4a62      	ldr	r2, [pc, #392]	; (800bc88 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	f200 80ae 	bhi.w	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb04:	4a61      	ldr	r2, [pc, #388]	; (800bc8c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	f000 80a1 	beq.w	800bc4e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb0c:	4a5f      	ldr	r2, [pc, #380]	; (800bc8c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	f200 80a6 	bhi.w	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb14:	4a5e      	ldr	r2, [pc, #376]	; (800bc90 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	f000 8099 	beq.w	800bc4e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb1c:	4a5c      	ldr	r2, [pc, #368]	; (800bc90 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	f200 809e 	bhi.w	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bb28:	f000 8091 	beq.w	800bc4e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bb30:	f200 8096 	bhi.w	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb38:	f000 8089 	beq.w	800bc4e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb40:	f200 808e 	bhi.w	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb48:	d03e      	beq.n	800bbc8 <HAL_TIM_ConfigClockSource+0x124>
 800bb4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb4e:	f200 8087 	bhi.w	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb56:	f000 8086 	beq.w	800bc66 <HAL_TIM_ConfigClockSource+0x1c2>
 800bb5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb5e:	d87f      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb60:	2b70      	cmp	r3, #112	; 0x70
 800bb62:	d01a      	beq.n	800bb9a <HAL_TIM_ConfigClockSource+0xf6>
 800bb64:	2b70      	cmp	r3, #112	; 0x70
 800bb66:	d87b      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb68:	2b60      	cmp	r3, #96	; 0x60
 800bb6a:	d050      	beq.n	800bc0e <HAL_TIM_ConfigClockSource+0x16a>
 800bb6c:	2b60      	cmp	r3, #96	; 0x60
 800bb6e:	d877      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb70:	2b50      	cmp	r3, #80	; 0x50
 800bb72:	d03c      	beq.n	800bbee <HAL_TIM_ConfigClockSource+0x14a>
 800bb74:	2b50      	cmp	r3, #80	; 0x50
 800bb76:	d873      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb78:	2b40      	cmp	r3, #64	; 0x40
 800bb7a:	d058      	beq.n	800bc2e <HAL_TIM_ConfigClockSource+0x18a>
 800bb7c:	2b40      	cmp	r3, #64	; 0x40
 800bb7e:	d86f      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb80:	2b30      	cmp	r3, #48	; 0x30
 800bb82:	d064      	beq.n	800bc4e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb84:	2b30      	cmp	r3, #48	; 0x30
 800bb86:	d86b      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb88:	2b20      	cmp	r3, #32
 800bb8a:	d060      	beq.n	800bc4e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb8c:	2b20      	cmp	r3, #32
 800bb8e:	d867      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d05c      	beq.n	800bc4e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb94:	2b10      	cmp	r3, #16
 800bb96:	d05a      	beq.n	800bc4e <HAL_TIM_ConfigClockSource+0x1aa>
 800bb98:	e062      	b.n	800bc60 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6818      	ldr	r0, [r3, #0]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	6899      	ldr	r1, [r3, #8]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	f000 fc95 	bl	800c4d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bbbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	609a      	str	r2, [r3, #8]
      break;
 800bbc6:	e04f      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	6899      	ldr	r1, [r3, #8]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	685a      	ldr	r2, [r3, #4]
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f000 fc7e 	bl	800c4d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	689a      	ldr	r2, [r3, #8]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbea:	609a      	str	r2, [r3, #8]
      break;
 800bbec:	e03c      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6818      	ldr	r0, [r3, #0]
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	6859      	ldr	r1, [r3, #4]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f000 fbee 	bl	800c3dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2150      	movs	r1, #80	; 0x50
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 fc48 	bl	800c49c <TIM_ITRx_SetConfig>
      break;
 800bc0c:	e02c      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	6859      	ldr	r1, [r3, #4]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	f000 fc0d 	bl	800c43a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2160      	movs	r1, #96	; 0x60
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 fc38 	bl	800c49c <TIM_ITRx_SetConfig>
      break;
 800bc2c:	e01c      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6818      	ldr	r0, [r3, #0]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	6859      	ldr	r1, [r3, #4]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f000 fbce 	bl	800c3dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2140      	movs	r1, #64	; 0x40
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 fc28 	bl	800c49c <TIM_ITRx_SetConfig>
      break;
 800bc4c:	e00c      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4619      	mov	r1, r3
 800bc58:	4610      	mov	r0, r2
 800bc5a:	f000 fc1f 	bl	800c49c <TIM_ITRx_SetConfig>
      break;
 800bc5e:	e003      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	73fb      	strb	r3, [r7, #15]
      break;
 800bc64:	e000      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bc66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	ffceff88 	.word	0xffceff88
 800bc88:	00100040 	.word	0x00100040
 800bc8c:	00100030 	.word	0x00100030
 800bc90:	00100020 	.word	0x00100020

0800bc94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bcc4:	bf00      	nop
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a44      	ldr	r2, [pc, #272]	; (800be08 <TIM_Base_SetConfig+0x124>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d013      	beq.n	800bd24 <TIM_Base_SetConfig+0x40>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd02:	d00f      	beq.n	800bd24 <TIM_Base_SetConfig+0x40>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a41      	ldr	r2, [pc, #260]	; (800be0c <TIM_Base_SetConfig+0x128>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d00b      	beq.n	800bd24 <TIM_Base_SetConfig+0x40>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a40      	ldr	r2, [pc, #256]	; (800be10 <TIM_Base_SetConfig+0x12c>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d007      	beq.n	800bd24 <TIM_Base_SetConfig+0x40>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a3f      	ldr	r2, [pc, #252]	; (800be14 <TIM_Base_SetConfig+0x130>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d003      	beq.n	800bd24 <TIM_Base_SetConfig+0x40>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a3e      	ldr	r2, [pc, #248]	; (800be18 <TIM_Base_SetConfig+0x134>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d108      	bne.n	800bd36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a33      	ldr	r2, [pc, #204]	; (800be08 <TIM_Base_SetConfig+0x124>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d027      	beq.n	800bd8e <TIM_Base_SetConfig+0xaa>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd44:	d023      	beq.n	800bd8e <TIM_Base_SetConfig+0xaa>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a30      	ldr	r2, [pc, #192]	; (800be0c <TIM_Base_SetConfig+0x128>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d01f      	beq.n	800bd8e <TIM_Base_SetConfig+0xaa>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a2f      	ldr	r2, [pc, #188]	; (800be10 <TIM_Base_SetConfig+0x12c>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d01b      	beq.n	800bd8e <TIM_Base_SetConfig+0xaa>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a2e      	ldr	r2, [pc, #184]	; (800be14 <TIM_Base_SetConfig+0x130>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d017      	beq.n	800bd8e <TIM_Base_SetConfig+0xaa>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a2d      	ldr	r2, [pc, #180]	; (800be18 <TIM_Base_SetConfig+0x134>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d013      	beq.n	800bd8e <TIM_Base_SetConfig+0xaa>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a2c      	ldr	r2, [pc, #176]	; (800be1c <TIM_Base_SetConfig+0x138>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d00f      	beq.n	800bd8e <TIM_Base_SetConfig+0xaa>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a2b      	ldr	r2, [pc, #172]	; (800be20 <TIM_Base_SetConfig+0x13c>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d00b      	beq.n	800bd8e <TIM_Base_SetConfig+0xaa>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a2a      	ldr	r2, [pc, #168]	; (800be24 <TIM_Base_SetConfig+0x140>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d007      	beq.n	800bd8e <TIM_Base_SetConfig+0xaa>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a29      	ldr	r2, [pc, #164]	; (800be28 <TIM_Base_SetConfig+0x144>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d003      	beq.n	800bd8e <TIM_Base_SetConfig+0xaa>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a28      	ldr	r2, [pc, #160]	; (800be2c <TIM_Base_SetConfig+0x148>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d108      	bne.n	800bda0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	689a      	ldr	r2, [r3, #8]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a10      	ldr	r2, [pc, #64]	; (800be08 <TIM_Base_SetConfig+0x124>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d00f      	beq.n	800bdec <TIM_Base_SetConfig+0x108>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a12      	ldr	r2, [pc, #72]	; (800be18 <TIM_Base_SetConfig+0x134>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d00b      	beq.n	800bdec <TIM_Base_SetConfig+0x108>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a11      	ldr	r2, [pc, #68]	; (800be1c <TIM_Base_SetConfig+0x138>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d007      	beq.n	800bdec <TIM_Base_SetConfig+0x108>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a10      	ldr	r2, [pc, #64]	; (800be20 <TIM_Base_SetConfig+0x13c>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d003      	beq.n	800bdec <TIM_Base_SetConfig+0x108>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a0f      	ldr	r2, [pc, #60]	; (800be24 <TIM_Base_SetConfig+0x140>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d103      	bne.n	800bdf4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	691a      	ldr	r2, [r3, #16]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	615a      	str	r2, [r3, #20]
}
 800bdfa:	bf00      	nop
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	40010000 	.word	0x40010000
 800be0c:	40000400 	.word	0x40000400
 800be10:	40000800 	.word	0x40000800
 800be14:	40000c00 	.word	0x40000c00
 800be18:	40010400 	.word	0x40010400
 800be1c:	40014000 	.word	0x40014000
 800be20:	40014400 	.word	0x40014400
 800be24:	40014800 	.word	0x40014800
 800be28:	4000e000 	.word	0x4000e000
 800be2c:	4000e400 	.word	0x4000e400

0800be30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	f023 0201 	bic.w	r2, r3, #1
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	699b      	ldr	r3, [r3, #24]
 800be56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	4b37      	ldr	r3, [pc, #220]	; (800bf38 <TIM_OC1_SetConfig+0x108>)
 800be5c:	4013      	ands	r3, r2
 800be5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f023 0303 	bic.w	r3, r3, #3
 800be66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	4313      	orrs	r3, r2
 800be70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f023 0302 	bic.w	r3, r3, #2
 800be78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	4313      	orrs	r3, r2
 800be82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a2d      	ldr	r2, [pc, #180]	; (800bf3c <TIM_OC1_SetConfig+0x10c>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d00f      	beq.n	800beac <TIM_OC1_SetConfig+0x7c>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a2c      	ldr	r2, [pc, #176]	; (800bf40 <TIM_OC1_SetConfig+0x110>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d00b      	beq.n	800beac <TIM_OC1_SetConfig+0x7c>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4a2b      	ldr	r2, [pc, #172]	; (800bf44 <TIM_OC1_SetConfig+0x114>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d007      	beq.n	800beac <TIM_OC1_SetConfig+0x7c>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a2a      	ldr	r2, [pc, #168]	; (800bf48 <TIM_OC1_SetConfig+0x118>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d003      	beq.n	800beac <TIM_OC1_SetConfig+0x7c>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a29      	ldr	r2, [pc, #164]	; (800bf4c <TIM_OC1_SetConfig+0x11c>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d10c      	bne.n	800bec6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	f023 0308 	bic.w	r3, r3, #8
 800beb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	4313      	orrs	r3, r2
 800bebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	f023 0304 	bic.w	r3, r3, #4
 800bec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a1c      	ldr	r2, [pc, #112]	; (800bf3c <TIM_OC1_SetConfig+0x10c>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d00f      	beq.n	800beee <TIM_OC1_SetConfig+0xbe>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a1b      	ldr	r2, [pc, #108]	; (800bf40 <TIM_OC1_SetConfig+0x110>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d00b      	beq.n	800beee <TIM_OC1_SetConfig+0xbe>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a1a      	ldr	r2, [pc, #104]	; (800bf44 <TIM_OC1_SetConfig+0x114>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d007      	beq.n	800beee <TIM_OC1_SetConfig+0xbe>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a19      	ldr	r2, [pc, #100]	; (800bf48 <TIM_OC1_SetConfig+0x118>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d003      	beq.n	800beee <TIM_OC1_SetConfig+0xbe>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a18      	ldr	r2, [pc, #96]	; (800bf4c <TIM_OC1_SetConfig+0x11c>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d111      	bne.n	800bf12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800befc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	693a      	ldr	r2, [r7, #16]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	697a      	ldr	r2, [r7, #20]
 800bf2a:	621a      	str	r2, [r3, #32]
}
 800bf2c:	bf00      	nop
 800bf2e:	371c      	adds	r7, #28
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	fffeff8f 	.word	0xfffeff8f
 800bf3c:	40010000 	.word	0x40010000
 800bf40:	40010400 	.word	0x40010400
 800bf44:	40014000 	.word	0x40014000
 800bf48:	40014400 	.word	0x40014400
 800bf4c:	40014800 	.word	0x40014800

0800bf50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b087      	sub	sp, #28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	f023 0210 	bic.w	r2, r3, #16
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	699b      	ldr	r3, [r3, #24]
 800bf76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	4b34      	ldr	r3, [pc, #208]	; (800c04c <TIM_OC2_SetConfig+0xfc>)
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	021b      	lsls	r3, r3, #8
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	f023 0320 	bic.w	r3, r3, #32
 800bf9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	011b      	lsls	r3, r3, #4
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4a29      	ldr	r2, [pc, #164]	; (800c050 <TIM_OC2_SetConfig+0x100>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d003      	beq.n	800bfb8 <TIM_OC2_SetConfig+0x68>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a28      	ldr	r2, [pc, #160]	; (800c054 <TIM_OC2_SetConfig+0x104>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d10d      	bne.n	800bfd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	011b      	lsls	r3, r3, #4
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a1e      	ldr	r2, [pc, #120]	; (800c050 <TIM_OC2_SetConfig+0x100>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d00f      	beq.n	800bffc <TIM_OC2_SetConfig+0xac>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a1d      	ldr	r2, [pc, #116]	; (800c054 <TIM_OC2_SetConfig+0x104>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d00b      	beq.n	800bffc <TIM_OC2_SetConfig+0xac>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a1c      	ldr	r2, [pc, #112]	; (800c058 <TIM_OC2_SetConfig+0x108>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d007      	beq.n	800bffc <TIM_OC2_SetConfig+0xac>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a1b      	ldr	r2, [pc, #108]	; (800c05c <TIM_OC2_SetConfig+0x10c>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d003      	beq.n	800bffc <TIM_OC2_SetConfig+0xac>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a1a      	ldr	r2, [pc, #104]	; (800c060 <TIM_OC2_SetConfig+0x110>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d113      	bne.n	800c024 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c00a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	693a      	ldr	r2, [r7, #16]
 800c014:	4313      	orrs	r3, r2
 800c016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	693a      	ldr	r2, [r7, #16]
 800c020:	4313      	orrs	r3, r2
 800c022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	693a      	ldr	r2, [r7, #16]
 800c028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	685a      	ldr	r2, [r3, #4]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	697a      	ldr	r2, [r7, #20]
 800c03c:	621a      	str	r2, [r3, #32]
}
 800c03e:	bf00      	nop
 800c040:	371c      	adds	r7, #28
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	feff8fff 	.word	0xfeff8fff
 800c050:	40010000 	.word	0x40010000
 800c054:	40010400 	.word	0x40010400
 800c058:	40014000 	.word	0x40014000
 800c05c:	40014400 	.word	0x40014400
 800c060:	40014800 	.word	0x40014800

0800c064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c064:	b480      	push	{r7}
 800c066:	b087      	sub	sp, #28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a1b      	ldr	r3, [r3, #32]
 800c072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	69db      	ldr	r3, [r3, #28]
 800c08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	4b33      	ldr	r3, [pc, #204]	; (800c15c <TIM_OC3_SetConfig+0xf8>)
 800c090:	4013      	ands	r3, r2
 800c092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f023 0303 	bic.w	r3, r3, #3
 800c09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c0ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	021b      	lsls	r3, r3, #8
 800c0b4:	697a      	ldr	r2, [r7, #20]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a28      	ldr	r2, [pc, #160]	; (800c160 <TIM_OC3_SetConfig+0xfc>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d003      	beq.n	800c0ca <TIM_OC3_SetConfig+0x66>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a27      	ldr	r2, [pc, #156]	; (800c164 <TIM_OC3_SetConfig+0x100>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d10d      	bne.n	800c0e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	021b      	lsls	r3, r3, #8
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a1d      	ldr	r2, [pc, #116]	; (800c160 <TIM_OC3_SetConfig+0xfc>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d00f      	beq.n	800c10e <TIM_OC3_SetConfig+0xaa>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a1c      	ldr	r2, [pc, #112]	; (800c164 <TIM_OC3_SetConfig+0x100>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d00b      	beq.n	800c10e <TIM_OC3_SetConfig+0xaa>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a1b      	ldr	r2, [pc, #108]	; (800c168 <TIM_OC3_SetConfig+0x104>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d007      	beq.n	800c10e <TIM_OC3_SetConfig+0xaa>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a1a      	ldr	r2, [pc, #104]	; (800c16c <TIM_OC3_SetConfig+0x108>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d003      	beq.n	800c10e <TIM_OC3_SetConfig+0xaa>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a19      	ldr	r2, [pc, #100]	; (800c170 <TIM_OC3_SetConfig+0x10c>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d113      	bne.n	800c136 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c11c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	695b      	ldr	r3, [r3, #20]
 800c122:	011b      	lsls	r3, r3, #4
 800c124:	693a      	ldr	r2, [r7, #16]
 800c126:	4313      	orrs	r3, r2
 800c128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	011b      	lsls	r3, r3, #4
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	4313      	orrs	r3, r2
 800c134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	621a      	str	r2, [r3, #32]
}
 800c150:	bf00      	nop
 800c152:	371c      	adds	r7, #28
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	fffeff8f 	.word	0xfffeff8f
 800c160:	40010000 	.word	0x40010000
 800c164:	40010400 	.word	0x40010400
 800c168:	40014000 	.word	0x40014000
 800c16c:	40014400 	.word	0x40014400
 800c170:	40014800 	.word	0x40014800

0800c174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c174:	b480      	push	{r7}
 800c176:	b087      	sub	sp, #28
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a1b      	ldr	r3, [r3, #32]
 800c182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	69db      	ldr	r3, [r3, #28]
 800c19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	4b24      	ldr	r3, [pc, #144]	; (800c230 <TIM_OC4_SetConfig+0xbc>)
 800c1a0:	4013      	ands	r3, r2
 800c1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	021b      	lsls	r3, r3, #8
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	031b      	lsls	r3, r3, #12
 800c1c6:	693a      	ldr	r2, [r7, #16]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a19      	ldr	r2, [pc, #100]	; (800c234 <TIM_OC4_SetConfig+0xc0>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d00f      	beq.n	800c1f4 <TIM_OC4_SetConfig+0x80>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a18      	ldr	r2, [pc, #96]	; (800c238 <TIM_OC4_SetConfig+0xc4>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d00b      	beq.n	800c1f4 <TIM_OC4_SetConfig+0x80>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a17      	ldr	r2, [pc, #92]	; (800c23c <TIM_OC4_SetConfig+0xc8>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d007      	beq.n	800c1f4 <TIM_OC4_SetConfig+0x80>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a16      	ldr	r2, [pc, #88]	; (800c240 <TIM_OC4_SetConfig+0xcc>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d003      	beq.n	800c1f4 <TIM_OC4_SetConfig+0x80>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a15      	ldr	r2, [pc, #84]	; (800c244 <TIM_OC4_SetConfig+0xd0>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d109      	bne.n	800c208 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	695b      	ldr	r3, [r3, #20]
 800c200:	019b      	lsls	r3, r3, #6
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	4313      	orrs	r3, r2
 800c206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	685a      	ldr	r2, [r3, #4]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	621a      	str	r2, [r3, #32]
}
 800c222:	bf00      	nop
 800c224:	371c      	adds	r7, #28
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	feff8fff 	.word	0xfeff8fff
 800c234:	40010000 	.word	0x40010000
 800c238:	40010400 	.word	0x40010400
 800c23c:	40014000 	.word	0x40014000
 800c240:	40014400 	.word	0x40014400
 800c244:	40014800 	.word	0x40014800

0800c248 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c248:	b480      	push	{r7}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	4b21      	ldr	r3, [pc, #132]	; (800c2f8 <TIM_OC5_SetConfig+0xb0>)
 800c274:	4013      	ands	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	4313      	orrs	r3, r2
 800c280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c288:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	041b      	lsls	r3, r3, #16
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	4313      	orrs	r3, r2
 800c294:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a18      	ldr	r2, [pc, #96]	; (800c2fc <TIM_OC5_SetConfig+0xb4>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d00f      	beq.n	800c2be <TIM_OC5_SetConfig+0x76>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a17      	ldr	r2, [pc, #92]	; (800c300 <TIM_OC5_SetConfig+0xb8>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d00b      	beq.n	800c2be <TIM_OC5_SetConfig+0x76>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a16      	ldr	r2, [pc, #88]	; (800c304 <TIM_OC5_SetConfig+0xbc>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d007      	beq.n	800c2be <TIM_OC5_SetConfig+0x76>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a15      	ldr	r2, [pc, #84]	; (800c308 <TIM_OC5_SetConfig+0xc0>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d003      	beq.n	800c2be <TIM_OC5_SetConfig+0x76>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a14      	ldr	r2, [pc, #80]	; (800c30c <TIM_OC5_SetConfig+0xc4>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d109      	bne.n	800c2d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	021b      	lsls	r3, r3, #8
 800c2cc:	697a      	ldr	r2, [r7, #20]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	697a      	ldr	r2, [r7, #20]
 800c2d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	621a      	str	r2, [r3, #32]
}
 800c2ec:	bf00      	nop
 800c2ee:	371c      	adds	r7, #28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	fffeff8f 	.word	0xfffeff8f
 800c2fc:	40010000 	.word	0x40010000
 800c300:	40010400 	.word	0x40010400
 800c304:	40014000 	.word	0x40014000
 800c308:	40014400 	.word	0x40014400
 800c30c:	40014800 	.word	0x40014800

0800c310 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c310:	b480      	push	{r7}
 800c312:	b087      	sub	sp, #28
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a1b      	ldr	r3, [r3, #32]
 800c31e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a1b      	ldr	r3, [r3, #32]
 800c32a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	4b22      	ldr	r3, [pc, #136]	; (800c3c4 <TIM_OC6_SetConfig+0xb4>)
 800c33c:	4013      	ands	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	021b      	lsls	r3, r3, #8
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4313      	orrs	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	051b      	lsls	r3, r3, #20
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a19      	ldr	r2, [pc, #100]	; (800c3c8 <TIM_OC6_SetConfig+0xb8>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d00f      	beq.n	800c388 <TIM_OC6_SetConfig+0x78>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a18      	ldr	r2, [pc, #96]	; (800c3cc <TIM_OC6_SetConfig+0xbc>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d00b      	beq.n	800c388 <TIM_OC6_SetConfig+0x78>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a17      	ldr	r2, [pc, #92]	; (800c3d0 <TIM_OC6_SetConfig+0xc0>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d007      	beq.n	800c388 <TIM_OC6_SetConfig+0x78>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a16      	ldr	r2, [pc, #88]	; (800c3d4 <TIM_OC6_SetConfig+0xc4>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d003      	beq.n	800c388 <TIM_OC6_SetConfig+0x78>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a15      	ldr	r2, [pc, #84]	; (800c3d8 <TIM_OC6_SetConfig+0xc8>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d109      	bne.n	800c39c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c38e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	029b      	lsls	r3, r3, #10
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	4313      	orrs	r3, r2
 800c39a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	621a      	str	r2, [r3, #32]
}
 800c3b6:	bf00      	nop
 800c3b8:	371c      	adds	r7, #28
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	feff8fff 	.word	0xfeff8fff
 800c3c8:	40010000 	.word	0x40010000
 800c3cc:	40010400 	.word	0x40010400
 800c3d0:	40014000 	.word	0x40014000
 800c3d4:	40014400 	.word	0x40014400
 800c3d8:	40014800 	.word	0x40014800

0800c3dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b087      	sub	sp, #28
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6a1b      	ldr	r3, [r3, #32]
 800c3ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	f023 0201 	bic.w	r2, r3, #1
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	011b      	lsls	r3, r3, #4
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	4313      	orrs	r3, r2
 800c410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f023 030a 	bic.w	r3, r3, #10
 800c418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c41a:	697a      	ldr	r2, [r7, #20]
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	4313      	orrs	r3, r2
 800c420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	693a      	ldr	r2, [r7, #16]
 800c426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	697a      	ldr	r2, [r7, #20]
 800c42c:	621a      	str	r2, [r3, #32]
}
 800c42e:	bf00      	nop
 800c430:	371c      	adds	r7, #28
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b087      	sub	sp, #28
 800c43e:	af00      	add	r7, sp, #0
 800c440:	60f8      	str	r0, [r7, #12]
 800c442:	60b9      	str	r1, [r7, #8]
 800c444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	f023 0210 	bic.w	r2, r3, #16
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6a1b      	ldr	r3, [r3, #32]
 800c45c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	031b      	lsls	r3, r3, #12
 800c46a:	697a      	ldr	r2, [r7, #20]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c476:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	011b      	lsls	r3, r3, #4
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	4313      	orrs	r3, r2
 800c480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	621a      	str	r2, [r3, #32]
}
 800c48e:	bf00      	nop
 800c490:	371c      	adds	r7, #28
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
	...

0800c49c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	4b09      	ldr	r3, [pc, #36]	; (800c4d4 <TIM_ITRx_SetConfig+0x38>)
 800c4b0:	4013      	ands	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	f043 0307 	orr.w	r3, r3, #7
 800c4be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	609a      	str	r2, [r3, #8]
}
 800c4c6:	bf00      	nop
 800c4c8:	3714      	adds	r7, #20
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	ffcfff8f 	.word	0xffcfff8f

0800c4d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b087      	sub	sp, #28
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	021a      	lsls	r2, r3, #8
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	431a      	orrs	r2, r3
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	4313      	orrs	r3, r2
 800c504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	697a      	ldr	r2, [r7, #20]
 800c50a:	609a      	str	r2, [r3, #8]
}
 800c50c:	bf00      	nop
 800c50e:	371c      	adds	r7, #28
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c518:	b480      	push	{r7}
 800c51a:	b087      	sub	sp, #28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	f003 031f 	and.w	r3, r3, #31
 800c52a:	2201      	movs	r2, #1
 800c52c:	fa02 f303 	lsl.w	r3, r2, r3
 800c530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6a1a      	ldr	r2, [r3, #32]
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	43db      	mvns	r3, r3
 800c53a:	401a      	ands	r2, r3
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6a1a      	ldr	r2, [r3, #32]
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	f003 031f 	and.w	r3, r3, #31
 800c54a:	6879      	ldr	r1, [r7, #4]
 800c54c:	fa01 f303 	lsl.w	r3, r1, r3
 800c550:	431a      	orrs	r2, r3
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	621a      	str	r2, [r3, #32]
}
 800c556:	bf00      	nop
 800c558:	371c      	adds	r7, #28
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
	...

0800c564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c574:	2b01      	cmp	r3, #1
 800c576:	d101      	bne.n	800c57c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c578:	2302      	movs	r3, #2
 800c57a:	e077      	b.n	800c66c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2202      	movs	r2, #2
 800c588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a35      	ldr	r2, [pc, #212]	; (800c678 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d004      	beq.n	800c5b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a34      	ldr	r2, [pc, #208]	; (800c67c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d108      	bne.n	800c5c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c5b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a25      	ldr	r2, [pc, #148]	; (800c678 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d02c      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5ee:	d027      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a22      	ldr	r2, [pc, #136]	; (800c680 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d022      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a21      	ldr	r2, [pc, #132]	; (800c684 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d01d      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a1f      	ldr	r2, [pc, #124]	; (800c688 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d018      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a1a      	ldr	r2, [pc, #104]	; (800c67c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d013      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a1b      	ldr	r2, [pc, #108]	; (800c68c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d00e      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a1a      	ldr	r2, [pc, #104]	; (800c690 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d009      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a18      	ldr	r2, [pc, #96]	; (800c694 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d004      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a17      	ldr	r2, [pc, #92]	; (800c698 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d10c      	bne.n	800c65a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c646:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	4313      	orrs	r3, r2
 800c650:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2201      	movs	r2, #1
 800c65e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	40010000 	.word	0x40010000
 800c67c:	40010400 	.word	0x40010400
 800c680:	40000400 	.word	0x40000400
 800c684:	40000800 	.word	0x40000800
 800c688:	40000c00 	.word	0x40000c00
 800c68c:	40001800 	.word	0x40001800
 800c690:	40014000 	.word	0x40014000
 800c694:	4000e000 	.word	0x4000e000
 800c698:	4000e400 	.word	0x4000e400

0800c69c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d101      	bne.n	800c6b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	e087      	b.n	800c7c8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	4313      	orrs	r3, r2
 800c704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	695b      	ldr	r3, [r3, #20]
 800c710:	4313      	orrs	r3, r2
 800c712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71e:	4313      	orrs	r3, r2
 800c720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	699b      	ldr	r3, [r3, #24]
 800c72c:	041b      	lsls	r3, r3, #16
 800c72e:	4313      	orrs	r3, r2
 800c730:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a27      	ldr	r2, [pc, #156]	; (800c7d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d004      	beq.n	800c746 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a25      	ldr	r2, [pc, #148]	; (800c7d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d106      	bne.n	800c754 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	69db      	ldr	r3, [r3, #28]
 800c750:	4313      	orrs	r3, r2
 800c752:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a1e      	ldr	r2, [pc, #120]	; (800c7d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d004      	beq.n	800c768 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a1d      	ldr	r2, [pc, #116]	; (800c7d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d126      	bne.n	800c7b6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c772:	051b      	lsls	r3, r3, #20
 800c774:	4313      	orrs	r3, r2
 800c776:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	4313      	orrs	r3, r2
 800c784:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c790:	4313      	orrs	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a0e      	ldr	r2, [pc, #56]	; (800c7d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d004      	beq.n	800c7a8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a0d      	ldr	r2, [pc, #52]	; (800c7d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d106      	bne.n	800c7b6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	40010000 	.word	0x40010000
 800c7d8:	40010400 	.word	0x40010400

0800c7dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	e042      	b.n	800c8b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c830:	2b00      	cmp	r3, #0
 800c832:	d106      	bne.n	800c842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7f7 ffb1 	bl	80047a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2224      	movs	r2, #36	; 0x24
 800c846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f022 0201 	bic.w	r2, r2, #1
 800c858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fd0e 	bl	800d27c <UART_SetConfig>
 800c860:	4603      	mov	r3, r0
 800c862:	2b01      	cmp	r3, #1
 800c864:	d101      	bne.n	800c86a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	e022      	b.n	800c8b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d002      	beq.n	800c878 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f001 fb6e 	bl	800df54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	685a      	ldr	r2, [r3, #4]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689a      	ldr	r2, [r3, #8]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f042 0201 	orr.w	r2, r2, #1
 800c8a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f001 fbf5 	bl	800e098 <UART_CheckIdleState>
 800c8ae:	4603      	mov	r3, r0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d101      	bne.n	800c8ca <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e02e      	b.n	800c928 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2224      	movs	r2, #36	; 0x24
 800c8ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f022 0201 	bic.w	r2, r2, #1
 800c8e0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7f8 f83a 	bl	8004974 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08a      	sub	sp, #40	; 0x28
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	4613      	mov	r3, r2
 800c93c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c944:	2b20      	cmp	r3, #32
 800c946:	d17a      	bne.n	800ca3e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d002      	beq.n	800c954 <HAL_UART_Transmit_DMA+0x24>
 800c94e:	88fb      	ldrh	r3, [r7, #6]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d101      	bne.n	800c958 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c954:	2301      	movs	r3, #1
 800c956:	e073      	b.n	800ca40 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d101      	bne.n	800c966 <HAL_UART_Transmit_DMA+0x36>
 800c962:	2302      	movs	r3, #2
 800c964:	e06c      	b.n	800ca40 <HAL_UART_Transmit_DMA+0x110>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2201      	movs	r2, #1
 800c96a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	88fa      	ldrh	r2, [r7, #6]
 800c978:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	88fa      	ldrh	r2, [r7, #6]
 800c980:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2200      	movs	r2, #0
 800c988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2221      	movs	r2, #33	; 0x21
 800c990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d02c      	beq.n	800c9f6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9a0:	4a29      	ldr	r2, [pc, #164]	; (800ca48 <HAL_UART_Transmit_DMA+0x118>)
 800c9a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9a8:	4a28      	ldr	r2, [pc, #160]	; (800ca4c <HAL_UART_Transmit_DMA+0x11c>)
 800c9aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9b0:	4a27      	ldr	r2, [pc, #156]	; (800ca50 <HAL_UART_Transmit_DMA+0x120>)
 800c9b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	3328      	adds	r3, #40	; 0x28
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	88fb      	ldrh	r3, [r7, #6]
 800c9d0:	f7f9 fa56 	bl	8005e80 <HAL_DMA_Start_IT>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00d      	beq.n	800c9f6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2210      	movs	r2, #16
 800c9de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2220      	movs	r2, #32
 800c9ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e024      	b.n	800ca40 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2240      	movs	r2, #64	; 0x40
 800c9fc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2200      	movs	r2, #0
 800ca02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3308      	adds	r3, #8
 800ca0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	e853 3f00 	ldrex	r3, [r3]
 800ca14:	613b      	str	r3, [r7, #16]
   return(result);
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	3308      	adds	r3, #8
 800ca24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca26:	623a      	str	r2, [r7, #32]
 800ca28:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2a:	69f9      	ldr	r1, [r7, #28]
 800ca2c:	6a3a      	ldr	r2, [r7, #32]
 800ca2e:	e841 2300 	strex	r3, r2, [r1]
 800ca32:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1e5      	bne.n	800ca06 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	e000      	b.n	800ca40 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ca3e:	2302      	movs	r3, #2
  }
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3728      	adds	r7, #40	; 0x28
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	0800e561 	.word	0x0800e561
 800ca4c:	0800e5f7 	.word	0x0800e5f7
 800ca50:	0800e76d 	.word	0x0800e76d

0800ca54 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08a      	sub	sp, #40	; 0x28
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca68:	2b20      	cmp	r3, #32
 800ca6a:	d142      	bne.n	800caf2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d002      	beq.n	800ca78 <HAL_UART_Receive_DMA+0x24>
 800ca72:	88fb      	ldrh	r3, [r7, #6]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e03b      	b.n	800caf4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d101      	bne.n	800ca8a <HAL_UART_Receive_DMA+0x36>
 800ca86:	2302      	movs	r3, #2
 800ca88:	e034      	b.n	800caf4 <HAL_UART_Receive_DMA+0xa0>
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a17      	ldr	r2, [pc, #92]	; (800cafc <HAL_UART_Receive_DMA+0xa8>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d01f      	beq.n	800cae2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800caac:	2b00      	cmp	r3, #0
 800caae:	d018      	beq.n	800cae2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	e853 3f00 	ldrex	r3, [r3]
 800cabc:	613b      	str	r3, [r7, #16]
   return(result);
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cac4:	627b      	str	r3, [r7, #36]	; 0x24
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	623b      	str	r3, [r7, #32]
 800cad0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad2:	69f9      	ldr	r1, [r7, #28]
 800cad4:	6a3a      	ldr	r2, [r7, #32]
 800cad6:	e841 2300 	strex	r3, r2, [r1]
 800cada:	61bb      	str	r3, [r7, #24]
   return(result);
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1e6      	bne.n	800cab0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cae2:	88fb      	ldrh	r3, [r7, #6]
 800cae4:	461a      	mov	r2, r3
 800cae6:	68b9      	ldr	r1, [r7, #8]
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f001 fbe9 	bl	800e2c0 <UART_Start_Receive_DMA>
 800caee:	4603      	mov	r3, r0
 800caf0:	e000      	b.n	800caf4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800caf2:	2302      	movs	r3, #2
  }
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3728      	adds	r7, #40	; 0x28
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	58000c00 	.word	0x58000c00

0800cb00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b0ba      	sub	sp, #232	; 0xe8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	69db      	ldr	r3, [r3, #28]
 800cb0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cb2a:	f640 030f 	movw	r3, #2063	; 0x80f
 800cb2e:	4013      	ands	r3, r2
 800cb30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cb34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d11b      	bne.n	800cb74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb40:	f003 0320 	and.w	r3, r3, #32
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d015      	beq.n	800cb74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb4c:	f003 0320 	and.w	r3, r3, #32
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d105      	bne.n	800cb60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d009      	beq.n	800cb74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f000 835a 	beq.w	800d21e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	4798      	blx	r3
      }
      return;
 800cb72:	e354      	b.n	800d21e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cb74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 811f 	beq.w	800cdbc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cb82:	4b8b      	ldr	r3, [pc, #556]	; (800cdb0 <HAL_UART_IRQHandler+0x2b0>)
 800cb84:	4013      	ands	r3, r2
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d106      	bne.n	800cb98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cb8e:	4b89      	ldr	r3, [pc, #548]	; (800cdb4 <HAL_UART_IRQHandler+0x2b4>)
 800cb90:	4013      	ands	r3, r2
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f000 8112 	beq.w	800cdbc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb9c:	f003 0301 	and.w	r3, r3, #1
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d011      	beq.n	800cbc8 <HAL_UART_IRQHandler+0xc8>
 800cba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00b      	beq.n	800cbc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbbe:	f043 0201 	orr.w	r2, r3, #1
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbcc:	f003 0302 	and.w	r3, r3, #2
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d011      	beq.n	800cbf8 <HAL_UART_IRQHandler+0xf8>
 800cbd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbd8:	f003 0301 	and.w	r3, r3, #1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00b      	beq.n	800cbf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbee:	f043 0204 	orr.w	r2, r3, #4
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbfc:	f003 0304 	and.w	r3, r3, #4
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d011      	beq.n	800cc28 <HAL_UART_IRQHandler+0x128>
 800cc04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc08:	f003 0301 	and.w	r3, r3, #1
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00b      	beq.n	800cc28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2204      	movs	r2, #4
 800cc16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc1e:	f043 0202 	orr.w	r2, r3, #2
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc2c:	f003 0308 	and.w	r3, r3, #8
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d017      	beq.n	800cc64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc38:	f003 0320 	and.w	r3, r3, #32
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d105      	bne.n	800cc4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cc40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cc44:	4b5a      	ldr	r3, [pc, #360]	; (800cdb0 <HAL_UART_IRQHandler+0x2b0>)
 800cc46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00b      	beq.n	800cc64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2208      	movs	r2, #8
 800cc52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc5a:	f043 0208 	orr.w	r2, r3, #8
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cc64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d012      	beq.n	800cc96 <HAL_UART_IRQHandler+0x196>
 800cc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00c      	beq.n	800cc96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc8c:	f043 0220 	orr.w	r2, r3, #32
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 82c0 	beq.w	800d222 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cca6:	f003 0320 	and.w	r3, r3, #32
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d013      	beq.n	800ccd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ccae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ccb2:	f003 0320 	and.w	r3, r3, #32
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d105      	bne.n	800ccc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ccba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d007      	beq.n	800ccd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d003      	beq.n	800ccd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccea:	2b40      	cmp	r3, #64	; 0x40
 800ccec:	d005      	beq.n	800ccfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ccee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d04f      	beq.n	800cd9a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f001 fbca 	bl	800e494 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd0a:	2b40      	cmp	r3, #64	; 0x40
 800cd0c:	d141      	bne.n	800cd92 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3308      	adds	r3, #8
 800cd14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd1c:	e853 3f00 	ldrex	r3, [r3]
 800cd20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cd24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	3308      	adds	r3, #8
 800cd36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cd3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cd3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cd46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cd4a:	e841 2300 	strex	r3, r2, [r1]
 800cd4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cd52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1d9      	bne.n	800cd0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d013      	beq.n	800cd8a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd66:	4a14      	ldr	r2, [pc, #80]	; (800cdb8 <HAL_UART_IRQHandler+0x2b8>)
 800cd68:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7f9 fe0e 	bl	8006990 <HAL_DMA_Abort_IT>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d017      	beq.n	800cdaa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cd84:	4610      	mov	r0, r2
 800cd86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd88:	e00f      	b.n	800cdaa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7f6 fa2c 	bl	80031e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd90:	e00b      	b.n	800cdaa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7f6 fa28 	bl	80031e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd98:	e007      	b.n	800cdaa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7f6 fa24 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cda8:	e23b      	b.n	800d222 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdaa:	bf00      	nop
    return;
 800cdac:	e239      	b.n	800d222 <HAL_UART_IRQHandler+0x722>
 800cdae:	bf00      	nop
 800cdb0:	10000001 	.word	0x10000001
 800cdb4:	04000120 	.word	0x04000120
 800cdb8:	0800e7ed 	.word	0x0800e7ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	f040 81ce 	bne.w	800d162 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cdc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdca:	f003 0310 	and.w	r3, r3, #16
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 81c7 	beq.w	800d162 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cdd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdd8:	f003 0310 	and.w	r3, r3, #16
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f000 81c0 	beq.w	800d162 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2210      	movs	r2, #16
 800cde8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	689b      	ldr	r3, [r3, #8]
 800cdf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdf4:	2b40      	cmp	r3, #64	; 0x40
 800cdf6:	f040 813b 	bne.w	800d070 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a8b      	ldr	r2, [pc, #556]	; (800d030 <HAL_UART_IRQHandler+0x530>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d059      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a89      	ldr	r2, [pc, #548]	; (800d034 <HAL_UART_IRQHandler+0x534>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d053      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a87      	ldr	r2, [pc, #540]	; (800d038 <HAL_UART_IRQHandler+0x538>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d04d      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a85      	ldr	r2, [pc, #532]	; (800d03c <HAL_UART_IRQHandler+0x53c>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d047      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a83      	ldr	r2, [pc, #524]	; (800d040 <HAL_UART_IRQHandler+0x540>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d041      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a81      	ldr	r2, [pc, #516]	; (800d044 <HAL_UART_IRQHandler+0x544>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d03b      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a7f      	ldr	r2, [pc, #508]	; (800d048 <HAL_UART_IRQHandler+0x548>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d035      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a7d      	ldr	r2, [pc, #500]	; (800d04c <HAL_UART_IRQHandler+0x54c>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d02f      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a7b      	ldr	r2, [pc, #492]	; (800d050 <HAL_UART_IRQHandler+0x550>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d029      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a79      	ldr	r2, [pc, #484]	; (800d054 <HAL_UART_IRQHandler+0x554>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d023      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a77      	ldr	r2, [pc, #476]	; (800d058 <HAL_UART_IRQHandler+0x558>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d01d      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a75      	ldr	r2, [pc, #468]	; (800d05c <HAL_UART_IRQHandler+0x55c>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d017      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a73      	ldr	r2, [pc, #460]	; (800d060 <HAL_UART_IRQHandler+0x560>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d011      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a71      	ldr	r2, [pc, #452]	; (800d064 <HAL_UART_IRQHandler+0x564>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d00b      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a6f      	ldr	r2, [pc, #444]	; (800d068 <HAL_UART_IRQHandler+0x568>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d005      	beq.n	800ceba <HAL_UART_IRQHandler+0x3ba>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a6d      	ldr	r2, [pc, #436]	; (800d06c <HAL_UART_IRQHandler+0x56c>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d105      	bne.n	800cec6 <HAL_UART_IRQHandler+0x3c6>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	e004      	b.n	800ced0 <HAL_UART_IRQHandler+0x3d0>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	b29b      	uxth	r3, r3
 800ced0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ced4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f000 81a4 	beq.w	800d226 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cee4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cee8:	429a      	cmp	r2, r3
 800ceea:	f080 819c 	bcs.w	800d226 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cefc:	69db      	ldr	r3, [r3, #28]
 800cefe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf02:	f000 8086 	beq.w	800d012 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf12:	e853 3f00 	ldrex	r3, [r3]
 800cf16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cf1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cf30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf34:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf38:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cf3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf40:	e841 2300 	strex	r3, r2, [r1]
 800cf44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cf48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1da      	bne.n	800cf06 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	3308      	adds	r3, #8
 800cf56:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf5a:	e853 3f00 	ldrex	r3, [r3]
 800cf5e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cf60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf62:	f023 0301 	bic.w	r3, r3, #1
 800cf66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	3308      	adds	r3, #8
 800cf70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cf74:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cf78:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cf80:	e841 2300 	strex	r3, r2, [r1]
 800cf84:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cf86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1e1      	bne.n	800cf50 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	3308      	adds	r3, #8
 800cf92:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf96:	e853 3f00 	ldrex	r3, [r3]
 800cf9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cf9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	3308      	adds	r3, #8
 800cfac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cfb0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cfb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cfb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cfb8:	e841 2300 	strex	r3, r2, [r1]
 800cfbc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cfbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1e3      	bne.n	800cf8c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2220      	movs	r2, #32
 800cfc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfda:	e853 3f00 	ldrex	r3, [r3]
 800cfde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cfe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfe2:	f023 0310 	bic.w	r3, r3, #16
 800cfe6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cff4:	65bb      	str	r3, [r7, #88]	; 0x58
 800cff6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cffa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cffc:	e841 2300 	strex	r3, r2, [r1]
 800d000:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1e4      	bne.n	800cfd2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7f9 f9a1 	bl	8006354 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d01e:	b29b      	uxth	r3, r3
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	b29b      	uxth	r3, r3
 800d024:	4619      	mov	r1, r3
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 f91c 	bl	800d264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d02c:	e0fb      	b.n	800d226 <HAL_UART_IRQHandler+0x726>
 800d02e:	bf00      	nop
 800d030:	40020010 	.word	0x40020010
 800d034:	40020028 	.word	0x40020028
 800d038:	40020040 	.word	0x40020040
 800d03c:	40020058 	.word	0x40020058
 800d040:	40020070 	.word	0x40020070
 800d044:	40020088 	.word	0x40020088
 800d048:	400200a0 	.word	0x400200a0
 800d04c:	400200b8 	.word	0x400200b8
 800d050:	40020410 	.word	0x40020410
 800d054:	40020428 	.word	0x40020428
 800d058:	40020440 	.word	0x40020440
 800d05c:	40020458 	.word	0x40020458
 800d060:	40020470 	.word	0x40020470
 800d064:	40020488 	.word	0x40020488
 800d068:	400204a0 	.word	0x400204a0
 800d06c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f000 80cc 	beq.w	800d22a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d092:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d096:	2b00      	cmp	r3, #0
 800d098:	f000 80c7 	beq.w	800d22a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a4:	e853 3f00 	ldrex	r3, [r3]
 800d0a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d0b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d0be:	647b      	str	r3, [r7, #68]	; 0x44
 800d0c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d0c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0c6:	e841 2300 	strex	r3, r2, [r1]
 800d0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1e4      	bne.n	800d09c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3308      	adds	r3, #8
 800d0d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0dc:	e853 3f00 	ldrex	r3, [r3]
 800d0e0:	623b      	str	r3, [r7, #32]
   return(result);
 800d0e2:	6a3a      	ldr	r2, [r7, #32]
 800d0e4:	4b54      	ldr	r3, [pc, #336]	; (800d238 <HAL_UART_IRQHandler+0x738>)
 800d0e6:	4013      	ands	r3, r2
 800d0e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d0f6:	633a      	str	r2, [r7, #48]	; 0x30
 800d0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0fe:	e841 2300 	strex	r3, r2, [r1]
 800d102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1e3      	bne.n	800d0d2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2220      	movs	r2, #32
 800d10e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	e853 3f00 	ldrex	r3, [r3]
 800d12a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f023 0310 	bic.w	r3, r3, #16
 800d132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	461a      	mov	r2, r3
 800d13c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d140:	61fb      	str	r3, [r7, #28]
 800d142:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d144:	69b9      	ldr	r1, [r7, #24]
 800d146:	69fa      	ldr	r2, [r7, #28]
 800d148:	e841 2300 	strex	r3, r2, [r1]
 800d14c:	617b      	str	r3, [r7, #20]
   return(result);
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d1e4      	bne.n	800d11e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d158:	4619      	mov	r1, r3
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f882 	bl	800d264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d160:	e063      	b.n	800d22a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00e      	beq.n	800d18c <HAL_UART_IRQHandler+0x68c>
 800d16e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d176:	2b00      	cmp	r3, #0
 800d178:	d008      	beq.n	800d18c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d182:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f001 fb72 	bl	800e86e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d18a:	e051      	b.n	800d230 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d194:	2b00      	cmp	r3, #0
 800d196:	d014      	beq.n	800d1c2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d19c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d105      	bne.n	800d1b0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d1a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d008      	beq.n	800d1c2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d03a      	beq.n	800d22e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	4798      	blx	r3
    }
    return;
 800d1c0:	e035      	b.n	800d22e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d009      	beq.n	800d1e2 <HAL_UART_IRQHandler+0x6e2>
 800d1ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d003      	beq.n	800d1e2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f001 fb1c 	bl	800e818 <UART_EndTransmit_IT>
    return;
 800d1e0:	e026      	b.n	800d230 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d009      	beq.n	800d202 <HAL_UART_IRQHandler+0x702>
 800d1ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d003      	beq.n	800d202 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f001 fb4b 	bl	800e896 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d200:	e016      	b.n	800d230 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d010      	beq.n	800d230 <HAL_UART_IRQHandler+0x730>
 800d20e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d212:	2b00      	cmp	r3, #0
 800d214:	da0c      	bge.n	800d230 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f001 fb33 	bl	800e882 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d21c:	e008      	b.n	800d230 <HAL_UART_IRQHandler+0x730>
      return;
 800d21e:	bf00      	nop
 800d220:	e006      	b.n	800d230 <HAL_UART_IRQHandler+0x730>
    return;
 800d222:	bf00      	nop
 800d224:	e004      	b.n	800d230 <HAL_UART_IRQHandler+0x730>
      return;
 800d226:	bf00      	nop
 800d228:	e002      	b.n	800d230 <HAL_UART_IRQHandler+0x730>
      return;
 800d22a:	bf00      	nop
 800d22c:	e000      	b.n	800d230 <HAL_UART_IRQHandler+0x730>
    return;
 800d22e:	bf00      	nop
  }
}
 800d230:	37e8      	adds	r7, #232	; 0xe8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	effffffe 	.word	0xeffffffe

0800d23c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d244:	bf00      	nop
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d258:	bf00      	nop
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	460b      	mov	r3, r1
 800d26e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d270:	bf00      	nop
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d27c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d280:	b092      	sub	sp, #72	; 0x48
 800d282:	af00      	add	r7, sp, #0
 800d284:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d286:	2300      	movs	r3, #0
 800d288:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	689a      	ldr	r2, [r3, #8]
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	691b      	ldr	r3, [r3, #16]
 800d294:	431a      	orrs	r2, r3
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	695b      	ldr	r3, [r3, #20]
 800d29a:	431a      	orrs	r2, r3
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	69db      	ldr	r3, [r3, #28]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	4bbe      	ldr	r3, [pc, #760]	; (800d5a4 <UART_SetConfig+0x328>)
 800d2ac:	4013      	ands	r3, r2
 800d2ae:	697a      	ldr	r2, [r7, #20]
 800d2b0:	6812      	ldr	r2, [r2, #0]
 800d2b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2b4:	430b      	orrs	r3, r1
 800d2b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4ab3      	ldr	r2, [pc, #716]	; (800d5a8 <UART_SetConfig+0x32c>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d004      	beq.n	800d2e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	6a1b      	ldr	r3, [r3, #32]
 800d2e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	689a      	ldr	r2, [r3, #8]
 800d2ee:	4baf      	ldr	r3, [pc, #700]	; (800d5ac <UART_SetConfig+0x330>)
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	697a      	ldr	r2, [r7, #20]
 800d2f4:	6812      	ldr	r2, [r2, #0]
 800d2f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2f8:	430b      	orrs	r3, r1
 800d2fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d302:	f023 010f 	bic.w	r1, r3, #15
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	430a      	orrs	r2, r1
 800d310:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4aa6      	ldr	r2, [pc, #664]	; (800d5b0 <UART_SetConfig+0x334>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d177      	bne.n	800d40c <UART_SetConfig+0x190>
 800d31c:	4ba5      	ldr	r3, [pc, #660]	; (800d5b4 <UART_SetConfig+0x338>)
 800d31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d324:	2b28      	cmp	r3, #40	; 0x28
 800d326:	d86d      	bhi.n	800d404 <UART_SetConfig+0x188>
 800d328:	a201      	add	r2, pc, #4	; (adr r2, 800d330 <UART_SetConfig+0xb4>)
 800d32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32e:	bf00      	nop
 800d330:	0800d3d5 	.word	0x0800d3d5
 800d334:	0800d405 	.word	0x0800d405
 800d338:	0800d405 	.word	0x0800d405
 800d33c:	0800d405 	.word	0x0800d405
 800d340:	0800d405 	.word	0x0800d405
 800d344:	0800d405 	.word	0x0800d405
 800d348:	0800d405 	.word	0x0800d405
 800d34c:	0800d405 	.word	0x0800d405
 800d350:	0800d3dd 	.word	0x0800d3dd
 800d354:	0800d405 	.word	0x0800d405
 800d358:	0800d405 	.word	0x0800d405
 800d35c:	0800d405 	.word	0x0800d405
 800d360:	0800d405 	.word	0x0800d405
 800d364:	0800d405 	.word	0x0800d405
 800d368:	0800d405 	.word	0x0800d405
 800d36c:	0800d405 	.word	0x0800d405
 800d370:	0800d3e5 	.word	0x0800d3e5
 800d374:	0800d405 	.word	0x0800d405
 800d378:	0800d405 	.word	0x0800d405
 800d37c:	0800d405 	.word	0x0800d405
 800d380:	0800d405 	.word	0x0800d405
 800d384:	0800d405 	.word	0x0800d405
 800d388:	0800d405 	.word	0x0800d405
 800d38c:	0800d405 	.word	0x0800d405
 800d390:	0800d3ed 	.word	0x0800d3ed
 800d394:	0800d405 	.word	0x0800d405
 800d398:	0800d405 	.word	0x0800d405
 800d39c:	0800d405 	.word	0x0800d405
 800d3a0:	0800d405 	.word	0x0800d405
 800d3a4:	0800d405 	.word	0x0800d405
 800d3a8:	0800d405 	.word	0x0800d405
 800d3ac:	0800d405 	.word	0x0800d405
 800d3b0:	0800d3f5 	.word	0x0800d3f5
 800d3b4:	0800d405 	.word	0x0800d405
 800d3b8:	0800d405 	.word	0x0800d405
 800d3bc:	0800d405 	.word	0x0800d405
 800d3c0:	0800d405 	.word	0x0800d405
 800d3c4:	0800d405 	.word	0x0800d405
 800d3c8:	0800d405 	.word	0x0800d405
 800d3cc:	0800d405 	.word	0x0800d405
 800d3d0:	0800d3fd 	.word	0x0800d3fd
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3da:	e326      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d3dc:	2304      	movs	r3, #4
 800d3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e2:	e322      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d3e4:	2308      	movs	r3, #8
 800d3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ea:	e31e      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d3ec:	2310      	movs	r3, #16
 800d3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f2:	e31a      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d3f4:	2320      	movs	r3, #32
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fa:	e316      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d3fc:	2340      	movs	r3, #64	; 0x40
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d402:	e312      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d404:	2380      	movs	r3, #128	; 0x80
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40a:	e30e      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a69      	ldr	r2, [pc, #420]	; (800d5b8 <UART_SetConfig+0x33c>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d130      	bne.n	800d478 <UART_SetConfig+0x1fc>
 800d416:	4b67      	ldr	r3, [pc, #412]	; (800d5b4 <UART_SetConfig+0x338>)
 800d418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d41a:	f003 0307 	and.w	r3, r3, #7
 800d41e:	2b05      	cmp	r3, #5
 800d420:	d826      	bhi.n	800d470 <UART_SetConfig+0x1f4>
 800d422:	a201      	add	r2, pc, #4	; (adr r2, 800d428 <UART_SetConfig+0x1ac>)
 800d424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d428:	0800d441 	.word	0x0800d441
 800d42c:	0800d449 	.word	0x0800d449
 800d430:	0800d451 	.word	0x0800d451
 800d434:	0800d459 	.word	0x0800d459
 800d438:	0800d461 	.word	0x0800d461
 800d43c:	0800d469 	.word	0x0800d469
 800d440:	2300      	movs	r3, #0
 800d442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d446:	e2f0      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d448:	2304      	movs	r3, #4
 800d44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44e:	e2ec      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d450:	2308      	movs	r3, #8
 800d452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d456:	e2e8      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d458:	2310      	movs	r3, #16
 800d45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45e:	e2e4      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d460:	2320      	movs	r3, #32
 800d462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d466:	e2e0      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d468:	2340      	movs	r3, #64	; 0x40
 800d46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46e:	e2dc      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d470:	2380      	movs	r3, #128	; 0x80
 800d472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d476:	e2d8      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a4f      	ldr	r2, [pc, #316]	; (800d5bc <UART_SetConfig+0x340>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d130      	bne.n	800d4e4 <UART_SetConfig+0x268>
 800d482:	4b4c      	ldr	r3, [pc, #304]	; (800d5b4 <UART_SetConfig+0x338>)
 800d484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d486:	f003 0307 	and.w	r3, r3, #7
 800d48a:	2b05      	cmp	r3, #5
 800d48c:	d826      	bhi.n	800d4dc <UART_SetConfig+0x260>
 800d48e:	a201      	add	r2, pc, #4	; (adr r2, 800d494 <UART_SetConfig+0x218>)
 800d490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d494:	0800d4ad 	.word	0x0800d4ad
 800d498:	0800d4b5 	.word	0x0800d4b5
 800d49c:	0800d4bd 	.word	0x0800d4bd
 800d4a0:	0800d4c5 	.word	0x0800d4c5
 800d4a4:	0800d4cd 	.word	0x0800d4cd
 800d4a8:	0800d4d5 	.word	0x0800d4d5
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b2:	e2ba      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d4b4:	2304      	movs	r3, #4
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ba:	e2b6      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d4bc:	2308      	movs	r3, #8
 800d4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c2:	e2b2      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d4c4:	2310      	movs	r3, #16
 800d4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ca:	e2ae      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d4cc:	2320      	movs	r3, #32
 800d4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d2:	e2aa      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d4d4:	2340      	movs	r3, #64	; 0x40
 800d4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4da:	e2a6      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d4dc:	2380      	movs	r3, #128	; 0x80
 800d4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4e2:	e2a2      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a35      	ldr	r2, [pc, #212]	; (800d5c0 <UART_SetConfig+0x344>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d130      	bne.n	800d550 <UART_SetConfig+0x2d4>
 800d4ee:	4b31      	ldr	r3, [pc, #196]	; (800d5b4 <UART_SetConfig+0x338>)
 800d4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4f2:	f003 0307 	and.w	r3, r3, #7
 800d4f6:	2b05      	cmp	r3, #5
 800d4f8:	d826      	bhi.n	800d548 <UART_SetConfig+0x2cc>
 800d4fa:	a201      	add	r2, pc, #4	; (adr r2, 800d500 <UART_SetConfig+0x284>)
 800d4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d500:	0800d519 	.word	0x0800d519
 800d504:	0800d521 	.word	0x0800d521
 800d508:	0800d529 	.word	0x0800d529
 800d50c:	0800d531 	.word	0x0800d531
 800d510:	0800d539 	.word	0x0800d539
 800d514:	0800d541 	.word	0x0800d541
 800d518:	2300      	movs	r3, #0
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51e:	e284      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d520:	2304      	movs	r3, #4
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d526:	e280      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d528:	2308      	movs	r3, #8
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52e:	e27c      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d530:	2310      	movs	r3, #16
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d536:	e278      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d538:	2320      	movs	r3, #32
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53e:	e274      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d540:	2340      	movs	r3, #64	; 0x40
 800d542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d546:	e270      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d548:	2380      	movs	r3, #128	; 0x80
 800d54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d54e:	e26c      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a1b      	ldr	r2, [pc, #108]	; (800d5c4 <UART_SetConfig+0x348>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d142      	bne.n	800d5e0 <UART_SetConfig+0x364>
 800d55a:	4b16      	ldr	r3, [pc, #88]	; (800d5b4 <UART_SetConfig+0x338>)
 800d55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d55e:	f003 0307 	and.w	r3, r3, #7
 800d562:	2b05      	cmp	r3, #5
 800d564:	d838      	bhi.n	800d5d8 <UART_SetConfig+0x35c>
 800d566:	a201      	add	r2, pc, #4	; (adr r2, 800d56c <UART_SetConfig+0x2f0>)
 800d568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d56c:	0800d585 	.word	0x0800d585
 800d570:	0800d58d 	.word	0x0800d58d
 800d574:	0800d595 	.word	0x0800d595
 800d578:	0800d59d 	.word	0x0800d59d
 800d57c:	0800d5c9 	.word	0x0800d5c9
 800d580:	0800d5d1 	.word	0x0800d5d1
 800d584:	2300      	movs	r3, #0
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58a:	e24e      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d58c:	2304      	movs	r3, #4
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d592:	e24a      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d594:	2308      	movs	r3, #8
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59a:	e246      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d59c:	2310      	movs	r3, #16
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a2:	e242      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d5a4:	cfff69f3 	.word	0xcfff69f3
 800d5a8:	58000c00 	.word	0x58000c00
 800d5ac:	11fff4ff 	.word	0x11fff4ff
 800d5b0:	40011000 	.word	0x40011000
 800d5b4:	58024400 	.word	0x58024400
 800d5b8:	40004400 	.word	0x40004400
 800d5bc:	40004800 	.word	0x40004800
 800d5c0:	40004c00 	.word	0x40004c00
 800d5c4:	40005000 	.word	0x40005000
 800d5c8:	2320      	movs	r3, #32
 800d5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ce:	e22c      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d5d0:	2340      	movs	r3, #64	; 0x40
 800d5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5d6:	e228      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d5d8:	2380      	movs	r3, #128	; 0x80
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5de:	e224      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4ab1      	ldr	r2, [pc, #708]	; (800d8ac <UART_SetConfig+0x630>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d176      	bne.n	800d6d8 <UART_SetConfig+0x45c>
 800d5ea:	4bb1      	ldr	r3, [pc, #708]	; (800d8b0 <UART_SetConfig+0x634>)
 800d5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5f2:	2b28      	cmp	r3, #40	; 0x28
 800d5f4:	d86c      	bhi.n	800d6d0 <UART_SetConfig+0x454>
 800d5f6:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <UART_SetConfig+0x380>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d6a1 	.word	0x0800d6a1
 800d600:	0800d6d1 	.word	0x0800d6d1
 800d604:	0800d6d1 	.word	0x0800d6d1
 800d608:	0800d6d1 	.word	0x0800d6d1
 800d60c:	0800d6d1 	.word	0x0800d6d1
 800d610:	0800d6d1 	.word	0x0800d6d1
 800d614:	0800d6d1 	.word	0x0800d6d1
 800d618:	0800d6d1 	.word	0x0800d6d1
 800d61c:	0800d6a9 	.word	0x0800d6a9
 800d620:	0800d6d1 	.word	0x0800d6d1
 800d624:	0800d6d1 	.word	0x0800d6d1
 800d628:	0800d6d1 	.word	0x0800d6d1
 800d62c:	0800d6d1 	.word	0x0800d6d1
 800d630:	0800d6d1 	.word	0x0800d6d1
 800d634:	0800d6d1 	.word	0x0800d6d1
 800d638:	0800d6d1 	.word	0x0800d6d1
 800d63c:	0800d6b1 	.word	0x0800d6b1
 800d640:	0800d6d1 	.word	0x0800d6d1
 800d644:	0800d6d1 	.word	0x0800d6d1
 800d648:	0800d6d1 	.word	0x0800d6d1
 800d64c:	0800d6d1 	.word	0x0800d6d1
 800d650:	0800d6d1 	.word	0x0800d6d1
 800d654:	0800d6d1 	.word	0x0800d6d1
 800d658:	0800d6d1 	.word	0x0800d6d1
 800d65c:	0800d6b9 	.word	0x0800d6b9
 800d660:	0800d6d1 	.word	0x0800d6d1
 800d664:	0800d6d1 	.word	0x0800d6d1
 800d668:	0800d6d1 	.word	0x0800d6d1
 800d66c:	0800d6d1 	.word	0x0800d6d1
 800d670:	0800d6d1 	.word	0x0800d6d1
 800d674:	0800d6d1 	.word	0x0800d6d1
 800d678:	0800d6d1 	.word	0x0800d6d1
 800d67c:	0800d6c1 	.word	0x0800d6c1
 800d680:	0800d6d1 	.word	0x0800d6d1
 800d684:	0800d6d1 	.word	0x0800d6d1
 800d688:	0800d6d1 	.word	0x0800d6d1
 800d68c:	0800d6d1 	.word	0x0800d6d1
 800d690:	0800d6d1 	.word	0x0800d6d1
 800d694:	0800d6d1 	.word	0x0800d6d1
 800d698:	0800d6d1 	.word	0x0800d6d1
 800d69c:	0800d6c9 	.word	0x0800d6c9
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a6:	e1c0      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d6a8:	2304      	movs	r3, #4
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ae:	e1bc      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d6b0:	2308      	movs	r3, #8
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b6:	e1b8      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d6b8:	2310      	movs	r3, #16
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6be:	e1b4      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d6c0:	2320      	movs	r3, #32
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c6:	e1b0      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d6c8:	2340      	movs	r3, #64	; 0x40
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ce:	e1ac      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d6d0:	2380      	movs	r3, #128	; 0x80
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d6:	e1a8      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a75      	ldr	r2, [pc, #468]	; (800d8b4 <UART_SetConfig+0x638>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d130      	bne.n	800d744 <UART_SetConfig+0x4c8>
 800d6e2:	4b73      	ldr	r3, [pc, #460]	; (800d8b0 <UART_SetConfig+0x634>)
 800d6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6e6:	f003 0307 	and.w	r3, r3, #7
 800d6ea:	2b05      	cmp	r3, #5
 800d6ec:	d826      	bhi.n	800d73c <UART_SetConfig+0x4c0>
 800d6ee:	a201      	add	r2, pc, #4	; (adr r2, 800d6f4 <UART_SetConfig+0x478>)
 800d6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f4:	0800d70d 	.word	0x0800d70d
 800d6f8:	0800d715 	.word	0x0800d715
 800d6fc:	0800d71d 	.word	0x0800d71d
 800d700:	0800d725 	.word	0x0800d725
 800d704:	0800d72d 	.word	0x0800d72d
 800d708:	0800d735 	.word	0x0800d735
 800d70c:	2300      	movs	r3, #0
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d712:	e18a      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d714:	2304      	movs	r3, #4
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71a:	e186      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d71c:	2308      	movs	r3, #8
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d722:	e182      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d724:	2310      	movs	r3, #16
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72a:	e17e      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d72c:	2320      	movs	r3, #32
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e17a      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d734:	2340      	movs	r3, #64	; 0x40
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73a:	e176      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d73c:	2380      	movs	r3, #128	; 0x80
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d742:	e172      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a5b      	ldr	r2, [pc, #364]	; (800d8b8 <UART_SetConfig+0x63c>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d130      	bne.n	800d7b0 <UART_SetConfig+0x534>
 800d74e:	4b58      	ldr	r3, [pc, #352]	; (800d8b0 <UART_SetConfig+0x634>)
 800d750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	2b05      	cmp	r3, #5
 800d758:	d826      	bhi.n	800d7a8 <UART_SetConfig+0x52c>
 800d75a:	a201      	add	r2, pc, #4	; (adr r2, 800d760 <UART_SetConfig+0x4e4>)
 800d75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d760:	0800d779 	.word	0x0800d779
 800d764:	0800d781 	.word	0x0800d781
 800d768:	0800d789 	.word	0x0800d789
 800d76c:	0800d791 	.word	0x0800d791
 800d770:	0800d799 	.word	0x0800d799
 800d774:	0800d7a1 	.word	0x0800d7a1
 800d778:	2300      	movs	r3, #0
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77e:	e154      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d780:	2304      	movs	r3, #4
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d786:	e150      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d788:	2308      	movs	r3, #8
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e14c      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d790:	2310      	movs	r3, #16
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e148      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d798:	2320      	movs	r3, #32
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e144      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d7a0:	2340      	movs	r3, #64	; 0x40
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a6:	e140      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d7a8:	2380      	movs	r3, #128	; 0x80
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ae:	e13c      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a41      	ldr	r2, [pc, #260]	; (800d8bc <UART_SetConfig+0x640>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	f040 8082 	bne.w	800d8c0 <UART_SetConfig+0x644>
 800d7bc:	4b3c      	ldr	r3, [pc, #240]	; (800d8b0 <UART_SetConfig+0x634>)
 800d7be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7c4:	2b28      	cmp	r3, #40	; 0x28
 800d7c6:	d86d      	bhi.n	800d8a4 <UART_SetConfig+0x628>
 800d7c8:	a201      	add	r2, pc, #4	; (adr r2, 800d7d0 <UART_SetConfig+0x554>)
 800d7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ce:	bf00      	nop
 800d7d0:	0800d875 	.word	0x0800d875
 800d7d4:	0800d8a5 	.word	0x0800d8a5
 800d7d8:	0800d8a5 	.word	0x0800d8a5
 800d7dc:	0800d8a5 	.word	0x0800d8a5
 800d7e0:	0800d8a5 	.word	0x0800d8a5
 800d7e4:	0800d8a5 	.word	0x0800d8a5
 800d7e8:	0800d8a5 	.word	0x0800d8a5
 800d7ec:	0800d8a5 	.word	0x0800d8a5
 800d7f0:	0800d87d 	.word	0x0800d87d
 800d7f4:	0800d8a5 	.word	0x0800d8a5
 800d7f8:	0800d8a5 	.word	0x0800d8a5
 800d7fc:	0800d8a5 	.word	0x0800d8a5
 800d800:	0800d8a5 	.word	0x0800d8a5
 800d804:	0800d8a5 	.word	0x0800d8a5
 800d808:	0800d8a5 	.word	0x0800d8a5
 800d80c:	0800d8a5 	.word	0x0800d8a5
 800d810:	0800d885 	.word	0x0800d885
 800d814:	0800d8a5 	.word	0x0800d8a5
 800d818:	0800d8a5 	.word	0x0800d8a5
 800d81c:	0800d8a5 	.word	0x0800d8a5
 800d820:	0800d8a5 	.word	0x0800d8a5
 800d824:	0800d8a5 	.word	0x0800d8a5
 800d828:	0800d8a5 	.word	0x0800d8a5
 800d82c:	0800d8a5 	.word	0x0800d8a5
 800d830:	0800d88d 	.word	0x0800d88d
 800d834:	0800d8a5 	.word	0x0800d8a5
 800d838:	0800d8a5 	.word	0x0800d8a5
 800d83c:	0800d8a5 	.word	0x0800d8a5
 800d840:	0800d8a5 	.word	0x0800d8a5
 800d844:	0800d8a5 	.word	0x0800d8a5
 800d848:	0800d8a5 	.word	0x0800d8a5
 800d84c:	0800d8a5 	.word	0x0800d8a5
 800d850:	0800d895 	.word	0x0800d895
 800d854:	0800d8a5 	.word	0x0800d8a5
 800d858:	0800d8a5 	.word	0x0800d8a5
 800d85c:	0800d8a5 	.word	0x0800d8a5
 800d860:	0800d8a5 	.word	0x0800d8a5
 800d864:	0800d8a5 	.word	0x0800d8a5
 800d868:	0800d8a5 	.word	0x0800d8a5
 800d86c:	0800d8a5 	.word	0x0800d8a5
 800d870:	0800d89d 	.word	0x0800d89d
 800d874:	2301      	movs	r3, #1
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87a:	e0d6      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d87c:	2304      	movs	r3, #4
 800d87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d882:	e0d2      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d884:	2308      	movs	r3, #8
 800d886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88a:	e0ce      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d88c:	2310      	movs	r3, #16
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d892:	e0ca      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d894:	2320      	movs	r3, #32
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89a:	e0c6      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d89c:	2340      	movs	r3, #64	; 0x40
 800d89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8a2:	e0c2      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d8a4:	2380      	movs	r3, #128	; 0x80
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8aa:	e0be      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d8ac:	40011400 	.word	0x40011400
 800d8b0:	58024400 	.word	0x58024400
 800d8b4:	40007800 	.word	0x40007800
 800d8b8:	40007c00 	.word	0x40007c00
 800d8bc:	40011800 	.word	0x40011800
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4aad      	ldr	r2, [pc, #692]	; (800db7c <UART_SetConfig+0x900>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d176      	bne.n	800d9b8 <UART_SetConfig+0x73c>
 800d8ca:	4bad      	ldr	r3, [pc, #692]	; (800db80 <UART_SetConfig+0x904>)
 800d8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8d2:	2b28      	cmp	r3, #40	; 0x28
 800d8d4:	d86c      	bhi.n	800d9b0 <UART_SetConfig+0x734>
 800d8d6:	a201      	add	r2, pc, #4	; (adr r2, 800d8dc <UART_SetConfig+0x660>)
 800d8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8dc:	0800d981 	.word	0x0800d981
 800d8e0:	0800d9b1 	.word	0x0800d9b1
 800d8e4:	0800d9b1 	.word	0x0800d9b1
 800d8e8:	0800d9b1 	.word	0x0800d9b1
 800d8ec:	0800d9b1 	.word	0x0800d9b1
 800d8f0:	0800d9b1 	.word	0x0800d9b1
 800d8f4:	0800d9b1 	.word	0x0800d9b1
 800d8f8:	0800d9b1 	.word	0x0800d9b1
 800d8fc:	0800d989 	.word	0x0800d989
 800d900:	0800d9b1 	.word	0x0800d9b1
 800d904:	0800d9b1 	.word	0x0800d9b1
 800d908:	0800d9b1 	.word	0x0800d9b1
 800d90c:	0800d9b1 	.word	0x0800d9b1
 800d910:	0800d9b1 	.word	0x0800d9b1
 800d914:	0800d9b1 	.word	0x0800d9b1
 800d918:	0800d9b1 	.word	0x0800d9b1
 800d91c:	0800d991 	.word	0x0800d991
 800d920:	0800d9b1 	.word	0x0800d9b1
 800d924:	0800d9b1 	.word	0x0800d9b1
 800d928:	0800d9b1 	.word	0x0800d9b1
 800d92c:	0800d9b1 	.word	0x0800d9b1
 800d930:	0800d9b1 	.word	0x0800d9b1
 800d934:	0800d9b1 	.word	0x0800d9b1
 800d938:	0800d9b1 	.word	0x0800d9b1
 800d93c:	0800d999 	.word	0x0800d999
 800d940:	0800d9b1 	.word	0x0800d9b1
 800d944:	0800d9b1 	.word	0x0800d9b1
 800d948:	0800d9b1 	.word	0x0800d9b1
 800d94c:	0800d9b1 	.word	0x0800d9b1
 800d950:	0800d9b1 	.word	0x0800d9b1
 800d954:	0800d9b1 	.word	0x0800d9b1
 800d958:	0800d9b1 	.word	0x0800d9b1
 800d95c:	0800d9a1 	.word	0x0800d9a1
 800d960:	0800d9b1 	.word	0x0800d9b1
 800d964:	0800d9b1 	.word	0x0800d9b1
 800d968:	0800d9b1 	.word	0x0800d9b1
 800d96c:	0800d9b1 	.word	0x0800d9b1
 800d970:	0800d9b1 	.word	0x0800d9b1
 800d974:	0800d9b1 	.word	0x0800d9b1
 800d978:	0800d9b1 	.word	0x0800d9b1
 800d97c:	0800d9a9 	.word	0x0800d9a9
 800d980:	2301      	movs	r3, #1
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d986:	e050      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d988:	2304      	movs	r3, #4
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98e:	e04c      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d990:	2308      	movs	r3, #8
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d996:	e048      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d998:	2310      	movs	r3, #16
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99e:	e044      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d9a0:	2320      	movs	r3, #32
 800d9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a6:	e040      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d9a8:	2340      	movs	r3, #64	; 0x40
 800d9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ae:	e03c      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d9b0:	2380      	movs	r3, #128	; 0x80
 800d9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b6:	e038      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a71      	ldr	r2, [pc, #452]	; (800db84 <UART_SetConfig+0x908>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d130      	bne.n	800da24 <UART_SetConfig+0x7a8>
 800d9c2:	4b6f      	ldr	r3, [pc, #444]	; (800db80 <UART_SetConfig+0x904>)
 800d9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9c6:	f003 0307 	and.w	r3, r3, #7
 800d9ca:	2b05      	cmp	r3, #5
 800d9cc:	d826      	bhi.n	800da1c <UART_SetConfig+0x7a0>
 800d9ce:	a201      	add	r2, pc, #4	; (adr r2, 800d9d4 <UART_SetConfig+0x758>)
 800d9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d4:	0800d9ed 	.word	0x0800d9ed
 800d9d8:	0800d9f5 	.word	0x0800d9f5
 800d9dc:	0800d9fd 	.word	0x0800d9fd
 800d9e0:	0800da05 	.word	0x0800da05
 800d9e4:	0800da0d 	.word	0x0800da0d
 800d9e8:	0800da15 	.word	0x0800da15
 800d9ec:	2302      	movs	r3, #2
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f2:	e01a      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d9f4:	2304      	movs	r3, #4
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fa:	e016      	b.n	800da2a <UART_SetConfig+0x7ae>
 800d9fc:	2308      	movs	r3, #8
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da02:	e012      	b.n	800da2a <UART_SetConfig+0x7ae>
 800da04:	2310      	movs	r3, #16
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0a:	e00e      	b.n	800da2a <UART_SetConfig+0x7ae>
 800da0c:	2320      	movs	r3, #32
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da12:	e00a      	b.n	800da2a <UART_SetConfig+0x7ae>
 800da14:	2340      	movs	r3, #64	; 0x40
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1a:	e006      	b.n	800da2a <UART_SetConfig+0x7ae>
 800da1c:	2380      	movs	r3, #128	; 0x80
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da22:	e002      	b.n	800da2a <UART_SetConfig+0x7ae>
 800da24:	2380      	movs	r3, #128	; 0x80
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a55      	ldr	r2, [pc, #340]	; (800db84 <UART_SetConfig+0x908>)
 800da30:	4293      	cmp	r3, r2
 800da32:	f040 80f8 	bne.w	800dc26 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da3a:	2b20      	cmp	r3, #32
 800da3c:	dc46      	bgt.n	800dacc <UART_SetConfig+0x850>
 800da3e:	2b02      	cmp	r3, #2
 800da40:	db75      	blt.n	800db2e <UART_SetConfig+0x8b2>
 800da42:	3b02      	subs	r3, #2
 800da44:	2b1e      	cmp	r3, #30
 800da46:	d872      	bhi.n	800db2e <UART_SetConfig+0x8b2>
 800da48:	a201      	add	r2, pc, #4	; (adr r2, 800da50 <UART_SetConfig+0x7d4>)
 800da4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4e:	bf00      	nop
 800da50:	0800dad3 	.word	0x0800dad3
 800da54:	0800db2f 	.word	0x0800db2f
 800da58:	0800dadb 	.word	0x0800dadb
 800da5c:	0800db2f 	.word	0x0800db2f
 800da60:	0800db2f 	.word	0x0800db2f
 800da64:	0800db2f 	.word	0x0800db2f
 800da68:	0800daeb 	.word	0x0800daeb
 800da6c:	0800db2f 	.word	0x0800db2f
 800da70:	0800db2f 	.word	0x0800db2f
 800da74:	0800db2f 	.word	0x0800db2f
 800da78:	0800db2f 	.word	0x0800db2f
 800da7c:	0800db2f 	.word	0x0800db2f
 800da80:	0800db2f 	.word	0x0800db2f
 800da84:	0800db2f 	.word	0x0800db2f
 800da88:	0800dafb 	.word	0x0800dafb
 800da8c:	0800db2f 	.word	0x0800db2f
 800da90:	0800db2f 	.word	0x0800db2f
 800da94:	0800db2f 	.word	0x0800db2f
 800da98:	0800db2f 	.word	0x0800db2f
 800da9c:	0800db2f 	.word	0x0800db2f
 800daa0:	0800db2f 	.word	0x0800db2f
 800daa4:	0800db2f 	.word	0x0800db2f
 800daa8:	0800db2f 	.word	0x0800db2f
 800daac:	0800db2f 	.word	0x0800db2f
 800dab0:	0800db2f 	.word	0x0800db2f
 800dab4:	0800db2f 	.word	0x0800db2f
 800dab8:	0800db2f 	.word	0x0800db2f
 800dabc:	0800db2f 	.word	0x0800db2f
 800dac0:	0800db2f 	.word	0x0800db2f
 800dac4:	0800db2f 	.word	0x0800db2f
 800dac8:	0800db21 	.word	0x0800db21
 800dacc:	2b40      	cmp	r3, #64	; 0x40
 800dace:	d02a      	beq.n	800db26 <UART_SetConfig+0x8aa>
 800dad0:	e02d      	b.n	800db2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dad2:	f7fc fe0b 	bl	800a6ec <HAL_RCCEx_GetD3PCLK1Freq>
 800dad6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dad8:	e02f      	b.n	800db3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fc fe1a 	bl	800a718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dae8:	e027      	b.n	800db3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800daea:	f107 0318 	add.w	r3, r7, #24
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fc ff66 	bl	800a9c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800daf8:	e01f      	b.n	800db3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dafa:	4b21      	ldr	r3, [pc, #132]	; (800db80 <UART_SetConfig+0x904>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f003 0320 	and.w	r3, r3, #32
 800db02:	2b00      	cmp	r3, #0
 800db04:	d009      	beq.n	800db1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db06:	4b1e      	ldr	r3, [pc, #120]	; (800db80 <UART_SetConfig+0x904>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	08db      	lsrs	r3, r3, #3
 800db0c:	f003 0303 	and.w	r3, r3, #3
 800db10:	4a1d      	ldr	r2, [pc, #116]	; (800db88 <UART_SetConfig+0x90c>)
 800db12:	fa22 f303 	lsr.w	r3, r2, r3
 800db16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db18:	e00f      	b.n	800db3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800db1a:	4b1b      	ldr	r3, [pc, #108]	; (800db88 <UART_SetConfig+0x90c>)
 800db1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db1e:	e00c      	b.n	800db3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db20:	4b1a      	ldr	r3, [pc, #104]	; (800db8c <UART_SetConfig+0x910>)
 800db22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db24:	e009      	b.n	800db3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db2c:	e005      	b.n	800db3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800db2e:	2300      	movs	r3, #0
 800db30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800db38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800db3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	f000 81ee 	beq.w	800df1e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db46:	4a12      	ldr	r2, [pc, #72]	; (800db90 <UART_SetConfig+0x914>)
 800db48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db4c:	461a      	mov	r2, r3
 800db4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db50:	fbb3 f3f2 	udiv	r3, r3, r2
 800db54:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	4613      	mov	r3, r2
 800db5c:	005b      	lsls	r3, r3, #1
 800db5e:	4413      	add	r3, r2
 800db60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db62:	429a      	cmp	r2, r3
 800db64:	d305      	bcc.n	800db72 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db6e:	429a      	cmp	r2, r3
 800db70:	d910      	bls.n	800db94 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800db78:	e1d1      	b.n	800df1e <UART_SetConfig+0xca2>
 800db7a:	bf00      	nop
 800db7c:	40011c00 	.word	0x40011c00
 800db80:	58024400 	.word	0x58024400
 800db84:	58000c00 	.word	0x58000c00
 800db88:	03d09000 	.word	0x03d09000
 800db8c:	003d0900 	.word	0x003d0900
 800db90:	0800fde0 	.word	0x0800fde0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db96:	2200      	movs	r2, #0
 800db98:	60bb      	str	r3, [r7, #8]
 800db9a:	60fa      	str	r2, [r7, #12]
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba0:	4ac0      	ldr	r2, [pc, #768]	; (800dea4 <UART_SetConfig+0xc28>)
 800dba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	2200      	movs	r2, #0
 800dbaa:	603b      	str	r3, [r7, #0]
 800dbac:	607a      	str	r2, [r7, #4]
 800dbae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dbb6:	f7f2 fbb3 	bl	8000320 <__aeabi_uldivmod>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4610      	mov	r0, r2
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	f04f 0200 	mov.w	r2, #0
 800dbc6:	f04f 0300 	mov.w	r3, #0
 800dbca:	020b      	lsls	r3, r1, #8
 800dbcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dbd0:	0202      	lsls	r2, r0, #8
 800dbd2:	6979      	ldr	r1, [r7, #20]
 800dbd4:	6849      	ldr	r1, [r1, #4]
 800dbd6:	0849      	lsrs	r1, r1, #1
 800dbd8:	2000      	movs	r0, #0
 800dbda:	460c      	mov	r4, r1
 800dbdc:	4605      	mov	r5, r0
 800dbde:	eb12 0804 	adds.w	r8, r2, r4
 800dbe2:	eb43 0905 	adc.w	r9, r3, r5
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	469a      	mov	sl, r3
 800dbee:	4693      	mov	fp, r2
 800dbf0:	4652      	mov	r2, sl
 800dbf2:	465b      	mov	r3, fp
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	f7f2 fb92 	bl	8000320 <__aeabi_uldivmod>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	4613      	mov	r3, r2
 800dc02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc0a:	d308      	bcc.n	800dc1e <UART_SetConfig+0x9a2>
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc12:	d204      	bcs.n	800dc1e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc1a:	60da      	str	r2, [r3, #12]
 800dc1c:	e17f      	b.n	800df1e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dc24:	e17b      	b.n	800df1e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	69db      	ldr	r3, [r3, #28]
 800dc2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc2e:	f040 80bd 	bne.w	800ddac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dc32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc36:	2b20      	cmp	r3, #32
 800dc38:	dc48      	bgt.n	800dccc <UART_SetConfig+0xa50>
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	db7b      	blt.n	800dd36 <UART_SetConfig+0xaba>
 800dc3e:	2b20      	cmp	r3, #32
 800dc40:	d879      	bhi.n	800dd36 <UART_SetConfig+0xaba>
 800dc42:	a201      	add	r2, pc, #4	; (adr r2, 800dc48 <UART_SetConfig+0x9cc>)
 800dc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc48:	0800dcd3 	.word	0x0800dcd3
 800dc4c:	0800dcdb 	.word	0x0800dcdb
 800dc50:	0800dd37 	.word	0x0800dd37
 800dc54:	0800dd37 	.word	0x0800dd37
 800dc58:	0800dce3 	.word	0x0800dce3
 800dc5c:	0800dd37 	.word	0x0800dd37
 800dc60:	0800dd37 	.word	0x0800dd37
 800dc64:	0800dd37 	.word	0x0800dd37
 800dc68:	0800dcf3 	.word	0x0800dcf3
 800dc6c:	0800dd37 	.word	0x0800dd37
 800dc70:	0800dd37 	.word	0x0800dd37
 800dc74:	0800dd37 	.word	0x0800dd37
 800dc78:	0800dd37 	.word	0x0800dd37
 800dc7c:	0800dd37 	.word	0x0800dd37
 800dc80:	0800dd37 	.word	0x0800dd37
 800dc84:	0800dd37 	.word	0x0800dd37
 800dc88:	0800dd03 	.word	0x0800dd03
 800dc8c:	0800dd37 	.word	0x0800dd37
 800dc90:	0800dd37 	.word	0x0800dd37
 800dc94:	0800dd37 	.word	0x0800dd37
 800dc98:	0800dd37 	.word	0x0800dd37
 800dc9c:	0800dd37 	.word	0x0800dd37
 800dca0:	0800dd37 	.word	0x0800dd37
 800dca4:	0800dd37 	.word	0x0800dd37
 800dca8:	0800dd37 	.word	0x0800dd37
 800dcac:	0800dd37 	.word	0x0800dd37
 800dcb0:	0800dd37 	.word	0x0800dd37
 800dcb4:	0800dd37 	.word	0x0800dd37
 800dcb8:	0800dd37 	.word	0x0800dd37
 800dcbc:	0800dd37 	.word	0x0800dd37
 800dcc0:	0800dd37 	.word	0x0800dd37
 800dcc4:	0800dd37 	.word	0x0800dd37
 800dcc8:	0800dd29 	.word	0x0800dd29
 800dccc:	2b40      	cmp	r3, #64	; 0x40
 800dcce:	d02e      	beq.n	800dd2e <UART_SetConfig+0xab2>
 800dcd0:	e031      	b.n	800dd36 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcd2:	f7fb fde5 	bl	80098a0 <HAL_RCC_GetPCLK1Freq>
 800dcd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dcd8:	e033      	b.n	800dd42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dcda:	f7fb fdf7 	bl	80098cc <HAL_RCC_GetPCLK2Freq>
 800dcde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dce0:	e02f      	b.n	800dd42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fc fd16 	bl	800a718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcf0:	e027      	b.n	800dd42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcf2:	f107 0318 	add.w	r3, r7, #24
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fc fe62 	bl	800a9c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd00:	e01f      	b.n	800dd42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd02:	4b69      	ldr	r3, [pc, #420]	; (800dea8 <UART_SetConfig+0xc2c>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f003 0320 	and.w	r3, r3, #32
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d009      	beq.n	800dd22 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd0e:	4b66      	ldr	r3, [pc, #408]	; (800dea8 <UART_SetConfig+0xc2c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	08db      	lsrs	r3, r3, #3
 800dd14:	f003 0303 	and.w	r3, r3, #3
 800dd18:	4a64      	ldr	r2, [pc, #400]	; (800deac <UART_SetConfig+0xc30>)
 800dd1a:	fa22 f303 	lsr.w	r3, r2, r3
 800dd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd20:	e00f      	b.n	800dd42 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800dd22:	4b62      	ldr	r3, [pc, #392]	; (800deac <UART_SetConfig+0xc30>)
 800dd24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd26:	e00c      	b.n	800dd42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd28:	4b61      	ldr	r3, [pc, #388]	; (800deb0 <UART_SetConfig+0xc34>)
 800dd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd2c:	e009      	b.n	800dd42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd34:	e005      	b.n	800dd42 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dd36:	2300      	movs	r3, #0
 800dd38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dd40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f000 80ea 	beq.w	800df1e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4e:	4a55      	ldr	r2, [pc, #340]	; (800dea4 <UART_SetConfig+0xc28>)
 800dd50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd54:	461a      	mov	r2, r3
 800dd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd58:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd5c:	005a      	lsls	r2, r3, #1
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	085b      	lsrs	r3, r3, #1
 800dd64:	441a      	add	r2, r3
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd72:	2b0f      	cmp	r3, #15
 800dd74:	d916      	bls.n	800dda4 <UART_SetConfig+0xb28>
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd7c:	d212      	bcs.n	800dda4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	f023 030f 	bic.w	r3, r3, #15
 800dd86:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8a:	085b      	lsrs	r3, r3, #1
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	f003 0307 	and.w	r3, r3, #7
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dd96:	4313      	orrs	r3, r2
 800dd98:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dda0:	60da      	str	r2, [r3, #12]
 800dda2:	e0bc      	b.n	800df1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dda4:	2301      	movs	r3, #1
 800dda6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ddaa:	e0b8      	b.n	800df1e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ddac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ddb0:	2b20      	cmp	r3, #32
 800ddb2:	dc4b      	bgt.n	800de4c <UART_SetConfig+0xbd0>
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f2c0 8087 	blt.w	800dec8 <UART_SetConfig+0xc4c>
 800ddba:	2b20      	cmp	r3, #32
 800ddbc:	f200 8084 	bhi.w	800dec8 <UART_SetConfig+0xc4c>
 800ddc0:	a201      	add	r2, pc, #4	; (adr r2, 800ddc8 <UART_SetConfig+0xb4c>)
 800ddc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc6:	bf00      	nop
 800ddc8:	0800de53 	.word	0x0800de53
 800ddcc:	0800de5b 	.word	0x0800de5b
 800ddd0:	0800dec9 	.word	0x0800dec9
 800ddd4:	0800dec9 	.word	0x0800dec9
 800ddd8:	0800de63 	.word	0x0800de63
 800dddc:	0800dec9 	.word	0x0800dec9
 800dde0:	0800dec9 	.word	0x0800dec9
 800dde4:	0800dec9 	.word	0x0800dec9
 800dde8:	0800de73 	.word	0x0800de73
 800ddec:	0800dec9 	.word	0x0800dec9
 800ddf0:	0800dec9 	.word	0x0800dec9
 800ddf4:	0800dec9 	.word	0x0800dec9
 800ddf8:	0800dec9 	.word	0x0800dec9
 800ddfc:	0800dec9 	.word	0x0800dec9
 800de00:	0800dec9 	.word	0x0800dec9
 800de04:	0800dec9 	.word	0x0800dec9
 800de08:	0800de83 	.word	0x0800de83
 800de0c:	0800dec9 	.word	0x0800dec9
 800de10:	0800dec9 	.word	0x0800dec9
 800de14:	0800dec9 	.word	0x0800dec9
 800de18:	0800dec9 	.word	0x0800dec9
 800de1c:	0800dec9 	.word	0x0800dec9
 800de20:	0800dec9 	.word	0x0800dec9
 800de24:	0800dec9 	.word	0x0800dec9
 800de28:	0800dec9 	.word	0x0800dec9
 800de2c:	0800dec9 	.word	0x0800dec9
 800de30:	0800dec9 	.word	0x0800dec9
 800de34:	0800dec9 	.word	0x0800dec9
 800de38:	0800dec9 	.word	0x0800dec9
 800de3c:	0800dec9 	.word	0x0800dec9
 800de40:	0800dec9 	.word	0x0800dec9
 800de44:	0800dec9 	.word	0x0800dec9
 800de48:	0800debb 	.word	0x0800debb
 800de4c:	2b40      	cmp	r3, #64	; 0x40
 800de4e:	d037      	beq.n	800dec0 <UART_SetConfig+0xc44>
 800de50:	e03a      	b.n	800dec8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de52:	f7fb fd25 	bl	80098a0 <HAL_RCC_GetPCLK1Freq>
 800de56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de58:	e03c      	b.n	800ded4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de5a:	f7fb fd37 	bl	80098cc <HAL_RCC_GetPCLK2Freq>
 800de5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de60:	e038      	b.n	800ded4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de66:	4618      	mov	r0, r3
 800de68:	f7fc fc56 	bl	800a718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de70:	e030      	b.n	800ded4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de72:	f107 0318 	add.w	r3, r7, #24
 800de76:	4618      	mov	r0, r3
 800de78:	f7fc fda2 	bl	800a9c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de80:	e028      	b.n	800ded4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de82:	4b09      	ldr	r3, [pc, #36]	; (800dea8 <UART_SetConfig+0xc2c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f003 0320 	and.w	r3, r3, #32
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d012      	beq.n	800deb4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de8e:	4b06      	ldr	r3, [pc, #24]	; (800dea8 <UART_SetConfig+0xc2c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	08db      	lsrs	r3, r3, #3
 800de94:	f003 0303 	and.w	r3, r3, #3
 800de98:	4a04      	ldr	r2, [pc, #16]	; (800deac <UART_SetConfig+0xc30>)
 800de9a:	fa22 f303 	lsr.w	r3, r2, r3
 800de9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dea0:	e018      	b.n	800ded4 <UART_SetConfig+0xc58>
 800dea2:	bf00      	nop
 800dea4:	0800fde0 	.word	0x0800fde0
 800dea8:	58024400 	.word	0x58024400
 800deac:	03d09000 	.word	0x03d09000
 800deb0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800deb4:	4b24      	ldr	r3, [pc, #144]	; (800df48 <UART_SetConfig+0xccc>)
 800deb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deb8:	e00c      	b.n	800ded4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800deba:	4b24      	ldr	r3, [pc, #144]	; (800df4c <UART_SetConfig+0xcd0>)
 800debc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800debe:	e009      	b.n	800ded4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dec0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dec6:	e005      	b.n	800ded4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800dec8:	2300      	movs	r3, #0
 800deca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800decc:	2301      	movs	r3, #1
 800dece:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ded2:	bf00      	nop
    }

    if (pclk != 0U)
 800ded4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d021      	beq.n	800df1e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dede:	4a1c      	ldr	r2, [pc, #112]	; (800df50 <UART_SetConfig+0xcd4>)
 800dee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dee4:	461a      	mov	r2, r3
 800dee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee8:	fbb3 f2f2 	udiv	r2, r3, r2
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	085b      	lsrs	r3, r3, #1
 800def2:	441a      	add	r2, r3
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	fbb2 f3f3 	udiv	r3, r2, r3
 800defc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800defe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df00:	2b0f      	cmp	r3, #15
 800df02:	d909      	bls.n	800df18 <UART_SetConfig+0xc9c>
 800df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df0a:	d205      	bcs.n	800df18 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0e:	b29a      	uxth	r2, r3
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	60da      	str	r2, [r3, #12]
 800df16:	e002      	b.n	800df1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	2201      	movs	r2, #1
 800df22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	2201      	movs	r2, #1
 800df2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	2200      	movs	r2, #0
 800df32:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	2200      	movs	r2, #0
 800df38:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800df3a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3748      	adds	r7, #72	; 0x48
 800df42:	46bd      	mov	sp, r7
 800df44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df48:	03d09000 	.word	0x03d09000
 800df4c:	003d0900 	.word	0x003d0900
 800df50:	0800fde0 	.word	0x0800fde0

0800df54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df60:	f003 0301 	and.w	r3, r3, #1
 800df64:	2b00      	cmp	r3, #0
 800df66:	d00a      	beq.n	800df7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	430a      	orrs	r2, r1
 800df7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df82:	f003 0302 	and.w	r3, r3, #2
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00a      	beq.n	800dfa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	430a      	orrs	r2, r1
 800df9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfa4:	f003 0304 	and.w	r3, r3, #4
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00a      	beq.n	800dfc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	430a      	orrs	r2, r1
 800dfc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc6:	f003 0308 	and.w	r3, r3, #8
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00a      	beq.n	800dfe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	430a      	orrs	r2, r1
 800dfe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe8:	f003 0310 	and.w	r3, r3, #16
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00a      	beq.n	800e006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	430a      	orrs	r2, r1
 800e004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00a:	f003 0320 	and.w	r3, r3, #32
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00a      	beq.n	800e028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	430a      	orrs	r2, r1
 800e026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e030:	2b00      	cmp	r3, #0
 800e032:	d01a      	beq.n	800e06a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	430a      	orrs	r2, r1
 800e048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e04e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e052:	d10a      	bne.n	800e06a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	430a      	orrs	r2, r1
 800e068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00a      	beq.n	800e08c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	430a      	orrs	r2, r1
 800e08a:	605a      	str	r2, [r3, #4]
  }
}
 800e08c:	bf00      	nop
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b086      	sub	sp, #24
 800e09c:	af02      	add	r7, sp, #8
 800e09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e0a8:	f7f7 f88c 	bl	80051c4 <HAL_GetTick>
 800e0ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f003 0308 	and.w	r3, r3, #8
 800e0b8:	2b08      	cmp	r3, #8
 800e0ba:	d10e      	bne.n	800e0da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 f82f 	bl	800e12e <UART_WaitOnFlagUntilTimeout>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	e025      	b.n	800e126 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f003 0304 	and.w	r3, r3, #4
 800e0e4:	2b04      	cmp	r3, #4
 800e0e6:	d10e      	bne.n	800e106 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e0ec:	9300      	str	r3, [sp, #0]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 f819 	bl	800e12e <UART_WaitOnFlagUntilTimeout>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e102:	2303      	movs	r3, #3
 800e104:	e00f      	b.n	800e126 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2220      	movs	r2, #32
 800e10a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2220      	movs	r2, #32
 800e112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b09c      	sub	sp, #112	; 0x70
 800e132:	af00      	add	r7, sp, #0
 800e134:	60f8      	str	r0, [r7, #12]
 800e136:	60b9      	str	r1, [r7, #8]
 800e138:	603b      	str	r3, [r7, #0]
 800e13a:	4613      	mov	r3, r2
 800e13c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e13e:	e0a9      	b.n	800e294 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e146:	f000 80a5 	beq.w	800e294 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e14a:	f7f7 f83b 	bl	80051c4 <HAL_GetTick>
 800e14e:	4602      	mov	r2, r0
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	1ad3      	subs	r3, r2, r3
 800e154:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e156:	429a      	cmp	r2, r3
 800e158:	d302      	bcc.n	800e160 <UART_WaitOnFlagUntilTimeout+0x32>
 800e15a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d140      	bne.n	800e1e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e168:	e853 3f00 	ldrex	r3, [r3]
 800e16c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e170:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e174:	667b      	str	r3, [r7, #100]	; 0x64
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	461a      	mov	r2, r3
 800e17c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e17e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e180:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e182:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e184:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e186:	e841 2300 	strex	r3, r2, [r1]
 800e18a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e18c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1e6      	bne.n	800e160 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	3308      	adds	r3, #8
 800e198:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19c:	e853 3f00 	ldrex	r3, [r3]
 800e1a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a4:	f023 0301 	bic.w	r3, r3, #1
 800e1a8:	663b      	str	r3, [r7, #96]	; 0x60
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	3308      	adds	r3, #8
 800e1b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e1b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800e1b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1ba:	e841 2300 	strex	r3, r2, [r1]
 800e1be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1e5      	bne.n	800e192 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2220      	movs	r2, #32
 800e1ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2220      	movs	r2, #32
 800e1d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e1de:	2303      	movs	r3, #3
 800e1e0:	e069      	b.n	800e2b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f003 0304 	and.w	r3, r3, #4
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d051      	beq.n	800e294 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	69db      	ldr	r3, [r3, #28]
 800e1f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1fe:	d149      	bne.n	800e294 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e208:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e212:	e853 3f00 	ldrex	r3, [r3]
 800e216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e21e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	461a      	mov	r2, r3
 800e226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e228:	637b      	str	r3, [r7, #52]	; 0x34
 800e22a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e22e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e230:	e841 2300 	strex	r3, r2, [r1]
 800e234:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1e6      	bne.n	800e20a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	3308      	adds	r3, #8
 800e242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	e853 3f00 	ldrex	r3, [r3]
 800e24a:	613b      	str	r3, [r7, #16]
   return(result);
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	f023 0301 	bic.w	r3, r3, #1
 800e252:	66bb      	str	r3, [r7, #104]	; 0x68
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3308      	adds	r3, #8
 800e25a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e25c:	623a      	str	r2, [r7, #32]
 800e25e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e260:	69f9      	ldr	r1, [r7, #28]
 800e262:	6a3a      	ldr	r2, [r7, #32]
 800e264:	e841 2300 	strex	r3, r2, [r1]
 800e268:	61bb      	str	r3, [r7, #24]
   return(result);
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1e5      	bne.n	800e23c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2220      	movs	r2, #32
 800e274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2220      	movs	r2, #32
 800e27c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2220      	movs	r2, #32
 800e284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e290:	2303      	movs	r3, #3
 800e292:	e010      	b.n	800e2b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	69da      	ldr	r2, [r3, #28]
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	4013      	ands	r3, r2
 800e29e:	68ba      	ldr	r2, [r7, #8]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	bf0c      	ite	eq
 800e2a4:	2301      	moveq	r3, #1
 800e2a6:	2300      	movne	r3, #0
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	f43f af46 	beq.w	800e140 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3770      	adds	r7, #112	; 0x70
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
	...

0800e2c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b096      	sub	sp, #88	; 0x58
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	68ba      	ldr	r2, [r7, #8]
 800e2d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	88fa      	ldrh	r2, [r7, #6]
 800e2d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2222      	movs	r2, #34	; 0x22
 800e2e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d02c      	beq.n	800e34e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f8:	4a42      	ldr	r2, [pc, #264]	; (800e404 <UART_Start_Receive_DMA+0x144>)
 800e2fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e300:	4a41      	ldr	r2, [pc, #260]	; (800e408 <UART_Start_Receive_DMA+0x148>)
 800e302:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e308:	4a40      	ldr	r2, [pc, #256]	; (800e40c <UART_Start_Receive_DMA+0x14c>)
 800e30a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e310:	2200      	movs	r2, #0
 800e312:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	3324      	adds	r3, #36	; 0x24
 800e31e:	4619      	mov	r1, r3
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e324:	461a      	mov	r2, r3
 800e326:	88fb      	ldrh	r3, [r7, #6]
 800e328:	f7f7 fdaa 	bl	8005e80 <HAL_DMA_Start_IT>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00d      	beq.n	800e34e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2210      	movs	r2, #16
 800e336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2220      	movs	r2, #32
 800e346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e34a:	2301      	movs	r3, #1
 800e34c:	e055      	b.n	800e3fa <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2200      	movs	r2, #0
 800e352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	691b      	ldr	r3, [r3, #16]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d018      	beq.n	800e390 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e366:	e853 3f00 	ldrex	r3, [r3]
 800e36a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e372:	657b      	str	r3, [r7, #84]	; 0x54
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	461a      	mov	r2, r3
 800e37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e37c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e37e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e380:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e384:	e841 2300 	strex	r3, r2, [r1]
 800e388:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d1e6      	bne.n	800e35e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3308      	adds	r3, #8
 800e396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39a:	e853 3f00 	ldrex	r3, [r3]
 800e39e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	f043 0301 	orr.w	r3, r3, #1
 800e3a6:	653b      	str	r3, [r7, #80]	; 0x50
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3b0:	637a      	str	r2, [r7, #52]	; 0x34
 800e3b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3b8:	e841 2300 	strex	r3, r2, [r1]
 800e3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1e5      	bne.n	800e390 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	3308      	adds	r3, #8
 800e3ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	e853 3f00 	ldrex	r3, [r3]
 800e3d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	3308      	adds	r3, #8
 800e3e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3e4:	623a      	str	r2, [r7, #32]
 800e3e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e8:	69f9      	ldr	r1, [r7, #28]
 800e3ea:	6a3a      	ldr	r2, [r7, #32]
 800e3ec:	e841 2300 	strex	r3, r2, [r1]
 800e3f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1e5      	bne.n	800e3c4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3758      	adds	r7, #88	; 0x58
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	0800e613 	.word	0x0800e613
 800e408:	0800e735 	.word	0x0800e735
 800e40c:	0800e76d 	.word	0x0800e76d

0800e410 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e410:	b480      	push	{r7}
 800e412:	b08f      	sub	sp, #60	; 0x3c
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41e:	6a3b      	ldr	r3, [r7, #32]
 800e420:	e853 3f00 	ldrex	r3, [r3]
 800e424:	61fb      	str	r3, [r7, #28]
   return(result);
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e42c:	637b      	str	r3, [r7, #52]	; 0x34
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	461a      	mov	r2, r3
 800e434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e436:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e438:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e43c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e43e:	e841 2300 	strex	r3, r2, [r1]
 800e442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e446:	2b00      	cmp	r3, #0
 800e448:	d1e6      	bne.n	800e418 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	3308      	adds	r3, #8
 800e450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	e853 3f00 	ldrex	r3, [r3]
 800e458:	60bb      	str	r3, [r7, #8]
   return(result);
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e460:	633b      	str	r3, [r7, #48]	; 0x30
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	3308      	adds	r3, #8
 800e468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e46a:	61ba      	str	r2, [r7, #24]
 800e46c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e46e:	6979      	ldr	r1, [r7, #20]
 800e470:	69ba      	ldr	r2, [r7, #24]
 800e472:	e841 2300 	strex	r3, r2, [r1]
 800e476:	613b      	str	r3, [r7, #16]
   return(result);
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d1e5      	bne.n	800e44a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2220      	movs	r2, #32
 800e482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e486:	bf00      	nop
 800e488:	373c      	adds	r7, #60	; 0x3c
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr
	...

0800e494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e494:	b480      	push	{r7}
 800e496:	b095      	sub	sp, #84	; 0x54
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a4:	e853 3f00 	ldrex	r3, [r3]
 800e4a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4ba:	643b      	str	r3, [r7, #64]	; 0x40
 800e4bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4c2:	e841 2300 	strex	r3, r2, [r1]
 800e4c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1e6      	bne.n	800e49c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	3308      	adds	r3, #8
 800e4d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d6:	6a3b      	ldr	r3, [r7, #32]
 800e4d8:	e853 3f00 	ldrex	r3, [r3]
 800e4dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4de:	69fa      	ldr	r2, [r7, #28]
 800e4e0:	4b1e      	ldr	r3, [pc, #120]	; (800e55c <UART_EndRxTransfer+0xc8>)
 800e4e2:	4013      	ands	r3, r2
 800e4e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e4f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4f6:	e841 2300 	strex	r3, r2, [r1]
 800e4fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d1e5      	bne.n	800e4ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e506:	2b01      	cmp	r3, #1
 800e508:	d118      	bne.n	800e53c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	e853 3f00 	ldrex	r3, [r3]
 800e516:	60bb      	str	r3, [r7, #8]
   return(result);
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	f023 0310 	bic.w	r3, r3, #16
 800e51e:	647b      	str	r3, [r7, #68]	; 0x44
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	461a      	mov	r2, r3
 800e526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e528:	61bb      	str	r3, [r7, #24]
 800e52a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e52c:	6979      	ldr	r1, [r7, #20]
 800e52e:	69ba      	ldr	r2, [r7, #24]
 800e530:	e841 2300 	strex	r3, r2, [r1]
 800e534:	613b      	str	r3, [r7, #16]
   return(result);
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d1e6      	bne.n	800e50a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2220      	movs	r2, #32
 800e540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e550:	bf00      	nop
 800e552:	3754      	adds	r7, #84	; 0x54
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr
 800e55c:	effffffe 	.word	0xeffffffe

0800e560 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b090      	sub	sp, #64	; 0x40
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	69db      	ldr	r3, [r3, #28]
 800e572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e576:	d037      	beq.n	800e5e8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e57a:	2200      	movs	r2, #0
 800e57c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3308      	adds	r3, #8
 800e586:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	e853 3f00 	ldrex	r3, [r3]
 800e58e:	623b      	str	r3, [r7, #32]
   return(result);
 800e590:	6a3b      	ldr	r3, [r7, #32]
 800e592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e596:	63bb      	str	r3, [r7, #56]	; 0x38
 800e598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	3308      	adds	r3, #8
 800e59e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5a0:	633a      	str	r2, [r7, #48]	; 0x30
 800e5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5a8:	e841 2300 	strex	r3, r2, [r1]
 800e5ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d1e5      	bne.n	800e580 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	e853 3f00 	ldrex	r3, [r3]
 800e5c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5c8:	637b      	str	r3, [r7, #52]	; 0x34
 800e5ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5d2:	61fb      	str	r3, [r7, #28]
 800e5d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d6:	69b9      	ldr	r1, [r7, #24]
 800e5d8:	69fa      	ldr	r2, [r7, #28]
 800e5da:	e841 2300 	strex	r3, r2, [r1]
 800e5de:	617b      	str	r3, [r7, #20]
   return(result);
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d1e6      	bne.n	800e5b4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5e6:	e002      	b.n	800e5ee <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e5e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5ea:	f7f4 fe35 	bl	8003258 <HAL_UART_TxCpltCallback>
}
 800e5ee:	bf00      	nop
 800e5f0:	3740      	adds	r7, #64	; 0x40
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b084      	sub	sp, #16
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e602:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f7fe fe19 	bl	800d23c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e60a:	bf00      	nop
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b09c      	sub	sp, #112	; 0x70
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	69db      	ldr	r3, [r3, #28]
 800e624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e628:	d071      	beq.n	800e70e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e62a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e62c:	2200      	movs	r2, #0
 800e62e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e63a:	e853 3f00 	ldrex	r3, [r3]
 800e63e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e646:	66bb      	str	r3, [r7, #104]	; 0x68
 800e648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	461a      	mov	r2, r3
 800e64e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e650:	65bb      	str	r3, [r7, #88]	; 0x58
 800e652:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e658:	e841 2300 	strex	r3, r2, [r1]
 800e65c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1e6      	bne.n	800e632 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	3308      	adds	r3, #8
 800e66a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66e:	e853 3f00 	ldrex	r3, [r3]
 800e672:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e676:	f023 0301 	bic.w	r3, r3, #1
 800e67a:	667b      	str	r3, [r7, #100]	; 0x64
 800e67c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	3308      	adds	r3, #8
 800e682:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e684:	647a      	str	r2, [r7, #68]	; 0x44
 800e686:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e68a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e68c:	e841 2300 	strex	r3, r2, [r1]
 800e690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1e5      	bne.n	800e664 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	3308      	adds	r3, #8
 800e69e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a2:	e853 3f00 	ldrex	r3, [r3]
 800e6a6:	623b      	str	r3, [r7, #32]
   return(result);
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
 800e6aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6ae:	663b      	str	r3, [r7, #96]	; 0x60
 800e6b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e6b8:	633a      	str	r2, [r7, #48]	; 0x30
 800e6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6c0:	e841 2300 	strex	r3, r2, [r1]
 800e6c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d1e5      	bne.n	800e698 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e6cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6ce:	2220      	movs	r2, #32
 800e6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d118      	bne.n	800e70e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	e853 3f00 	ldrex	r3, [r3]
 800e6e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f023 0310 	bic.w	r3, r3, #16
 800e6f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6fa:	61fb      	str	r3, [r7, #28]
 800e6fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6fe:	69b9      	ldr	r1, [r7, #24]
 800e700:	69fa      	ldr	r2, [r7, #28]
 800e702:	e841 2300 	strex	r3, r2, [r1]
 800e706:	617b      	str	r3, [r7, #20]
   return(result);
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1e6      	bne.n	800e6dc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e70e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e712:	2b01      	cmp	r3, #1
 800e714:	d107      	bne.n	800e726 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e71c:	4619      	mov	r1, r3
 800e71e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e720:	f7fe fda0 	bl	800d264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e724:	e002      	b.n	800e72c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e726:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e728:	f7f4 fda8 	bl	800327c <HAL_UART_RxCpltCallback>
}
 800e72c:	bf00      	nop
 800e72e:	3770      	adds	r7, #112	; 0x70
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e740:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e746:	2b01      	cmp	r3, #1
 800e748:	d109      	bne.n	800e75e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e750:	085b      	lsrs	r3, r3, #1
 800e752:	b29b      	uxth	r3, r3
 800e754:	4619      	mov	r1, r3
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f7fe fd84 	bl	800d264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e75c:	e002      	b.n	800e764 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f7fe fd76 	bl	800d250 <HAL_UART_RxHalfCpltCallback>
}
 800e764:	bf00      	nop
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b086      	sub	sp, #24
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e778:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e780:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e788:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e794:	2b80      	cmp	r3, #128	; 0x80
 800e796:	d109      	bne.n	800e7ac <UART_DMAError+0x40>
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	2b21      	cmp	r3, #33	; 0x21
 800e79c:	d106      	bne.n	800e7ac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e7a6:	6978      	ldr	r0, [r7, #20]
 800e7a8:	f7ff fe32 	bl	800e410 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7b6:	2b40      	cmp	r3, #64	; 0x40
 800e7b8:	d109      	bne.n	800e7ce <UART_DMAError+0x62>
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2b22      	cmp	r3, #34	; 0x22
 800e7be:	d106      	bne.n	800e7ce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e7c8:	6978      	ldr	r0, [r7, #20]
 800e7ca:	f7ff fe63 	bl	800e494 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7d4:	f043 0210 	orr.w	r2, r3, #16
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e7de:	6978      	ldr	r0, [r7, #20]
 800e7e0:	f7f4 fd02 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7e4:	bf00      	nop
 800e7e6:	3718      	adds	r7, #24
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2200      	movs	r2, #0
 800e806:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e80a:	68f8      	ldr	r0, [r7, #12]
 800e80c:	f7f4 fcec 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e810:	bf00      	nop
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b088      	sub	sp, #32
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	e853 3f00 	ldrex	r3, [r3]
 800e82c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e834:	61fb      	str	r3, [r7, #28]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	461a      	mov	r2, r3
 800e83c:	69fb      	ldr	r3, [r7, #28]
 800e83e:	61bb      	str	r3, [r7, #24]
 800e840:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e842:	6979      	ldr	r1, [r7, #20]
 800e844:	69ba      	ldr	r2, [r7, #24]
 800e846:	e841 2300 	strex	r3, r2, [r1]
 800e84a:	613b      	str	r3, [r7, #16]
   return(result);
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1e6      	bne.n	800e820 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2220      	movs	r2, #32
 800e856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7f4 fcf9 	bl	8003258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e866:	bf00      	nop
 800e868:	3720      	adds	r7, #32
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e86e:	b480      	push	{r7}
 800e870:	b083      	sub	sp, #12
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e876:	bf00      	nop
 800e878:	370c      	adds	r7, #12
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr

0800e882 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e882:	b480      	push	{r7}
 800e884:	b083      	sub	sp, #12
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e88a:	bf00      	nop
 800e88c:	370c      	adds	r7, #12
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e896:	b480      	push	{r7}
 800e898:	b083      	sub	sp, #12
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e89e:	bf00      	nop
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b085      	sub	sp, #20
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d101      	bne.n	800e8c0 <HAL_UARTEx_DisableFifoMode+0x16>
 800e8bc:	2302      	movs	r3, #2
 800e8be:	e027      	b.n	800e910 <HAL_UARTEx_DisableFifoMode+0x66>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2224      	movs	r2, #36	; 0x24
 800e8cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f022 0201 	bic.w	r2, r2, #1
 800e8e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e8ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	68fa      	ldr	r2, [r7, #12]
 800e8fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2220      	movs	r2, #32
 800e902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3714      	adds	r7, #20
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d101      	bne.n	800e934 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e930:	2302      	movs	r3, #2
 800e932:	e02d      	b.n	800e990 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2224      	movs	r2, #36	; 0x24
 800e940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f022 0201 	bic.w	r2, r2, #1
 800e95a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	689b      	ldr	r3, [r3, #8]
 800e962:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	683a      	ldr	r2, [r7, #0]
 800e96c:	430a      	orrs	r2, r1
 800e96e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 f84f 	bl	800ea14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2220      	movs	r2, #32
 800e982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3710      	adds	r7, #16
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d101      	bne.n	800e9b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	e02d      	b.n	800ea0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2224      	movs	r2, #36	; 0x24
 800e9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f022 0201 	bic.w	r2, r2, #1
 800e9d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	689b      	ldr	r3, [r3, #8]
 800e9de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	683a      	ldr	r2, [r7, #0]
 800e9e8:	430a      	orrs	r2, r1
 800e9ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f000 f811 	bl	800ea14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2220      	movs	r2, #32
 800e9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d108      	bne.n	800ea36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2201      	movs	r2, #1
 800ea28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea34:	e031      	b.n	800ea9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea36:	2310      	movs	r3, #16
 800ea38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ea3a:	2310      	movs	r3, #16
 800ea3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	0e5b      	lsrs	r3, r3, #25
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	f003 0307 	and.w	r3, r3, #7
 800ea4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	0f5b      	lsrs	r3, r3, #29
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	f003 0307 	and.w	r3, r3, #7
 800ea5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea5e:	7bbb      	ldrb	r3, [r7, #14]
 800ea60:	7b3a      	ldrb	r2, [r7, #12]
 800ea62:	4911      	ldr	r1, [pc, #68]	; (800eaa8 <UARTEx_SetNbDataToProcess+0x94>)
 800ea64:	5c8a      	ldrb	r2, [r1, r2]
 800ea66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ea6a:	7b3a      	ldrb	r2, [r7, #12]
 800ea6c:	490f      	ldr	r1, [pc, #60]	; (800eaac <UARTEx_SetNbDataToProcess+0x98>)
 800ea6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea70:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea7c:	7bfb      	ldrb	r3, [r7, #15]
 800ea7e:	7b7a      	ldrb	r2, [r7, #13]
 800ea80:	4909      	ldr	r1, [pc, #36]	; (800eaa8 <UARTEx_SetNbDataToProcess+0x94>)
 800ea82:	5c8a      	ldrb	r2, [r1, r2]
 800ea84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ea88:	7b7a      	ldrb	r2, [r7, #13]
 800ea8a:	4908      	ldr	r1, [pc, #32]	; (800eaac <UARTEx_SetNbDataToProcess+0x98>)
 800ea8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea92:	b29a      	uxth	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ea9a:	bf00      	nop
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	0800fdf8 	.word	0x0800fdf8
 800eaac:	0800fe00 	.word	0x0800fe00

0800eab0 <__cxa_pure_virtual>:
 800eab0:	b508      	push	{r3, lr}
 800eab2:	f000 f80d 	bl	800ead0 <_ZSt9terminatev>

0800eab6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eab6:	b508      	push	{r3, lr}
 800eab8:	4780      	blx	r0
 800eaba:	f000 fe53 	bl	800f764 <abort>
	...

0800eac0 <_ZSt13get_terminatev>:
 800eac0:	4b02      	ldr	r3, [pc, #8]	; (800eacc <_ZSt13get_terminatev+0xc>)
 800eac2:	6818      	ldr	r0, [r3, #0]
 800eac4:	f3bf 8f5b 	dmb	ish
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	240001d8 	.word	0x240001d8

0800ead0 <_ZSt9terminatev>:
 800ead0:	b508      	push	{r3, lr}
 800ead2:	f7ff fff5 	bl	800eac0 <_ZSt13get_terminatev>
 800ead6:	f7ff ffee 	bl	800eab6 <_ZN10__cxxabiv111__terminateEPFvvE>
 800eada:	0000      	movs	r0, r0
 800eadc:	0000      	movs	r0, r0
	...

0800eae0 <cos>:
 800eae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eae2:	eeb0 7b40 	vmov.f64	d7, d0
 800eae6:	ee17 3a90 	vmov	r3, s15
 800eaea:	4a21      	ldr	r2, [pc, #132]	; (800eb70 <cos+0x90>)
 800eaec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	dc06      	bgt.n	800eb02 <cos+0x22>
 800eaf4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800eb68 <cos+0x88>
 800eaf8:	b005      	add	sp, #20
 800eafa:	f85d eb04 	ldr.w	lr, [sp], #4
 800eafe:	f000 b9cb 	b.w	800ee98 <__kernel_cos>
 800eb02:	4a1c      	ldr	r2, [pc, #112]	; (800eb74 <cos+0x94>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	dd04      	ble.n	800eb12 <cos+0x32>
 800eb08:	ee30 0b40 	vsub.f64	d0, d0, d0
 800eb0c:	b005      	add	sp, #20
 800eb0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb12:	4668      	mov	r0, sp
 800eb14:	f000 f87c 	bl	800ec10 <__ieee754_rem_pio2>
 800eb18:	f000 0003 	and.w	r0, r0, #3
 800eb1c:	2801      	cmp	r0, #1
 800eb1e:	d009      	beq.n	800eb34 <cos+0x54>
 800eb20:	2802      	cmp	r0, #2
 800eb22:	d010      	beq.n	800eb46 <cos+0x66>
 800eb24:	b9b0      	cbnz	r0, 800eb54 <cos+0x74>
 800eb26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb2a:	ed9d 0b00 	vldr	d0, [sp]
 800eb2e:	f000 f9b3 	bl	800ee98 <__kernel_cos>
 800eb32:	e7eb      	b.n	800eb0c <cos+0x2c>
 800eb34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb38:	ed9d 0b00 	vldr	d0, [sp]
 800eb3c:	f000 fcb0 	bl	800f4a0 <__kernel_sin>
 800eb40:	eeb1 0b40 	vneg.f64	d0, d0
 800eb44:	e7e2      	b.n	800eb0c <cos+0x2c>
 800eb46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb4a:	ed9d 0b00 	vldr	d0, [sp]
 800eb4e:	f000 f9a3 	bl	800ee98 <__kernel_cos>
 800eb52:	e7f5      	b.n	800eb40 <cos+0x60>
 800eb54:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb58:	ed9d 0b00 	vldr	d0, [sp]
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	f000 fc9f 	bl	800f4a0 <__kernel_sin>
 800eb62:	e7d3      	b.n	800eb0c <cos+0x2c>
 800eb64:	f3af 8000 	nop.w
	...
 800eb70:	3fe921fb 	.word	0x3fe921fb
 800eb74:	7fefffff 	.word	0x7fefffff

0800eb78 <sin>:
 800eb78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb7a:	eeb0 7b40 	vmov.f64	d7, d0
 800eb7e:	ee17 3a90 	vmov	r3, s15
 800eb82:	4a21      	ldr	r2, [pc, #132]	; (800ec08 <sin+0x90>)
 800eb84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	dc07      	bgt.n	800eb9c <sin+0x24>
 800eb8c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800ec00 <sin+0x88>
 800eb90:	2000      	movs	r0, #0
 800eb92:	b005      	add	sp, #20
 800eb94:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb98:	f000 bc82 	b.w	800f4a0 <__kernel_sin>
 800eb9c:	4a1b      	ldr	r2, [pc, #108]	; (800ec0c <sin+0x94>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	dd04      	ble.n	800ebac <sin+0x34>
 800eba2:	ee30 0b40 	vsub.f64	d0, d0, d0
 800eba6:	b005      	add	sp, #20
 800eba8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebac:	4668      	mov	r0, sp
 800ebae:	f000 f82f 	bl	800ec10 <__ieee754_rem_pio2>
 800ebb2:	f000 0003 	and.w	r0, r0, #3
 800ebb6:	2801      	cmp	r0, #1
 800ebb8:	d00a      	beq.n	800ebd0 <sin+0x58>
 800ebba:	2802      	cmp	r0, #2
 800ebbc:	d00f      	beq.n	800ebde <sin+0x66>
 800ebbe:	b9c0      	cbnz	r0, 800ebf2 <sin+0x7a>
 800ebc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebc4:	ed9d 0b00 	vldr	d0, [sp]
 800ebc8:	2001      	movs	r0, #1
 800ebca:	f000 fc69 	bl	800f4a0 <__kernel_sin>
 800ebce:	e7ea      	b.n	800eba6 <sin+0x2e>
 800ebd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebd4:	ed9d 0b00 	vldr	d0, [sp]
 800ebd8:	f000 f95e 	bl	800ee98 <__kernel_cos>
 800ebdc:	e7e3      	b.n	800eba6 <sin+0x2e>
 800ebde:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebe2:	ed9d 0b00 	vldr	d0, [sp]
 800ebe6:	2001      	movs	r0, #1
 800ebe8:	f000 fc5a 	bl	800f4a0 <__kernel_sin>
 800ebec:	eeb1 0b40 	vneg.f64	d0, d0
 800ebf0:	e7d9      	b.n	800eba6 <sin+0x2e>
 800ebf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebf6:	ed9d 0b00 	vldr	d0, [sp]
 800ebfa:	f000 f94d 	bl	800ee98 <__kernel_cos>
 800ebfe:	e7f5      	b.n	800ebec <sin+0x74>
	...
 800ec08:	3fe921fb 	.word	0x3fe921fb
 800ec0c:	7fefffff 	.word	0x7fefffff

0800ec10 <__ieee754_rem_pio2>:
 800ec10:	b570      	push	{r4, r5, r6, lr}
 800ec12:	eeb0 7b40 	vmov.f64	d7, d0
 800ec16:	ee17 5a90 	vmov	r5, s15
 800ec1a:	4b99      	ldr	r3, [pc, #612]	; (800ee80 <__ieee754_rem_pio2+0x270>)
 800ec1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ec20:	429e      	cmp	r6, r3
 800ec22:	b088      	sub	sp, #32
 800ec24:	4604      	mov	r4, r0
 800ec26:	dc07      	bgt.n	800ec38 <__ieee754_rem_pio2+0x28>
 800ec28:	2200      	movs	r2, #0
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	ed84 0b00 	vstr	d0, [r4]
 800ec30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ec34:	2000      	movs	r0, #0
 800ec36:	e01b      	b.n	800ec70 <__ieee754_rem_pio2+0x60>
 800ec38:	4b92      	ldr	r3, [pc, #584]	; (800ee84 <__ieee754_rem_pio2+0x274>)
 800ec3a:	429e      	cmp	r6, r3
 800ec3c:	dc3b      	bgt.n	800ecb6 <__ieee754_rem_pio2+0xa6>
 800ec3e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800ec42:	2d00      	cmp	r5, #0
 800ec44:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800ee40 <__ieee754_rem_pio2+0x230>
 800ec48:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800ec4c:	dd19      	ble.n	800ec82 <__ieee754_rem_pio2+0x72>
 800ec4e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ec52:	429e      	cmp	r6, r3
 800ec54:	d00e      	beq.n	800ec74 <__ieee754_rem_pio2+0x64>
 800ec56:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800ee48 <__ieee754_rem_pio2+0x238>
 800ec5a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800ec5e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ec62:	ed84 5b00 	vstr	d5, [r4]
 800ec66:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ec6a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec6e:	2001      	movs	r0, #1
 800ec70:	b008      	add	sp, #32
 800ec72:	bd70      	pop	{r4, r5, r6, pc}
 800ec74:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800ee50 <__ieee754_rem_pio2+0x240>
 800ec78:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ec7c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800ee58 <__ieee754_rem_pio2+0x248>
 800ec80:	e7eb      	b.n	800ec5a <__ieee754_rem_pio2+0x4a>
 800ec82:	429e      	cmp	r6, r3
 800ec84:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ec88:	d00e      	beq.n	800eca8 <__ieee754_rem_pio2+0x98>
 800ec8a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800ee48 <__ieee754_rem_pio2+0x238>
 800ec8e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ec92:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ec96:	ed84 5b00 	vstr	d5, [r4]
 800ec9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ec9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eca2:	ed84 7b02 	vstr	d7, [r4, #8]
 800eca6:	e7e3      	b.n	800ec70 <__ieee754_rem_pio2+0x60>
 800eca8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ee50 <__ieee754_rem_pio2+0x240>
 800ecac:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ecb0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ee58 <__ieee754_rem_pio2+0x248>
 800ecb4:	e7eb      	b.n	800ec8e <__ieee754_rem_pio2+0x7e>
 800ecb6:	4b74      	ldr	r3, [pc, #464]	; (800ee88 <__ieee754_rem_pio2+0x278>)
 800ecb8:	429e      	cmp	r6, r3
 800ecba:	dc70      	bgt.n	800ed9e <__ieee754_rem_pio2+0x18e>
 800ecbc:	f000 fc48 	bl	800f550 <fabs>
 800ecc0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ecc4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800ee60 <__ieee754_rem_pio2+0x250>
 800ecc8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800eccc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ecd0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ecd4:	ee17 0a90 	vmov	r0, s15
 800ecd8:	eeb1 4b45 	vneg.f64	d4, d5
 800ecdc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800ee40 <__ieee754_rem_pio2+0x230>
 800ece0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ece4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800ee48 <__ieee754_rem_pio2+0x238>
 800ece8:	281f      	cmp	r0, #31
 800ecea:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ecee:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ecf2:	dc08      	bgt.n	800ed06 <__ieee754_rem_pio2+0xf6>
 800ecf4:	4b65      	ldr	r3, [pc, #404]	; (800ee8c <__ieee754_rem_pio2+0x27c>)
 800ecf6:	1e42      	subs	r2, r0, #1
 800ecf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecfc:	42b3      	cmp	r3, r6
 800ecfe:	d002      	beq.n	800ed06 <__ieee754_rem_pio2+0xf6>
 800ed00:	ed84 6b00 	vstr	d6, [r4]
 800ed04:	e026      	b.n	800ed54 <__ieee754_rem_pio2+0x144>
 800ed06:	ee16 3a90 	vmov	r3, s13
 800ed0a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ed0e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ed12:	2b10      	cmp	r3, #16
 800ed14:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ed18:	ddf2      	ble.n	800ed00 <__ieee754_rem_pio2+0xf0>
 800ed1a:	eeb0 6b40 	vmov.f64	d6, d0
 800ed1e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800ee50 <__ieee754_rem_pio2+0x240>
 800ed22:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800ee58 <__ieee754_rem_pio2+0x248>
 800ed26:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ed2a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ed2e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800ed32:	eeb0 7b40 	vmov.f64	d7, d0
 800ed36:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800ed3a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ed3e:	ee13 3a90 	vmov	r3, s7
 800ed42:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ed46:	1ad3      	subs	r3, r2, r3
 800ed48:	2b31      	cmp	r3, #49	; 0x31
 800ed4a:	dc17      	bgt.n	800ed7c <__ieee754_rem_pio2+0x16c>
 800ed4c:	eeb0 0b46 	vmov.f64	d0, d6
 800ed50:	ed84 3b00 	vstr	d3, [r4]
 800ed54:	ed94 6b00 	vldr	d6, [r4]
 800ed58:	2d00      	cmp	r5, #0
 800ed5a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ed5e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ed62:	ed84 0b02 	vstr	d0, [r4, #8]
 800ed66:	da83      	bge.n	800ec70 <__ieee754_rem_pio2+0x60>
 800ed68:	eeb1 6b46 	vneg.f64	d6, d6
 800ed6c:	eeb1 0b40 	vneg.f64	d0, d0
 800ed70:	ed84 6b00 	vstr	d6, [r4]
 800ed74:	ed84 0b02 	vstr	d0, [r4, #8]
 800ed78:	4240      	negs	r0, r0
 800ed7a:	e779      	b.n	800ec70 <__ieee754_rem_pio2+0x60>
 800ed7c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800ee68 <__ieee754_rem_pio2+0x258>
 800ed80:	eeb0 0b46 	vmov.f64	d0, d6
 800ed84:	eea4 0b03 	vfma.f64	d0, d4, d3
 800ed88:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ed8c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800ee70 <__ieee754_rem_pio2+0x260>
 800ed90:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ed94:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800ed98:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ed9c:	e7b0      	b.n	800ed00 <__ieee754_rem_pio2+0xf0>
 800ed9e:	4b3c      	ldr	r3, [pc, #240]	; (800ee90 <__ieee754_rem_pio2+0x280>)
 800eda0:	429e      	cmp	r6, r3
 800eda2:	dd06      	ble.n	800edb2 <__ieee754_rem_pio2+0x1a2>
 800eda4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800eda8:	ed80 7b02 	vstr	d7, [r0, #8]
 800edac:	ed80 7b00 	vstr	d7, [r0]
 800edb0:	e740      	b.n	800ec34 <__ieee754_rem_pio2+0x24>
 800edb2:	1532      	asrs	r2, r6, #20
 800edb4:	ee10 0a10 	vmov	r0, s0
 800edb8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800edbc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800edc0:	ec41 0b17 	vmov	d7, r0, r1
 800edc4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800edc8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800ee78 <__ieee754_rem_pio2+0x268>
 800edcc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800edd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800edd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800edd8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800eddc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ede0:	a902      	add	r1, sp, #8
 800ede2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ede6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800edea:	ed8d 6b04 	vstr	d6, [sp, #16]
 800edee:	ee27 7b05 	vmul.f64	d7, d7, d5
 800edf2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800edf6:	2603      	movs	r6, #3
 800edf8:	4608      	mov	r0, r1
 800edfa:	ed91 7b04 	vldr	d7, [r1, #16]
 800edfe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee06:	4633      	mov	r3, r6
 800ee08:	f1a1 0108 	sub.w	r1, r1, #8
 800ee0c:	f106 36ff 	add.w	r6, r6, #4294967295
 800ee10:	d0f3      	beq.n	800edfa <__ieee754_rem_pio2+0x1ea>
 800ee12:	4920      	ldr	r1, [pc, #128]	; (800ee94 <__ieee754_rem_pio2+0x284>)
 800ee14:	9101      	str	r1, [sp, #4]
 800ee16:	2102      	movs	r1, #2
 800ee18:	9100      	str	r1, [sp, #0]
 800ee1a:	4621      	mov	r1, r4
 800ee1c:	f000 f8a8 	bl	800ef70 <__kernel_rem_pio2>
 800ee20:	2d00      	cmp	r5, #0
 800ee22:	f6bf af25 	bge.w	800ec70 <__ieee754_rem_pio2+0x60>
 800ee26:	ed94 7b00 	vldr	d7, [r4]
 800ee2a:	eeb1 7b47 	vneg.f64	d7, d7
 800ee2e:	ed84 7b00 	vstr	d7, [r4]
 800ee32:	ed94 7b02 	vldr	d7, [r4, #8]
 800ee36:	eeb1 7b47 	vneg.f64	d7, d7
 800ee3a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ee3e:	e79b      	b.n	800ed78 <__ieee754_rem_pio2+0x168>
 800ee40:	54400000 	.word	0x54400000
 800ee44:	3ff921fb 	.word	0x3ff921fb
 800ee48:	1a626331 	.word	0x1a626331
 800ee4c:	3dd0b461 	.word	0x3dd0b461
 800ee50:	1a600000 	.word	0x1a600000
 800ee54:	3dd0b461 	.word	0x3dd0b461
 800ee58:	2e037073 	.word	0x2e037073
 800ee5c:	3ba3198a 	.word	0x3ba3198a
 800ee60:	6dc9c883 	.word	0x6dc9c883
 800ee64:	3fe45f30 	.word	0x3fe45f30
 800ee68:	2e000000 	.word	0x2e000000
 800ee6c:	3ba3198a 	.word	0x3ba3198a
 800ee70:	252049c1 	.word	0x252049c1
 800ee74:	397b839a 	.word	0x397b839a
 800ee78:	00000000 	.word	0x00000000
 800ee7c:	41700000 	.word	0x41700000
 800ee80:	3fe921fb 	.word	0x3fe921fb
 800ee84:	4002d97b 	.word	0x4002d97b
 800ee88:	413921fb 	.word	0x413921fb
 800ee8c:	0800fe08 	.word	0x0800fe08
 800ee90:	7fefffff 	.word	0x7fefffff
 800ee94:	0800fe88 	.word	0x0800fe88

0800ee98 <__kernel_cos>:
 800ee98:	ee10 1a90 	vmov	r1, s1
 800ee9c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800eea0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800eea4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800eea8:	da05      	bge.n	800eeb6 <__kernel_cos+0x1e>
 800eeaa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800eeae:	ee17 3a90 	vmov	r3, s15
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d03d      	beq.n	800ef32 <__kernel_cos+0x9a>
 800eeb6:	ee20 3b00 	vmul.f64	d3, d0, d0
 800eeba:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ef38 <__kernel_cos+0xa0>
 800eebe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ef40 <__kernel_cos+0xa8>
 800eec2:	eea3 6b07 	vfma.f64	d6, d3, d7
 800eec6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ef48 <__kernel_cos+0xb0>
 800eeca:	eea6 7b03 	vfma.f64	d7, d6, d3
 800eece:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ef50 <__kernel_cos+0xb8>
 800eed2:	eea7 6b03 	vfma.f64	d6, d7, d3
 800eed6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ef58 <__kernel_cos+0xc0>
 800eeda:	4b23      	ldr	r3, [pc, #140]	; (800ef68 <__kernel_cos+0xd0>)
 800eedc:	eea6 7b03 	vfma.f64	d7, d6, d3
 800eee0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ef60 <__kernel_cos+0xc8>
 800eee4:	4299      	cmp	r1, r3
 800eee6:	eea7 6b03 	vfma.f64	d6, d7, d3
 800eeea:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800eeee:	ee26 5b03 	vmul.f64	d5, d6, d3
 800eef2:	ee23 7b07 	vmul.f64	d7, d3, d7
 800eef6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800eefa:	eea3 6b05 	vfma.f64	d6, d3, d5
 800eefe:	dc04      	bgt.n	800ef0a <__kernel_cos+0x72>
 800ef00:	ee37 6b46 	vsub.f64	d6, d7, d6
 800ef04:	ee34 0b46 	vsub.f64	d0, d4, d6
 800ef08:	4770      	bx	lr
 800ef0a:	4b18      	ldr	r3, [pc, #96]	; (800ef6c <__kernel_cos+0xd4>)
 800ef0c:	4299      	cmp	r1, r3
 800ef0e:	dc0d      	bgt.n	800ef2c <__kernel_cos+0x94>
 800ef10:	2200      	movs	r2, #0
 800ef12:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ef16:	ec43 2b15 	vmov	d5, r2, r3
 800ef1a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800ef1e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ef22:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef26:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ef2a:	4770      	bx	lr
 800ef2c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ef30:	e7f3      	b.n	800ef1a <__kernel_cos+0x82>
 800ef32:	eeb0 0b44 	vmov.f64	d0, d4
 800ef36:	4770      	bx	lr
 800ef38:	be8838d4 	.word	0xbe8838d4
 800ef3c:	bda8fae9 	.word	0xbda8fae9
 800ef40:	bdb4b1c4 	.word	0xbdb4b1c4
 800ef44:	3e21ee9e 	.word	0x3e21ee9e
 800ef48:	809c52ad 	.word	0x809c52ad
 800ef4c:	be927e4f 	.word	0xbe927e4f
 800ef50:	19cb1590 	.word	0x19cb1590
 800ef54:	3efa01a0 	.word	0x3efa01a0
 800ef58:	16c15177 	.word	0x16c15177
 800ef5c:	bf56c16c 	.word	0xbf56c16c
 800ef60:	5555554c 	.word	0x5555554c
 800ef64:	3fa55555 	.word	0x3fa55555
 800ef68:	3fd33332 	.word	0x3fd33332
 800ef6c:	3fe90000 	.word	0x3fe90000

0800ef70 <__kernel_rem_pio2>:
 800ef70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef74:	ed2d 8b06 	vpush	{d8-d10}
 800ef78:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800ef7c:	460f      	mov	r7, r1
 800ef7e:	9002      	str	r0, [sp, #8]
 800ef80:	49c5      	ldr	r1, [pc, #788]	; (800f298 <__kernel_rem_pio2+0x328>)
 800ef82:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800ef84:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800ef88:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800ef8c:	9301      	str	r3, [sp, #4]
 800ef8e:	f112 0f14 	cmn.w	r2, #20
 800ef92:	bfa8      	it	ge
 800ef94:	2018      	movge	r0, #24
 800ef96:	f103 31ff 	add.w	r1, r3, #4294967295
 800ef9a:	bfb8      	it	lt
 800ef9c:	2000      	movlt	r0, #0
 800ef9e:	f06f 0417 	mvn.w	r4, #23
 800efa2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800f280 <__kernel_rem_pio2+0x310>
 800efa6:	bfa4      	itt	ge
 800efa8:	f1a2 0a03 	subge.w	sl, r2, #3
 800efac:	fb9a f0f0 	sdivge	r0, sl, r0
 800efb0:	fb00 4404 	mla	r4, r0, r4, r4
 800efb4:	1a46      	subs	r6, r0, r1
 800efb6:	4414      	add	r4, r2
 800efb8:	eb09 0c01 	add.w	ip, r9, r1
 800efbc:	ad1a      	add	r5, sp, #104	; 0x68
 800efbe:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800efc2:	2200      	movs	r2, #0
 800efc4:	4562      	cmp	r2, ip
 800efc6:	dd10      	ble.n	800efea <__kernel_rem_pio2+0x7a>
 800efc8:	9a01      	ldr	r2, [sp, #4]
 800efca:	ab1a      	add	r3, sp, #104	; 0x68
 800efcc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800efd0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800efd4:	f04f 0c00 	mov.w	ip, #0
 800efd8:	45cc      	cmp	ip, r9
 800efda:	dc26      	bgt.n	800f02a <__kernel_rem_pio2+0xba>
 800efdc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800f280 <__kernel_rem_pio2+0x310>
 800efe0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800efe4:	4616      	mov	r6, r2
 800efe6:	2500      	movs	r5, #0
 800efe8:	e015      	b.n	800f016 <__kernel_rem_pio2+0xa6>
 800efea:	42d6      	cmn	r6, r2
 800efec:	d409      	bmi.n	800f002 <__kernel_rem_pio2+0x92>
 800efee:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800eff2:	ee07 3a90 	vmov	s15, r3
 800eff6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800effa:	eca5 7b02 	vstmia	r5!, {d7}
 800effe:	3201      	adds	r2, #1
 800f000:	e7e0      	b.n	800efc4 <__kernel_rem_pio2+0x54>
 800f002:	eeb0 7b46 	vmov.f64	d7, d6
 800f006:	e7f8      	b.n	800effa <__kernel_rem_pio2+0x8a>
 800f008:	ecb8 5b02 	vldmia	r8!, {d5}
 800f00c:	ed96 6b00 	vldr	d6, [r6]
 800f010:	3501      	adds	r5, #1
 800f012:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f016:	428d      	cmp	r5, r1
 800f018:	f1a6 0608 	sub.w	r6, r6, #8
 800f01c:	ddf4      	ble.n	800f008 <__kernel_rem_pio2+0x98>
 800f01e:	ecaa 7b02 	vstmia	sl!, {d7}
 800f022:	f10c 0c01 	add.w	ip, ip, #1
 800f026:	3208      	adds	r2, #8
 800f028:	e7d6      	b.n	800efd8 <__kernel_rem_pio2+0x68>
 800f02a:	ab06      	add	r3, sp, #24
 800f02c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800f288 <__kernel_rem_pio2+0x318>
 800f030:	ed9f ab97 	vldr	d10, [pc, #604]	; 800f290 <__kernel_rem_pio2+0x320>
 800f034:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f038:	9303      	str	r3, [sp, #12]
 800f03a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800f03e:	464d      	mov	r5, r9
 800f040:	00eb      	lsls	r3, r5, #3
 800f042:	9304      	str	r3, [sp, #16]
 800f044:	ab92      	add	r3, sp, #584	; 0x248
 800f046:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800f04a:	f10d 0b18 	add.w	fp, sp, #24
 800f04e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800f050:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800f054:	465e      	mov	r6, fp
 800f056:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800f05a:	4628      	mov	r0, r5
 800f05c:	2800      	cmp	r0, #0
 800f05e:	f1a2 0208 	sub.w	r2, r2, #8
 800f062:	dc4c      	bgt.n	800f0fe <__kernel_rem_pio2+0x18e>
 800f064:	4620      	mov	r0, r4
 800f066:	9105      	str	r1, [sp, #20]
 800f068:	f000 faf2 	bl	800f650 <scalbn>
 800f06c:	eeb0 8b40 	vmov.f64	d8, d0
 800f070:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800f074:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f078:	f000 fa76 	bl	800f568 <floor>
 800f07c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800f080:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f084:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f088:	2c00      	cmp	r4, #0
 800f08a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800f08e:	ee17 8a90 	vmov	r8, s15
 800f092:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f096:	9905      	ldr	r1, [sp, #20]
 800f098:	dd43      	ble.n	800f122 <__kernel_rem_pio2+0x1b2>
 800f09a:	1e68      	subs	r0, r5, #1
 800f09c:	ab06      	add	r3, sp, #24
 800f09e:	f1c4 0c18 	rsb	ip, r4, #24
 800f0a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f0a6:	fa46 f20c 	asr.w	r2, r6, ip
 800f0aa:	4490      	add	r8, r2
 800f0ac:	fa02 f20c 	lsl.w	r2, r2, ip
 800f0b0:	1ab6      	subs	r6, r6, r2
 800f0b2:	f1c4 0217 	rsb	r2, r4, #23
 800f0b6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800f0ba:	4116      	asrs	r6, r2
 800f0bc:	2e00      	cmp	r6, #0
 800f0be:	dd3f      	ble.n	800f140 <__kernel_rem_pio2+0x1d0>
 800f0c0:	f04f 0c00 	mov.w	ip, #0
 800f0c4:	f108 0801 	add.w	r8, r8, #1
 800f0c8:	4660      	mov	r0, ip
 800f0ca:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800f0ce:	4565      	cmp	r5, ip
 800f0d0:	dc6e      	bgt.n	800f1b0 <__kernel_rem_pio2+0x240>
 800f0d2:	2c00      	cmp	r4, #0
 800f0d4:	dd04      	ble.n	800f0e0 <__kernel_rem_pio2+0x170>
 800f0d6:	2c01      	cmp	r4, #1
 800f0d8:	d07f      	beq.n	800f1da <__kernel_rem_pio2+0x26a>
 800f0da:	2c02      	cmp	r4, #2
 800f0dc:	f000 8087 	beq.w	800f1ee <__kernel_rem_pio2+0x27e>
 800f0e0:	2e02      	cmp	r6, #2
 800f0e2:	d12d      	bne.n	800f140 <__kernel_rem_pio2+0x1d0>
 800f0e4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f0e8:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f0ec:	b340      	cbz	r0, 800f140 <__kernel_rem_pio2+0x1d0>
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	9105      	str	r1, [sp, #20]
 800f0f2:	f000 faad 	bl	800f650 <scalbn>
 800f0f6:	9905      	ldr	r1, [sp, #20]
 800f0f8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f0fc:	e020      	b.n	800f140 <__kernel_rem_pio2+0x1d0>
 800f0fe:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f102:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f106:	3801      	subs	r0, #1
 800f108:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f10c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f110:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f114:	eca6 0a01 	vstmia	r6!, {s0}
 800f118:	ed92 0b00 	vldr	d0, [r2]
 800f11c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f120:	e79c      	b.n	800f05c <__kernel_rem_pio2+0xec>
 800f122:	d105      	bne.n	800f130 <__kernel_rem_pio2+0x1c0>
 800f124:	1e6a      	subs	r2, r5, #1
 800f126:	ab06      	add	r3, sp, #24
 800f128:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800f12c:	15f6      	asrs	r6, r6, #23
 800f12e:	e7c5      	b.n	800f0bc <__kernel_rem_pio2+0x14c>
 800f130:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f134:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13c:	da36      	bge.n	800f1ac <__kernel_rem_pio2+0x23c>
 800f13e:	2600      	movs	r6, #0
 800f140:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f148:	f040 80aa 	bne.w	800f2a0 <__kernel_rem_pio2+0x330>
 800f14c:	f105 3bff 	add.w	fp, r5, #4294967295
 800f150:	4658      	mov	r0, fp
 800f152:	2200      	movs	r2, #0
 800f154:	4548      	cmp	r0, r9
 800f156:	da52      	bge.n	800f1fe <__kernel_rem_pio2+0x28e>
 800f158:	2a00      	cmp	r2, #0
 800f15a:	f000 8081 	beq.w	800f260 <__kernel_rem_pio2+0x2f0>
 800f15e:	ab06      	add	r3, sp, #24
 800f160:	3c18      	subs	r4, #24
 800f162:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f166:	2b00      	cmp	r3, #0
 800f168:	f000 8087 	beq.w	800f27a <__kernel_rem_pio2+0x30a>
 800f16c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f170:	4620      	mov	r0, r4
 800f172:	f000 fa6d 	bl	800f650 <scalbn>
 800f176:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f17a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800f288 <__kernel_rem_pio2+0x318>
 800f17e:	a96a      	add	r1, sp, #424	; 0x1a8
 800f180:	f103 0208 	add.w	r2, r3, #8
 800f184:	1888      	adds	r0, r1, r2
 800f186:	4659      	mov	r1, fp
 800f188:	2900      	cmp	r1, #0
 800f18a:	f280 80b7 	bge.w	800f2fc <__kernel_rem_pio2+0x38c>
 800f18e:	4659      	mov	r1, fp
 800f190:	2900      	cmp	r1, #0
 800f192:	f2c0 80d5 	blt.w	800f340 <__kernel_rem_pio2+0x3d0>
 800f196:	a86a      	add	r0, sp, #424	; 0x1a8
 800f198:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800f19c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800f280 <__kernel_rem_pio2+0x310>
 800f1a0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800f29c <__kernel_rem_pio2+0x32c>
 800f1a4:	2400      	movs	r4, #0
 800f1a6:	ebab 0001 	sub.w	r0, fp, r1
 800f1aa:	e0be      	b.n	800f32a <__kernel_rem_pio2+0x3ba>
 800f1ac:	2602      	movs	r6, #2
 800f1ae:	e787      	b.n	800f0c0 <__kernel_rem_pio2+0x150>
 800f1b0:	f8db 2000 	ldr.w	r2, [fp]
 800f1b4:	b958      	cbnz	r0, 800f1ce <__kernel_rem_pio2+0x25e>
 800f1b6:	b122      	cbz	r2, 800f1c2 <__kernel_rem_pio2+0x252>
 800f1b8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800f1bc:	f8cb 2000 	str.w	r2, [fp]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f10c 0c01 	add.w	ip, ip, #1
 800f1c6:	f10b 0b04 	add.w	fp, fp, #4
 800f1ca:	4610      	mov	r0, r2
 800f1cc:	e77f      	b.n	800f0ce <__kernel_rem_pio2+0x15e>
 800f1ce:	ebae 0202 	sub.w	r2, lr, r2
 800f1d2:	f8cb 2000 	str.w	r2, [fp]
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	e7f3      	b.n	800f1c2 <__kernel_rem_pio2+0x252>
 800f1da:	f105 3cff 	add.w	ip, r5, #4294967295
 800f1de:	ab06      	add	r3, sp, #24
 800f1e0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f1e4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f1e8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800f1ec:	e778      	b.n	800f0e0 <__kernel_rem_pio2+0x170>
 800f1ee:	f105 3cff 	add.w	ip, r5, #4294967295
 800f1f2:	ab06      	add	r3, sp, #24
 800f1f4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f1f8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800f1fc:	e7f4      	b.n	800f1e8 <__kernel_rem_pio2+0x278>
 800f1fe:	ab06      	add	r3, sp, #24
 800f200:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f204:	3801      	subs	r0, #1
 800f206:	431a      	orrs	r2, r3
 800f208:	e7a4      	b.n	800f154 <__kernel_rem_pio2+0x1e4>
 800f20a:	f10c 0c01 	add.w	ip, ip, #1
 800f20e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800f212:	2800      	cmp	r0, #0
 800f214:	d0f9      	beq.n	800f20a <__kernel_rem_pio2+0x29a>
 800f216:	9b04      	ldr	r3, [sp, #16]
 800f218:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f21c:	eb0d 0203 	add.w	r2, sp, r3
 800f220:	9b01      	ldr	r3, [sp, #4]
 800f222:	18e8      	adds	r0, r5, r3
 800f224:	ab1a      	add	r3, sp, #104	; 0x68
 800f226:	1c6e      	adds	r6, r5, #1
 800f228:	3a98      	subs	r2, #152	; 0x98
 800f22a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f22e:	4465      	add	r5, ip
 800f230:	42b5      	cmp	r5, r6
 800f232:	f6ff af05 	blt.w	800f040 <__kernel_rem_pio2+0xd0>
 800f236:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800f23a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f23e:	ee07 3a90 	vmov	s15, r3
 800f242:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f246:	f04f 0c00 	mov.w	ip, #0
 800f24a:	eca0 7b02 	vstmia	r0!, {d7}
 800f24e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f280 <__kernel_rem_pio2+0x310>
 800f252:	4680      	mov	r8, r0
 800f254:	458c      	cmp	ip, r1
 800f256:	dd07      	ble.n	800f268 <__kernel_rem_pio2+0x2f8>
 800f258:	eca2 7b02 	vstmia	r2!, {d7}
 800f25c:	3601      	adds	r6, #1
 800f25e:	e7e7      	b.n	800f230 <__kernel_rem_pio2+0x2c0>
 800f260:	9a03      	ldr	r2, [sp, #12]
 800f262:	f04f 0c01 	mov.w	ip, #1
 800f266:	e7d2      	b.n	800f20e <__kernel_rem_pio2+0x29e>
 800f268:	ecbe 5b02 	vldmia	lr!, {d5}
 800f26c:	ed38 6b02 	vldmdb	r8!, {d6}
 800f270:	f10c 0c01 	add.w	ip, ip, #1
 800f274:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f278:	e7ec      	b.n	800f254 <__kernel_rem_pio2+0x2e4>
 800f27a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f27e:	e76e      	b.n	800f15e <__kernel_rem_pio2+0x1ee>
	...
 800f28c:	3e700000 	.word	0x3e700000
 800f290:	00000000 	.word	0x00000000
 800f294:	41700000 	.word	0x41700000
 800f298:	0800ffd0 	.word	0x0800ffd0
 800f29c:	0800ff90 	.word	0x0800ff90
 800f2a0:	4260      	negs	r0, r4
 800f2a2:	eeb0 0b48 	vmov.f64	d0, d8
 800f2a6:	f000 f9d3 	bl	800f650 <scalbn>
 800f2aa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f488 <__kernel_rem_pio2+0x518>
 800f2ae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2b6:	db18      	blt.n	800f2ea <__kernel_rem_pio2+0x37a>
 800f2b8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800f490 <__kernel_rem_pio2+0x520>
 800f2bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f2c0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f2c4:	aa06      	add	r2, sp, #24
 800f2c6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f2ca:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f2ce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f2d2:	f105 0b01 	add.w	fp, r5, #1
 800f2d6:	ee10 3a10 	vmov	r3, s0
 800f2da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f2de:	ee17 3a10 	vmov	r3, s14
 800f2e2:	3418      	adds	r4, #24
 800f2e4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800f2e8:	e740      	b.n	800f16c <__kernel_rem_pio2+0x1fc>
 800f2ea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f2ee:	aa06      	add	r2, sp, #24
 800f2f0:	ee10 3a10 	vmov	r3, s0
 800f2f4:	46ab      	mov	fp, r5
 800f2f6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f2fa:	e737      	b.n	800f16c <__kernel_rem_pio2+0x1fc>
 800f2fc:	ac06      	add	r4, sp, #24
 800f2fe:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800f302:	9401      	str	r4, [sp, #4]
 800f304:	ee07 4a90 	vmov	s15, r4
 800f308:	3901      	subs	r1, #1
 800f30a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f30e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f312:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f316:	ed20 7b02 	vstmdb	r0!, {d7}
 800f31a:	e735      	b.n	800f188 <__kernel_rem_pio2+0x218>
 800f31c:	ecbc 5b02 	vldmia	ip!, {d5}
 800f320:	ecb5 6b02 	vldmia	r5!, {d6}
 800f324:	3401      	adds	r4, #1
 800f326:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f32a:	454c      	cmp	r4, r9
 800f32c:	dc01      	bgt.n	800f332 <__kernel_rem_pio2+0x3c2>
 800f32e:	4284      	cmp	r4, r0
 800f330:	ddf4      	ble.n	800f31c <__kernel_rem_pio2+0x3ac>
 800f332:	ac42      	add	r4, sp, #264	; 0x108
 800f334:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800f338:	ed80 7b00 	vstr	d7, [r0]
 800f33c:	3901      	subs	r1, #1
 800f33e:	e727      	b.n	800f190 <__kernel_rem_pio2+0x220>
 800f340:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800f342:	2902      	cmp	r1, #2
 800f344:	dc0a      	bgt.n	800f35c <__kernel_rem_pio2+0x3ec>
 800f346:	2900      	cmp	r1, #0
 800f348:	dc2c      	bgt.n	800f3a4 <__kernel_rem_pio2+0x434>
 800f34a:	d045      	beq.n	800f3d8 <__kernel_rem_pio2+0x468>
 800f34c:	f008 0007 	and.w	r0, r8, #7
 800f350:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800f354:	ecbd 8b06 	vpop	{d8-d10}
 800f358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800f35e:	2a03      	cmp	r2, #3
 800f360:	d1f4      	bne.n	800f34c <__kernel_rem_pio2+0x3dc>
 800f362:	aa42      	add	r2, sp, #264	; 0x108
 800f364:	4413      	add	r3, r2
 800f366:	461a      	mov	r2, r3
 800f368:	4619      	mov	r1, r3
 800f36a:	4658      	mov	r0, fp
 800f36c:	2800      	cmp	r0, #0
 800f36e:	f1a1 0108 	sub.w	r1, r1, #8
 800f372:	dc54      	bgt.n	800f41e <__kernel_rem_pio2+0x4ae>
 800f374:	4659      	mov	r1, fp
 800f376:	2901      	cmp	r1, #1
 800f378:	f1a2 0208 	sub.w	r2, r2, #8
 800f37c:	dc5f      	bgt.n	800f43e <__kernel_rem_pio2+0x4ce>
 800f37e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800f498 <__kernel_rem_pio2+0x528>
 800f382:	3308      	adds	r3, #8
 800f384:	f1bb 0f01 	cmp.w	fp, #1
 800f388:	dc69      	bgt.n	800f45e <__kernel_rem_pio2+0x4ee>
 800f38a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800f38e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800f392:	2e00      	cmp	r6, #0
 800f394:	d16a      	bne.n	800f46c <__kernel_rem_pio2+0x4fc>
 800f396:	ed87 5b00 	vstr	d5, [r7]
 800f39a:	ed87 6b02 	vstr	d6, [r7, #8]
 800f39e:	ed87 7b04 	vstr	d7, [r7, #16]
 800f3a2:	e7d3      	b.n	800f34c <__kernel_rem_pio2+0x3dc>
 800f3a4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f498 <__kernel_rem_pio2+0x528>
 800f3a8:	ab42      	add	r3, sp, #264	; 0x108
 800f3aa:	441a      	add	r2, r3
 800f3ac:	465b      	mov	r3, fp
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	da26      	bge.n	800f400 <__kernel_rem_pio2+0x490>
 800f3b2:	b35e      	cbz	r6, 800f40c <__kernel_rem_pio2+0x49c>
 800f3b4:	eeb1 7b46 	vneg.f64	d7, d6
 800f3b8:	ed87 7b00 	vstr	d7, [r7]
 800f3bc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800f3c0:	aa44      	add	r2, sp, #272	; 0x110
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3c8:	459b      	cmp	fp, r3
 800f3ca:	da22      	bge.n	800f412 <__kernel_rem_pio2+0x4a2>
 800f3cc:	b10e      	cbz	r6, 800f3d2 <__kernel_rem_pio2+0x462>
 800f3ce:	eeb1 7b47 	vneg.f64	d7, d7
 800f3d2:	ed87 7b02 	vstr	d7, [r7, #8]
 800f3d6:	e7b9      	b.n	800f34c <__kernel_rem_pio2+0x3dc>
 800f3d8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800f498 <__kernel_rem_pio2+0x528>
 800f3dc:	ab42      	add	r3, sp, #264	; 0x108
 800f3de:	441a      	add	r2, r3
 800f3e0:	f1bb 0f00 	cmp.w	fp, #0
 800f3e4:	da05      	bge.n	800f3f2 <__kernel_rem_pio2+0x482>
 800f3e6:	b10e      	cbz	r6, 800f3ec <__kernel_rem_pio2+0x47c>
 800f3e8:	eeb1 7b47 	vneg.f64	d7, d7
 800f3ec:	ed87 7b00 	vstr	d7, [r7]
 800f3f0:	e7ac      	b.n	800f34c <__kernel_rem_pio2+0x3dc>
 800f3f2:	ed32 6b02 	vldmdb	r2!, {d6}
 800f3f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f3fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f3fe:	e7ef      	b.n	800f3e0 <__kernel_rem_pio2+0x470>
 800f400:	ed32 7b02 	vldmdb	r2!, {d7}
 800f404:	3b01      	subs	r3, #1
 800f406:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f40a:	e7d0      	b.n	800f3ae <__kernel_rem_pio2+0x43e>
 800f40c:	eeb0 7b46 	vmov.f64	d7, d6
 800f410:	e7d2      	b.n	800f3b8 <__kernel_rem_pio2+0x448>
 800f412:	ecb2 6b02 	vldmia	r2!, {d6}
 800f416:	3301      	adds	r3, #1
 800f418:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f41c:	e7d4      	b.n	800f3c8 <__kernel_rem_pio2+0x458>
 800f41e:	ed91 7b00 	vldr	d7, [r1]
 800f422:	ed91 5b02 	vldr	d5, [r1, #8]
 800f426:	3801      	subs	r0, #1
 800f428:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f42c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f430:	ed81 6b00 	vstr	d6, [r1]
 800f434:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f438:	ed81 7b02 	vstr	d7, [r1, #8]
 800f43c:	e796      	b.n	800f36c <__kernel_rem_pio2+0x3fc>
 800f43e:	ed92 7b00 	vldr	d7, [r2]
 800f442:	ed92 5b02 	vldr	d5, [r2, #8]
 800f446:	3901      	subs	r1, #1
 800f448:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f44c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f450:	ed82 6b00 	vstr	d6, [r2]
 800f454:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f458:	ed82 7b02 	vstr	d7, [r2, #8]
 800f45c:	e78b      	b.n	800f376 <__kernel_rem_pio2+0x406>
 800f45e:	ed33 6b02 	vldmdb	r3!, {d6}
 800f462:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f466:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f46a:	e78b      	b.n	800f384 <__kernel_rem_pio2+0x414>
 800f46c:	eeb1 5b45 	vneg.f64	d5, d5
 800f470:	eeb1 6b46 	vneg.f64	d6, d6
 800f474:	ed87 5b00 	vstr	d5, [r7]
 800f478:	eeb1 7b47 	vneg.f64	d7, d7
 800f47c:	ed87 6b02 	vstr	d6, [r7, #8]
 800f480:	e78d      	b.n	800f39e <__kernel_rem_pio2+0x42e>
 800f482:	bf00      	nop
 800f484:	f3af 8000 	nop.w
 800f488:	00000000 	.word	0x00000000
 800f48c:	41700000 	.word	0x41700000
 800f490:	00000000 	.word	0x00000000
 800f494:	3e700000 	.word	0x3e700000
	...

0800f4a0 <__kernel_sin>:
 800f4a0:	ee10 3a90 	vmov	r3, s1
 800f4a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f4a8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f4ac:	da04      	bge.n	800f4b8 <__kernel_sin+0x18>
 800f4ae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f4b2:	ee17 3a90 	vmov	r3, s15
 800f4b6:	b35b      	cbz	r3, 800f510 <__kernel_sin+0x70>
 800f4b8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f4bc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f4c0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f518 <__kernel_sin+0x78>
 800f4c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f520 <__kernel_sin+0x80>
 800f4c8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f4cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f528 <__kernel_sin+0x88>
 800f4d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f4d4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f530 <__kernel_sin+0x90>
 800f4d8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f4dc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f538 <__kernel_sin+0x98>
 800f4e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f4e4:	b930      	cbnz	r0, 800f4f4 <__kernel_sin+0x54>
 800f4e6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f540 <__kernel_sin+0xa0>
 800f4ea:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f4ee:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f4f2:	4770      	bx	lr
 800f4f4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f4f8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f4fc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f500:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f504:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f548 <__kernel_sin+0xa8>
 800f508:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f50c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	f3af 8000 	nop.w
 800f518:	5acfd57c 	.word	0x5acfd57c
 800f51c:	3de5d93a 	.word	0x3de5d93a
 800f520:	8a2b9ceb 	.word	0x8a2b9ceb
 800f524:	be5ae5e6 	.word	0xbe5ae5e6
 800f528:	57b1fe7d 	.word	0x57b1fe7d
 800f52c:	3ec71de3 	.word	0x3ec71de3
 800f530:	19c161d5 	.word	0x19c161d5
 800f534:	bf2a01a0 	.word	0xbf2a01a0
 800f538:	1110f8a6 	.word	0x1110f8a6
 800f53c:	3f811111 	.word	0x3f811111
 800f540:	55555549 	.word	0x55555549
 800f544:	bfc55555 	.word	0xbfc55555
 800f548:	55555549 	.word	0x55555549
 800f54c:	3fc55555 	.word	0x3fc55555

0800f550 <fabs>:
 800f550:	ec51 0b10 	vmov	r0, r1, d0
 800f554:	ee10 2a10 	vmov	r2, s0
 800f558:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f55c:	ec43 2b10 	vmov	d0, r2, r3
 800f560:	4770      	bx	lr
 800f562:	0000      	movs	r0, r0
 800f564:	0000      	movs	r0, r0
	...

0800f568 <floor>:
 800f568:	ee10 1a90 	vmov	r1, s1
 800f56c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f570:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f574:	2b13      	cmp	r3, #19
 800f576:	b530      	push	{r4, r5, lr}
 800f578:	ee10 0a10 	vmov	r0, s0
 800f57c:	ee10 5a10 	vmov	r5, s0
 800f580:	dc31      	bgt.n	800f5e6 <floor+0x7e>
 800f582:	2b00      	cmp	r3, #0
 800f584:	da15      	bge.n	800f5b2 <floor+0x4a>
 800f586:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f640 <floor+0xd8>
 800f58a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f58e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f596:	dd07      	ble.n	800f5a8 <floor+0x40>
 800f598:	2900      	cmp	r1, #0
 800f59a:	da4e      	bge.n	800f63a <floor+0xd2>
 800f59c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f5a0:	4318      	orrs	r0, r3
 800f5a2:	d001      	beq.n	800f5a8 <floor+0x40>
 800f5a4:	4928      	ldr	r1, [pc, #160]	; (800f648 <floor+0xe0>)
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	ec43 2b10 	vmov	d0, r2, r3
 800f5b0:	e020      	b.n	800f5f4 <floor+0x8c>
 800f5b2:	4a26      	ldr	r2, [pc, #152]	; (800f64c <floor+0xe4>)
 800f5b4:	411a      	asrs	r2, r3
 800f5b6:	ea01 0402 	and.w	r4, r1, r2
 800f5ba:	4304      	orrs	r4, r0
 800f5bc:	d01a      	beq.n	800f5f4 <floor+0x8c>
 800f5be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f640 <floor+0xd8>
 800f5c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f5c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ce:	ddeb      	ble.n	800f5a8 <floor+0x40>
 800f5d0:	2900      	cmp	r1, #0
 800f5d2:	bfbe      	ittt	lt
 800f5d4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f5d8:	fa40 f303 	asrlt.w	r3, r0, r3
 800f5dc:	18c9      	addlt	r1, r1, r3
 800f5de:	ea21 0102 	bic.w	r1, r1, r2
 800f5e2:	2000      	movs	r0, #0
 800f5e4:	e7e0      	b.n	800f5a8 <floor+0x40>
 800f5e6:	2b33      	cmp	r3, #51	; 0x33
 800f5e8:	dd05      	ble.n	800f5f6 <floor+0x8e>
 800f5ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5ee:	d101      	bne.n	800f5f4 <floor+0x8c>
 800f5f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f5f4:	bd30      	pop	{r4, r5, pc}
 800f5f6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fe:	40e2      	lsrs	r2, r4
 800f600:	4202      	tst	r2, r0
 800f602:	d0f7      	beq.n	800f5f4 <floor+0x8c>
 800f604:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f640 <floor+0xd8>
 800f608:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f60c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f614:	ddc8      	ble.n	800f5a8 <floor+0x40>
 800f616:	2900      	cmp	r1, #0
 800f618:	da02      	bge.n	800f620 <floor+0xb8>
 800f61a:	2b14      	cmp	r3, #20
 800f61c:	d103      	bne.n	800f626 <floor+0xbe>
 800f61e:	3101      	adds	r1, #1
 800f620:	ea20 0002 	bic.w	r0, r0, r2
 800f624:	e7c0      	b.n	800f5a8 <floor+0x40>
 800f626:	2401      	movs	r4, #1
 800f628:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f62c:	fa04 f303 	lsl.w	r3, r4, r3
 800f630:	4418      	add	r0, r3
 800f632:	42a8      	cmp	r0, r5
 800f634:	bf38      	it	cc
 800f636:	1909      	addcc	r1, r1, r4
 800f638:	e7f2      	b.n	800f620 <floor+0xb8>
 800f63a:	2000      	movs	r0, #0
 800f63c:	4601      	mov	r1, r0
 800f63e:	e7b3      	b.n	800f5a8 <floor+0x40>
 800f640:	8800759c 	.word	0x8800759c
 800f644:	7e37e43c 	.word	0x7e37e43c
 800f648:	bff00000 	.word	0xbff00000
 800f64c:	000fffff 	.word	0x000fffff

0800f650 <scalbn>:
 800f650:	ee10 1a90 	vmov	r1, s1
 800f654:	b510      	push	{r4, lr}
 800f656:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f65a:	b98c      	cbnz	r4, 800f680 <scalbn+0x30>
 800f65c:	ee10 3a10 	vmov	r3, s0
 800f660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f664:	430b      	orrs	r3, r1
 800f666:	d011      	beq.n	800f68c <scalbn+0x3c>
 800f668:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800f730 <scalbn+0xe0>
 800f66c:	4b3c      	ldr	r3, [pc, #240]	; (800f760 <scalbn+0x110>)
 800f66e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f672:	4298      	cmp	r0, r3
 800f674:	da0b      	bge.n	800f68e <scalbn+0x3e>
 800f676:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f738 <scalbn+0xe8>
 800f67a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f67e:	e005      	b.n	800f68c <scalbn+0x3c>
 800f680:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800f684:	429c      	cmp	r4, r3
 800f686:	d107      	bne.n	800f698 <scalbn+0x48>
 800f688:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f68c:	bd10      	pop	{r4, pc}
 800f68e:	ee10 1a90 	vmov	r1, s1
 800f692:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f696:	3c36      	subs	r4, #54	; 0x36
 800f698:	4404      	add	r4, r0
 800f69a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800f69e:	429c      	cmp	r4, r3
 800f6a0:	dd0d      	ble.n	800f6be <scalbn+0x6e>
 800f6a2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f740 <scalbn+0xf0>
 800f6a6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f748 <scalbn+0xf8>
 800f6aa:	eeb0 6b47 	vmov.f64	d6, d7
 800f6ae:	ee10 3a90 	vmov	r3, s1
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f6b8:	ee27 0b06 	vmul.f64	d0, d7, d6
 800f6bc:	e7e6      	b.n	800f68c <scalbn+0x3c>
 800f6be:	2c00      	cmp	r4, #0
 800f6c0:	dd0a      	ble.n	800f6d8 <scalbn+0x88>
 800f6c2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f6c6:	ec53 2b10 	vmov	r2, r3, d0
 800f6ca:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f6ce:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f6d2:	ec43 2b10 	vmov	d0, r2, r3
 800f6d6:	e7d9      	b.n	800f68c <scalbn+0x3c>
 800f6d8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800f6dc:	da19      	bge.n	800f712 <scalbn+0xc2>
 800f6de:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f6e2:	4298      	cmp	r0, r3
 800f6e4:	ee10 3a90 	vmov	r3, s1
 800f6e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f6ec:	dd09      	ble.n	800f702 <scalbn+0xb2>
 800f6ee:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800f740 <scalbn+0xf0>
 800f6f2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800f748 <scalbn+0xf8>
 800f6f6:	eeb0 7b40 	vmov.f64	d7, d0
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800f700:	e7bb      	b.n	800f67a <scalbn+0x2a>
 800f702:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800f738 <scalbn+0xe8>
 800f706:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800f750 <scalbn+0x100>
 800f70a:	eeb0 7b40 	vmov.f64	d7, d0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	e7f4      	b.n	800f6fc <scalbn+0xac>
 800f712:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f716:	ec53 2b10 	vmov	r2, r3, d0
 800f71a:	3436      	adds	r4, #54	; 0x36
 800f71c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f720:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f724:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f758 <scalbn+0x108>
 800f728:	ec43 2b10 	vmov	d0, r2, r3
 800f72c:	e7a5      	b.n	800f67a <scalbn+0x2a>
 800f72e:	bf00      	nop
 800f730:	00000000 	.word	0x00000000
 800f734:	43500000 	.word	0x43500000
 800f738:	c2f8f359 	.word	0xc2f8f359
 800f73c:	01a56e1f 	.word	0x01a56e1f
 800f740:	8800759c 	.word	0x8800759c
 800f744:	7e37e43c 	.word	0x7e37e43c
 800f748:	8800759c 	.word	0x8800759c
 800f74c:	fe37e43c 	.word	0xfe37e43c
 800f750:	c2f8f359 	.word	0xc2f8f359
 800f754:	81a56e1f 	.word	0x81a56e1f
 800f758:	00000000 	.word	0x00000000
 800f75c:	3c900000 	.word	0x3c900000
 800f760:	ffff3cb0 	.word	0xffff3cb0

0800f764 <abort>:
 800f764:	b508      	push	{r3, lr}
 800f766:	2006      	movs	r0, #6
 800f768:	f000 f874 	bl	800f854 <raise>
 800f76c:	2001      	movs	r0, #1
 800f76e:	f7f5 f9b1 	bl	8004ad4 <_exit>
	...

0800f774 <__errno>:
 800f774:	4b01      	ldr	r3, [pc, #4]	; (800f77c <__errno+0x8>)
 800f776:	6818      	ldr	r0, [r3, #0]
 800f778:	4770      	bx	lr
 800f77a:	bf00      	nop
 800f77c:	240001dc 	.word	0x240001dc

0800f780 <__libc_init_array>:
 800f780:	b570      	push	{r4, r5, r6, lr}
 800f782:	4d0d      	ldr	r5, [pc, #52]	; (800f7b8 <__libc_init_array+0x38>)
 800f784:	4c0d      	ldr	r4, [pc, #52]	; (800f7bc <__libc_init_array+0x3c>)
 800f786:	1b64      	subs	r4, r4, r5
 800f788:	10a4      	asrs	r4, r4, #2
 800f78a:	2600      	movs	r6, #0
 800f78c:	42a6      	cmp	r6, r4
 800f78e:	d109      	bne.n	800f7a4 <__libc_init_array+0x24>
 800f790:	4d0b      	ldr	r5, [pc, #44]	; (800f7c0 <__libc_init_array+0x40>)
 800f792:	4c0c      	ldr	r4, [pc, #48]	; (800f7c4 <__libc_init_array+0x44>)
 800f794:	f000 f9b0 	bl	800faf8 <_init>
 800f798:	1b64      	subs	r4, r4, r5
 800f79a:	10a4      	asrs	r4, r4, #2
 800f79c:	2600      	movs	r6, #0
 800f79e:	42a6      	cmp	r6, r4
 800f7a0:	d105      	bne.n	800f7ae <__libc_init_array+0x2e>
 800f7a2:	bd70      	pop	{r4, r5, r6, pc}
 800f7a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7a8:	4798      	blx	r3
 800f7aa:	3601      	adds	r6, #1
 800f7ac:	e7ee      	b.n	800f78c <__libc_init_array+0xc>
 800f7ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7b2:	4798      	blx	r3
 800f7b4:	3601      	adds	r6, #1
 800f7b6:	e7f2      	b.n	800f79e <__libc_init_array+0x1e>
 800f7b8:	0800ffe8 	.word	0x0800ffe8
 800f7bc:	0800ffe8 	.word	0x0800ffe8
 800f7c0:	0800ffe8 	.word	0x0800ffe8
 800f7c4:	0800fff0 	.word	0x0800fff0

0800f7c8 <memcpy>:
 800f7c8:	440a      	add	r2, r1
 800f7ca:	4291      	cmp	r1, r2
 800f7cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7d0:	d100      	bne.n	800f7d4 <memcpy+0xc>
 800f7d2:	4770      	bx	lr
 800f7d4:	b510      	push	{r4, lr}
 800f7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7de:	4291      	cmp	r1, r2
 800f7e0:	d1f9      	bne.n	800f7d6 <memcpy+0xe>
 800f7e2:	bd10      	pop	{r4, pc}

0800f7e4 <memset>:
 800f7e4:	4402      	add	r2, r0
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d100      	bne.n	800f7ee <memset+0xa>
 800f7ec:	4770      	bx	lr
 800f7ee:	f803 1b01 	strb.w	r1, [r3], #1
 800f7f2:	e7f9      	b.n	800f7e8 <memset+0x4>

0800f7f4 <realloc>:
 800f7f4:	4b02      	ldr	r3, [pc, #8]	; (800f800 <realloc+0xc>)
 800f7f6:	460a      	mov	r2, r1
 800f7f8:	4601      	mov	r1, r0
 800f7fa:	6818      	ldr	r0, [r3, #0]
 800f7fc:	f000 b8da 	b.w	800f9b4 <_realloc_r>
 800f800:	240001dc 	.word	0x240001dc

0800f804 <_raise_r>:
 800f804:	291f      	cmp	r1, #31
 800f806:	b538      	push	{r3, r4, r5, lr}
 800f808:	4604      	mov	r4, r0
 800f80a:	460d      	mov	r5, r1
 800f80c:	d904      	bls.n	800f818 <_raise_r+0x14>
 800f80e:	2316      	movs	r3, #22
 800f810:	6003      	str	r3, [r0, #0]
 800f812:	f04f 30ff 	mov.w	r0, #4294967295
 800f816:	bd38      	pop	{r3, r4, r5, pc}
 800f818:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f81a:	b112      	cbz	r2, 800f822 <_raise_r+0x1e>
 800f81c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f820:	b94b      	cbnz	r3, 800f836 <_raise_r+0x32>
 800f822:	4620      	mov	r0, r4
 800f824:	f000 f830 	bl	800f888 <_getpid_r>
 800f828:	462a      	mov	r2, r5
 800f82a:	4601      	mov	r1, r0
 800f82c:	4620      	mov	r0, r4
 800f82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f832:	f000 b817 	b.w	800f864 <_kill_r>
 800f836:	2b01      	cmp	r3, #1
 800f838:	d00a      	beq.n	800f850 <_raise_r+0x4c>
 800f83a:	1c59      	adds	r1, r3, #1
 800f83c:	d103      	bne.n	800f846 <_raise_r+0x42>
 800f83e:	2316      	movs	r3, #22
 800f840:	6003      	str	r3, [r0, #0]
 800f842:	2001      	movs	r0, #1
 800f844:	e7e7      	b.n	800f816 <_raise_r+0x12>
 800f846:	2400      	movs	r4, #0
 800f848:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f84c:	4628      	mov	r0, r5
 800f84e:	4798      	blx	r3
 800f850:	2000      	movs	r0, #0
 800f852:	e7e0      	b.n	800f816 <_raise_r+0x12>

0800f854 <raise>:
 800f854:	4b02      	ldr	r3, [pc, #8]	; (800f860 <raise+0xc>)
 800f856:	4601      	mov	r1, r0
 800f858:	6818      	ldr	r0, [r3, #0]
 800f85a:	f7ff bfd3 	b.w	800f804 <_raise_r>
 800f85e:	bf00      	nop
 800f860:	240001dc 	.word	0x240001dc

0800f864 <_kill_r>:
 800f864:	b538      	push	{r3, r4, r5, lr}
 800f866:	4d07      	ldr	r5, [pc, #28]	; (800f884 <_kill_r+0x20>)
 800f868:	2300      	movs	r3, #0
 800f86a:	4604      	mov	r4, r0
 800f86c:	4608      	mov	r0, r1
 800f86e:	4611      	mov	r1, r2
 800f870:	602b      	str	r3, [r5, #0]
 800f872:	f7f5 f91f 	bl	8004ab4 <_kill>
 800f876:	1c43      	adds	r3, r0, #1
 800f878:	d102      	bne.n	800f880 <_kill_r+0x1c>
 800f87a:	682b      	ldr	r3, [r5, #0]
 800f87c:	b103      	cbz	r3, 800f880 <_kill_r+0x1c>
 800f87e:	6023      	str	r3, [r4, #0]
 800f880:	bd38      	pop	{r3, r4, r5, pc}
 800f882:	bf00      	nop
 800f884:	24001cb0 	.word	0x24001cb0

0800f888 <_getpid_r>:
 800f888:	f7f5 b90c 	b.w	8004aa4 <_getpid>

0800f88c <sbrk_aligned>:
 800f88c:	b570      	push	{r4, r5, r6, lr}
 800f88e:	4e0e      	ldr	r6, [pc, #56]	; (800f8c8 <sbrk_aligned+0x3c>)
 800f890:	460c      	mov	r4, r1
 800f892:	6831      	ldr	r1, [r6, #0]
 800f894:	4605      	mov	r5, r0
 800f896:	b911      	cbnz	r1, 800f89e <sbrk_aligned+0x12>
 800f898:	f000 f8bc 	bl	800fa14 <_sbrk_r>
 800f89c:	6030      	str	r0, [r6, #0]
 800f89e:	4621      	mov	r1, r4
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	f000 f8b7 	bl	800fa14 <_sbrk_r>
 800f8a6:	1c43      	adds	r3, r0, #1
 800f8a8:	d00a      	beq.n	800f8c0 <sbrk_aligned+0x34>
 800f8aa:	1cc4      	adds	r4, r0, #3
 800f8ac:	f024 0403 	bic.w	r4, r4, #3
 800f8b0:	42a0      	cmp	r0, r4
 800f8b2:	d007      	beq.n	800f8c4 <sbrk_aligned+0x38>
 800f8b4:	1a21      	subs	r1, r4, r0
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	f000 f8ac 	bl	800fa14 <_sbrk_r>
 800f8bc:	3001      	adds	r0, #1
 800f8be:	d101      	bne.n	800f8c4 <sbrk_aligned+0x38>
 800f8c0:	f04f 34ff 	mov.w	r4, #4294967295
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	bd70      	pop	{r4, r5, r6, pc}
 800f8c8:	24001cac 	.word	0x24001cac

0800f8cc <_malloc_r>:
 800f8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d0:	1ccd      	adds	r5, r1, #3
 800f8d2:	f025 0503 	bic.w	r5, r5, #3
 800f8d6:	3508      	adds	r5, #8
 800f8d8:	2d0c      	cmp	r5, #12
 800f8da:	bf38      	it	cc
 800f8dc:	250c      	movcc	r5, #12
 800f8de:	2d00      	cmp	r5, #0
 800f8e0:	4607      	mov	r7, r0
 800f8e2:	db01      	blt.n	800f8e8 <_malloc_r+0x1c>
 800f8e4:	42a9      	cmp	r1, r5
 800f8e6:	d905      	bls.n	800f8f4 <_malloc_r+0x28>
 800f8e8:	230c      	movs	r3, #12
 800f8ea:	603b      	str	r3, [r7, #0]
 800f8ec:	2600      	movs	r6, #0
 800f8ee:	4630      	mov	r0, r6
 800f8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f4:	4e2e      	ldr	r6, [pc, #184]	; (800f9b0 <_malloc_r+0xe4>)
 800f8f6:	f000 f89d 	bl	800fa34 <__malloc_lock>
 800f8fa:	6833      	ldr	r3, [r6, #0]
 800f8fc:	461c      	mov	r4, r3
 800f8fe:	bb34      	cbnz	r4, 800f94e <_malloc_r+0x82>
 800f900:	4629      	mov	r1, r5
 800f902:	4638      	mov	r0, r7
 800f904:	f7ff ffc2 	bl	800f88c <sbrk_aligned>
 800f908:	1c43      	adds	r3, r0, #1
 800f90a:	4604      	mov	r4, r0
 800f90c:	d14d      	bne.n	800f9aa <_malloc_r+0xde>
 800f90e:	6834      	ldr	r4, [r6, #0]
 800f910:	4626      	mov	r6, r4
 800f912:	2e00      	cmp	r6, #0
 800f914:	d140      	bne.n	800f998 <_malloc_r+0xcc>
 800f916:	6823      	ldr	r3, [r4, #0]
 800f918:	4631      	mov	r1, r6
 800f91a:	4638      	mov	r0, r7
 800f91c:	eb04 0803 	add.w	r8, r4, r3
 800f920:	f000 f878 	bl	800fa14 <_sbrk_r>
 800f924:	4580      	cmp	r8, r0
 800f926:	d13a      	bne.n	800f99e <_malloc_r+0xd2>
 800f928:	6821      	ldr	r1, [r4, #0]
 800f92a:	3503      	adds	r5, #3
 800f92c:	1a6d      	subs	r5, r5, r1
 800f92e:	f025 0503 	bic.w	r5, r5, #3
 800f932:	3508      	adds	r5, #8
 800f934:	2d0c      	cmp	r5, #12
 800f936:	bf38      	it	cc
 800f938:	250c      	movcc	r5, #12
 800f93a:	4629      	mov	r1, r5
 800f93c:	4638      	mov	r0, r7
 800f93e:	f7ff ffa5 	bl	800f88c <sbrk_aligned>
 800f942:	3001      	adds	r0, #1
 800f944:	d02b      	beq.n	800f99e <_malloc_r+0xd2>
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	442b      	add	r3, r5
 800f94a:	6023      	str	r3, [r4, #0]
 800f94c:	e00e      	b.n	800f96c <_malloc_r+0xa0>
 800f94e:	6822      	ldr	r2, [r4, #0]
 800f950:	1b52      	subs	r2, r2, r5
 800f952:	d41e      	bmi.n	800f992 <_malloc_r+0xc6>
 800f954:	2a0b      	cmp	r2, #11
 800f956:	d916      	bls.n	800f986 <_malloc_r+0xba>
 800f958:	1961      	adds	r1, r4, r5
 800f95a:	42a3      	cmp	r3, r4
 800f95c:	6025      	str	r5, [r4, #0]
 800f95e:	bf18      	it	ne
 800f960:	6059      	strne	r1, [r3, #4]
 800f962:	6863      	ldr	r3, [r4, #4]
 800f964:	bf08      	it	eq
 800f966:	6031      	streq	r1, [r6, #0]
 800f968:	5162      	str	r2, [r4, r5]
 800f96a:	604b      	str	r3, [r1, #4]
 800f96c:	4638      	mov	r0, r7
 800f96e:	f104 060b 	add.w	r6, r4, #11
 800f972:	f000 f865 	bl	800fa40 <__malloc_unlock>
 800f976:	f026 0607 	bic.w	r6, r6, #7
 800f97a:	1d23      	adds	r3, r4, #4
 800f97c:	1af2      	subs	r2, r6, r3
 800f97e:	d0b6      	beq.n	800f8ee <_malloc_r+0x22>
 800f980:	1b9b      	subs	r3, r3, r6
 800f982:	50a3      	str	r3, [r4, r2]
 800f984:	e7b3      	b.n	800f8ee <_malloc_r+0x22>
 800f986:	6862      	ldr	r2, [r4, #4]
 800f988:	42a3      	cmp	r3, r4
 800f98a:	bf0c      	ite	eq
 800f98c:	6032      	streq	r2, [r6, #0]
 800f98e:	605a      	strne	r2, [r3, #4]
 800f990:	e7ec      	b.n	800f96c <_malloc_r+0xa0>
 800f992:	4623      	mov	r3, r4
 800f994:	6864      	ldr	r4, [r4, #4]
 800f996:	e7b2      	b.n	800f8fe <_malloc_r+0x32>
 800f998:	4634      	mov	r4, r6
 800f99a:	6876      	ldr	r6, [r6, #4]
 800f99c:	e7b9      	b.n	800f912 <_malloc_r+0x46>
 800f99e:	230c      	movs	r3, #12
 800f9a0:	603b      	str	r3, [r7, #0]
 800f9a2:	4638      	mov	r0, r7
 800f9a4:	f000 f84c 	bl	800fa40 <__malloc_unlock>
 800f9a8:	e7a1      	b.n	800f8ee <_malloc_r+0x22>
 800f9aa:	6025      	str	r5, [r4, #0]
 800f9ac:	e7de      	b.n	800f96c <_malloc_r+0xa0>
 800f9ae:	bf00      	nop
 800f9b0:	24001ca8 	.word	0x24001ca8

0800f9b4 <_realloc_r>:
 800f9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b8:	4680      	mov	r8, r0
 800f9ba:	4614      	mov	r4, r2
 800f9bc:	460e      	mov	r6, r1
 800f9be:	b921      	cbnz	r1, 800f9ca <_realloc_r+0x16>
 800f9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c4:	4611      	mov	r1, r2
 800f9c6:	f7ff bf81 	b.w	800f8cc <_malloc_r>
 800f9ca:	b92a      	cbnz	r2, 800f9d8 <_realloc_r+0x24>
 800f9cc:	f000 f83e 	bl	800fa4c <_free_r>
 800f9d0:	4625      	mov	r5, r4
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d8:	f000 f884 	bl	800fae4 <_malloc_usable_size_r>
 800f9dc:	4284      	cmp	r4, r0
 800f9de:	4607      	mov	r7, r0
 800f9e0:	d802      	bhi.n	800f9e8 <_realloc_r+0x34>
 800f9e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f9e6:	d812      	bhi.n	800fa0e <_realloc_r+0x5a>
 800f9e8:	4621      	mov	r1, r4
 800f9ea:	4640      	mov	r0, r8
 800f9ec:	f7ff ff6e 	bl	800f8cc <_malloc_r>
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	d0ed      	beq.n	800f9d2 <_realloc_r+0x1e>
 800f9f6:	42bc      	cmp	r4, r7
 800f9f8:	4622      	mov	r2, r4
 800f9fa:	4631      	mov	r1, r6
 800f9fc:	bf28      	it	cs
 800f9fe:	463a      	movcs	r2, r7
 800fa00:	f7ff fee2 	bl	800f7c8 <memcpy>
 800fa04:	4631      	mov	r1, r6
 800fa06:	4640      	mov	r0, r8
 800fa08:	f000 f820 	bl	800fa4c <_free_r>
 800fa0c:	e7e1      	b.n	800f9d2 <_realloc_r+0x1e>
 800fa0e:	4635      	mov	r5, r6
 800fa10:	e7df      	b.n	800f9d2 <_realloc_r+0x1e>
	...

0800fa14 <_sbrk_r>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	4d06      	ldr	r5, [pc, #24]	; (800fa30 <_sbrk_r+0x1c>)
 800fa18:	2300      	movs	r3, #0
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	4608      	mov	r0, r1
 800fa1e:	602b      	str	r3, [r5, #0]
 800fa20:	f7f5 f862 	bl	8004ae8 <_sbrk>
 800fa24:	1c43      	adds	r3, r0, #1
 800fa26:	d102      	bne.n	800fa2e <_sbrk_r+0x1a>
 800fa28:	682b      	ldr	r3, [r5, #0]
 800fa2a:	b103      	cbz	r3, 800fa2e <_sbrk_r+0x1a>
 800fa2c:	6023      	str	r3, [r4, #0]
 800fa2e:	bd38      	pop	{r3, r4, r5, pc}
 800fa30:	24001cb0 	.word	0x24001cb0

0800fa34 <__malloc_lock>:
 800fa34:	4801      	ldr	r0, [pc, #4]	; (800fa3c <__malloc_lock+0x8>)
 800fa36:	f000 b85d 	b.w	800faf4 <__retarget_lock_acquire_recursive>
 800fa3a:	bf00      	nop
 800fa3c:	24001cb4 	.word	0x24001cb4

0800fa40 <__malloc_unlock>:
 800fa40:	4801      	ldr	r0, [pc, #4]	; (800fa48 <__malloc_unlock+0x8>)
 800fa42:	f000 b858 	b.w	800faf6 <__retarget_lock_release_recursive>
 800fa46:	bf00      	nop
 800fa48:	24001cb4 	.word	0x24001cb4

0800fa4c <_free_r>:
 800fa4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa4e:	2900      	cmp	r1, #0
 800fa50:	d044      	beq.n	800fadc <_free_r+0x90>
 800fa52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa56:	9001      	str	r0, [sp, #4]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f1a1 0404 	sub.w	r4, r1, #4
 800fa5e:	bfb8      	it	lt
 800fa60:	18e4      	addlt	r4, r4, r3
 800fa62:	f7ff ffe7 	bl	800fa34 <__malloc_lock>
 800fa66:	4a1e      	ldr	r2, [pc, #120]	; (800fae0 <_free_r+0x94>)
 800fa68:	9801      	ldr	r0, [sp, #4]
 800fa6a:	6813      	ldr	r3, [r2, #0]
 800fa6c:	b933      	cbnz	r3, 800fa7c <_free_r+0x30>
 800fa6e:	6063      	str	r3, [r4, #4]
 800fa70:	6014      	str	r4, [r2, #0]
 800fa72:	b003      	add	sp, #12
 800fa74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa78:	f7ff bfe2 	b.w	800fa40 <__malloc_unlock>
 800fa7c:	42a3      	cmp	r3, r4
 800fa7e:	d908      	bls.n	800fa92 <_free_r+0x46>
 800fa80:	6825      	ldr	r5, [r4, #0]
 800fa82:	1961      	adds	r1, r4, r5
 800fa84:	428b      	cmp	r3, r1
 800fa86:	bf01      	itttt	eq
 800fa88:	6819      	ldreq	r1, [r3, #0]
 800fa8a:	685b      	ldreq	r3, [r3, #4]
 800fa8c:	1949      	addeq	r1, r1, r5
 800fa8e:	6021      	streq	r1, [r4, #0]
 800fa90:	e7ed      	b.n	800fa6e <_free_r+0x22>
 800fa92:	461a      	mov	r2, r3
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	b10b      	cbz	r3, 800fa9c <_free_r+0x50>
 800fa98:	42a3      	cmp	r3, r4
 800fa9a:	d9fa      	bls.n	800fa92 <_free_r+0x46>
 800fa9c:	6811      	ldr	r1, [r2, #0]
 800fa9e:	1855      	adds	r5, r2, r1
 800faa0:	42a5      	cmp	r5, r4
 800faa2:	d10b      	bne.n	800fabc <_free_r+0x70>
 800faa4:	6824      	ldr	r4, [r4, #0]
 800faa6:	4421      	add	r1, r4
 800faa8:	1854      	adds	r4, r2, r1
 800faaa:	42a3      	cmp	r3, r4
 800faac:	6011      	str	r1, [r2, #0]
 800faae:	d1e0      	bne.n	800fa72 <_free_r+0x26>
 800fab0:	681c      	ldr	r4, [r3, #0]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	6053      	str	r3, [r2, #4]
 800fab6:	4421      	add	r1, r4
 800fab8:	6011      	str	r1, [r2, #0]
 800faba:	e7da      	b.n	800fa72 <_free_r+0x26>
 800fabc:	d902      	bls.n	800fac4 <_free_r+0x78>
 800fabe:	230c      	movs	r3, #12
 800fac0:	6003      	str	r3, [r0, #0]
 800fac2:	e7d6      	b.n	800fa72 <_free_r+0x26>
 800fac4:	6825      	ldr	r5, [r4, #0]
 800fac6:	1961      	adds	r1, r4, r5
 800fac8:	428b      	cmp	r3, r1
 800faca:	bf04      	itt	eq
 800facc:	6819      	ldreq	r1, [r3, #0]
 800face:	685b      	ldreq	r3, [r3, #4]
 800fad0:	6063      	str	r3, [r4, #4]
 800fad2:	bf04      	itt	eq
 800fad4:	1949      	addeq	r1, r1, r5
 800fad6:	6021      	streq	r1, [r4, #0]
 800fad8:	6054      	str	r4, [r2, #4]
 800fada:	e7ca      	b.n	800fa72 <_free_r+0x26>
 800fadc:	b003      	add	sp, #12
 800fade:	bd30      	pop	{r4, r5, pc}
 800fae0:	24001ca8 	.word	0x24001ca8

0800fae4 <_malloc_usable_size_r>:
 800fae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fae8:	1f18      	subs	r0, r3, #4
 800faea:	2b00      	cmp	r3, #0
 800faec:	bfbc      	itt	lt
 800faee:	580b      	ldrlt	r3, [r1, r0]
 800faf0:	18c0      	addlt	r0, r0, r3
 800faf2:	4770      	bx	lr

0800faf4 <__retarget_lock_acquire_recursive>:
 800faf4:	4770      	bx	lr

0800faf6 <__retarget_lock_release_recursive>:
 800faf6:	4770      	bx	lr

0800faf8 <_init>:
 800faf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fafa:	bf00      	nop
 800fafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fafe:	bc08      	pop	{r3}
 800fb00:	469e      	mov	lr, r3
 800fb02:	4770      	bx	lr

0800fb04 <_fini>:
 800fb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb06:	bf00      	nop
 800fb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb0a:	bc08      	pop	{r3}
 800fb0c:	469e      	mov	lr, r3
 800fb0e:	4770      	bx	lr
