
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f270  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800f540  0800f540  0001f540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f838  0800f838  0001f838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f840  0800f840  0001f840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f848  0800f848  0001f848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d0  24000000  0800f84c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000fe4  240000d0  0800f91c  000200d0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240010b4  0800f91c  000210b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f39a  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003311  00000000  00000000  0003f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001450  00000000  00000000  000427b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001360  00000000  00000000  00043c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034c78  00000000  00000000  00044f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a5d5  00000000  00000000  00079bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153606  00000000  00000000  000941ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e77b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b64  00000000  00000000  001e7804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000d0 	.word	0x240000d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f528 	.word	0x0800f528

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d4 	.word	0x240000d4
 800030c:	0800f528 	.word	0x0800f528

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f005 f890 	bl	80057a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 fab4 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 feba 	bl	8001404 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 fe90 	bl	80013b4 <MX_DMA_Init>
  MX_USART10_UART_Init();
 8000694:	f000 fe42 	bl	800131c <MX_USART10_UART_Init>
  MX_TIM3_Init();
 8000698:	f000 fb6c 	bl	8000d74 <MX_TIM3_Init>
  MX_TIM4_Init();
 800069c:	f000 fbc0 	bl	8000e20 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006a0:	f000 fc14 	bl	8000ecc <MX_TIM5_Init>
  MX_TIM8_Init();
 80006a4:	f000 fc60 	bl	8000f68 <MX_TIM8_Init>
  MX_TIM15_Init();
 80006a8:	f000 fcfa 	bl	80010a0 <MX_TIM15_Init>
  MX_TIM23_Init();
 80006ac:	f000 fd8a 	bl	80011c4 <MX_TIM23_Init>
  MX_TIM24_Init();
 80006b0:	f000 fdde 	bl	8001270 <MX_TIM24_Init>
  MX_TIM2_Init();
 80006b4:	f000 fb10 	bl	8000cd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 80006b8:	48b5      	ldr	r0, [pc, #724]	; (8000990 <main+0x310>)
 80006ba:	f00a ffe5 	bl	800b688 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 80006be:	48b5      	ldr	r0, [pc, #724]	; (8000994 <main+0x314>)
 80006c0:	f00a ffe2 	bl	800b688 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80006c4:	2108      	movs	r1, #8
 80006c6:	48b4      	ldr	r0, [pc, #720]	; (8000998 <main+0x318>)
 80006c8:	f00b f8bc 	bl	800b844 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80006cc:	210c      	movs	r1, #12
 80006ce:	48b2      	ldr	r0, [pc, #712]	; (8000998 <main+0x318>)
 80006d0:	f00b f8b8 	bl	800b844 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80006d4:	2100      	movs	r1, #0
 80006d6:	48b1      	ldr	r0, [pc, #708]	; (800099c <main+0x31c>)
 80006d8:	f00b f8b4 	bl	800b844 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80006dc:	2104      	movs	r1, #4
 80006de:	48af      	ldr	r0, [pc, #700]	; (800099c <main+0x31c>)
 80006e0:	f00b f8b0 	bl	800b844 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80006e4:	2100      	movs	r1, #0
 80006e6:	48ae      	ldr	r0, [pc, #696]	; (80009a0 <main+0x320>)
 80006e8:	f00b fa6e 	bl	800bbc8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 80006ec:	2104      	movs	r1, #4
 80006ee:	48ac      	ldr	r0, [pc, #688]	; (80009a0 <main+0x320>)
 80006f0:	f00b fa6a 	bl	800bbc8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006f4:	2100      	movs	r1, #0
 80006f6:	48ab      	ldr	r0, [pc, #684]	; (80009a4 <main+0x324>)
 80006f8:	f00b fa66 	bl	800bbc8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006fc:	2104      	movs	r1, #4
 80006fe:	48a9      	ldr	r0, [pc, #676]	; (80009a4 <main+0x324>)
 8000700:	f00b fa62 	bl	800bbc8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000704:	2100      	movs	r1, #0
 8000706:	48a8      	ldr	r0, [pc, #672]	; (80009a8 <main+0x328>)
 8000708:	f00b fa5e 	bl	800bbc8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 800070c:	2104      	movs	r1, #4
 800070e:	48a6      	ldr	r0, [pc, #664]	; (80009a8 <main+0x328>)
 8000710:	f00b fa5a 	bl	800bbc8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 8000714:	2100      	movs	r1, #0
 8000716:	48a5      	ldr	r0, [pc, #660]	; (80009ac <main+0x32c>)
 8000718:	f00b fa56 	bl	800bbc8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 800071c:	2104      	movs	r1, #4
 800071e:	48a3      	ldr	r0, [pc, #652]	; (80009ac <main+0x32c>)
 8000720:	f00b fa52 	bl	800bbc8 <HAL_TIM_Encoder_Start>

    run2 = 0;
 8000724:	4ba2      	ldr	r3, [pc, #648]	; (80009b0 <main+0x330>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
    run = 0;
 800072a:	4ba2      	ldr	r3, [pc, #648]	; (80009b4 <main+0x334>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
    ut1 = 0;
 8000730:	49a1      	ldr	r1, [pc, #644]	; (80009b8 <main+0x338>)
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	f04f 0300 	mov.w	r3, #0
 800073a:	e9c1 2300 	strd	r2, r3, [r1]
    ut2 = 0;
 800073e:	499f      	ldr	r1, [pc, #636]	; (80009bc <main+0x33c>)
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e9c1 2300 	strd	r2, r3, [r1]
    ut3 = 0;
 800074c:	499c      	ldr	r1, [pc, #624]	; (80009c0 <main+0x340>)
 800074e:	f04f 0200 	mov.w	r2, #0
 8000752:	f04f 0300 	mov.w	r3, #0
 8000756:	e9c1 2300 	strd	r2, r3, [r1]
    ut4 = 0;
 800075a:	499a      	ldr	r1, [pc, #616]	; (80009c4 <main+0x344>)
 800075c:	f04f 0200 	mov.w	r2, #0
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	e9c1 2300 	strd	r2, r3, [r1]
    up1 = 0;
 8000768:	4997      	ldr	r1, [pc, #604]	; (80009c8 <main+0x348>)
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	e9c1 2300 	strd	r2, r3, [r1]
    up2 = 0;
 8000776:	4995      	ldr	r1, [pc, #596]	; (80009cc <main+0x34c>)
 8000778:	f04f 0200 	mov.w	r2, #0
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	e9c1 2300 	strd	r2, r3, [r1]
    up3 = 0;
 8000784:	4992      	ldr	r1, [pc, #584]	; (80009d0 <main+0x350>)
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	e9c1 2300 	strd	r2, r3, [r1]
    up4 = 0;
 8000792:	4990      	ldr	r1, [pc, #576]	; (80009d4 <main+0x354>)
 8000794:	f04f 0200 	mov.w	r2, #0
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	e9c1 2300 	strd	r2, r3, [r1]
    ui1 = 0;
 80007a0:	498d      	ldr	r1, [pc, #564]	; (80009d8 <main+0x358>)
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	f04f 0300 	mov.w	r3, #0
 80007aa:	e9c1 2300 	strd	r2, r3, [r1]
    ui2 = 0;
 80007ae:	498b      	ldr	r1, [pc, #556]	; (80009dc <main+0x35c>)
 80007b0:	f04f 0200 	mov.w	r2, #0
 80007b4:	f04f 0300 	mov.w	r3, #0
 80007b8:	e9c1 2300 	strd	r2, r3, [r1]
    ui3 = 0;
 80007bc:	4988      	ldr	r1, [pc, #544]	; (80009e0 <main+0x360>)
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	f04f 0300 	mov.w	r3, #0
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
    ui4 = 0;
 80007ca:	4986      	ldr	r1, [pc, #536]	; (80009e4 <main+0x364>)
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	e9c1 2300 	strd	r2, r3, [r1]
    ud1 = 0;
 80007d8:	4983      	ldr	r1, [pc, #524]	; (80009e8 <main+0x368>)
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	e9c1 2300 	strd	r2, r3, [r1]
    ud2 = 0;
 80007e6:	4981      	ldr	r1, [pc, #516]	; (80009ec <main+0x36c>)
 80007e8:	f04f 0200 	mov.w	r2, #0
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	e9c1 2300 	strd	r2, r3, [r1]
    ud3 = 0;
 80007f4:	497e      	ldr	r1, [pc, #504]	; (80009f0 <main+0x370>)
 80007f6:	f04f 0200 	mov.w	r2, #0
 80007fa:	f04f 0300 	mov.w	r3, #0
 80007fe:	e9c1 2300 	strd	r2, r3, [r1]
    ud4 = 0;
 8000802:	497c      	ldr	r1, [pc, #496]	; (80009f4 <main+0x374>)
 8000804:	f04f 0200 	mov.w	r2, #0
 8000808:	f04f 0300 	mov.w	r3, #0
 800080c:	e9c1 2300 	strd	r2, r3, [r1]
    SV1 = 0;
 8000810:	4979      	ldr	r1, [pc, #484]	; (80009f8 <main+0x378>)
 8000812:	f04f 0200 	mov.w	r2, #0
 8000816:	f04f 0300 	mov.w	r3, #0
 800081a:	e9c1 2300 	strd	r2, r3, [r1]
    SV2 = 0;
 800081e:	4977      	ldr	r1, [pc, #476]	; (80009fc <main+0x37c>)
 8000820:	f04f 0200 	mov.w	r2, #0
 8000824:	f04f 0300 	mov.w	r3, #0
 8000828:	e9c1 2300 	strd	r2, r3, [r1]
    SV3 = 0;
 800082c:	4974      	ldr	r1, [pc, #464]	; (8000a00 <main+0x380>)
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	f04f 0300 	mov.w	r3, #0
 8000836:	e9c1 2300 	strd	r2, r3, [r1]
    SV4 = 0;
 800083a:	4972      	ldr	r1, [pc, #456]	; (8000a04 <main+0x384>)
 800083c:	f04f 0200 	mov.w	r2, #0
 8000840:	f04f 0300 	mov.w	r3, #0
 8000844:	e9c1 2300 	strd	r2, r3, [r1]
    PV1 = 0;
 8000848:	496f      	ldr	r1, [pc, #444]	; (8000a08 <main+0x388>)
 800084a:	f04f 0200 	mov.w	r2, #0
 800084e:	f04f 0300 	mov.w	r3, #0
 8000852:	e9c1 2300 	strd	r2, r3, [r1]
    PV2 = 0;
 8000856:	496d      	ldr	r1, [pc, #436]	; (8000a0c <main+0x38c>)
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	e9c1 2300 	strd	r2, r3, [r1]
    PV3 = 0;
 8000864:	496a      	ldr	r1, [pc, #424]	; (8000a10 <main+0x390>)
 8000866:	f04f 0200 	mov.w	r2, #0
 800086a:	f04f 0300 	mov.w	r3, #0
 800086e:	e9c1 2300 	strd	r2, r3, [r1]
    PV4 = 0;
 8000872:	4968      	ldr	r1, [pc, #416]	; (8000a14 <main+0x394>)
 8000874:	f04f 0200 	mov.w	r2, #0
 8000878:	f04f 0300 	mov.w	r3, #0
 800087c:	e9c1 2300 	strd	r2, r3, [r1]
    Kp1 = 0.3968;
 8000880:	4965      	ldr	r1, [pc, #404]	; (8000a18 <main+0x398>)
 8000882:	a32b      	add	r3, pc, #172	; (adr r3, 8000930 <main+0x2b0>)
 8000884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000888:	e9c1 2300 	strd	r2, r3, [r1]
    Ki1 = 9.292;
 800088c:	4963      	ldr	r1, [pc, #396]	; (8000a1c <main+0x39c>)
 800088e:	a32a      	add	r3, pc, #168	; (adr r3, 8000938 <main+0x2b8>)
 8000890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000894:	e9c1 2300 	strd	r2, r3, [r1]
    Kd1 = 0.001676;
 8000898:	4961      	ldr	r1, [pc, #388]	; (8000a20 <main+0x3a0>)
 800089a:	a329      	add	r3, pc, #164	; (adr r3, 8000940 <main+0x2c0>)
 800089c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008a0:	e9c1 2300 	strd	r2, r3, [r1]
    Kp2 = 0.3824;
 80008a4:	495f      	ldr	r1, [pc, #380]	; (8000a24 <main+0x3a4>)
 80008a6:	a328      	add	r3, pc, #160	; (adr r3, 8000948 <main+0x2c8>)
 80008a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ac:	e9c1 2300 	strd	r2, r3, [r1]
    Ki2 = 9.0983;
 80008b0:	495d      	ldr	r1, [pc, #372]	; (8000a28 <main+0x3a8>)
 80008b2:	a327      	add	r3, pc, #156	; (adr r3, 8000950 <main+0x2d0>)
 80008b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b8:	e9c1 2300 	strd	r2, r3, [r1]
    Kd2 = 0.001656;
 80008bc:	495b      	ldr	r1, [pc, #364]	; (8000a2c <main+0x3ac>)
 80008be:	a326      	add	r3, pc, #152	; (adr r3, 8000958 <main+0x2d8>)
 80008c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c4:	e9c1 2300 	strd	r2, r3, [r1]
    Kp3 = 0.3919;
 80008c8:	4959      	ldr	r1, [pc, #356]	; (8000a30 <main+0x3b0>)
 80008ca:	a325      	add	r3, pc, #148	; (adr r3, 8000960 <main+0x2e0>)
 80008cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d0:	e9c1 2300 	strd	r2, r3, [r1]
    Ki3 = 9.34526;
 80008d4:	4957      	ldr	r1, [pc, #348]	; (8000a34 <main+0x3b4>)
 80008d6:	a324      	add	r3, pc, #144	; (adr r3, 8000968 <main+0x2e8>)
 80008d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008dc:	e9c1 2300 	strd	r2, r3, [r1]
    Kd3 = 0.001684;
 80008e0:	4955      	ldr	r1, [pc, #340]	; (8000a38 <main+0x3b8>)
 80008e2:	a323      	add	r3, pc, #140	; (adr r3, 8000970 <main+0x2f0>)
 80008e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008e8:	e9c1 2300 	strd	r2, r3, [r1]
    Kp4 = 0.38488;
 80008ec:	4953      	ldr	r1, [pc, #332]	; (8000a3c <main+0x3bc>)
 80008ee:	a322      	add	r3, pc, #136	; (adr r3, 8000978 <main+0x2f8>)
 80008f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008f4:	e9c1 2300 	strd	r2, r3, [r1]
    Ki4 = 8.9584;
 80008f8:	4951      	ldr	r1, [pc, #324]	; (8000a40 <main+0x3c0>)
 80008fa:	a321      	add	r3, pc, #132	; (adr r3, 8000980 <main+0x300>)
 80008fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000900:	e9c1 2300 	strd	r2, r3, [r1]
    Kd4 = 0.001678;
 8000904:	494f      	ldr	r1, [pc, #316]	; (8000a44 <main+0x3c4>)
 8000906:	a320      	add	r3, pc, #128	; (adr r3, 8000988 <main+0x308>)
 8000908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800090c:	e9c1 2300 	strd	r2, r3, [r1]
    et1 = 0;
 8000910:	494d      	ldr	r1, [pc, #308]	; (8000a48 <main+0x3c8>)
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	f04f 0300 	mov.w	r3, #0
 800091a:	e9c1 2300 	strd	r2, r3, [r1]
    et2 = 0;
 800091e:	494b      	ldr	r1, [pc, #300]	; (8000a4c <main+0x3cc>)
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	f04f 0300 	mov.w	r3, #0
 8000928:	e9c1 2300 	strd	r2, r3, [r1]
 800092c:	e090      	b.n	8000a50 <main+0x3d0>
 800092e:	bf00      	nop
 8000930:	d3c36113 	.word	0xd3c36113
 8000934:	3fd9652b 	.word	0x3fd9652b
 8000938:	0624dd2f 	.word	0x0624dd2f
 800093c:	40229581 	.word	0x40229581
 8000940:	4c09c3ce 	.word	0x4c09c3ce
 8000944:	3f5b75a7 	.word	0x3f5b75a7
 8000948:	d97f62b7 	.word	0xd97f62b7
 800094c:	3fd8793d 	.word	0x3fd8793d
 8000950:	60aa64c3 	.word	0x60aa64c3
 8000954:	40223254 	.word	0x40223254
 8000958:	75e6362a 	.word	0x75e6362a
 800095c:	3f5b21c4 	.word	0x3f5b21c4
 8000960:	bcd35a86 	.word	0xbcd35a86
 8000964:	3fd914e3 	.word	0x3fd914e3
 8000968:	eb313be2 	.word	0xeb313be2
 800096c:	4022b0c5 	.word	0x4022b0c5
 8000970:	3b4b2fa9 	.word	0x3b4b2fa9
 8000974:	3f5b9735 	.word	0x3f5b9735
 8000978:	b9389b52 	.word	0xb9389b52
 800097c:	3fd8a1df 	.word	0x3fd8a1df
 8000980:	67a0f909 	.word	0x67a0f909
 8000984:	4021eab3 	.word	0x4021eab3
 8000988:	c7da1ec5 	.word	0xc7da1ec5
 800098c:	3f5b7e0a 	.word	0x3f5b7e0a
 8000990:	240001d0 	.word	0x240001d0
 8000994:	240000ec 	.word	0x240000ec
 8000998:	2400021c 	.word	0x2400021c
 800099c:	24000268 	.word	0x24000268
 80009a0:	24000300 	.word	0x24000300
 80009a4:	24000138 	.word	0x24000138
 80009a8:	24000184 	.word	0x24000184
 80009ac:	240002b4 	.word	0x240002b4
 80009b0:	24000658 	.word	0x24000658
 80009b4:	24000654 	.word	0x24000654
 80009b8:	240004d0 	.word	0x240004d0
 80009bc:	24000528 	.word	0x24000528
 80009c0:	24000580 	.word	0x24000580
 80009c4:	240005d8 	.word	0x240005d8
 80009c8:	240004d8 	.word	0x240004d8
 80009cc:	24000530 	.word	0x24000530
 80009d0:	24000588 	.word	0x24000588
 80009d4:	240005e0 	.word	0x240005e0
 80009d8:	240004e0 	.word	0x240004e0
 80009dc:	24000538 	.word	0x24000538
 80009e0:	24000590 	.word	0x24000590
 80009e4:	240005e8 	.word	0x240005e8
 80009e8:	240004e8 	.word	0x240004e8
 80009ec:	24000540 	.word	0x24000540
 80009f0:	24000598 	.word	0x24000598
 80009f4:	240005f0 	.word	0x240005f0
 80009f8:	240004f0 	.word	0x240004f0
 80009fc:	24000548 	.word	0x24000548
 8000a00:	240005a0 	.word	0x240005a0
 8000a04:	240005f8 	.word	0x240005f8
 8000a08:	240004f8 	.word	0x240004f8
 8000a0c:	24000550 	.word	0x24000550
 8000a10:	240005a8 	.word	0x240005a8
 8000a14:	24000600 	.word	0x24000600
 8000a18:	24000000 	.word	0x24000000
 8000a1c:	24000008 	.word	0x24000008
 8000a20:	24000500 	.word	0x24000500
 8000a24:	24000010 	.word	0x24000010
 8000a28:	24000018 	.word	0x24000018
 8000a2c:	24000558 	.word	0x24000558
 8000a30:	24000020 	.word	0x24000020
 8000a34:	24000028 	.word	0x24000028
 8000a38:	240005b0 	.word	0x240005b0
 8000a3c:	24000030 	.word	0x24000030
 8000a40:	24000038 	.word	0x24000038
 8000a44:	24000608 	.word	0x24000608
 8000a48:	24000508 	.word	0x24000508
 8000a4c:	24000560 	.word	0x24000560
    et3 = 0;
 8000a50:	494d      	ldr	r1, [pc, #308]	; (8000b88 <main+0x508>)
 8000a52:	f04f 0200 	mov.w	r2, #0
 8000a56:	f04f 0300 	mov.w	r3, #0
 8000a5a:	e9c1 2300 	strd	r2, r3, [r1]
    et4 = 0;
 8000a5e:	494b      	ldr	r1, [pc, #300]	; (8000b8c <main+0x50c>)
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	e9c1 2300 	strd	r2, r3, [r1]
    pulse1 = 0;
 8000a6c:	4948      	ldr	r1, [pc, #288]	; (8000b90 <main+0x510>)
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	e9c1 2300 	strd	r2, r3, [r1]
    pulse2 = 0;
 8000a7a:	4946      	ldr	r1, [pc, #280]	; (8000b94 <main+0x514>)
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	e9c1 2300 	strd	r2, r3, [r1]
    pulse3 = 0;
 8000a88:	4943      	ldr	r1, [pc, #268]	; (8000b98 <main+0x518>)
 8000a8a:	f04f 0200 	mov.w	r2, #0
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	e9c1 2300 	strd	r2, r3, [r1]
    pulse4 = 0;
 8000a96:	4941      	ldr	r1, [pc, #260]	; (8000b9c <main+0x51c>)
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	e9c1 2300 	strd	r2, r3, [r1]
    it1 = 0;
 8000aa4:	493e      	ldr	r1, [pc, #248]	; (8000ba0 <main+0x520>)
 8000aa6:	f04f 0200 	mov.w	r2, #0
 8000aaa:	f04f 0300 	mov.w	r3, #0
 8000aae:	e9c1 2300 	strd	r2, r3, [r1]
    it2 = 0;
 8000ab2:	493c      	ldr	r1, [pc, #240]	; (8000ba4 <main+0x524>)
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e9c1 2300 	strd	r2, r3, [r1]
    it3 = 0;
 8000ac0:	4939      	ldr	r1, [pc, #228]	; (8000ba8 <main+0x528>)
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	e9c1 2300 	strd	r2, r3, [r1]
    it4 = 0;
 8000ace:	4937      	ldr	r1, [pc, #220]	; (8000bac <main+0x52c>)
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e9c1 2300 	strd	r2, r3, [r1]
    imax1 = 1;
 8000adc:	4934      	ldr	r1, [pc, #208]	; (8000bb0 <main+0x530>)
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <main+0x534>)
 8000ae4:	e9c1 2300 	strd	r2, r3, [r1]
    imax2 = 1;
 8000ae8:	4933      	ldr	r1, [pc, #204]	; (8000bb8 <main+0x538>)
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <main+0x534>)
 8000af0:	e9c1 2300 	strd	r2, r3, [r1]
    imax3 = 1;
 8000af4:	4931      	ldr	r1, [pc, #196]	; (8000bbc <main+0x53c>)
 8000af6:	f04f 0200 	mov.w	r2, #0
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <main+0x534>)
 8000afc:	e9c1 2300 	strd	r2, r3, [r1]
    imax4 = 1;
 8000b00:	492f      	ldr	r1, [pc, #188]	; (8000bc0 <main+0x540>)
 8000b02:	f04f 0200 	mov.w	r2, #0
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <main+0x534>)
 8000b08:	e9c1 2300 	strd	r2, r3, [r1]
    enc1 = 0;
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <main+0x544>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	801a      	strh	r2, [r3, #0]
    enc2 = 0;
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <main+0x548>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	801a      	strh	r2, [r3, #0]
    enc3 = 0;
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <main+0x54c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	801a      	strh	r2, [r3, #0]
    enc4 = 0;
 8000b1e:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <main+0x550>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	801a      	strh	r2, [r3, #0]
    Vx = 0;
 8000b24:	492b      	ldr	r1, [pc, #172]	; (8000bd4 <main+0x554>)
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	f04f 0300 	mov.w	r3, #0
 8000b2e:	e9c1 2300 	strd	r2, r3, [r1]
    Vy = 0;
 8000b32:	4929      	ldr	r1, [pc, #164]	; (8000bd8 <main+0x558>)
 8000b34:	f04f 0200 	mov.w	r2, #0
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e9c1 2300 	strd	r2, r3, [r1]
    W = 0;
 8000b40:	4926      	ldr	r1, [pc, #152]	; (8000bdc <main+0x55c>)
 8000b42:	f04f 0200 	mov.w	r2, #0
 8000b46:	f04f 0300 	mov.w	r3, #0
 8000b4a:	e9c1 2300 	strd	r2, r3, [r1]
    max_rps = 5;
 8000b4e:	4924      	ldr	r1, [pc, #144]	; (8000be0 <main+0x560>)
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <main+0x564>)
 8000b56:	e9c1 2300 	strd	r2, r3, [r1]
    amax_rps = -1 * max_rps;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <main+0x560>)
 8000b5c:	ed93 7b00 	vldr	d7, [r3]
 8000b60:	eeb1 7b47 	vneg.f64	d7, d7
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <main+0x568>)
 8000b66:	ed83 7b00 	vstr	d7, [r3]
    temp_SV = 0;
 8000b6a:	4920      	ldr	r1, [pc, #128]	; (8000bec <main+0x56c>)
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e9c1 2300 	strd	r2, r3, [r1]
    map = 0;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <main+0x570>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
    setup();
 8000b7e:	f003 fb5d 	bl	800423c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 8000b82:	f003 fb6b 	bl	800425c <loop>
 8000b86:	e7fc      	b.n	8000b82 <main+0x502>
 8000b88:	240005b8 	.word	0x240005b8
 8000b8c:	24000610 	.word	0x24000610
 8000b90:	24000510 	.word	0x24000510
 8000b94:	24000568 	.word	0x24000568
 8000b98:	240005c0 	.word	0x240005c0
 8000b9c:	24000618 	.word	0x24000618
 8000ba0:	24000518 	.word	0x24000518
 8000ba4:	24000570 	.word	0x24000570
 8000ba8:	240005c8 	.word	0x240005c8
 8000bac:	24000620 	.word	0x24000620
 8000bb0:	24000520 	.word	0x24000520
 8000bb4:	3ff00000 	.word	0x3ff00000
 8000bb8:	24000578 	.word	0x24000578
 8000bbc:	240005d0 	.word	0x240005d0
 8000bc0:	24000628 	.word	0x24000628
 8000bc4:	24000630 	.word	0x24000630
 8000bc8:	24000632 	.word	0x24000632
 8000bcc:	24000634 	.word	0x24000634
 8000bd0:	24000636 	.word	0x24000636
 8000bd4:	24000688 	.word	0x24000688
 8000bd8:	24000690 	.word	0x24000690
 8000bdc:	24000698 	.word	0x24000698
 8000be0:	24000638 	.word	0x24000638
 8000be4:	40140000 	.word	0x40140000
 8000be8:	24000640 	.word	0x24000640
 8000bec:	24000648 	.word	0x24000648
 8000bf0:	24000650 	.word	0x24000650

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09c      	sub	sp, #112	; 0x70
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	224c      	movs	r2, #76	; 0x4c
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00e fb06 	bl	800f214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f00e fb00 	bl	800f214 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c14:	2002      	movs	r0, #2
 8000c16:	f008 fa4f 	bl	80090b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <SystemClock_Config+0xe0>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c26:	4a2b      	ldr	r2, [pc, #172]	; (8000cd4 <SystemClock_Config+0xe0>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <SystemClock_Config+0xe0>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c3a:	bf00      	nop
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <SystemClock_Config+0xe0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c48:	d1f8      	bne.n	8000c3c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c52:	2340      	movs	r3, #64	; 0x40
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c56:	2302      	movs	r3, #2
 8000c58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000c62:	2315      	movs	r3, #21
 8000c64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c72:	230c      	movs	r3, #12
 8000c74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4618      	mov	r0, r3
 8000c84:	f008 fa52 	bl	800912c <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c8e:	f001 fc23 	bl	80024d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	233f      	movs	r3, #63	; 0x3f
 8000c94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2303      	movs	r3, #3
 8000c98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000c9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ca4:	2340      	movs	r3, #64	; 0x40
 8000ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ca8:	2340      	movs	r3, #64	; 0x40
 8000caa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cb2:	2340      	movs	r3, #64	; 0x40
 8000cb4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f008 fde4 	bl	8009888 <HAL_RCC_ClockConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000cc6:	f001 fc07 	bl	80024d8 <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3770      	adds	r7, #112	; 0x70
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	58024800 	.word	0x58024800

08000cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d00:	223f      	movs	r2, #63	; 0x3f
 8000d02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d0c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d20:	f00a fc5a 	bl	800b5d8 <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d2a:	f001 fbd5 	bl	80024d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d3c:	f00b fa06 	bl	800c14c <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d46:	f001 fbc7 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d58:	f00b ff58 	bl	800cc0c <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d62:	f001 fbb9 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	240000ec 	.word	0x240000ec

08000d74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	2224      	movs	r2, #36	; 0x24
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f00e fa46 	bl	800f214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000d94:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <MX_TIM3_Init+0xa8>)
 8000d96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000daa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000db8:	2303      	movs	r3, #3
 8000dba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000de4:	f00a fe4a 	bl	800ba7c <HAL_TIM_Encoder_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000dee:	f001 fb73 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000e00:	f00b ff04 	bl	800cc0c <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e0a:	f001 fb65 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3730      	adds	r7, #48	; 0x30
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	24000138 	.word	0x24000138
 8000e1c:	40000400 	.word	0x40000400

08000e20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2224      	movs	r2, #36	; 0x24
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f00e f9f0 	bl	800f214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	463b      	mov	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <MX_TIM4_Init+0xa8>)
 8000e42:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e64:	2303      	movs	r3, #3
 8000e66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e90:	f00a fdf4 	bl	800ba7c <HAL_TIM_Encoder_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000e9a:	f001 fb1d 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <MX_TIM4_Init+0xa4>)
 8000eac:	f00b feae 	bl	800cc0c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000eb6:	f001 fb0f 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	3730      	adds	r7, #48	; 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	24000184 	.word	0x24000184
 8000ec8:	40000800 	.word	0x40000800

08000ecc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_TIM5_Init+0x94>)
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <MX_TIM5_Init+0x98>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_TIM5_Init+0x94>)
 8000ef2:	223f      	movs	r2, #63	; 0x3f
 8000ef4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_TIM5_Init+0x94>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_TIM5_Init+0x94>)
 8000efe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f02:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_TIM5_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_TIM5_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <MX_TIM5_Init+0x94>)
 8000f12:	f00a fb61 	bl	800b5d8 <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000f1c:	f001 fadc 	bl	80024d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_TIM5_Init+0x94>)
 8000f2e:	f00b f90d 	bl	800c14c <HAL_TIM_ConfigClockSource>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000f38:	f001 face 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_TIM5_Init+0x94>)
 8000f4a:	f00b fe5f 	bl	800cc0c <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f54:	f001 fac0 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	240001d0 	.word	0x240001d0
 8000f64:	40000c00 	.word	0x40000c00

08000f68 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b098      	sub	sp, #96	; 0x60
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2234      	movs	r2, #52	; 0x34
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f00e f93d 	bl	800f214 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_TIM8_Init+0x130>)
 8000f9c:	4a3f      	ldr	r2, [pc, #252]	; (800109c <MX_TIM8_Init+0x134>)
 8000f9e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_TIM8_Init+0x130>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_TIM8_Init+0x130>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3199;
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <MX_TIM8_Init+0x130>)
 8000fae:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000fb2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_TIM8_Init+0x130>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fba:	4b37      	ldr	r3, [pc, #220]	; (8001098 <MX_TIM8_Init+0x130>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b35      	ldr	r3, [pc, #212]	; (8001098 <MX_TIM8_Init+0x130>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000fc6:	4834      	ldr	r0, [pc, #208]	; (8001098 <MX_TIM8_Init+0x130>)
 8000fc8:	f00a fbe4 	bl	800b794 <HAL_TIM_PWM_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000fd2:	f001 fa81 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fe2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	482b      	ldr	r0, [pc, #172]	; (8001098 <MX_TIM8_Init+0x130>)
 8000fea:	f00b fe0f 	bl	800cc0c <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000ff4:	f001 fa70 	bl	80024d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff8:	2360      	movs	r3, #96	; 0x60
 8000ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001000:	2300      	movs	r3, #0
 8001002:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001004:	2300      	movs	r3, #0
 8001006:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001014:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001018:	2208      	movs	r2, #8
 800101a:	4619      	mov	r1, r3
 800101c:	481e      	ldr	r0, [pc, #120]	; (8001098 <MX_TIM8_Init+0x130>)
 800101e:	f00a ff81 	bl	800bf24 <HAL_TIM_PWM_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001028:	f001 fa56 	bl	80024d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800102c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001030:	220c      	movs	r2, #12
 8001032:	4619      	mov	r1, r3
 8001034:	4818      	ldr	r0, [pc, #96]	; (8001098 <MX_TIM8_Init+0x130>)
 8001036:	f00a ff75 	bl	800bf24 <HAL_TIM_PWM_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001040:	f001 fa4a 	bl	80024d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4619      	mov	r1, r3
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_TIM8_Init+0x130>)
 800107a:	f00b fe63 	bl	800cd44 <HAL_TIMEx_ConfigBreakDeadTime>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8001084:	f001 fa28 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <MX_TIM8_Init+0x130>)
 800108a:	f004 f897 	bl	80051bc <HAL_TIM_MspPostInit>

}
 800108e:	bf00      	nop
 8001090:	3760      	adds	r7, #96	; 0x60
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2400021c 	.word	0x2400021c
 800109c:	40010400 	.word	0x40010400

080010a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b098      	sub	sp, #96	; 0x60
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2234      	movs	r2, #52	; 0x34
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f00e f8a1 	bl	800f214 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <MX_TIM15_Init+0x11c>)
 80010d4:	4a3a      	ldr	r2, [pc, #232]	; (80011c0 <MX_TIM15_Init+0x120>)
 80010d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <MX_TIM15_Init+0x11c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b37      	ldr	r3, [pc, #220]	; (80011bc <MX_TIM15_Init+0x11c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 80010e4:	4b35      	ldr	r3, [pc, #212]	; (80011bc <MX_TIM15_Init+0x11c>)
 80010e6:	f640 427f 	movw	r2, #3199	; 0xc7f
 80010ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b33      	ldr	r3, [pc, #204]	; (80011bc <MX_TIM15_Init+0x11c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010f2:	4b32      	ldr	r3, [pc, #200]	; (80011bc <MX_TIM15_Init+0x11c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <MX_TIM15_Init+0x11c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010fe:	482f      	ldr	r0, [pc, #188]	; (80011bc <MX_TIM15_Init+0x11c>)
 8001100:	f00a fb48 	bl	800b794 <HAL_TIM_PWM_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800110a:	f001 f9e5 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001116:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800111a:	4619      	mov	r1, r3
 800111c:	4827      	ldr	r0, [pc, #156]	; (80011bc <MX_TIM15_Init+0x11c>)
 800111e:	f00b fd75 	bl	800cc0c <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001128:	f001 f9d6 	bl	80024d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112c:	2360      	movs	r3, #96	; 0x60
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001148:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800114c:	2200      	movs	r2, #0
 800114e:	4619      	mov	r1, r3
 8001150:	481a      	ldr	r0, [pc, #104]	; (80011bc <MX_TIM15_Init+0x11c>)
 8001152:	f00a fee7 	bl	800bf24 <HAL_TIM_PWM_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800115c:	f001 f9bc 	bl	80024d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001160:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001164:	2204      	movs	r2, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4814      	ldr	r0, [pc, #80]	; (80011bc <MX_TIM15_Init+0x11c>)
 800116a:	f00a fedb 	bl	800bf24 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001174:	f001 f9b0 	bl	80024d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4619      	mov	r1, r3
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <MX_TIM15_Init+0x11c>)
 80011a0:	f00b fdd0 	bl	800cd44 <HAL_TIMEx_ConfigBreakDeadTime>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80011aa:	f001 f995 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <MX_TIM15_Init+0x11c>)
 80011b0:	f004 f804 	bl	80051bc <HAL_TIM_MspPostInit>

}
 80011b4:	bf00      	nop
 80011b6:	3760      	adds	r7, #96	; 0x60
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	24000268 	.word	0x24000268
 80011c0:	40014000 	.word	0x40014000

080011c4 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2224      	movs	r2, #36	; 0x24
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00e f81e 	bl	800f214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_TIM23_Init+0xa4>)
 80011e4:	4a21      	ldr	r2, [pc, #132]	; (800126c <MX_TIM23_Init+0xa8>)
 80011e6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_TIM23_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_TIM23_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_TIM23_Init+0xa4>)
 80011f6:	f04f 32ff 	mov.w	r2, #4294967295
 80011fa:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_TIM23_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_TIM23_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001208:	2303      	movs	r3, #3
 800120a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001220:	2301      	movs	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_TIM23_Init+0xa4>)
 8001234:	f00a fc22 	bl	800ba7c <HAL_TIM_Encoder_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800123e:	f001 f94b 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_TIM23_Init+0xa4>)
 8001250:	f00b fcdc 	bl	800cc0c <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800125a:	f001 f93d 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3730      	adds	r7, #48	; 0x30
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	240002b4 	.word	0x240002b4
 800126c:	4000e000 	.word	0x4000e000

08001270 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2224      	movs	r2, #36	; 0x24
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f00d ffc8 	bl	800f214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_TIM24_Init+0xa4>)
 8001290:	4a21      	ldr	r2, [pc, #132]	; (8001318 <MX_TIM24_Init+0xa8>)
 8001292:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_TIM24_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <MX_TIM24_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_TIM24_Init+0xa4>)
 80012a2:	f04f 32ff 	mov.w	r2, #4294967295
 80012a6:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_TIM24_Init+0xa4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_TIM24_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012b4:	2303      	movs	r3, #3
 80012b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012bc:	2301      	movs	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <MX_TIM24_Init+0xa4>)
 80012e0:	f00a fbcc 	bl	800ba7c <HAL_TIM_Encoder_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80012ea:	f001 f8f5 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <MX_TIM24_Init+0xa4>)
 80012fc:	f00b fc86 	bl	800cc0c <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8001306:	f001 f8e7 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3730      	adds	r7, #48	; 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	24000300 	.word	0x24000300
 8001318:	4000e400 	.word	0x4000e400

0800131c <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <MX_USART10_UART_Init+0x90>)
 8001322:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <MX_USART10_UART_Init+0x94>)
 8001324:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_USART10_UART_Init+0x90>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_USART10_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_USART10_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_USART10_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_USART10_UART_Init+0x90>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_USART10_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_USART10_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_USART10_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_USART10_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_USART10_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <MX_USART10_UART_Init+0x90>)
 8001366:	f00b fdab 	bl	800cec0 <HAL_UART_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001370:	f001 f8b2 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_USART10_UART_Init+0x90>)
 8001378:	f00d fe2e 	bl	800efd8 <HAL_UARTEx_SetTxFifoThreshold>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8001382:	f001 f8a9 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001386:	2100      	movs	r1, #0
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <MX_USART10_UART_Init+0x90>)
 800138a:	f00d fe63 	bl	800f054 <HAL_UARTEx_SetRxFifoThreshold>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8001394:	f001 f8a0 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_USART10_UART_Init+0x90>)
 800139a:	f00d fde4 	bl	800ef66 <HAL_UARTEx_DisableFifoMode>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f001 f898 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2400034c 	.word	0x2400034c
 80013b0:	40011c00 	.word	0x40011c00

080013b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_DMA_Init+0x4c>)
 80013bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <MX_DMA_Init+0x4c>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <MX_DMA_Init+0x4c>)
 80013cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	200b      	movs	r0, #11
 80013de:	f004 fb74 	bl	8005aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013e2:	200b      	movs	r0, #11
 80013e4:	f004 fb8b 	bl	8005afe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	200c      	movs	r0, #12
 80013ee:	f004 fb6c 	bl	8005aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013f2:	200c      	movs	r0, #12
 80013f4:	f004 fb83 	bl	8005afe <HAL_NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	58024400 	.word	0x58024400

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141a:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <MX_GPIO_Init+0x144>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	4a49      	ldr	r2, [pc, #292]	; (8001548 <MX_GPIO_Init+0x144>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142a:	4b47      	ldr	r3, [pc, #284]	; (8001548 <MX_GPIO_Init+0x144>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <MX_GPIO_Init+0x144>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	4a42      	ldr	r2, [pc, #264]	; (8001548 <MX_GPIO_Init+0x144>)
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <MX_GPIO_Init+0x144>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <MX_GPIO_Init+0x144>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	4a3a      	ldr	r2, [pc, #232]	; (8001548 <MX_GPIO_Init+0x144>)
 800145e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <MX_GPIO_Init+0x144>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <MX_GPIO_Init+0x144>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	4a33      	ldr	r2, [pc, #204]	; (8001548 <MX_GPIO_Init+0x144>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <MX_GPIO_Init+0x144>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <MX_GPIO_Init+0x144>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <MX_GPIO_Init+0x144>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <MX_GPIO_Init+0x144>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <MX_GPIO_Init+0x144>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	4a24      	ldr	r2, [pc, #144]	; (8001548 <MX_GPIO_Init+0x144>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <MX_GPIO_Init+0x144>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <MX_GPIO_Init+0x144>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d4:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <MX_GPIO_Init+0x144>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_GPIO_Init+0x144>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80014ec:	2200      	movs	r2, #0
 80014ee:	f249 51c0 	movw	r1, #38336	; 0x95c0
 80014f2:	4816      	ldr	r0, [pc, #88]	; (800154c <MX_GPIO_Init+0x148>)
 80014f4:	f007 fdc6 	bl	8009084 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80014fe:	4814      	ldr	r0, [pc, #80]	; (8001550 <MX_GPIO_Init+0x14c>)
 8001500:	f007 fdc0 	bl	8009084 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001504:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001508:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <MX_GPIO_Init+0x148>)
 800151e:	f007 fb07 	bl	8008b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001522:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_GPIO_Init+0x14c>)
 800153c:	f007 faf8 	bl	8008b30 <HAL_GPIO_Init>

}
 8001540:	bf00      	nop
 8001542:	3730      	adds	r7, #48	; 0x30
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	58024400 	.word	0x58024400
 800154c:	58021000 	.word	0x58021000
 8001550:	58020400 	.word	0x58020400
 8001554:	00000000 	.word	0x00000000

08001558 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	run++;
 8001560:	4b8f      	ldr	r3, [pc, #572]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a8e      	ldr	r2, [pc, #568]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001568:	6013      	str	r3, [r2, #0]
	if (htim->Instance == TIM2) {
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001572:	d101      	bne.n	8001578 <HAL_TIM_PeriodElapsedCallback+0x20>
		inter();
 8001574:	f002 fe7c 	bl	8004270 <inter>
	}
	if (htim->Instance == TIM5) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a89      	ldr	r2, [pc, #548]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	f040 879e 	bne.w	80024c0 <HAL_TIM_PeriodElapsedCallback+0xf68>

		run2++;
 8001584:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	4a87      	ldr	r2, [pc, #540]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800158c:	6013      	str	r3, [r2, #0]
		SV1 = Vy + Vx + W;
 800158e:	4b87      	ldr	r3, [pc, #540]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001590:	ed93 6b00 	vldr	d6, [r3]
 8001594:	4b86      	ldr	r3, [pc, #536]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001596:	ed93 7b00 	vldr	d7, [r3]
 800159a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800159e:	4b85      	ldr	r3, [pc, #532]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015a0:	ed93 7b00 	vldr	d7, [r3]
 80015a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015a8:	4b83      	ldr	r3, [pc, #524]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80015aa:	ed83 7b00 	vstr	d7, [r3]
		SV2 = Vy - Vx - W;
 80015ae:	4b7f      	ldr	r3, [pc, #508]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x254>)
 80015b0:	ed93 6b00 	vldr	d6, [r3]
 80015b4:	4b7e      	ldr	r3, [pc, #504]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80015b6:	ed93 7b00 	vldr	d7, [r3]
 80015ba:	ee36 6b47 	vsub.f64	d6, d6, d7
 80015be:	4b7d      	ldr	r3, [pc, #500]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015c0:	ed93 7b00 	vldr	d7, [r3]
 80015c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015c8:	4b7c      	ldr	r3, [pc, #496]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x264>)
 80015ca:	ed83 7b00 	vstr	d7, [r3]
		SV3 = Vy + Vx - W;
 80015ce:	4b77      	ldr	r3, [pc, #476]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x254>)
 80015d0:	ed93 6b00 	vldr	d6, [r3]
 80015d4:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80015d6:	ed93 7b00 	vldr	d7, [r3]
 80015da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015de:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015e0:	ed93 7b00 	vldr	d7, [r3]
 80015e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015e8:	4b75      	ldr	r3, [pc, #468]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80015ea:	ed83 7b00 	vstr	d7, [r3]
		SV4 = Vy - Vx + W;
 80015ee:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x254>)
 80015f0:	ed93 6b00 	vldr	d6, [r3]
 80015f4:	4b6e      	ldr	r3, [pc, #440]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80015f6:	ed93 7b00 	vldr	d7, [r3]
 80015fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80015fe:	4b6d      	ldr	r3, [pc, #436]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001600:	ed93 7b00 	vldr	d7, [r3]
 8001604:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001608:	4b6e      	ldr	r3, [pc, #440]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800160a:	ed83 7b00 	vstr	d7, [r3]
		//?��?��止輪子�?��?��?��?��?��?��?��?大�?��?��?�失衡�?�設定�?大�?��?�為rps=5
		if (SV1 > max_rps){
 800160e:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001610:	ed93 6b00 	vldr	d6, [r3]
 8001614:	4b6c      	ldr	r3, [pc, #432]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001616:	ed93 7b00 	vldr	d7, [r3]
 800161a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800161e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001622:	dd37      	ble.n	8001694 <HAL_TIM_PeriodElapsedCallback+0x13c>
			temp_SV = max_rps / SV1;
 8001624:	4b68      	ldr	r3, [pc, #416]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001626:	ed93 5b00 	vldr	d5, [r3]
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800162c:	ed93 6b00 	vldr	d6, [r3]
 8001630:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001634:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001636:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 800163a:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800163c:	ed93 6b00 	vldr	d6, [r3]
 8001640:	4b62      	ldr	r3, [pc, #392]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001642:	ed93 7b00 	vldr	d7, [r3]
 8001646:	ee26 7b07 	vmul.f64	d7, d6, d7
 800164a:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800164c:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 8001650:	4b5a      	ldr	r3, [pc, #360]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001652:	ed93 6b00 	vldr	d6, [r3]
 8001656:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001658:	ed93 7b00 	vldr	d7, [r3]
 800165c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001660:	4b56      	ldr	r3, [pc, #344]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001662:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 8001666:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001668:	ed93 6b00 	vldr	d6, [r3]
 800166c:	4b57      	ldr	r3, [pc, #348]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800166e:	ed93 7b00 	vldr	d7, [r3]
 8001672:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001676:	4b52      	ldr	r3, [pc, #328]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001678:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 800167c:	4b51      	ldr	r3, [pc, #324]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800167e:	ed93 6b00 	vldr	d6, [r3]
 8001682:	4b52      	ldr	r3, [pc, #328]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001684:	ed93 7b00 	vldr	d7, [r3]
 8001688:	ee26 7b07 	vmul.f64	d7, d6, d7
 800168c:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800168e:	ed83 7b00 	vstr	d7, [r3]
 8001692:	e041      	b.n	8001718 <HAL_TIM_PeriodElapsedCallback+0x1c0>
		}else if (SV1 < amax_rps){
 8001694:	4b48      	ldr	r3, [pc, #288]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001696:	ed93 6b00 	vldr	d6, [r3]
 800169a:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800169c:	ed93 7b00 	vldr	d7, [r3]
 80016a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	d536      	bpl.n	8001718 <HAL_TIM_PeriodElapsedCallback+0x1c0>
			temp_SV = amax_rps / SV1;
 80016aa:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80016ac:	ed93 5b00 	vldr	d5, [r3]
 80016b0:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80016b2:	ed93 6b00 	vldr	d6, [r3]
 80016b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016ba:	4b44      	ldr	r3, [pc, #272]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016bc:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 80016c0:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80016c2:	ed93 6b00 	vldr	d6, [r3]
 80016c6:	4b41      	ldr	r3, [pc, #260]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016c8:	ed93 7b00 	vldr	d7, [r3]
 80016cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80016d2:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 80016d6:	4b39      	ldr	r3, [pc, #228]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x264>)
 80016d8:	ed93 6b00 	vldr	d6, [r3]
 80016dc:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016de:	ed93 7b00 	vldr	d7, [r3]
 80016e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016e6:	4b35      	ldr	r3, [pc, #212]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x264>)
 80016e8:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80016ee:	ed93 6b00 	vldr	d6, [r3]
 80016f2:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016f4:	ed93 7b00 	vldr	d7, [r3]
 80016f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80016fe:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001704:	ed93 6b00 	vldr	d6, [r3]
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800170a:	ed93 7b00 	vldr	d7, [r3]
 800170e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001712:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001714:	ed83 7b00 	vstr	d7, [r3]
		}
		if (SV2 > max_rps){
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x264>)
 800171a:	ed93 6b00 	vldr	d6, [r3]
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001720:	ed93 7b00 	vldr	d7, [r3]
 8001724:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172c:	dd52      	ble.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x27c>
			temp_SV = max_rps / SV2;
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001730:	ed93 5b00 	vldr	d5, [r3]
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001736:	ed93 6b00 	vldr	d6, [r3]
 800173a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001740:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001746:	ed93 6b00 	vldr	d6, [r3]
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800174c:	ed93 7b00 	vldr	d7, [r3]
 8001750:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001756:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800175c:	ed93 6b00 	vldr	d6, [r3]
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001762:	ed93 7b00 	vldr	d7, [r3]
 8001766:	ee26 7b07 	vmul.f64	d7, d6, d7
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800176c:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001772:	ed93 6b00 	vldr	d6, [r3]
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001778:	ed93 7b00 	vldr	d7, [r3]
 800177c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001782:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001788:	ed93 6b00 	vldr	d6, [r3]
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800178e:	ed93 7b00 	vldr	d7, [r3]
 8001792:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001798:	ed83 7b00 	vstr	d7, [r3]
 800179c:	e05c      	b.n	8001858 <HAL_TIM_PeriodElapsedCallback+0x300>
 800179e:	bf00      	nop
 80017a0:	24000654 	.word	0x24000654
 80017a4:	40000c00 	.word	0x40000c00
 80017a8:	24000658 	.word	0x24000658
 80017ac:	24000690 	.word	0x24000690
 80017b0:	24000688 	.word	0x24000688
 80017b4:	24000698 	.word	0x24000698
 80017b8:	240004f0 	.word	0x240004f0
 80017bc:	24000548 	.word	0x24000548
 80017c0:	240005a0 	.word	0x240005a0
 80017c4:	240005f8 	.word	0x240005f8
 80017c8:	24000638 	.word	0x24000638
 80017cc:	24000648 	.word	0x24000648
 80017d0:	24000640 	.word	0x24000640
		}else if (SV2 < amax_rps){
 80017d4:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80017d6:	ed93 6b00 	vldr	d6, [r3]
 80017da:	4b84      	ldr	r3, [pc, #528]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x494>)
 80017dc:	ed93 7b00 	vldr	d7, [r3]
 80017e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	d536      	bpl.n	8001858 <HAL_TIM_PeriodElapsedCallback+0x300>
			temp_SV = amax_rps / SV2;
 80017ea:	4b80      	ldr	r3, [pc, #512]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x494>)
 80017ec:	ed93 5b00 	vldr	d5, [r3]
 80017f0:	4b7d      	ldr	r3, [pc, #500]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80017f2:	ed93 6b00 	vldr	d6, [r3]
 80017f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017fa:	4b7d      	ldr	r3, [pc, #500]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80017fc:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 8001800:	4b79      	ldr	r3, [pc, #484]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8001802:	ed93 6b00 	vldr	d6, [r3]
 8001806:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001808:	ed93 7b00 	vldr	d7, [r3]
 800180c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001810:	4b75      	ldr	r3, [pc, #468]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8001812:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8001818:	ed93 6b00 	vldr	d6, [r3]
 800181c:	4b74      	ldr	r3, [pc, #464]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800181e:	ed93 7b00 	vldr	d7, [r3]
 8001822:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001826:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8001828:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 800182c:	4b72      	ldr	r3, [pc, #456]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800182e:	ed93 6b00 	vldr	d6, [r3]
 8001832:	4b6f      	ldr	r3, [pc, #444]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001834:	ed93 7b00 	vldr	d7, [r3]
 8001838:	ee26 7b07 	vmul.f64	d7, d6, d7
 800183c:	4b6e      	ldr	r3, [pc, #440]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800183e:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 8001842:	4b6e      	ldr	r3, [pc, #440]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001844:	ed93 6b00 	vldr	d6, [r3]
 8001848:	4b69      	ldr	r3, [pc, #420]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800184a:	ed93 7b00 	vldr	d7, [r3]
 800184e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001852:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001854:	ed83 7b00 	vstr	d7, [r3]
		}
		if (SV3 > max_rps){
 8001858:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800185a:	ed93 6b00 	vldr	d6, [r3]
 800185e:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001860:	ed93 7b00 	vldr	d7, [r3]
 8001864:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	dd37      	ble.n	80018de <HAL_TIM_PeriodElapsedCallback+0x386>
			temp_SV = max_rps / SV3;
 800186e:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001870:	ed93 5b00 	vldr	d5, [r3]
 8001874:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8001876:	ed93 6b00 	vldr	d6, [r3]
 800187a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800187e:	4b5c      	ldr	r3, [pc, #368]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001880:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 8001884:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8001886:	ed93 6b00 	vldr	d6, [r3]
 800188a:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800188c:	ed93 7b00 	vldr	d7, [r3]
 8001890:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001894:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8001896:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 800189a:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 800189c:	ed93 6b00 	vldr	d6, [r3]
 80018a0:	4b53      	ldr	r3, [pc, #332]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80018a2:	ed93 7b00 	vldr	d7, [r3]
 80018a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80018ac:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 80018b0:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80018b2:	ed93 6b00 	vldr	d6, [r3]
 80018b6:	4b4e      	ldr	r3, [pc, #312]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80018b8:	ed93 7b00 	vldr	d7, [r3]
 80018bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018c0:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80018c2:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 80018c6:	4b4d      	ldr	r3, [pc, #308]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80018c8:	ed93 6b00 	vldr	d6, [r3]
 80018cc:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80018ce:	ed93 7b00 	vldr	d7, [r3]
 80018d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018d6:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80018d8:	ed83 7b00 	vstr	d7, [r3]
 80018dc:	e041      	b.n	8001962 <HAL_TIM_PeriodElapsedCallback+0x40a>
		}else if (SV3 < amax_rps){
 80018de:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80018e0:	ed93 6b00 	vldr	d6, [r3]
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x494>)
 80018e6:	ed93 7b00 	vldr	d7, [r3]
 80018ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	d536      	bpl.n	8001962 <HAL_TIM_PeriodElapsedCallback+0x40a>
			temp_SV = amax_rps / SV3;
 80018f4:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x494>)
 80018f6:	ed93 5b00 	vldr	d5, [r3]
 80018fa:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80018fc:	ed93 6b00 	vldr	d6, [r3]
 8001900:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001904:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001906:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800190c:	ed93 6b00 	vldr	d6, [r3]
 8001910:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001912:	ed93 7b00 	vldr	d7, [r3]
 8001916:	ee26 7b07 	vmul.f64	d7, d6, d7
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800191c:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 8001920:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8001922:	ed93 6b00 	vldr	d6, [r3]
 8001926:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001928:	ed93 7b00 	vldr	d7, [r3]
 800192c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001930:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8001932:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8001938:	ed93 6b00 	vldr	d6, [r3]
 800193c:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800193e:	ed93 7b00 	vldr	d7, [r3]
 8001942:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8001948:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800194e:	ed93 6b00 	vldr	d6, [r3]
 8001952:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001954:	ed93 7b00 	vldr	d7, [r3]
 8001958:	ee26 7b07 	vmul.f64	d7, d6, d7
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800195e:	ed83 7b00 	vstr	d7, [r3]
		}
		if (SV4 > max_rps){
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001964:	ed93 6b00 	vldr	d6, [r3]
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800196a:	ed93 7b00 	vldr	d7, [r3]
 800196e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	dd45      	ble.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x4ac>
			temp_SV = max_rps / SV4;
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800197a:	ed93 5b00 	vldr	d5, [r3]
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001980:	ed93 6b00 	vldr	d6, [r3]
 8001984:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800198a:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001990:	ed93 6b00 	vldr	d6, [r3]
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001996:	ed93 7b00 	vldr	d7, [r3]
 800199a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80019a0:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80019a6:	ed93 6b00 	vldr	d6, [r3]
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80019ac:	ed93 7b00 	vldr	d7, [r3]
 80019b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80019b6:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80019bc:	ed93 6b00 	vldr	d6, [r3]
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80019c2:	ed93 7b00 	vldr	d7, [r3]
 80019c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80019cc:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80019d2:	ed93 6b00 	vldr	d6, [r3]
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80019d8:	ed93 7b00 	vldr	d7, [r3]
 80019dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80019e2:	ed83 7b00 	vstr	d7, [r3]
 80019e6:	e04f      	b.n	8001a88 <HAL_TIM_PeriodElapsedCallback+0x530>
 80019e8:	24000548 	.word	0x24000548
 80019ec:	24000640 	.word	0x24000640
 80019f0:	24000648 	.word	0x24000648
 80019f4:	240004f0 	.word	0x240004f0
 80019f8:	240005a0 	.word	0x240005a0
 80019fc:	240005f8 	.word	0x240005f8
 8001a00:	24000638 	.word	0x24000638
		}else if (SV4 < amax_rps){
 8001a04:	4bba      	ldr	r3, [pc, #744]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001a06:	ed93 6b00 	vldr	d6, [r3]
 8001a0a:	4bba      	ldr	r3, [pc, #744]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001a0c:	ed93 7b00 	vldr	d7, [r3]
 8001a10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	d536      	bpl.n	8001a88 <HAL_TIM_PeriodElapsedCallback+0x530>
			temp_SV = amax_rps / SV4;
 8001a1a:	4bb6      	ldr	r3, [pc, #728]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001a1c:	ed93 5b00 	vldr	d5, [r3]
 8001a20:	4bb3      	ldr	r3, [pc, #716]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001a22:	ed93 6b00 	vldr	d6, [r3]
 8001a26:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a2a:	4bb3      	ldr	r3, [pc, #716]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 8001a2c:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 8001a30:	4baf      	ldr	r3, [pc, #700]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001a32:	ed93 6b00 	vldr	d6, [r3]
 8001a36:	4bb0      	ldr	r3, [pc, #704]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 8001a38:	ed93 7b00 	vldr	d7, [r3]
 8001a3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a40:	4bab      	ldr	r3, [pc, #684]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001a42:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 8001a46:	4bad      	ldr	r3, [pc, #692]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x7a4>)
 8001a48:	ed93 6b00 	vldr	d6, [r3]
 8001a4c:	4baa      	ldr	r3, [pc, #680]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 8001a4e:	ed93 7b00 	vldr	d7, [r3]
 8001a52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a56:	4ba9      	ldr	r3, [pc, #676]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x7a4>)
 8001a58:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 8001a5c:	4ba8      	ldr	r3, [pc, #672]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001a5e:	ed93 6b00 	vldr	d6, [r3]
 8001a62:	4ba5      	ldr	r3, [pc, #660]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 8001a64:	ed93 7b00 	vldr	d7, [r3]
 8001a68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a6c:	4ba4      	ldr	r3, [pc, #656]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001a6e:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 8001a72:	4ba4      	ldr	r3, [pc, #656]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x7ac>)
 8001a74:	ed93 6b00 	vldr	d6, [r3]
 8001a78:	4b9f      	ldr	r3, [pc, #636]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 8001a7a:	ed93 7b00 	vldr	d7, [r3]
 8001a7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a82:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x7ac>)
 8001a84:	ed83 7b00 	vstr	d7, [r3]
		}
		//?��??�輪子�?��?��?��?��?��?大�?��?��?��?��?��?�縮小�???�輪子�?��?��?�以保�?��?��?��??
		it1 = et1;
 8001a88:	4b9f      	ldr	r3, [pc, #636]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	499f      	ldr	r1, [pc, #636]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 8001a90:	e9c1 2300 	strd	r2, r3, [r1]
		it2 = et2;
 8001a94:	4b9e      	ldr	r3, [pc, #632]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	499e      	ldr	r1, [pc, #632]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8001a9c:	e9c1 2300 	strd	r2, r3, [r1]
		it3 = et3;
 8001aa0:	4b9d      	ldr	r3, [pc, #628]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	499d      	ldr	r1, [pc, #628]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8001aa8:	e9c1 2300 	strd	r2, r3, [r1]
		it4 = et4;
 8001aac:	4b9c      	ldr	r3, [pc, #624]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	499c      	ldr	r1, [pc, #624]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 8001ab4:	e9c1 2300 	strd	r2, r3, [r1]
		enc1 = __HAL_TIM_GetCounter(&htim23);
 8001ab8:	4b9b      	ldr	r3, [pc, #620]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	b21a      	sxth	r2, r3
 8001ac0:	4b9a      	ldr	r3, [pc, #616]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001ac2:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim4);
 8001ac4:	4b9a      	ldr	r3, [pc, #616]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	b21a      	sxth	r2, r3
 8001acc:	4b99      	ldr	r3, [pc, #612]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8001ace:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim24);
 8001ad0:	4b99      	ldr	r3, [pc, #612]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	4b98      	ldr	r3, [pc, #608]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001ada:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim3);
 8001adc:	4b98      	ldr	r3, [pc, #608]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4b97      	ldr	r3, [pc, #604]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8001ae6:	801a      	strh	r2, [r3, #0]
		enc2 *= -1;
 8001ae8:	4b92      	ldr	r3, [pc, #584]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	425b      	negs	r3, r3
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8001af8:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SetCounter(&htim24, 0);
 8001afa:	4b8f      	ldr	r3, [pc, #572]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 8001b0a:	4b8d      	ldr	r3, [pc, #564]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 8001b12:	4b87      	ldr	r3, [pc, #540]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
		speed1 = (double) enc1 / (4 * resolution * reduction_ratio) * frequency;
 8001b1a:	4b84      	ldr	r3, [pc, #528]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001b28:	4b87      	ldr	r3, [pc, #540]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8001b2a:	ed93 7b00 	vldr	d7, [r3]
 8001b2e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001b32:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b36:	4b85      	ldr	r3, [pc, #532]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8001b38:	ed93 7b00 	vldr	d7, [r3]
 8001b3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b40:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001b44:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001b46:	ed93 7b00 	vldr	d7, [r3]
 8001b4a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b4e:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001b50:	ed83 7b00 	vstr	d7, [r3]
		speed2 = (double) enc2 / (4 * resolution * reduction_ratio) * frequency;
 8001b54:	4b77      	ldr	r3, [pc, #476]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8001b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001b62:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8001b64:	ed93 7b00 	vldr	d7, [r3]
 8001b68:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001b6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b70:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8001b72:	ed93 7b00 	vldr	d7, [r3]
 8001b76:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b7a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001b7e:	4b74      	ldr	r3, [pc, #464]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001b80:	ed93 7b00 	vldr	d7, [r3]
 8001b84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b88:	4b73      	ldr	r3, [pc, #460]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001b8a:	ed83 7b00 	vstr	d7, [r3]
		speed3 = (double) enc3 / (4 * resolution * reduction_ratio) * frequency;
 8001b8e:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8001b9e:	ed93 7b00 	vldr	d7, [r3]
 8001ba2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001ba6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001baa:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8001bac:	ed93 7b00 	vldr	d7, [r3]
 8001bb0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bb4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001bb8:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001bba:	ed93 7b00 	vldr	d7, [r3]
 8001bbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bc2:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8001bc4:	ed83 7b00 	vstr	d7, [r3]
		speed4 = (double) enc4 / (4 * resolution * reduction_ratio) * frequency;
 8001bc8:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8001bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001bd6:	4b5c      	ldr	r3, [pc, #368]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8001bd8:	ed93 7b00 	vldr	d7, [r3]
 8001bdc:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001be0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8001be6:	ed93 7b00 	vldr	d7, [r3]
 8001bea:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bee:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001bf2:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001bf4:	ed93 7b00 	vldr	d7, [r3]
 8001bf8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bfc:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8001bfe:	ed83 7b00 	vstr	d7, [r3]
		et1 = SV1 - speed1;
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x7a4>)
 8001c04:	ed93 6b00 	vldr	d6, [r3]
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001c0a:	ed93 7b00 	vldr	d7, [r3]
 8001c0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8001c14:	ed83 7b00 	vstr	d7, [r3]
		et2 = SV2 - speed2;
 8001c18:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001c1a:	ed93 6b00 	vldr	d6, [r3]
 8001c1e:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001c20:	ed93 7b00 	vldr	d7, [r3]
 8001c24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c28:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8001c2a:	ed83 7b00 	vstr	d7, [r3]
		et3 = SV3 - speed3;
 8001c2e:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x7ac>)
 8001c30:	ed93 6b00 	vldr	d6, [r3]
 8001c34:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8001c36:	ed93 7b00 	vldr	d7, [r3]
 8001c3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c3e:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8001c40:	ed83 7b00 	vstr	d7, [r3]
		et4 = SV4 - speed4;
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001c46:	ed93 6b00 	vldr	d6, [r3]
 8001c4a:	4b45      	ldr	r3, [pc, #276]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8001c4c:	ed93 7b00 	vldr	d7, [r3]
 8001c50:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c54:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8001c56:	ed83 7b00 	vstr	d7, [r3]
		up1 = Kp1 * et1;
 8001c5a:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8001c5c:	ed93 6b00 	vldr	d6, [r3]
 8001c60:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8001c62:	ed93 7b00 	vldr	d7, [r3]
 8001c66:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8001c6c:	ed83 7b00 	vstr	d7, [r3]
		up2 = Kp2 * et2;
 8001c70:	4b3e      	ldr	r3, [pc, #248]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001c72:	ed93 6b00 	vldr	d6, [r3]
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8001c78:	ed93 7b00 	vldr	d7, [r3]
 8001c7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c80:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8001c82:	ed83 7b00 	vstr	d7, [r3]
		up3 = Kp3 * et3;
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8001c88:	ed93 6b00 	vldr	d6, [r3]
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8001c8e:	ed93 7b00 	vldr	d7, [r3]
 8001c92:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c96:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8001c98:	ed83 7b00 	vstr	d7, [r3]
		up4 = Kp4 * et4;
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8001c9e:	ed93 6b00 	vldr	d6, [r3]
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8001ca4:	ed93 7b00 	vldr	d7, [r3]
 8001ca8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001cae:	ed83 7b00 	vstr	d7, [r3]
		ui1 += Ki1 * it1 * 0.001;
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8001cb4:	ed93 6b00 	vldr	d6, [r3]
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 8001cba:	ed93 7b00 	vldr	d7, [r3]
 8001cbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cc2:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001ce8 <HAL_TIM_PeriodElapsedCallback+0x790>
 8001cc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001ccc:	ed93 7b00 	vldr	d7, [r3]
 8001cd0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001cd6:	ed83 7b00 	vstr	d7, [r3]
		ui2 += Ki2 * it2 * 0.001;
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001cdc:	ed93 6b00 	vldr	d6, [r3]
 8001ce0:	e056      	b.n	8001d90 <HAL_TIM_PeriodElapsedCallback+0x838>
 8001ce2:	bf00      	nop
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cec:	3f50624d 	.word	0x3f50624d
 8001cf0:	240005f8 	.word	0x240005f8
 8001cf4:	24000640 	.word	0x24000640
 8001cf8:	24000648 	.word	0x24000648
 8001cfc:	240004f0 	.word	0x240004f0
 8001d00:	24000548 	.word	0x24000548
 8001d04:	240005a0 	.word	0x240005a0
 8001d08:	24000508 	.word	0x24000508
 8001d0c:	24000518 	.word	0x24000518
 8001d10:	24000560 	.word	0x24000560
 8001d14:	24000570 	.word	0x24000570
 8001d18:	240005b8 	.word	0x240005b8
 8001d1c:	240005c8 	.word	0x240005c8
 8001d20:	24000610 	.word	0x24000610
 8001d24:	24000620 	.word	0x24000620
 8001d28:	240002b4 	.word	0x240002b4
 8001d2c:	24000630 	.word	0x24000630
 8001d30:	24000184 	.word	0x24000184
 8001d34:	24000632 	.word	0x24000632
 8001d38:	24000300 	.word	0x24000300
 8001d3c:	24000634 	.word	0x24000634
 8001d40:	24000138 	.word	0x24000138
 8001d44:	24000636 	.word	0x24000636
 8001d48:	24000040 	.word	0x24000040
 8001d4c:	24000048 	.word	0x24000048
 8001d50:	24000050 	.word	0x24000050
 8001d54:	24000660 	.word	0x24000660
 8001d58:	24000668 	.word	0x24000668
 8001d5c:	24000670 	.word	0x24000670
 8001d60:	24000678 	.word	0x24000678
 8001d64:	24000000 	.word	0x24000000
 8001d68:	240004d8 	.word	0x240004d8
 8001d6c:	24000010 	.word	0x24000010
 8001d70:	24000530 	.word	0x24000530
 8001d74:	24000020 	.word	0x24000020
 8001d78:	24000588 	.word	0x24000588
 8001d7c:	24000030 	.word	0x24000030
 8001d80:	240005e0 	.word	0x240005e0
 8001d84:	24000008 	.word	0x24000008
 8001d88:	240004e0 	.word	0x240004e0
 8001d8c:	24000018 	.word	0x24000018
 8001d90:	4b89      	ldr	r3, [pc, #548]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8001d92:	ed93 7b00 	vldr	d7, [r3]
 8001d96:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d9a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0xa58>
 8001d9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001da2:	4b86      	ldr	r3, [pc, #536]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8001da4:	ed93 7b00 	vldr	d7, [r3]
 8001da8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001dac:	4b83      	ldr	r3, [pc, #524]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8001dae:	ed83 7b00 	vstr	d7, [r3]
		ui3 += Ki3 * it3 * 0.001;
 8001db2:	4b83      	ldr	r3, [pc, #524]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8001db4:	ed93 6b00 	vldr	d6, [r3]
 8001db8:	4b82      	ldr	r3, [pc, #520]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8001dba:	ed93 7b00 	vldr	d7, [r3]
 8001dbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001dc2:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0xa58>
 8001dc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8001dcc:	ed93 7b00 	vldr	d7, [r3]
 8001dd0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001dd4:	4b7c      	ldr	r3, [pc, #496]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8001dd6:	ed83 7b00 	vstr	d7, [r3]
		ui4 += Ki4 * it4 * 0.001;
 8001dda:	4b7c      	ldr	r3, [pc, #496]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8001ddc:	ed93 6b00 	vldr	d6, [r3]
 8001de0:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8001de2:	ed93 7b00 	vldr	d7, [r3]
 8001de6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001dea:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0xa58>
 8001dee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001df2:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8001df4:	ed93 7b00 	vldr	d7, [r3]
 8001df8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001dfc:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8001dfe:	ed83 7b00 	vstr	d7, [r3]
		ud1 = Kd1 * (et1 - it1) / 0.001;
 8001e02:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8001e04:	ed93 6b00 	vldr	d6, [r3]
 8001e08:	4b74      	ldr	r3, [pc, #464]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8001e0a:	ed93 7b00 	vldr	d7, [r3]
 8001e0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e12:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8001e14:	ed93 7b00 	vldr	d7, [r3]
 8001e18:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e1c:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0xa58>
 8001e20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 8001e26:	ed83 7b00 	vstr	d7, [r3]
		ud2 = Kd2 * (et2 - it2) / 0.001;
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0xa90>)
 8001e2c:	ed93 6b00 	vldr	d6, [r3]
 8001e30:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8001e32:	ed93 7b00 	vldr	d7, [r3]
 8001e36:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e3a:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0xa94>)
 8001e3c:	ed93 7b00 	vldr	d7, [r3]
 8001e40:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e44:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0xa58>
 8001e48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e4c:	4b68      	ldr	r3, [pc, #416]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0xa98>)
 8001e4e:	ed83 7b00 	vstr	d7, [r3]
		ud3 = Kd3 * (et3 - it3) / 0.001;
 8001e52:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xa9c>)
 8001e54:	ed93 6b00 	vldr	d6, [r3]
 8001e58:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8001e5a:	ed93 7b00 	vldr	d7, [r3]
 8001e5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e62:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8001e64:	ed93 7b00 	vldr	d7, [r3]
 8001e68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e6c:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0xa58>
 8001e70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e74:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0xaa4>)
 8001e76:	ed83 7b00 	vstr	d7, [r3]
		ud4 = Kd4 * (et4 - it4) / 0.001;
 8001e7a:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0xaa8>)
 8001e7c:	ed93 6b00 	vldr	d6, [r3]
 8001e80:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8001e82:	ed93 7b00 	vldr	d7, [r3]
 8001e86:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e8a:	4b5e      	ldr	r3, [pc, #376]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8001e8c:	ed93 7b00 	vldr	d7, [r3]
 8001e90:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e94:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0xa58>
 8001e98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e9c:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8001e9e:	ed83 7b00 	vstr	d7, [r3]
		if (ui1 > imax1){
 8001ea2:	4b5a      	ldr	r3, [pc, #360]	; (800200c <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8001ea4:	ed93 6b00 	vldr	d6, [r3]
 8001ea8:	4b59      	ldr	r3, [pc, #356]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8001eaa:	ed93 7b00 	vldr	d7, [r3]
 8001eae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	dd06      	ble.n	8001ec6 <HAL_TIM_PeriodElapsedCallback+0x96e>
			ui1 = imax1;
 8001eb8:	4b55      	ldr	r3, [pc, #340]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	4953      	ldr	r1, [pc, #332]	; (800200c <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8001ec0:	e9c1 2300 	strd	r2, r3, [r1]
 8001ec4:	e014      	b.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x998>
		}else if (ui1 < imax1 * -1){
 8001ec6:	4b52      	ldr	r3, [pc, #328]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8001ec8:	ed93 7b00 	vldr	d7, [r3]
 8001ecc:	eeb1 6b47 	vneg.f64	d6, d7
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	; (800200c <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8001ed2:	ed93 7b00 	vldr	d7, [r3]
 8001ed6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	dd07      	ble.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x998>
			ui1 = imax1 * -1;
 8001ee0:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8001ee2:	ed93 7b00 	vldr	d7, [r3]
 8001ee6:	eeb1 7b47 	vneg.f64	d7, d7
 8001eea:	4b48      	ldr	r3, [pc, #288]	; (800200c <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8001eec:	ed83 7b00 	vstr	d7, [r3]
		}
		if (ui2 > imax2){
 8001ef0:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8001ef2:	ed93 6b00 	vldr	d6, [r3]
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8001ef8:	ed93 7b00 	vldr	d7, [r3]
 8001efc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	dd06      	ble.n	8001f14 <HAL_TIM_PeriodElapsedCallback+0x9bc>
			ui2 = imax2;
 8001f06:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	492b      	ldr	r1, [pc, #172]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8001f0e:	e9c1 2300 	strd	r2, r3, [r1]
 8001f12:	e014      	b.n	8001f3e <HAL_TIM_PeriodElapsedCallback+0x9e6>
		}else if (ui2 < imax2 * -1){
 8001f14:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8001f16:	ed93 7b00 	vldr	d7, [r3]
 8001f1a:	eeb1 6b47 	vneg.f64	d6, d7
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8001f20:	ed93 7b00 	vldr	d7, [r3]
 8001f24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2c:	dd07      	ble.n	8001f3e <HAL_TIM_PeriodElapsedCallback+0x9e6>
			ui2 = imax2 * -1;
 8001f2e:	4b39      	ldr	r3, [pc, #228]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8001f30:	ed93 7b00 	vldr	d7, [r3]
 8001f34:	eeb1 7b47 	vneg.f64	d7, d7
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8001f3a:	ed83 7b00 	vstr	d7, [r3]
		}
		if (ui3 > imax3){
 8001f3e:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8001f40:	ed93 6b00 	vldr	d6, [r3]
 8001f44:	4b34      	ldr	r3, [pc, #208]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8001f46:	ed93 7b00 	vldr	d7, [r3]
 8001f4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	dd06      	ble.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0xa0a>
			ui3 = imax3;
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	491b      	ldr	r1, [pc, #108]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8001f5c:	e9c1 2300 	strd	r2, r3, [r1]
 8001f60:	e014      	b.n	8001f8c <HAL_TIM_PeriodElapsedCallback+0xa34>
		}else if (ui3 < imax3 * -1){
 8001f62:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8001f64:	ed93 7b00 	vldr	d7, [r3]
 8001f68:	eeb1 6b47 	vneg.f64	d6, d7
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8001f6e:	ed93 7b00 	vldr	d7, [r3]
 8001f72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7a:	dd07      	ble.n	8001f8c <HAL_TIM_PeriodElapsedCallback+0xa34>
			ui3 = imax3 * -1;
 8001f7c:	4b26      	ldr	r3, [pc, #152]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8001f7e:	ed93 7b00 	vldr	d7, [r3]
 8001f82:	eeb1 7b47 	vneg.f64	d7, d7
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8001f88:	ed83 7b00 	vstr	d7, [r3]
		}
		if (ui4 > imax4){
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8001f8e:	ed93 6b00 	vldr	d6, [r3]
 8001f92:	4b22      	ldr	r3, [pc, #136]	; (800201c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8001f94:	ed93 7b00 	vldr	d7, [r3]
 8001f98:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	dd3e      	ble.n	8002020 <HAL_TIM_PeriodElapsedCallback+0xac8>
			ui4 = imax4;
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	490a      	ldr	r1, [pc, #40]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8001faa:	e9c1 2300 	strd	r2, r3, [r1]
 8001fae:	e04c      	b.n	800204a <HAL_TIM_PeriodElapsedCallback+0xaf2>
 8001fb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fb4:	3f50624d 	.word	0x3f50624d
 8001fb8:	24000570 	.word	0x24000570
 8001fbc:	24000538 	.word	0x24000538
 8001fc0:	24000028 	.word	0x24000028
 8001fc4:	240005c8 	.word	0x240005c8
 8001fc8:	24000590 	.word	0x24000590
 8001fcc:	24000038 	.word	0x24000038
 8001fd0:	24000620 	.word	0x24000620
 8001fd4:	240005e8 	.word	0x240005e8
 8001fd8:	24000508 	.word	0x24000508
 8001fdc:	24000518 	.word	0x24000518
 8001fe0:	24000500 	.word	0x24000500
 8001fe4:	240004e8 	.word	0x240004e8
 8001fe8:	24000560 	.word	0x24000560
 8001fec:	24000558 	.word	0x24000558
 8001ff0:	24000540 	.word	0x24000540
 8001ff4:	240005b8 	.word	0x240005b8
 8001ff8:	240005b0 	.word	0x240005b0
 8001ffc:	24000598 	.word	0x24000598
 8002000:	24000610 	.word	0x24000610
 8002004:	24000608 	.word	0x24000608
 8002008:	240005f0 	.word	0x240005f0
 800200c:	240004e0 	.word	0x240004e0
 8002010:	24000520 	.word	0x24000520
 8002014:	24000578 	.word	0x24000578
 8002018:	240005d0 	.word	0x240005d0
 800201c:	24000628 	.word	0x24000628
		}else if (ui4 < imax4 * -1){
 8002020:	4bbd      	ldr	r3, [pc, #756]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8002022:	ed93 7b00 	vldr	d7, [r3]
 8002026:	eeb1 6b47 	vneg.f64	d6, d7
 800202a:	4bbc      	ldr	r3, [pc, #752]	; (800231c <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 800202c:	ed93 7b00 	vldr	d7, [r3]
 8002030:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	dd07      	ble.n	800204a <HAL_TIM_PeriodElapsedCallback+0xaf2>
			ui4 = imax4 * -1;
 800203a:	4bb7      	ldr	r3, [pc, #732]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 800203c:	ed93 7b00 	vldr	d7, [r3]
 8002040:	eeb1 7b47 	vneg.f64	d7, d7
 8002044:	4bb5      	ldr	r3, [pc, #724]	; (800231c <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 8002046:	ed83 7b00 	vstr	d7, [r3]
		}
		ut1 = up1 + ui1 + ud1;
 800204a:	4bb5      	ldr	r3, [pc, #724]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0xdc8>)
 800204c:	ed93 6b00 	vldr	d6, [r3]
 8002050:	4bb4      	ldr	r3, [pc, #720]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0xdcc>)
 8002052:	ed93 7b00 	vldr	d7, [r3]
 8002056:	ee36 6b07 	vadd.f64	d6, d6, d7
 800205a:	4bb3      	ldr	r3, [pc, #716]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0xdd0>)
 800205c:	ed93 7b00 	vldr	d7, [r3]
 8002060:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002064:	4bb1      	ldr	r3, [pc, #708]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xdd4>)
 8002066:	ed83 7b00 	vstr	d7, [r3]
		ut2 = up2 + ui2 + ud2;
 800206a:	4bb1      	ldr	r3, [pc, #708]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0xdd8>)
 800206c:	ed93 6b00 	vldr	d6, [r3]
 8002070:	4bb0      	ldr	r3, [pc, #704]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0xddc>)
 8002072:	ed93 7b00 	vldr	d7, [r3]
 8002076:	ee36 6b07 	vadd.f64	d6, d6, d7
 800207a:	4baf      	ldr	r3, [pc, #700]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0xde0>)
 800207c:	ed93 7b00 	vldr	d7, [r3]
 8002080:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002084:	4bad      	ldr	r3, [pc, #692]	; (800233c <HAL_TIM_PeriodElapsedCallback+0xde4>)
 8002086:	ed83 7b00 	vstr	d7, [r3]
		ut3 = up3 + ui3 + ud3;
 800208a:	4bad      	ldr	r3, [pc, #692]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0xde8>)
 800208c:	ed93 6b00 	vldr	d6, [r3]
 8002090:	4bac      	ldr	r3, [pc, #688]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 8002092:	ed93 7b00 	vldr	d7, [r3]
 8002096:	ee36 6b07 	vadd.f64	d6, d6, d7
 800209a:	4bab      	ldr	r3, [pc, #684]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 800209c:	ed93 7b00 	vldr	d7, [r3]
 80020a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020a4:	4ba9      	ldr	r3, [pc, #676]	; (800234c <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 80020a6:	ed83 7b00 	vstr	d7, [r3]
		ut4 = up4 + ui4 + ud4;
 80020aa:	4ba9      	ldr	r3, [pc, #676]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 80020ac:	ed93 6b00 	vldr	d6, [r3]
 80020b0:	4b9a      	ldr	r3, [pc, #616]	; (800231c <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 80020b2:	ed93 7b00 	vldr	d7, [r3]
 80020b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80020ba:	4ba6      	ldr	r3, [pc, #664]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 80020bc:	ed93 7b00 	vldr	d7, [r3]
 80020c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020c4:	4ba4      	ldr	r3, [pc, #656]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 80020c6:	ed83 7b00 	vstr	d7, [r3]
		pulse1 = ut1 * 3200;
 80020ca:	4b98      	ldr	r3, [pc, #608]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xdd4>)
 80020cc:	ed93 7b00 	vldr	d7, [r3]
 80020d0:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8002310 <HAL_TIM_PeriodElapsedCallback+0xdb8>
 80020d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020d8:	4ba0      	ldr	r3, [pc, #640]	; (800235c <HAL_TIM_PeriodElapsedCallback+0xe04>)
 80020da:	ed83 7b00 	vstr	d7, [r3]
		pulse2 = ut2 * 3200;
 80020de:	4b97      	ldr	r3, [pc, #604]	; (800233c <HAL_TIM_PeriodElapsedCallback+0xde4>)
 80020e0:	ed93 7b00 	vldr	d7, [r3]
 80020e4:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8002310 <HAL_TIM_PeriodElapsedCallback+0xdb8>
 80020e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020ec:	4b9c      	ldr	r3, [pc, #624]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0xe08>)
 80020ee:	ed83 7b00 	vstr	d7, [r3]
		pulse3 = ut3 * 3200;
 80020f2:	4b96      	ldr	r3, [pc, #600]	; (800234c <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 80020f4:	ed93 7b00 	vldr	d7, [r3]
 80020f8:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002310 <HAL_TIM_PeriodElapsedCallback+0xdb8>
 80020fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002100:	4b98      	ldr	r3, [pc, #608]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 8002102:	ed83 7b00 	vstr	d7, [r3]
		pulse4 = ut4 * 3200;
 8002106:	4b94      	ldr	r3, [pc, #592]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8002108:	ed93 7b00 	vldr	d7, [r3]
 800210c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8002310 <HAL_TIM_PeriodElapsedCallback+0xdb8>
 8002110:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002114:	4b94      	ldr	r3, [pc, #592]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0xe10>)
 8002116:	ed83 7b00 	vstr	d7, [r3]
		if (ut1 < 0){
 800211a:	4b84      	ldr	r3, [pc, #528]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xdd4>)
 800211c:	ed93 7b00 	vldr	d7, [r3]
 8002120:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	d507      	bpl.n	800213a <HAL_TIM_PeriodElapsedCallback+0xbe2>
			pulse1 *= -1;
 800212a:	4b8c      	ldr	r3, [pc, #560]	; (800235c <HAL_TIM_PeriodElapsedCallback+0xe04>)
 800212c:	ed93 7b00 	vldr	d7, [r3]
 8002130:	eeb1 7b47 	vneg.f64	d7, d7
 8002134:	4b89      	ldr	r3, [pc, #548]	; (800235c <HAL_TIM_PeriodElapsedCallback+0xe04>)
 8002136:	ed83 7b00 	vstr	d7, [r3]
		}
		if (ut2 < 0){
 800213a:	4b80      	ldr	r3, [pc, #512]	; (800233c <HAL_TIM_PeriodElapsedCallback+0xde4>)
 800213c:	ed93 7b00 	vldr	d7, [r3]
 8002140:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d507      	bpl.n	800215a <HAL_TIM_PeriodElapsedCallback+0xc02>
			pulse2 *= -1;
 800214a:	4b85      	ldr	r3, [pc, #532]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0xe08>)
 800214c:	ed93 7b00 	vldr	d7, [r3]
 8002150:	eeb1 7b47 	vneg.f64	d7, d7
 8002154:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0xe08>)
 8002156:	ed83 7b00 	vstr	d7, [r3]
				}
		if (ut3 < 0){
 800215a:	4b7c      	ldr	r3, [pc, #496]	; (800234c <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 800215c:	ed93 7b00 	vldr	d7, [r3]
 8002160:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002168:	d507      	bpl.n	800217a <HAL_TIM_PeriodElapsedCallback+0xc22>
			pulse3 *= -1;
 800216a:	4b7e      	ldr	r3, [pc, #504]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 800216c:	ed93 7b00 	vldr	d7, [r3]
 8002170:	eeb1 7b47 	vneg.f64	d7, d7
 8002174:	4b7b      	ldr	r3, [pc, #492]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 8002176:	ed83 7b00 	vstr	d7, [r3]
		}
		if (ut4 < 0){
 800217a:	4b77      	ldr	r3, [pc, #476]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 800217c:	ed93 7b00 	vldr	d7, [r3]
 8002180:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	d507      	bpl.n	800219a <HAL_TIM_PeriodElapsedCallback+0xc42>
			pulse4 *= -1;
 800218a:	4b77      	ldr	r3, [pc, #476]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0xe10>)
 800218c:	ed93 7b00 	vldr	d7, [r3]
 8002190:	eeb1 7b47 	vneg.f64	d7, d7
 8002194:	4b74      	ldr	r3, [pc, #464]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0xe10>)
 8002196:	ed83 7b00 	vstr	d7, [r3]
		}
		if(pulse1 > 3200) pulse1 = 3200;
 800219a:	4b70      	ldr	r3, [pc, #448]	; (800235c <HAL_TIM_PeriodElapsedCallback+0xe04>)
 800219c:	ed93 7b00 	vldr	d7, [r3]
 80021a0:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8002310 <HAL_TIM_PeriodElapsedCallback+0xdb8>
 80021a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	dd05      	ble.n	80021ba <HAL_TIM_PeriodElapsedCallback+0xc62>
 80021ae:	496b      	ldr	r1, [pc, #428]	; (800235c <HAL_TIM_PeriodElapsedCallback+0xe04>)
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	4b6d      	ldr	r3, [pc, #436]	; (800236c <HAL_TIM_PeriodElapsedCallback+0xe14>)
 80021b6:	e9c1 2300 	strd	r2, r3, [r1]
		if(pulse2 > 3200) pulse2 = 3200;
 80021ba:	4b69      	ldr	r3, [pc, #420]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0xe08>)
 80021bc:	ed93 7b00 	vldr	d7, [r3]
 80021c0:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8002310 <HAL_TIM_PeriodElapsedCallback+0xdb8>
 80021c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80021c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021cc:	dd05      	ble.n	80021da <HAL_TIM_PeriodElapsedCallback+0xc82>
 80021ce:	4964      	ldr	r1, [pc, #400]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0xe08>)
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	4b65      	ldr	r3, [pc, #404]	; (800236c <HAL_TIM_PeriodElapsedCallback+0xe14>)
 80021d6:	e9c1 2300 	strd	r2, r3, [r1]
		if(pulse3 > 3200) pulse3 = 3200;
 80021da:	4b62      	ldr	r3, [pc, #392]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 80021dc:	ed93 7b00 	vldr	d7, [r3]
 80021e0:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8002310 <HAL_TIM_PeriodElapsedCallback+0xdb8>
 80021e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80021e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ec:	dd05      	ble.n	80021fa <HAL_TIM_PeriodElapsedCallback+0xca2>
 80021ee:	495d      	ldr	r1, [pc, #372]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_TIM_PeriodElapsedCallback+0xe14>)
 80021f6:	e9c1 2300 	strd	r2, r3, [r1]
		if(pulse4 > 3200) pulse4 = 3200;
 80021fa:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0xe10>)
 80021fc:	ed93 7b00 	vldr	d7, [r3]
 8002200:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8002310 <HAL_TIM_PeriodElapsedCallback+0xdb8>
 8002204:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	dd05      	ble.n	800221a <HAL_TIM_PeriodElapsedCallback+0xcc2>
 800220e:	4956      	ldr	r1, [pc, #344]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0xe10>)
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	4b55      	ldr	r3, [pc, #340]	; (800236c <HAL_TIM_PeriodElapsedCallback+0xe14>)
 8002216:	e9c1 2300 	strd	r2, r3, [r1]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pulse1);
 800221a:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_TIM_PeriodElapsedCallback+0xe04>)
 800221c:	ed93 7b00 	vldr	d7, [r3]
 8002220:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002228:	ee17 2a90 	vmov	r2, s15
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pulse2);
 800222e:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0xe08>)
 8002230:	ed93 7b00 	vldr	d7, [r3]
 8002234:	4b4e      	ldr	r3, [pc, #312]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800223c:	ee17 2a90 	vmov	r2, s15
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, pulse3);
 8002242:	4b48      	ldr	r3, [pc, #288]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 8002244:	ed93 7b00 	vldr	d7, [r3]
 8002248:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002250:	ee17 2a90 	vmov	r2, s15
 8002254:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse4);
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0xe10>)
 8002258:	ed93 7b00 	vldr	d7, [r3]
 800225c:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002264:	ee17 2a90 	vmov	r2, s15
 8002268:	635a      	str	r2, [r3, #52]	; 0x34
		if (ut1 > 0){
 800226a:	4b30      	ldr	r3, [pc, #192]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xdd4>)
 800226c:	ed93 7b00 	vldr	d7, [r3]
 8002270:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	dd0c      	ble.n	8002294 <HAL_TIM_PeriodElapsedCallback+0xd3c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002280:	483d      	ldr	r0, [pc, #244]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xe20>)
 8002282:	f006 feff 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800228c:	483a      	ldr	r0, [pc, #232]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xe20>)
 800228e:	f006 fef9 	bl	8009084 <HAL_GPIO_WritePin>
 8002292:	e028      	b.n	80022e6 <HAL_TIM_PeriodElapsedCallback+0xd8e>
		}else if (ut1 < 0){
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xdd4>)
 8002296:	ed93 7b00 	vldr	d7, [r3]
 800229a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d50c      	bpl.n	80022be <HAL_TIM_PeriodElapsedCallback+0xd66>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022aa:	4833      	ldr	r0, [pc, #204]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xe20>)
 80022ac:	f006 feea 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80022b0:	2201      	movs	r2, #1
 80022b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b6:	4830      	ldr	r0, [pc, #192]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xe20>)
 80022b8:	f006 fee4 	bl	8009084 <HAL_GPIO_WritePin>
 80022bc:	e013      	b.n	80022e6 <HAL_TIM_PeriodElapsedCallback+0xd8e>
		}else if (ut1 == 0){
 80022be:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xdd4>)
 80022c0:	ed93 7b00 	vldr	d7, [r3]
 80022c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80022c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022cc:	d10b      	bne.n	80022e6 <HAL_TIM_PeriodElapsedCallback+0xd8e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022d4:	4828      	ldr	r0, [pc, #160]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xe20>)
 80022d6:	f006 fed5 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e0:	4825      	ldr	r0, [pc, #148]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xe20>)
 80022e2:	f006 fecf 	bl	8009084 <HAL_GPIO_WritePin>
		}
		if (ut2 < 0){
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_TIM_PeriodElapsedCallback+0xde4>)
 80022e8:	ed93 7b00 	vldr	d7, [r3]
 80022ec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	d544      	bpl.n	8002380 <HAL_TIM_PeriodElapsedCallback+0xe28>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 80022f6:	2201      	movs	r2, #1
 80022f8:	2140      	movs	r1, #64	; 0x40
 80022fa:	4820      	ldr	r0, [pc, #128]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xe24>)
 80022fc:	f006 fec2 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002306:	481d      	ldr	r0, [pc, #116]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xe24>)
 8002308:	f006 febc 	bl	8009084 <HAL_GPIO_WritePin>
 800230c:	e05f      	b.n	80023ce <HAL_TIM_PeriodElapsedCallback+0xe76>
 800230e:	bf00      	nop
 8002310:	00000000 	.word	0x00000000
 8002314:	40a90000 	.word	0x40a90000
 8002318:	24000628 	.word	0x24000628
 800231c:	240005e8 	.word	0x240005e8
 8002320:	240004d8 	.word	0x240004d8
 8002324:	240004e0 	.word	0x240004e0
 8002328:	240004e8 	.word	0x240004e8
 800232c:	240004d0 	.word	0x240004d0
 8002330:	24000530 	.word	0x24000530
 8002334:	24000538 	.word	0x24000538
 8002338:	24000540 	.word	0x24000540
 800233c:	24000528 	.word	0x24000528
 8002340:	24000588 	.word	0x24000588
 8002344:	24000590 	.word	0x24000590
 8002348:	24000598 	.word	0x24000598
 800234c:	24000580 	.word	0x24000580
 8002350:	240005e0 	.word	0x240005e0
 8002354:	240005f0 	.word	0x240005f0
 8002358:	240005d8 	.word	0x240005d8
 800235c:	24000510 	.word	0x24000510
 8002360:	24000568 	.word	0x24000568
 8002364:	240005c0 	.word	0x240005c0
 8002368:	24000618 	.word	0x24000618
 800236c:	40a90000 	.word	0x40a90000
 8002370:	2400021c 	.word	0x2400021c
 8002374:	24000268 	.word	0x24000268
 8002378:	58020400 	.word	0x58020400
 800237c:	58021000 	.word	0x58021000
		}else if (ut2 > 0){
 8002380:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8002382:	ed93 7b00 	vldr	d7, [r3]
 8002386:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	dd0b      	ble.n	80023a8 <HAL_TIM_PeriodElapsedCallback+0xe50>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	2140      	movs	r1, #64	; 0x40
 8002394:	484d      	ldr	r0, [pc, #308]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8002396:	f006 fe75 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023a0:	484a      	ldr	r0, [pc, #296]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80023a2:	f006 fe6f 	bl	8009084 <HAL_GPIO_WritePin>
 80023a6:	e012      	b.n	80023ce <HAL_TIM_PeriodElapsedCallback+0xe76>
		}else if (ut2 == 0){
 80023a8:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 80023aa:	ed93 7b00 	vldr	d7, [r3]
 80023ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	d10a      	bne.n	80023ce <HAL_TIM_PeriodElapsedCallback+0xe76>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2140      	movs	r1, #64	; 0x40
 80023bc:	4843      	ldr	r0, [pc, #268]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80023be:	f006 fe61 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80023c2:	2200      	movs	r2, #0
 80023c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c8:	4840      	ldr	r0, [pc, #256]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80023ca:	f006 fe5b 	bl	8009084 <HAL_GPIO_WritePin>
		}
		if (ut3 > 0){
 80023ce:	4b40      	ldr	r3, [pc, #256]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80023d0:	ed93 7b00 	vldr	d7, [r3]
 80023d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	dd0c      	ble.n	80023f8 <HAL_TIM_PeriodElapsedCallback+0xea0>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e4:	4839      	ldr	r0, [pc, #228]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80023e6:	f006 fe4d 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80023ea:	2200      	movs	r2, #0
 80023ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f0:	4836      	ldr	r0, [pc, #216]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80023f2:	f006 fe47 	bl	8009084 <HAL_GPIO_WritePin>
 80023f6:	e028      	b.n	800244a <HAL_TIM_PeriodElapsedCallback+0xef2>
		}else if (ut3 < 0){
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 80023fa:	ed93 7b00 	vldr	d7, [r3]
 80023fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	d50c      	bpl.n	8002422 <HAL_TIM_PeriodElapsedCallback+0xeca>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800240e:	482f      	ldr	r0, [pc, #188]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8002410:	f006 fe38 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8002414:	2201      	movs	r2, #1
 8002416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800241a:	482c      	ldr	r0, [pc, #176]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800241c:	f006 fe32 	bl	8009084 <HAL_GPIO_WritePin>
 8002420:	e013      	b.n	800244a <HAL_TIM_PeriodElapsedCallback+0xef2>
		}else if (ut3 == 0){
 8002422:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8002424:	ed93 7b00 	vldr	d7, [r3]
 8002428:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	d10b      	bne.n	800244a <HAL_TIM_PeriodElapsedCallback+0xef2>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002438:	4824      	ldr	r0, [pc, #144]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800243a:	f006 fe23 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002444:	4821      	ldr	r0, [pc, #132]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8002446:	f006 fe1d 	bl	8009084 <HAL_GPIO_WritePin>
		}
		if (ut4 > 0){
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800244c:	ed93 7b00 	vldr	d7, [r3]
 8002450:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	dd0b      	ble.n	8002472 <HAL_TIM_PeriodElapsedCallback+0xf1a>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800245a:	2201      	movs	r2, #1
 800245c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002460:	481a      	ldr	r0, [pc, #104]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8002462:	f006 fe0f 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	4818      	ldr	r0, [pc, #96]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800246c:	f006 fe0a 	bl	8009084 <HAL_GPIO_WritePin>
		}else if (ut4 == 0){
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
		}
	}
}
 8002470:	e026      	b.n	80024c0 <HAL_TIM_PeriodElapsedCallback+0xf68>
		}else if (ut4 < 0){
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 8002474:	ed93 7b00 	vldr	d7, [r3]
 8002478:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	d50b      	bpl.n	800249a <HAL_TIM_PeriodElapsedCallback+0xf42>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8002482:	2200      	movs	r2, #0
 8002484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002488:	4810      	ldr	r0, [pc, #64]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800248a:	f006 fdfb 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 800248e:	2201      	movs	r2, #1
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	480e      	ldr	r0, [pc, #56]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8002494:	f006 fdf6 	bl	8009084 <HAL_GPIO_WritePin>
}
 8002498:	e012      	b.n	80024c0 <HAL_TIM_PeriodElapsedCallback+0xf68>
		}else if (ut4 == 0){
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800249c:	ed93 7b00 	vldr	d7, [r3]
 80024a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80024a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a8:	d10a      	bne.n	80024c0 <HAL_TIM_PeriodElapsedCallback+0xf68>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80024aa:	2200      	movs	r2, #0
 80024ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b0:	4806      	ldr	r0, [pc, #24]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80024b2:	f006 fde7 	bl	8009084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	4804      	ldr	r0, [pc, #16]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 80024bc:	f006 fde2 	bl	8009084 <HAL_GPIO_WritePin>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	24000528 	.word	0x24000528
 80024cc:	58021000 	.word	0x58021000
 80024d0:	24000580 	.word	0x24000580
 80024d4:	240005d8 	.word	0x240005d8

080024d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024dc:	b672      	cpsid	i
}
 80024de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <Error_Handler+0x8>

080024e2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <_ZN3ros3MsgC1Ev+0x1c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	0800f7e8 	.word	0x0800f7e8

08002524 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
      data()
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ffe8 	bl	8002504 <_ZN3ros3MsgC1Ev>
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3304      	adds	r3, #4
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ffcf 	bl	80024e2 <_ZN3ros4TimeC1Ev>
    {
    }
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	0800f7d0 	.word	0x0800f7d0

08002554 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	4413      	add	r3, r2
 800256c:	b2ca      	uxtb	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	0a19      	lsrs	r1, r3, #8
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3301      	adds	r3, #1
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	4413      	add	r3, r2
 800257e:	b2ca      	uxtb	r2, r1
 8002580:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	0c19      	lsrs	r1, r3, #16
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3302      	adds	r3, #2
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	b2ca      	uxtb	r2, r1
 8002592:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	0e19      	lsrs	r1, r3, #24
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3303      	adds	r3, #3
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	b2ca      	uxtb	r2, r1
 80025a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3304      	adds	r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6899      	ldr	r1, [r3, #8]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	b2ca      	uxtb	r2, r1
 80025b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0a19      	lsrs	r1, r3, #8
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3301      	adds	r3, #1
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	b2ca      	uxtb	r2, r1
 80025ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	0c19      	lsrs	r1, r3, #16
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3302      	adds	r3, #2
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	b2ca      	uxtb	r2, r1
 80025dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0e19      	lsrs	r1, r3, #24
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3303      	adds	r3, #3
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	b2ca      	uxtb	r2, r1
 80025ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3304      	adds	r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
      return offset;
 80025f6:	68fb      	ldr	r3, [r7, #12]
    }
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	4413      	add	r3, r2
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3301      	adds	r3, #1
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	440b      	add	r3, r1
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3302      	adds	r3, #2
 800263e:	6839      	ldr	r1, [r7, #0]
 8002640:	440b      	add	r3, r1
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	041b      	lsls	r3, r3, #16
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3303      	adds	r3, #3
 8002654:	6839      	ldr	r1, [r7, #0]
 8002656:	440b      	add	r3, r1
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3304      	adds	r3, #4
 8002666:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3301      	adds	r3, #1
 800267e:	6839      	ldr	r1, [r7, #0]
 8002680:	440b      	add	r3, r1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3302      	adds	r3, #2
 8002694:	6839      	ldr	r1, [r7, #0]
 8002696:	440b      	add	r3, r1
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3303      	adds	r3, #3
 80026aa:	6839      	ldr	r1, [r7, #0]
 80026ac:	440b      	add	r3, r1
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	061b      	lsls	r3, r3, #24
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3304      	adds	r3, #4
 80026bc:	60fb      	str	r3, [r7, #12]
     return offset;
 80026be:	68fb      	ldr	r3, [r7, #12]
    }
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	0800f540 	.word	0x0800f540

080026e8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	0800f554 	.word	0x0800f554

08002704 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fef8 	bl	8002504 <_ZN3ros3MsgC1Ev>
 8002714:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	809a      	strh	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a06      	ldr	r2, [pc, #24]	; (8002748 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002730:	611a      	str	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
    {
    }
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	0800f7b8 	.word	0x0800f7b8
 8002748:	0800f578 	.word	0x0800f578

0800274c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8899      	ldrh	r1, [r3, #4]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	4413      	add	r3, r2
 8002764:	b2ca      	uxtb	r2, r1
 8002766:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	889b      	ldrh	r3, [r3, #4]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	b299      	uxth	r1, r3
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3301      	adds	r3, #1
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	4413      	add	r3, r2
 8002778:	b2ca      	uxtb	r2, r1
 800277a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3302      	adds	r3, #2
 8002780:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fdc2 	bl	8000310 <strlen>
 800278c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	69b9      	ldr	r1, [r7, #24]
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fd7e 	bl	8004298 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	3304      	adds	r3, #4
 80027a0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	18d0      	adds	r0, r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4619      	mov	r1, r3
 80027b0:	f00c fd22 	bl	800f1f8 <memcpy>
      offset += length_topic_name;
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4413      	add	r3, r2
 80027ba:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fda5 	bl	8000310 <strlen>
 80027c6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	6979      	ldr	r1, [r7, #20]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 fd61 	bl	8004298 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	18d0      	adds	r0, r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4619      	mov	r1, r3
 80027ea:	f00c fd05 	bl	800f1f8 <memcpy>
      offset += length_message_type;
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	4413      	add	r3, r2
 80027f4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fd88 	bl	8000310 <strlen>
 8002800:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	4413      	add	r3, r2
 8002808:	6939      	ldr	r1, [r7, #16]
 800280a:	4618      	mov	r0, r3
 800280c:	f001 fd44 	bl	8004298 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	3304      	adds	r3, #4
 8002814:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	18d0      	adds	r0, r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4619      	mov	r1, r3
 8002824:	f00c fce8 	bl	800f1f8 <memcpy>
      offset += length_md5sum;
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4413      	add	r3, r2
 800282e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002836:	68f9      	ldr	r1, [r7, #12]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	4413      	add	r3, r2
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	0a19      	lsrs	r1, r3, #8
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4413      	add	r3, r2
 800284e:	b2ca      	uxtb	r2, r1
 8002850:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	0c19      	lsrs	r1, r3, #16
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3302      	adds	r3, #2
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	4413      	add	r3, r2
 800285e:	b2ca      	uxtb	r2, r1
 8002860:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	0e19      	lsrs	r1, r3, #24
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3303      	adds	r3, #3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4413      	add	r3, r2
 800286e:	b2ca      	uxtb	r2, r1
 8002870:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	61fb      	str	r3, [r7, #28]
      return offset;
 8002878:	69fb      	ldr	r3, [r7, #28]
    }
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002882:	b580      	push	{r7, lr}
 8002884:	b08a      	sub	sp, #40	; 0x28
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	4413      	add	r3, r2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b29a      	uxth	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	889b      	ldrh	r3, [r3, #4]
 80028a2:	b21a      	sxth	r2, r3
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	3301      	adds	r3, #1
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	440b      	add	r3, r1
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	b21b      	sxth	r3, r3
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	3302      	adds	r3, #2
 80028c0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	441a      	add	r2, r3
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 fd00 	bl	80042d4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	3304      	adds	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	4413      	add	r3, r2
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	441a      	add	r2, r3
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	440b      	add	r3, r1
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	3301      	adds	r3, #1
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
 8002902:	e7ec      	b.n	80028de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4413      	add	r3, r2
 800290a:	3b01      	subs	r3, #1
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4413      	add	r3, r2
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	3b01      	subs	r3, #1
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	441a      	add	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4413      	add	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	441a      	add	r2, r3
 800292e:	f107 0310 	add.w	r3, r7, #16
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f001 fccd 	bl	80042d4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	3304      	adds	r3, #4
 800293e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	6a3a      	ldr	r2, [r7, #32]
 800294c:	429a      	cmp	r2, r3
 800294e:	d20c      	bcs.n	800296a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	441a      	add	r2, r3
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	3b01      	subs	r3, #1
 800295a:	6839      	ldr	r1, [r7, #0]
 800295c:	440b      	add	r3, r1
 800295e:	7812      	ldrb	r2, [r2, #0]
 8002960:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	3301      	adds	r3, #1
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	e7ec      	b.n	8002944 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	3b01      	subs	r3, #1
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	4413      	add	r3, r2
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	3b01      	subs	r3, #1
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	441a      	add	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	441a      	add	r2, r3
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f001 fc9a 	bl	80042d4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	3304      	adds	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d20c      	bcs.n	80029d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	441a      	add	r2, r3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	3b01      	subs	r3, #1
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	440b      	add	r3, r1
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3301      	adds	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e7ec      	b.n	80029aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	3b01      	subs	r3, #1
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	441a      	add	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	6839      	ldr	r1, [r7, #0]
 80029fe:	440a      	add	r2, r1
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	440b      	add	r3, r1
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	6839      	ldr	r1, [r7, #0]
 8002a20:	440b      	add	r3, r1
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	3303      	adds	r3, #3
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	440b      	add	r3, r1
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	061b      	lsls	r3, r3, #24
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	3304      	adds	r3, #4
 8002a46:	61bb      	str	r3, [r7, #24]
     return offset;
 8002a48:	69bb      	ldr	r3, [r7, #24]
    }
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	0800f57c 	.word	0x0800f57c

08002a70 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	0800f598 	.word	0x0800f598

08002a8c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fd34 	bl	8002504 <_ZN3ros3MsgC1Ev>
 8002a9c:	4a06      	ldr	r2, [pc, #24]	; (8002ab8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	711a      	strb	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a04      	ldr	r2, [pc, #16]	; (8002abc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002aac:	609a      	str	r2, [r3, #8]
    {
    }
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	0800f7a0 	.word	0x0800f7a0
 8002abc:	0800f578 	.word	0x0800f578

08002ac0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	7912      	ldrb	r2, [r2, #4]
 8002ad8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3301      	adds	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fc13 	bl	8000310 <strlen>
 8002aea:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f001 fbcf 	bl	8004298 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3304      	adds	r3, #4
 8002afe:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	18d0      	adds	r0, r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f00c fb73 	bl	800f1f8 <memcpy>
      offset += length_msg;
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4413      	add	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    }
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	3301      	adds	r3, #1
 8002b42:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	441a      	add	r2, r3
 8002b4a:	f107 030c 	add.w	r3, r7, #12
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 fbbf 	bl	80042d4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d20c      	bcs.n	8002b86 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	441a      	add	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	6839      	ldr	r1, [r7, #0]
 8002b78:	440b      	add	r3, r1
 8002b7a:	7812      	ldrb	r2, [r2, #0]
 8002b7c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3301      	adds	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	e7ec      	b.n	8002b60 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	4413      	add	r3, r2
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	441a      	add	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
     return offset;
 8002baa:	693b      	ldr	r3, [r7, #16]
    }
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	0800f5bc 	.word	0x0800f5bc

08002bd0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	0800f5d0 	.word	0x0800f5d0

08002bec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fc84 	bl	8002504 <_ZN3ros3MsgC1Ev>
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	619a      	str	r2, [r3, #24]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	61da      	str	r2, [r3, #28]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	0800f788 	.word	0x0800f788

08002c34 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b2ca      	uxtb	r2, r1
 8002c4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0a19      	lsrs	r1, r3, #8
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	3301      	adds	r3, #1
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	b2ca      	uxtb	r2, r1
 8002c60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	0c19      	lsrs	r1, r3, #16
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	b2ca      	uxtb	r2, r1
 8002c72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	0e19      	lsrs	r1, r3, #24
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	3303      	adds	r3, #3
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	b2ca      	uxtb	r2, r1
 8002c84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	3304      	adds	r3, #4
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	623b      	str	r3, [r7, #32]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d22b      	bcs.n	8002cf2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002ca8:	6939      	ldr	r1, [r7, #16]
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	b2ca      	uxtb	r2, r1
 8002cb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	0a19      	lsrs	r1, r3, #8
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	3301      	adds	r3, #1
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	b2ca      	uxtb	r2, r1
 8002cc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	0c19      	lsrs	r1, r3, #16
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	3302      	adds	r3, #2
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	b2ca      	uxtb	r2, r1
 8002cd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	0e19      	lsrs	r1, r3, #24
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	3303      	adds	r3, #3
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	b2ca      	uxtb	r2, r1
 8002ce2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	3301      	adds	r3, #1
 8002cee:	623b      	str	r3, [r7, #32]
 8002cf0:	e7ce      	b.n	8002c90 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6919      	ldr	r1, [r3, #16]
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	b2ca      	uxtb	r2, r1
 8002cfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	0a19      	lsrs	r1, r3, #8
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	3301      	adds	r3, #1
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b2ca      	uxtb	r2, r1
 8002d10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	0c19      	lsrs	r1, r3, #16
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	b2ca      	uxtb	r2, r1
 8002d22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	0e19      	lsrs	r1, r3, #24
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	3303      	adds	r3, #3
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	4413      	add	r3, r2
 8002d32:	b2ca      	uxtb	r2, r1
 8002d34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	3304      	adds	r3, #4
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d22b      	bcs.n	8002da2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002d58:	68f9      	ldr	r1, [r7, #12]
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	b2ca      	uxtb	r2, r1
 8002d62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	0a19      	lsrs	r1, r3, #8
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	b2ca      	uxtb	r2, r1
 8002d72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	0c19      	lsrs	r1, r3, #16
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	b2ca      	uxtb	r2, r1
 8002d82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	0e19      	lsrs	r1, r3, #24
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3303      	adds	r3, #3
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	b2ca      	uxtb	r2, r1
 8002d92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	3304      	adds	r3, #4
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	e7ce      	b.n	8002d40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69d9      	ldr	r1, [r3, #28]
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	b2ca      	uxtb	r2, r1
 8002dae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	0a19      	lsrs	r1, r3, #8
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	3301      	adds	r3, #1
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b2ca      	uxtb	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	0c19      	lsrs	r1, r3, #16
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	3302      	adds	r3, #2
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	b2ca      	uxtb	r2, r1
 8002dd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	0e19      	lsrs	r1, r3, #24
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	3303      	adds	r3, #3
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	b2ca      	uxtb	r2, r1
 8002de4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	3304      	adds	r3, #4
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d228      	bcs.n	8002e4c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fa82 	bl	8000310 <strlen>
 8002e0c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	6979      	ldr	r1, [r7, #20]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fa3e 	bl	8004298 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	3304      	adds	r3, #4
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	18d0      	adds	r0, r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4619      	mov	r1, r3
 8002e38:	f00c f9de 	bl	800f1f8 <memcpy>
      offset += length_stringsi;
 8002e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	4413      	add	r3, r2
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	e7d1      	b.n	8002df0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b08e      	sub	sp, #56	; 0x38
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e70:	3301      	adds	r3, #1
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4413      	add	r3, r2
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	6a3a      	ldr	r2, [r7, #32]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e82:	3302      	adds	r3, #2
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	6a3a      	ldr	r2, [r7, #32]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e94:	3303      	adds	r3, #3
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	4413      	add	r3, r2
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	6a3a      	ldr	r2, [r7, #32]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	6a3a      	ldr	r2, [r7, #32]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d90a      	bls.n	8002eca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f00c f9b0 	bl	800f224 <realloc>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a3a      	ldr	r2, [r7, #32]
 8002ece:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d236      	bcs.n	8002f4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ee6:	6839      	ldr	r1, [r7, #0]
 8002ee8:	440a      	add	r2, r1
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	6839      	ldr	r1, [r7, #0]
 8002ef8:	440b      	add	r3, r1
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f06:	3302      	adds	r3, #2
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	440b      	add	r3, r1
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f18:	3303      	adds	r3, #3
 8002f1a:	6839      	ldr	r1, [r7, #0]
 8002f1c:	440b      	add	r3, r1
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	3304      	adds	r3, #4
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	3208      	adds	r2, #8
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	3301      	adds	r3, #1
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4a:	e7c3      	b.n	8002ed4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	4413      	add	r3, r2
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f58:	3301      	adds	r3, #1
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	041b      	lsls	r3, r3, #16
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7c:	3303      	adds	r3, #3
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	4413      	add	r3, r2
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	061b      	lsls	r3, r3, #24
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8e:	3304      	adds	r3, #4
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d90a      	bls.n	8002fb2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f00c f93c 	bl	800f224 <realloc>
 8002fac:	4602      	mov	r2, r0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d236      	bcs.n	8003034 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	440a      	add	r2, r1
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fdc:	3301      	adds	r3, #1
 8002fde:	6839      	ldr	r1, [r7, #0]
 8002fe0:	440b      	add	r3, r1
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fee:	3302      	adds	r3, #2
 8002ff0:	6839      	ldr	r1, [r7, #0]
 8002ff2:	440b      	add	r3, r1
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	3303      	adds	r3, #3
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	440b      	add	r3, r1
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003016:	3304      	adds	r3, #4
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	3214      	adds	r2, #20
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	3301      	adds	r3, #1
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003032:	e7c3      	b.n	8002fbc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4413      	add	r3, r2
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800303e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003040:	3301      	adds	r3, #1
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	4413      	add	r3, r2
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003052:	3302      	adds	r3, #2
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003064:	3303      	adds	r3, #3
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	4413      	add	r3, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003076:	3304      	adds	r3, #4
 8003078:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	429a      	cmp	r2, r3
 8003082:	d90a      	bls.n	800309a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f00c f8c8 	bl	800f224 <realloc>
 8003094:	4602      	mov	r2, r0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80030a0:	2300      	movs	r3, #0
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d23f      	bcs.n	800312e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80030ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	441a      	add	r2, r3
 80030b4:	f107 030c 	add.w	r3, r7, #12
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 f90a 	bl	80042d4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c2:	3304      	adds	r3, #4
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d20c      	bcs.n	80030f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	441a      	add	r2, r3
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	3b01      	subs	r3, #1
 80030e0:	6839      	ldr	r1, [r7, #0]
 80030e2:	440b      	add	r3, r1
 80030e4:	7812      	ldrb	r2, [r2, #0]
 80030e6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	3301      	adds	r3, #1
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	e7ec      	b.n	80030ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80030f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	3b01      	subs	r3, #1
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	4413      	add	r3, r2
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	3b01      	subs	r3, #1
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	441a      	add	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800310c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4413      	add	r3, r2
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	3220      	adds	r2, #32
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	3301      	adds	r3, #1
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
 800312c:	e7ba      	b.n	80030a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003130:	4618      	mov	r0, r3
 8003132:	3738      	adds	r7, #56	; 0x38
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	0800f6dc 	.word	0x0800f6dc

08003154 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	0800f5f4 	.word	0x0800f5f4

08003170 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	611a      	str	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68d8      	ldr	r0, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6891      	ldr	r1, [r2, #8]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	4798      	blx	r3
 80031bc:	4603      	mov	r3, r0
  };
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
  }
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a42      	ldr	r2, [pc, #264]	; (80032fc <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d068      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a40      	ldr	r2, [pc, #256]	; (8003300 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d061      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a3d      	ldr	r2, [pc, #244]	; (8003304 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d05a      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a3b      	ldr	r2, [pc, #236]	; (8003308 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d053      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a38      	ldr	r2, [pc, #224]	; (800330c <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d04c      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a36      	ldr	r2, [pc, #216]	; (8003310 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d045      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a33      	ldr	r2, [pc, #204]	; (8003314 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d03e      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a31      	ldr	r2, [pc, #196]	; (8003318 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d037      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2e      	ldr	r2, [pc, #184]	; (800331c <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d030      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d029      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a29      	ldr	r2, [pc, #164]	; (8003324 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d022      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a27      	ldr	r2, [pc, #156]	; (8003328 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d01b      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a24      	ldr	r2, [pc, #144]	; (800332c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d014      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a22      	ldr	r2, [pc, #136]	; (8003330 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00d      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d006      	beq.n	80032c8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d109      	bne.n	80032dc <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80032d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032da:	e008      	b.n	80032ee <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40020010 	.word	0x40020010
 8003300:	40020028 	.word	0x40020028
 8003304:	40020040 	.word	0x40020040
 8003308:	40020058 	.word	0x40020058
 800330c:	40020070 	.word	0x40020070
 8003310:	40020088 	.word	0x40020088
 8003314:	400200a0 	.word	0x400200a0
 8003318:	400200b8 	.word	0x400200b8
 800331c:	40020410 	.word	0x40020410
 8003320:	40020428 	.word	0x40020428
 8003324:	40020440 	.word	0x40020440
 8003328:	40020458 	.word	0x40020458
 800332c:	40020470 	.word	0x40020470
 8003330:	40020488 	.word	0x40020488
 8003334:	400204a0 	.word	0x400204a0
 8003338:	400204b8 	.word	0x400204b8

0800333c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <_ZN13STM32HardwareC1Ev+0x34>)
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	2400034c 	.word	0x2400034c

08003374 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f804 	bl	800338a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339e:	4619      	mov	r1, r3
 80033a0:	f009 feac 	bl	800d0fc <HAL_UART_Receive_DMA>
    }
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <_ZN13STM32Hardware4readEv>:

    int read(){
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff0d 	bl	80031e0 <_ZN13STM32Hardware10getRdmaIndEv>
 80033c6:	4603      	mov	r3, r0
 80033c8:	429c      	cmp	r4, r3
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d012      	beq.n	80033fc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80033dc:	1c59      	adds	r1, r3, #1
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	791b      	ldrb	r3, [r3, #4]
 80033ea:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80033f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80033fc:	68fb      	ldr	r3, [r7, #12]
    }
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bd90      	pop	{r4, r7, pc}
	...

08003408 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003418:	2b20      	cmp	r3, #32
 800341a:	d108      	bne.n	800342e <_ZN13STM32Hardware5flushEv+0x26>
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <_ZN13STM32Hardware5flushEv+0xb4>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	f083 0301 	eor.w	r3, r3, #1
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <_ZN13STM32Hardware5flushEv+0x26>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <_ZN13STM32Hardware5flushEv+0x28>
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d03f      	beq.n	80034b4 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8003434:	4b21      	ldr	r3, [pc, #132]	; (80034bc <_ZN13STM32Hardware5flushEv+0xb4>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003446:	429a      	cmp	r2, r3
 8003448:	d031      	beq.n	80034ae <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003456:	429a      	cmp	r2, r3
 8003458:	d20a      	bcs.n	8003470 <_ZN13STM32Hardware5flushEv+0x68>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003468:	b29b      	uxth	r3, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	b29b      	uxth	r3, r3
 800346e:	e006      	b.n	800347e <_ZN13STM32Hardware5flushEv+0x76>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003476:	b29b      	uxth	r3, r3
 8003478:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800347c:	b29b      	uxth	r3, r3
 800347e:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800348a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	89fa      	ldrh	r2, [r7, #14]
 8003494:	4619      	mov	r1, r3
 8003496:	f009 fd9f 	bl	800cfd8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80034a0:	89fb      	ldrh	r3, [r7, #14]
 80034a2:	4413      	add	r3, r2
 80034a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80034ae:	4b03      	ldr	r3, [pc, #12]	; (80034bc <_ZN13STM32Hardware5flushEv+0xb4>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
      }
    }
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	24000680 	.word	0x24000680

080034c0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
      int n = length;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d6:	bfa8      	it	ge
 80034d8:	f44f 7300 	movge.w	r3, #512	; 0x200
 80034dc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80034e4:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bf28      	it	cs
 80034ee:	4613      	movcs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80034f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	4618      	mov	r0, r3
 8003506:	f00b fe77 	bl	800f1f8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	4413      	add	r3, r2
 8003514:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	429a      	cmp	r2, r3
 8003524:	d00b      	beq.n	800353e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	18d1      	adds	r1, r2, r3
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	461a      	mov	r2, r3
 800353a:	f00b fe5d 	bl	800f1f8 <memcpy>
      }

      flush();
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff ff62 	bl	8003408 <_ZN13STM32Hardware5flushEv>
    }
 8003544:	bf00      	nop
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	f002 f9ae 	bl	80058b4 <HAL_GetTick>
 8003558:	4603      	mov	r3, r0
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe ffc8 	bl	8002504 <_ZN3ros3MsgC1Ev>
 8003574:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	0800f744 	.word	0x0800f744

080035b4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035b4:	b480      	push	{r7}
 80035b6:	b08b      	sub	sp, #44	; 0x2c
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80035cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d2:	6838      	ldr	r0, [r7, #0]
 80035d4:	4401      	add	r1, r0
 80035d6:	b2d3      	uxtb	r3, r2
 80035d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80035da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	0a02      	lsrs	r2, r0, #8
 80035e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035ec:	0a0b      	lsrs	r3, r1, #8
 80035ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f0:	3101      	adds	r1, #1
 80035f2:	6838      	ldr	r0, [r7, #0]
 80035f4:	4401      	add	r1, r0
 80035f6:	b2d3      	uxtb	r3, r2
 80035f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80035fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	0c02      	lsrs	r2, r0, #16
 8003608:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800360c:	0c0b      	lsrs	r3, r1, #16
 800360e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003610:	3102      	adds	r1, #2
 8003612:	6838      	ldr	r0, [r7, #0]
 8003614:	4401      	add	r1, r0
 8003616:	b2d3      	uxtb	r3, r2
 8003618:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800361a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	0e02      	lsrs	r2, r0, #24
 8003628:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800362c:	0e0b      	lsrs	r3, r1, #24
 800362e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003630:	3103      	adds	r1, #3
 8003632:	6838      	ldr	r0, [r7, #0]
 8003634:	4401      	add	r1, r0
 8003636:	b2d3      	uxtb	r3, r2
 8003638:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800363a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	000a      	movs	r2, r1
 8003648:	2300      	movs	r3, #0
 800364a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364c:	3104      	adds	r1, #4
 800364e:	6838      	ldr	r0, [r7, #0]
 8003650:	4401      	add	r1, r0
 8003652:	b2d3      	uxtb	r3, r2
 8003654:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003656:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	0a0a      	lsrs	r2, r1, #8
 8003664:	2300      	movs	r3, #0
 8003666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003668:	3105      	adds	r1, #5
 800366a:	6838      	ldr	r0, [r7, #0]
 800366c:	4401      	add	r1, r0
 800366e:	b2d3      	uxtb	r3, r2
 8003670:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003672:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	0c0a      	lsrs	r2, r1, #16
 8003680:	2300      	movs	r3, #0
 8003682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003684:	3106      	adds	r1, #6
 8003686:	6838      	ldr	r0, [r7, #0]
 8003688:	4401      	add	r1, r0
 800368a:	b2d3      	uxtb	r3, r2
 800368c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800368e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	0e0a      	lsrs	r2, r1, #24
 800369c:	2300      	movs	r3, #0
 800369e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036a0:	3107      	adds	r1, #7
 80036a2:	6838      	ldr	r0, [r7, #0]
 80036a4:	4401      	add	r1, r0
 80036a6:	b2d3      	uxtb	r3, r2
 80036a8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	3308      	adds	r3, #8
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80036b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80036ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036c0:	6838      	ldr	r0, [r7, #0]
 80036c2:	4401      	add	r1, r0
 80036c4:	b2d3      	uxtb	r3, r2
 80036c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80036c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	0a02      	lsrs	r2, r0, #8
 80036d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80036da:	0a0b      	lsrs	r3, r1, #8
 80036dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036de:	3101      	adds	r1, #1
 80036e0:	6838      	ldr	r0, [r7, #0]
 80036e2:	4401      	add	r1, r0
 80036e4:	b2d3      	uxtb	r3, r2
 80036e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80036e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	0c02      	lsrs	r2, r0, #16
 80036f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036fa:	0c0b      	lsrs	r3, r1, #16
 80036fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036fe:	3102      	adds	r1, #2
 8003700:	6838      	ldr	r0, [r7, #0]
 8003702:	4401      	add	r1, r0
 8003704:	b2d3      	uxtb	r3, r2
 8003706:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	0e02      	lsrs	r2, r0, #24
 8003716:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800371a:	0e0b      	lsrs	r3, r1, #24
 800371c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800371e:	3103      	adds	r1, #3
 8003720:	6838      	ldr	r0, [r7, #0]
 8003722:	4401      	add	r1, r0
 8003724:	b2d3      	uxtb	r3, r2
 8003726:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003728:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	000a      	movs	r2, r1
 8003736:	2300      	movs	r3, #0
 8003738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800373a:	3104      	adds	r1, #4
 800373c:	6838      	ldr	r0, [r7, #0]
 800373e:	4401      	add	r1, r0
 8003740:	b2d3      	uxtb	r3, r2
 8003742:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	0a0a      	lsrs	r2, r1, #8
 8003752:	2300      	movs	r3, #0
 8003754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003756:	3105      	adds	r1, #5
 8003758:	6838      	ldr	r0, [r7, #0]
 800375a:	4401      	add	r1, r0
 800375c:	b2d3      	uxtb	r3, r2
 800375e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003760:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	0c0a      	lsrs	r2, r1, #16
 800376e:	2300      	movs	r3, #0
 8003770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003772:	3106      	adds	r1, #6
 8003774:	6838      	ldr	r0, [r7, #0]
 8003776:	4401      	add	r1, r0
 8003778:	b2d3      	uxtb	r3, r2
 800377a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800377c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	0e0a      	lsrs	r2, r1, #24
 800378a:	2300      	movs	r3, #0
 800378c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800378e:	3107      	adds	r1, #7
 8003790:	6838      	ldr	r0, [r7, #0]
 8003792:	4401      	add	r1, r0
 8003794:	b2d3      	uxtb	r3, r2
 8003796:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	3308      	adds	r3, #8
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80037a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80037a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ae:	6838      	ldr	r0, [r7, #0]
 80037b0:	4401      	add	r1, r0
 80037b2:	b2d3      	uxtb	r3, r2
 80037b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80037b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	0a02      	lsrs	r2, r0, #8
 80037c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80037c8:	0a0b      	lsrs	r3, r1, #8
 80037ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037cc:	3101      	adds	r1, #1
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	4401      	add	r1, r0
 80037d2:	b2d3      	uxtb	r3, r2
 80037d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80037d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	0c02      	lsrs	r2, r0, #16
 80037e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037e8:	0c0b      	lsrs	r3, r1, #16
 80037ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ec:	3102      	adds	r1, #2
 80037ee:	6838      	ldr	r0, [r7, #0]
 80037f0:	4401      	add	r1, r0
 80037f2:	b2d3      	uxtb	r3, r2
 80037f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80037f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	0e02      	lsrs	r2, r0, #24
 8003804:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003808:	0e0b      	lsrs	r3, r1, #24
 800380a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800380c:	3103      	adds	r1, #3
 800380e:	6838      	ldr	r0, [r7, #0]
 8003810:	4401      	add	r1, r0
 8003812:	b2d3      	uxtb	r3, r2
 8003814:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	000a      	movs	r2, r1
 8003824:	2300      	movs	r3, #0
 8003826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003828:	3104      	adds	r1, #4
 800382a:	6838      	ldr	r0, [r7, #0]
 800382c:	4401      	add	r1, r0
 800382e:	b2d3      	uxtb	r3, r2
 8003830:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	0a0a      	lsrs	r2, r1, #8
 8003840:	2300      	movs	r3, #0
 8003842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003844:	3105      	adds	r1, #5
 8003846:	6838      	ldr	r0, [r7, #0]
 8003848:	4401      	add	r1, r0
 800384a:	b2d3      	uxtb	r3, r2
 800384c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800384e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	0c0a      	lsrs	r2, r1, #16
 800385c:	2300      	movs	r3, #0
 800385e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003860:	3106      	adds	r1, #6
 8003862:	6838      	ldr	r0, [r7, #0]
 8003864:	4401      	add	r1, r0
 8003866:	b2d3      	uxtb	r3, r2
 8003868:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800386a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	0e0a      	lsrs	r2, r1, #24
 8003878:	2300      	movs	r3, #0
 800387a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800387c:	3107      	adds	r1, #7
 800387e:	6838      	ldr	r0, [r7, #0]
 8003880:	4401      	add	r1, r0
 8003882:	b2d3      	uxtb	r3, r2
 8003884:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	3308      	adds	r3, #8
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800388e:	4618      	mov	r0, r3
 8003890:	372c      	adds	r7, #44	; 0x2c
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800389a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800389e:	b0eb      	sub	sp, #428	; 0x1ac
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80038a6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80038bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038c0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80038c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038c8:	4413      	add	r3, r2
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2200      	movs	r2, #0
 80038d0:	461c      	mov	r4, r3
 80038d2:	4615      	mov	r5, r2
 80038d4:	ea40 0804 	orr.w	r8, r0, r4
 80038d8:	ea41 0905 	orr.w	r9, r1, r5
 80038dc:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80038e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038ee:	4413      	add	r3, r2
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2200      	movs	r2, #0
 80038f6:	469a      	mov	sl, r3
 80038f8:	4693      	mov	fp, r2
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003906:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800390a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800390e:	ea40 0402 	orr.w	r4, r0, r2
 8003912:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003916:	430b      	orrs	r3, r1
 8003918:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800391c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003920:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003924:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003928:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800392c:	1c9a      	adds	r2, r3, #2
 800392e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003932:	4413      	add	r3, r2
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2200      	movs	r2, #0
 800393a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800393e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800394e:	464c      	mov	r4, r9
 8003950:	0423      	lsls	r3, r4, #16
 8003952:	4644      	mov	r4, r8
 8003954:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003958:	4644      	mov	r4, r8
 800395a:	0422      	lsls	r2, r4, #16
 800395c:	ea40 0402 	orr.w	r4, r0, r2
 8003960:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003964:	430b      	orrs	r3, r1
 8003966:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800396a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800396e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003972:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003976:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800397a:	1cda      	adds	r2, r3, #3
 800397c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003980:	4413      	add	r3, r2
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2200      	movs	r2, #0
 8003988:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800398c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003990:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003994:	4623      	mov	r3, r4
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800399c:	4623      	mov	r3, r4
 800399e:	061b      	lsls	r3, r3, #24
 80039a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80039a4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80039a8:	4623      	mov	r3, r4
 80039aa:	4303      	orrs	r3, r0
 80039ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80039b0:	462b      	mov	r3, r5
 80039b2:	430b      	orrs	r3, r1
 80039b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80039b8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80039bc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80039c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039c8:	1d1a      	adds	r2, r3, #4
 80039ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039ce:	4413      	add	r3, r2
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80039da:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80039ea:	0023      	movs	r3, r4
 80039ec:	2200      	movs	r2, #0
 80039ee:	ea40 0402 	orr.w	r4, r0, r2
 80039f2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80039f6:	430b      	orrs	r3, r1
 80039f8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80039fc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003a00:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a04:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a0c:	1d5a      	adds	r2, r3, #5
 8003a0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a12:	4413      	add	r3, r2
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003a1e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003a2e:	0223      	lsls	r3, r4, #8
 8003a30:	2200      	movs	r2, #0
 8003a32:	ea40 0402 	orr.w	r4, r0, r2
 8003a36:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003a40:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003a44:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003a48:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a50:	1d9a      	adds	r2, r3, #6
 8003a52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a56:	4413      	add	r3, r2
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003a62:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003a72:	0423      	lsls	r3, r4, #16
 8003a74:	2200      	movs	r2, #0
 8003a76:	ea40 0402 	orr.w	r4, r0, r2
 8003a7a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a84:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003a88:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003a8c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a94:	1dda      	adds	r2, r3, #7
 8003a96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003aa6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003ab6:	0623      	lsls	r3, r4, #24
 8003ab8:	2200      	movs	r2, #0
 8003aba:	ea40 0402 	orr.w	r4, r0, r2
 8003abe:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003ac8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003acc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003ad0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003ad4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003ad8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003af2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003af6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003afa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003afe:	4413      	add	r3, r2
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b0a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003b0e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003b12:	4623      	mov	r3, r4
 8003b14:	4303      	orrs	r3, r0
 8003b16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b22:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003b26:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b2a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b38:	4413      	add	r3, r2
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b44:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003b54:	464c      	mov	r4, r9
 8003b56:	0223      	lsls	r3, r4, #8
 8003b58:	4644      	mov	r4, r8
 8003b5a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b5e:	4644      	mov	r4, r8
 8003b60:	0222      	lsls	r2, r4, #8
 8003b62:	ea40 0402 	orr.w	r4, r0, r2
 8003b66:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b70:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003b74:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b78:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b80:	1c9a      	adds	r2, r3, #2
 8003b82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b86:	4413      	add	r3, r2
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003ba2:	464c      	mov	r4, r9
 8003ba4:	0423      	lsls	r3, r4, #16
 8003ba6:	4644      	mov	r4, r8
 8003ba8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003bac:	4644      	mov	r4, r8
 8003bae:	0422      	lsls	r2, r4, #16
 8003bb0:	ea40 0402 	orr.w	r4, r0, r2
 8003bb4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bbe:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003bc2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003bc6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003bca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bce:	1cda      	adds	r2, r3, #3
 8003bd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bd4:	4413      	add	r3, r2
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003be0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003be4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003be8:	4623      	mov	r3, r4
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bf8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003bfc:	4623      	mov	r3, r4
 8003bfe:	4303      	orrs	r3, r0
 8003c00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c04:	462b      	mov	r3, r5
 8003c06:	430b      	orrs	r3, r1
 8003c08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c0c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003c10:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c14:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c1c:	1d1a      	adds	r2, r3, #4
 8003c1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c22:	4413      	add	r3, r2
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c2e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003c3e:	0023      	movs	r3, r4
 8003c40:	2200      	movs	r2, #0
 8003c42:	ea40 0402 	orr.w	r4, r0, r2
 8003c46:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c50:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003c54:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c58:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c60:	1d5a      	adds	r2, r3, #5
 8003c62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c72:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003c82:	0223      	lsls	r3, r4, #8
 8003c84:	2200      	movs	r2, #0
 8003c86:	ea40 0402 	orr.w	r4, r0, r2
 8003c8a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c94:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003c98:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c9c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ca0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ca4:	1d9a      	adds	r2, r3, #6
 8003ca6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003caa:	4413      	add	r3, r2
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003cc6:	0423      	lsls	r3, r4, #16
 8003cc8:	2200      	movs	r2, #0
 8003cca:	ea40 0402 	orr.w	r4, r0, r2
 8003cce:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cd8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003cdc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003ce0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ce4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ce8:	1dda      	adds	r2, r3, #7
 8003cea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cee:	4413      	add	r3, r2
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003d0a:	0623      	lsls	r3, r4, #24
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	ea40 0402 	orr.w	r4, r0, r2
 8003d12:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003d16:	430b      	orrs	r3, r1
 8003d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d1c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003d20:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003d24:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d28:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003d2c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003d30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d34:	3308      	adds	r3, #8
 8003d36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d46:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d4a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003d4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d52:	4413      	add	r3, r2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d5e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d62:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003d66:	4623      	mov	r3, r4
 8003d68:	4303      	orrs	r3, r0
 8003d6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d72:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003d76:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d7a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d7e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d88:	4413      	add	r3, r2
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2200      	movs	r2, #0
 8003d90:	673b      	str	r3, [r7, #112]	; 0x70
 8003d92:	677a      	str	r2, [r7, #116]	; 0x74
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003da0:	464c      	mov	r4, r9
 8003da2:	0223      	lsls	r3, r4, #8
 8003da4:	4644      	mov	r4, r8
 8003da6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003daa:	4644      	mov	r4, r8
 8003dac:	0222      	lsls	r2, r4, #8
 8003dae:	ea40 0402 	orr.w	r4, r0, r2
 8003db2:	66bc      	str	r4, [r7, #104]	; 0x68
 8003db4:	430b      	orrs	r3, r1
 8003db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003db8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003dbc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003dc0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003dc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dc8:	1c9a      	adds	r2, r3, #2
 8003dca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dce:	4413      	add	r3, r2
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003dd8:	667a      	str	r2, [r7, #100]	; 0x64
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003de6:	464c      	mov	r4, r9
 8003de8:	0423      	lsls	r3, r4, #16
 8003dea:	4644      	mov	r4, r8
 8003dec:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003df0:	4644      	mov	r4, r8
 8003df2:	0422      	lsls	r2, r4, #16
 8003df4:	ea40 0402 	orr.w	r4, r0, r2
 8003df8:	65bc      	str	r4, [r7, #88]	; 0x58
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dfe:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003e02:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e06:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e0e:	1cda      	adds	r2, r3, #3
 8003e10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e14:	4413      	add	r3, r2
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e1e:	657a      	str	r2, [r7, #84]	; 0x54
 8003e20:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003e24:	4623      	mov	r3, r4
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e30:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003e34:	4623      	mov	r3, r4
 8003e36:	4303      	orrs	r3, r0
 8003e38:	643b      	str	r3, [r7, #64]	; 0x40
 8003e3a:	462b      	mov	r3, r5
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e40:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003e44:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003e48:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e50:	1d1a      	adds	r2, r3, #4
 8003e52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e56:	4413      	add	r3, r2
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003e6c:	0023      	movs	r3, r4
 8003e6e:	2200      	movs	r2, #0
 8003e70:	ea40 0402 	orr.w	r4, r0, r2
 8003e74:	633c      	str	r4, [r7, #48]	; 0x30
 8003e76:	430b      	orrs	r3, r1
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003e7e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003e82:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e8a:	1d5a      	adds	r2, r3, #5
 8003e8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e90:	4413      	add	r3, r2
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2200      	movs	r2, #0
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003ea6:	0223      	lsls	r3, r4, #8
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	ea40 0402 	orr.w	r4, r0, r2
 8003eae:	623c      	str	r4, [r7, #32]
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003eb8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ebc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ec0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ec4:	3306      	adds	r3, #6
 8003ec6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	61fa      	str	r2, [r7, #28]
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	69bc      	ldr	r4, [r7, #24]
 8003ee0:	0423      	lsls	r3, r4, #16
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	ea40 0402 	orr.w	r4, r0, r2
 8003ee8:	613c      	str	r4, [r7, #16]
 8003eea:	430b      	orrs	r3, r1
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003ef2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003ef6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003efa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003efe:	3307      	adds	r3, #7
 8003f00:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003f04:	4413      	add	r3, r2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	60fa      	str	r2, [r7, #12]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	68bc      	ldr	r4, [r7, #8]
 8003f1a:	0623      	lsls	r3, r4, #24
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	ea40 0402 	orr.w	r4, r0, r2
 8003f22:	603c      	str	r4, [r7, #0]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f2c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003f30:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003f34:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003f38:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003f3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f40:	3308      	adds	r3, #8
 8003f42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003f46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003f50:	46bd      	mov	sp, r7
 8003f52:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003f56:	4770      	bx	lr

08003f58 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	0800f618 	.word	0x0800f618

08003f74 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	0800f630 	.word	0x0800f630

08003f90 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe fab2 	bl	8002504 <_ZN3ros3MsgC1Ev>
 8003fa0:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3308      	adds	r3, #8
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fada 	bl	8003564 <_ZN13geometry_msgs7Vector3C1Ev>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3328      	adds	r3, #40	; 0x28
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fad5 	bl	8003564 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	0800f72c 	.word	0x0800f72c

08003fc8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f103 0008 	add.w	r0, r3, #8
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7ff fae6 	bl	80035b4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f7ff fad9 	bl	80035b4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004002:	4602      	mov	r2, r0
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
      return offset;
 800400a:	68fb      	ldr	r3, [r7, #12]
    }
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f103 0008 	add.w	r0, r3, #8
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	4413      	add	r3, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f7ff fc33 	bl	800389a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004034:	4602      	mov	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4413      	add	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	4413      	add	r3, r2
 8004048:	4619      	mov	r1, r3
 800404a:	f7ff fc26 	bl	800389a <_ZN13geometry_msgs7Vector311deserializeEPh>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
     return offset;
 8004056:	68fb      	ldr	r3, [r7, #12]
    }
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	0800f654 	.word	0x0800f654

0800407c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	0800f668 	.word	0x0800f668

08004098 <_Z8callbackRKN13geometry_msgs5TwistE>:
int	count;
int run_inter = 0;
double Vx, Vy, W;

void callback(const geometry_msgs::Twist &msg)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80040a6:	490a      	ldr	r1, [pc, #40]	; (80040d0 <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 80040a8:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80040b2:	4908      	ldr	r1, [pc, #32]	; (80040d4 <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 80040b4:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80040be:	4906      	ldr	r1, [pc, #24]	; (80040d8 <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 80040c0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	24000688 	.word	0x24000688
 80040d4:	24000690 	.word	0x24000690
 80040d8:	24000698 	.word	0x24000698

080040dc <_Z13Error_Handlerv>:
ros::Publisher pub("/ins_vel", &ins_vel);
//	std_msgs

/* UART Communication */
void Error_Handler(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80040e0:	b672      	cpsid	i
}
 80040e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040e4:	e7fe      	b.n	80040e4 <_Z13Error_Handlerv+0x8>
	...

080040e8 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80040ec:	4b2c      	ldr	r3, [pc, #176]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80040ee:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <_ZL20MX_USART10_UART_Initv+0xbc>)
 80040f0:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80040f2:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80040f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040f8:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80040fa:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8004100:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004102:	2200      	movs	r2, #0
 8004104:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8004106:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004108:	2200      	movs	r2, #0
 800410a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 800410c:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800410e:	220c      	movs	r2, #12
 8004110:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004112:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004114:	2200      	movs	r2, #0
 8004116:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8004118:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800411e:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004120:	2200      	movs	r2, #0
 8004122:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004124:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004126:	2200      	movs	r2, #0
 8004128:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800412a:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800412c:	2200      	movs	r2, #0
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8004130:	481b      	ldr	r0, [pc, #108]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004132:	f008 fec5 	bl	800cec0 <HAL_UART_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 8004146:	f7ff ffc9 	bl	80040dc <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800414a:	2100      	movs	r1, #0
 800414c:	4814      	ldr	r0, [pc, #80]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800414e:	f00a ff43 	bl	800efd8 <HAL_UARTEx_SetTxFifoThreshold>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 8004162:	f7ff ffbb 	bl	80040dc <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004166:	2100      	movs	r1, #0
 8004168:	480d      	ldr	r0, [pc, #52]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800416a:	f00a ff73 	bl	800f054 <HAL_UARTEx_SetRxFifoThreshold>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 800417e:	f7ff ffad 	bl	80040dc <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8004182:	4807      	ldr	r0, [pc, #28]	; (80041a0 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004184:	f00a feef 	bl	800ef66 <HAL_UARTEx_DisableFifoMode>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf14      	ite	ne
 800418e:	2301      	movne	r3, #1
 8004190:	2300      	moveq	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 8004198:	f7ff ffa0 	bl	80040dc <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	2400034c 	.word	0x2400034c
 80041a4:	40011c00 	.word	0x40011c00

080041a8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a14      	ldr	r2, [pc, #80]	; (8004204 <HAL_UART_ErrorCallback+0x5c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d120      	bne.n	80041fa <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 80041b8:	4913      	ldr	r1, [pc, #76]	; (8004208 <HAL_UART_ErrorCallback+0x60>)
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 80041c6:	4911      	ldr	r1, [pc, #68]	; (800420c <HAL_UART_ErrorCallback+0x64>)
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 80041d4:	490e      	ldr	r1, [pc, #56]	; (8004210 <HAL_UART_ErrorCallback+0x68>)
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9c1 2300 	strd	r2, r3, [r1]

		HAL_UART_DeInit(&huart10);
 80041e2:	4808      	ldr	r0, [pc, #32]	; (8004204 <HAL_UART_ErrorCallback+0x5c>)
 80041e4:	f008 febc 	bl	800cf60 <HAL_UART_DeInit>
		MX_USART10_UART_Init();
 80041e8:	f7ff ff7e 	bl	80040e8 <_ZL20MX_USART10_UART_Initv>
		nh.getHardware()->init();
 80041ec:	4809      	ldr	r0, [pc, #36]	; (8004214 <HAL_UART_ErrorCallback+0x6c>)
 80041ee:	f000 f95b 	bl	80044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff f8bd 	bl	8003374 <_ZN13STM32Hardware4initEv>
    }
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	2400034c 	.word	0x2400034c
 8004208:	24000688 	.word	0x24000688
 800420c:	24000690 	.word	0x24000690
 8004210:	24000698 	.word	0x24000698
 8004214:	240006e8 	.word	0x240006e8

08004218 <HAL_UART_RxCpltCallback>:
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
//{
//    nh.getHardware()->flush();
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8004220:	4805      	ldr	r0, [pc, #20]	; (8004238 <HAL_UART_RxCpltCallback+0x20>)
 8004222:	f000 f941 	bl	80044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004226:	4603      	mov	r3, r0
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff f8ae 	bl	800338a <_ZN13STM32Hardware10reset_rbufEv>
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	240006e8 	.word	0x240006e8

0800423c <setup>:
void setup(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
    nh.initNode();
 8004240:	4804      	ldr	r0, [pc, #16]	; (8004254 <setup+0x18>)
 8004242:	f000 f93d 	bl	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8004246:	4904      	ldr	r1, [pc, #16]	; (8004258 <setup+0x1c>)
 8004248:	4802      	ldr	r0, [pc, #8]	; (8004254 <setup+0x18>)
 800424a:	f000 f956 	bl	80044fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	240006e8 	.word	0x240006e8
 8004258:	24001028 	.word	0x24001028

0800425c <loop>:
void loop(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8004260:	4802      	ldr	r0, [pc, #8]	; (800426c <loop+0x10>)
 8004262:	f000 f975 	bl	8004550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	240006e8 	.word	0x240006e8

08004270 <inter>:

void inter(){
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
	pub.publish(&ins_vel);
 8004274:	4905      	ldr	r1, [pc, #20]	; (800428c <inter+0x1c>)
 8004276:	4806      	ldr	r0, [pc, #24]	; (8004290 <inter+0x20>)
 8004278:	f7fe ff91 	bl	800319e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	run_inter ++;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <inter+0x24>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	4a04      	ldr	r2, [pc, #16]	; (8004294 <inter+0x24>)
 8004284:	6013      	str	r3, [r2, #0]
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	240006a0 	.word	0x240006a0
 8004290:	24001088 	.word	0x24001088
 8004294:	24000684 	.word	0x24000684

08004298 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d80d      	bhi.n	80042c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	fa22 f103 	lsr.w	r1, r2, r3
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	b2ca      	uxtb	r2, r1
 80042be:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3301      	adds	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e7ee      	b.n	80042a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d811      	bhi.n	8004312 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	440a      	add	r2, r1
 80042f8:	7812      	ldrb	r2, [r2, #0]
 80042fa:	4611      	mov	r1, r2
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	00d2      	lsls	r2, r2, #3
 8004300:	fa01 f202 	lsl.w	r2, r1, r2
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3301      	adds	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e7ea      	b.n	80042e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	0800f774 	.word	0x0800f774

08004340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff ffe8 	bl	8004320 <_ZN3ros15NodeHandleBase_C1Ev>
 8004350:	4a3a      	ldr	r2, [pc, #232]	; (800443c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3304      	adds	r3, #4
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe ffee 	bl	800333c <_ZN13STM32HardwareC1Ev>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fc3c 	bl	8002bec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b18      	cmp	r3, #24
 800437c:	d80b      	bhi.n	8004396 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3301      	adds	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e7f0      	b.n	8004378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b18      	cmp	r3, #24
 800439e:	d80a      	bhi.n	80043b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043a8:	2100      	movs	r1, #0
 80043aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	3301      	adds	r3, #1
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	e7f1      	b.n	800439a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c0:	d20a      	bcs.n	80043d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e7f0      	b.n	80043ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80043d8:	2300      	movs	r3, #0
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e2:	d20a      	bcs.n	80043fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4413      	add	r3, r2
 80043ea:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	3301      	adds	r3, #1
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	e7f0      	b.n	80043dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	0800f718 	.word	0x0800f718

08004440 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	0800f75c 	.word	0x0800f75c

08004460 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ffe5 	bl	8004440 <_ZN3ros11Subscriber_C1Ev>
 8004476:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3310      	adds	r3, #16
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fd85 	bl	8003f90 <_ZN13geometry_msgs5TwistC1Ev>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	659a      	str	r2, [r3, #88]	; 0x58
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
  };
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	0800f700 	.word	0x0800f700

080044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
  }
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe ff51 	bl	8003374 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b18      	cmp	r3, #24
 800450c:	dc19      	bgt.n	8004542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10d      	bne.n	800453a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800451e:	6839      	ldr	r1, [r7, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	605a      	str	r2, [r3, #4]
        return true;
 8004536:	2301      	movs	r3, #1
 8004538:	e004      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3301      	adds	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e7e2      	b.n	8004508 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8004542:	2300      	movs	r3, #0
  }
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fff5 	bl	800354c <_ZN13STM32Hardware4timeEv>
 8004562:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004572:	4293      	cmp	r3, r2
 8004574:	d903      	bls.n	800457e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	429a      	cmp	r2, r3
 8004592:	d903      	bls.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d014      	beq.n	80045d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe ffce 	bl	800354c <_ZN13STM32Hardware4timeEv>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad2      	subs	r2, r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80045bc:	429a      	cmp	r2, r3
 80045be:	bf8c      	ite	hi
 80045c0:	2301      	movhi	r3, #1
 80045c2:	2300      	movls	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80045ca:	f06f 0301 	mvn.w	r3, #1
 80045ce:	e194      	b.n	80048fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe fee9 	bl	80033ac <_ZN13STM32Hardware4readEv>
 80045da:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f2c0 8174 	blt.w	80048cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045fa:	2b07      	cmp	r3, #7
 80045fc:	d11e      	bne.n	800463c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004604:	1c59      	adds	r1, r3, #1
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	b2d1      	uxtb	r1, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	460a      	mov	r2, r1
 8004616:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004620:	1e5a      	subs	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1b4      	bne.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2208      	movs	r2, #8
 8004636:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800463a:	e7af      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004642:	2b00      	cmp	r3, #0
 8004644:	d128      	bne.n	8004698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2bff      	cmp	r3, #255	; 0xff
 800464a:	d10d      	bne.n	8004668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f103 0214 	add.w	r2, r3, #20
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004666:	e799      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe ff6d 	bl	800354c <_ZN13STM32Hardware4timeEv>
 8004672:	4602      	mov	r2, r0
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	; 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	bf8c      	ite	hi
 8004680:	2301      	movhi	r3, #1
 8004682:	2300      	movls	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d088      	beq.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8004692:	f06f 0301 	mvn.w	r3, #1
 8004696:	e130      	b.n	80048fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d118      	bne.n	80046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2bfe      	cmp	r3, #254	; 0xfe
 80046a6:	d107      	bne.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80046b6:	e771      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f47f af68 	bne.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f918 	bl	8004902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80046d2:	e763      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d113      	bne.n	8004706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004704:	e74a      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800470c:	2b03      	cmp	r3, #3
 800470e:	d110      	bne.n	8004732 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	441a      	add	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004730:	e734      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004738:	2b04      	cmp	r3, #4
 800473a:	d116      	bne.n	800476a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004742:	425a      	negs	r2, r3
 8004744:	b2db      	uxtb	r3, r3
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	bf58      	it	pl
 800474a:	4253      	negpl	r3, r2
 800474c:	2bff      	cmp	r3, #255	; 0xff
 800474e:	d107      	bne.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800475e:	e71d      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004768:	e718      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004770:	2b05      	cmp	r3, #5
 8004772:	d10f      	bne.n	8004794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004792:	e703      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800479a:	2b06      	cmp	r3, #6
 800479c:	d117      	bne.n	80047ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	441a      	add	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2207      	movs	r2, #7
 80047b4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f47f aeec 	bne.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2208      	movs	r2, #8
 80047c8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80047cc:	e6e6      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	f47f aee1 	bne.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80047e8:	425a      	negs	r2, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	bf58      	it	pl
 80047f0:	4253      	negpl	r3, r2
 80047f2:	2bff      	cmp	r3, #255	; 0xff
 80047f4:	f47f aed2 	bne.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d110      	bne.n	8004824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f87d 	bl	8004902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f898 	bl	800493e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
 8004822:	e06a      	b.n	80048fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800482a:	2b0a      	cmp	r3, #10
 800482c:	d107      	bne.n	800483e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f960 	bl	8004afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800483c:	e6ae      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004844:	2b06      	cmp	r3, #6
 8004846:	d10e      	bne.n	8004866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f7fe fafd 	bl	8002e56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004864:	e69a      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800486c:	2b0b      	cmp	r3, #11
 800486e:	d104      	bne.n	800487a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004878:	e690      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004880:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f202 2222 	addw	r2, r2, #546	; 0x222
 800488a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f43f ae84 	beq.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800489a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80048ae:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80048b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80048c6:	4611      	mov	r1, r2
 80048c8:	4798      	blx	r3
    while (true)
 80048ca:	e667      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80048cc:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00f      	beq.n	80048f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d906      	bls.n	80048f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f809 	bl	8004902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80048f8:	2300      	movs	r3, #0
  }
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800490a:	f107 030c 	add.w	r3, r7, #12
 800490e:	4618      	mov	r0, r3
 8004910:	f7fd fe08 	bl	8002524 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f107 020c 	add.w	r2, r7, #12
 800491e:	210a      	movs	r1, #10
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
    rt_time = hardware_.time();
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe fe0f 	bl	800354c <_ZN13STM32Hardware4timeEv>
 800492e:	4602      	mov	r2, r0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004936:	bf00      	nop
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800493e:	b590      	push	{r4, r7, lr}
 8004940:	b08b      	sub	sp, #44	; 0x2c
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004946:	f107 030c 	add.w	r3, r7, #12
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd feda 	bl	8002704 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004950:	2300      	movs	r3, #0
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	2b18      	cmp	r3, #24
 8004958:	dc63      	bgt.n	8004a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d056      	beq.n	8004a1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	b29b      	uxth	r3, r3
 800497e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	6859      	ldr	r1, [r3, #4]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3308      	adds	r3, #8
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4608      	mov	r0, r1
 80049ba:	4798      	blx	r3
 80049bc:	4603      	mov	r3, r0
 80049be:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	6859      	ldr	r1, [r3, #4]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4608      	mov	r0, r1
 80049e8:	4798      	blx	r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80049ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049f2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681c      	ldr	r4, [r3, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe fbdc 	bl	80031c6 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004a0e:	4601      	mov	r1, r0
 8004a10:	f107 030c 	add.w	r3, r7, #12
 8004a14:	461a      	mov	r2, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a20:	e798      	b.n	8004954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	2b18      	cmp	r3, #24
 8004a2a:	dc5f      	bgt.n	8004aec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a30:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d053      	beq.n	8004ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a52:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a62:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4798      	blx	r3
 8004a80:	4603      	mov	r3, r0
 8004a82:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a88:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a94:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4608      	mov	r0, r1
 8004aa4:	4798      	blx	r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aae:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681c      	ldr	r4, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aba:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004abe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4798      	blx	r3
 8004ad8:	4601      	mov	r1, r0
 8004ada:	f107 030c 	add.w	r3, r7, #12
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aea:	e79c      	b.n	8004a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004af4:	bf00      	nop
 8004af6:	372c      	adds	r7, #44	; 0x2c
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd90      	pop	{r4, r7, pc}

08004afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004b06:	f107 0308 	add.w	r3, r7, #8
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fd fd0a 	bl	8002524 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fd19 	bl	800354c <_ZN13STM32Hardware4timeEv>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004b26:	f107 0308 	add.w	r3, r7, #8
 8004b2a:	6839      	ldr	r1, [r7, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fd fd69 	bl	8002604 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	4915      	ldr	r1, [pc, #84]	; (8004b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004b38:	fba1 1303 	umull	r1, r3, r1, r3
 8004b3c:	099b      	lsrs	r3, r3, #6
 8004b3e:	4413      	add	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004b42:	6939      	ldr	r1, [r7, #16]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004b48:	fba3 0302 	umull	r0, r3, r3, r2
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b52:	fb00 f303 	mul.w	r3, r0, r3
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	4a0d      	ldr	r2, [pc, #52]	; (8004b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	440b      	add	r3, r1
 8004b60:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8a6 	bl	8004cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe fce9 	bl	800354c <_ZN13STM32Hardware4timeEv>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004b82:	bf00      	nop
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	10624dd3 	.word	0x10624dd3
 8004b90:	000f4240 	.word	0x000f4240

08004b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b63      	cmp	r3, #99	; 0x63
 8004ba4:	dd09      	ble.n	8004bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004bac:	f083 0301 	eor.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e079      	b.n	8004cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004bc6:	3207      	adds	r2, #7
 8004bc8:	4611      	mov	r1, r2
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
 8004bce:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	22fe      	movs	r2, #254	; 0xfe
 8004bdc:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004c06:	4413      	add	r3, r2
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	b21b      	sxth	r3, r3
 8004c22:	121b      	asrs	r3, r3, #8
 8004c24:	b21b      	sxth	r3, r3
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c32:	2305      	movs	r3, #5
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	3306      	adds	r3, #6
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	dc0d      	bgt.n	8004c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	4413      	add	r3, r2
 8004c46:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	4413      	add	r3, r2
 8004c52:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e7ec      	b.n	8004c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3307      	adds	r3, #7
 8004c60:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	425a      	negs	r2, r3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	bf58      	it	pl
 8004c6c:	4253      	negpl	r3, r2
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	1c59      	adds	r1, r3, #1
 8004c74:	6179      	str	r1, [r7, #20]
 8004c76:	43d2      	mvns	r2, r2
 8004c78:	b2d1      	uxtb	r1, r2
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	460a      	mov	r2, r1
 8004c80:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8a:	dc0a      	bgt.n	8004ca2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1d18      	adds	r0, r3, #4
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f7fe fc11 	bl	80034c0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	e005      	b.n	8004cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004ca2:	4905      	ldr	r1, [pc, #20]	; (8004cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f849 	bl	8004d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3720      	adds	r7, #32
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	0800f68c 	.word	0x0800f68c

08004cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe fc3e 	bl	800354c <_ZN13STM32Hardware4timeEv>
 8004cd0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4915      	ldr	r1, [pc, #84]	; (8004d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004cda:	fba1 1303 	umull	r1, r3, r1, r3
 8004cde:	099b      	lsrs	r3, r3, #6
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	1e5a      	subs	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6859      	ldr	r1, [r3, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004cf2:	fba3 0302 	umull	r0, r3, r3, r2
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cfc:	fb00 f303 	mul.w	r3, r0, r3
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004d04:	fb02 f303 	mul.w	r3, r2, r3
 8004d08:	1aca      	subs	r2, r1, r3
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004d0c:	4413      	add	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f7fb fc7e 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	10624dd3 	.word	0x10624dd3
 8004d34:	000f4240 	.word	0x000f4240
 8004d38:	3b9aca00 	.word	0x3b9aca00

08004d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	2103      	movs	r1, #3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f804 	bl	8004d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	460b      	mov	r3, r1
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004d66:	f107 0314 	add.w	r3, r7, #20
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fd fe8e 	bl	8002a8c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004d70:	7afb      	ldrb	r3, [r7, #11]
 8004d72:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f107 0214 	add.w	r2, r7, #20
 8004d82:	2107      	movs	r1, #7
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	4798      	blx	r3
  }
 8004d88:	bf00      	nop
 8004d8a:	3720      	adds	r7, #32
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <_Z41__static_initialization_and_destruction_0ii>:
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d116      	bne.n	8004dce <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d111      	bne.n	8004dce <_Z41__static_initialization_and_destruction_0ii+0x3e>
geometry_msgs::Twist ins_vel;
 8004daa:	480b      	ldr	r0, [pc, #44]	; (8004dd8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004dac:	f7ff f8f0 	bl	8003f90 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004db0:	480a      	ldr	r0, [pc, #40]	; (8004ddc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004db2:	f7ff fac5 	bl	8004340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8004db6:	2301      	movs	r3, #1
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004dba:	490a      	ldr	r1, [pc, #40]	; (8004de4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004dbc:	480a      	ldr	r0, [pc, #40]	; (8004de8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004dbe:	f7ff fb4f 	bl	8004460 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("/ins_vel", &ins_vel);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004dc6:	4909      	ldr	r1, [pc, #36]	; (8004dec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004dc8:	4809      	ldr	r0, [pc, #36]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004dca:	f7fe f9d1 	bl	8003170 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	240006a0 	.word	0x240006a0
 8004ddc:	240006e8 	.word	0x240006e8
 8004de0:	08004099 	.word	0x08004099
 8004de4:	0800f6c8 	.word	0x0800f6c8
 8004de8:	24001028 	.word	0x24001028
 8004dec:	0800f6d0 	.word	0x0800f6d0
 8004df0:	24001088 	.word	0x24001088

08004df4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3310      	adds	r3, #16
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff f905 	bl	8004014 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	3210      	adds	r2, #16
 8004e12:	4610      	mov	r0, r2
 8004e14:	4798      	blx	r3
  }
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3310      	adds	r3, #16
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff f90c 	bl	8004060 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004e48:	4603      	mov	r3, r0
  }
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3310      	adds	r3, #16
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff f90c 	bl	800407c <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004e64:	4603      	mov	r3, r0
  }
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
    return configured_;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <_GLOBAL__sub_I_count>:
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e90:	2001      	movs	r0, #1
 8004e92:	f7ff ff7d 	bl	8004d90 <_Z41__static_initialization_and_destruction_0ii>
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <HAL_MspInit+0x3c>)
 8004ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ea4:	4a0b      	ldr	r2, [pc, #44]	; (8004ed4 <HAL_MspInit+0x3c>)
 8004ea6:	f043 0302 	orr.w	r3, r3, #2
 8004eaa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_MspInit+0x3c>)
 8004eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2005      	movs	r0, #5
 8004ec2:	f000 fe02 	bl	8005aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004ec6:	2005      	movs	r0, #5
 8004ec8:	f000 fe19 	bl	8005afe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ecc:	bf00      	nop
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	58024400 	.word	0x58024400

08004ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee8:	d117      	bne.n	8004f1a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004eea:	4b1c      	ldr	r3, [pc, #112]	; (8004f5c <HAL_TIM_Base_MspInit+0x84>)
 8004eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ef0:	4a1a      	ldr	r2, [pc, #104]	; (8004f5c <HAL_TIM_Base_MspInit+0x84>)
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_TIM_Base_MspInit+0x84>)
 8004efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	201c      	movs	r0, #28
 8004f0e:	f000 fddc 	bl	8005aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f12:	201c      	movs	r0, #28
 8004f14:	f000 fdf3 	bl	8005afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004f18:	e01b      	b.n	8004f52 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a10      	ldr	r2, [pc, #64]	; (8004f60 <HAL_TIM_Base_MspInit+0x88>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d116      	bne.n	8004f52 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004f24:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <HAL_TIM_Base_MspInit+0x84>)
 8004f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f2a:	4a0c      	ldr	r2, [pc, #48]	; (8004f5c <HAL_TIM_Base_MspInit+0x84>)
 8004f2c:	f043 0308 	orr.w	r3, r3, #8
 8004f30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_TIM_Base_MspInit+0x84>)
 8004f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004f42:	2200      	movs	r2, #0
 8004f44:	2100      	movs	r1, #0
 8004f46:	2032      	movs	r0, #50	; 0x32
 8004f48:	f000 fdbf 	bl	8005aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004f4c:	2032      	movs	r0, #50	; 0x32
 8004f4e:	f000 fdd6 	bl	8005afe <HAL_NVIC_EnableIRQ>
}
 8004f52:	bf00      	nop
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	40000c00 	.word	0x40000c00

08004f64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b090      	sub	sp, #64	; 0x40
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	60da      	str	r2, [r3, #12]
 8004f7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a69      	ldr	r2, [pc, #420]	; (8005128 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d12e      	bne.n	8004fe4 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f86:	4b69      	ldr	r3, [pc, #420]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f8c:	4a67      	ldr	r2, [pc, #412]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004f8e:	f043 0302 	orr.w	r3, r3, #2
 8004f92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f96:	4b65      	ldr	r3, [pc, #404]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa4:	4b61      	ldr	r3, [pc, #388]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004faa:	4a60      	ldr	r2, [pc, #384]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fb4:	4b5d      	ldr	r3, [pc, #372]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004fc2:	23c0      	movs	r3, #192	; 0xc0
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4854      	ldr	r0, [pc, #336]	; (8005130 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004fde:	f003 fda7 	bl	8008b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004fe2:	e09c      	b.n	800511e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a52      	ldr	r2, [pc, #328]	; (8005134 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d12f      	bne.n	800504e <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fee:	4b4f      	ldr	r3, [pc, #316]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ff4:	4a4d      	ldr	r2, [pc, #308]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004ff6:	f043 0304 	orr.w	r3, r3, #4
 8004ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ffe:	4b4b      	ldr	r3, [pc, #300]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800500c:	4b47      	ldr	r3, [pc, #284]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800500e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005012:	4a46      	ldr	r2, [pc, #280]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005014:	f043 0308 	orr.w	r3, r3, #8
 8005018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800501c:	4b43      	ldr	r3, [pc, #268]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800501e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800502a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005030:	2302      	movs	r3, #2
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005034:	2300      	movs	r3, #0
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005038:	2300      	movs	r3, #0
 800503a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800503c:	2302      	movs	r3, #2
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005044:	4619      	mov	r1, r3
 8005046:	483c      	ldr	r0, [pc, #240]	; (8005138 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8005048:	f003 fd72 	bl	8008b30 <HAL_GPIO_Init>
}
 800504c:	e067      	b.n	800511e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a3a      	ldr	r2, [pc, #232]	; (800513c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d12e      	bne.n	80050b6 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005058:	4b34      	ldr	r3, [pc, #208]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800505a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800505e:	4a33      	ldr	r2, [pc, #204]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005064:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005068:	4b30      	ldr	r3, [pc, #192]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800506a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800506e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005076:	4b2d      	ldr	r3, [pc, #180]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800507c:	4a2b      	ldr	r2, [pc, #172]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800507e:	f043 0320 	orr.w	r3, r3, #32
 8005082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005094:	2303      	movs	r3, #3
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005098:	2302      	movs	r3, #2
 800509a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509c:	2300      	movs	r3, #0
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a0:	2300      	movs	r3, #0
 80050a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80050a4:	230d      	movs	r3, #13
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050ac:	4619      	mov	r1, r3
 80050ae:	4824      	ldr	r0, [pc, #144]	; (8005140 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80050b0:	f003 fd3e 	bl	8008b30 <HAL_GPIO_Init>
}
 80050b4:	e033      	b.n	800511e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a22      	ldr	r2, [pc, #136]	; (8005144 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d12e      	bne.n	800511e <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80050c0:	4b1a      	ldr	r3, [pc, #104]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80050c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80050c6:	4a19      	ldr	r2, [pc, #100]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80050c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050cc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80050d0:	4b16      	ldr	r3, [pc, #88]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80050d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80050de:	4b13      	ldr	r3, [pc, #76]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80050e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e4:	4a11      	ldr	r2, [pc, #68]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80050e6:	f043 0320 	orr.w	r3, r3, #32
 80050ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80050f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80050fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005102:	2302      	movs	r3, #2
 8005104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005106:	2300      	movs	r3, #0
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510a:	2300      	movs	r3, #0
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 800510e:	230e      	movs	r3, #14
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005116:	4619      	mov	r1, r3
 8005118:	4809      	ldr	r0, [pc, #36]	; (8005140 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800511a:	f003 fd09 	bl	8008b30 <HAL_GPIO_Init>
}
 800511e:	bf00      	nop
 8005120:	3740      	adds	r7, #64	; 0x40
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40000400 	.word	0x40000400
 800512c:	58024400 	.word	0x58024400
 8005130:	58020000 	.word	0x58020000
 8005134:	40000800 	.word	0x40000800
 8005138:	58020c00 	.word	0x58020c00
 800513c:	4000e000 	.word	0x4000e000
 8005140:	58021400 	.word	0x58021400
 8005144:	4000e400 	.word	0x4000e400

08005148 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a16      	ldr	r2, [pc, #88]	; (80051b0 <HAL_TIM_PWM_MspInit+0x68>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10f      	bne.n	800517a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <HAL_TIM_PWM_MspInit+0x6c>)
 800515c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <HAL_TIM_PWM_MspInit+0x6c>)
 8005162:	f043 0302 	orr.w	r3, r3, #2
 8005166:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <HAL_TIM_PWM_MspInit+0x6c>)
 800516c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005178:	e013      	b.n	80051a2 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a0e      	ldr	r2, [pc, #56]	; (80051b8 <HAL_TIM_PWM_MspInit+0x70>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10e      	bne.n	80051a2 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_TIM_PWM_MspInit+0x6c>)
 8005186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800518a:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <HAL_TIM_PWM_MspInit+0x6c>)
 800518c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005190:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <HAL_TIM_PWM_MspInit+0x6c>)
 8005196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800519a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	68bb      	ldr	r3, [r7, #8]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010400 	.word	0x40010400
 80051b4:	58024400 	.word	0x58024400
 80051b8:	40014000 	.word	0x40014000

080051bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c4:	f107 0314 	add.w	r3, r7, #20
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a35      	ldr	r2, [pc, #212]	; (80052b0 <HAL_TIM_MspPostInit+0xf4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d120      	bne.n	8005220 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051de:	4b35      	ldr	r3, [pc, #212]	; (80052b4 <HAL_TIM_MspPostInit+0xf8>)
 80051e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051e4:	4a33      	ldr	r2, [pc, #204]	; (80052b4 <HAL_TIM_MspPostInit+0xf8>)
 80051e6:	f043 0304 	orr.w	r3, r3, #4
 80051ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051ee:	4b31      	ldr	r3, [pc, #196]	; (80052b4 <HAL_TIM_MspPostInit+0xf8>)
 80051f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80051fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005202:	2302      	movs	r3, #2
 8005204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800520a:	2300      	movs	r3, #0
 800520c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800520e:	2303      	movs	r3, #3
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005212:	f107 0314 	add.w	r3, r7, #20
 8005216:	4619      	mov	r1, r3
 8005218:	4827      	ldr	r0, [pc, #156]	; (80052b8 <HAL_TIM_MspPostInit+0xfc>)
 800521a:	f003 fc89 	bl	8008b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800521e:	e042      	b.n	80052a6 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a25      	ldr	r2, [pc, #148]	; (80052bc <HAL_TIM_MspPostInit+0x100>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d13d      	bne.n	80052a6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800522a:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <HAL_TIM_MspPostInit+0xf8>)
 800522c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005230:	4a20      	ldr	r2, [pc, #128]	; (80052b4 <HAL_TIM_MspPostInit+0xf8>)
 8005232:	f043 0310 	orr.w	r3, r3, #16
 8005236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800523a:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <HAL_TIM_MspPostInit+0xf8>)
 800523c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005248:	4b1a      	ldr	r3, [pc, #104]	; (80052b4 <HAL_TIM_MspPostInit+0xf8>)
 800524a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800524e:	4a19      	ldr	r2, [pc, #100]	; (80052b4 <HAL_TIM_MspPostInit+0xf8>)
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005258:	4b16      	ldr	r3, [pc, #88]	; (80052b4 <HAL_TIM_MspPostInit+0xf8>)
 800525a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005266:	2320      	movs	r3, #32
 8005268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526a:	2302      	movs	r3, #2
 800526c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005272:	2300      	movs	r3, #0
 8005274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005276:	2304      	movs	r3, #4
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800527a:	f107 0314 	add.w	r3, r7, #20
 800527e:	4619      	mov	r1, r3
 8005280:	480f      	ldr	r0, [pc, #60]	; (80052c0 <HAL_TIM_MspPostInit+0x104>)
 8005282:	f003 fc55 	bl	8008b30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005286:	2308      	movs	r3, #8
 8005288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528a:	2302      	movs	r3, #2
 800528c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005292:	2300      	movs	r3, #0
 8005294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005296:	2304      	movs	r3, #4
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800529a:	f107 0314 	add.w	r3, r7, #20
 800529e:	4619      	mov	r1, r3
 80052a0:	4808      	ldr	r0, [pc, #32]	; (80052c4 <HAL_TIM_MspPostInit+0x108>)
 80052a2:	f003 fc45 	bl	8008b30 <HAL_GPIO_Init>
}
 80052a6:	bf00      	nop
 80052a8:	3728      	adds	r7, #40	; 0x28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40010400 	.word	0x40010400
 80052b4:	58024400 	.word	0x58024400
 80052b8:	58020800 	.word	0x58020800
 80052bc:	40014000 	.word	0x40014000
 80052c0:	58021000 	.word	0x58021000
 80052c4:	58020000 	.word	0x58020000

080052c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b0b6      	sub	sp, #216	; 0xd8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	605a      	str	r2, [r3, #4]
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	60da      	str	r2, [r3, #12]
 80052de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052e0:	f107 0310 	add.w	r3, r7, #16
 80052e4:	22b4      	movs	r2, #180	; 0xb4
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f009 ff93 	bl	800f214 <memset>
  if(huart->Instance==USART10)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a61      	ldr	r2, [pc, #388]	; (8005478 <HAL_UART_MspInit+0x1b0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	f040 80bb 	bne.w	8005470 <HAL_UART_MspInit+0x1a8>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 80052fa:	2301      	movs	r3, #1
 80052fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80052fe:	2300      	movs	r3, #0
 8005300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005304:	f107 0310 	add.w	r3, r7, #16
 8005308:	4618      	mov	r0, r3
 800530a:	f004 fe49 	bl	8009fa0 <HAL_RCCEx_PeriphCLKConfig>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005314:	f7fd f8e0 	bl	80024d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 8005318:	4b58      	ldr	r3, [pc, #352]	; (800547c <HAL_UART_MspInit+0x1b4>)
 800531a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800531e:	4a57      	ldr	r2, [pc, #348]	; (800547c <HAL_UART_MspInit+0x1b4>)
 8005320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005324:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005328:	4b54      	ldr	r3, [pc, #336]	; (800547c <HAL_UART_MspInit+0x1b4>)
 800532a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800532e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005336:	4b51      	ldr	r3, [pc, #324]	; (800547c <HAL_UART_MspInit+0x1b4>)
 8005338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800533c:	4a4f      	ldr	r2, [pc, #316]	; (800547c <HAL_UART_MspInit+0x1b4>)
 800533e:	f043 0310 	orr.w	r3, r3, #16
 8005342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005346:	4b4d      	ldr	r3, [pc, #308]	; (800547c <HAL_UART_MspInit+0x1b4>)
 8005348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005354:	2304      	movs	r3, #4
 8005356:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535a:	2302      	movs	r3, #2
 800535c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005360:	2300      	movs	r3, #0
 8005362:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005366:	2300      	movs	r3, #0
 8005368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 800536c:	2304      	movs	r3, #4
 800536e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005372:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005376:	4619      	mov	r1, r3
 8005378:	4841      	ldr	r0, [pc, #260]	; (8005480 <HAL_UART_MspInit+0x1b8>)
 800537a:	f003 fbd9 	bl	8008b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800537e:	2308      	movs	r3, #8
 8005380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005384:	2302      	movs	r3, #2
 8005386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538a:	2300      	movs	r3, #0
 800538c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005390:	2300      	movs	r3, #0
 8005392:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8005396:	230b      	movs	r3, #11
 8005398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800539c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80053a0:	4619      	mov	r1, r3
 80053a2:	4837      	ldr	r0, [pc, #220]	; (8005480 <HAL_UART_MspInit+0x1b8>)
 80053a4:	f003 fbc4 	bl	8008b30 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053aa:	4a37      	ldr	r2, [pc, #220]	; (8005488 <HAL_UART_MspInit+0x1c0>)
 80053ac:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 80053ae:	4b35      	ldr	r3, [pc, #212]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053b0:	2276      	movs	r2, #118	; 0x76
 80053b2:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053b4:	4b33      	ldr	r3, [pc, #204]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053ba:	4b32      	ldr	r3, [pc, #200]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053bc:	2200      	movs	r2, #0
 80053be:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053c0:	4b30      	ldr	r3, [pc, #192]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053c6:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053c8:	4b2e      	ldr	r3, [pc, #184]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053ce:	4b2d      	ldr	r3, [pc, #180]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_NORMAL;
 80053d4:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80053da:	4b2a      	ldr	r3, [pc, #168]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053e0:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053e2:	4b28      	ldr	r3, [pc, #160]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 80053e8:	4826      	ldr	r0, [pc, #152]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053ea:	f000 fbb1 	bl	8005b50 <HAL_DMA_Init>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80053f4:	f7fd f870 	bl	80024d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a22      	ldr	r2, [pc, #136]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 80053fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80053fe:	4a21      	ldr	r2, [pc, #132]	; (8005484 <HAL_UART_MspInit+0x1bc>)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 8005404:	4b21      	ldr	r3, [pc, #132]	; (800548c <HAL_UART_MspInit+0x1c4>)
 8005406:	4a22      	ldr	r2, [pc, #136]	; (8005490 <HAL_UART_MspInit+0x1c8>)
 8005408:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 800540a:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_UART_MspInit+0x1c4>)
 800540c:	2277      	movs	r2, #119	; 0x77
 800540e:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005410:	4b1e      	ldr	r3, [pc, #120]	; (800548c <HAL_UART_MspInit+0x1c4>)
 8005412:	2240      	movs	r2, #64	; 0x40
 8005414:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005416:	4b1d      	ldr	r3, [pc, #116]	; (800548c <HAL_UART_MspInit+0x1c4>)
 8005418:	2200      	movs	r2, #0
 800541a:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 800541c:	4b1b      	ldr	r3, [pc, #108]	; (800548c <HAL_UART_MspInit+0x1c4>)
 800541e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005422:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005424:	4b19      	ldr	r3, [pc, #100]	; (800548c <HAL_UART_MspInit+0x1c4>)
 8005426:	2200      	movs	r2, #0
 8005428:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800542a:	4b18      	ldr	r3, [pc, #96]	; (800548c <HAL_UART_MspInit+0x1c4>)
 800542c:	2200      	movs	r2, #0
 800542e:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 8005430:	4b16      	ldr	r3, [pc, #88]	; (800548c <HAL_UART_MspInit+0x1c4>)
 8005432:	2200      	movs	r2, #0
 8005434:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005436:	4b15      	ldr	r3, [pc, #84]	; (800548c <HAL_UART_MspInit+0x1c4>)
 8005438:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800543c:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <HAL_UART_MspInit+0x1c4>)
 8005440:	2200      	movs	r2, #0
 8005442:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 8005444:	4811      	ldr	r0, [pc, #68]	; (800548c <HAL_UART_MspInit+0x1c4>)
 8005446:	f000 fb83 	bl	8005b50 <HAL_DMA_Init>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_UART_MspInit+0x18c>
    {
      Error_Handler();
 8005450:	f7fd f842 	bl	80024d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a0d      	ldr	r2, [pc, #52]	; (800548c <HAL_UART_MspInit+0x1c4>)
 8005458:	679a      	str	r2, [r3, #120]	; 0x78
 800545a:	4a0c      	ldr	r2, [pc, #48]	; (800548c <HAL_UART_MspInit+0x1c4>)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8005460:	2200      	movs	r2, #0
 8005462:	2100      	movs	r1, #0
 8005464:	209c      	movs	r0, #156	; 0x9c
 8005466:	f000 fb30 	bl	8005aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 800546a:	209c      	movs	r0, #156	; 0x9c
 800546c:	f000 fb47 	bl	8005afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8005470:	bf00      	nop
 8005472:	37d8      	adds	r7, #216	; 0xd8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40011c00 	.word	0x40011c00
 800547c:	58024400 	.word	0x58024400
 8005480:	58021000 	.word	0x58021000
 8005484:	240003dc 	.word	0x240003dc
 8005488:	40020010 	.word	0x40020010
 800548c:	24000454 	.word	0x24000454
 8005490:	40020028 	.word	0x40020028

08005494 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0f      	ldr	r2, [pc, #60]	; (80054e0 <HAL_UART_MspDeInit+0x4c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d118      	bne.n	80054d8 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 80054a6:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <HAL_UART_MspDeInit+0x50>)
 80054a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054ac:	4a0d      	ldr	r2, [pc, #52]	; (80054e4 <HAL_UART_MspDeInit+0x50>)
 80054ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 80054b6:	210c      	movs	r1, #12
 80054b8:	480b      	ldr	r0, [pc, #44]	; (80054e8 <HAL_UART_MspDeInit+0x54>)
 80054ba:	f003 fce1 	bl	8008e80 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fe9e 	bl	8006204 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fe99 	bl	8006204 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 80054d2:	209c      	movs	r0, #156	; 0x9c
 80054d4:	f000 fb21 	bl	8005b1a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40011c00 	.word	0x40011c00
 80054e4:	58024400 	.word	0x58024400
 80054e8:	58021000 	.word	0x58021000

080054ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80054f0:	e7fe      	b.n	80054f0 <NMI_Handler+0x4>

080054f2 <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)

{
 80054f2:	b480      	push	{r7}
 80054f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054f6:	e7fe      	b.n	80054f6 <HardFault_Handler+0x4>

080054f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054fc:	e7fe      	b.n	80054fc <MemManage_Handler+0x4>

080054fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054fe:	b480      	push	{r7}
 8005500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005502:	e7fe      	b.n	8005502 <BusFault_Handler+0x4>

08005504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005508:	e7fe      	b.n	8005508 <UsageFault_Handler+0x4>

0800550a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800550a:	b480      	push	{r7}
 800550c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800550e:	bf00      	nop
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800551c:	bf00      	nop
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005526:	b480      	push	{r7}
 8005528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800552a:	bf00      	nop
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005538:	f000 f9a8 	bl	800588c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800553c:	bf00      	nop
 800553e:	bd80      	pop	{r7, pc}

08005540 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 8005554:	4802      	ldr	r0, [pc, #8]	; (8005560 <DMA1_Stream0_IRQHandler+0x10>)
 8005556:	f001 ffd9 	bl	800750c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	240003dc 	.word	0x240003dc

08005564 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8005568:	4802      	ldr	r0, [pc, #8]	; (8005574 <DMA1_Stream1_IRQHandler+0x10>)
 800556a:	f001 ffcf 	bl	800750c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	24000454 	.word	0x24000454

08005578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800557c:	4802      	ldr	r0, [pc, #8]	; (8005588 <TIM2_IRQHandler+0x10>)
 800557e:	f006 fbb1 	bl	800bce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005582:	bf00      	nop
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	240000ec 	.word	0x240000ec

0800558c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005590:	4802      	ldr	r0, [pc, #8]	; (800559c <TIM5_IRQHandler+0x10>)
 8005592:	f006 fba7 	bl	800bce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005596:	bf00      	nop
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	240001d0 	.word	0x240001d0

080055a0 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 80055a4:	4802      	ldr	r0, [pc, #8]	; (80055b0 <USART10_IRQHandler+0x10>)
 80055a6:	f007 fdff 	bl	800d1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	2400034c 	.word	0x2400034c

080055b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
	return 1;
 80055b8:	2301      	movs	r3, #1
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <_kill>:

int _kill(int pid, int sig)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055ce:	f009 fde9 	bl	800f1a4 <__errno>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2216      	movs	r2, #22
 80055d6:	601a      	str	r2, [r3, #0]
	return -1;
 80055d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <_exit>:

void _exit (int status)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055ec:	f04f 31ff 	mov.w	r1, #4294967295
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff ffe7 	bl	80055c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80055f6:	e7fe      	b.n	80055f6 <_exit+0x12>

080055f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005600:	4a14      	ldr	r2, [pc, #80]	; (8005654 <_sbrk+0x5c>)
 8005602:	4b15      	ldr	r3, [pc, #84]	; (8005658 <_sbrk+0x60>)
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800560c:	4b13      	ldr	r3, [pc, #76]	; (800565c <_sbrk+0x64>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005614:	4b11      	ldr	r3, [pc, #68]	; (800565c <_sbrk+0x64>)
 8005616:	4a12      	ldr	r2, [pc, #72]	; (8005660 <_sbrk+0x68>)
 8005618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800561a:	4b10      	ldr	r3, [pc, #64]	; (800565c <_sbrk+0x64>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	429a      	cmp	r2, r3
 8005626:	d207      	bcs.n	8005638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005628:	f009 fdbc 	bl	800f1a4 <__errno>
 800562c:	4603      	mov	r3, r0
 800562e:	220c      	movs	r2, #12
 8005630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295
 8005636:	e009      	b.n	800564c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005638:	4b08      	ldr	r3, [pc, #32]	; (800565c <_sbrk+0x64>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800563e:	4b07      	ldr	r3, [pc, #28]	; (800565c <_sbrk+0x64>)
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	4a05      	ldr	r2, [pc, #20]	; (800565c <_sbrk+0x64>)
 8005648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800564a:	68fb      	ldr	r3, [r7, #12]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	24050000 	.word	0x24050000
 8005658:	00000400 	.word	0x00000400
 800565c:	2400109c 	.word	0x2400109c
 8005660:	240010b8 	.word	0x240010b8

08005664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005668:	4b32      	ldr	r3, [pc, #200]	; (8005734 <SystemInit+0xd0>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566e:	4a31      	ldr	r2, [pc, #196]	; (8005734 <SystemInit+0xd0>)
 8005670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005678:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <SystemInit+0xd4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	2b06      	cmp	r3, #6
 8005682:	d807      	bhi.n	8005694 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005684:	4b2c      	ldr	r3, [pc, #176]	; (8005738 <SystemInit+0xd4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f023 030f 	bic.w	r3, r3, #15
 800568c:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <SystemInit+0xd4>)
 800568e:	f043 0307 	orr.w	r3, r3, #7
 8005692:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005694:	4b29      	ldr	r3, [pc, #164]	; (800573c <SystemInit+0xd8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a28      	ldr	r2, [pc, #160]	; (800573c <SystemInit+0xd8>)
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80056a0:	4b26      	ldr	r3, [pc, #152]	; (800573c <SystemInit+0xd8>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80056a6:	4b25      	ldr	r3, [pc, #148]	; (800573c <SystemInit+0xd8>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4924      	ldr	r1, [pc, #144]	; (800573c <SystemInit+0xd8>)
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <SystemInit+0xdc>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80056b2:	4b21      	ldr	r3, [pc, #132]	; (8005738 <SystemInit+0xd4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d007      	beq.n	80056ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80056be:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <SystemInit+0xd4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 030f 	bic.w	r3, r3, #15
 80056c6:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <SystemInit+0xd4>)
 80056c8:	f043 0307 	orr.w	r3, r3, #7
 80056cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80056ce:	4b1b      	ldr	r3, [pc, #108]	; (800573c <SystemInit+0xd8>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80056d4:	4b19      	ldr	r3, [pc, #100]	; (800573c <SystemInit+0xd8>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80056da:	4b18      	ldr	r3, [pc, #96]	; (800573c <SystemInit+0xd8>)
 80056dc:	2200      	movs	r2, #0
 80056de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80056e0:	4b16      	ldr	r3, [pc, #88]	; (800573c <SystemInit+0xd8>)
 80056e2:	4a18      	ldr	r2, [pc, #96]	; (8005744 <SystemInit+0xe0>)
 80056e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80056e6:	4b15      	ldr	r3, [pc, #84]	; (800573c <SystemInit+0xd8>)
 80056e8:	4a17      	ldr	r2, [pc, #92]	; (8005748 <SystemInit+0xe4>)
 80056ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80056ec:	4b13      	ldr	r3, [pc, #76]	; (800573c <SystemInit+0xd8>)
 80056ee:	4a17      	ldr	r2, [pc, #92]	; (800574c <SystemInit+0xe8>)
 80056f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80056f2:	4b12      	ldr	r3, [pc, #72]	; (800573c <SystemInit+0xd8>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80056f8:	4b10      	ldr	r3, [pc, #64]	; (800573c <SystemInit+0xd8>)
 80056fa:	4a14      	ldr	r2, [pc, #80]	; (800574c <SystemInit+0xe8>)
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <SystemInit+0xd8>)
 8005700:	2200      	movs	r2, #0
 8005702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005704:	4b0d      	ldr	r3, [pc, #52]	; (800573c <SystemInit+0xd8>)
 8005706:	4a11      	ldr	r2, [pc, #68]	; (800574c <SystemInit+0xe8>)
 8005708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800570a:	4b0c      	ldr	r3, [pc, #48]	; (800573c <SystemInit+0xd8>)
 800570c:	2200      	movs	r2, #0
 800570e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005710:	4b0a      	ldr	r3, [pc, #40]	; (800573c <SystemInit+0xd8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a09      	ldr	r2, [pc, #36]	; (800573c <SystemInit+0xd8>)
 8005716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800571a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <SystemInit+0xd8>)
 800571e:	2200      	movs	r2, #0
 8005720:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <SystemInit+0xec>)
 8005724:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005728:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800572a:	bf00      	nop
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	e000ed00 	.word	0xe000ed00
 8005738:	52002000 	.word	0x52002000
 800573c:	58024400 	.word	0x58024400
 8005740:	eaf6ed7f 	.word	0xeaf6ed7f
 8005744:	02020200 	.word	0x02020200
 8005748:	01ff0000 	.word	0x01ff0000
 800574c:	01010280 	.word	0x01010280
 8005750:	52004000 	.word	0x52004000

08005754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800578c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005758:	f7ff ff84 	bl	8005664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800575c:	480c      	ldr	r0, [pc, #48]	; (8005790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800575e:	490d      	ldr	r1, [pc, #52]	; (8005794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005760:	4a0d      	ldr	r2, [pc, #52]	; (8005798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005764:	e002      	b.n	800576c <LoopCopyDataInit>

08005766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800576a:	3304      	adds	r3, #4

0800576c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800576c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800576e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005770:	d3f9      	bcc.n	8005766 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005772:	4a0a      	ldr	r2, [pc, #40]	; (800579c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005774:	4c0a      	ldr	r4, [pc, #40]	; (80057a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005778:	e001      	b.n	800577e <LoopFillZerobss>

0800577a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800577a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800577c:	3204      	adds	r2, #4

0800577e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800577e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005780:	d3fb      	bcc.n	800577a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005782:	f009 fd15 	bl	800f1b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005786:	f7fa ff7b 	bl	8000680 <main>
  bx  lr
 800578a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800578c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005790:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005794:	240000d0 	.word	0x240000d0
  ldr r2, =_sidata
 8005798:	0800f84c 	.word	0x0800f84c
  ldr r2, =_sbss
 800579c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80057a0:	240010b4 	.word	0x240010b4

080057a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057a4:	e7fe      	b.n	80057a4 <ADC3_IRQHandler>
	...

080057a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057ae:	2003      	movs	r0, #3
 80057b0:	f000 f980 	bl	8005ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057b4:	f004 fa1e 	bl	8009bf4 <HAL_RCC_GetSysClockFreq>
 80057b8:	4602      	mov	r2, r0
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <HAL_Init+0x68>)
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	0a1b      	lsrs	r3, r3, #8
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	4913      	ldr	r1, [pc, #76]	; (8005814 <HAL_Init+0x6c>)
 80057c6:	5ccb      	ldrb	r3, [r1, r3]
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057d2:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <HAL_Init+0x68>)
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <HAL_Init+0x6c>)
 80057dc:	5cd3      	ldrb	r3, [r2, r3]
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
 80057e8:	4a0b      	ldr	r2, [pc, #44]	; (8005818 <HAL_Init+0x70>)
 80057ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057ec:	4a0b      	ldr	r2, [pc, #44]	; (800581c <HAL_Init+0x74>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057f2:	200f      	movs	r0, #15
 80057f4:	f000 f814 	bl	8005820 <HAL_InitTick>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e002      	b.n	8005808 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005802:	f7ff fb49 	bl	8004e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	58024400 	.word	0x58024400
 8005814:	0800f7f8 	.word	0x0800f7f8
 8005818:	2400005c 	.word	0x2400005c
 800581c:	24000058 	.word	0x24000058

08005820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005828:	4b15      	ldr	r3, [pc, #84]	; (8005880 <HAL_InitTick+0x60>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e021      	b.n	8005878 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005834:	4b13      	ldr	r3, [pc, #76]	; (8005884 <HAL_InitTick+0x64>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4b11      	ldr	r3, [pc, #68]	; (8005880 <HAL_InitTick+0x60>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	4619      	mov	r1, r3
 800583e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005842:	fbb3 f3f1 	udiv	r3, r3, r1
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f973 	bl	8005b36 <HAL_SYSTICK_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e00e      	b.n	8005878 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b0f      	cmp	r3, #15
 800585e:	d80a      	bhi.n	8005876 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005860:	2200      	movs	r2, #0
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	f000 f92f 	bl	8005aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800586c:	4a06      	ldr	r2, [pc, #24]	; (8005888 <HAL_InitTick+0x68>)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e000      	b.n	8005878 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
}
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	24000064 	.word	0x24000064
 8005884:	24000058 	.word	0x24000058
 8005888:	24000060 	.word	0x24000060

0800588c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <HAL_IncTick+0x20>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <HAL_IncTick+0x24>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4413      	add	r3, r2
 800589c:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <HAL_IncTick+0x24>)
 800589e:	6013      	str	r3, [r2, #0]
}
 80058a0:	bf00      	nop
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	24000064 	.word	0x24000064
 80058b0:	240010a0 	.word	0x240010a0

080058b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  return uwTick;
 80058b8:	4b03      	ldr	r3, [pc, #12]	; (80058c8 <HAL_GetTick+0x14>)
 80058ba:	681b      	ldr	r3, [r3, #0]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	240010a0 	.word	0x240010a0

080058cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058dc:	4b0b      	ldr	r3, [pc, #44]	; (800590c <__NVIC_SetPriorityGrouping+0x40>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058e8:	4013      	ands	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <__NVIC_SetPriorityGrouping+0x44>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058fa:	4a04      	ldr	r2, [pc, #16]	; (800590c <__NVIC_SetPriorityGrouping+0x40>)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	60d3      	str	r3, [r2, #12]
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	e000ed00 	.word	0xe000ed00
 8005910:	05fa0000 	.word	0x05fa0000

08005914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005918:	4b04      	ldr	r3, [pc, #16]	; (800592c <__NVIC_GetPriorityGrouping+0x18>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	0a1b      	lsrs	r3, r3, #8
 800591e:	f003 0307 	and.w	r3, r3, #7
}
 8005922:	4618      	mov	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	e000ed00 	.word	0xe000ed00

08005930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800593a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800593e:	2b00      	cmp	r3, #0
 8005940:	db0b      	blt.n	800595a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005942:	88fb      	ldrh	r3, [r7, #6]
 8005944:	f003 021f 	and.w	r2, r3, #31
 8005948:	4907      	ldr	r1, [pc, #28]	; (8005968 <__NVIC_EnableIRQ+0x38>)
 800594a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	2001      	movs	r0, #1
 8005952:	fa00 f202 	lsl.w	r2, r0, r2
 8005956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	e000e100 	.word	0xe000e100

0800596c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	db12      	blt.n	80059a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	f003 021f 	and.w	r2, r3, #31
 8005984:	490a      	ldr	r1, [pc, #40]	; (80059b0 <__NVIC_DisableIRQ+0x44>)
 8005986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	2001      	movs	r0, #1
 800598e:	fa00 f202 	lsl.w	r2, r0, r2
 8005992:	3320      	adds	r3, #32
 8005994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005998:	f3bf 8f4f 	dsb	sy
}
 800599c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800599e:	f3bf 8f6f 	isb	sy
}
 80059a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	e000e100 	.word	0xe000e100

080059b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	6039      	str	r1, [r7, #0]
 80059be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	db0a      	blt.n	80059de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	490c      	ldr	r1, [pc, #48]	; (8005a00 <__NVIC_SetPriority+0x4c>)
 80059ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059d2:	0112      	lsls	r2, r2, #4
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	440b      	add	r3, r1
 80059d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059dc:	e00a      	b.n	80059f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	4908      	ldr	r1, [pc, #32]	; (8005a04 <__NVIC_SetPriority+0x50>)
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	3b04      	subs	r3, #4
 80059ec:	0112      	lsls	r2, r2, #4
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	440b      	add	r3, r1
 80059f2:	761a      	strb	r2, [r3, #24]
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	e000e100 	.word	0xe000e100
 8005a04:	e000ed00 	.word	0xe000ed00

08005a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b089      	sub	sp, #36	; 0x24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f1c3 0307 	rsb	r3, r3, #7
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	bf28      	it	cs
 8005a26:	2304      	movcs	r3, #4
 8005a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	2b06      	cmp	r3, #6
 8005a30:	d902      	bls.n	8005a38 <NVIC_EncodePriority+0x30>
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3b03      	subs	r3, #3
 8005a36:	e000      	b.n	8005a3a <NVIC_EncodePriority+0x32>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	43da      	mvns	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a50:	f04f 31ff 	mov.w	r1, #4294967295
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5a:	43d9      	mvns	r1, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a60:	4313      	orrs	r3, r2
         );
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3724      	adds	r7, #36	; 0x24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a80:	d301      	bcc.n	8005a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a82:	2301      	movs	r3, #1
 8005a84:	e00f      	b.n	8005aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a86:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <SysTick_Config+0x40>)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a8e:	210f      	movs	r1, #15
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295
 8005a94:	f7ff ff8e 	bl	80059b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <SysTick_Config+0x40>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <SysTick_Config+0x40>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	e000e010 	.word	0xe000e010

08005ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff ff05 	bl	80058cc <__NVIC_SetPriorityGrouping>
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b086      	sub	sp, #24
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ad8:	f7ff ff1c 	bl	8005914 <__NVIC_GetPriorityGrouping>
 8005adc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	6978      	ldr	r0, [r7, #20]
 8005ae4:	f7ff ff90 	bl	8005a08 <NVIC_EncodePriority>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005aee:	4611      	mov	r1, r2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff ff5f 	bl	80059b4 <__NVIC_SetPriority>
}
 8005af6:	bf00      	nop
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	4603      	mov	r3, r0
 8005b06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff ff0f 	bl	8005930 <__NVIC_EnableIRQ>
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	4603      	mov	r3, r0
 8005b22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ff1f 	bl	800596c <__NVIC_DisableIRQ>
}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff ff96 	bl	8005a70 <SysTick_Config>
 8005b44:	4603      	mov	r3, r0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005b58:	f7ff feac 	bl	80058b4 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e314      	b.n	8006192 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a66      	ldr	r2, [pc, #408]	; (8005d08 <HAL_DMA_Init+0x1b8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d04a      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a65      	ldr	r2, [pc, #404]	; (8005d0c <HAL_DMA_Init+0x1bc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d045      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a63      	ldr	r2, [pc, #396]	; (8005d10 <HAL_DMA_Init+0x1c0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d040      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a62      	ldr	r2, [pc, #392]	; (8005d14 <HAL_DMA_Init+0x1c4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d03b      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a60      	ldr	r2, [pc, #384]	; (8005d18 <HAL_DMA_Init+0x1c8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d036      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a5f      	ldr	r2, [pc, #380]	; (8005d1c <HAL_DMA_Init+0x1cc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d031      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a5d      	ldr	r2, [pc, #372]	; (8005d20 <HAL_DMA_Init+0x1d0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d02c      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a5c      	ldr	r2, [pc, #368]	; (8005d24 <HAL_DMA_Init+0x1d4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d027      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a5a      	ldr	r2, [pc, #360]	; (8005d28 <HAL_DMA_Init+0x1d8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d022      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a59      	ldr	r2, [pc, #356]	; (8005d2c <HAL_DMA_Init+0x1dc>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d01d      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a57      	ldr	r2, [pc, #348]	; (8005d30 <HAL_DMA_Init+0x1e0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d018      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a56      	ldr	r2, [pc, #344]	; (8005d34 <HAL_DMA_Init+0x1e4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a54      	ldr	r2, [pc, #336]	; (8005d38 <HAL_DMA_Init+0x1e8>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00e      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a53      	ldr	r2, [pc, #332]	; (8005d3c <HAL_DMA_Init+0x1ec>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d009      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a51      	ldr	r2, [pc, #324]	; (8005d40 <HAL_DMA_Init+0x1f0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d004      	beq.n	8005c08 <HAL_DMA_Init+0xb8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a50      	ldr	r2, [pc, #320]	; (8005d44 <HAL_DMA_Init+0x1f4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d101      	bne.n	8005c0c <HAL_DMA_Init+0xbc>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <HAL_DMA_Init+0xbe>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 813c 	beq.w	8005e8c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a37      	ldr	r2, [pc, #220]	; (8005d08 <HAL_DMA_Init+0x1b8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d04a      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a36      	ldr	r2, [pc, #216]	; (8005d0c <HAL_DMA_Init+0x1bc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d045      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a34      	ldr	r2, [pc, #208]	; (8005d10 <HAL_DMA_Init+0x1c0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d040      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a33      	ldr	r2, [pc, #204]	; (8005d14 <HAL_DMA_Init+0x1c4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d03b      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a31      	ldr	r2, [pc, #196]	; (8005d18 <HAL_DMA_Init+0x1c8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d036      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a30      	ldr	r2, [pc, #192]	; (8005d1c <HAL_DMA_Init+0x1cc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d031      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2e      	ldr	r2, [pc, #184]	; (8005d20 <HAL_DMA_Init+0x1d0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d02c      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2d      	ldr	r2, [pc, #180]	; (8005d24 <HAL_DMA_Init+0x1d4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d027      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2b      	ldr	r2, [pc, #172]	; (8005d28 <HAL_DMA_Init+0x1d8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d022      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <HAL_DMA_Init+0x1dc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d01d      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a28      	ldr	r2, [pc, #160]	; (8005d30 <HAL_DMA_Init+0x1e0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d018      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <HAL_DMA_Init+0x1e4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a25      	ldr	r2, [pc, #148]	; (8005d38 <HAL_DMA_Init+0x1e8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00e      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a24      	ldr	r2, [pc, #144]	; (8005d3c <HAL_DMA_Init+0x1ec>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d009      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a22      	ldr	r2, [pc, #136]	; (8005d40 <HAL_DMA_Init+0x1f0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_DMA_Init+0x174>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a21      	ldr	r2, [pc, #132]	; (8005d44 <HAL_DMA_Init+0x1f4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d108      	bne.n	8005cd6 <HAL_DMA_Init+0x186>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0201 	bic.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e007      	b.n	8005ce6 <HAL_DMA_Init+0x196>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ce6:	e02f      	b.n	8005d48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ce8:	f7ff fde4 	bl	80058b4 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d928      	bls.n	8005d48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2203      	movs	r2, #3
 8005d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e244      	b.n	8006192 <HAL_DMA_Init+0x642>
 8005d08:	40020010 	.word	0x40020010
 8005d0c:	40020028 	.word	0x40020028
 8005d10:	40020040 	.word	0x40020040
 8005d14:	40020058 	.word	0x40020058
 8005d18:	40020070 	.word	0x40020070
 8005d1c:	40020088 	.word	0x40020088
 8005d20:	400200a0 	.word	0x400200a0
 8005d24:	400200b8 	.word	0x400200b8
 8005d28:	40020410 	.word	0x40020410
 8005d2c:	40020428 	.word	0x40020428
 8005d30:	40020440 	.word	0x40020440
 8005d34:	40020458 	.word	0x40020458
 8005d38:	40020470 	.word	0x40020470
 8005d3c:	40020488 	.word	0x40020488
 8005d40:	400204a0 	.word	0x400204a0
 8005d44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1c8      	bne.n	8005ce8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4b84      	ldr	r3, [pc, #528]	; (8005f74 <HAL_DMA_Init+0x424>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005d6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d107      	bne.n	8005dac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	4313      	orrs	r3, r2
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2b28      	cmp	r3, #40	; 0x28
 8005db2:	d903      	bls.n	8005dbc <HAL_DMA_Init+0x26c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b2e      	cmp	r3, #46	; 0x2e
 8005dba:	d91f      	bls.n	8005dfc <HAL_DMA_Init+0x2ac>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b3e      	cmp	r3, #62	; 0x3e
 8005dc2:	d903      	bls.n	8005dcc <HAL_DMA_Init+0x27c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b42      	cmp	r3, #66	; 0x42
 8005dca:	d917      	bls.n	8005dfc <HAL_DMA_Init+0x2ac>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b46      	cmp	r3, #70	; 0x46
 8005dd2:	d903      	bls.n	8005ddc <HAL_DMA_Init+0x28c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b48      	cmp	r3, #72	; 0x48
 8005dda:	d90f      	bls.n	8005dfc <HAL_DMA_Init+0x2ac>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b4e      	cmp	r3, #78	; 0x4e
 8005de2:	d903      	bls.n	8005dec <HAL_DMA_Init+0x29c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b52      	cmp	r3, #82	; 0x52
 8005dea:	d907      	bls.n	8005dfc <HAL_DMA_Init+0x2ac>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b73      	cmp	r3, #115	; 0x73
 8005df2:	d905      	bls.n	8005e00 <HAL_DMA_Init+0x2b0>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b77      	cmp	r3, #119	; 0x77
 8005dfa:	d801      	bhi.n	8005e00 <HAL_DMA_Init+0x2b0>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_DMA_Init+0x2b2>
 8005e00:	2300      	movs	r3, #0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e0c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f023 0307 	bic.w	r3, r3, #7
 8005e24:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d117      	bne.n	8005e68 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00e      	beq.n	8005e68 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f002 fce6 	bl	800881c <DMA_CheckFifoParam>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2240      	movs	r2, #64	; 0x40
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e194      	b.n	8006192 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f002 fc21 	bl	80086b8 <DMA_CalcBaseAndBitshift>
 8005e76:	4603      	mov	r3, r0
 8005e78:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	223f      	movs	r2, #63	; 0x3f
 8005e84:	409a      	lsls	r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	609a      	str	r2, [r3, #8]
 8005e8a:	e0ca      	b.n	8006022 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a39      	ldr	r2, [pc, #228]	; (8005f78 <HAL_DMA_Init+0x428>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d022      	beq.n	8005edc <HAL_DMA_Init+0x38c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a38      	ldr	r2, [pc, #224]	; (8005f7c <HAL_DMA_Init+0x42c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d01d      	beq.n	8005edc <HAL_DMA_Init+0x38c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a36      	ldr	r2, [pc, #216]	; (8005f80 <HAL_DMA_Init+0x430>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_DMA_Init+0x38c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a35      	ldr	r2, [pc, #212]	; (8005f84 <HAL_DMA_Init+0x434>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_DMA_Init+0x38c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a33      	ldr	r2, [pc, #204]	; (8005f88 <HAL_DMA_Init+0x438>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_DMA_Init+0x38c>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a32      	ldr	r2, [pc, #200]	; (8005f8c <HAL_DMA_Init+0x43c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_DMA_Init+0x38c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a30      	ldr	r2, [pc, #192]	; (8005f90 <HAL_DMA_Init+0x440>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_DMA_Init+0x38c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a2f      	ldr	r2, [pc, #188]	; (8005f94 <HAL_DMA_Init+0x444>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d101      	bne.n	8005ee0 <HAL_DMA_Init+0x390>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <HAL_DMA_Init+0x392>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8094 	beq.w	8006010 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a22      	ldr	r2, [pc, #136]	; (8005f78 <HAL_DMA_Init+0x428>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d021      	beq.n	8005f36 <HAL_DMA_Init+0x3e6>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <HAL_DMA_Init+0x42c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d01c      	beq.n	8005f36 <HAL_DMA_Init+0x3e6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <HAL_DMA_Init+0x430>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d017      	beq.n	8005f36 <HAL_DMA_Init+0x3e6>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1e      	ldr	r2, [pc, #120]	; (8005f84 <HAL_DMA_Init+0x434>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d012      	beq.n	8005f36 <HAL_DMA_Init+0x3e6>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <HAL_DMA_Init+0x438>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00d      	beq.n	8005f36 <HAL_DMA_Init+0x3e6>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <HAL_DMA_Init+0x43c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d008      	beq.n	8005f36 <HAL_DMA_Init+0x3e6>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a19      	ldr	r2, [pc, #100]	; (8005f90 <HAL_DMA_Init+0x440>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <HAL_DMA_Init+0x3e6>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <HAL_DMA_Init+0x444>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <HAL_DMA_Init+0x448>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d01d      	beq.n	8005f9c <HAL_DMA_Init+0x44c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d102      	bne.n	8005f6e <HAL_DMA_Init+0x41e>
 8005f68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f6c:	e017      	b.n	8005f9e <HAL_DMA_Init+0x44e>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e015      	b.n	8005f9e <HAL_DMA_Init+0x44e>
 8005f72:	bf00      	nop
 8005f74:	fe10803f 	.word	0xfe10803f
 8005f78:	58025408 	.word	0x58025408
 8005f7c:	5802541c 	.word	0x5802541c
 8005f80:	58025430 	.word	0x58025430
 8005f84:	58025444 	.word	0x58025444
 8005f88:	58025458 	.word	0x58025458
 8005f8c:	5802546c 	.word	0x5802546c
 8005f90:	58025480 	.word	0x58025480
 8005f94:	58025494 	.word	0x58025494
 8005f98:	fffe000f 	.word	0xfffe000f
 8005f9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68d2      	ldr	r2, [r2, #12]
 8005fa2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005fa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005fac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005fb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005fbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005fc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005fcc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4b6e      	ldr	r3, [pc, #440]	; (800619c <HAL_DMA_Init+0x64c>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	4a6e      	ldr	r2, [pc, #440]	; (80061a0 <HAL_DMA_Init+0x650>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	091b      	lsrs	r3, r3, #4
 8005fee:	009a      	lsls	r2, r3, #2
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f002 fb5f 	bl	80086b8 <DMA_CalcBaseAndBitshift>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	2201      	movs	r2, #1
 8006008:	409a      	lsls	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	e008      	b.n	8006022 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2240      	movs	r2, #64	; 0x40
 8006014:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2203      	movs	r2, #3
 800601a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e0b7      	b.n	8006192 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a5f      	ldr	r2, [pc, #380]	; (80061a4 <HAL_DMA_Init+0x654>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d072      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a5d      	ldr	r2, [pc, #372]	; (80061a8 <HAL_DMA_Init+0x658>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d06d      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a5c      	ldr	r2, [pc, #368]	; (80061ac <HAL_DMA_Init+0x65c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d068      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a5a      	ldr	r2, [pc, #360]	; (80061b0 <HAL_DMA_Init+0x660>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d063      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a59      	ldr	r2, [pc, #356]	; (80061b4 <HAL_DMA_Init+0x664>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d05e      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a57      	ldr	r2, [pc, #348]	; (80061b8 <HAL_DMA_Init+0x668>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d059      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a56      	ldr	r2, [pc, #344]	; (80061bc <HAL_DMA_Init+0x66c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d054      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a54      	ldr	r2, [pc, #336]	; (80061c0 <HAL_DMA_Init+0x670>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d04f      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a53      	ldr	r2, [pc, #332]	; (80061c4 <HAL_DMA_Init+0x674>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d04a      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a51      	ldr	r2, [pc, #324]	; (80061c8 <HAL_DMA_Init+0x678>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d045      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a50      	ldr	r2, [pc, #320]	; (80061cc <HAL_DMA_Init+0x67c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d040      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a4e      	ldr	r2, [pc, #312]	; (80061d0 <HAL_DMA_Init+0x680>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d03b      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a4d      	ldr	r2, [pc, #308]	; (80061d4 <HAL_DMA_Init+0x684>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d036      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a4b      	ldr	r2, [pc, #300]	; (80061d8 <HAL_DMA_Init+0x688>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d031      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a4a      	ldr	r2, [pc, #296]	; (80061dc <HAL_DMA_Init+0x68c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d02c      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a48      	ldr	r2, [pc, #288]	; (80061e0 <HAL_DMA_Init+0x690>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d027      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a47      	ldr	r2, [pc, #284]	; (80061e4 <HAL_DMA_Init+0x694>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d022      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a45      	ldr	r2, [pc, #276]	; (80061e8 <HAL_DMA_Init+0x698>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d01d      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a44      	ldr	r2, [pc, #272]	; (80061ec <HAL_DMA_Init+0x69c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d018      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a42      	ldr	r2, [pc, #264]	; (80061f0 <HAL_DMA_Init+0x6a0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d013      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a41      	ldr	r2, [pc, #260]	; (80061f4 <HAL_DMA_Init+0x6a4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00e      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a3f      	ldr	r2, [pc, #252]	; (80061f8 <HAL_DMA_Init+0x6a8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d009      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a3e      	ldr	r2, [pc, #248]	; (80061fc <HAL_DMA_Init+0x6ac>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d004      	beq.n	8006112 <HAL_DMA_Init+0x5c2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a3c      	ldr	r2, [pc, #240]	; (8006200 <HAL_DMA_Init+0x6b0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d101      	bne.n	8006116 <HAL_DMA_Init+0x5c6>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <HAL_DMA_Init+0x5c8>
 8006116:	2300      	movs	r3, #0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d032      	beq.n	8006182 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f002 fbf9 	bl	8008914 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2b80      	cmp	r3, #128	; 0x80
 8006128:	d102      	bne.n	8006130 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006144:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d010      	beq.n	8006170 <HAL_DMA_Init+0x620>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b08      	cmp	r3, #8
 8006154:	d80c      	bhi.n	8006170 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f002 fc76 	bl	8008a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	e008      	b.n	8006182 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	a7fdabf8 	.word	0xa7fdabf8
 80061a0:	cccccccd 	.word	0xcccccccd
 80061a4:	40020010 	.word	0x40020010
 80061a8:	40020028 	.word	0x40020028
 80061ac:	40020040 	.word	0x40020040
 80061b0:	40020058 	.word	0x40020058
 80061b4:	40020070 	.word	0x40020070
 80061b8:	40020088 	.word	0x40020088
 80061bc:	400200a0 	.word	0x400200a0
 80061c0:	400200b8 	.word	0x400200b8
 80061c4:	40020410 	.word	0x40020410
 80061c8:	40020428 	.word	0x40020428
 80061cc:	40020440 	.word	0x40020440
 80061d0:	40020458 	.word	0x40020458
 80061d4:	40020470 	.word	0x40020470
 80061d8:	40020488 	.word	0x40020488
 80061dc:	400204a0 	.word	0x400204a0
 80061e0:	400204b8 	.word	0x400204b8
 80061e4:	58025408 	.word	0x58025408
 80061e8:	5802541c 	.word	0x5802541c
 80061ec:	58025430 	.word	0x58025430
 80061f0:	58025444 	.word	0x58025444
 80061f4:	58025458 	.word	0x58025458
 80061f8:	5802546c 	.word	0x5802546c
 80061fc:	58025480 	.word	0x58025480
 8006200:	58025494 	.word	0x58025494

08006204 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e1a8      	b.n	8006568 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a82      	ldr	r2, [pc, #520]	; (8006424 <HAL_DMA_DeInit+0x220>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d04a      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a80      	ldr	r2, [pc, #512]	; (8006428 <HAL_DMA_DeInit+0x224>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d045      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a7f      	ldr	r2, [pc, #508]	; (800642c <HAL_DMA_DeInit+0x228>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d040      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a7d      	ldr	r2, [pc, #500]	; (8006430 <HAL_DMA_DeInit+0x22c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d03b      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a7c      	ldr	r2, [pc, #496]	; (8006434 <HAL_DMA_DeInit+0x230>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d036      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a7a      	ldr	r2, [pc, #488]	; (8006438 <HAL_DMA_DeInit+0x234>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d031      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a79      	ldr	r2, [pc, #484]	; (800643c <HAL_DMA_DeInit+0x238>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d02c      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a77      	ldr	r2, [pc, #476]	; (8006440 <HAL_DMA_DeInit+0x23c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d027      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a76      	ldr	r2, [pc, #472]	; (8006444 <HAL_DMA_DeInit+0x240>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d022      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a74      	ldr	r2, [pc, #464]	; (8006448 <HAL_DMA_DeInit+0x244>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d01d      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a73      	ldr	r2, [pc, #460]	; (800644c <HAL_DMA_DeInit+0x248>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d018      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a71      	ldr	r2, [pc, #452]	; (8006450 <HAL_DMA_DeInit+0x24c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a70      	ldr	r2, [pc, #448]	; (8006454 <HAL_DMA_DeInit+0x250>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00e      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a6e      	ldr	r2, [pc, #440]	; (8006458 <HAL_DMA_DeInit+0x254>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d009      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a6d      	ldr	r2, [pc, #436]	; (800645c <HAL_DMA_DeInit+0x258>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_DMA_DeInit+0xb2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a6b      	ldr	r2, [pc, #428]	; (8006460 <HAL_DMA_DeInit+0x25c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d108      	bne.n	80062c8 <HAL_DMA_DeInit+0xc4>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0201 	bic.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	e007      	b.n	80062d8 <HAL_DMA_DeInit+0xd4>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a51      	ldr	r2, [pc, #324]	; (8006424 <HAL_DMA_DeInit+0x220>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d04a      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a50      	ldr	r2, [pc, #320]	; (8006428 <HAL_DMA_DeInit+0x224>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d045      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a4e      	ldr	r2, [pc, #312]	; (800642c <HAL_DMA_DeInit+0x228>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d040      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a4d      	ldr	r2, [pc, #308]	; (8006430 <HAL_DMA_DeInit+0x22c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d03b      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a4b      	ldr	r2, [pc, #300]	; (8006434 <HAL_DMA_DeInit+0x230>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d036      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a4a      	ldr	r2, [pc, #296]	; (8006438 <HAL_DMA_DeInit+0x234>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d031      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a48      	ldr	r2, [pc, #288]	; (800643c <HAL_DMA_DeInit+0x238>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d02c      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a47      	ldr	r2, [pc, #284]	; (8006440 <HAL_DMA_DeInit+0x23c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d027      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a45      	ldr	r2, [pc, #276]	; (8006444 <HAL_DMA_DeInit+0x240>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d022      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a44      	ldr	r2, [pc, #272]	; (8006448 <HAL_DMA_DeInit+0x244>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d01d      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a42      	ldr	r2, [pc, #264]	; (800644c <HAL_DMA_DeInit+0x248>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d018      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a41      	ldr	r2, [pc, #260]	; (8006450 <HAL_DMA_DeInit+0x24c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d013      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a3f      	ldr	r2, [pc, #252]	; (8006454 <HAL_DMA_DeInit+0x250>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00e      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a3e      	ldr	r2, [pc, #248]	; (8006458 <HAL_DMA_DeInit+0x254>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d009      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a3c      	ldr	r2, [pc, #240]	; (800645c <HAL_DMA_DeInit+0x258>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_DMA_DeInit+0x174>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a3b      	ldr	r2, [pc, #236]	; (8006460 <HAL_DMA_DeInit+0x25c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d101      	bne.n	800637c <HAL_DMA_DeInit+0x178>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <HAL_DMA_DeInit+0x17a>
 800637c:	2300      	movs	r3, #0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d025      	beq.n	80063ce <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2200      	movs	r2, #0
 8006390:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2200      	movs	r2, #0
 8006398:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2200      	movs	r2, #0
 80063a0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2200      	movs	r2, #0
 80063a8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2221      	movs	r2, #33	; 0x21
 80063b0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f002 f980 	bl	80086b8 <DMA_CalcBaseAndBitshift>
 80063b8:	4603      	mov	r3, r0
 80063ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	223f      	movs	r2, #63	; 0x3f
 80063c6:	409a      	lsls	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	609a      	str	r2, [r3, #8]
 80063cc:	e081      	b.n	80064d2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a24      	ldr	r2, [pc, #144]	; (8006464 <HAL_DMA_DeInit+0x260>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d022      	beq.n	800641e <HAL_DMA_DeInit+0x21a>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a22      	ldr	r2, [pc, #136]	; (8006468 <HAL_DMA_DeInit+0x264>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01d      	beq.n	800641e <HAL_DMA_DeInit+0x21a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a21      	ldr	r2, [pc, #132]	; (800646c <HAL_DMA_DeInit+0x268>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d018      	beq.n	800641e <HAL_DMA_DeInit+0x21a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1f      	ldr	r2, [pc, #124]	; (8006470 <HAL_DMA_DeInit+0x26c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_DMA_DeInit+0x21a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1e      	ldr	r2, [pc, #120]	; (8006474 <HAL_DMA_DeInit+0x270>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_DMA_DeInit+0x21a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <HAL_DMA_DeInit+0x274>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <HAL_DMA_DeInit+0x21a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1b      	ldr	r2, [pc, #108]	; (800647c <HAL_DMA_DeInit+0x278>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_DMA_DeInit+0x21a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a19      	ldr	r2, [pc, #100]	; (8006480 <HAL_DMA_DeInit+0x27c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d132      	bne.n	8006484 <HAL_DMA_DeInit+0x280>
 800641e:	2301      	movs	r3, #1
 8006420:	e031      	b.n	8006486 <HAL_DMA_DeInit+0x282>
 8006422:	bf00      	nop
 8006424:	40020010 	.word	0x40020010
 8006428:	40020028 	.word	0x40020028
 800642c:	40020040 	.word	0x40020040
 8006430:	40020058 	.word	0x40020058
 8006434:	40020070 	.word	0x40020070
 8006438:	40020088 	.word	0x40020088
 800643c:	400200a0 	.word	0x400200a0
 8006440:	400200b8 	.word	0x400200b8
 8006444:	40020410 	.word	0x40020410
 8006448:	40020428 	.word	0x40020428
 800644c:	40020440 	.word	0x40020440
 8006450:	40020458 	.word	0x40020458
 8006454:	40020470 	.word	0x40020470
 8006458:	40020488 	.word	0x40020488
 800645c:	400204a0 	.word	0x400204a0
 8006460:	400204b8 	.word	0x400204b8
 8006464:	58025408 	.word	0x58025408
 8006468:	5802541c 	.word	0x5802541c
 800646c:	58025430 	.word	0x58025430
 8006470:	58025444 	.word	0x58025444
 8006474:	58025458 	.word	0x58025458
 8006478:	5802546c 	.word	0x5802546c
 800647c:	58025480 	.word	0x58025480
 8006480:	58025494 	.word	0x58025494
 8006484:	2300      	movs	r3, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d021      	beq.n	80064ce <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2200      	movs	r2, #0
 8006498:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2200      	movs	r2, #0
 80064a0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2200      	movs	r2, #0
 80064a8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f002 f900 	bl	80086b8 <DMA_CalcBaseAndBitshift>
 80064b8:	4603      	mov	r3, r0
 80064ba:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2201      	movs	r2, #1
 80064c6:	409a      	lsls	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	605a      	str	r2, [r3, #4]
 80064cc:	e001      	b.n	80064d2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e04a      	b.n	8006568 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f002 fa1e 	bl	8008914 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064f0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00f      	beq.n	800651a <HAL_DMA_DeInit+0x316>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d80b      	bhi.n	800651a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f002 faa0 	bl	8008a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006518:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e226      	b.n	80069da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_DMA_Start_IT+0x2a>
 8006596:	2302      	movs	r3, #2
 8006598:	e21f      	b.n	80069da <HAL_DMA_Start_IT+0x46a>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	f040 820a 	bne.w	80069c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a68      	ldr	r2, [pc, #416]	; (8006764 <HAL_DMA_Start_IT+0x1f4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d04a      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a66      	ldr	r2, [pc, #408]	; (8006768 <HAL_DMA_Start_IT+0x1f8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d045      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a65      	ldr	r2, [pc, #404]	; (800676c <HAL_DMA_Start_IT+0x1fc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d040      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a63      	ldr	r2, [pc, #396]	; (8006770 <HAL_DMA_Start_IT+0x200>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d03b      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a62      	ldr	r2, [pc, #392]	; (8006774 <HAL_DMA_Start_IT+0x204>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d036      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a60      	ldr	r2, [pc, #384]	; (8006778 <HAL_DMA_Start_IT+0x208>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d031      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a5f      	ldr	r2, [pc, #380]	; (800677c <HAL_DMA_Start_IT+0x20c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d02c      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a5d      	ldr	r2, [pc, #372]	; (8006780 <HAL_DMA_Start_IT+0x210>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d027      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a5c      	ldr	r2, [pc, #368]	; (8006784 <HAL_DMA_Start_IT+0x214>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d022      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a5a      	ldr	r2, [pc, #360]	; (8006788 <HAL_DMA_Start_IT+0x218>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d01d      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a59      	ldr	r2, [pc, #356]	; (800678c <HAL_DMA_Start_IT+0x21c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d018      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a57      	ldr	r2, [pc, #348]	; (8006790 <HAL_DMA_Start_IT+0x220>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d013      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a56      	ldr	r2, [pc, #344]	; (8006794 <HAL_DMA_Start_IT+0x224>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00e      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a54      	ldr	r2, [pc, #336]	; (8006798 <HAL_DMA_Start_IT+0x228>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d009      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a53      	ldr	r2, [pc, #332]	; (800679c <HAL_DMA_Start_IT+0x22c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d004      	beq.n	800665e <HAL_DMA_Start_IT+0xee>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a51      	ldr	r2, [pc, #324]	; (80067a0 <HAL_DMA_Start_IT+0x230>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d108      	bne.n	8006670 <HAL_DMA_Start_IT+0x100>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0201 	bic.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e007      	b.n	8006680 <HAL_DMA_Start_IT+0x110>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0201 	bic.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	68b9      	ldr	r1, [r7, #8]
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f001 fe6a 	bl	8008360 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a34      	ldr	r2, [pc, #208]	; (8006764 <HAL_DMA_Start_IT+0x1f4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d04a      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a33      	ldr	r2, [pc, #204]	; (8006768 <HAL_DMA_Start_IT+0x1f8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d045      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a31      	ldr	r2, [pc, #196]	; (800676c <HAL_DMA_Start_IT+0x1fc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d040      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a30      	ldr	r2, [pc, #192]	; (8006770 <HAL_DMA_Start_IT+0x200>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d03b      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a2e      	ldr	r2, [pc, #184]	; (8006774 <HAL_DMA_Start_IT+0x204>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d036      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2d      	ldr	r2, [pc, #180]	; (8006778 <HAL_DMA_Start_IT+0x208>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d031      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2b      	ldr	r2, [pc, #172]	; (800677c <HAL_DMA_Start_IT+0x20c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d02c      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <HAL_DMA_Start_IT+0x210>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d027      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a28      	ldr	r2, [pc, #160]	; (8006784 <HAL_DMA_Start_IT+0x214>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d022      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a27      	ldr	r2, [pc, #156]	; (8006788 <HAL_DMA_Start_IT+0x218>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01d      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a25      	ldr	r2, [pc, #148]	; (800678c <HAL_DMA_Start_IT+0x21c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d018      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a24      	ldr	r2, [pc, #144]	; (8006790 <HAL_DMA_Start_IT+0x220>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d013      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a22      	ldr	r2, [pc, #136]	; (8006794 <HAL_DMA_Start_IT+0x224>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00e      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a21      	ldr	r2, [pc, #132]	; (8006798 <HAL_DMA_Start_IT+0x228>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1f      	ldr	r2, [pc, #124]	; (800679c <HAL_DMA_Start_IT+0x22c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_DMA_Start_IT+0x1bc>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1e      	ldr	r2, [pc, #120]	; (80067a0 <HAL_DMA_Start_IT+0x230>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d101      	bne.n	8006730 <HAL_DMA_Start_IT+0x1c0>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <HAL_DMA_Start_IT+0x1c2>
 8006730:	2300      	movs	r3, #0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d036      	beq.n	80067a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f023 021e 	bic.w	r2, r3, #30
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0216 	orr.w	r2, r2, #22
 8006748:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	d03e      	beq.n	80067d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f042 0208 	orr.w	r2, r2, #8
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	e035      	b.n	80067d0 <HAL_DMA_Start_IT+0x260>
 8006764:	40020010 	.word	0x40020010
 8006768:	40020028 	.word	0x40020028
 800676c:	40020040 	.word	0x40020040
 8006770:	40020058 	.word	0x40020058
 8006774:	40020070 	.word	0x40020070
 8006778:	40020088 	.word	0x40020088
 800677c:	400200a0 	.word	0x400200a0
 8006780:	400200b8 	.word	0x400200b8
 8006784:	40020410 	.word	0x40020410
 8006788:	40020428 	.word	0x40020428
 800678c:	40020440 	.word	0x40020440
 8006790:	40020458 	.word	0x40020458
 8006794:	40020470 	.word	0x40020470
 8006798:	40020488 	.word	0x40020488
 800679c:	400204a0 	.word	0x400204a0
 80067a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f023 020e 	bic.w	r2, r3, #14
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 020a 	orr.w	r2, r2, #10
 80067b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d007      	beq.n	80067d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0204 	orr.w	r2, r2, #4
 80067ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a83      	ldr	r2, [pc, #524]	; (80069e4 <HAL_DMA_Start_IT+0x474>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d072      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a82      	ldr	r2, [pc, #520]	; (80069e8 <HAL_DMA_Start_IT+0x478>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d06d      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a80      	ldr	r2, [pc, #512]	; (80069ec <HAL_DMA_Start_IT+0x47c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d068      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a7f      	ldr	r2, [pc, #508]	; (80069f0 <HAL_DMA_Start_IT+0x480>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d063      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a7d      	ldr	r2, [pc, #500]	; (80069f4 <HAL_DMA_Start_IT+0x484>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d05e      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a7c      	ldr	r2, [pc, #496]	; (80069f8 <HAL_DMA_Start_IT+0x488>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d059      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a7a      	ldr	r2, [pc, #488]	; (80069fc <HAL_DMA_Start_IT+0x48c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d054      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a79      	ldr	r2, [pc, #484]	; (8006a00 <HAL_DMA_Start_IT+0x490>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d04f      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a77      	ldr	r2, [pc, #476]	; (8006a04 <HAL_DMA_Start_IT+0x494>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d04a      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a76      	ldr	r2, [pc, #472]	; (8006a08 <HAL_DMA_Start_IT+0x498>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d045      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a74      	ldr	r2, [pc, #464]	; (8006a0c <HAL_DMA_Start_IT+0x49c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d040      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a73      	ldr	r2, [pc, #460]	; (8006a10 <HAL_DMA_Start_IT+0x4a0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d03b      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a71      	ldr	r2, [pc, #452]	; (8006a14 <HAL_DMA_Start_IT+0x4a4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d036      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a70      	ldr	r2, [pc, #448]	; (8006a18 <HAL_DMA_Start_IT+0x4a8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d031      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a6e      	ldr	r2, [pc, #440]	; (8006a1c <HAL_DMA_Start_IT+0x4ac>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d02c      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a6d      	ldr	r2, [pc, #436]	; (8006a20 <HAL_DMA_Start_IT+0x4b0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d027      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a6b      	ldr	r2, [pc, #428]	; (8006a24 <HAL_DMA_Start_IT+0x4b4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d022      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a6a      	ldr	r2, [pc, #424]	; (8006a28 <HAL_DMA_Start_IT+0x4b8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d01d      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a68      	ldr	r2, [pc, #416]	; (8006a2c <HAL_DMA_Start_IT+0x4bc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d018      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a67      	ldr	r2, [pc, #412]	; (8006a30 <HAL_DMA_Start_IT+0x4c0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d013      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a65      	ldr	r2, [pc, #404]	; (8006a34 <HAL_DMA_Start_IT+0x4c4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a64      	ldr	r2, [pc, #400]	; (8006a38 <HAL_DMA_Start_IT+0x4c8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a62      	ldr	r2, [pc, #392]	; (8006a3c <HAL_DMA_Start_IT+0x4cc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_DMA_Start_IT+0x350>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a61      	ldr	r2, [pc, #388]	; (8006a40 <HAL_DMA_Start_IT+0x4d0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d101      	bne.n	80068c4 <HAL_DMA_Start_IT+0x354>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <HAL_DMA_Start_IT+0x356>
 80068c4:	2300      	movs	r3, #0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01a      	beq.n	8006900 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d007      	beq.n	80068e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a37      	ldr	r2, [pc, #220]	; (80069e4 <HAL_DMA_Start_IT+0x474>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d04a      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a36      	ldr	r2, [pc, #216]	; (80069e8 <HAL_DMA_Start_IT+0x478>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d045      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a34      	ldr	r2, [pc, #208]	; (80069ec <HAL_DMA_Start_IT+0x47c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d040      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a33      	ldr	r2, [pc, #204]	; (80069f0 <HAL_DMA_Start_IT+0x480>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d03b      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a31      	ldr	r2, [pc, #196]	; (80069f4 <HAL_DMA_Start_IT+0x484>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d036      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a30      	ldr	r2, [pc, #192]	; (80069f8 <HAL_DMA_Start_IT+0x488>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d031      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2e      	ldr	r2, [pc, #184]	; (80069fc <HAL_DMA_Start_IT+0x48c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d02c      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2d      	ldr	r2, [pc, #180]	; (8006a00 <HAL_DMA_Start_IT+0x490>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d027      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a2b      	ldr	r2, [pc, #172]	; (8006a04 <HAL_DMA_Start_IT+0x494>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d022      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a2a      	ldr	r2, [pc, #168]	; (8006a08 <HAL_DMA_Start_IT+0x498>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d01d      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a28      	ldr	r2, [pc, #160]	; (8006a0c <HAL_DMA_Start_IT+0x49c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d018      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a27      	ldr	r2, [pc, #156]	; (8006a10 <HAL_DMA_Start_IT+0x4a0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d013      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a25      	ldr	r2, [pc, #148]	; (8006a14 <HAL_DMA_Start_IT+0x4a4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00e      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a24      	ldr	r2, [pc, #144]	; (8006a18 <HAL_DMA_Start_IT+0x4a8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d009      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a22      	ldr	r2, [pc, #136]	; (8006a1c <HAL_DMA_Start_IT+0x4ac>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d004      	beq.n	80069a0 <HAL_DMA_Start_IT+0x430>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a21      	ldr	r2, [pc, #132]	; (8006a20 <HAL_DMA_Start_IT+0x4b0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d108      	bne.n	80069b2 <HAL_DMA_Start_IT+0x442>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	e012      	b.n	80069d8 <HAL_DMA_Start_IT+0x468>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0201 	orr.w	r2, r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	e009      	b.n	80069d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40020010 	.word	0x40020010
 80069e8:	40020028 	.word	0x40020028
 80069ec:	40020040 	.word	0x40020040
 80069f0:	40020058 	.word	0x40020058
 80069f4:	40020070 	.word	0x40020070
 80069f8:	40020088 	.word	0x40020088
 80069fc:	400200a0 	.word	0x400200a0
 8006a00:	400200b8 	.word	0x400200b8
 8006a04:	40020410 	.word	0x40020410
 8006a08:	40020428 	.word	0x40020428
 8006a0c:	40020440 	.word	0x40020440
 8006a10:	40020458 	.word	0x40020458
 8006a14:	40020470 	.word	0x40020470
 8006a18:	40020488 	.word	0x40020488
 8006a1c:	400204a0 	.word	0x400204a0
 8006a20:	400204b8 	.word	0x400204b8
 8006a24:	58025408 	.word	0x58025408
 8006a28:	5802541c 	.word	0x5802541c
 8006a2c:	58025430 	.word	0x58025430
 8006a30:	58025444 	.word	0x58025444
 8006a34:	58025458 	.word	0x58025458
 8006a38:	5802546c 	.word	0x5802546c
 8006a3c:	58025480 	.word	0x58025480
 8006a40:	58025494 	.word	0x58025494

08006a44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006a4c:	f7fe ff32 	bl	80058b4 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e2dc      	b.n	8007016 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d008      	beq.n	8006a7a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e2cd      	b.n	8007016 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a76      	ldr	r2, [pc, #472]	; (8006c58 <HAL_DMA_Abort+0x214>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d04a      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a74      	ldr	r2, [pc, #464]	; (8006c5c <HAL_DMA_Abort+0x218>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d045      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a73      	ldr	r2, [pc, #460]	; (8006c60 <HAL_DMA_Abort+0x21c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d040      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a71      	ldr	r2, [pc, #452]	; (8006c64 <HAL_DMA_Abort+0x220>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d03b      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a70      	ldr	r2, [pc, #448]	; (8006c68 <HAL_DMA_Abort+0x224>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d036      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a6e      	ldr	r2, [pc, #440]	; (8006c6c <HAL_DMA_Abort+0x228>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d031      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a6d      	ldr	r2, [pc, #436]	; (8006c70 <HAL_DMA_Abort+0x22c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d02c      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a6b      	ldr	r2, [pc, #428]	; (8006c74 <HAL_DMA_Abort+0x230>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d027      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a6a      	ldr	r2, [pc, #424]	; (8006c78 <HAL_DMA_Abort+0x234>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d022      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a68      	ldr	r2, [pc, #416]	; (8006c7c <HAL_DMA_Abort+0x238>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d01d      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a67      	ldr	r2, [pc, #412]	; (8006c80 <HAL_DMA_Abort+0x23c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d018      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a65      	ldr	r2, [pc, #404]	; (8006c84 <HAL_DMA_Abort+0x240>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a64      	ldr	r2, [pc, #400]	; (8006c88 <HAL_DMA_Abort+0x244>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00e      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a62      	ldr	r2, [pc, #392]	; (8006c8c <HAL_DMA_Abort+0x248>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a61      	ldr	r2, [pc, #388]	; (8006c90 <HAL_DMA_Abort+0x24c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d004      	beq.n	8006b1a <HAL_DMA_Abort+0xd6>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a5f      	ldr	r2, [pc, #380]	; (8006c94 <HAL_DMA_Abort+0x250>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d101      	bne.n	8006b1e <HAL_DMA_Abort+0xda>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <HAL_DMA_Abort+0xdc>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d013      	beq.n	8006b4c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 021e 	bic.w	r2, r2, #30
 8006b32:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b42:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	e00a      	b.n	8006b62 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 020e 	bic.w	r2, r2, #14
 8006b5a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a3c      	ldr	r2, [pc, #240]	; (8006c58 <HAL_DMA_Abort+0x214>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d072      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a3a      	ldr	r2, [pc, #232]	; (8006c5c <HAL_DMA_Abort+0x218>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d06d      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a39      	ldr	r2, [pc, #228]	; (8006c60 <HAL_DMA_Abort+0x21c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d068      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a37      	ldr	r2, [pc, #220]	; (8006c64 <HAL_DMA_Abort+0x220>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d063      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a36      	ldr	r2, [pc, #216]	; (8006c68 <HAL_DMA_Abort+0x224>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d05e      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a34      	ldr	r2, [pc, #208]	; (8006c6c <HAL_DMA_Abort+0x228>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d059      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a33      	ldr	r2, [pc, #204]	; (8006c70 <HAL_DMA_Abort+0x22c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d054      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a31      	ldr	r2, [pc, #196]	; (8006c74 <HAL_DMA_Abort+0x230>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d04f      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a30      	ldr	r2, [pc, #192]	; (8006c78 <HAL_DMA_Abort+0x234>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d04a      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a2e      	ldr	r2, [pc, #184]	; (8006c7c <HAL_DMA_Abort+0x238>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d045      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a2d      	ldr	r2, [pc, #180]	; (8006c80 <HAL_DMA_Abort+0x23c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d040      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a2b      	ldr	r2, [pc, #172]	; (8006c84 <HAL_DMA_Abort+0x240>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d03b      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a2a      	ldr	r2, [pc, #168]	; (8006c88 <HAL_DMA_Abort+0x244>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d036      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a28      	ldr	r2, [pc, #160]	; (8006c8c <HAL_DMA_Abort+0x248>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d031      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a27      	ldr	r2, [pc, #156]	; (8006c90 <HAL_DMA_Abort+0x24c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d02c      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a25      	ldr	r2, [pc, #148]	; (8006c94 <HAL_DMA_Abort+0x250>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d027      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a24      	ldr	r2, [pc, #144]	; (8006c98 <HAL_DMA_Abort+0x254>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d022      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a22      	ldr	r2, [pc, #136]	; (8006c9c <HAL_DMA_Abort+0x258>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d01d      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a21      	ldr	r2, [pc, #132]	; (8006ca0 <HAL_DMA_Abort+0x25c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d018      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a1f      	ldr	r2, [pc, #124]	; (8006ca4 <HAL_DMA_Abort+0x260>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d013      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <HAL_DMA_Abort+0x264>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00e      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1c      	ldr	r2, [pc, #112]	; (8006cac <HAL_DMA_Abort+0x268>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d009      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <HAL_DMA_Abort+0x26c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d004      	beq.n	8006c52 <HAL_DMA_Abort+0x20e>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a19      	ldr	r2, [pc, #100]	; (8006cb4 <HAL_DMA_Abort+0x270>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d132      	bne.n	8006cb8 <HAL_DMA_Abort+0x274>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e031      	b.n	8006cba <HAL_DMA_Abort+0x276>
 8006c56:	bf00      	nop
 8006c58:	40020010 	.word	0x40020010
 8006c5c:	40020028 	.word	0x40020028
 8006c60:	40020040 	.word	0x40020040
 8006c64:	40020058 	.word	0x40020058
 8006c68:	40020070 	.word	0x40020070
 8006c6c:	40020088 	.word	0x40020088
 8006c70:	400200a0 	.word	0x400200a0
 8006c74:	400200b8 	.word	0x400200b8
 8006c78:	40020410 	.word	0x40020410
 8006c7c:	40020428 	.word	0x40020428
 8006c80:	40020440 	.word	0x40020440
 8006c84:	40020458 	.word	0x40020458
 8006c88:	40020470 	.word	0x40020470
 8006c8c:	40020488 	.word	0x40020488
 8006c90:	400204a0 	.word	0x400204a0
 8006c94:	400204b8 	.word	0x400204b8
 8006c98:	58025408 	.word	0x58025408
 8006c9c:	5802541c 	.word	0x5802541c
 8006ca0:	58025430 	.word	0x58025430
 8006ca4:	58025444 	.word	0x58025444
 8006ca8:	58025458 	.word	0x58025458
 8006cac:	5802546c 	.word	0x5802546c
 8006cb0:	58025480 	.word	0x58025480
 8006cb4:	58025494 	.word	0x58025494
 8006cb8:	2300      	movs	r3, #0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a6d      	ldr	r2, [pc, #436]	; (8006e88 <HAL_DMA_Abort+0x444>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d04a      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a6b      	ldr	r2, [pc, #428]	; (8006e8c <HAL_DMA_Abort+0x448>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d045      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a6a      	ldr	r2, [pc, #424]	; (8006e90 <HAL_DMA_Abort+0x44c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d040      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a68      	ldr	r2, [pc, #416]	; (8006e94 <HAL_DMA_Abort+0x450>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d03b      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a67      	ldr	r2, [pc, #412]	; (8006e98 <HAL_DMA_Abort+0x454>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d036      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a65      	ldr	r2, [pc, #404]	; (8006e9c <HAL_DMA_Abort+0x458>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d031      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a64      	ldr	r2, [pc, #400]	; (8006ea0 <HAL_DMA_Abort+0x45c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d02c      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a62      	ldr	r2, [pc, #392]	; (8006ea4 <HAL_DMA_Abort+0x460>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d027      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a61      	ldr	r2, [pc, #388]	; (8006ea8 <HAL_DMA_Abort+0x464>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d022      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a5f      	ldr	r2, [pc, #380]	; (8006eac <HAL_DMA_Abort+0x468>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01d      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a5e      	ldr	r2, [pc, #376]	; (8006eb0 <HAL_DMA_Abort+0x46c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d018      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a5c      	ldr	r2, [pc, #368]	; (8006eb4 <HAL_DMA_Abort+0x470>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a5b      	ldr	r2, [pc, #364]	; (8006eb8 <HAL_DMA_Abort+0x474>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a59      	ldr	r2, [pc, #356]	; (8006ebc <HAL_DMA_Abort+0x478>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a58      	ldr	r2, [pc, #352]	; (8006ec0 <HAL_DMA_Abort+0x47c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_DMA_Abort+0x32a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a56      	ldr	r2, [pc, #344]	; (8006ec4 <HAL_DMA_Abort+0x480>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d108      	bne.n	8006d80 <HAL_DMA_Abort+0x33c>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0201 	bic.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e007      	b.n	8006d90 <HAL_DMA_Abort+0x34c>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0201 	bic.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d90:	e013      	b.n	8006dba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d92:	f7fe fd8f 	bl	80058b4 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b05      	cmp	r3, #5
 8006d9e:	d90c      	bls.n	8006dba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2203      	movs	r2, #3
 8006daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e12d      	b.n	8007016 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e5      	bne.n	8006d92 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a2f      	ldr	r2, [pc, #188]	; (8006e88 <HAL_DMA_Abort+0x444>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d04a      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a2d      	ldr	r2, [pc, #180]	; (8006e8c <HAL_DMA_Abort+0x448>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d045      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a2c      	ldr	r2, [pc, #176]	; (8006e90 <HAL_DMA_Abort+0x44c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d040      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a2a      	ldr	r2, [pc, #168]	; (8006e94 <HAL_DMA_Abort+0x450>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d03b      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a29      	ldr	r2, [pc, #164]	; (8006e98 <HAL_DMA_Abort+0x454>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d036      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a27      	ldr	r2, [pc, #156]	; (8006e9c <HAL_DMA_Abort+0x458>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d031      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a26      	ldr	r2, [pc, #152]	; (8006ea0 <HAL_DMA_Abort+0x45c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d02c      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a24      	ldr	r2, [pc, #144]	; (8006ea4 <HAL_DMA_Abort+0x460>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d027      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a23      	ldr	r2, [pc, #140]	; (8006ea8 <HAL_DMA_Abort+0x464>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d022      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a21      	ldr	r2, [pc, #132]	; (8006eac <HAL_DMA_Abort+0x468>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01d      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a20      	ldr	r2, [pc, #128]	; (8006eb0 <HAL_DMA_Abort+0x46c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d018      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1e      	ldr	r2, [pc, #120]	; (8006eb4 <HAL_DMA_Abort+0x470>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d013      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <HAL_DMA_Abort+0x474>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00e      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1b      	ldr	r2, [pc, #108]	; (8006ebc <HAL_DMA_Abort+0x478>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a1a      	ldr	r2, [pc, #104]	; (8006ec0 <HAL_DMA_Abort+0x47c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_DMA_Abort+0x422>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <HAL_DMA_Abort+0x480>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d101      	bne.n	8006e6a <HAL_DMA_Abort+0x426>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <HAL_DMA_Abort+0x428>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d02b      	beq.n	8006ec8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e74:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	223f      	movs	r2, #63	; 0x3f
 8006e80:	409a      	lsls	r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	609a      	str	r2, [r3, #8]
 8006e86:	e02a      	b.n	8006ede <HAL_DMA_Abort+0x49a>
 8006e88:	40020010 	.word	0x40020010
 8006e8c:	40020028 	.word	0x40020028
 8006e90:	40020040 	.word	0x40020040
 8006e94:	40020058 	.word	0x40020058
 8006e98:	40020070 	.word	0x40020070
 8006e9c:	40020088 	.word	0x40020088
 8006ea0:	400200a0 	.word	0x400200a0
 8006ea4:	400200b8 	.word	0x400200b8
 8006ea8:	40020410 	.word	0x40020410
 8006eac:	40020428 	.word	0x40020428
 8006eb0:	40020440 	.word	0x40020440
 8006eb4:	40020458 	.word	0x40020458
 8006eb8:	40020470 	.word	0x40020470
 8006ebc:	40020488 	.word	0x40020488
 8006ec0:	400204a0 	.word	0x400204a0
 8006ec4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ecc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a4f      	ldr	r2, [pc, #316]	; (8007020 <HAL_DMA_Abort+0x5dc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d072      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a4d      	ldr	r2, [pc, #308]	; (8007024 <HAL_DMA_Abort+0x5e0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d06d      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a4c      	ldr	r2, [pc, #304]	; (8007028 <HAL_DMA_Abort+0x5e4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d068      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a4a      	ldr	r2, [pc, #296]	; (800702c <HAL_DMA_Abort+0x5e8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d063      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a49      	ldr	r2, [pc, #292]	; (8007030 <HAL_DMA_Abort+0x5ec>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d05e      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a47      	ldr	r2, [pc, #284]	; (8007034 <HAL_DMA_Abort+0x5f0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d059      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a46      	ldr	r2, [pc, #280]	; (8007038 <HAL_DMA_Abort+0x5f4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d054      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a44      	ldr	r2, [pc, #272]	; (800703c <HAL_DMA_Abort+0x5f8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d04f      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a43      	ldr	r2, [pc, #268]	; (8007040 <HAL_DMA_Abort+0x5fc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d04a      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a41      	ldr	r2, [pc, #260]	; (8007044 <HAL_DMA_Abort+0x600>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d045      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a40      	ldr	r2, [pc, #256]	; (8007048 <HAL_DMA_Abort+0x604>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d040      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a3e      	ldr	r2, [pc, #248]	; (800704c <HAL_DMA_Abort+0x608>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d03b      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a3d      	ldr	r2, [pc, #244]	; (8007050 <HAL_DMA_Abort+0x60c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d036      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a3b      	ldr	r2, [pc, #236]	; (8007054 <HAL_DMA_Abort+0x610>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d031      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a3a      	ldr	r2, [pc, #232]	; (8007058 <HAL_DMA_Abort+0x614>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d02c      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a38      	ldr	r2, [pc, #224]	; (800705c <HAL_DMA_Abort+0x618>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d027      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a37      	ldr	r2, [pc, #220]	; (8007060 <HAL_DMA_Abort+0x61c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d022      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a35      	ldr	r2, [pc, #212]	; (8007064 <HAL_DMA_Abort+0x620>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d01d      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a34      	ldr	r2, [pc, #208]	; (8007068 <HAL_DMA_Abort+0x624>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d018      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a32      	ldr	r2, [pc, #200]	; (800706c <HAL_DMA_Abort+0x628>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d013      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a31      	ldr	r2, [pc, #196]	; (8007070 <HAL_DMA_Abort+0x62c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00e      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a2f      	ldr	r2, [pc, #188]	; (8007074 <HAL_DMA_Abort+0x630>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d009      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a2e      	ldr	r2, [pc, #184]	; (8007078 <HAL_DMA_Abort+0x634>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d004      	beq.n	8006fce <HAL_DMA_Abort+0x58a>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <HAL_DMA_Abort+0x638>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d101      	bne.n	8006fd2 <HAL_DMA_Abort+0x58e>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <HAL_DMA_Abort+0x590>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d015      	beq.n	8007004 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fe0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00c      	beq.n	8007004 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ff8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007002:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	40020010 	.word	0x40020010
 8007024:	40020028 	.word	0x40020028
 8007028:	40020040 	.word	0x40020040
 800702c:	40020058 	.word	0x40020058
 8007030:	40020070 	.word	0x40020070
 8007034:	40020088 	.word	0x40020088
 8007038:	400200a0 	.word	0x400200a0
 800703c:	400200b8 	.word	0x400200b8
 8007040:	40020410 	.word	0x40020410
 8007044:	40020428 	.word	0x40020428
 8007048:	40020440 	.word	0x40020440
 800704c:	40020458 	.word	0x40020458
 8007050:	40020470 	.word	0x40020470
 8007054:	40020488 	.word	0x40020488
 8007058:	400204a0 	.word	0x400204a0
 800705c:	400204b8 	.word	0x400204b8
 8007060:	58025408 	.word	0x58025408
 8007064:	5802541c 	.word	0x5802541c
 8007068:	58025430 	.word	0x58025430
 800706c:	58025444 	.word	0x58025444
 8007070:	58025458 	.word	0x58025458
 8007074:	5802546c 	.word	0x5802546c
 8007078:	58025480 	.word	0x58025480
 800707c:	58025494 	.word	0x58025494

08007080 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e237      	b.n	8007502 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d004      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2280      	movs	r2, #128	; 0x80
 80070a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e22c      	b.n	8007502 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a5c      	ldr	r2, [pc, #368]	; (8007220 <HAL_DMA_Abort_IT+0x1a0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d04a      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a5b      	ldr	r2, [pc, #364]	; (8007224 <HAL_DMA_Abort_IT+0x1a4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d045      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a59      	ldr	r2, [pc, #356]	; (8007228 <HAL_DMA_Abort_IT+0x1a8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d040      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a58      	ldr	r2, [pc, #352]	; (800722c <HAL_DMA_Abort_IT+0x1ac>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d03b      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a56      	ldr	r2, [pc, #344]	; (8007230 <HAL_DMA_Abort_IT+0x1b0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d036      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a55      	ldr	r2, [pc, #340]	; (8007234 <HAL_DMA_Abort_IT+0x1b4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d031      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a53      	ldr	r2, [pc, #332]	; (8007238 <HAL_DMA_Abort_IT+0x1b8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d02c      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a52      	ldr	r2, [pc, #328]	; (800723c <HAL_DMA_Abort_IT+0x1bc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d027      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a50      	ldr	r2, [pc, #320]	; (8007240 <HAL_DMA_Abort_IT+0x1c0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d022      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a4f      	ldr	r2, [pc, #316]	; (8007244 <HAL_DMA_Abort_IT+0x1c4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d01d      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a4d      	ldr	r2, [pc, #308]	; (8007248 <HAL_DMA_Abort_IT+0x1c8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d018      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a4c      	ldr	r2, [pc, #304]	; (800724c <HAL_DMA_Abort_IT+0x1cc>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d013      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a4a      	ldr	r2, [pc, #296]	; (8007250 <HAL_DMA_Abort_IT+0x1d0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00e      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a49      	ldr	r2, [pc, #292]	; (8007254 <HAL_DMA_Abort_IT+0x1d4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d009      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a47      	ldr	r2, [pc, #284]	; (8007258 <HAL_DMA_Abort_IT+0x1d8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d004      	beq.n	8007148 <HAL_DMA_Abort_IT+0xc8>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a46      	ldr	r2, [pc, #280]	; (800725c <HAL_DMA_Abort_IT+0x1dc>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d101      	bne.n	800714c <HAL_DMA_Abort_IT+0xcc>
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <HAL_DMA_Abort_IT+0xce>
 800714c:	2300      	movs	r3, #0
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 8086 	beq.w	8007260 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2204      	movs	r2, #4
 8007158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a2f      	ldr	r2, [pc, #188]	; (8007220 <HAL_DMA_Abort_IT+0x1a0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d04a      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a2e      	ldr	r2, [pc, #184]	; (8007224 <HAL_DMA_Abort_IT+0x1a4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d045      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a2c      	ldr	r2, [pc, #176]	; (8007228 <HAL_DMA_Abort_IT+0x1a8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d040      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a2b      	ldr	r2, [pc, #172]	; (800722c <HAL_DMA_Abort_IT+0x1ac>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d03b      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a29      	ldr	r2, [pc, #164]	; (8007230 <HAL_DMA_Abort_IT+0x1b0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d036      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a28      	ldr	r2, [pc, #160]	; (8007234 <HAL_DMA_Abort_IT+0x1b4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d031      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a26      	ldr	r2, [pc, #152]	; (8007238 <HAL_DMA_Abort_IT+0x1b8>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d02c      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a25      	ldr	r2, [pc, #148]	; (800723c <HAL_DMA_Abort_IT+0x1bc>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d027      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a23      	ldr	r2, [pc, #140]	; (8007240 <HAL_DMA_Abort_IT+0x1c0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d022      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a22      	ldr	r2, [pc, #136]	; (8007244 <HAL_DMA_Abort_IT+0x1c4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d01d      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a20      	ldr	r2, [pc, #128]	; (8007248 <HAL_DMA_Abort_IT+0x1c8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d018      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1f      	ldr	r2, [pc, #124]	; (800724c <HAL_DMA_Abort_IT+0x1cc>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d013      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1d      	ldr	r2, [pc, #116]	; (8007250 <HAL_DMA_Abort_IT+0x1d0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00e      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1c      	ldr	r2, [pc, #112]	; (8007254 <HAL_DMA_Abort_IT+0x1d4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d009      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1a      	ldr	r2, [pc, #104]	; (8007258 <HAL_DMA_Abort_IT+0x1d8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d004      	beq.n	80071fc <HAL_DMA_Abort_IT+0x17c>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a19      	ldr	r2, [pc, #100]	; (800725c <HAL_DMA_Abort_IT+0x1dc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d108      	bne.n	800720e <HAL_DMA_Abort_IT+0x18e>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0201 	bic.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	e178      	b.n	8007500 <HAL_DMA_Abort_IT+0x480>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0201 	bic.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	e16f      	b.n	8007500 <HAL_DMA_Abort_IT+0x480>
 8007220:	40020010 	.word	0x40020010
 8007224:	40020028 	.word	0x40020028
 8007228:	40020040 	.word	0x40020040
 800722c:	40020058 	.word	0x40020058
 8007230:	40020070 	.word	0x40020070
 8007234:	40020088 	.word	0x40020088
 8007238:	400200a0 	.word	0x400200a0
 800723c:	400200b8 	.word	0x400200b8
 8007240:	40020410 	.word	0x40020410
 8007244:	40020428 	.word	0x40020428
 8007248:	40020440 	.word	0x40020440
 800724c:	40020458 	.word	0x40020458
 8007250:	40020470 	.word	0x40020470
 8007254:	40020488 	.word	0x40020488
 8007258:	400204a0 	.word	0x400204a0
 800725c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 020e 	bic.w	r2, r2, #14
 800726e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a6c      	ldr	r2, [pc, #432]	; (8007428 <HAL_DMA_Abort_IT+0x3a8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d04a      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a6b      	ldr	r2, [pc, #428]	; (800742c <HAL_DMA_Abort_IT+0x3ac>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d045      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a69      	ldr	r2, [pc, #420]	; (8007430 <HAL_DMA_Abort_IT+0x3b0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d040      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a68      	ldr	r2, [pc, #416]	; (8007434 <HAL_DMA_Abort_IT+0x3b4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d03b      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a66      	ldr	r2, [pc, #408]	; (8007438 <HAL_DMA_Abort_IT+0x3b8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d036      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a65      	ldr	r2, [pc, #404]	; (800743c <HAL_DMA_Abort_IT+0x3bc>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d031      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a63      	ldr	r2, [pc, #396]	; (8007440 <HAL_DMA_Abort_IT+0x3c0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d02c      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a62      	ldr	r2, [pc, #392]	; (8007444 <HAL_DMA_Abort_IT+0x3c4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d027      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a60      	ldr	r2, [pc, #384]	; (8007448 <HAL_DMA_Abort_IT+0x3c8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d022      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a5f      	ldr	r2, [pc, #380]	; (800744c <HAL_DMA_Abort_IT+0x3cc>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d01d      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a5d      	ldr	r2, [pc, #372]	; (8007450 <HAL_DMA_Abort_IT+0x3d0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d018      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a5c      	ldr	r2, [pc, #368]	; (8007454 <HAL_DMA_Abort_IT+0x3d4>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d013      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a5a      	ldr	r2, [pc, #360]	; (8007458 <HAL_DMA_Abort_IT+0x3d8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00e      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a59      	ldr	r2, [pc, #356]	; (800745c <HAL_DMA_Abort_IT+0x3dc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d009      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a57      	ldr	r2, [pc, #348]	; (8007460 <HAL_DMA_Abort_IT+0x3e0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <HAL_DMA_Abort_IT+0x290>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a56      	ldr	r2, [pc, #344]	; (8007464 <HAL_DMA_Abort_IT+0x3e4>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d108      	bne.n	8007322 <HAL_DMA_Abort_IT+0x2a2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0201 	bic.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	e007      	b.n	8007332 <HAL_DMA_Abort_IT+0x2b2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a3c      	ldr	r2, [pc, #240]	; (8007428 <HAL_DMA_Abort_IT+0x3a8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d072      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a3a      	ldr	r2, [pc, #232]	; (800742c <HAL_DMA_Abort_IT+0x3ac>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d06d      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a39      	ldr	r2, [pc, #228]	; (8007430 <HAL_DMA_Abort_IT+0x3b0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d068      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a37      	ldr	r2, [pc, #220]	; (8007434 <HAL_DMA_Abort_IT+0x3b4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d063      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a36      	ldr	r2, [pc, #216]	; (8007438 <HAL_DMA_Abort_IT+0x3b8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d05e      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a34      	ldr	r2, [pc, #208]	; (800743c <HAL_DMA_Abort_IT+0x3bc>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d059      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a33      	ldr	r2, [pc, #204]	; (8007440 <HAL_DMA_Abort_IT+0x3c0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d054      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a31      	ldr	r2, [pc, #196]	; (8007444 <HAL_DMA_Abort_IT+0x3c4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d04f      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a30      	ldr	r2, [pc, #192]	; (8007448 <HAL_DMA_Abort_IT+0x3c8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d04a      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2e      	ldr	r2, [pc, #184]	; (800744c <HAL_DMA_Abort_IT+0x3cc>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d045      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <HAL_DMA_Abort_IT+0x3d0>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d040      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2b      	ldr	r2, [pc, #172]	; (8007454 <HAL_DMA_Abort_IT+0x3d4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d03b      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a2a      	ldr	r2, [pc, #168]	; (8007458 <HAL_DMA_Abort_IT+0x3d8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d036      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a28      	ldr	r2, [pc, #160]	; (800745c <HAL_DMA_Abort_IT+0x3dc>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d031      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a27      	ldr	r2, [pc, #156]	; (8007460 <HAL_DMA_Abort_IT+0x3e0>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d02c      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a25      	ldr	r2, [pc, #148]	; (8007464 <HAL_DMA_Abort_IT+0x3e4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d027      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a24      	ldr	r2, [pc, #144]	; (8007468 <HAL_DMA_Abort_IT+0x3e8>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d022      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a22      	ldr	r2, [pc, #136]	; (800746c <HAL_DMA_Abort_IT+0x3ec>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d01d      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a21      	ldr	r2, [pc, #132]	; (8007470 <HAL_DMA_Abort_IT+0x3f0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d018      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1f      	ldr	r2, [pc, #124]	; (8007474 <HAL_DMA_Abort_IT+0x3f4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d013      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1e      	ldr	r2, [pc, #120]	; (8007478 <HAL_DMA_Abort_IT+0x3f8>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00e      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1c      	ldr	r2, [pc, #112]	; (800747c <HAL_DMA_Abort_IT+0x3fc>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d009      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1b      	ldr	r2, [pc, #108]	; (8007480 <HAL_DMA_Abort_IT+0x400>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d004      	beq.n	8007422 <HAL_DMA_Abort_IT+0x3a2>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a19      	ldr	r2, [pc, #100]	; (8007484 <HAL_DMA_Abort_IT+0x404>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d132      	bne.n	8007488 <HAL_DMA_Abort_IT+0x408>
 8007422:	2301      	movs	r3, #1
 8007424:	e031      	b.n	800748a <HAL_DMA_Abort_IT+0x40a>
 8007426:	bf00      	nop
 8007428:	40020010 	.word	0x40020010
 800742c:	40020028 	.word	0x40020028
 8007430:	40020040 	.word	0x40020040
 8007434:	40020058 	.word	0x40020058
 8007438:	40020070 	.word	0x40020070
 800743c:	40020088 	.word	0x40020088
 8007440:	400200a0 	.word	0x400200a0
 8007444:	400200b8 	.word	0x400200b8
 8007448:	40020410 	.word	0x40020410
 800744c:	40020428 	.word	0x40020428
 8007450:	40020440 	.word	0x40020440
 8007454:	40020458 	.word	0x40020458
 8007458:	40020470 	.word	0x40020470
 800745c:	40020488 	.word	0x40020488
 8007460:	400204a0 	.word	0x400204a0
 8007464:	400204b8 	.word	0x400204b8
 8007468:	58025408 	.word	0x58025408
 800746c:	5802541c 	.word	0x5802541c
 8007470:	58025430 	.word	0x58025430
 8007474:	58025444 	.word	0x58025444
 8007478:	58025458 	.word	0x58025458
 800747c:	5802546c 	.word	0x5802546c
 8007480:	58025480 	.word	0x58025480
 8007484:	58025494 	.word	0x58025494
 8007488:	2300      	movs	r3, #0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d028      	beq.n	80074e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800749c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2201      	movs	r2, #1
 80074ae:	409a      	lsls	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80074bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00c      	beq.n	80074e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop

0800750c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	; 0x28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007518:	4b67      	ldr	r3, [pc, #412]	; (80076b8 <HAL_DMA_IRQHandler+0x1ac>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a67      	ldr	r2, [pc, #412]	; (80076bc <HAL_DMA_IRQHandler+0x1b0>)
 800751e:	fba2 2303 	umull	r2, r3, r2, r3
 8007522:	0a9b      	lsrs	r3, r3, #10
 8007524:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007530:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a5f      	ldr	r2, [pc, #380]	; (80076c0 <HAL_DMA_IRQHandler+0x1b4>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d04a      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a5d      	ldr	r2, [pc, #372]	; (80076c4 <HAL_DMA_IRQHandler+0x1b8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d045      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a5c      	ldr	r2, [pc, #368]	; (80076c8 <HAL_DMA_IRQHandler+0x1bc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d040      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a5a      	ldr	r2, [pc, #360]	; (80076cc <HAL_DMA_IRQHandler+0x1c0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d03b      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a59      	ldr	r2, [pc, #356]	; (80076d0 <HAL_DMA_IRQHandler+0x1c4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d036      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a57      	ldr	r2, [pc, #348]	; (80076d4 <HAL_DMA_IRQHandler+0x1c8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d031      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a56      	ldr	r2, [pc, #344]	; (80076d8 <HAL_DMA_IRQHandler+0x1cc>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d02c      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a54      	ldr	r2, [pc, #336]	; (80076dc <HAL_DMA_IRQHandler+0x1d0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d027      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a53      	ldr	r2, [pc, #332]	; (80076e0 <HAL_DMA_IRQHandler+0x1d4>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d022      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a51      	ldr	r2, [pc, #324]	; (80076e4 <HAL_DMA_IRQHandler+0x1d8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01d      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a50      	ldr	r2, [pc, #320]	; (80076e8 <HAL_DMA_IRQHandler+0x1dc>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d018      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a4e      	ldr	r2, [pc, #312]	; (80076ec <HAL_DMA_IRQHandler+0x1e0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a4d      	ldr	r2, [pc, #308]	; (80076f0 <HAL_DMA_IRQHandler+0x1e4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a4b      	ldr	r2, [pc, #300]	; (80076f4 <HAL_DMA_IRQHandler+0x1e8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a4a      	ldr	r2, [pc, #296]	; (80076f8 <HAL_DMA_IRQHandler+0x1ec>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_DMA_IRQHandler+0xd2>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a48      	ldr	r2, [pc, #288]	; (80076fc <HAL_DMA_IRQHandler+0x1f0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d101      	bne.n	80075e2 <HAL_DMA_IRQHandler+0xd6>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <HAL_DMA_IRQHandler+0xd8>
 80075e2:	2300      	movs	r3, #0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 842b 	beq.w	8007e40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2208      	movs	r2, #8
 80075f4:	409a      	lsls	r2, r3
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	4013      	ands	r3, r2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 80a2 	beq.w	8007744 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a2e      	ldr	r2, [pc, #184]	; (80076c0 <HAL_DMA_IRQHandler+0x1b4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d04a      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2d      	ldr	r2, [pc, #180]	; (80076c4 <HAL_DMA_IRQHandler+0x1b8>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d045      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a2b      	ldr	r2, [pc, #172]	; (80076c8 <HAL_DMA_IRQHandler+0x1bc>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d040      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <HAL_DMA_IRQHandler+0x1c0>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d03b      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a28      	ldr	r2, [pc, #160]	; (80076d0 <HAL_DMA_IRQHandler+0x1c4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d036      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a27      	ldr	r2, [pc, #156]	; (80076d4 <HAL_DMA_IRQHandler+0x1c8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d031      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a25      	ldr	r2, [pc, #148]	; (80076d8 <HAL_DMA_IRQHandler+0x1cc>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d02c      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a24      	ldr	r2, [pc, #144]	; (80076dc <HAL_DMA_IRQHandler+0x1d0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d027      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a22      	ldr	r2, [pc, #136]	; (80076e0 <HAL_DMA_IRQHandler+0x1d4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d022      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a21      	ldr	r2, [pc, #132]	; (80076e4 <HAL_DMA_IRQHandler+0x1d8>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d01d      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a1f      	ldr	r2, [pc, #124]	; (80076e8 <HAL_DMA_IRQHandler+0x1dc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d018      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1e      	ldr	r2, [pc, #120]	; (80076ec <HAL_DMA_IRQHandler+0x1e0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d013      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1c      	ldr	r2, [pc, #112]	; (80076f0 <HAL_DMA_IRQHandler+0x1e4>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00e      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <HAL_DMA_IRQHandler+0x1e8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d009      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a19      	ldr	r2, [pc, #100]	; (80076f8 <HAL_DMA_IRQHandler+0x1ec>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d004      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x194>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a18      	ldr	r2, [pc, #96]	; (80076fc <HAL_DMA_IRQHandler+0x1f0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d12f      	bne.n	8007700 <HAL_DMA_IRQHandler+0x1f4>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bf14      	ite	ne
 80076ae:	2301      	movne	r3, #1
 80076b0:	2300      	moveq	r3, #0
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	e02e      	b.n	8007714 <HAL_DMA_IRQHandler+0x208>
 80076b6:	bf00      	nop
 80076b8:	24000058 	.word	0x24000058
 80076bc:	1b4e81b5 	.word	0x1b4e81b5
 80076c0:	40020010 	.word	0x40020010
 80076c4:	40020028 	.word	0x40020028
 80076c8:	40020040 	.word	0x40020040
 80076cc:	40020058 	.word	0x40020058
 80076d0:	40020070 	.word	0x40020070
 80076d4:	40020088 	.word	0x40020088
 80076d8:	400200a0 	.word	0x400200a0
 80076dc:	400200b8 	.word	0x400200b8
 80076e0:	40020410 	.word	0x40020410
 80076e4:	40020428 	.word	0x40020428
 80076e8:	40020440 	.word	0x40020440
 80076ec:	40020458 	.word	0x40020458
 80076f0:	40020470 	.word	0x40020470
 80076f4:	40020488 	.word	0x40020488
 80076f8:	400204a0 	.word	0x400204a0
 80076fc:	400204b8 	.word	0x400204b8
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf14      	ite	ne
 800770e:	2301      	movne	r3, #1
 8007710:	2300      	moveq	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d015      	beq.n	8007744 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0204 	bic.w	r2, r2, #4
 8007726:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772c:	f003 031f 	and.w	r3, r3, #31
 8007730:	2208      	movs	r2, #8
 8007732:	409a      	lsls	r2, r3
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773c:	f043 0201 	orr.w	r2, r3, #1
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007748:	f003 031f 	and.w	r3, r3, #31
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	fa22 f303 	lsr.w	r3, r2, r3
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d06e      	beq.n	8007838 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a69      	ldr	r2, [pc, #420]	; (8007904 <HAL_DMA_IRQHandler+0x3f8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d04a      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a67      	ldr	r2, [pc, #412]	; (8007908 <HAL_DMA_IRQHandler+0x3fc>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d045      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a66      	ldr	r2, [pc, #408]	; (800790c <HAL_DMA_IRQHandler+0x400>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d040      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a64      	ldr	r2, [pc, #400]	; (8007910 <HAL_DMA_IRQHandler+0x404>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d03b      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a63      	ldr	r2, [pc, #396]	; (8007914 <HAL_DMA_IRQHandler+0x408>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d036      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a61      	ldr	r2, [pc, #388]	; (8007918 <HAL_DMA_IRQHandler+0x40c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d031      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a60      	ldr	r2, [pc, #384]	; (800791c <HAL_DMA_IRQHandler+0x410>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d02c      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a5e      	ldr	r2, [pc, #376]	; (8007920 <HAL_DMA_IRQHandler+0x414>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d027      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a5d      	ldr	r2, [pc, #372]	; (8007924 <HAL_DMA_IRQHandler+0x418>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d022      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a5b      	ldr	r2, [pc, #364]	; (8007928 <HAL_DMA_IRQHandler+0x41c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d01d      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a5a      	ldr	r2, [pc, #360]	; (800792c <HAL_DMA_IRQHandler+0x420>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d018      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a58      	ldr	r2, [pc, #352]	; (8007930 <HAL_DMA_IRQHandler+0x424>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d013      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a57      	ldr	r2, [pc, #348]	; (8007934 <HAL_DMA_IRQHandler+0x428>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00e      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a55      	ldr	r2, [pc, #340]	; (8007938 <HAL_DMA_IRQHandler+0x42c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d009      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a54      	ldr	r2, [pc, #336]	; (800793c <HAL_DMA_IRQHandler+0x430>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d004      	beq.n	80077fa <HAL_DMA_IRQHandler+0x2ee>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a52      	ldr	r2, [pc, #328]	; (8007940 <HAL_DMA_IRQHandler+0x434>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d10a      	bne.n	8007810 <HAL_DMA_IRQHandler+0x304>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007804:	2b00      	cmp	r3, #0
 8007806:	bf14      	ite	ne
 8007808:	2301      	movne	r3, #1
 800780a:	2300      	moveq	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	e003      	b.n	8007818 <HAL_DMA_IRQHandler+0x30c>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00d      	beq.n	8007838 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007820:	f003 031f 	and.w	r3, r3, #31
 8007824:	2201      	movs	r2, #1
 8007826:	409a      	lsls	r2, r3
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007830:	f043 0202 	orr.w	r2, r3, #2
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2204      	movs	r2, #4
 8007842:	409a      	lsls	r2, r3
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	4013      	ands	r3, r2
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 808f 	beq.w	800796c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a2c      	ldr	r2, [pc, #176]	; (8007904 <HAL_DMA_IRQHandler+0x3f8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d04a      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a2a      	ldr	r2, [pc, #168]	; (8007908 <HAL_DMA_IRQHandler+0x3fc>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d045      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a29      	ldr	r2, [pc, #164]	; (800790c <HAL_DMA_IRQHandler+0x400>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d040      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a27      	ldr	r2, [pc, #156]	; (8007910 <HAL_DMA_IRQHandler+0x404>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d03b      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a26      	ldr	r2, [pc, #152]	; (8007914 <HAL_DMA_IRQHandler+0x408>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d036      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a24      	ldr	r2, [pc, #144]	; (8007918 <HAL_DMA_IRQHandler+0x40c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d031      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a23      	ldr	r2, [pc, #140]	; (800791c <HAL_DMA_IRQHandler+0x410>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d02c      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a21      	ldr	r2, [pc, #132]	; (8007920 <HAL_DMA_IRQHandler+0x414>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d027      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a20      	ldr	r2, [pc, #128]	; (8007924 <HAL_DMA_IRQHandler+0x418>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d022      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a1e      	ldr	r2, [pc, #120]	; (8007928 <HAL_DMA_IRQHandler+0x41c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d01d      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a1d      	ldr	r2, [pc, #116]	; (800792c <HAL_DMA_IRQHandler+0x420>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d018      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1b      	ldr	r2, [pc, #108]	; (8007930 <HAL_DMA_IRQHandler+0x424>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d013      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <HAL_DMA_IRQHandler+0x428>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00e      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a18      	ldr	r2, [pc, #96]	; (8007938 <HAL_DMA_IRQHandler+0x42c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d009      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a17      	ldr	r2, [pc, #92]	; (800793c <HAL_DMA_IRQHandler+0x430>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d004      	beq.n	80078ee <HAL_DMA_IRQHandler+0x3e2>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a15      	ldr	r2, [pc, #84]	; (8007940 <HAL_DMA_IRQHandler+0x434>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d12a      	bne.n	8007944 <HAL_DMA_IRQHandler+0x438>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bf14      	ite	ne
 80078fc:	2301      	movne	r3, #1
 80078fe:	2300      	moveq	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	e023      	b.n	800794c <HAL_DMA_IRQHandler+0x440>
 8007904:	40020010 	.word	0x40020010
 8007908:	40020028 	.word	0x40020028
 800790c:	40020040 	.word	0x40020040
 8007910:	40020058 	.word	0x40020058
 8007914:	40020070 	.word	0x40020070
 8007918:	40020088 	.word	0x40020088
 800791c:	400200a0 	.word	0x400200a0
 8007920:	400200b8 	.word	0x400200b8
 8007924:	40020410 	.word	0x40020410
 8007928:	40020428 	.word	0x40020428
 800792c:	40020440 	.word	0x40020440
 8007930:	40020458 	.word	0x40020458
 8007934:	40020470 	.word	0x40020470
 8007938:	40020488 	.word	0x40020488
 800793c:	400204a0 	.word	0x400204a0
 8007940:	400204b8 	.word	0x400204b8
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2300      	movs	r3, #0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00d      	beq.n	800796c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007954:	f003 031f 	and.w	r3, r3, #31
 8007958:	2204      	movs	r2, #4
 800795a:	409a      	lsls	r2, r3
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007964:	f043 0204 	orr.w	r2, r3, #4
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	2210      	movs	r2, #16
 8007976:	409a      	lsls	r2, r3
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	4013      	ands	r3, r2
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80a6 	beq.w	8007ace <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a85      	ldr	r2, [pc, #532]	; (8007b9c <HAL_DMA_IRQHandler+0x690>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d04a      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a83      	ldr	r2, [pc, #524]	; (8007ba0 <HAL_DMA_IRQHandler+0x694>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d045      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a82      	ldr	r2, [pc, #520]	; (8007ba4 <HAL_DMA_IRQHandler+0x698>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d040      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a80      	ldr	r2, [pc, #512]	; (8007ba8 <HAL_DMA_IRQHandler+0x69c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d03b      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a7f      	ldr	r2, [pc, #508]	; (8007bac <HAL_DMA_IRQHandler+0x6a0>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d036      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a7d      	ldr	r2, [pc, #500]	; (8007bb0 <HAL_DMA_IRQHandler+0x6a4>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d031      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a7c      	ldr	r2, [pc, #496]	; (8007bb4 <HAL_DMA_IRQHandler+0x6a8>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d02c      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a7a      	ldr	r2, [pc, #488]	; (8007bb8 <HAL_DMA_IRQHandler+0x6ac>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d027      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a79      	ldr	r2, [pc, #484]	; (8007bbc <HAL_DMA_IRQHandler+0x6b0>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d022      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a77      	ldr	r2, [pc, #476]	; (8007bc0 <HAL_DMA_IRQHandler+0x6b4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01d      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a76      	ldr	r2, [pc, #472]	; (8007bc4 <HAL_DMA_IRQHandler+0x6b8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d018      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a74      	ldr	r2, [pc, #464]	; (8007bc8 <HAL_DMA_IRQHandler+0x6bc>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d013      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a73      	ldr	r2, [pc, #460]	; (8007bcc <HAL_DMA_IRQHandler+0x6c0>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00e      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a71      	ldr	r2, [pc, #452]	; (8007bd0 <HAL_DMA_IRQHandler+0x6c4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d009      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a70      	ldr	r2, [pc, #448]	; (8007bd4 <HAL_DMA_IRQHandler+0x6c8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d004      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x516>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a6e      	ldr	r2, [pc, #440]	; (8007bd8 <HAL_DMA_IRQHandler+0x6cc>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d10a      	bne.n	8007a38 <HAL_DMA_IRQHandler+0x52c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf14      	ite	ne
 8007a30:	2301      	movne	r3, #1
 8007a32:	2300      	moveq	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	e009      	b.n	8007a4c <HAL_DMA_IRQHandler+0x540>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0304 	and.w	r3, r3, #4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bf14      	ite	ne
 8007a46:	2301      	movne	r3, #1
 8007a48:	2300      	moveq	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d03e      	beq.n	8007ace <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	2210      	movs	r2, #16
 8007a5a:	409a      	lsls	r2, r3
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d018      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d108      	bne.n	8007a8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d024      	beq.n	8007ace <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3
 8007a8c:	e01f      	b.n	8007ace <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01b      	beq.n	8007ace <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
 8007a9e:	e016      	b.n	8007ace <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d107      	bne.n	8007abe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0208 	bic.w	r2, r2, #8
 8007abc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad2:	f003 031f 	and.w	r3, r3, #31
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	409a      	lsls	r2, r3
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	4013      	ands	r3, r2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 8110 	beq.w	8007d04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a2c      	ldr	r2, [pc, #176]	; (8007b9c <HAL_DMA_IRQHandler+0x690>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d04a      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a2b      	ldr	r2, [pc, #172]	; (8007ba0 <HAL_DMA_IRQHandler+0x694>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d045      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a29      	ldr	r2, [pc, #164]	; (8007ba4 <HAL_DMA_IRQHandler+0x698>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d040      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a28      	ldr	r2, [pc, #160]	; (8007ba8 <HAL_DMA_IRQHandler+0x69c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d03b      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a26      	ldr	r2, [pc, #152]	; (8007bac <HAL_DMA_IRQHandler+0x6a0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d036      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a25      	ldr	r2, [pc, #148]	; (8007bb0 <HAL_DMA_IRQHandler+0x6a4>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d031      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a23      	ldr	r2, [pc, #140]	; (8007bb4 <HAL_DMA_IRQHandler+0x6a8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d02c      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a22      	ldr	r2, [pc, #136]	; (8007bb8 <HAL_DMA_IRQHandler+0x6ac>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d027      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a20      	ldr	r2, [pc, #128]	; (8007bbc <HAL_DMA_IRQHandler+0x6b0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d022      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1f      	ldr	r2, [pc, #124]	; (8007bc0 <HAL_DMA_IRQHandler+0x6b4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d01d      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <HAL_DMA_IRQHandler+0x6b8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d018      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a1c      	ldr	r2, [pc, #112]	; (8007bc8 <HAL_DMA_IRQHandler+0x6bc>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d013      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1a      	ldr	r2, [pc, #104]	; (8007bcc <HAL_DMA_IRQHandler+0x6c0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00e      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a19      	ldr	r2, [pc, #100]	; (8007bd0 <HAL_DMA_IRQHandler+0x6c4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d009      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a17      	ldr	r2, [pc, #92]	; (8007bd4 <HAL_DMA_IRQHandler+0x6c8>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d004      	beq.n	8007b84 <HAL_DMA_IRQHandler+0x678>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a16      	ldr	r2, [pc, #88]	; (8007bd8 <HAL_DMA_IRQHandler+0x6cc>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d12b      	bne.n	8007bdc <HAL_DMA_IRQHandler+0x6d0>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bf14      	ite	ne
 8007b92:	2301      	movne	r3, #1
 8007b94:	2300      	moveq	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	e02a      	b.n	8007bf0 <HAL_DMA_IRQHandler+0x6e4>
 8007b9a:	bf00      	nop
 8007b9c:	40020010 	.word	0x40020010
 8007ba0:	40020028 	.word	0x40020028
 8007ba4:	40020040 	.word	0x40020040
 8007ba8:	40020058 	.word	0x40020058
 8007bac:	40020070 	.word	0x40020070
 8007bb0:	40020088 	.word	0x40020088
 8007bb4:	400200a0 	.word	0x400200a0
 8007bb8:	400200b8 	.word	0x400200b8
 8007bbc:	40020410 	.word	0x40020410
 8007bc0:	40020428 	.word	0x40020428
 8007bc4:	40020440 	.word	0x40020440
 8007bc8:	40020458 	.word	0x40020458
 8007bcc:	40020470 	.word	0x40020470
 8007bd0:	40020488 	.word	0x40020488
 8007bd4:	400204a0 	.word	0x400204a0
 8007bd8:	400204b8 	.word	0x400204b8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bf14      	ite	ne
 8007bea:	2301      	movne	r3, #1
 8007bec:	2300      	moveq	r3, #0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 8087 	beq.w	8007d04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	2220      	movs	r2, #32
 8007c00:	409a      	lsls	r2, r3
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d139      	bne.n	8007c86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0216 	bic.w	r2, r2, #22
 8007c20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695a      	ldr	r2, [r3, #20]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d103      	bne.n	8007c42 <HAL_DMA_IRQHandler+0x736>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0208 	bic.w	r2, r2, #8
 8007c50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c56:	f003 031f 	and.w	r3, r3, #31
 8007c5a:	223f      	movs	r2, #63	; 0x3f
 8007c5c:	409a      	lsls	r2, r3
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 834a 	beq.w	8008310 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
          }
          return;
 8007c84:	e344      	b.n	8008310 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d018      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d108      	bne.n	8007cb4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d02c      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
 8007cb2:	e027      	b.n	8007d04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d023      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	4798      	blx	r3
 8007cc4:	e01e      	b.n	8007d04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10f      	bne.n	8007cf4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0210 	bic.w	r2, r2, #16
 8007ce2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 8306 	beq.w	800831a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 8088 	beq.w	8007e2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2204      	movs	r2, #4
 8007d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a7a      	ldr	r2, [pc, #488]	; (8007f14 <HAL_DMA_IRQHandler+0xa08>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d04a      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a79      	ldr	r2, [pc, #484]	; (8007f18 <HAL_DMA_IRQHandler+0xa0c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d045      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a77      	ldr	r2, [pc, #476]	; (8007f1c <HAL_DMA_IRQHandler+0xa10>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d040      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a76      	ldr	r2, [pc, #472]	; (8007f20 <HAL_DMA_IRQHandler+0xa14>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d03b      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a74      	ldr	r2, [pc, #464]	; (8007f24 <HAL_DMA_IRQHandler+0xa18>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d036      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a73      	ldr	r2, [pc, #460]	; (8007f28 <HAL_DMA_IRQHandler+0xa1c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d031      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a71      	ldr	r2, [pc, #452]	; (8007f2c <HAL_DMA_IRQHandler+0xa20>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d02c      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a70      	ldr	r2, [pc, #448]	; (8007f30 <HAL_DMA_IRQHandler+0xa24>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d027      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a6e      	ldr	r2, [pc, #440]	; (8007f34 <HAL_DMA_IRQHandler+0xa28>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d022      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a6d      	ldr	r2, [pc, #436]	; (8007f38 <HAL_DMA_IRQHandler+0xa2c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d01d      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a6b      	ldr	r2, [pc, #428]	; (8007f3c <HAL_DMA_IRQHandler+0xa30>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d018      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a6a      	ldr	r2, [pc, #424]	; (8007f40 <HAL_DMA_IRQHandler+0xa34>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d013      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a68      	ldr	r2, [pc, #416]	; (8007f44 <HAL_DMA_IRQHandler+0xa38>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00e      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a67      	ldr	r2, [pc, #412]	; (8007f48 <HAL_DMA_IRQHandler+0xa3c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d009      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a65      	ldr	r2, [pc, #404]	; (8007f4c <HAL_DMA_IRQHandler+0xa40>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d004      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x8b8>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a64      	ldr	r2, [pc, #400]	; (8007f50 <HAL_DMA_IRQHandler+0xa44>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d108      	bne.n	8007dd6 <HAL_DMA_IRQHandler+0x8ca>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0201 	bic.w	r2, r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e007      	b.n	8007de6 <HAL_DMA_IRQHandler+0x8da>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 0201 	bic.w	r2, r2, #1
 8007de4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3301      	adds	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d307      	bcc.n	8007e02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1f2      	bne.n	8007de6 <HAL_DMA_IRQHandler+0x8da>
 8007e00:	e000      	b.n	8007e04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007e02:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d004      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2203      	movs	r2, #3
 8007e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007e1a:	e003      	b.n	8007e24 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8272 	beq.w	800831a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
 8007e3e:	e26c      	b.n	800831a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a43      	ldr	r2, [pc, #268]	; (8007f54 <HAL_DMA_IRQHandler+0xa48>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d022      	beq.n	8007e90 <HAL_DMA_IRQHandler+0x984>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a42      	ldr	r2, [pc, #264]	; (8007f58 <HAL_DMA_IRQHandler+0xa4c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d01d      	beq.n	8007e90 <HAL_DMA_IRQHandler+0x984>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a40      	ldr	r2, [pc, #256]	; (8007f5c <HAL_DMA_IRQHandler+0xa50>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d018      	beq.n	8007e90 <HAL_DMA_IRQHandler+0x984>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a3f      	ldr	r2, [pc, #252]	; (8007f60 <HAL_DMA_IRQHandler+0xa54>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d013      	beq.n	8007e90 <HAL_DMA_IRQHandler+0x984>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a3d      	ldr	r2, [pc, #244]	; (8007f64 <HAL_DMA_IRQHandler+0xa58>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00e      	beq.n	8007e90 <HAL_DMA_IRQHandler+0x984>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a3c      	ldr	r2, [pc, #240]	; (8007f68 <HAL_DMA_IRQHandler+0xa5c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d009      	beq.n	8007e90 <HAL_DMA_IRQHandler+0x984>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a3a      	ldr	r2, [pc, #232]	; (8007f6c <HAL_DMA_IRQHandler+0xa60>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d004      	beq.n	8007e90 <HAL_DMA_IRQHandler+0x984>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a39      	ldr	r2, [pc, #228]	; (8007f70 <HAL_DMA_IRQHandler+0xa64>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d101      	bne.n	8007e94 <HAL_DMA_IRQHandler+0x988>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e000      	b.n	8007e96 <HAL_DMA_IRQHandler+0x98a>
 8007e94:	2300      	movs	r3, #0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 823f 	beq.w	800831a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea8:	f003 031f 	and.w	r3, r3, #31
 8007eac:	2204      	movs	r2, #4
 8007eae:	409a      	lsls	r2, r3
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 80cd 	beq.w	8008054 <HAL_DMA_IRQHandler+0xb48>
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80c7 	beq.w	8008054 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eca:	f003 031f 	and.w	r3, r3, #31
 8007ece:	2204      	movs	r2, #4
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d049      	beq.n	8007f74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 8210 	beq.w	8008314 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007efc:	e20a      	b.n	8008314 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 8206 	beq.w	8008314 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f10:	e200      	b.n	8008314 <HAL_DMA_IRQHandler+0xe08>
 8007f12:	bf00      	nop
 8007f14:	40020010 	.word	0x40020010
 8007f18:	40020028 	.word	0x40020028
 8007f1c:	40020040 	.word	0x40020040
 8007f20:	40020058 	.word	0x40020058
 8007f24:	40020070 	.word	0x40020070
 8007f28:	40020088 	.word	0x40020088
 8007f2c:	400200a0 	.word	0x400200a0
 8007f30:	400200b8 	.word	0x400200b8
 8007f34:	40020410 	.word	0x40020410
 8007f38:	40020428 	.word	0x40020428
 8007f3c:	40020440 	.word	0x40020440
 8007f40:	40020458 	.word	0x40020458
 8007f44:	40020470 	.word	0x40020470
 8007f48:	40020488 	.word	0x40020488
 8007f4c:	400204a0 	.word	0x400204a0
 8007f50:	400204b8 	.word	0x400204b8
 8007f54:	58025408 	.word	0x58025408
 8007f58:	5802541c 	.word	0x5802541c
 8007f5c:	58025430 	.word	0x58025430
 8007f60:	58025444 	.word	0x58025444
 8007f64:	58025458 	.word	0x58025458
 8007f68:	5802546c 	.word	0x5802546c
 8007f6c:	58025480 	.word	0x58025480
 8007f70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d160      	bne.n	8008040 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a7f      	ldr	r2, [pc, #508]	; (8008180 <HAL_DMA_IRQHandler+0xc74>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d04a      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a7d      	ldr	r2, [pc, #500]	; (8008184 <HAL_DMA_IRQHandler+0xc78>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d045      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a7c      	ldr	r2, [pc, #496]	; (8008188 <HAL_DMA_IRQHandler+0xc7c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d040      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a7a      	ldr	r2, [pc, #488]	; (800818c <HAL_DMA_IRQHandler+0xc80>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d03b      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a79      	ldr	r2, [pc, #484]	; (8008190 <HAL_DMA_IRQHandler+0xc84>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d036      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a77      	ldr	r2, [pc, #476]	; (8008194 <HAL_DMA_IRQHandler+0xc88>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d031      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a76      	ldr	r2, [pc, #472]	; (8008198 <HAL_DMA_IRQHandler+0xc8c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d02c      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a74      	ldr	r2, [pc, #464]	; (800819c <HAL_DMA_IRQHandler+0xc90>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d027      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a73      	ldr	r2, [pc, #460]	; (80081a0 <HAL_DMA_IRQHandler+0xc94>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d022      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a71      	ldr	r2, [pc, #452]	; (80081a4 <HAL_DMA_IRQHandler+0xc98>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d01d      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a70      	ldr	r2, [pc, #448]	; (80081a8 <HAL_DMA_IRQHandler+0xc9c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d018      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a6e      	ldr	r2, [pc, #440]	; (80081ac <HAL_DMA_IRQHandler+0xca0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d013      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a6d      	ldr	r2, [pc, #436]	; (80081b0 <HAL_DMA_IRQHandler+0xca4>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00e      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a6b      	ldr	r2, [pc, #428]	; (80081b4 <HAL_DMA_IRQHandler+0xca8>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d009      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a6a      	ldr	r2, [pc, #424]	; (80081b8 <HAL_DMA_IRQHandler+0xcac>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d004      	beq.n	800801e <HAL_DMA_IRQHandler+0xb12>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a68      	ldr	r2, [pc, #416]	; (80081bc <HAL_DMA_IRQHandler+0xcb0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d108      	bne.n	8008030 <HAL_DMA_IRQHandler+0xb24>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0208 	bic.w	r2, r2, #8
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	e007      	b.n	8008040 <HAL_DMA_IRQHandler+0xb34>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0204 	bic.w	r2, r2, #4
 800803e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 8165 	beq.w	8008314 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008052:	e15f      	b.n	8008314 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008058:	f003 031f 	and.w	r3, r3, #31
 800805c:	2202      	movs	r2, #2
 800805e:	409a      	lsls	r2, r3
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	4013      	ands	r3, r2
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 80c5 	beq.w	80081f4 <HAL_DMA_IRQHandler+0xce8>
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 80bf 	beq.w	80081f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	2202      	movs	r2, #2
 8008080:	409a      	lsls	r2, r3
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d018      	beq.n	80080c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d109      	bne.n	80080ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 813a 	beq.w	8008318 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080ac:	e134      	b.n	8008318 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 8130 	beq.w	8008318 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080c0:	e12a      	b.n	8008318 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f040 8089 	bne.w	80081e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a2b      	ldr	r2, [pc, #172]	; (8008180 <HAL_DMA_IRQHandler+0xc74>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d04a      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a29      	ldr	r2, [pc, #164]	; (8008184 <HAL_DMA_IRQHandler+0xc78>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d045      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a28      	ldr	r2, [pc, #160]	; (8008188 <HAL_DMA_IRQHandler+0xc7c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d040      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a26      	ldr	r2, [pc, #152]	; (800818c <HAL_DMA_IRQHandler+0xc80>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d03b      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a25      	ldr	r2, [pc, #148]	; (8008190 <HAL_DMA_IRQHandler+0xc84>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d036      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a23      	ldr	r2, [pc, #140]	; (8008194 <HAL_DMA_IRQHandler+0xc88>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d031      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a22      	ldr	r2, [pc, #136]	; (8008198 <HAL_DMA_IRQHandler+0xc8c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d02c      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a20      	ldr	r2, [pc, #128]	; (800819c <HAL_DMA_IRQHandler+0xc90>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d027      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a1f      	ldr	r2, [pc, #124]	; (80081a0 <HAL_DMA_IRQHandler+0xc94>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d022      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a1d      	ldr	r2, [pc, #116]	; (80081a4 <HAL_DMA_IRQHandler+0xc98>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d01d      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a1c      	ldr	r2, [pc, #112]	; (80081a8 <HAL_DMA_IRQHandler+0xc9c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d018      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1a      	ldr	r2, [pc, #104]	; (80081ac <HAL_DMA_IRQHandler+0xca0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d013      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a19      	ldr	r2, [pc, #100]	; (80081b0 <HAL_DMA_IRQHandler+0xca4>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00e      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a17      	ldr	r2, [pc, #92]	; (80081b4 <HAL_DMA_IRQHandler+0xca8>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d009      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a16      	ldr	r2, [pc, #88]	; (80081b8 <HAL_DMA_IRQHandler+0xcac>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d004      	beq.n	800816e <HAL_DMA_IRQHandler+0xc62>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a14      	ldr	r2, [pc, #80]	; (80081bc <HAL_DMA_IRQHandler+0xcb0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d128      	bne.n	80081c0 <HAL_DMA_IRQHandler+0xcb4>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0214 	bic.w	r2, r2, #20
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	e027      	b.n	80081d0 <HAL_DMA_IRQHandler+0xcc4>
 8008180:	40020010 	.word	0x40020010
 8008184:	40020028 	.word	0x40020028
 8008188:	40020040 	.word	0x40020040
 800818c:	40020058 	.word	0x40020058
 8008190:	40020070 	.word	0x40020070
 8008194:	40020088 	.word	0x40020088
 8008198:	400200a0 	.word	0x400200a0
 800819c:	400200b8 	.word	0x400200b8
 80081a0:	40020410 	.word	0x40020410
 80081a4:	40020428 	.word	0x40020428
 80081a8:	40020440 	.word	0x40020440
 80081ac:	40020458 	.word	0x40020458
 80081b0:	40020470 	.word	0x40020470
 80081b4:	40020488 	.word	0x40020488
 80081b8:	400204a0 	.word	0x400204a0
 80081bc:	400204b8 	.word	0x400204b8
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 020a 	bic.w	r2, r2, #10
 80081ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8097 	beq.w	8008318 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081f2:	e091      	b.n	8008318 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f8:	f003 031f 	and.w	r3, r3, #31
 80081fc:	2208      	movs	r2, #8
 80081fe:	409a      	lsls	r2, r3
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	4013      	ands	r3, r2
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8088 	beq.w	800831a <HAL_DMA_IRQHandler+0xe0e>
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 8082 	beq.w	800831a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a41      	ldr	r2, [pc, #260]	; (8008320 <HAL_DMA_IRQHandler+0xe14>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d04a      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a3f      	ldr	r2, [pc, #252]	; (8008324 <HAL_DMA_IRQHandler+0xe18>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d045      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a3e      	ldr	r2, [pc, #248]	; (8008328 <HAL_DMA_IRQHandler+0xe1c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d040      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a3c      	ldr	r2, [pc, #240]	; (800832c <HAL_DMA_IRQHandler+0xe20>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d03b      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a3b      	ldr	r2, [pc, #236]	; (8008330 <HAL_DMA_IRQHandler+0xe24>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d036      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a39      	ldr	r2, [pc, #228]	; (8008334 <HAL_DMA_IRQHandler+0xe28>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d031      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a38      	ldr	r2, [pc, #224]	; (8008338 <HAL_DMA_IRQHandler+0xe2c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d02c      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a36      	ldr	r2, [pc, #216]	; (800833c <HAL_DMA_IRQHandler+0xe30>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d027      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a35      	ldr	r2, [pc, #212]	; (8008340 <HAL_DMA_IRQHandler+0xe34>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d022      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a33      	ldr	r2, [pc, #204]	; (8008344 <HAL_DMA_IRQHandler+0xe38>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01d      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a32      	ldr	r2, [pc, #200]	; (8008348 <HAL_DMA_IRQHandler+0xe3c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d018      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a30      	ldr	r2, [pc, #192]	; (800834c <HAL_DMA_IRQHandler+0xe40>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a2f      	ldr	r2, [pc, #188]	; (8008350 <HAL_DMA_IRQHandler+0xe44>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00e      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a2d      	ldr	r2, [pc, #180]	; (8008354 <HAL_DMA_IRQHandler+0xe48>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d009      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a2c      	ldr	r2, [pc, #176]	; (8008358 <HAL_DMA_IRQHandler+0xe4c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d004      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xdaa>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a2a      	ldr	r2, [pc, #168]	; (800835c <HAL_DMA_IRQHandler+0xe50>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d108      	bne.n	80082c8 <HAL_DMA_IRQHandler+0xdbc>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 021c 	bic.w	r2, r2, #28
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	e007      	b.n	80082d8 <HAL_DMA_IRQHandler+0xdcc>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 020e 	bic.w	r2, r2, #14
 80082d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082dc:	f003 031f 	and.w	r3, r3, #31
 80082e0:	2201      	movs	r2, #1
 80082e2:	409a      	lsls	r2, r3
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d009      	beq.n	800831a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
 800830e:	e004      	b.n	800831a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008310:	bf00      	nop
 8008312:	e002      	b.n	800831a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008314:	bf00      	nop
 8008316:	e000      	b.n	800831a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008318:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800831a:	3728      	adds	r7, #40	; 0x28
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	40020010 	.word	0x40020010
 8008324:	40020028 	.word	0x40020028
 8008328:	40020040 	.word	0x40020040
 800832c:	40020058 	.word	0x40020058
 8008330:	40020070 	.word	0x40020070
 8008334:	40020088 	.word	0x40020088
 8008338:	400200a0 	.word	0x400200a0
 800833c:	400200b8 	.word	0x400200b8
 8008340:	40020410 	.word	0x40020410
 8008344:	40020428 	.word	0x40020428
 8008348:	40020440 	.word	0x40020440
 800834c:	40020458 	.word	0x40020458
 8008350:	40020470 	.word	0x40020470
 8008354:	40020488 	.word	0x40020488
 8008358:	400204a0 	.word	0x400204a0
 800835c:	400204b8 	.word	0x400204b8

08008360 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008372:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008378:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a7f      	ldr	r2, [pc, #508]	; (800857c <DMA_SetConfig+0x21c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d072      	beq.n	800846a <DMA_SetConfig+0x10a>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a7d      	ldr	r2, [pc, #500]	; (8008580 <DMA_SetConfig+0x220>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d06d      	beq.n	800846a <DMA_SetConfig+0x10a>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a7c      	ldr	r2, [pc, #496]	; (8008584 <DMA_SetConfig+0x224>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d068      	beq.n	800846a <DMA_SetConfig+0x10a>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a7a      	ldr	r2, [pc, #488]	; (8008588 <DMA_SetConfig+0x228>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d063      	beq.n	800846a <DMA_SetConfig+0x10a>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a79      	ldr	r2, [pc, #484]	; (800858c <DMA_SetConfig+0x22c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d05e      	beq.n	800846a <DMA_SetConfig+0x10a>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a77      	ldr	r2, [pc, #476]	; (8008590 <DMA_SetConfig+0x230>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d059      	beq.n	800846a <DMA_SetConfig+0x10a>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a76      	ldr	r2, [pc, #472]	; (8008594 <DMA_SetConfig+0x234>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d054      	beq.n	800846a <DMA_SetConfig+0x10a>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a74      	ldr	r2, [pc, #464]	; (8008598 <DMA_SetConfig+0x238>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d04f      	beq.n	800846a <DMA_SetConfig+0x10a>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a73      	ldr	r2, [pc, #460]	; (800859c <DMA_SetConfig+0x23c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d04a      	beq.n	800846a <DMA_SetConfig+0x10a>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a71      	ldr	r2, [pc, #452]	; (80085a0 <DMA_SetConfig+0x240>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d045      	beq.n	800846a <DMA_SetConfig+0x10a>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a70      	ldr	r2, [pc, #448]	; (80085a4 <DMA_SetConfig+0x244>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d040      	beq.n	800846a <DMA_SetConfig+0x10a>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a6e      	ldr	r2, [pc, #440]	; (80085a8 <DMA_SetConfig+0x248>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d03b      	beq.n	800846a <DMA_SetConfig+0x10a>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a6d      	ldr	r2, [pc, #436]	; (80085ac <DMA_SetConfig+0x24c>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d036      	beq.n	800846a <DMA_SetConfig+0x10a>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a6b      	ldr	r2, [pc, #428]	; (80085b0 <DMA_SetConfig+0x250>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d031      	beq.n	800846a <DMA_SetConfig+0x10a>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a6a      	ldr	r2, [pc, #424]	; (80085b4 <DMA_SetConfig+0x254>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d02c      	beq.n	800846a <DMA_SetConfig+0x10a>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a68      	ldr	r2, [pc, #416]	; (80085b8 <DMA_SetConfig+0x258>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d027      	beq.n	800846a <DMA_SetConfig+0x10a>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a67      	ldr	r2, [pc, #412]	; (80085bc <DMA_SetConfig+0x25c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d022      	beq.n	800846a <DMA_SetConfig+0x10a>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a65      	ldr	r2, [pc, #404]	; (80085c0 <DMA_SetConfig+0x260>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d01d      	beq.n	800846a <DMA_SetConfig+0x10a>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a64      	ldr	r2, [pc, #400]	; (80085c4 <DMA_SetConfig+0x264>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d018      	beq.n	800846a <DMA_SetConfig+0x10a>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a62      	ldr	r2, [pc, #392]	; (80085c8 <DMA_SetConfig+0x268>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <DMA_SetConfig+0x10a>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a61      	ldr	r2, [pc, #388]	; (80085cc <DMA_SetConfig+0x26c>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d00e      	beq.n	800846a <DMA_SetConfig+0x10a>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a5f      	ldr	r2, [pc, #380]	; (80085d0 <DMA_SetConfig+0x270>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d009      	beq.n	800846a <DMA_SetConfig+0x10a>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a5e      	ldr	r2, [pc, #376]	; (80085d4 <DMA_SetConfig+0x274>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d004      	beq.n	800846a <DMA_SetConfig+0x10a>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a5c      	ldr	r2, [pc, #368]	; (80085d8 <DMA_SetConfig+0x278>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d101      	bne.n	800846e <DMA_SetConfig+0x10e>
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <DMA_SetConfig+0x110>
 800846e:	2300      	movs	r3, #0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00d      	beq.n	8008490 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800847c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d004      	beq.n	8008490 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800848e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a39      	ldr	r2, [pc, #228]	; (800857c <DMA_SetConfig+0x21c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d04a      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a38      	ldr	r2, [pc, #224]	; (8008580 <DMA_SetConfig+0x220>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d045      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a36      	ldr	r2, [pc, #216]	; (8008584 <DMA_SetConfig+0x224>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d040      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a35      	ldr	r2, [pc, #212]	; (8008588 <DMA_SetConfig+0x228>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d03b      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a33      	ldr	r2, [pc, #204]	; (800858c <DMA_SetConfig+0x22c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d036      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a32      	ldr	r2, [pc, #200]	; (8008590 <DMA_SetConfig+0x230>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d031      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a30      	ldr	r2, [pc, #192]	; (8008594 <DMA_SetConfig+0x234>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d02c      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a2f      	ldr	r2, [pc, #188]	; (8008598 <DMA_SetConfig+0x238>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d027      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a2d      	ldr	r2, [pc, #180]	; (800859c <DMA_SetConfig+0x23c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d022      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a2c      	ldr	r2, [pc, #176]	; (80085a0 <DMA_SetConfig+0x240>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d01d      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a2a      	ldr	r2, [pc, #168]	; (80085a4 <DMA_SetConfig+0x244>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d018      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a29      	ldr	r2, [pc, #164]	; (80085a8 <DMA_SetConfig+0x248>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d013      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a27      	ldr	r2, [pc, #156]	; (80085ac <DMA_SetConfig+0x24c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d00e      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a26      	ldr	r2, [pc, #152]	; (80085b0 <DMA_SetConfig+0x250>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d009      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a24      	ldr	r2, [pc, #144]	; (80085b4 <DMA_SetConfig+0x254>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d004      	beq.n	8008530 <DMA_SetConfig+0x1d0>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a23      	ldr	r2, [pc, #140]	; (80085b8 <DMA_SetConfig+0x258>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d101      	bne.n	8008534 <DMA_SetConfig+0x1d4>
 8008530:	2301      	movs	r3, #1
 8008532:	e000      	b.n	8008536 <DMA_SetConfig+0x1d6>
 8008534:	2300      	movs	r3, #0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d059      	beq.n	80085ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800853e:	f003 031f 	and.w	r3, r3, #31
 8008542:	223f      	movs	r2, #63	; 0x3f
 8008544:	409a      	lsls	r2, r3
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008558:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d138      	bne.n	80085dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800857a:	e086      	b.n	800868a <DMA_SetConfig+0x32a>
 800857c:	40020010 	.word	0x40020010
 8008580:	40020028 	.word	0x40020028
 8008584:	40020040 	.word	0x40020040
 8008588:	40020058 	.word	0x40020058
 800858c:	40020070 	.word	0x40020070
 8008590:	40020088 	.word	0x40020088
 8008594:	400200a0 	.word	0x400200a0
 8008598:	400200b8 	.word	0x400200b8
 800859c:	40020410 	.word	0x40020410
 80085a0:	40020428 	.word	0x40020428
 80085a4:	40020440 	.word	0x40020440
 80085a8:	40020458 	.word	0x40020458
 80085ac:	40020470 	.word	0x40020470
 80085b0:	40020488 	.word	0x40020488
 80085b4:	400204a0 	.word	0x400204a0
 80085b8:	400204b8 	.word	0x400204b8
 80085bc:	58025408 	.word	0x58025408
 80085c0:	5802541c 	.word	0x5802541c
 80085c4:	58025430 	.word	0x58025430
 80085c8:	58025444 	.word	0x58025444
 80085cc:	58025458 	.word	0x58025458
 80085d0:	5802546c 	.word	0x5802546c
 80085d4:	58025480 	.word	0x58025480
 80085d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	60da      	str	r2, [r3, #12]
}
 80085ec:	e04d      	b.n	800868a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a29      	ldr	r2, [pc, #164]	; (8008698 <DMA_SetConfig+0x338>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d022      	beq.n	800863e <DMA_SetConfig+0x2de>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a27      	ldr	r2, [pc, #156]	; (800869c <DMA_SetConfig+0x33c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d01d      	beq.n	800863e <DMA_SetConfig+0x2de>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a26      	ldr	r2, [pc, #152]	; (80086a0 <DMA_SetConfig+0x340>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d018      	beq.n	800863e <DMA_SetConfig+0x2de>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a24      	ldr	r2, [pc, #144]	; (80086a4 <DMA_SetConfig+0x344>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d013      	beq.n	800863e <DMA_SetConfig+0x2de>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a23      	ldr	r2, [pc, #140]	; (80086a8 <DMA_SetConfig+0x348>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00e      	beq.n	800863e <DMA_SetConfig+0x2de>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a21      	ldr	r2, [pc, #132]	; (80086ac <DMA_SetConfig+0x34c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d009      	beq.n	800863e <DMA_SetConfig+0x2de>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a20      	ldr	r2, [pc, #128]	; (80086b0 <DMA_SetConfig+0x350>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d004      	beq.n	800863e <DMA_SetConfig+0x2de>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a1e      	ldr	r2, [pc, #120]	; (80086b4 <DMA_SetConfig+0x354>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d101      	bne.n	8008642 <DMA_SetConfig+0x2e2>
 800863e:	2301      	movs	r3, #1
 8008640:	e000      	b.n	8008644 <DMA_SetConfig+0x2e4>
 8008642:	2300      	movs	r3, #0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d020      	beq.n	800868a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864c:	f003 031f 	and.w	r3, r3, #31
 8008650:	2201      	movs	r2, #1
 8008652:	409a      	lsls	r2, r3
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	2b40      	cmp	r3, #64	; 0x40
 8008666:	d108      	bne.n	800867a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	60da      	str	r2, [r3, #12]
}
 8008678:	e007      	b.n	800868a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	60da      	str	r2, [r3, #12]
}
 800868a:	bf00      	nop
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	58025408 	.word	0x58025408
 800869c:	5802541c 	.word	0x5802541c
 80086a0:	58025430 	.word	0x58025430
 80086a4:	58025444 	.word	0x58025444
 80086a8:	58025458 	.word	0x58025458
 80086ac:	5802546c 	.word	0x5802546c
 80086b0:	58025480 	.word	0x58025480
 80086b4:	58025494 	.word	0x58025494

080086b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a42      	ldr	r2, [pc, #264]	; (80087d0 <DMA_CalcBaseAndBitshift+0x118>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d04a      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a41      	ldr	r2, [pc, #260]	; (80087d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d045      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a3f      	ldr	r2, [pc, #252]	; (80087d8 <DMA_CalcBaseAndBitshift+0x120>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d040      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a3e      	ldr	r2, [pc, #248]	; (80087dc <DMA_CalcBaseAndBitshift+0x124>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d03b      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a3c      	ldr	r2, [pc, #240]	; (80087e0 <DMA_CalcBaseAndBitshift+0x128>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d036      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a3b      	ldr	r2, [pc, #236]	; (80087e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d031      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a39      	ldr	r2, [pc, #228]	; (80087e8 <DMA_CalcBaseAndBitshift+0x130>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d02c      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a38      	ldr	r2, [pc, #224]	; (80087ec <DMA_CalcBaseAndBitshift+0x134>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d027      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a36      	ldr	r2, [pc, #216]	; (80087f0 <DMA_CalcBaseAndBitshift+0x138>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d022      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a35      	ldr	r2, [pc, #212]	; (80087f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d01d      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a33      	ldr	r2, [pc, #204]	; (80087f8 <DMA_CalcBaseAndBitshift+0x140>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d018      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a32      	ldr	r2, [pc, #200]	; (80087fc <DMA_CalcBaseAndBitshift+0x144>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d013      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a30      	ldr	r2, [pc, #192]	; (8008800 <DMA_CalcBaseAndBitshift+0x148>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d00e      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a2f      	ldr	r2, [pc, #188]	; (8008804 <DMA_CalcBaseAndBitshift+0x14c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d009      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a2d      	ldr	r2, [pc, #180]	; (8008808 <DMA_CalcBaseAndBitshift+0x150>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d004      	beq.n	8008760 <DMA_CalcBaseAndBitshift+0xa8>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a2c      	ldr	r2, [pc, #176]	; (800880c <DMA_CalcBaseAndBitshift+0x154>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d101      	bne.n	8008764 <DMA_CalcBaseAndBitshift+0xac>
 8008760:	2301      	movs	r3, #1
 8008762:	e000      	b.n	8008766 <DMA_CalcBaseAndBitshift+0xae>
 8008764:	2300      	movs	r3, #0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d024      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	b2db      	uxtb	r3, r3
 8008770:	3b10      	subs	r3, #16
 8008772:	4a27      	ldr	r2, [pc, #156]	; (8008810 <DMA_CalcBaseAndBitshift+0x158>)
 8008774:	fba2 2303 	umull	r2, r3, r2, r3
 8008778:	091b      	lsrs	r3, r3, #4
 800877a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	4a24      	ldr	r2, [pc, #144]	; (8008814 <DMA_CalcBaseAndBitshift+0x15c>)
 8008784:	5cd3      	ldrb	r3, [r2, r3]
 8008786:	461a      	mov	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b03      	cmp	r3, #3
 8008790:	d908      	bls.n	80087a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	4b1f      	ldr	r3, [pc, #124]	; (8008818 <DMA_CalcBaseAndBitshift+0x160>)
 800879a:	4013      	ands	r3, r2
 800879c:	1d1a      	adds	r2, r3, #4
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	659a      	str	r2, [r3, #88]	; 0x58
 80087a2:	e00d      	b.n	80087c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	461a      	mov	r2, r3
 80087aa:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <DMA_CalcBaseAndBitshift+0x160>)
 80087ac:	4013      	ands	r3, r2
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6593      	str	r3, [r2, #88]	; 0x58
 80087b2:	e005      	b.n	80087c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	40020010 	.word	0x40020010
 80087d4:	40020028 	.word	0x40020028
 80087d8:	40020040 	.word	0x40020040
 80087dc:	40020058 	.word	0x40020058
 80087e0:	40020070 	.word	0x40020070
 80087e4:	40020088 	.word	0x40020088
 80087e8:	400200a0 	.word	0x400200a0
 80087ec:	400200b8 	.word	0x400200b8
 80087f0:	40020410 	.word	0x40020410
 80087f4:	40020428 	.word	0x40020428
 80087f8:	40020440 	.word	0x40020440
 80087fc:	40020458 	.word	0x40020458
 8008800:	40020470 	.word	0x40020470
 8008804:	40020488 	.word	0x40020488
 8008808:	400204a0 	.word	0x400204a0
 800880c:	400204b8 	.word	0x400204b8
 8008810:	aaaaaaab 	.word	0xaaaaaaab
 8008814:	0800f808 	.word	0x0800f808
 8008818:	fffffc00 	.word	0xfffffc00

0800881c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d120      	bne.n	8008872 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	2b03      	cmp	r3, #3
 8008836:	d858      	bhi.n	80088ea <DMA_CheckFifoParam+0xce>
 8008838:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <DMA_CheckFifoParam+0x24>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	08008851 	.word	0x08008851
 8008844:	08008863 	.word	0x08008863
 8008848:	08008851 	.word	0x08008851
 800884c:	080088eb 	.word	0x080088eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d048      	beq.n	80088ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008860:	e045      	b.n	80088ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008866:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800886a:	d142      	bne.n	80088f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008870:	e03f      	b.n	80088f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887a:	d123      	bne.n	80088c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008880:	2b03      	cmp	r3, #3
 8008882:	d838      	bhi.n	80088f6 <DMA_CheckFifoParam+0xda>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <DMA_CheckFifoParam+0x70>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	0800889d 	.word	0x0800889d
 8008890:	080088a3 	.word	0x080088a3
 8008894:	0800889d 	.word	0x0800889d
 8008898:	080088b5 	.word	0x080088b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
        break;
 80088a0:	e030      	b.n	8008904 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d025      	beq.n	80088fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088b2:	e022      	b.n	80088fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088bc:	d11f      	bne.n	80088fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088c2:	e01c      	b.n	80088fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d902      	bls.n	80088d2 <DMA_CheckFifoParam+0xb6>
 80088cc:	2b03      	cmp	r3, #3
 80088ce:	d003      	beq.n	80088d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80088d0:	e018      	b.n	8008904 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	73fb      	strb	r3, [r7, #15]
        break;
 80088d6:	e015      	b.n	8008904 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00e      	beq.n	8008902 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	73fb      	strb	r3, [r7, #15]
    break;
 80088e8:	e00b      	b.n	8008902 <DMA_CheckFifoParam+0xe6>
        break;
 80088ea:	bf00      	nop
 80088ec:	e00a      	b.n	8008904 <DMA_CheckFifoParam+0xe8>
        break;
 80088ee:	bf00      	nop
 80088f0:	e008      	b.n	8008904 <DMA_CheckFifoParam+0xe8>
        break;
 80088f2:	bf00      	nop
 80088f4:	e006      	b.n	8008904 <DMA_CheckFifoParam+0xe8>
        break;
 80088f6:	bf00      	nop
 80088f8:	e004      	b.n	8008904 <DMA_CheckFifoParam+0xe8>
        break;
 80088fa:	bf00      	nop
 80088fc:	e002      	b.n	8008904 <DMA_CheckFifoParam+0xe8>
        break;
 80088fe:	bf00      	nop
 8008900:	e000      	b.n	8008904 <DMA_CheckFifoParam+0xe8>
    break;
 8008902:	bf00      	nop
    }
  }

  return status;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop

08008914 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a38      	ldr	r2, [pc, #224]	; (8008a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d022      	beq.n	8008972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a36      	ldr	r2, [pc, #216]	; (8008a0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d01d      	beq.n	8008972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a35      	ldr	r2, [pc, #212]	; (8008a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d018      	beq.n	8008972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a33      	ldr	r2, [pc, #204]	; (8008a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d013      	beq.n	8008972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a32      	ldr	r2, [pc, #200]	; (8008a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d00e      	beq.n	8008972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a30      	ldr	r2, [pc, #192]	; (8008a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d009      	beq.n	8008972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a2f      	ldr	r2, [pc, #188]	; (8008a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d004      	beq.n	8008972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a2d      	ldr	r2, [pc, #180]	; (8008a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d101      	bne.n	8008976 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01a      	beq.n	80089b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	3b08      	subs	r3, #8
 8008984:	4a28      	ldr	r2, [pc, #160]	; (8008a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008986:	fba2 2303 	umull	r2, r3, r2, r3
 800898a:	091b      	lsrs	r3, r3, #4
 800898c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	4b26      	ldr	r3, [pc, #152]	; (8008a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	461a      	mov	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a24      	ldr	r2, [pc, #144]	; (8008a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80089a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f003 031f 	and.w	r3, r3, #31
 80089a8:	2201      	movs	r2, #1
 80089aa:	409a      	lsls	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80089b0:	e024      	b.n	80089fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	3b10      	subs	r3, #16
 80089ba:	4a1e      	ldr	r2, [pc, #120]	; (8008a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80089bc:	fba2 2303 	umull	r2, r3, r2, r3
 80089c0:	091b      	lsrs	r3, r3, #4
 80089c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4a1c      	ldr	r2, [pc, #112]	; (8008a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d806      	bhi.n	80089da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4a1b      	ldr	r2, [pc, #108]	; (8008a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d902      	bls.n	80089da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	3308      	adds	r3, #8
 80089d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	4b18      	ldr	r3, [pc, #96]	; (8008a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	461a      	mov	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a16      	ldr	r2, [pc, #88]	; (8008a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80089ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f003 031f 	and.w	r3, r3, #31
 80089f4:	2201      	movs	r2, #1
 80089f6:	409a      	lsls	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80089fc:	bf00      	nop
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	58025408 	.word	0x58025408
 8008a0c:	5802541c 	.word	0x5802541c
 8008a10:	58025430 	.word	0x58025430
 8008a14:	58025444 	.word	0x58025444
 8008a18:	58025458 	.word	0x58025458
 8008a1c:	5802546c 	.word	0x5802546c
 8008a20:	58025480 	.word	0x58025480
 8008a24:	58025494 	.word	0x58025494
 8008a28:	cccccccd 	.word	0xcccccccd
 8008a2c:	16009600 	.word	0x16009600
 8008a30:	58025880 	.word	0x58025880
 8008a34:	aaaaaaab 	.word	0xaaaaaaab
 8008a38:	400204b8 	.word	0x400204b8
 8008a3c:	4002040f 	.word	0x4002040f
 8008a40:	10008200 	.word	0x10008200
 8008a44:	40020880 	.word	0x40020880

08008a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d04a      	beq.n	8008af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d847      	bhi.n	8008af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a25      	ldr	r2, [pc, #148]	; (8008b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d022      	beq.n	8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a24      	ldr	r2, [pc, #144]	; (8008b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d01d      	beq.n	8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a22      	ldr	r2, [pc, #136]	; (8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d018      	beq.n	8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a21      	ldr	r2, [pc, #132]	; (8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d013      	beq.n	8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a1f      	ldr	r2, [pc, #124]	; (8008b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d00e      	beq.n	8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a1e      	ldr	r2, [pc, #120]	; (8008b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d009      	beq.n	8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a1c      	ldr	r2, [pc, #112]	; (8008b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d004      	beq.n	8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a1b      	ldr	r2, [pc, #108]	; (8008b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d101      	bne.n	8008ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e000      	b.n	8008aba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	4b17      	ldr	r3, [pc, #92]	; (8008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a15      	ldr	r2, [pc, #84]	; (8008b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008ad0:	671a      	str	r2, [r3, #112]	; 0x70
 8008ad2:	e009      	b.n	8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4b14      	ldr	r3, [pc, #80]	; (8008b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	461a      	mov	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008ae6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	2201      	movs	r2, #1
 8008aee:	409a      	lsls	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008af4:	bf00      	nop
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	58025408 	.word	0x58025408
 8008b04:	5802541c 	.word	0x5802541c
 8008b08:	58025430 	.word	0x58025430
 8008b0c:	58025444 	.word	0x58025444
 8008b10:	58025458 	.word	0x58025458
 8008b14:	5802546c 	.word	0x5802546c
 8008b18:	58025480 	.word	0x58025480
 8008b1c:	58025494 	.word	0x58025494
 8008b20:	1600963f 	.word	0x1600963f
 8008b24:	58025940 	.word	0x58025940
 8008b28:	1000823f 	.word	0x1000823f
 8008b2c:	40020940 	.word	0x40020940

08008b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b089      	sub	sp, #36	; 0x24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b3e:	4b86      	ldr	r3, [pc, #536]	; (8008d58 <HAL_GPIO_Init+0x228>)
 8008b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b42:	e18c      	b.n	8008e5e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	2101      	movs	r1, #1
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b50:	4013      	ands	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 817e 	beq.w	8008e58 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d005      	beq.n	8008b74 <HAL_GPIO_Init+0x44>
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f003 0303 	and.w	r3, r3, #3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d130      	bne.n	8008bd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	2203      	movs	r2, #3
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	43db      	mvns	r3, r3
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	4013      	ands	r3, r2
 8008b8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	fa02 f303 	lsl.w	r3, r2, r3
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008baa:	2201      	movs	r2, #1
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb2:	43db      	mvns	r3, r3
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	091b      	lsrs	r3, r3, #4
 8008bc0:	f003 0201 	and.w	r2, r3, #1
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d017      	beq.n	8008c12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	2203      	movs	r2, #3
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	43db      	mvns	r3, r3
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	fa02 f303 	lsl.w	r3, r2, r3
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f003 0303 	and.w	r3, r3, #3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d123      	bne.n	8008c66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	08da      	lsrs	r2, r3, #3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3208      	adds	r2, #8
 8008c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	220f      	movs	r2, #15
 8008c36:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3a:	43db      	mvns	r3, r3
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	691a      	ldr	r2, [r3, #16]
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	08da      	lsrs	r2, r3, #3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3208      	adds	r2, #8
 8008c60:	69b9      	ldr	r1, [r7, #24]
 8008c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	2203      	movs	r2, #3
 8008c72:	fa02 f303 	lsl.w	r3, r2, r3
 8008c76:	43db      	mvns	r3, r3
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f003 0203 	and.w	r2, r3, #3
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 80d8 	beq.w	8008e58 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ca8:	4b2c      	ldr	r3, [pc, #176]	; (8008d5c <HAL_GPIO_Init+0x22c>)
 8008caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008cae:	4a2b      	ldr	r2, [pc, #172]	; (8008d5c <HAL_GPIO_Init+0x22c>)
 8008cb0:	f043 0302 	orr.w	r3, r3, #2
 8008cb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008cb8:	4b28      	ldr	r3, [pc, #160]	; (8008d5c <HAL_GPIO_Init+0x22c>)
 8008cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cc6:	4a26      	ldr	r2, [pc, #152]	; (8008d60 <HAL_GPIO_Init+0x230>)
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	089b      	lsrs	r3, r3, #2
 8008ccc:	3302      	adds	r3, #2
 8008cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	220f      	movs	r2, #15
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	43db      	mvns	r3, r3
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a1d      	ldr	r2, [pc, #116]	; (8008d64 <HAL_GPIO_Init+0x234>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d04a      	beq.n	8008d88 <HAL_GPIO_Init+0x258>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a1c      	ldr	r2, [pc, #112]	; (8008d68 <HAL_GPIO_Init+0x238>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d02b      	beq.n	8008d52 <HAL_GPIO_Init+0x222>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a1b      	ldr	r2, [pc, #108]	; (8008d6c <HAL_GPIO_Init+0x23c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d025      	beq.n	8008d4e <HAL_GPIO_Init+0x21e>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a1a      	ldr	r2, [pc, #104]	; (8008d70 <HAL_GPIO_Init+0x240>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d01f      	beq.n	8008d4a <HAL_GPIO_Init+0x21a>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a19      	ldr	r2, [pc, #100]	; (8008d74 <HAL_GPIO_Init+0x244>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d019      	beq.n	8008d46 <HAL_GPIO_Init+0x216>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a18      	ldr	r2, [pc, #96]	; (8008d78 <HAL_GPIO_Init+0x248>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d013      	beq.n	8008d42 <HAL_GPIO_Init+0x212>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a17      	ldr	r2, [pc, #92]	; (8008d7c <HAL_GPIO_Init+0x24c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00d      	beq.n	8008d3e <HAL_GPIO_Init+0x20e>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a16      	ldr	r2, [pc, #88]	; (8008d80 <HAL_GPIO_Init+0x250>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d007      	beq.n	8008d3a <HAL_GPIO_Init+0x20a>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a15      	ldr	r2, [pc, #84]	; (8008d84 <HAL_GPIO_Init+0x254>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d101      	bne.n	8008d36 <HAL_GPIO_Init+0x206>
 8008d32:	2309      	movs	r3, #9
 8008d34:	e029      	b.n	8008d8a <HAL_GPIO_Init+0x25a>
 8008d36:	230a      	movs	r3, #10
 8008d38:	e027      	b.n	8008d8a <HAL_GPIO_Init+0x25a>
 8008d3a:	2307      	movs	r3, #7
 8008d3c:	e025      	b.n	8008d8a <HAL_GPIO_Init+0x25a>
 8008d3e:	2306      	movs	r3, #6
 8008d40:	e023      	b.n	8008d8a <HAL_GPIO_Init+0x25a>
 8008d42:	2305      	movs	r3, #5
 8008d44:	e021      	b.n	8008d8a <HAL_GPIO_Init+0x25a>
 8008d46:	2304      	movs	r3, #4
 8008d48:	e01f      	b.n	8008d8a <HAL_GPIO_Init+0x25a>
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e01d      	b.n	8008d8a <HAL_GPIO_Init+0x25a>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e01b      	b.n	8008d8a <HAL_GPIO_Init+0x25a>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e019      	b.n	8008d8a <HAL_GPIO_Init+0x25a>
 8008d56:	bf00      	nop
 8008d58:	58000080 	.word	0x58000080
 8008d5c:	58024400 	.word	0x58024400
 8008d60:	58000400 	.word	0x58000400
 8008d64:	58020000 	.word	0x58020000
 8008d68:	58020400 	.word	0x58020400
 8008d6c:	58020800 	.word	0x58020800
 8008d70:	58020c00 	.word	0x58020c00
 8008d74:	58021000 	.word	0x58021000
 8008d78:	58021400 	.word	0x58021400
 8008d7c:	58021800 	.word	0x58021800
 8008d80:	58021c00 	.word	0x58021c00
 8008d84:	58022400 	.word	0x58022400
 8008d88:	2300      	movs	r3, #0
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	f002 0203 	and.w	r2, r2, #3
 8008d90:	0092      	lsls	r2, r2, #2
 8008d92:	4093      	lsls	r3, r2
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d9a:	4938      	ldr	r1, [pc, #224]	; (8008e7c <HAL_GPIO_Init+0x34c>)
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	089b      	lsrs	r3, r3, #2
 8008da0:	3302      	adds	r3, #2
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	43db      	mvns	r3, r3
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	4013      	ands	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	43db      	mvns	r3, r3
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	4013      	ands	r3, r2
 8008de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	4013      	ands	r3, r2
 8008e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	43db      	mvns	r3, r3
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	fa22 f303 	lsr.w	r3, r2, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f47f ae6b 	bne.w	8008b44 <HAL_GPIO_Init+0x14>
  }
}
 8008e6e:	bf00      	nop
 8008e70:	bf00      	nop
 8008e72:	3724      	adds	r7, #36	; 0x24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	58000400 	.word	0x58000400

08008e80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008e8e:	4b72      	ldr	r3, [pc, #456]	; (8009058 <HAL_GPIO_DeInit+0x1d8>)
 8008e90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008e92:	e0d3      	b.n	800903c <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008e94:	2201      	movs	r2, #1
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 80c6 	beq.w	8009036 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008eaa:	4a6c      	ldr	r2, [pc, #432]	; (800905c <HAL_GPIO_DeInit+0x1dc>)
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	089b      	lsrs	r3, r3, #2
 8008eb0:	3302      	adds	r3, #2
 8008eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	220f      	movs	r2, #15
 8008ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a64      	ldr	r2, [pc, #400]	; (8009060 <HAL_GPIO_DeInit+0x1e0>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d031      	beq.n	8008f38 <HAL_GPIO_DeInit+0xb8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a63      	ldr	r2, [pc, #396]	; (8009064 <HAL_GPIO_DeInit+0x1e4>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d02b      	beq.n	8008f34 <HAL_GPIO_DeInit+0xb4>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a62      	ldr	r2, [pc, #392]	; (8009068 <HAL_GPIO_DeInit+0x1e8>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d025      	beq.n	8008f30 <HAL_GPIO_DeInit+0xb0>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a61      	ldr	r2, [pc, #388]	; (800906c <HAL_GPIO_DeInit+0x1ec>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d01f      	beq.n	8008f2c <HAL_GPIO_DeInit+0xac>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a60      	ldr	r2, [pc, #384]	; (8009070 <HAL_GPIO_DeInit+0x1f0>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d019      	beq.n	8008f28 <HAL_GPIO_DeInit+0xa8>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a5f      	ldr	r2, [pc, #380]	; (8009074 <HAL_GPIO_DeInit+0x1f4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d013      	beq.n	8008f24 <HAL_GPIO_DeInit+0xa4>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a5e      	ldr	r2, [pc, #376]	; (8009078 <HAL_GPIO_DeInit+0x1f8>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d00d      	beq.n	8008f20 <HAL_GPIO_DeInit+0xa0>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a5d      	ldr	r2, [pc, #372]	; (800907c <HAL_GPIO_DeInit+0x1fc>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d007      	beq.n	8008f1c <HAL_GPIO_DeInit+0x9c>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a5c      	ldr	r2, [pc, #368]	; (8009080 <HAL_GPIO_DeInit+0x200>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d101      	bne.n	8008f18 <HAL_GPIO_DeInit+0x98>
 8008f14:	2309      	movs	r3, #9
 8008f16:	e010      	b.n	8008f3a <HAL_GPIO_DeInit+0xba>
 8008f18:	230a      	movs	r3, #10
 8008f1a:	e00e      	b.n	8008f3a <HAL_GPIO_DeInit+0xba>
 8008f1c:	2307      	movs	r3, #7
 8008f1e:	e00c      	b.n	8008f3a <HAL_GPIO_DeInit+0xba>
 8008f20:	2306      	movs	r3, #6
 8008f22:	e00a      	b.n	8008f3a <HAL_GPIO_DeInit+0xba>
 8008f24:	2305      	movs	r3, #5
 8008f26:	e008      	b.n	8008f3a <HAL_GPIO_DeInit+0xba>
 8008f28:	2304      	movs	r3, #4
 8008f2a:	e006      	b.n	8008f3a <HAL_GPIO_DeInit+0xba>
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e004      	b.n	8008f3a <HAL_GPIO_DeInit+0xba>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e002      	b.n	8008f3a <HAL_GPIO_DeInit+0xba>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <HAL_GPIO_DeInit+0xba>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	f002 0203 	and.w	r2, r2, #3
 8008f40:	0092      	lsls	r2, r2, #2
 8008f42:	4093      	lsls	r3, r2
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d136      	bne.n	8008fb8 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	43db      	mvns	r3, r3
 8008f52:	401a      	ands	r2, r3
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	43db      	mvns	r3, r3
 8008f60:	401a      	ands	r2, r3
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	43db      	mvns	r3, r3
 8008f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f74:	4013      	ands	r3, r2
 8008f76:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f86:	4013      	ands	r3, r2
 8008f88:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f003 0303 	and.w	r3, r3, #3
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	220f      	movs	r2, #15
 8008f94:	fa02 f303 	lsl.w	r3, r2, r3
 8008f98:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008f9a:	4a30      	ldr	r2, [pc, #192]	; (800905c <HAL_GPIO_DeInit+0x1dc>)
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	089b      	lsrs	r3, r3, #2
 8008fa0:	3302      	adds	r3, #2
 8008fa2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	43da      	mvns	r2, r3
 8008faa:	482c      	ldr	r0, [pc, #176]	; (800905c <HAL_GPIO_DeInit+0x1dc>)
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	089b      	lsrs	r3, r3, #2
 8008fb0:	400a      	ands	r2, r1
 8008fb2:	3302      	adds	r3, #2
 8008fb4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	2103      	movs	r1, #3
 8008fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	08da      	lsrs	r2, r3, #3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3208      	adds	r2, #8
 8008fd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	220f      	movs	r2, #15
 8008fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe6:	43db      	mvns	r3, r3
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	08d2      	lsrs	r2, r2, #3
 8008fec:	4019      	ands	r1, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3208      	adds	r2, #8
 8008ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	2103      	movs	r1, #3
 8009000:	fa01 f303 	lsl.w	r3, r1, r3
 8009004:	43db      	mvns	r3, r3
 8009006:	401a      	ands	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	2101      	movs	r1, #1
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	fa01 f303 	lsl.w	r3, r1, r3
 8009018:	43db      	mvns	r3, r3
 800901a:	401a      	ands	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	2103      	movs	r1, #3
 800902a:	fa01 f303 	lsl.w	r3, r1, r3
 800902e:	43db      	mvns	r3, r3
 8009030:	401a      	ands	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	3301      	adds	r3, #1
 800903a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	fa22 f303 	lsr.w	r3, r2, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	f47f af25 	bne.w	8008e94 <HAL_GPIO_DeInit+0x14>
  }
}
 800904a:	bf00      	nop
 800904c:	bf00      	nop
 800904e:	371c      	adds	r7, #28
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	58000080 	.word	0x58000080
 800905c:	58000400 	.word	0x58000400
 8009060:	58020000 	.word	0x58020000
 8009064:	58020400 	.word	0x58020400
 8009068:	58020800 	.word	0x58020800
 800906c:	58020c00 	.word	0x58020c00
 8009070:	58021000 	.word	0x58021000
 8009074:	58021400 	.word	0x58021400
 8009078:	58021800 	.word	0x58021800
 800907c:	58021c00 	.word	0x58021c00
 8009080:	58022400 	.word	0x58022400

08009084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	807b      	strh	r3, [r7, #2]
 8009090:	4613      	mov	r3, r2
 8009092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009094:	787b      	ldrb	r3, [r7, #1]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800909a:	887a      	ldrh	r2, [r7, #2]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80090a0:	e003      	b.n	80090aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090a2:	887b      	ldrh	r3, [r7, #2]
 80090a4:	041a      	lsls	r2, r3, #16
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	619a      	str	r2, [r3, #24]
}
 80090aa:	bf00      	nop
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
	...

080090b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80090c0:	4b19      	ldr	r3, [pc, #100]	; (8009128 <HAL_PWREx_ConfigSupply+0x70>)
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d00a      	beq.n	80090e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80090cc:	4b16      	ldr	r3, [pc, #88]	; (8009128 <HAL_PWREx_ConfigSupply+0x70>)
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f003 0307 	and.w	r3, r3, #7
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d001      	beq.n	80090de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e01f      	b.n	800911e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	e01d      	b.n	800911e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80090e2:	4b11      	ldr	r3, [pc, #68]	; (8009128 <HAL_PWREx_ConfigSupply+0x70>)
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f023 0207 	bic.w	r2, r3, #7
 80090ea:	490f      	ldr	r1, [pc, #60]	; (8009128 <HAL_PWREx_ConfigSupply+0x70>)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80090f2:	f7fc fbdf 	bl	80058b4 <HAL_GetTick>
 80090f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80090f8:	e009      	b.n	800910e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80090fa:	f7fc fbdb 	bl	80058b4 <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009108:	d901      	bls.n	800910e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e007      	b.n	800911e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800910e:	4b06      	ldr	r3, [pc, #24]	; (8009128 <HAL_PWREx_ConfigSupply+0x70>)
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800911a:	d1ee      	bne.n	80090fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	58024800 	.word	0x58024800

0800912c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08c      	sub	sp, #48	; 0x30
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e39d      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 8087 	beq.w	800925a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800914c:	4b88      	ldr	r3, [pc, #544]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009156:	4b86      	ldr	r3, [pc, #536]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	2b10      	cmp	r3, #16
 8009160:	d007      	beq.n	8009172 <HAL_RCC_OscConfig+0x46>
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009164:	2b18      	cmp	r3, #24
 8009166:	d110      	bne.n	800918a <HAL_RCC_OscConfig+0x5e>
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	f003 0303 	and.w	r3, r3, #3
 800916e:	2b02      	cmp	r3, #2
 8009170:	d10b      	bne.n	800918a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009172:	4b7f      	ldr	r3, [pc, #508]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d06c      	beq.n	8009258 <HAL_RCC_OscConfig+0x12c>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d168      	bne.n	8009258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e377      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009192:	d106      	bne.n	80091a2 <HAL_RCC_OscConfig+0x76>
 8009194:	4b76      	ldr	r3, [pc, #472]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a75      	ldr	r2, [pc, #468]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 800919a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	e02e      	b.n	8009200 <HAL_RCC_OscConfig+0xd4>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10c      	bne.n	80091c4 <HAL_RCC_OscConfig+0x98>
 80091aa:	4b71      	ldr	r3, [pc, #452]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a70      	ldr	r2, [pc, #448]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	4b6e      	ldr	r3, [pc, #440]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a6d      	ldr	r2, [pc, #436]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	e01d      	b.n	8009200 <HAL_RCC_OscConfig+0xd4>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091cc:	d10c      	bne.n	80091e8 <HAL_RCC_OscConfig+0xbc>
 80091ce:	4b68      	ldr	r3, [pc, #416]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a67      	ldr	r2, [pc, #412]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	4b65      	ldr	r3, [pc, #404]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a64      	ldr	r2, [pc, #400]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	e00b      	b.n	8009200 <HAL_RCC_OscConfig+0xd4>
 80091e8:	4b61      	ldr	r3, [pc, #388]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a60      	ldr	r2, [pc, #384]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	4b5e      	ldr	r3, [pc, #376]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a5d      	ldr	r2, [pc, #372]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80091fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d013      	beq.n	8009230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009208:	f7fc fb54 	bl	80058b4 <HAL_GetTick>
 800920c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800920e:	e008      	b.n	8009222 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009210:	f7fc fb50 	bl	80058b4 <HAL_GetTick>
 8009214:	4602      	mov	r2, r0
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	2b64      	cmp	r3, #100	; 0x64
 800921c:	d901      	bls.n	8009222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800921e:	2303      	movs	r3, #3
 8009220:	e32b      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009222:	4b53      	ldr	r3, [pc, #332]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0f0      	beq.n	8009210 <HAL_RCC_OscConfig+0xe4>
 800922e:	e014      	b.n	800925a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009230:	f7fc fb40 	bl	80058b4 <HAL_GetTick>
 8009234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009236:	e008      	b.n	800924a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009238:	f7fc fb3c 	bl	80058b4 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b64      	cmp	r3, #100	; 0x64
 8009244:	d901      	bls.n	800924a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e317      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800924a:	4b49      	ldr	r3, [pc, #292]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1f0      	bne.n	8009238 <HAL_RCC_OscConfig+0x10c>
 8009256:	e000      	b.n	800925a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 808c 	beq.w	8009380 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009268:	4b41      	ldr	r3, [pc, #260]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009270:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009272:	4b3f      	ldr	r3, [pc, #252]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 8009274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009276:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d007      	beq.n	800928e <HAL_RCC_OscConfig+0x162>
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	2b18      	cmp	r3, #24
 8009282:	d137      	bne.n	80092f4 <HAL_RCC_OscConfig+0x1c8>
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	f003 0303 	and.w	r3, r3, #3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d132      	bne.n	80092f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800928e:	4b38      	ldr	r3, [pc, #224]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0304 	and.w	r3, r3, #4
 8009296:	2b00      	cmp	r3, #0
 8009298:	d005      	beq.n	80092a6 <HAL_RCC_OscConfig+0x17a>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e2e9      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80092a6:	4b32      	ldr	r3, [pc, #200]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f023 0219 	bic.w	r2, r3, #25
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	492f      	ldr	r1, [pc, #188]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80092b8:	f7fc fafc 	bl	80058b4 <HAL_GetTick>
 80092bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092be:	e008      	b.n	80092d2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092c0:	f7fc faf8 	bl	80058b4 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d901      	bls.n	80092d2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e2d3      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092d2:	4b27      	ldr	r3, [pc, #156]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0304 	and.w	r3, r3, #4
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0f0      	beq.n	80092c0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092de:	4b24      	ldr	r3, [pc, #144]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	061b      	lsls	r3, r3, #24
 80092ec:	4920      	ldr	r1, [pc, #128]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092f2:	e045      	b.n	8009380 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d026      	beq.n	800934a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80092fc:	4b1c      	ldr	r3, [pc, #112]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f023 0219 	bic.w	r2, r3, #25
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	4919      	ldr	r1, [pc, #100]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 800930a:	4313      	orrs	r3, r2
 800930c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800930e:	f7fc fad1 	bl	80058b4 <HAL_GetTick>
 8009312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009314:	e008      	b.n	8009328 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009316:	f7fc facd 	bl	80058b4 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e2a8      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009328:	4b11      	ldr	r3, [pc, #68]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0f0      	beq.n	8009316 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009334:	4b0e      	ldr	r3, [pc, #56]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	061b      	lsls	r3, r3, #24
 8009342:	490b      	ldr	r1, [pc, #44]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 8009344:	4313      	orrs	r3, r2
 8009346:	604b      	str	r3, [r1, #4]
 8009348:	e01a      	b.n	8009380 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a08      	ldr	r2, [pc, #32]	; (8009370 <HAL_RCC_OscConfig+0x244>)
 8009350:	f023 0301 	bic.w	r3, r3, #1
 8009354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009356:	f7fc faad 	bl	80058b4 <HAL_GetTick>
 800935a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800935c:	e00a      	b.n	8009374 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800935e:	f7fc faa9 	bl	80058b4 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	2b02      	cmp	r3, #2
 800936a:	d903      	bls.n	8009374 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800936c:	2303      	movs	r3, #3
 800936e:	e284      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
 8009370:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009374:	4b96      	ldr	r3, [pc, #600]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1ee      	bne.n	800935e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0310 	and.w	r3, r3, #16
 8009388:	2b00      	cmp	r3, #0
 800938a:	d06a      	beq.n	8009462 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800938c:	4b90      	ldr	r3, [pc, #576]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009394:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009396:	4b8e      	ldr	r3, [pc, #568]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 8009398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	2b08      	cmp	r3, #8
 80093a0:	d007      	beq.n	80093b2 <HAL_RCC_OscConfig+0x286>
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b18      	cmp	r3, #24
 80093a6:	d11b      	bne.n	80093e0 <HAL_RCC_OscConfig+0x2b4>
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d116      	bne.n	80093e0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80093b2:	4b87      	ldr	r3, [pc, #540]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d005      	beq.n	80093ca <HAL_RCC_OscConfig+0x29e>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	2b80      	cmp	r3, #128	; 0x80
 80093c4:	d001      	beq.n	80093ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e257      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80093ca:	4b81      	ldr	r3, [pc, #516]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	061b      	lsls	r3, r3, #24
 80093d8:	497d      	ldr	r1, [pc, #500]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80093de:	e040      	b.n	8009462 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d023      	beq.n	8009430 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80093e8:	4b79      	ldr	r3, [pc, #484]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a78      	ldr	r2, [pc, #480]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80093ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f4:	f7fc fa5e 	bl	80058b4 <HAL_GetTick>
 80093f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093fa:	e008      	b.n	800940e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80093fc:	f7fc fa5a 	bl	80058b4 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	2b02      	cmp	r3, #2
 8009408:	d901      	bls.n	800940e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e235      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800940e:	4b70      	ldr	r3, [pc, #448]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0f0      	beq.n	80093fc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800941a:	4b6d      	ldr	r3, [pc, #436]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	061b      	lsls	r3, r3, #24
 8009428:	4969      	ldr	r1, [pc, #420]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 800942a:	4313      	orrs	r3, r2
 800942c:	60cb      	str	r3, [r1, #12]
 800942e:	e018      	b.n	8009462 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009430:	4b67      	ldr	r3, [pc, #412]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a66      	ldr	r2, [pc, #408]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 8009436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800943a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800943c:	f7fc fa3a 	bl	80058b4 <HAL_GetTick>
 8009440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009442:	e008      	b.n	8009456 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009444:	f7fc fa36 	bl	80058b4 <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b02      	cmp	r3, #2
 8009450:	d901      	bls.n	8009456 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e211      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009456:	4b5e      	ldr	r3, [pc, #376]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1f0      	bne.n	8009444 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0308 	and.w	r3, r3, #8
 800946a:	2b00      	cmp	r3, #0
 800946c:	d036      	beq.n	80094dc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d019      	beq.n	80094aa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009476:	4b56      	ldr	r3, [pc, #344]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 8009478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800947a:	4a55      	ldr	r2, [pc, #340]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 800947c:	f043 0301 	orr.w	r3, r3, #1
 8009480:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009482:	f7fc fa17 	bl	80058b4 <HAL_GetTick>
 8009486:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009488:	e008      	b.n	800949c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800948a:	f7fc fa13 	bl	80058b4 <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	2b02      	cmp	r3, #2
 8009496:	d901      	bls.n	800949c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e1ee      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800949c:	4b4c      	ldr	r3, [pc, #304]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 800949e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0f0      	beq.n	800948a <HAL_RCC_OscConfig+0x35e>
 80094a8:	e018      	b.n	80094dc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094aa:	4b49      	ldr	r3, [pc, #292]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80094ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ae:	4a48      	ldr	r2, [pc, #288]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80094b0:	f023 0301 	bic.w	r3, r3, #1
 80094b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094b6:	f7fc f9fd 	bl	80058b4 <HAL_GetTick>
 80094ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80094bc:	e008      	b.n	80094d0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094be:	f7fc f9f9 	bl	80058b4 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d901      	bls.n	80094d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e1d4      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80094d0:	4b3f      	ldr	r3, [pc, #252]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80094d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094d4:	f003 0302 	and.w	r3, r3, #2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1f0      	bne.n	80094be <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0320 	and.w	r3, r3, #32
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d036      	beq.n	8009556 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d019      	beq.n	8009524 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80094f0:	4b37      	ldr	r3, [pc, #220]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a36      	ldr	r2, [pc, #216]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80094f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80094fc:	f7fc f9da 	bl	80058b4 <HAL_GetTick>
 8009500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009502:	e008      	b.n	8009516 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009504:	f7fc f9d6 	bl	80058b4 <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	2b02      	cmp	r3, #2
 8009510:	d901      	bls.n	8009516 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e1b1      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009516:	4b2e      	ldr	r3, [pc, #184]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0f0      	beq.n	8009504 <HAL_RCC_OscConfig+0x3d8>
 8009522:	e018      	b.n	8009556 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009524:	4b2a      	ldr	r3, [pc, #168]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a29      	ldr	r2, [pc, #164]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 800952a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800952e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009530:	f7fc f9c0 	bl	80058b4 <HAL_GetTick>
 8009534:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009536:	e008      	b.n	800954a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009538:	f7fc f9bc 	bl	80058b4 <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	2b02      	cmp	r3, #2
 8009544:	d901      	bls.n	800954a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	e197      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800954a:	4b21      	ldr	r3, [pc, #132]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1f0      	bne.n	8009538 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0304 	and.w	r3, r3, #4
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 8086 	beq.w	8009670 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009564:	4b1b      	ldr	r3, [pc, #108]	; (80095d4 <HAL_RCC_OscConfig+0x4a8>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a1a      	ldr	r2, [pc, #104]	; (80095d4 <HAL_RCC_OscConfig+0x4a8>)
 800956a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800956e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009570:	f7fc f9a0 	bl	80058b4 <HAL_GetTick>
 8009574:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009576:	e008      	b.n	800958a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009578:	f7fc f99c 	bl	80058b4 <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	2b64      	cmp	r3, #100	; 0x64
 8009584:	d901      	bls.n	800958a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e177      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800958a:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <HAL_RCC_OscConfig+0x4a8>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009592:	2b00      	cmp	r3, #0
 8009594:	d0f0      	beq.n	8009578 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d106      	bne.n	80095ac <HAL_RCC_OscConfig+0x480>
 800959e:	4b0c      	ldr	r3, [pc, #48]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80095a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a2:	4a0b      	ldr	r2, [pc, #44]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80095a4:	f043 0301 	orr.w	r3, r3, #1
 80095a8:	6713      	str	r3, [r2, #112]	; 0x70
 80095aa:	e032      	b.n	8009612 <HAL_RCC_OscConfig+0x4e6>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d111      	bne.n	80095d8 <HAL_RCC_OscConfig+0x4ac>
 80095b4:	4b06      	ldr	r3, [pc, #24]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80095b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b8:	4a05      	ldr	r2, [pc, #20]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80095ba:	f023 0301 	bic.w	r3, r3, #1
 80095be:	6713      	str	r3, [r2, #112]	; 0x70
 80095c0:	4b03      	ldr	r3, [pc, #12]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80095c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c4:	4a02      	ldr	r2, [pc, #8]	; (80095d0 <HAL_RCC_OscConfig+0x4a4>)
 80095c6:	f023 0304 	bic.w	r3, r3, #4
 80095ca:	6713      	str	r3, [r2, #112]	; 0x70
 80095cc:	e021      	b.n	8009612 <HAL_RCC_OscConfig+0x4e6>
 80095ce:	bf00      	nop
 80095d0:	58024400 	.word	0x58024400
 80095d4:	58024800 	.word	0x58024800
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	2b05      	cmp	r3, #5
 80095de:	d10c      	bne.n	80095fa <HAL_RCC_OscConfig+0x4ce>
 80095e0:	4b83      	ldr	r3, [pc, #524]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80095e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e4:	4a82      	ldr	r2, [pc, #520]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80095e6:	f043 0304 	orr.w	r3, r3, #4
 80095ea:	6713      	str	r3, [r2, #112]	; 0x70
 80095ec:	4b80      	ldr	r3, [pc, #512]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80095ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f0:	4a7f      	ldr	r2, [pc, #508]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80095f2:	f043 0301 	orr.w	r3, r3, #1
 80095f6:	6713      	str	r3, [r2, #112]	; 0x70
 80095f8:	e00b      	b.n	8009612 <HAL_RCC_OscConfig+0x4e6>
 80095fa:	4b7d      	ldr	r3, [pc, #500]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80095fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fe:	4a7c      	ldr	r2, [pc, #496]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009600:	f023 0301 	bic.w	r3, r3, #1
 8009604:	6713      	str	r3, [r2, #112]	; 0x70
 8009606:	4b7a      	ldr	r3, [pc, #488]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960a:	4a79      	ldr	r2, [pc, #484]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 800960c:	f023 0304 	bic.w	r3, r3, #4
 8009610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d015      	beq.n	8009646 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800961a:	f7fc f94b 	bl	80058b4 <HAL_GetTick>
 800961e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009620:	e00a      	b.n	8009638 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009622:	f7fc f947 	bl	80058b4 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009630:	4293      	cmp	r3, r2
 8009632:	d901      	bls.n	8009638 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e120      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009638:	4b6d      	ldr	r3, [pc, #436]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 800963a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d0ee      	beq.n	8009622 <HAL_RCC_OscConfig+0x4f6>
 8009644:	e014      	b.n	8009670 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009646:	f7fc f935 	bl	80058b4 <HAL_GetTick>
 800964a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800964c:	e00a      	b.n	8009664 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800964e:	f7fc f931 	bl	80058b4 <HAL_GetTick>
 8009652:	4602      	mov	r2, r0
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	f241 3288 	movw	r2, #5000	; 0x1388
 800965c:	4293      	cmp	r3, r2
 800965e:	d901      	bls.n	8009664 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	e10a      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009664:	4b62      	ldr	r3, [pc, #392]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009668:	f003 0302 	and.w	r3, r3, #2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1ee      	bne.n	800964e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 80ff 	beq.w	8009878 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800967a:	4b5d      	ldr	r3, [pc, #372]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009682:	2b18      	cmp	r3, #24
 8009684:	f000 80ba 	beq.w	80097fc <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	2b02      	cmp	r3, #2
 800968e:	f040 8095 	bne.w	80097bc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009692:	4b57      	ldr	r3, [pc, #348]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a56      	ldr	r2, [pc, #344]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800969c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800969e:	f7fc f909 	bl	80058b4 <HAL_GetTick>
 80096a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096a4:	e008      	b.n	80096b8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096a6:	f7fc f905 	bl	80058b4 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d901      	bls.n	80096b8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e0e0      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096b8:	4b4d      	ldr	r3, [pc, #308]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1f0      	bne.n	80096a6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096c4:	4b4a      	ldr	r3, [pc, #296]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80096c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096c8:	4b4a      	ldr	r3, [pc, #296]	; (80097f4 <HAL_RCC_OscConfig+0x6c8>)
 80096ca:	4013      	ands	r3, r2
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80096d4:	0112      	lsls	r2, r2, #4
 80096d6:	430a      	orrs	r2, r1
 80096d8:	4945      	ldr	r1, [pc, #276]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	628b      	str	r3, [r1, #40]	; 0x28
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e2:	3b01      	subs	r3, #1
 80096e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ec:	3b01      	subs	r3, #1
 80096ee:	025b      	lsls	r3, r3, #9
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	431a      	orrs	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f8:	3b01      	subs	r3, #1
 80096fa:	041b      	lsls	r3, r3, #16
 80096fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009700:	431a      	orrs	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009706:	3b01      	subs	r3, #1
 8009708:	061b      	lsls	r3, r3, #24
 800970a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800970e:	4938      	ldr	r1, [pc, #224]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009710:	4313      	orrs	r3, r2
 8009712:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009714:	4b36      	ldr	r3, [pc, #216]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	4a35      	ldr	r2, [pc, #212]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 800971a:	f023 0301 	bic.w	r3, r3, #1
 800971e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009720:	4b33      	ldr	r3, [pc, #204]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009724:	4b34      	ldr	r3, [pc, #208]	; (80097f8 <HAL_RCC_OscConfig+0x6cc>)
 8009726:	4013      	ands	r3, r2
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800972c:	00d2      	lsls	r2, r2, #3
 800972e:	4930      	ldr	r1, [pc, #192]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009730:	4313      	orrs	r3, r2
 8009732:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009734:	4b2e      	ldr	r3, [pc, #184]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	f023 020c 	bic.w	r2, r3, #12
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009740:	492b      	ldr	r1, [pc, #172]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009742:	4313      	orrs	r3, r2
 8009744:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009746:	4b2a      	ldr	r3, [pc, #168]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974a:	f023 0202 	bic.w	r2, r3, #2
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009752:	4927      	ldr	r1, [pc, #156]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009754:	4313      	orrs	r3, r2
 8009756:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009758:	4b25      	ldr	r3, [pc, #148]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	4a24      	ldr	r2, [pc, #144]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 800975e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009764:	4b22      	ldr	r3, [pc, #136]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	4a21      	ldr	r2, [pc, #132]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 800976a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800976e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009770:	4b1f      	ldr	r3, [pc, #124]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009774:	4a1e      	ldr	r2, [pc, #120]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800977a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800977c:	4b1c      	ldr	r3, [pc, #112]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 800977e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009780:	4a1b      	ldr	r2, [pc, #108]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 8009782:	f043 0301 	orr.w	r3, r3, #1
 8009786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009788:	4b19      	ldr	r3, [pc, #100]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a18      	ldr	r2, [pc, #96]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 800978e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009794:	f7fc f88e 	bl	80058b4 <HAL_GetTick>
 8009798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800979a:	e008      	b.n	80097ae <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800979c:	f7fc f88a 	bl	80058b4 <HAL_GetTick>
 80097a0:	4602      	mov	r2, r0
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d901      	bls.n	80097ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e065      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097ae:	4b10      	ldr	r3, [pc, #64]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0f0      	beq.n	800979c <HAL_RCC_OscConfig+0x670>
 80097ba:	e05d      	b.n	8009878 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097bc:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a0b      	ldr	r2, [pc, #44]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80097c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c8:	f7fc f874 	bl	80058b4 <HAL_GetTick>
 80097cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097ce:	e008      	b.n	80097e2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097d0:	f7fc f870 	bl	80058b4 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d901      	bls.n	80097e2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e04b      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097e2:	4b03      	ldr	r3, [pc, #12]	; (80097f0 <HAL_RCC_OscConfig+0x6c4>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1f0      	bne.n	80097d0 <HAL_RCC_OscConfig+0x6a4>
 80097ee:	e043      	b.n	8009878 <HAL_RCC_OscConfig+0x74c>
 80097f0:	58024400 	.word	0x58024400
 80097f4:	fffffc0c 	.word	0xfffffc0c
 80097f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80097fc:	4b21      	ldr	r3, [pc, #132]	; (8009884 <HAL_RCC_OscConfig+0x758>)
 80097fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009800:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009802:	4b20      	ldr	r3, [pc, #128]	; (8009884 <HAL_RCC_OscConfig+0x758>)
 8009804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009806:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2b01      	cmp	r3, #1
 800980e:	d031      	beq.n	8009874 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f003 0203 	and.w	r2, r3, #3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800981a:	429a      	cmp	r2, r3
 800981c:	d12a      	bne.n	8009874 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	091b      	lsrs	r3, r3, #4
 8009822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800982a:	429a      	cmp	r2, r3
 800982c:	d122      	bne.n	8009874 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009838:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800983a:	429a      	cmp	r2, r3
 800983c:	d11a      	bne.n	8009874 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	0a5b      	lsrs	r3, r3, #9
 8009842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800984c:	429a      	cmp	r2, r3
 800984e:	d111      	bne.n	8009874 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	0c1b      	lsrs	r3, r3, #16
 8009854:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800985e:	429a      	cmp	r2, r3
 8009860:	d108      	bne.n	8009874 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	0e1b      	lsrs	r3, r3, #24
 8009866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009870:	429a      	cmp	r2, r3
 8009872:	d001      	beq.n	8009878 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e000      	b.n	800987a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3730      	adds	r7, #48	; 0x30
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	58024400 	.word	0x58024400

08009888 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e19c      	b.n	8009bd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800989c:	4b8a      	ldr	r3, [pc, #552]	; (8009ac8 <HAL_RCC_ClockConfig+0x240>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 030f 	and.w	r3, r3, #15
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d910      	bls.n	80098cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098aa:	4b87      	ldr	r3, [pc, #540]	; (8009ac8 <HAL_RCC_ClockConfig+0x240>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f023 020f 	bic.w	r2, r3, #15
 80098b2:	4985      	ldr	r1, [pc, #532]	; (8009ac8 <HAL_RCC_ClockConfig+0x240>)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098ba:	4b83      	ldr	r3, [pc, #524]	; (8009ac8 <HAL_RCC_ClockConfig+0x240>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 030f 	and.w	r3, r3, #15
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d001      	beq.n	80098cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e184      	b.n	8009bd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d010      	beq.n	80098fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691a      	ldr	r2, [r3, #16]
 80098dc:	4b7b      	ldr	r3, [pc, #492]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d908      	bls.n	80098fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098e8:	4b78      	ldr	r3, [pc, #480]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	4975      	ldr	r1, [pc, #468]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0308 	and.w	r3, r3, #8
 8009902:	2b00      	cmp	r3, #0
 8009904:	d010      	beq.n	8009928 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	695a      	ldr	r2, [r3, #20]
 800990a:	4b70      	ldr	r3, [pc, #448]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009912:	429a      	cmp	r2, r3
 8009914:	d908      	bls.n	8009928 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009916:	4b6d      	ldr	r3, [pc, #436]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	496a      	ldr	r1, [pc, #424]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009924:	4313      	orrs	r3, r2
 8009926:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0310 	and.w	r3, r3, #16
 8009930:	2b00      	cmp	r3, #0
 8009932:	d010      	beq.n	8009956 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	699a      	ldr	r2, [r3, #24]
 8009938:	4b64      	ldr	r3, [pc, #400]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009940:	429a      	cmp	r2, r3
 8009942:	d908      	bls.n	8009956 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009944:	4b61      	ldr	r3, [pc, #388]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	495e      	ldr	r1, [pc, #376]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009952:	4313      	orrs	r3, r2
 8009954:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 0320 	and.w	r3, r3, #32
 800995e:	2b00      	cmp	r3, #0
 8009960:	d010      	beq.n	8009984 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	69da      	ldr	r2, [r3, #28]
 8009966:	4b59      	ldr	r3, [pc, #356]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800996e:	429a      	cmp	r2, r3
 8009970:	d908      	bls.n	8009984 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009972:	4b56      	ldr	r3, [pc, #344]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	4953      	ldr	r1, [pc, #332]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009980:	4313      	orrs	r3, r2
 8009982:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 0302 	and.w	r3, r3, #2
 800998c:	2b00      	cmp	r3, #0
 800998e:	d010      	beq.n	80099b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68da      	ldr	r2, [r3, #12]
 8009994:	4b4d      	ldr	r3, [pc, #308]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	f003 030f 	and.w	r3, r3, #15
 800999c:	429a      	cmp	r2, r3
 800999e:	d908      	bls.n	80099b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099a0:	4b4a      	ldr	r3, [pc, #296]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	f023 020f 	bic.w	r2, r3, #15
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	4947      	ldr	r1, [pc, #284]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 80099ae:	4313      	orrs	r3, r2
 80099b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d055      	beq.n	8009a6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80099be:	4b43      	ldr	r3, [pc, #268]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	4940      	ldr	r1, [pc, #256]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d107      	bne.n	80099e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099d8:	4b3c      	ldr	r3, [pc, #240]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d121      	bne.n	8009a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e0f6      	b.n	8009bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d107      	bne.n	8009a00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099f0:	4b36      	ldr	r3, [pc, #216]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d115      	bne.n	8009a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e0ea      	b.n	8009bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d107      	bne.n	8009a18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a08:	4b30      	ldr	r3, [pc, #192]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d109      	bne.n	8009a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e0de      	b.n	8009bd6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a18:	4b2c      	ldr	r3, [pc, #176]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d101      	bne.n	8009a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e0d6      	b.n	8009bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a28:	4b28      	ldr	r3, [pc, #160]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	f023 0207 	bic.w	r2, r3, #7
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	4925      	ldr	r1, [pc, #148]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a3a:	f7fb ff3b 	bl	80058b4 <HAL_GetTick>
 8009a3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a40:	e00a      	b.n	8009a58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a42:	f7fb ff37 	bl	80058b4 <HAL_GetTick>
 8009a46:	4602      	mov	r2, r0
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d901      	bls.n	8009a58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e0be      	b.n	8009bd6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a58:	4b1c      	ldr	r3, [pc, #112]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	00db      	lsls	r3, r3, #3
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d1eb      	bne.n	8009a42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0302 	and.w	r3, r3, #2
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d010      	beq.n	8009a98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68da      	ldr	r2, [r3, #12]
 8009a7a:	4b14      	ldr	r3, [pc, #80]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	f003 030f 	and.w	r3, r3, #15
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d208      	bcs.n	8009a98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a86:	4b11      	ldr	r3, [pc, #68]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	f023 020f 	bic.w	r2, r3, #15
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	490e      	ldr	r1, [pc, #56]	; (8009acc <HAL_RCC_ClockConfig+0x244>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a98:	4b0b      	ldr	r3, [pc, #44]	; (8009ac8 <HAL_RCC_ClockConfig+0x240>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 030f 	and.w	r3, r3, #15
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d214      	bcs.n	8009ad0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009aa6:	4b08      	ldr	r3, [pc, #32]	; (8009ac8 <HAL_RCC_ClockConfig+0x240>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f023 020f 	bic.w	r2, r3, #15
 8009aae:	4906      	ldr	r1, [pc, #24]	; (8009ac8 <HAL_RCC_ClockConfig+0x240>)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ab6:	4b04      	ldr	r3, [pc, #16]	; (8009ac8 <HAL_RCC_ClockConfig+0x240>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 030f 	and.w	r3, r3, #15
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d005      	beq.n	8009ad0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e086      	b.n	8009bd6 <HAL_RCC_ClockConfig+0x34e>
 8009ac8:	52002000 	.word	0x52002000
 8009acc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d010      	beq.n	8009afe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691a      	ldr	r2, [r3, #16]
 8009ae0:	4b3f      	ldr	r3, [pc, #252]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d208      	bcs.n	8009afe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009aec:	4b3c      	ldr	r3, [pc, #240]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	4939      	ldr	r1, [pc, #228]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 0308 	and.w	r3, r3, #8
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d010      	beq.n	8009b2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	695a      	ldr	r2, [r3, #20]
 8009b0e:	4b34      	ldr	r3, [pc, #208]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d208      	bcs.n	8009b2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b1a:	4b31      	ldr	r3, [pc, #196]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	492e      	ldr	r1, [pc, #184]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0310 	and.w	r3, r3, #16
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d010      	beq.n	8009b5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	699a      	ldr	r2, [r3, #24]
 8009b3c:	4b28      	ldr	r3, [pc, #160]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d208      	bcs.n	8009b5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b48:	4b25      	ldr	r3, [pc, #148]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	4922      	ldr	r1, [pc, #136]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0320 	and.w	r3, r3, #32
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d010      	beq.n	8009b88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	69da      	ldr	r2, [r3, #28]
 8009b6a:	4b1d      	ldr	r3, [pc, #116]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d208      	bcs.n	8009b88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009b76:	4b1a      	ldr	r3, [pc, #104]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	4917      	ldr	r1, [pc, #92]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009b88:	f000 f834 	bl	8009bf4 <HAL_RCC_GetSysClockFreq>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	4b14      	ldr	r3, [pc, #80]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	0a1b      	lsrs	r3, r3, #8
 8009b94:	f003 030f 	and.w	r3, r3, #15
 8009b98:	4912      	ldr	r1, [pc, #72]	; (8009be4 <HAL_RCC_ClockConfig+0x35c>)
 8009b9a:	5ccb      	ldrb	r3, [r1, r3]
 8009b9c:	f003 031f 	and.w	r3, r3, #31
 8009ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ba6:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <HAL_RCC_ClockConfig+0x358>)
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	f003 030f 	and.w	r3, r3, #15
 8009bae:	4a0d      	ldr	r2, [pc, #52]	; (8009be4 <HAL_RCC_ClockConfig+0x35c>)
 8009bb0:	5cd3      	ldrb	r3, [r2, r3]
 8009bb2:	f003 031f 	and.w	r3, r3, #31
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bbc:	4a0a      	ldr	r2, [pc, #40]	; (8009be8 <HAL_RCC_ClockConfig+0x360>)
 8009bbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009bc0:	4a0a      	ldr	r2, [pc, #40]	; (8009bec <HAL_RCC_ClockConfig+0x364>)
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009bc6:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <HAL_RCC_ClockConfig+0x368>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fb fe28 	bl	8005820 <HAL_InitTick>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	58024400 	.word	0x58024400
 8009be4:	0800f7f8 	.word	0x0800f7f8
 8009be8:	2400005c 	.word	0x2400005c
 8009bec:	24000058 	.word	0x24000058
 8009bf0:	24000060 	.word	0x24000060

08009bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b089      	sub	sp, #36	; 0x24
 8009bf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bfa:	4bb3      	ldr	r3, [pc, #716]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c02:	2b18      	cmp	r3, #24
 8009c04:	f200 8155 	bhi.w	8009eb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009c08:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0e:	bf00      	nop
 8009c10:	08009c75 	.word	0x08009c75
 8009c14:	08009eb3 	.word	0x08009eb3
 8009c18:	08009eb3 	.word	0x08009eb3
 8009c1c:	08009eb3 	.word	0x08009eb3
 8009c20:	08009eb3 	.word	0x08009eb3
 8009c24:	08009eb3 	.word	0x08009eb3
 8009c28:	08009eb3 	.word	0x08009eb3
 8009c2c:	08009eb3 	.word	0x08009eb3
 8009c30:	08009c9b 	.word	0x08009c9b
 8009c34:	08009eb3 	.word	0x08009eb3
 8009c38:	08009eb3 	.word	0x08009eb3
 8009c3c:	08009eb3 	.word	0x08009eb3
 8009c40:	08009eb3 	.word	0x08009eb3
 8009c44:	08009eb3 	.word	0x08009eb3
 8009c48:	08009eb3 	.word	0x08009eb3
 8009c4c:	08009eb3 	.word	0x08009eb3
 8009c50:	08009ca1 	.word	0x08009ca1
 8009c54:	08009eb3 	.word	0x08009eb3
 8009c58:	08009eb3 	.word	0x08009eb3
 8009c5c:	08009eb3 	.word	0x08009eb3
 8009c60:	08009eb3 	.word	0x08009eb3
 8009c64:	08009eb3 	.word	0x08009eb3
 8009c68:	08009eb3 	.word	0x08009eb3
 8009c6c:	08009eb3 	.word	0x08009eb3
 8009c70:	08009ca7 	.word	0x08009ca7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c74:	4b94      	ldr	r3, [pc, #592]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d009      	beq.n	8009c94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c80:	4b91      	ldr	r3, [pc, #580]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	08db      	lsrs	r3, r3, #3
 8009c86:	f003 0303 	and.w	r3, r3, #3
 8009c8a:	4a90      	ldr	r2, [pc, #576]	; (8009ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009c92:	e111      	b.n	8009eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009c94:	4b8d      	ldr	r3, [pc, #564]	; (8009ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c96:	61bb      	str	r3, [r7, #24]
    break;
 8009c98:	e10e      	b.n	8009eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009c9a:	4b8d      	ldr	r3, [pc, #564]	; (8009ed0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c9c:	61bb      	str	r3, [r7, #24]
    break;
 8009c9e:	e10b      	b.n	8009eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009ca0:	4b8c      	ldr	r3, [pc, #560]	; (8009ed4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009ca2:	61bb      	str	r3, [r7, #24]
    break;
 8009ca4:	e108      	b.n	8009eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ca6:	4b88      	ldr	r3, [pc, #544]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009cb0:	4b85      	ldr	r3, [pc, #532]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb4:	091b      	lsrs	r3, r3, #4
 8009cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009cbc:	4b82      	ldr	r3, [pc, #520]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009cc6:	4b80      	ldr	r3, [pc, #512]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cca:	08db      	lsrs	r3, r3, #3
 8009ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	fb02 f303 	mul.w	r3, r2, r3
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 80e1 	beq.w	8009eac <HAL_RCC_GetSysClockFreq+0x2b8>
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	f000 8083 	beq.w	8009df8 <HAL_RCC_GetSysClockFreq+0x204>
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	f200 80a1 	bhi.w	8009e3c <HAL_RCC_GetSysClockFreq+0x248>
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <HAL_RCC_GetSysClockFreq+0x114>
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d056      	beq.n	8009db4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009d06:	e099      	b.n	8009e3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d08:	4b6f      	ldr	r3, [pc, #444]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d02d      	beq.n	8009d70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d14:	4b6c      	ldr	r3, [pc, #432]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	08db      	lsrs	r3, r3, #3
 8009d1a:	f003 0303 	and.w	r3, r3, #3
 8009d1e:	4a6b      	ldr	r2, [pc, #428]	; (8009ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d20:	fa22 f303 	lsr.w	r3, r2, r3
 8009d24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	ee07 3a90 	vmov	s15, r3
 8009d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3e:	4b62      	ldr	r3, [pc, #392]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d52:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009d6e:	e087      	b.n	8009e80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009edc <HAL_RCC_GetSysClockFreq+0x2e8>
 8009d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d82:	4b51      	ldr	r3, [pc, #324]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d96:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009db2:	e065      	b.n	8009e80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009ee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc6:	4b40      	ldr	r3, [pc, #256]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009dda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009df6:	e043      	b.n	8009e80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	ee07 3a90 	vmov	s15, r3
 8009dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009ee4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0a:	4b2f      	ldr	r3, [pc, #188]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e3a:	e021      	b.n	8009e80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009ee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4e:	4b1e      	ldr	r3, [pc, #120]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009e80:	4b11      	ldr	r3, [pc, #68]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e84:	0a5b      	lsrs	r3, r3, #9
 8009e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	ee07 3a90 	vmov	s15, r3
 8009e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ea4:	ee17 3a90 	vmov	r3, s15
 8009ea8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009eaa:	e005      	b.n	8009eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009eac:	2300      	movs	r3, #0
 8009eae:	61bb      	str	r3, [r7, #24]
    break;
 8009eb0:	e002      	b.n	8009eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009eb2:	4b07      	ldr	r3, [pc, #28]	; (8009ed0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009eb4:	61bb      	str	r3, [r7, #24]
    break;
 8009eb6:	bf00      	nop
  }

  return sysclockfreq;
 8009eb8:	69bb      	ldr	r3, [r7, #24]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3724      	adds	r7, #36	; 0x24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	58024400 	.word	0x58024400
 8009ecc:	03d09000 	.word	0x03d09000
 8009ed0:	003d0900 	.word	0x003d0900
 8009ed4:	017d7840 	.word	0x017d7840
 8009ed8:	46000000 	.word	0x46000000
 8009edc:	4c742400 	.word	0x4c742400
 8009ee0:	4a742400 	.word	0x4a742400
 8009ee4:	4bbebc20 	.word	0x4bbebc20

08009ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009eee:	f7ff fe81 	bl	8009bf4 <HAL_RCC_GetSysClockFreq>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <HAL_RCC_GetHCLKFreq+0x50>)
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	0a1b      	lsrs	r3, r3, #8
 8009efa:	f003 030f 	and.w	r3, r3, #15
 8009efe:	490f      	ldr	r1, [pc, #60]	; (8009f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8009f00:	5ccb      	ldrb	r3, [r1, r3]
 8009f02:	f003 031f 	and.w	r3, r3, #31
 8009f06:	fa22 f303 	lsr.w	r3, r2, r3
 8009f0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <HAL_RCC_GetHCLKFreq+0x50>)
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	f003 030f 	and.w	r3, r3, #15
 8009f14:	4a09      	ldr	r2, [pc, #36]	; (8009f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8009f16:	5cd3      	ldrb	r3, [r2, r3]
 8009f18:	f003 031f 	and.w	r3, r3, #31
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f22:	4a07      	ldr	r2, [pc, #28]	; (8009f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8009f24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f26:	4a07      	ldr	r2, [pc, #28]	; (8009f44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009f2c:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	58024400 	.word	0x58024400
 8009f3c:	0800f7f8 	.word	0x0800f7f8
 8009f40:	2400005c 	.word	0x2400005c
 8009f44:	24000058 	.word	0x24000058

08009f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009f4c:	f7ff ffcc 	bl	8009ee8 <HAL_RCC_GetHCLKFreq>
 8009f50:	4602      	mov	r2, r0
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	091b      	lsrs	r3, r3, #4
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	4904      	ldr	r1, [pc, #16]	; (8009f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009f5e:	5ccb      	ldrb	r3, [r1, r3]
 8009f60:	f003 031f 	and.w	r3, r3, #31
 8009f64:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	0800f7f8 	.word	0x0800f7f8

08009f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009f78:	f7ff ffb6 	bl	8009ee8 <HAL_RCC_GetHCLKFreq>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	0a1b      	lsrs	r3, r3, #8
 8009f84:	f003 0307 	and.w	r3, r3, #7
 8009f88:	4904      	ldr	r1, [pc, #16]	; (8009f9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009f8a:	5ccb      	ldrb	r3, [r1, r3]
 8009f8c:	f003 031f 	and.w	r3, r3, #31
 8009f90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	58024400 	.word	0x58024400
 8009f9c:	0800f7f8 	.word	0x0800f7f8

08009fa0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009fa8:	2300      	movs	r3, #0
 8009faa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009fac:	2300      	movs	r3, #0
 8009fae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d03f      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fc4:	d02a      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009fc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fca:	d824      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fd0:	d018      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fd6:	d81e      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d003      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fe0:	d007      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009fe2:	e018      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe4:	4ba4      	ldr	r3, [pc, #656]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	4aa3      	ldr	r2, [pc, #652]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ff0:	e015      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	2102      	movs	r1, #2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f001 f989 	bl	800b310 <RCCEx_PLL2_Config>
 8009ffe:	4603      	mov	r3, r0
 800a000:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a002:	e00c      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3324      	adds	r3, #36	; 0x24
 800a008:	2102      	movs	r1, #2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f001 fa32 	bl	800b474 <RCCEx_PLL3_Config>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a014:	e003      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	75fb      	strb	r3, [r7, #23]
      break;
 800a01a:	e000      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a01c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d109      	bne.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a024:	4b94      	ldr	r3, [pc, #592]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a030:	4991      	ldr	r1, [pc, #580]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a032:	4313      	orrs	r3, r2
 800a034:	650b      	str	r3, [r1, #80]	; 0x50
 800a036:	e001      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a044:	2b00      	cmp	r3, #0
 800a046:	d03d      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	d826      	bhi.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a050:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a056:	bf00      	nop
 800a058:	0800a06d 	.word	0x0800a06d
 800a05c:	0800a07b 	.word	0x0800a07b
 800a060:	0800a08d 	.word	0x0800a08d
 800a064:	0800a0a5 	.word	0x0800a0a5
 800a068:	0800a0a5 	.word	0x0800a0a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a06c:	4b82      	ldr	r3, [pc, #520]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a070:	4a81      	ldr	r2, [pc, #516]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a078:	e015      	b.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3304      	adds	r3, #4
 800a07e:	2100      	movs	r1, #0
 800a080:	4618      	mov	r0, r3
 800a082:	f001 f945 	bl	800b310 <RCCEx_PLL2_Config>
 800a086:	4603      	mov	r3, r0
 800a088:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a08a:	e00c      	b.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	3324      	adds	r3, #36	; 0x24
 800a090:	2100      	movs	r1, #0
 800a092:	4618      	mov	r0, r3
 800a094:	f001 f9ee 	bl	800b474 <RCCEx_PLL3_Config>
 800a098:	4603      	mov	r3, r0
 800a09a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a09c:	e003      	b.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a2:	e000      	b.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a0a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d109      	bne.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0ac:	4b72      	ldr	r3, [pc, #456]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b0:	f023 0207 	bic.w	r2, r3, #7
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b8:	496f      	ldr	r1, [pc, #444]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	650b      	str	r3, [r1, #80]	; 0x50
 800a0be:	e001      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
 800a0c2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d051      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0d6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a0da:	d036      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a0dc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a0e0:	d830      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a0e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0e6:	d032      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a0e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0ec:	d82a      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a0ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a0f2:	d02e      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800a0f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a0f8:	d824      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a0fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0fe:	d018      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a104:	d81e      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a106:	2b00      	cmp	r3, #0
 800a108:	d003      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a10a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a10e:	d007      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a110:	e018      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a112:	4b59      	ldr	r3, [pc, #356]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a116:	4a58      	ldr	r2, [pc, #352]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a11c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a11e:	e019      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3304      	adds	r3, #4
 800a124:	2100      	movs	r1, #0
 800a126:	4618      	mov	r0, r3
 800a128:	f001 f8f2 	bl	800b310 <RCCEx_PLL2_Config>
 800a12c:	4603      	mov	r3, r0
 800a12e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a130:	e010      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	3324      	adds	r3, #36	; 0x24
 800a136:	2100      	movs	r1, #0
 800a138:	4618      	mov	r0, r3
 800a13a:	f001 f99b 	bl	800b474 <RCCEx_PLL3_Config>
 800a13e:	4603      	mov	r3, r0
 800a140:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a142:	e007      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	75fb      	strb	r3, [r7, #23]
      break;
 800a148:	e004      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a14a:	bf00      	nop
 800a14c:	e002      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a14e:	bf00      	nop
 800a150:	e000      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a152:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d10a      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a15a:	4b47      	ldr	r3, [pc, #284]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a15c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a15e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a168:	4943      	ldr	r1, [pc, #268]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	658b      	str	r3, [r1, #88]	; 0x58
 800a16e:	e001      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d051      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a186:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a18a:	d036      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800a18c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a190:	d830      	bhi.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a196:	d032      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800a198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a19c:	d82a      	bhi.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a19e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a1a2:	d02e      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800a1a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a1a8:	d824      	bhi.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a1aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1ae:	d018      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800a1b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1b4:	d81e      	bhi.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800a1ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1be:	d007      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a1c0:	e018      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1c2:	4b2d      	ldr	r3, [pc, #180]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c6:	4a2c      	ldr	r2, [pc, #176]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a1c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1ce:	e019      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f001 f89a 	bl	800b310 <RCCEx_PLL2_Config>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a1e0:	e010      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3324      	adds	r3, #36	; 0x24
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f001 f943 	bl	800b474 <RCCEx_PLL3_Config>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1f2:	e007      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a1f8:	e004      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a1fa:	bf00      	nop
 800a1fc:	e002      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a1fe:	bf00      	nop
 800a200:	e000      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a202:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a204:	7dfb      	ldrb	r3, [r7, #23]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a20a:	4b1b      	ldr	r3, [pc, #108]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a218:	4917      	ldr	r1, [pc, #92]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	658b      	str	r3, [r1, #88]	; 0x58
 800a21e:	e001      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d035      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a234:	2b30      	cmp	r3, #48	; 0x30
 800a236:	d01c      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a238:	2b30      	cmp	r3, #48	; 0x30
 800a23a:	d817      	bhi.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a23c:	2b20      	cmp	r3, #32
 800a23e:	d00c      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a240:	2b20      	cmp	r3, #32
 800a242:	d813      	bhi.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a244:	2b00      	cmp	r3, #0
 800a246:	d019      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a248:	2b10      	cmp	r3, #16
 800a24a:	d10f      	bne.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a24c:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a250:	4a09      	ldr	r2, [pc, #36]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a258:	e011      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3304      	adds	r3, #4
 800a25e:	2102      	movs	r1, #2
 800a260:	4618      	mov	r0, r3
 800a262:	f001 f855 	bl	800b310 <RCCEx_PLL2_Config>
 800a266:	4603      	mov	r3, r0
 800a268:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a26a:	e008      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	75fb      	strb	r3, [r7, #23]
      break;
 800a270:	e005      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800a272:	bf00      	nop
 800a274:	e003      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a276:	bf00      	nop
 800a278:	58024400 	.word	0x58024400
      break;
 800a27c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a27e:	7dfb      	ldrb	r3, [r7, #23]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d109      	bne.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a284:	4ba3      	ldr	r3, [pc, #652]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a288:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a290:	49a0      	ldr	r1, [pc, #640]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a292:	4313      	orrs	r3, r2
 800a294:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a296:	e001      	b.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d047      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2b0:	d030      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800a2b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2b6:	d82a      	bhi.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a2b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2bc:	d02c      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a2be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2c2:	d824      	bhi.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a2c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2c8:	d018      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a2ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ce:	d81e      	bhi.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d003      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a2d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d8:	d007      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a2da:	e018      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2dc:	4b8d      	ldr	r3, [pc, #564]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	4a8c      	ldr	r2, [pc, #560]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a2e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a2e8:	e017      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f001 f80d 	bl	800b310 <RCCEx_PLL2_Config>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a2fa:	e00e      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3324      	adds	r3, #36	; 0x24
 800a300:	2100      	movs	r1, #0
 800a302:	4618      	mov	r0, r3
 800a304:	f001 f8b6 	bl	800b474 <RCCEx_PLL3_Config>
 800a308:	4603      	mov	r3, r0
 800a30a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a30c:	e005      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	75fb      	strb	r3, [r7, #23]
      break;
 800a312:	e002      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a314:	bf00      	nop
 800a316:	e000      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d109      	bne.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a320:	4b7c      	ldr	r3, [pc, #496]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a324:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a32c:	4979      	ldr	r1, [pc, #484]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	650b      	str	r3, [r1, #80]	; 0x50
 800a332:	e001      	b.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d049      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a34c:	d02e      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a34e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a352:	d828      	bhi.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a354:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a358:	d02a      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a35a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a35e:	d822      	bhi.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a360:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a364:	d026      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a366:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a36a:	d81c      	bhi.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a36c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a370:	d010      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a376:	d816      	bhi.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01d      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a37c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a380:	d111      	bne.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3304      	adds	r3, #4
 800a386:	2101      	movs	r1, #1
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 ffc1 	bl	800b310 <RCCEx_PLL2_Config>
 800a38e:	4603      	mov	r3, r0
 800a390:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a392:	e012      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3324      	adds	r3, #36	; 0x24
 800a398:	2101      	movs	r1, #1
 800a39a:	4618      	mov	r0, r3
 800a39c:	f001 f86a 	bl	800b474 <RCCEx_PLL3_Config>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a3a4:	e009      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a3aa:	e006      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a3ac:	bf00      	nop
 800a3ae:	e004      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a3b0:	bf00      	nop
 800a3b2:	e002      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a3b4:	bf00      	nop
 800a3b6:	e000      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a3b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d109      	bne.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3c0:	4b54      	ldr	r3, [pc, #336]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a3c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3cc:	4951      	ldr	r1, [pc, #324]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	650b      	str	r3, [r1, #80]	; 0x50
 800a3d2:	e001      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d04b      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a3ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3ee:	d02e      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a3f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3f4:	d828      	bhi.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3fa:	d02a      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a3fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a400:	d822      	bhi.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a402:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a406:	d026      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a408:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a40c:	d81c      	bhi.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a40e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a412:	d010      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a418:	d816      	bhi.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d01d      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a41e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a422:	d111      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3304      	adds	r3, #4
 800a428:	2101      	movs	r1, #1
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 ff70 	bl	800b310 <RCCEx_PLL2_Config>
 800a430:	4603      	mov	r3, r0
 800a432:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a434:	e012      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	3324      	adds	r3, #36	; 0x24
 800a43a:	2101      	movs	r1, #1
 800a43c:	4618      	mov	r0, r3
 800a43e:	f001 f819 	bl	800b474 <RCCEx_PLL3_Config>
 800a442:	4603      	mov	r3, r0
 800a444:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a446:	e009      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	75fb      	strb	r3, [r7, #23]
      break;
 800a44c:	e006      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a44e:	bf00      	nop
 800a450:	e004      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a452:	bf00      	nop
 800a454:	e002      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a456:	bf00      	nop
 800a458:	e000      	b.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a45a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10a      	bne.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a462:	4b2c      	ldr	r3, [pc, #176]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a466:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a470:	4928      	ldr	r1, [pc, #160]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a472:	4313      	orrs	r3, r2
 800a474:	658b      	str	r3, [r1, #88]	; 0x58
 800a476:	e001      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d02f      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a48c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a490:	d00e      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a496:	d814      	bhi.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d015      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a49c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4a0:	d10f      	bne.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4a2:	4b1c      	ldr	r3, [pc, #112]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a6:	4a1b      	ldr	r2, [pc, #108]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a4ae:	e00c      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 ff2a 	bl	800b310 <RCCEx_PLL2_Config>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a4c0:	e003      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a4c6:	e000      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a4c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4ca:	7dfb      	ldrb	r3, [r7, #23]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d109      	bne.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a4d0:	4b10      	ldr	r3, [pc, #64]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4dc:	490d      	ldr	r1, [pc, #52]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	650b      	str	r3, [r1, #80]	; 0x50
 800a4e2:	e001      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e4:	7dfb      	ldrb	r3, [r7, #23]
 800a4e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d034      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d81d      	bhi.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a4fc:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a502:	bf00      	nop
 800a504:	0800a53f 	.word	0x0800a53f
 800a508:	0800a519 	.word	0x0800a519
 800a50c:	0800a527 	.word	0x0800a527
 800a510:	0800a53f 	.word	0x0800a53f
 800a514:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a518:	4bb1      	ldr	r3, [pc, #708]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	4ab0      	ldr	r2, [pc, #704]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a51e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a522:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a524:	e00c      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	3304      	adds	r3, #4
 800a52a:	2102      	movs	r1, #2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 feef 	bl	800b310 <RCCEx_PLL2_Config>
 800a532:	4603      	mov	r3, r0
 800a534:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a536:	e003      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	75fb      	strb	r3, [r7, #23]
      break;
 800a53c:	e000      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a53e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a540:	7dfb      	ldrb	r3, [r7, #23]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d109      	bne.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a546:	4ba6      	ldr	r3, [pc, #664]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a54a:	f023 0203 	bic.w	r2, r3, #3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a552:	49a3      	ldr	r1, [pc, #652]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a554:	4313      	orrs	r3, r2
 800a556:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a558:	e001      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 8086 	beq.w	800a678 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a56c:	4b9d      	ldr	r3, [pc, #628]	; (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a9c      	ldr	r2, [pc, #624]	; (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a576:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a578:	f7fb f99c 	bl	80058b4 <HAL_GetTick>
 800a57c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a57e:	e009      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a580:	f7fb f998 	bl	80058b4 <HAL_GetTick>
 800a584:	4602      	mov	r2, r0
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	2b64      	cmp	r3, #100	; 0x64
 800a58c:	d902      	bls.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	75fb      	strb	r3, [r7, #23]
        break;
 800a592:	e005      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a594:	4b93      	ldr	r3, [pc, #588]	; (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0ef      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a5a0:	7dfb      	ldrb	r3, [r7, #23]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d166      	bne.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a5a6:	4b8e      	ldr	r3, [pc, #568]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a5a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a5b0:	4053      	eors	r3, r2
 800a5b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d013      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5ba:	4b89      	ldr	r3, [pc, #548]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5c4:	4b86      	ldr	r3, [pc, #536]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c8:	4a85      	ldr	r2, [pc, #532]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a5ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5d0:	4b83      	ldr	r3, [pc, #524]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d4:	4a82      	ldr	r2, [pc, #520]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a5d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a5dc:	4a80      	ldr	r2, [pc, #512]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a5e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ec:	d115      	bne.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5ee:	f7fb f961 	bl	80058b4 <HAL_GetTick>
 800a5f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5f4:	e00b      	b.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5f6:	f7fb f95d 	bl	80058b4 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	f241 3288 	movw	r2, #5000	; 0x1388
 800a604:	4293      	cmp	r3, r2
 800a606:	d902      	bls.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	75fb      	strb	r3, [r7, #23]
            break;
 800a60c:	e005      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a60e:	4b74      	ldr	r3, [pc, #464]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0ed      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d126      	bne.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a62a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a62e:	d10d      	bne.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a630:	4b6b      	ldr	r3, [pc, #428]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a63e:	0919      	lsrs	r1, r3, #4
 800a640:	4b69      	ldr	r3, [pc, #420]	; (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a642:	400b      	ands	r3, r1
 800a644:	4966      	ldr	r1, [pc, #408]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a646:	4313      	orrs	r3, r2
 800a648:	610b      	str	r3, [r1, #16]
 800a64a:	e005      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a64c:	4b64      	ldr	r3, [pc, #400]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	4a63      	ldr	r2, [pc, #396]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a652:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a656:	6113      	str	r3, [r2, #16]
 800a658:	4b61      	ldr	r3, [pc, #388]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a65a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a666:	495e      	ldr	r1, [pc, #376]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a668:	4313      	orrs	r3, r2
 800a66a:	670b      	str	r3, [r1, #112]	; 0x70
 800a66c:	e004      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
 800a670:	75bb      	strb	r3, [r7, #22]
 800a672:	e001      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	2b00      	cmp	r3, #0
 800a682:	d07e      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a688:	2b28      	cmp	r3, #40	; 0x28
 800a68a:	d867      	bhi.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a68c:	a201      	add	r2, pc, #4	; (adr r2, 800a694 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a692:	bf00      	nop
 800a694:	0800a763 	.word	0x0800a763
 800a698:	0800a75d 	.word	0x0800a75d
 800a69c:	0800a75d 	.word	0x0800a75d
 800a6a0:	0800a75d 	.word	0x0800a75d
 800a6a4:	0800a75d 	.word	0x0800a75d
 800a6a8:	0800a75d 	.word	0x0800a75d
 800a6ac:	0800a75d 	.word	0x0800a75d
 800a6b0:	0800a75d 	.word	0x0800a75d
 800a6b4:	0800a739 	.word	0x0800a739
 800a6b8:	0800a75d 	.word	0x0800a75d
 800a6bc:	0800a75d 	.word	0x0800a75d
 800a6c0:	0800a75d 	.word	0x0800a75d
 800a6c4:	0800a75d 	.word	0x0800a75d
 800a6c8:	0800a75d 	.word	0x0800a75d
 800a6cc:	0800a75d 	.word	0x0800a75d
 800a6d0:	0800a75d 	.word	0x0800a75d
 800a6d4:	0800a74b 	.word	0x0800a74b
 800a6d8:	0800a75d 	.word	0x0800a75d
 800a6dc:	0800a75d 	.word	0x0800a75d
 800a6e0:	0800a75d 	.word	0x0800a75d
 800a6e4:	0800a75d 	.word	0x0800a75d
 800a6e8:	0800a75d 	.word	0x0800a75d
 800a6ec:	0800a75d 	.word	0x0800a75d
 800a6f0:	0800a75d 	.word	0x0800a75d
 800a6f4:	0800a763 	.word	0x0800a763
 800a6f8:	0800a75d 	.word	0x0800a75d
 800a6fc:	0800a75d 	.word	0x0800a75d
 800a700:	0800a75d 	.word	0x0800a75d
 800a704:	0800a75d 	.word	0x0800a75d
 800a708:	0800a75d 	.word	0x0800a75d
 800a70c:	0800a75d 	.word	0x0800a75d
 800a710:	0800a75d 	.word	0x0800a75d
 800a714:	0800a763 	.word	0x0800a763
 800a718:	0800a75d 	.word	0x0800a75d
 800a71c:	0800a75d 	.word	0x0800a75d
 800a720:	0800a75d 	.word	0x0800a75d
 800a724:	0800a75d 	.word	0x0800a75d
 800a728:	0800a75d 	.word	0x0800a75d
 800a72c:	0800a75d 	.word	0x0800a75d
 800a730:	0800a75d 	.word	0x0800a75d
 800a734:	0800a763 	.word	0x0800a763
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3304      	adds	r3, #4
 800a73c:	2101      	movs	r1, #1
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 fde6 	bl	800b310 <RCCEx_PLL2_Config>
 800a744:	4603      	mov	r3, r0
 800a746:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a748:	e00c      	b.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	3324      	adds	r3, #36	; 0x24
 800a74e:	2101      	movs	r1, #1
 800a750:	4618      	mov	r0, r3
 800a752:	f000 fe8f 	bl	800b474 <RCCEx_PLL3_Config>
 800a756:	4603      	mov	r3, r0
 800a758:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a75a:	e003      	b.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	75fb      	strb	r3, [r7, #23]
      break;
 800a760:	e000      	b.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a762:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a764:	7dfb      	ldrb	r3, [r7, #23]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d109      	bne.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a76a:	4b1d      	ldr	r3, [pc, #116]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a76e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a776:	491a      	ldr	r1, [pc, #104]	; (800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a778:	4313      	orrs	r3, r2
 800a77a:	654b      	str	r3, [r1, #84]	; 0x54
 800a77c:	e001      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
 800a780:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 0302 	and.w	r3, r3, #2
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d03e      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a792:	2b05      	cmp	r3, #5
 800a794:	d820      	bhi.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a796:	a201      	add	r2, pc, #4	; (adr r2, 800a79c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7ed 	.word	0x0800a7ed
 800a7a0:	0800a7b5 	.word	0x0800a7b5
 800a7a4:	0800a7c7 	.word	0x0800a7c7
 800a7a8:	0800a7ed 	.word	0x0800a7ed
 800a7ac:	0800a7ed 	.word	0x0800a7ed
 800a7b0:	0800a7ed 	.word	0x0800a7ed
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fda8 	bl	800b310 <RCCEx_PLL2_Config>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a7c4:	e013      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3324      	adds	r3, #36	; 0x24
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fe51 	bl	800b474 <RCCEx_PLL3_Config>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a7d6:	e00a      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	75fb      	strb	r3, [r7, #23]
      break;
 800a7dc:	e007      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a7de:	bf00      	nop
 800a7e0:	58024400 	.word	0x58024400
 800a7e4:	58024800 	.word	0x58024800
 800a7e8:	00ffffcf 	.word	0x00ffffcf
      break;
 800a7ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a7f4:	4b9f      	ldr	r3, [pc, #636]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a7f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f8:	f023 0207 	bic.w	r2, r3, #7
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a800:	499c      	ldr	r1, [pc, #624]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a802:	4313      	orrs	r3, r2
 800a804:	654b      	str	r3, [r1, #84]	; 0x54
 800a806:	e001      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0304 	and.w	r3, r3, #4
 800a814:	2b00      	cmp	r3, #0
 800a816:	d039      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a81e:	2b05      	cmp	r3, #5
 800a820:	d820      	bhi.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a822:	a201      	add	r2, pc, #4	; (adr r2, 800a828 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a828:	0800a86b 	.word	0x0800a86b
 800a82c:	0800a841 	.word	0x0800a841
 800a830:	0800a853 	.word	0x0800a853
 800a834:	0800a86b 	.word	0x0800a86b
 800a838:	0800a86b 	.word	0x0800a86b
 800a83c:	0800a86b 	.word	0x0800a86b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3304      	adds	r3, #4
 800a844:	2101      	movs	r1, #1
 800a846:	4618      	mov	r0, r3
 800a848:	f000 fd62 	bl	800b310 <RCCEx_PLL2_Config>
 800a84c:	4603      	mov	r3, r0
 800a84e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a850:	e00c      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3324      	adds	r3, #36	; 0x24
 800a856:	2101      	movs	r1, #1
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 fe0b 	bl	800b474 <RCCEx_PLL3_Config>
 800a85e:	4603      	mov	r3, r0
 800a860:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a862:	e003      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	75fb      	strb	r3, [r7, #23]
      break;
 800a868:	e000      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a86a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10a      	bne.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a872:	4b80      	ldr	r3, [pc, #512]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a876:	f023 0207 	bic.w	r2, r3, #7
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a880:	497c      	ldr	r1, [pc, #496]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a882:	4313      	orrs	r3, r2
 800a884:	658b      	str	r3, [r1, #88]	; 0x58
 800a886:	e001      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0320 	and.w	r3, r3, #32
 800a894:	2b00      	cmp	r3, #0
 800a896:	d04b      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8a2:	d02e      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a8a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8a8:	d828      	bhi.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ae:	d02a      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a8b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8b4:	d822      	bhi.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a8b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8ba:	d026      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a8bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8c0:	d81c      	bhi.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a8c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8c6:	d010      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a8c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8cc:	d816      	bhi.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d01d      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a8d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8d6:	d111      	bne.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	2100      	movs	r1, #0
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 fd16 	bl	800b310 <RCCEx_PLL2_Config>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a8e8:	e012      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	3324      	adds	r3, #36	; 0x24
 800a8ee:	2102      	movs	r1, #2
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fdbf 	bl	800b474 <RCCEx_PLL3_Config>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a8fa:	e009      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a900:	e006      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a902:	bf00      	nop
 800a904:	e004      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a906:	bf00      	nop
 800a908:	e002      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a90a:	bf00      	nop
 800a90c:	e000      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a90e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a910:	7dfb      	ldrb	r3, [r7, #23]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10a      	bne.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a916:	4b57      	ldr	r3, [pc, #348]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a924:	4953      	ldr	r1, [pc, #332]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a926:	4313      	orrs	r3, r2
 800a928:	654b      	str	r3, [r1, #84]	; 0x54
 800a92a:	e001      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d04b      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a942:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a946:	d02e      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a948:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a94c:	d828      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a952:	d02a      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a958:	d822      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a95a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a95e:	d026      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a960:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a964:	d81c      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a96a:	d010      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a96c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a970:	d816      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d01d      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a97a:	d111      	bne.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3304      	adds	r3, #4
 800a980:	2100      	movs	r1, #0
 800a982:	4618      	mov	r0, r3
 800a984:	f000 fcc4 	bl	800b310 <RCCEx_PLL2_Config>
 800a988:	4603      	mov	r3, r0
 800a98a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a98c:	e012      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	3324      	adds	r3, #36	; 0x24
 800a992:	2102      	movs	r1, #2
 800a994:	4618      	mov	r0, r3
 800a996:	f000 fd6d 	bl	800b474 <RCCEx_PLL3_Config>
 800a99a:	4603      	mov	r3, r0
 800a99c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a99e:	e009      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a9a4:	e006      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a9a6:	bf00      	nop
 800a9a8:	e004      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a9aa:	bf00      	nop
 800a9ac:	e002      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a9ae:	bf00      	nop
 800a9b0:	e000      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a9b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10a      	bne.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a9ba:	4b2e      	ldr	r3, [pc, #184]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9c8:	492a      	ldr	r1, [pc, #168]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	658b      	str	r3, [r1, #88]	; 0x58
 800a9ce:	e001      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d0:	7dfb      	ldrb	r3, [r7, #23]
 800a9d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d04d      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a9ea:	d02e      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a9ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a9f0:	d828      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a9f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9f6:	d02a      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a9f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9fc:	d822      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a9fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aa02:	d026      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800aa04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aa08:	d81c      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800aa0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa0e:	d010      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800aa10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa14:	d816      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d01d      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800aa1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa1e:	d111      	bne.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3304      	adds	r3, #4
 800aa24:	2100      	movs	r1, #0
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fc72 	bl	800b310 <RCCEx_PLL2_Config>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800aa30:	e012      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3324      	adds	r3, #36	; 0x24
 800aa36:	2102      	movs	r1, #2
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fd1b 	bl	800b474 <RCCEx_PLL3_Config>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800aa42:	e009      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	75fb      	strb	r3, [r7, #23]
      break;
 800aa48:	e006      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800aa4a:	bf00      	nop
 800aa4c:	e004      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800aa4e:	bf00      	nop
 800aa50:	e002      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800aa52:	bf00      	nop
 800aa54:	e000      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800aa56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10c      	bne.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa5e:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aa60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa6c:	4901      	ldr	r1, [pc, #4]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	658b      	str	r3, [r1, #88]	; 0x58
 800aa72:	e003      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800aa74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa78:	7dfb      	ldrb	r3, [r7, #23]
 800aa7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0308 	and.w	r3, r3, #8
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d018      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa90:	d10a      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	3324      	adds	r3, #36	; 0x24
 800aa96:	2102      	movs	r1, #2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 fceb 	bl	800b474 <RCCEx_PLL3_Config>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800aaa8:	4b8a      	ldr	r3, [pc, #552]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aaaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aab4:	4987      	ldr	r1, [pc, #540]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0310 	and.w	r3, r3, #16
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d01a      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aacc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aad0:	d10a      	bne.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3324      	adds	r3, #36	; 0x24
 800aad6:	2102      	movs	r1, #2
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 fccb 	bl	800b474 <RCCEx_PLL3_Config>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d001      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aae8:	4b7a      	ldr	r3, [pc, #488]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aaea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaf6:	4977      	ldr	r1, [pc, #476]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d034      	beq.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab12:	d01d      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ab14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab18:	d817      	bhi.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ab1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab22:	d009      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ab24:	e011      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	3304      	adds	r3, #4
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fbef 	bl	800b310 <RCCEx_PLL2_Config>
 800ab32:	4603      	mov	r3, r0
 800ab34:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ab36:	e00c      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	3324      	adds	r3, #36	; 0x24
 800ab3c:	2102      	movs	r1, #2
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 fc98 	bl	800b474 <RCCEx_PLL3_Config>
 800ab44:	4603      	mov	r3, r0
 800ab46:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ab48:	e003      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab4e:	e000      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800ab50:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab52:	7dfb      	ldrb	r3, [r7, #23]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10a      	bne.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab58:	4b5e      	ldr	r3, [pc, #376]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ab5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab66:	495b      	ldr	r1, [pc, #364]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	658b      	str	r3, [r1, #88]	; 0x58
 800ab6c:	e001      	b.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d033      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab88:	d01c      	beq.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ab8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab8e:	d816      	bhi.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ab90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab94:	d003      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ab96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab9a:	d007      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800ab9c:	e00f      	b.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab9e:	4b4d      	ldr	r3, [pc, #308]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba2:	4a4c      	ldr	r2, [pc, #304]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aba8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800abaa:	e00c      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3324      	adds	r3, #36	; 0x24
 800abb0:	2101      	movs	r1, #1
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 fc5e 	bl	800b474 <RCCEx_PLL3_Config>
 800abb8:	4603      	mov	r3, r0
 800abba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800abbc:	e003      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	75fb      	strb	r3, [r7, #23]
      break;
 800abc2:	e000      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800abc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800abcc:	4b41      	ldr	r3, [pc, #260]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800abce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abda:	493e      	ldr	r1, [pc, #248]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800abdc:	4313      	orrs	r3, r2
 800abde:	654b      	str	r3, [r1, #84]	; 0x54
 800abe0:	e001      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
 800abe4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d029      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800abfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abfe:	d007      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ac00:	e00f      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac02:	4b34      	ldr	r3, [pc, #208]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	4a33      	ldr	r2, [pc, #204]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ac08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ac0e:	e00b      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3304      	adds	r3, #4
 800ac14:	2102      	movs	r1, #2
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 fb7a 	bl	800b310 <RCCEx_PLL2_Config>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ac20:	e002      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	75fb      	strb	r3, [r7, #23]
      break;
 800ac26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac28:	7dfb      	ldrb	r3, [r7, #23]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d109      	bne.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac2e:	4b29      	ldr	r3, [pc, #164]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ac30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac3a:	4926      	ldr	r1, [pc, #152]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ac40:	e001      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
 800ac44:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00a      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	3324      	adds	r3, #36	; 0x24
 800ac56:	2102      	movs	r1, #2
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 fc0b 	bl	800b474 <RCCEx_PLL3_Config>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d033      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac7c:	d017      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ac7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac82:	d811      	bhi.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ac84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac88:	d013      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800ac8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac8e:	d80b      	bhi.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d010      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800ac94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac98:	d106      	bne.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac9a:	4b0e      	ldr	r3, [pc, #56]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9e:	4a0d      	ldr	r2, [pc, #52]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aca4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aca6:	e007      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	75fb      	strb	r3, [r7, #23]
      break;
 800acac:	e004      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800acae:	bf00      	nop
 800acb0:	e002      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800acb2:	bf00      	nop
 800acb4:	e000      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800acb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10c      	bne.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acbe:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800acc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acca:	4902      	ldr	r1, [pc, #8]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800accc:	4313      	orrs	r3, r2
 800acce:	654b      	str	r3, [r1, #84]	; 0x54
 800acd0:	e004      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800acd2:	bf00      	nop
 800acd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d008      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ace8:	4b29      	ldr	r3, [pc, #164]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800acea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acf4:	4926      	ldr	r1, [pc, #152]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d008      	beq.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad06:	4b22      	ldr	r3, [pc, #136]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad12:	491f      	ldr	r1, [pc, #124]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad14:	4313      	orrs	r3, r2
 800ad16:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00d      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad24:	4b1a      	ldr	r3, [pc, #104]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	4a19      	ldr	r2, [pc, #100]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad2e:	6113      	str	r3, [r2, #16]
 800ad30:	4b17      	ldr	r3, [pc, #92]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad32:	691a      	ldr	r2, [r3, #16]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad3a:	4915      	ldr	r1, [pc, #84]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	da08      	bge.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ad48:	4b11      	ldr	r3, [pc, #68]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad54:	490e      	ldr	r1, [pc, #56]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad56:	4313      	orrs	r3, r2
 800ad58:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d009      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ad66:	4b0a      	ldr	r3, [pc, #40]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad74:	4906      	ldr	r1, [pc, #24]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad76:	4313      	orrs	r3, r2
 800ad78:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ad7a:	7dbb      	ldrb	r3, [r7, #22]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	e000      	b.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3718      	adds	r7, #24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	58024400 	.word	0x58024400

0800ad94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad98:	f7ff f8a6 	bl	8009ee8 <HAL_RCC_GetHCLKFreq>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	091b      	lsrs	r3, r3, #4
 800ada4:	f003 0307 	and.w	r3, r3, #7
 800ada8:	4904      	ldr	r1, [pc, #16]	; (800adbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800adaa:	5ccb      	ldrb	r3, [r1, r3]
 800adac:	f003 031f 	and.w	r3, r3, #31
 800adb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	58024400 	.word	0x58024400
 800adbc:	0800f7f8 	.word	0x0800f7f8

0800adc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b089      	sub	sp, #36	; 0x24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adc8:	4ba1      	ldr	r3, [pc, #644]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adcc:	f003 0303 	and.w	r3, r3, #3
 800add0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800add2:	4b9f      	ldr	r3, [pc, #636]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add6:	0b1b      	lsrs	r3, r3, #12
 800add8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800addc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800adde:	4b9c      	ldr	r3, [pc, #624]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade2:	091b      	lsrs	r3, r3, #4
 800ade4:	f003 0301 	and.w	r3, r3, #1
 800ade8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800adea:	4b99      	ldr	r3, [pc, #612]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adee:	08db      	lsrs	r3, r3, #3
 800adf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	fb02 f303 	mul.w	r3, r2, r3
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8111 	beq.w	800b030 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	f000 8083 	beq.w	800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	f200 80a1 	bhi.w	800af60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d056      	beq.n	800aed8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae2a:	e099      	b.n	800af60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae2c:	4b88      	ldr	r3, [pc, #544]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 0320 	and.w	r3, r3, #32
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d02d      	beq.n	800ae94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae38:	4b85      	ldr	r3, [pc, #532]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	08db      	lsrs	r3, r3, #3
 800ae3e:	f003 0303 	and.w	r3, r3, #3
 800ae42:	4a84      	ldr	r2, [pc, #528]	; (800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae44:	fa22 f303 	lsr.w	r3, r2, r3
 800ae48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	ee07 3a90 	vmov	s15, r3
 800ae50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae62:	4b7b      	ldr	r3, [pc, #492]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae76:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae92:	e087      	b.n	800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b05c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea6:	4b6a      	ldr	r3, [pc, #424]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aed6:	e065      	b.n	800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	ee07 3a90 	vmov	s15, r3
 800aede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeea:	4b59      	ldr	r3, [pc, #356]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aefa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aefe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af1a:	e043      	b.n	800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	ee07 3a90 	vmov	s15, r3
 800af22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2e:	4b48      	ldr	r3, [pc, #288]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af42:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af5e:	e021      	b.n	800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af72:	4b37      	ldr	r3, [pc, #220]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af82:	ed97 6a03 	vldr	s12, [r7, #12]
 800af86:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afa2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800afa4:	4b2a      	ldr	r3, [pc, #168]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa8:	0a5b      	lsrs	r3, r3, #9
 800afaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800afc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afca:	ee17 2a90 	vmov	r2, s15
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800afd2:	4b1f      	ldr	r3, [pc, #124]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	0c1b      	lsrs	r3, r3, #16
 800afd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afdc:	ee07 3a90 	vmov	s15, r3
 800afe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afec:	edd7 6a07 	vldr	s13, [r7, #28]
 800aff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff8:	ee17 2a90 	vmov	r2, s15
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b000:	4b13      	ldr	r3, [pc, #76]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	0e1b      	lsrs	r3, r3, #24
 800b006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b01a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b026:	ee17 2a90 	vmov	r2, s15
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b02e:	e008      	b.n	800b042 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	609a      	str	r2, [r3, #8]
}
 800b042:	bf00      	nop
 800b044:	3724      	adds	r7, #36	; 0x24
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	58024400 	.word	0x58024400
 800b054:	03d09000 	.word	0x03d09000
 800b058:	46000000 	.word	0x46000000
 800b05c:	4c742400 	.word	0x4c742400
 800b060:	4a742400 	.word	0x4a742400
 800b064:	4bbebc20 	.word	0x4bbebc20

0800b068 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b068:	b480      	push	{r7}
 800b06a:	b089      	sub	sp, #36	; 0x24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b070:	4ba1      	ldr	r3, [pc, #644]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b074:	f003 0303 	and.w	r3, r3, #3
 800b078:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b07a:	4b9f      	ldr	r3, [pc, #636]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07e:	0d1b      	lsrs	r3, r3, #20
 800b080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b084:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b086:	4b9c      	ldr	r3, [pc, #624]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08a:	0a1b      	lsrs	r3, r3, #8
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b092:	4b99      	ldr	r3, [pc, #612]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b096:	08db      	lsrs	r3, r3, #3
 800b098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	fb02 f303 	mul.w	r3, r2, r3
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 8111 	beq.w	800b2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	f000 8083 	beq.w	800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	f200 80a1 	bhi.w	800b208 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d003      	beq.n	800b0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d056      	beq.n	800b180 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0d2:	e099      	b.n	800b208 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0d4:	4b88      	ldr	r3, [pc, #544]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 0320 	and.w	r3, r3, #32
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d02d      	beq.n	800b13c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0e0:	4b85      	ldr	r3, [pc, #532]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	08db      	lsrs	r3, r3, #3
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	4a84      	ldr	r2, [pc, #528]	; (800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b0ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b0f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	ee07 3a90 	vmov	s15, r3
 800b0f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b10a:	4b7b      	ldr	r3, [pc, #492]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b11e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b12a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b136:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b13a:	e087      	b.n	800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b146:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b304 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b14e:	4b6a      	ldr	r3, [pc, #424]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b156:	ee07 3a90 	vmov	s15, r3
 800b15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b15e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b162:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b17a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b17e:	e065      	b.n	800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b192:	4b59      	ldr	r3, [pc, #356]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1c2:	e043      	b.n	800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d6:	4b48      	ldr	r3, [pc, #288]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b202:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b206:	e021      	b.n	800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b212:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b21a:	4b37      	ldr	r3, [pc, #220]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b222:	ee07 3a90 	vmov	s15, r3
 800b226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b22a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b23a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b246:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b24a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b24c:	4b2a      	ldr	r3, [pc, #168]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b250:	0a5b      	lsrs	r3, r3, #9
 800b252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b262:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b266:	edd7 6a07 	vldr	s13, [r7, #28]
 800b26a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b272:	ee17 2a90 	vmov	r2, s15
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b27a:	4b1f      	ldr	r3, [pc, #124]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	0c1b      	lsrs	r3, r3, #16
 800b280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b284:	ee07 3a90 	vmov	s15, r3
 800b288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b290:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b294:	edd7 6a07 	vldr	s13, [r7, #28]
 800b298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b29c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2a0:	ee17 2a90 	vmov	r2, s15
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b2a8:	4b13      	ldr	r3, [pc, #76]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ac:	0e1b      	lsrs	r3, r3, #24
 800b2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ce:	ee17 2a90 	vmov	r2, s15
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b2d6:	e008      	b.n	800b2ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	609a      	str	r2, [r3, #8]
}
 800b2ea:	bf00      	nop
 800b2ec:	3724      	adds	r7, #36	; 0x24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	58024400 	.word	0x58024400
 800b2fc:	03d09000 	.word	0x03d09000
 800b300:	46000000 	.word	0x46000000
 800b304:	4c742400 	.word	0x4c742400
 800b308:	4a742400 	.word	0x4a742400
 800b30c:	4bbebc20 	.word	0x4bbebc20

0800b310 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b31e:	4b53      	ldr	r3, [pc, #332]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b322:	f003 0303 	and.w	r3, r3, #3
 800b326:	2b03      	cmp	r3, #3
 800b328:	d101      	bne.n	800b32e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e099      	b.n	800b462 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b32e:	4b4f      	ldr	r3, [pc, #316]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a4e      	ldr	r2, [pc, #312]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b334:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b33a:	f7fa fabb 	bl	80058b4 <HAL_GetTick>
 800b33e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b340:	e008      	b.n	800b354 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b342:	f7fa fab7 	bl	80058b4 <HAL_GetTick>
 800b346:	4602      	mov	r2, r0
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d901      	bls.n	800b354 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e086      	b.n	800b462 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b354:	4b45      	ldr	r3, [pc, #276]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1f0      	bne.n	800b342 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b360:	4b42      	ldr	r3, [pc, #264]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b364:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	031b      	lsls	r3, r3, #12
 800b36e:	493f      	ldr	r1, [pc, #252]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b370:	4313      	orrs	r3, r2
 800b372:	628b      	str	r3, [r1, #40]	; 0x28
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	3b01      	subs	r3, #1
 800b37a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	3b01      	subs	r3, #1
 800b384:	025b      	lsls	r3, r3, #9
 800b386:	b29b      	uxth	r3, r3
 800b388:	431a      	orrs	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	3b01      	subs	r3, #1
 800b390:	041b      	lsls	r3, r3, #16
 800b392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b396:	431a      	orrs	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	061b      	lsls	r3, r3, #24
 800b3a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3a4:	4931      	ldr	r1, [pc, #196]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3aa:	4b30      	ldr	r3, [pc, #192]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	492d      	ldr	r1, [pc, #180]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3bc:	4b2b      	ldr	r3, [pc, #172]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	f023 0220 	bic.w	r2, r3, #32
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	4928      	ldr	r1, [pc, #160]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3ce:	4b27      	ldr	r3, [pc, #156]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d2:	4a26      	ldr	r2, [pc, #152]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3d4:	f023 0310 	bic.w	r3, r3, #16
 800b3d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3da:	4b24      	ldr	r3, [pc, #144]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3de:	4b24      	ldr	r3, [pc, #144]	; (800b470 <RCCEx_PLL2_Config+0x160>)
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	69d2      	ldr	r2, [r2, #28]
 800b3e6:	00d2      	lsls	r2, r2, #3
 800b3e8:	4920      	ldr	r1, [pc, #128]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b3ee:	4b1f      	ldr	r3, [pc, #124]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f2:	4a1e      	ldr	r2, [pc, #120]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b3f4:	f043 0310 	orr.w	r3, r3, #16
 800b3f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d106      	bne.n	800b40e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b400:	4b1a      	ldr	r3, [pc, #104]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b404:	4a19      	ldr	r2, [pc, #100]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b40a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b40c:	e00f      	b.n	800b42e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d106      	bne.n	800b422 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b414:	4b15      	ldr	r3, [pc, #84]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	4a14      	ldr	r2, [pc, #80]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b41a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b41e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b420:	e005      	b.n	800b42e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b422:	4b12      	ldr	r3, [pc, #72]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b426:	4a11      	ldr	r2, [pc, #68]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b42c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b42e:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a0e      	ldr	r2, [pc, #56]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b43a:	f7fa fa3b 	bl	80058b4 <HAL_GetTick>
 800b43e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b440:	e008      	b.n	800b454 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b442:	f7fa fa37 	bl	80058b4 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d901      	bls.n	800b454 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	e006      	b.n	800b462 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b454:	4b05      	ldr	r3, [pc, #20]	; (800b46c <RCCEx_PLL2_Config+0x15c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d0f0      	beq.n	800b442 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b460:	7bfb      	ldrb	r3, [r7, #15]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	58024400 	.word	0x58024400
 800b470:	ffff0007 	.word	0xffff0007

0800b474 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b482:	4b53      	ldr	r3, [pc, #332]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	2b03      	cmp	r3, #3
 800b48c:	d101      	bne.n	800b492 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e099      	b.n	800b5c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b492:	4b4f      	ldr	r3, [pc, #316]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a4e      	ldr	r2, [pc, #312]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b49c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b49e:	f7fa fa09 	bl	80058b4 <HAL_GetTick>
 800b4a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4a4:	e008      	b.n	800b4b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b4a6:	f7fa fa05 	bl	80058b4 <HAL_GetTick>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d901      	bls.n	800b4b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e086      	b.n	800b5c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4b8:	4b45      	ldr	r3, [pc, #276]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1f0      	bne.n	800b4a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4c4:	4b42      	ldr	r3, [pc, #264]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	051b      	lsls	r3, r3, #20
 800b4d2:	493f      	ldr	r1, [pc, #252]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	628b      	str	r3, [r1, #40]	; 0x28
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	025b      	lsls	r3, r3, #9
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	431a      	orrs	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	041b      	lsls	r3, r3, #16
 800b4f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	3b01      	subs	r3, #1
 800b502:	061b      	lsls	r3, r3, #24
 800b504:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b508:	4931      	ldr	r1, [pc, #196]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b50a:	4313      	orrs	r3, r2
 800b50c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b50e:	4b30      	ldr	r3, [pc, #192]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b512:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	492d      	ldr	r1, [pc, #180]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b51c:	4313      	orrs	r3, r2
 800b51e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b520:	4b2b      	ldr	r3, [pc, #172]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b524:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	4928      	ldr	r1, [pc, #160]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b52e:	4313      	orrs	r3, r2
 800b530:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b532:	4b27      	ldr	r3, [pc, #156]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b536:	4a26      	ldr	r2, [pc, #152]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b53c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b53e:	4b24      	ldr	r3, [pc, #144]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b542:	4b24      	ldr	r3, [pc, #144]	; (800b5d4 <RCCEx_PLL3_Config+0x160>)
 800b544:	4013      	ands	r3, r2
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	69d2      	ldr	r2, [r2, #28]
 800b54a:	00d2      	lsls	r2, r2, #3
 800b54c:	4920      	ldr	r1, [pc, #128]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b54e:	4313      	orrs	r3, r2
 800b550:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b552:	4b1f      	ldr	r3, [pc, #124]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b556:	4a1e      	ldr	r2, [pc, #120]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b55c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d106      	bne.n	800b572 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b564:	4b1a      	ldr	r3, [pc, #104]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b568:	4a19      	ldr	r2, [pc, #100]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b56a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b56e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b570:	e00f      	b.n	800b592 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d106      	bne.n	800b586 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b578:	4b15      	ldr	r3, [pc, #84]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	4a14      	ldr	r2, [pc, #80]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b57e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b582:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b584:	e005      	b.n	800b592 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b586:	4b12      	ldr	r3, [pc, #72]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58a:	4a11      	ldr	r2, [pc, #68]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b58c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b590:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b592:	4b0f      	ldr	r3, [pc, #60]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a0e      	ldr	r2, [pc, #56]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b59c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b59e:	f7fa f989 	bl	80058b4 <HAL_GetTick>
 800b5a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5a4:	e008      	b.n	800b5b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b5a6:	f7fa f985 	bl	80058b4 <HAL_GetTick>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d901      	bls.n	800b5b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e006      	b.n	800b5c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5b8:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <RCCEx_PLL3_Config+0x15c>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0f0      	beq.n	800b5a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	58024400 	.word	0x58024400
 800b5d4:	ffff0007 	.word	0xffff0007

0800b5d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e049      	b.n	800b67e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d106      	bne.n	800b604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7f9 fc6a 	bl	8004ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2202      	movs	r2, #2
 800b608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	3304      	adds	r3, #4
 800b614:	4619      	mov	r1, r3
 800b616:	4610      	mov	r0, r2
 800b618:	f000 feb8 	bl	800c38c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
	...

0800b688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d001      	beq.n	800b6a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e05e      	b.n	800b75e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68da      	ldr	r2, [r3, #12]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f042 0201 	orr.w	r2, r2, #1
 800b6b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a2b      	ldr	r2, [pc, #172]	; (800b76c <HAL_TIM_Base_Start_IT+0xe4>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d02c      	beq.n	800b71c <HAL_TIM_Base_Start_IT+0x94>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ca:	d027      	beq.n	800b71c <HAL_TIM_Base_Start_IT+0x94>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a27      	ldr	r2, [pc, #156]	; (800b770 <HAL_TIM_Base_Start_IT+0xe8>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d022      	beq.n	800b71c <HAL_TIM_Base_Start_IT+0x94>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a26      	ldr	r2, [pc, #152]	; (800b774 <HAL_TIM_Base_Start_IT+0xec>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d01d      	beq.n	800b71c <HAL_TIM_Base_Start_IT+0x94>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a24      	ldr	r2, [pc, #144]	; (800b778 <HAL_TIM_Base_Start_IT+0xf0>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d018      	beq.n	800b71c <HAL_TIM_Base_Start_IT+0x94>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a23      	ldr	r2, [pc, #140]	; (800b77c <HAL_TIM_Base_Start_IT+0xf4>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d013      	beq.n	800b71c <HAL_TIM_Base_Start_IT+0x94>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a21      	ldr	r2, [pc, #132]	; (800b780 <HAL_TIM_Base_Start_IT+0xf8>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d00e      	beq.n	800b71c <HAL_TIM_Base_Start_IT+0x94>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a20      	ldr	r2, [pc, #128]	; (800b784 <HAL_TIM_Base_Start_IT+0xfc>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d009      	beq.n	800b71c <HAL_TIM_Base_Start_IT+0x94>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a1e      	ldr	r2, [pc, #120]	; (800b788 <HAL_TIM_Base_Start_IT+0x100>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d004      	beq.n	800b71c <HAL_TIM_Base_Start_IT+0x94>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a1d      	ldr	r2, [pc, #116]	; (800b78c <HAL_TIM_Base_Start_IT+0x104>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d115      	bne.n	800b748 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	689a      	ldr	r2, [r3, #8]
 800b722:	4b1b      	ldr	r3, [pc, #108]	; (800b790 <HAL_TIM_Base_Start_IT+0x108>)
 800b724:	4013      	ands	r3, r2
 800b726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b06      	cmp	r3, #6
 800b72c:	d015      	beq.n	800b75a <HAL_TIM_Base_Start_IT+0xd2>
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b734:	d011      	beq.n	800b75a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f042 0201 	orr.w	r2, r2, #1
 800b744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b746:	e008      	b.n	800b75a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f042 0201 	orr.w	r2, r2, #1
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	e000      	b.n	800b75c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b75a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3714      	adds	r7, #20
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	40010000 	.word	0x40010000
 800b770:	40000400 	.word	0x40000400
 800b774:	40000800 	.word	0x40000800
 800b778:	40000c00 	.word	0x40000c00
 800b77c:	40010400 	.word	0x40010400
 800b780:	40001800 	.word	0x40001800
 800b784:	40014000 	.word	0x40014000
 800b788:	4000e000 	.word	0x4000e000
 800b78c:	4000e400 	.word	0x4000e400
 800b790:	00010007 	.word	0x00010007

0800b794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d101      	bne.n	800b7a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e049      	b.n	800b83a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d106      	bne.n	800b7c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7f9 fcc4 	bl	8005148 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	f000 fdda 	bl	800c38c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d109      	bne.n	800b868 <HAL_TIM_PWM_Start+0x24>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	bf14      	ite	ne
 800b860:	2301      	movne	r3, #1
 800b862:	2300      	moveq	r3, #0
 800b864:	b2db      	uxtb	r3, r3
 800b866:	e03c      	b.n	800b8e2 <HAL_TIM_PWM_Start+0x9e>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b04      	cmp	r3, #4
 800b86c:	d109      	bne.n	800b882 <HAL_TIM_PWM_Start+0x3e>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b01      	cmp	r3, #1
 800b878:	bf14      	ite	ne
 800b87a:	2301      	movne	r3, #1
 800b87c:	2300      	moveq	r3, #0
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	e02f      	b.n	800b8e2 <HAL_TIM_PWM_Start+0x9e>
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	2b08      	cmp	r3, #8
 800b886:	d109      	bne.n	800b89c <HAL_TIM_PWM_Start+0x58>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	2b01      	cmp	r3, #1
 800b892:	bf14      	ite	ne
 800b894:	2301      	movne	r3, #1
 800b896:	2300      	moveq	r3, #0
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	e022      	b.n	800b8e2 <HAL_TIM_PWM_Start+0x9e>
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2b0c      	cmp	r3, #12
 800b8a0:	d109      	bne.n	800b8b6 <HAL_TIM_PWM_Start+0x72>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	bf14      	ite	ne
 800b8ae:	2301      	movne	r3, #1
 800b8b0:	2300      	moveq	r3, #0
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	e015      	b.n	800b8e2 <HAL_TIM_PWM_Start+0x9e>
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	2b10      	cmp	r3, #16
 800b8ba:	d109      	bne.n	800b8d0 <HAL_TIM_PWM_Start+0x8c>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	bf14      	ite	ne
 800b8c8:	2301      	movne	r3, #1
 800b8ca:	2300      	moveq	r3, #0
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	e008      	b.n	800b8e2 <HAL_TIM_PWM_Start+0x9e>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	bf14      	ite	ne
 800b8dc:	2301      	movne	r3, #1
 800b8de:	2300      	moveq	r3, #0
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e0ab      	b.n	800ba42 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d104      	bne.n	800b8fa <HAL_TIM_PWM_Start+0xb6>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8f8:	e023      	b.n	800b942 <HAL_TIM_PWM_Start+0xfe>
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	d104      	bne.n	800b90a <HAL_TIM_PWM_Start+0xc6>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2202      	movs	r2, #2
 800b904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b908:	e01b      	b.n	800b942 <HAL_TIM_PWM_Start+0xfe>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2b08      	cmp	r3, #8
 800b90e:	d104      	bne.n	800b91a <HAL_TIM_PWM_Start+0xd6>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2202      	movs	r2, #2
 800b914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b918:	e013      	b.n	800b942 <HAL_TIM_PWM_Start+0xfe>
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2b0c      	cmp	r3, #12
 800b91e:	d104      	bne.n	800b92a <HAL_TIM_PWM_Start+0xe6>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2202      	movs	r2, #2
 800b924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b928:	e00b      	b.n	800b942 <HAL_TIM_PWM_Start+0xfe>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b10      	cmp	r3, #16
 800b92e:	d104      	bne.n	800b93a <HAL_TIM_PWM_Start+0xf6>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2202      	movs	r2, #2
 800b934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b938:	e003      	b.n	800b942 <HAL_TIM_PWM_Start+0xfe>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2202      	movs	r2, #2
 800b93e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2201      	movs	r2, #1
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f001 f938 	bl	800cbc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a3d      	ldr	r2, [pc, #244]	; (800ba4c <HAL_TIM_PWM_Start+0x208>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d013      	beq.n	800b982 <HAL_TIM_PWM_Start+0x13e>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a3c      	ldr	r2, [pc, #240]	; (800ba50 <HAL_TIM_PWM_Start+0x20c>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d00e      	beq.n	800b982 <HAL_TIM_PWM_Start+0x13e>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a3a      	ldr	r2, [pc, #232]	; (800ba54 <HAL_TIM_PWM_Start+0x210>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d009      	beq.n	800b982 <HAL_TIM_PWM_Start+0x13e>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a39      	ldr	r2, [pc, #228]	; (800ba58 <HAL_TIM_PWM_Start+0x214>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d004      	beq.n	800b982 <HAL_TIM_PWM_Start+0x13e>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a37      	ldr	r2, [pc, #220]	; (800ba5c <HAL_TIM_PWM_Start+0x218>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d101      	bne.n	800b986 <HAL_TIM_PWM_Start+0x142>
 800b982:	2301      	movs	r3, #1
 800b984:	e000      	b.n	800b988 <HAL_TIM_PWM_Start+0x144>
 800b986:	2300      	movs	r3, #0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d007      	beq.n	800b99c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b99a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a2a      	ldr	r2, [pc, #168]	; (800ba4c <HAL_TIM_PWM_Start+0x208>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d02c      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x1bc>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ae:	d027      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x1bc>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a2a      	ldr	r2, [pc, #168]	; (800ba60 <HAL_TIM_PWM_Start+0x21c>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d022      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x1bc>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a29      	ldr	r2, [pc, #164]	; (800ba64 <HAL_TIM_PWM_Start+0x220>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d01d      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x1bc>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a27      	ldr	r2, [pc, #156]	; (800ba68 <HAL_TIM_PWM_Start+0x224>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d018      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x1bc>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a1f      	ldr	r2, [pc, #124]	; (800ba50 <HAL_TIM_PWM_Start+0x20c>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d013      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x1bc>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a23      	ldr	r2, [pc, #140]	; (800ba6c <HAL_TIM_PWM_Start+0x228>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d00e      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x1bc>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a1b      	ldr	r2, [pc, #108]	; (800ba54 <HAL_TIM_PWM_Start+0x210>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d009      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x1bc>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a1f      	ldr	r2, [pc, #124]	; (800ba70 <HAL_TIM_PWM_Start+0x22c>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d004      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x1bc>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a1e      	ldr	r2, [pc, #120]	; (800ba74 <HAL_TIM_PWM_Start+0x230>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d115      	bne.n	800ba2c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	689a      	ldr	r2, [r3, #8]
 800ba06:	4b1c      	ldr	r3, [pc, #112]	; (800ba78 <HAL_TIM_PWM_Start+0x234>)
 800ba08:	4013      	ands	r3, r2
 800ba0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b06      	cmp	r3, #6
 800ba10:	d015      	beq.n	800ba3e <HAL_TIM_PWM_Start+0x1fa>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba18:	d011      	beq.n	800ba3e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f042 0201 	orr.w	r2, r2, #1
 800ba28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba2a:	e008      	b.n	800ba3e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f042 0201 	orr.w	r2, r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	e000      	b.n	800ba40 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	40010000 	.word	0x40010000
 800ba50:	40010400 	.word	0x40010400
 800ba54:	40014000 	.word	0x40014000
 800ba58:	40014400 	.word	0x40014400
 800ba5c:	40014800 	.word	0x40014800
 800ba60:	40000400 	.word	0x40000400
 800ba64:	40000800 	.word	0x40000800
 800ba68:	40000c00 	.word	0x40000c00
 800ba6c:	40001800 	.word	0x40001800
 800ba70:	4000e000 	.word	0x4000e000
 800ba74:	4000e400 	.word	0x4000e400
 800ba78:	00010007 	.word	0x00010007

0800ba7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d101      	bne.n	800ba90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e08f      	b.n	800bbb0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d106      	bne.n	800baaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7f9 fa5d 	bl	8004f64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2202      	movs	r2, #2
 800baae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6899      	ldr	r1, [r3, #8]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	4b3e      	ldr	r3, [pc, #248]	; (800bbb8 <HAL_TIM_Encoder_Init+0x13c>)
 800babe:	400b      	ands	r3, r1
 800bac0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	3304      	adds	r3, #4
 800baca:	4619      	mov	r1, r3
 800bacc:	4610      	mov	r0, r2
 800bace:	f000 fc5d 	bl	800c38c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	699b      	ldr	r3, [r3, #24]
 800bae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	6a1b      	ldr	r3, [r3, #32]
 800bae8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	4b31      	ldr	r3, [pc, #196]	; (800bbbc <HAL_TIM_Encoder_Init+0x140>)
 800baf8:	4013      	ands	r3, r2
 800bafa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	689a      	ldr	r2, [r3, #8]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	021b      	lsls	r3, r3, #8
 800bb06:	4313      	orrs	r3, r2
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	4b2b      	ldr	r3, [pc, #172]	; (800bbc0 <HAL_TIM_Encoder_Init+0x144>)
 800bb12:	4013      	ands	r3, r2
 800bb14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	4b2a      	ldr	r3, [pc, #168]	; (800bbc4 <HAL_TIM_Encoder_Init+0x148>)
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	68da      	ldr	r2, [r3, #12]
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	021b      	lsls	r3, r3, #8
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	693a      	ldr	r2, [r7, #16]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	011a      	lsls	r2, r3, #4
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	031b      	lsls	r3, r3, #12
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	693a      	ldr	r2, [r7, #16]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bb4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bb52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	685a      	ldr	r2, [r3, #4]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	011b      	lsls	r3, r3, #4
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3718      	adds	r7, #24
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	fffebff8 	.word	0xfffebff8
 800bbbc:	fffffcfc 	.word	0xfffffcfc
 800bbc0:	fffff3f3 	.word	0xfffff3f3
 800bbc4:	ffff0f0f 	.word	0xffff0f0f

0800bbc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bbe0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbe8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d110      	bne.n	800bc1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d102      	bne.n	800bc04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bbfe:	7b7b      	ldrb	r3, [r7, #13]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d001      	beq.n	800bc08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	e069      	b.n	800bcdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2202      	movs	r2, #2
 800bc14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc18:	e031      	b.n	800bc7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b04      	cmp	r3, #4
 800bc1e:	d110      	bne.n	800bc42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc20:	7bbb      	ldrb	r3, [r7, #14]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d102      	bne.n	800bc2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc26:	7b3b      	ldrb	r3, [r7, #12]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d001      	beq.n	800bc30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e055      	b.n	800bcdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2202      	movs	r2, #2
 800bc34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc40:	e01d      	b.n	800bc7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d108      	bne.n	800bc5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc48:	7bbb      	ldrb	r3, [r7, #14]
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d105      	bne.n	800bc5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc4e:	7b7b      	ldrb	r3, [r7, #13]
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d102      	bne.n	800bc5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc54:	7b3b      	ldrb	r3, [r7, #12]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d001      	beq.n	800bc5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e03e      	b.n	800bcdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2202      	movs	r2, #2
 800bc62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2202      	movs	r2, #2
 800bc6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2202      	movs	r2, #2
 800bc72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2202      	movs	r2, #2
 800bc7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d003      	beq.n	800bc8c <HAL_TIM_Encoder_Start+0xc4>
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2b04      	cmp	r3, #4
 800bc88:	d008      	beq.n	800bc9c <HAL_TIM_Encoder_Start+0xd4>
 800bc8a:	e00f      	b.n	800bcac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2201      	movs	r2, #1
 800bc92:	2100      	movs	r1, #0
 800bc94:	4618      	mov	r0, r3
 800bc96:	f000 ff93 	bl	800cbc0 <TIM_CCxChannelCmd>
      break;
 800bc9a:	e016      	b.n	800bcca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2201      	movs	r2, #1
 800bca2:	2104      	movs	r1, #4
 800bca4:	4618      	mov	r0, r3
 800bca6:	f000 ff8b 	bl	800cbc0 <TIM_CCxChannelCmd>
      break;
 800bcaa:	e00e      	b.n	800bcca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f000 ff83 	bl	800cbc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	2104      	movs	r1, #4
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 ff7c 	bl	800cbc0 <TIM_CCxChannelCmd>
      break;
 800bcc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f042 0201 	orr.w	r2, r2, #1
 800bcd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	f003 0302 	and.w	r3, r3, #2
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d122      	bne.n	800bd40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	f003 0302 	and.w	r3, r3, #2
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d11b      	bne.n	800bd40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f06f 0202 	mvn.w	r2, #2
 800bd10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2201      	movs	r2, #1
 800bd16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	f003 0303 	and.w	r3, r3, #3
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 fb12 	bl	800c350 <HAL_TIM_IC_CaptureCallback>
 800bd2c:	e005      	b.n	800bd3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fb04 	bl	800c33c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fb15 	bl	800c364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	f003 0304 	and.w	r3, r3, #4
 800bd4a:	2b04      	cmp	r3, #4
 800bd4c:	d122      	bne.n	800bd94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	f003 0304 	and.w	r3, r3, #4
 800bd58:	2b04      	cmp	r3, #4
 800bd5a:	d11b      	bne.n	800bd94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f06f 0204 	mvn.w	r2, #4
 800bd64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2202      	movs	r2, #2
 800bd6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d003      	beq.n	800bd82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fae8 	bl	800c350 <HAL_TIM_IC_CaptureCallback>
 800bd80:	e005      	b.n	800bd8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fada 	bl	800c33c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 faeb 	bl	800c364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	f003 0308 	and.w	r3, r3, #8
 800bd9e:	2b08      	cmp	r3, #8
 800bda0:	d122      	bne.n	800bde8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	f003 0308 	and.w	r3, r3, #8
 800bdac:	2b08      	cmp	r3, #8
 800bdae:	d11b      	bne.n	800bde8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f06f 0208 	mvn.w	r2, #8
 800bdb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2204      	movs	r2, #4
 800bdbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	f003 0303 	and.w	r3, r3, #3
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d003      	beq.n	800bdd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fabe 	bl	800c350 <HAL_TIM_IC_CaptureCallback>
 800bdd4:	e005      	b.n	800bde2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fab0 	bl	800c33c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fac1 	bl	800c364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	f003 0310 	and.w	r3, r3, #16
 800bdf2:	2b10      	cmp	r3, #16
 800bdf4:	d122      	bne.n	800be3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	f003 0310 	and.w	r3, r3, #16
 800be00:	2b10      	cmp	r3, #16
 800be02:	d11b      	bne.n	800be3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f06f 0210 	mvn.w	r2, #16
 800be0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2208      	movs	r2, #8
 800be12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	69db      	ldr	r3, [r3, #28]
 800be1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d003      	beq.n	800be2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fa94 	bl	800c350 <HAL_TIM_IC_CaptureCallback>
 800be28:	e005      	b.n	800be36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fa86 	bl	800c33c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fa97 	bl	800c364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	f003 0301 	and.w	r3, r3, #1
 800be46:	2b01      	cmp	r3, #1
 800be48:	d10e      	bne.n	800be68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	2b01      	cmp	r3, #1
 800be56:	d107      	bne.n	800be68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f06f 0201 	mvn.w	r2, #1
 800be60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7f5 fb78 	bl	8001558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be72:	2b80      	cmp	r3, #128	; 0x80
 800be74:	d10e      	bne.n	800be94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be80:	2b80      	cmp	r3, #128	; 0x80
 800be82:	d107      	bne.n	800be94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f001 f802 	bl	800ce98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea2:	d10e      	bne.n	800bec2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beae:	2b80      	cmp	r3, #128	; 0x80
 800beb0:	d107      	bne.n	800bec2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800beba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fff5 	bl	800ceac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800becc:	2b40      	cmp	r3, #64	; 0x40
 800bece:	d10e      	bne.n	800beee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beda:	2b40      	cmp	r3, #64	; 0x40
 800bedc:	d107      	bne.n	800beee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fa45 	bl	800c378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	f003 0320 	and.w	r3, r3, #32
 800bef8:	2b20      	cmp	r3, #32
 800befa:	d10e      	bne.n	800bf1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	f003 0320 	and.w	r3, r3, #32
 800bf06:	2b20      	cmp	r3, #32
 800bf08:	d107      	bne.n	800bf1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f06f 0220 	mvn.w	r2, #32
 800bf12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 ffb5 	bl	800ce84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf1a:	bf00      	nop
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
	...

0800bf24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b086      	sub	sp, #24
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d101      	bne.n	800bf42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bf3e:	2302      	movs	r3, #2
 800bf40:	e0ff      	b.n	800c142 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2201      	movs	r2, #1
 800bf46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b14      	cmp	r3, #20
 800bf4e:	f200 80f0 	bhi.w	800c132 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bf52:	a201      	add	r2, pc, #4	; (adr r2, 800bf58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf58:	0800bfad 	.word	0x0800bfad
 800bf5c:	0800c133 	.word	0x0800c133
 800bf60:	0800c133 	.word	0x0800c133
 800bf64:	0800c133 	.word	0x0800c133
 800bf68:	0800bfed 	.word	0x0800bfed
 800bf6c:	0800c133 	.word	0x0800c133
 800bf70:	0800c133 	.word	0x0800c133
 800bf74:	0800c133 	.word	0x0800c133
 800bf78:	0800c02f 	.word	0x0800c02f
 800bf7c:	0800c133 	.word	0x0800c133
 800bf80:	0800c133 	.word	0x0800c133
 800bf84:	0800c133 	.word	0x0800c133
 800bf88:	0800c06f 	.word	0x0800c06f
 800bf8c:	0800c133 	.word	0x0800c133
 800bf90:	0800c133 	.word	0x0800c133
 800bf94:	0800c133 	.word	0x0800c133
 800bf98:	0800c0b1 	.word	0x0800c0b1
 800bf9c:	0800c133 	.word	0x0800c133
 800bfa0:	0800c133 	.word	0x0800c133
 800bfa4:	0800c133 	.word	0x0800c133
 800bfa8:	0800c0f1 	.word	0x0800c0f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	68b9      	ldr	r1, [r7, #8]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f000 fa90 	bl	800c4d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	699a      	ldr	r2, [r3, #24]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f042 0208 	orr.w	r2, r2, #8
 800bfc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	699a      	ldr	r2, [r3, #24]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f022 0204 	bic.w	r2, r2, #4
 800bfd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	6999      	ldr	r1, [r3, #24]
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	691a      	ldr	r2, [r3, #16]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	619a      	str	r2, [r3, #24]
      break;
 800bfea:	e0a5      	b.n	800c138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	68b9      	ldr	r1, [r7, #8]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f000 fb00 	bl	800c5f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	699a      	ldr	r2, [r3, #24]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	699a      	ldr	r2, [r3, #24]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	6999      	ldr	r1, [r3, #24]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	021a      	lsls	r2, r3, #8
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	430a      	orrs	r2, r1
 800c02a:	619a      	str	r2, [r3, #24]
      break;
 800c02c:	e084      	b.n	800c138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68b9      	ldr	r1, [r7, #8]
 800c034:	4618      	mov	r0, r3
 800c036:	f000 fb69 	bl	800c70c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	69da      	ldr	r2, [r3, #28]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f042 0208 	orr.w	r2, r2, #8
 800c048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	69da      	ldr	r2, [r3, #28]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f022 0204 	bic.w	r2, r2, #4
 800c058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	69d9      	ldr	r1, [r3, #28]
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	691a      	ldr	r2, [r3, #16]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	430a      	orrs	r2, r1
 800c06a:	61da      	str	r2, [r3, #28]
      break;
 800c06c:	e064      	b.n	800c138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68b9      	ldr	r1, [r7, #8]
 800c074:	4618      	mov	r0, r3
 800c076:	f000 fbd1 	bl	800c81c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	69da      	ldr	r2, [r3, #28]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	69da      	ldr	r2, [r3, #28]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	69d9      	ldr	r1, [r3, #28]
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	021a      	lsls	r2, r3, #8
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	61da      	str	r2, [r3, #28]
      break;
 800c0ae:	e043      	b.n	800c138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	68b9      	ldr	r1, [r7, #8]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f000 fc1a 	bl	800c8f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f042 0208 	orr.w	r2, r2, #8
 800c0ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f022 0204 	bic.w	r2, r2, #4
 800c0da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	691a      	ldr	r2, [r3, #16]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	430a      	orrs	r2, r1
 800c0ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c0ee:	e023      	b.n	800c138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68b9      	ldr	r1, [r7, #8]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f000 fc5e 	bl	800c9b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c10a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c11a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	021a      	lsls	r2, r3, #8
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	430a      	orrs	r2, r1
 800c12e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c130:	e002      	b.n	800c138 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	75fb      	strb	r3, [r7, #23]
      break;
 800c136:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c140:	7dfb      	ldrb	r3, [r7, #23]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3718      	adds	r7, #24
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop

0800c14c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c160:	2b01      	cmp	r3, #1
 800c162:	d101      	bne.n	800c168 <HAL_TIM_ConfigClockSource+0x1c>
 800c164:	2302      	movs	r3, #2
 800c166:	e0dc      	b.n	800c322 <HAL_TIM_ConfigClockSource+0x1d6>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2202      	movs	r2, #2
 800c174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	4b6a      	ldr	r3, [pc, #424]	; (800c32c <HAL_TIM_ConfigClockSource+0x1e0>)
 800c184:	4013      	ands	r3, r2
 800c186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c18e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a64      	ldr	r2, [pc, #400]	; (800c330 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	f000 80a9 	beq.w	800c2f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1a4:	4a62      	ldr	r2, [pc, #392]	; (800c330 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	f200 80ae 	bhi.w	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1ac:	4a61      	ldr	r2, [pc, #388]	; (800c334 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	f000 80a1 	beq.w	800c2f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1b4:	4a5f      	ldr	r2, [pc, #380]	; (800c334 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	f200 80a6 	bhi.w	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1bc:	4a5e      	ldr	r2, [pc, #376]	; (800c338 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	f000 8099 	beq.w	800c2f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1c4:	4a5c      	ldr	r2, [pc, #368]	; (800c338 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	f200 809e 	bhi.w	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c1d0:	f000 8091 	beq.w	800c2f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c1d8:	f200 8096 	bhi.w	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1e0:	f000 8089 	beq.w	800c2f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1e8:	f200 808e 	bhi.w	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1f0:	d03e      	beq.n	800c270 <HAL_TIM_ConfigClockSource+0x124>
 800c1f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1f6:	f200 8087 	bhi.w	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1fe:	f000 8086 	beq.w	800c30e <HAL_TIM_ConfigClockSource+0x1c2>
 800c202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c206:	d87f      	bhi.n	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c208:	2b70      	cmp	r3, #112	; 0x70
 800c20a:	d01a      	beq.n	800c242 <HAL_TIM_ConfigClockSource+0xf6>
 800c20c:	2b70      	cmp	r3, #112	; 0x70
 800c20e:	d87b      	bhi.n	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c210:	2b60      	cmp	r3, #96	; 0x60
 800c212:	d050      	beq.n	800c2b6 <HAL_TIM_ConfigClockSource+0x16a>
 800c214:	2b60      	cmp	r3, #96	; 0x60
 800c216:	d877      	bhi.n	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c218:	2b50      	cmp	r3, #80	; 0x50
 800c21a:	d03c      	beq.n	800c296 <HAL_TIM_ConfigClockSource+0x14a>
 800c21c:	2b50      	cmp	r3, #80	; 0x50
 800c21e:	d873      	bhi.n	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c220:	2b40      	cmp	r3, #64	; 0x40
 800c222:	d058      	beq.n	800c2d6 <HAL_TIM_ConfigClockSource+0x18a>
 800c224:	2b40      	cmp	r3, #64	; 0x40
 800c226:	d86f      	bhi.n	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c228:	2b30      	cmp	r3, #48	; 0x30
 800c22a:	d064      	beq.n	800c2f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c22c:	2b30      	cmp	r3, #48	; 0x30
 800c22e:	d86b      	bhi.n	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c230:	2b20      	cmp	r3, #32
 800c232:	d060      	beq.n	800c2f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c234:	2b20      	cmp	r3, #32
 800c236:	d867      	bhi.n	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d05c      	beq.n	800c2f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c23c:	2b10      	cmp	r3, #16
 800c23e:	d05a      	beq.n	800c2f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c240:	e062      	b.n	800c308 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6818      	ldr	r0, [r3, #0]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	6899      	ldr	r1, [r3, #8]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	f000 fc95 	bl	800cb80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c264:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	609a      	str	r2, [r3, #8]
      break;
 800c26e:	e04f      	b.n	800c310 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6818      	ldr	r0, [r3, #0]
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	6899      	ldr	r1, [r3, #8]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	f000 fc7e 	bl	800cb80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	689a      	ldr	r2, [r3, #8]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c292:	609a      	str	r2, [r3, #8]
      break;
 800c294:	e03c      	b.n	800c310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6818      	ldr	r0, [r3, #0]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	6859      	ldr	r1, [r3, #4]
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	f000 fbee 	bl	800ca84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2150      	movs	r1, #80	; 0x50
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 fc48 	bl	800cb44 <TIM_ITRx_SetConfig>
      break;
 800c2b4:	e02c      	b.n	800c310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6818      	ldr	r0, [r3, #0]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	6859      	ldr	r1, [r3, #4]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	f000 fc0d 	bl	800cae2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2160      	movs	r1, #96	; 0x60
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 fc38 	bl	800cb44 <TIM_ITRx_SetConfig>
      break;
 800c2d4:	e01c      	b.n	800c310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6818      	ldr	r0, [r3, #0]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	6859      	ldr	r1, [r3, #4]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f000 fbce 	bl	800ca84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2140      	movs	r1, #64	; 0x40
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 fc28 	bl	800cb44 <TIM_ITRx_SetConfig>
      break;
 800c2f4:	e00c      	b.n	800c310 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4619      	mov	r1, r3
 800c300:	4610      	mov	r0, r2
 800c302:	f000 fc1f 	bl	800cb44 <TIM_ITRx_SetConfig>
      break;
 800c306:	e003      	b.n	800c310 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	73fb      	strb	r3, [r7, #15]
      break;
 800c30c:	e000      	b.n	800c310 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c30e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c320:	7bfb      	ldrb	r3, [r7, #15]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	ffceff88 	.word	0xffceff88
 800c330:	00100040 	.word	0x00100040
 800c334:	00100030 	.word	0x00100030
 800c338:	00100020 	.word	0x00100020

0800c33c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a44      	ldr	r2, [pc, #272]	; (800c4b0 <TIM_Base_SetConfig+0x124>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d013      	beq.n	800c3cc <TIM_Base_SetConfig+0x40>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3aa:	d00f      	beq.n	800c3cc <TIM_Base_SetConfig+0x40>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a41      	ldr	r2, [pc, #260]	; (800c4b4 <TIM_Base_SetConfig+0x128>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d00b      	beq.n	800c3cc <TIM_Base_SetConfig+0x40>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a40      	ldr	r2, [pc, #256]	; (800c4b8 <TIM_Base_SetConfig+0x12c>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d007      	beq.n	800c3cc <TIM_Base_SetConfig+0x40>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a3f      	ldr	r2, [pc, #252]	; (800c4bc <TIM_Base_SetConfig+0x130>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d003      	beq.n	800c3cc <TIM_Base_SetConfig+0x40>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a3e      	ldr	r2, [pc, #248]	; (800c4c0 <TIM_Base_SetConfig+0x134>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d108      	bne.n	800c3de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4a33      	ldr	r2, [pc, #204]	; (800c4b0 <TIM_Base_SetConfig+0x124>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d027      	beq.n	800c436 <TIM_Base_SetConfig+0xaa>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3ec:	d023      	beq.n	800c436 <TIM_Base_SetConfig+0xaa>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4a30      	ldr	r2, [pc, #192]	; (800c4b4 <TIM_Base_SetConfig+0x128>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d01f      	beq.n	800c436 <TIM_Base_SetConfig+0xaa>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	4a2f      	ldr	r2, [pc, #188]	; (800c4b8 <TIM_Base_SetConfig+0x12c>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d01b      	beq.n	800c436 <TIM_Base_SetConfig+0xaa>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4a2e      	ldr	r2, [pc, #184]	; (800c4bc <TIM_Base_SetConfig+0x130>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d017      	beq.n	800c436 <TIM_Base_SetConfig+0xaa>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4a2d      	ldr	r2, [pc, #180]	; (800c4c0 <TIM_Base_SetConfig+0x134>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d013      	beq.n	800c436 <TIM_Base_SetConfig+0xaa>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	4a2c      	ldr	r2, [pc, #176]	; (800c4c4 <TIM_Base_SetConfig+0x138>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d00f      	beq.n	800c436 <TIM_Base_SetConfig+0xaa>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a2b      	ldr	r2, [pc, #172]	; (800c4c8 <TIM_Base_SetConfig+0x13c>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d00b      	beq.n	800c436 <TIM_Base_SetConfig+0xaa>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a2a      	ldr	r2, [pc, #168]	; (800c4cc <TIM_Base_SetConfig+0x140>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d007      	beq.n	800c436 <TIM_Base_SetConfig+0xaa>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a29      	ldr	r2, [pc, #164]	; (800c4d0 <TIM_Base_SetConfig+0x144>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d003      	beq.n	800c436 <TIM_Base_SetConfig+0xaa>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a28      	ldr	r2, [pc, #160]	; (800c4d4 <TIM_Base_SetConfig+0x148>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d108      	bne.n	800c448 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c43c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	4313      	orrs	r3, r2
 800c446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	4313      	orrs	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	689a      	ldr	r2, [r3, #8]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4a10      	ldr	r2, [pc, #64]	; (800c4b0 <TIM_Base_SetConfig+0x124>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d00f      	beq.n	800c494 <TIM_Base_SetConfig+0x108>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	4a12      	ldr	r2, [pc, #72]	; (800c4c0 <TIM_Base_SetConfig+0x134>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d00b      	beq.n	800c494 <TIM_Base_SetConfig+0x108>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a11      	ldr	r2, [pc, #68]	; (800c4c4 <TIM_Base_SetConfig+0x138>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d007      	beq.n	800c494 <TIM_Base_SetConfig+0x108>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4a10      	ldr	r2, [pc, #64]	; (800c4c8 <TIM_Base_SetConfig+0x13c>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d003      	beq.n	800c494 <TIM_Base_SetConfig+0x108>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a0f      	ldr	r2, [pc, #60]	; (800c4cc <TIM_Base_SetConfig+0x140>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d103      	bne.n	800c49c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	691a      	ldr	r2, [r3, #16]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	615a      	str	r2, [r3, #20]
}
 800c4a2:	bf00      	nop
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	40010000 	.word	0x40010000
 800c4b4:	40000400 	.word	0x40000400
 800c4b8:	40000800 	.word	0x40000800
 800c4bc:	40000c00 	.word	0x40000c00
 800c4c0:	40010400 	.word	0x40010400
 800c4c4:	40014000 	.word	0x40014000
 800c4c8:	40014400 	.word	0x40014400
 800c4cc:	40014800 	.word	0x40014800
 800c4d0:	4000e000 	.word	0x4000e000
 800c4d4:	4000e400 	.word	0x4000e400

0800c4d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b087      	sub	sp, #28
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	f023 0201 	bic.w	r2, r3, #1
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	4b37      	ldr	r3, [pc, #220]	; (800c5e0 <TIM_OC1_SetConfig+0x108>)
 800c504:	4013      	ands	r3, r2
 800c506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f023 0303 	bic.w	r3, r3, #3
 800c50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4313      	orrs	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	f023 0302 	bic.w	r3, r3, #2
 800c520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	4313      	orrs	r3, r2
 800c52a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4a2d      	ldr	r2, [pc, #180]	; (800c5e4 <TIM_OC1_SetConfig+0x10c>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d00f      	beq.n	800c554 <TIM_OC1_SetConfig+0x7c>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a2c      	ldr	r2, [pc, #176]	; (800c5e8 <TIM_OC1_SetConfig+0x110>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d00b      	beq.n	800c554 <TIM_OC1_SetConfig+0x7c>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a2b      	ldr	r2, [pc, #172]	; (800c5ec <TIM_OC1_SetConfig+0x114>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d007      	beq.n	800c554 <TIM_OC1_SetConfig+0x7c>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a2a      	ldr	r2, [pc, #168]	; (800c5f0 <TIM_OC1_SetConfig+0x118>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d003      	beq.n	800c554 <TIM_OC1_SetConfig+0x7c>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a29      	ldr	r2, [pc, #164]	; (800c5f4 <TIM_OC1_SetConfig+0x11c>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d10c      	bne.n	800c56e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	f023 0308 	bic.w	r3, r3, #8
 800c55a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	4313      	orrs	r3, r2
 800c564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f023 0304 	bic.w	r3, r3, #4
 800c56c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4a1c      	ldr	r2, [pc, #112]	; (800c5e4 <TIM_OC1_SetConfig+0x10c>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d00f      	beq.n	800c596 <TIM_OC1_SetConfig+0xbe>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4a1b      	ldr	r2, [pc, #108]	; (800c5e8 <TIM_OC1_SetConfig+0x110>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d00b      	beq.n	800c596 <TIM_OC1_SetConfig+0xbe>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4a1a      	ldr	r2, [pc, #104]	; (800c5ec <TIM_OC1_SetConfig+0x114>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d007      	beq.n	800c596 <TIM_OC1_SetConfig+0xbe>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a19      	ldr	r2, [pc, #100]	; (800c5f0 <TIM_OC1_SetConfig+0x118>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d003      	beq.n	800c596 <TIM_OC1_SetConfig+0xbe>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a18      	ldr	r2, [pc, #96]	; (800c5f4 <TIM_OC1_SetConfig+0x11c>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d111      	bne.n	800c5ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c59c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	695b      	ldr	r3, [r3, #20]
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	699b      	ldr	r3, [r3, #24]
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	693a      	ldr	r2, [r7, #16]
 800c5be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	685a      	ldr	r2, [r3, #4]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	697a      	ldr	r2, [r7, #20]
 800c5d2:	621a      	str	r2, [r3, #32]
}
 800c5d4:	bf00      	nop
 800c5d6:	371c      	adds	r7, #28
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	fffeff8f 	.word	0xfffeff8f
 800c5e4:	40010000 	.word	0x40010000
 800c5e8:	40010400 	.word	0x40010400
 800c5ec:	40014000 	.word	0x40014000
 800c5f0:	40014400 	.word	0x40014400
 800c5f4:	40014800 	.word	0x40014800

0800c5f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b087      	sub	sp, #28
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	f023 0210 	bic.w	r2, r3, #16
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	699b      	ldr	r3, [r3, #24]
 800c61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	4b34      	ldr	r3, [pc, #208]	; (800c6f4 <TIM_OC2_SetConfig+0xfc>)
 800c624:	4013      	ands	r3, r2
 800c626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c62e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	021b      	lsls	r3, r3, #8
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	4313      	orrs	r3, r2
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f023 0320 	bic.w	r3, r3, #32
 800c642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	011b      	lsls	r3, r3, #4
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a29      	ldr	r2, [pc, #164]	; (800c6f8 <TIM_OC2_SetConfig+0x100>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d003      	beq.n	800c660 <TIM_OC2_SetConfig+0x68>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a28      	ldr	r2, [pc, #160]	; (800c6fc <TIM_OC2_SetConfig+0x104>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d10d      	bne.n	800c67c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	011b      	lsls	r3, r3, #4
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	4313      	orrs	r3, r2
 800c672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c67a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a1e      	ldr	r2, [pc, #120]	; (800c6f8 <TIM_OC2_SetConfig+0x100>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d00f      	beq.n	800c6a4 <TIM_OC2_SetConfig+0xac>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a1d      	ldr	r2, [pc, #116]	; (800c6fc <TIM_OC2_SetConfig+0x104>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d00b      	beq.n	800c6a4 <TIM_OC2_SetConfig+0xac>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a1c      	ldr	r2, [pc, #112]	; (800c700 <TIM_OC2_SetConfig+0x108>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d007      	beq.n	800c6a4 <TIM_OC2_SetConfig+0xac>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a1b      	ldr	r2, [pc, #108]	; (800c704 <TIM_OC2_SetConfig+0x10c>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d003      	beq.n	800c6a4 <TIM_OC2_SetConfig+0xac>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a1a      	ldr	r2, [pc, #104]	; (800c708 <TIM_OC2_SetConfig+0x110>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d113      	bne.n	800c6cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	693a      	ldr	r2, [r7, #16]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	699b      	ldr	r3, [r3, #24]
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	693a      	ldr	r2, [r7, #16]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	697a      	ldr	r2, [r7, #20]
 800c6e4:	621a      	str	r2, [r3, #32]
}
 800c6e6:	bf00      	nop
 800c6e8:	371c      	adds	r7, #28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	feff8fff 	.word	0xfeff8fff
 800c6f8:	40010000 	.word	0x40010000
 800c6fc:	40010400 	.word	0x40010400
 800c700:	40014000 	.word	0x40014000
 800c704:	40014400 	.word	0x40014400
 800c708:	40014800 	.word	0x40014800

0800c70c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a1b      	ldr	r3, [r3, #32]
 800c71a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a1b      	ldr	r3, [r3, #32]
 800c726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	69db      	ldr	r3, [r3, #28]
 800c732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	4b33      	ldr	r3, [pc, #204]	; (800c804 <TIM_OC3_SetConfig+0xf8>)
 800c738:	4013      	ands	r3, r2
 800c73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f023 0303 	bic.w	r3, r3, #3
 800c742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	021b      	lsls	r3, r3, #8
 800c75c:	697a      	ldr	r2, [r7, #20]
 800c75e:	4313      	orrs	r3, r2
 800c760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a28      	ldr	r2, [pc, #160]	; (800c808 <TIM_OC3_SetConfig+0xfc>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d003      	beq.n	800c772 <TIM_OC3_SetConfig+0x66>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4a27      	ldr	r2, [pc, #156]	; (800c80c <TIM_OC3_SetConfig+0x100>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d10d      	bne.n	800c78e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	021b      	lsls	r3, r3, #8
 800c780:	697a      	ldr	r2, [r7, #20]
 800c782:	4313      	orrs	r3, r2
 800c784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c78c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a1d      	ldr	r2, [pc, #116]	; (800c808 <TIM_OC3_SetConfig+0xfc>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d00f      	beq.n	800c7b6 <TIM_OC3_SetConfig+0xaa>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a1c      	ldr	r2, [pc, #112]	; (800c80c <TIM_OC3_SetConfig+0x100>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d00b      	beq.n	800c7b6 <TIM_OC3_SetConfig+0xaa>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4a1b      	ldr	r2, [pc, #108]	; (800c810 <TIM_OC3_SetConfig+0x104>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d007      	beq.n	800c7b6 <TIM_OC3_SetConfig+0xaa>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a1a      	ldr	r2, [pc, #104]	; (800c814 <TIM_OC3_SetConfig+0x108>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d003      	beq.n	800c7b6 <TIM_OC3_SetConfig+0xaa>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a19      	ldr	r2, [pc, #100]	; (800c818 <TIM_OC3_SetConfig+0x10c>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d113      	bne.n	800c7de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	695b      	ldr	r3, [r3, #20]
 800c7ca:	011b      	lsls	r3, r3, #4
 800c7cc:	693a      	ldr	r2, [r7, #16]
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	011b      	lsls	r3, r3, #4
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	685a      	ldr	r2, [r3, #4]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	697a      	ldr	r2, [r7, #20]
 800c7f6:	621a      	str	r2, [r3, #32]
}
 800c7f8:	bf00      	nop
 800c7fa:	371c      	adds	r7, #28
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr
 800c804:	fffeff8f 	.word	0xfffeff8f
 800c808:	40010000 	.word	0x40010000
 800c80c:	40010400 	.word	0x40010400
 800c810:	40014000 	.word	0x40014000
 800c814:	40014400 	.word	0x40014400
 800c818:	40014800 	.word	0x40014800

0800c81c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b087      	sub	sp, #28
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a1b      	ldr	r3, [r3, #32]
 800c836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	69db      	ldr	r3, [r3, #28]
 800c842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	4b24      	ldr	r3, [pc, #144]	; (800c8d8 <TIM_OC4_SetConfig+0xbc>)
 800c848:	4013      	ands	r3, r2
 800c84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	021b      	lsls	r3, r3, #8
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	031b      	lsls	r3, r3, #12
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	4313      	orrs	r3, r2
 800c872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4a19      	ldr	r2, [pc, #100]	; (800c8dc <TIM_OC4_SetConfig+0xc0>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d00f      	beq.n	800c89c <TIM_OC4_SetConfig+0x80>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4a18      	ldr	r2, [pc, #96]	; (800c8e0 <TIM_OC4_SetConfig+0xc4>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d00b      	beq.n	800c89c <TIM_OC4_SetConfig+0x80>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4a17      	ldr	r2, [pc, #92]	; (800c8e4 <TIM_OC4_SetConfig+0xc8>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d007      	beq.n	800c89c <TIM_OC4_SetConfig+0x80>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4a16      	ldr	r2, [pc, #88]	; (800c8e8 <TIM_OC4_SetConfig+0xcc>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d003      	beq.n	800c89c <TIM_OC4_SetConfig+0x80>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a15      	ldr	r2, [pc, #84]	; (800c8ec <TIM_OC4_SetConfig+0xd0>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d109      	bne.n	800c8b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	695b      	ldr	r3, [r3, #20]
 800c8a8:	019b      	lsls	r3, r3, #6
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	693a      	ldr	r2, [r7, #16]
 800c8c8:	621a      	str	r2, [r3, #32]
}
 800c8ca:	bf00      	nop
 800c8cc:	371c      	adds	r7, #28
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	feff8fff 	.word	0xfeff8fff
 800c8dc:	40010000 	.word	0x40010000
 800c8e0:	40010400 	.word	0x40010400
 800c8e4:	40014000 	.word	0x40014000
 800c8e8:	40014400 	.word	0x40014400
 800c8ec:	40014800 	.word	0x40014800

0800c8f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b087      	sub	sp, #28
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	4b21      	ldr	r3, [pc, #132]	; (800c9a0 <TIM_OC5_SetConfig+0xb0>)
 800c91c:	4013      	ands	r3, r2
 800c91e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	4313      	orrs	r3, r2
 800c928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c930:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	041b      	lsls	r3, r3, #16
 800c938:	693a      	ldr	r2, [r7, #16]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a18      	ldr	r2, [pc, #96]	; (800c9a4 <TIM_OC5_SetConfig+0xb4>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d00f      	beq.n	800c966 <TIM_OC5_SetConfig+0x76>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4a17      	ldr	r2, [pc, #92]	; (800c9a8 <TIM_OC5_SetConfig+0xb8>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d00b      	beq.n	800c966 <TIM_OC5_SetConfig+0x76>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	4a16      	ldr	r2, [pc, #88]	; (800c9ac <TIM_OC5_SetConfig+0xbc>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d007      	beq.n	800c966 <TIM_OC5_SetConfig+0x76>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a15      	ldr	r2, [pc, #84]	; (800c9b0 <TIM_OC5_SetConfig+0xc0>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d003      	beq.n	800c966 <TIM_OC5_SetConfig+0x76>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a14      	ldr	r2, [pc, #80]	; (800c9b4 <TIM_OC5_SetConfig+0xc4>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d109      	bne.n	800c97a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c96c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	021b      	lsls	r3, r3, #8
 800c974:	697a      	ldr	r2, [r7, #20]
 800c976:	4313      	orrs	r3, r2
 800c978:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	685a      	ldr	r2, [r3, #4]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	693a      	ldr	r2, [r7, #16]
 800c992:	621a      	str	r2, [r3, #32]
}
 800c994:	bf00      	nop
 800c996:	371c      	adds	r7, #28
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr
 800c9a0:	fffeff8f 	.word	0xfffeff8f
 800c9a4:	40010000 	.word	0x40010000
 800c9a8:	40010400 	.word	0x40010400
 800c9ac:	40014000 	.word	0x40014000
 800c9b0:	40014400 	.word	0x40014400
 800c9b4:	40014800 	.word	0x40014800

0800c9b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b087      	sub	sp, #28
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
 800c9d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	4b22      	ldr	r3, [pc, #136]	; (800ca6c <TIM_OC6_SetConfig+0xb4>)
 800c9e4:	4013      	ands	r3, r2
 800c9e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	021b      	lsls	r3, r3, #8
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c9fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	051b      	lsls	r3, r3, #20
 800ca02:	693a      	ldr	r2, [r7, #16]
 800ca04:	4313      	orrs	r3, r2
 800ca06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a19      	ldr	r2, [pc, #100]	; (800ca70 <TIM_OC6_SetConfig+0xb8>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d00f      	beq.n	800ca30 <TIM_OC6_SetConfig+0x78>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a18      	ldr	r2, [pc, #96]	; (800ca74 <TIM_OC6_SetConfig+0xbc>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d00b      	beq.n	800ca30 <TIM_OC6_SetConfig+0x78>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4a17      	ldr	r2, [pc, #92]	; (800ca78 <TIM_OC6_SetConfig+0xc0>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d007      	beq.n	800ca30 <TIM_OC6_SetConfig+0x78>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a16      	ldr	r2, [pc, #88]	; (800ca7c <TIM_OC6_SetConfig+0xc4>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d003      	beq.n	800ca30 <TIM_OC6_SetConfig+0x78>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a15      	ldr	r2, [pc, #84]	; (800ca80 <TIM_OC6_SetConfig+0xc8>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d109      	bne.n	800ca44 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	695b      	ldr	r3, [r3, #20]
 800ca3c:	029b      	lsls	r3, r3, #10
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	693a      	ldr	r2, [r7, #16]
 800ca5c:	621a      	str	r2, [r3, #32]
}
 800ca5e:	bf00      	nop
 800ca60:	371c      	adds	r7, #28
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	feff8fff 	.word	0xfeff8fff
 800ca70:	40010000 	.word	0x40010000
 800ca74:	40010400 	.word	0x40010400
 800ca78:	40014000 	.word	0x40014000
 800ca7c:	40014400 	.word	0x40014400
 800ca80:	40014800 	.word	0x40014800

0800ca84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b087      	sub	sp, #28
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	f023 0201 	bic.w	r2, r3, #1
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800caae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	011b      	lsls	r3, r3, #4
 800cab4:	693a      	ldr	r2, [r7, #16]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	f023 030a 	bic.w	r3, r3, #10
 800cac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	621a      	str	r2, [r3, #32]
}
 800cad6:	bf00      	nop
 800cad8:	371c      	adds	r7, #28
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr

0800cae2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cae2:	b480      	push	{r7}
 800cae4:	b087      	sub	sp, #28
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	60f8      	str	r0, [r7, #12]
 800caea:	60b9      	str	r1, [r7, #8]
 800caec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6a1b      	ldr	r3, [r3, #32]
 800caf2:	f023 0210 	bic.w	r2, r3, #16
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	031b      	lsls	r3, r3, #12
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	4313      	orrs	r3, r2
 800cb16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	011b      	lsls	r3, r3, #4
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	697a      	ldr	r2, [r7, #20]
 800cb2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	693a      	ldr	r2, [r7, #16]
 800cb34:	621a      	str	r2, [r3, #32]
}
 800cb36:	bf00      	nop
 800cb38:	371c      	adds	r7, #28
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
	...

0800cb44 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4b09      	ldr	r3, [pc, #36]	; (800cb7c <TIM_ITRx_SetConfig+0x38>)
 800cb58:	4013      	ands	r3, r2
 800cb5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	f043 0307 	orr.w	r3, r3, #7
 800cb66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	609a      	str	r2, [r3, #8]
}
 800cb6e:	bf00      	nop
 800cb70:	3714      	adds	r7, #20
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	ffcfff8f 	.word	0xffcfff8f

0800cb80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b087      	sub	sp, #28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
 800cb8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	021a      	lsls	r2, r3, #8
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	431a      	orrs	r2, r3
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	4313      	orrs	r3, r2
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	609a      	str	r2, [r3, #8]
}
 800cbb4:	bf00      	nop
 800cbb6:	371c      	adds	r7, #28
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b087      	sub	sp, #28
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	f003 031f 	and.w	r3, r3, #31
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6a1a      	ldr	r2, [r3, #32]
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	43db      	mvns	r3, r3
 800cbe2:	401a      	ands	r2, r3
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6a1a      	ldr	r2, [r3, #32]
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	f003 031f 	and.w	r3, r3, #31
 800cbf2:	6879      	ldr	r1, [r7, #4]
 800cbf4:	fa01 f303 	lsl.w	r3, r1, r3
 800cbf8:	431a      	orrs	r2, r3
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	621a      	str	r2, [r3, #32]
}
 800cbfe:	bf00      	nop
 800cc00:	371c      	adds	r7, #28
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr
	...

0800cc0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d101      	bne.n	800cc24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc20:	2302      	movs	r3, #2
 800cc22:	e077      	b.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2202      	movs	r2, #2
 800cc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a35      	ldr	r2, [pc, #212]	; (800cd20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d004      	beq.n	800cc58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a34      	ldr	r2, [pc, #208]	; (800cd24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d108      	bne.n	800cc6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a25      	ldr	r2, [pc, #148]	; (800cd20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d02c      	beq.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc96:	d027      	beq.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a22      	ldr	r2, [pc, #136]	; (800cd28 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d022      	beq.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a21      	ldr	r2, [pc, #132]	; (800cd2c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d01d      	beq.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a1f      	ldr	r2, [pc, #124]	; (800cd30 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d018      	beq.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a1a      	ldr	r2, [pc, #104]	; (800cd24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d013      	beq.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a1b      	ldr	r2, [pc, #108]	; (800cd34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d00e      	beq.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a1a      	ldr	r2, [pc, #104]	; (800cd38 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d009      	beq.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a18      	ldr	r2, [pc, #96]	; (800cd3c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d004      	beq.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a17      	ldr	r2, [pc, #92]	; (800cd40 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d10c      	bne.n	800cd02 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3714      	adds	r7, #20
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	40010000 	.word	0x40010000
 800cd24:	40010400 	.word	0x40010400
 800cd28:	40000400 	.word	0x40000400
 800cd2c:	40000800 	.word	0x40000800
 800cd30:	40000c00 	.word	0x40000c00
 800cd34:	40001800 	.word	0x40001800
 800cd38:	40014000 	.word	0x40014000
 800cd3c:	4000e000 	.word	0x4000e000
 800cd40:	4000e400 	.word	0x4000e400

0800cd44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d101      	bne.n	800cd60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	e087      	b.n	800ce70 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	4313      	orrs	r3, r2
 800cd74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	695b      	ldr	r3, [r3, #20]
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	041b      	lsls	r3, r3, #16
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a27      	ldr	r2, [pc, #156]	; (800ce7c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d004      	beq.n	800cdee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a25      	ldr	r2, [pc, #148]	; (800ce80 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d106      	bne.n	800cdfc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	69db      	ldr	r3, [r3, #28]
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a1e      	ldr	r2, [pc, #120]	; (800ce7c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d004      	beq.n	800ce10 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a1d      	ldr	r2, [pc, #116]	; (800ce80 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d126      	bne.n	800ce5e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1a:	051b      	lsls	r3, r3, #20
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a0e      	ldr	r2, [pc, #56]	; (800ce7c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d004      	beq.n	800ce50 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a0d      	ldr	r2, [pc, #52]	; (800ce80 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d106      	bne.n	800ce5e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	40010000 	.word	0x40010000
 800ce80:	40010400 	.word	0x40010400

0800ce84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d101      	bne.n	800ced2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	e042      	b.n	800cf58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d106      	bne.n	800ceea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7f8 f9ef 	bl	80052c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2224      	movs	r2, #36	; 0x24
 800ceee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f022 0201 	bic.w	r2, r2, #1
 800cf00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fd18 	bl	800d938 <UART_SetConfig>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d101      	bne.n	800cf12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e022      	b.n	800cf58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d002      	beq.n	800cf20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f001 fb78 	bl	800e610 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	685a      	ldr	r2, [r3, #4]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	689a      	ldr	r2, [r3, #8]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f042 0201 	orr.w	r2, r2, #1
 800cf4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f001 fbff 	bl	800e754 <UART_CheckIdleState>
 800cf56:	4603      	mov	r3, r0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d101      	bne.n	800cf72 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e02e      	b.n	800cfd0 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2224      	movs	r2, #36	; 0x24
 800cf76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f022 0201 	bic.w	r2, r2, #1
 800cf88:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2200      	movs	r2, #0
 800cf98:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7f8 fa76 	bl	8005494 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfce:	2300      	movs	r3, #0
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08a      	sub	sp, #40	; 0x28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfec:	2b20      	cmp	r3, #32
 800cfee:	d17a      	bne.n	800d0e6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <HAL_UART_Transmit_DMA+0x24>
 800cff6:	88fb      	ldrh	r3, [r7, #6]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d101      	bne.n	800d000 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	e073      	b.n	800d0e8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d006:	2b01      	cmp	r3, #1
 800d008:	d101      	bne.n	800d00e <HAL_UART_Transmit_DMA+0x36>
 800d00a:	2302      	movs	r3, #2
 800d00c:	e06c      	b.n	800d0e8 <HAL_UART_Transmit_DMA+0x110>
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	88fa      	ldrh	r2, [r7, #6]
 800d020:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	88fa      	ldrh	r2, [r7, #6]
 800d028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2221      	movs	r2, #33	; 0x21
 800d038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d040:	2b00      	cmp	r3, #0
 800d042:	d02c      	beq.n	800d09e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d048:	4a29      	ldr	r2, [pc, #164]	; (800d0f0 <HAL_UART_Transmit_DMA+0x118>)
 800d04a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d050:	4a28      	ldr	r2, [pc, #160]	; (800d0f4 <HAL_UART_Transmit_DMA+0x11c>)
 800d052:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d058:	4a27      	ldr	r2, [pc, #156]	; (800d0f8 <HAL_UART_Transmit_DMA+0x120>)
 800d05a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d060:	2200      	movs	r2, #0
 800d062:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d06c:	4619      	mov	r1, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3328      	adds	r3, #40	; 0x28
 800d074:	461a      	mov	r2, r3
 800d076:	88fb      	ldrh	r3, [r7, #6]
 800d078:	f7f9 fa7a 	bl	8006570 <HAL_DMA_Start_IT>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d00d      	beq.n	800d09e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2210      	movs	r2, #16
 800d086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2220      	movs	r2, #32
 800d096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	e024      	b.n	800d0e8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2240      	movs	r2, #64	; 0x40
 800d0a4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	3308      	adds	r3, #8
 800d0b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	e853 3f00 	ldrex	r3, [r3]
 800d0bc:	613b      	str	r3, [r7, #16]
   return(result);
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	3308      	adds	r3, #8
 800d0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ce:	623a      	str	r2, [r7, #32]
 800d0d0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d2:	69f9      	ldr	r1, [r7, #28]
 800d0d4:	6a3a      	ldr	r2, [r7, #32]
 800d0d6:	e841 2300 	strex	r3, r2, [r1]
 800d0da:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1e5      	bne.n	800d0ae <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	e000      	b.n	800d0e8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d0e6:	2302      	movs	r3, #2
  }
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3728      	adds	r7, #40	; 0x28
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	0800ec1d 	.word	0x0800ec1d
 800d0f4:	0800ecb3 	.word	0x0800ecb3
 800d0f8:	0800ee29 	.word	0x0800ee29

0800d0fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b08a      	sub	sp, #40	; 0x28
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	4613      	mov	r3, r2
 800d108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d110:	2b20      	cmp	r3, #32
 800d112:	d142      	bne.n	800d19a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <HAL_UART_Receive_DMA+0x24>
 800d11a:	88fb      	ldrh	r3, [r7, #6]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e03b      	b.n	800d19c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d101      	bne.n	800d132 <HAL_UART_Receive_DMA+0x36>
 800d12e:	2302      	movs	r3, #2
 800d130:	e034      	b.n	800d19c <HAL_UART_Receive_DMA+0xa0>
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2201      	movs	r2, #1
 800d136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a17      	ldr	r2, [pc, #92]	; (800d1a4 <HAL_UART_Receive_DMA+0xa8>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d01f      	beq.n	800d18a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d154:	2b00      	cmp	r3, #0
 800d156:	d018      	beq.n	800d18a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	e853 3f00 	ldrex	r3, [r3]
 800d164:	613b      	str	r3, [r7, #16]
   return(result);
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d16c:	627b      	str	r3, [r7, #36]	; 0x24
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	461a      	mov	r2, r3
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	623b      	str	r3, [r7, #32]
 800d178:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d17a:	69f9      	ldr	r1, [r7, #28]
 800d17c:	6a3a      	ldr	r2, [r7, #32]
 800d17e:	e841 2300 	strex	r3, r2, [r1]
 800d182:	61bb      	str	r3, [r7, #24]
   return(result);
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d1e6      	bne.n	800d158 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d18a:	88fb      	ldrh	r3, [r7, #6]
 800d18c:	461a      	mov	r2, r3
 800d18e:	68b9      	ldr	r1, [r7, #8]
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f001 fbf3 	bl	800e97c <UART_Start_Receive_DMA>
 800d196:	4603      	mov	r3, r0
 800d198:	e000      	b.n	800d19c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d19a:	2302      	movs	r3, #2
  }
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3728      	adds	r7, #40	; 0x28
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	58000c00 	.word	0x58000c00

0800d1a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b0ba      	sub	sp, #232	; 0xe8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	69db      	ldr	r3, [r3, #28]
 800d1b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d1ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d1d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d1d6:	4013      	ands	r3, r2
 800d1d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d1dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d11b      	bne.n	800d21c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1e8:	f003 0320 	and.w	r3, r3, #32
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d015      	beq.n	800d21c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1f4:	f003 0320 	and.w	r3, r3, #32
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d105      	bne.n	800d208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d009      	beq.n	800d21c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 835a 	beq.w	800d8c6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	4798      	blx	r3
      }
      return;
 800d21a:	e354      	b.n	800d8c6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d21c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d220:	2b00      	cmp	r3, #0
 800d222:	f000 811f 	beq.w	800d464 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d22a:	4b8b      	ldr	r3, [pc, #556]	; (800d458 <HAL_UART_IRQHandler+0x2b0>)
 800d22c:	4013      	ands	r3, r2
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d106      	bne.n	800d240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d236:	4b89      	ldr	r3, [pc, #548]	; (800d45c <HAL_UART_IRQHandler+0x2b4>)
 800d238:	4013      	ands	r3, r2
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f000 8112 	beq.w	800d464 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d011      	beq.n	800d270 <HAL_UART_IRQHandler+0xc8>
 800d24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00b      	beq.n	800d270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2201      	movs	r2, #1
 800d25e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d266:	f043 0201 	orr.w	r2, r3, #1
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d274:	f003 0302 	and.w	r3, r3, #2
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d011      	beq.n	800d2a0 <HAL_UART_IRQHandler+0xf8>
 800d27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d280:	f003 0301 	and.w	r3, r3, #1
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00b      	beq.n	800d2a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2202      	movs	r2, #2
 800d28e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d296:	f043 0204 	orr.w	r2, r3, #4
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2a4:	f003 0304 	and.w	r3, r3, #4
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d011      	beq.n	800d2d0 <HAL_UART_IRQHandler+0x128>
 800d2ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00b      	beq.n	800d2d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2204      	movs	r2, #4
 800d2be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2c6:	f043 0202 	orr.w	r2, r3, #2
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2d4:	f003 0308 	and.w	r3, r3, #8
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d017      	beq.n	800d30c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2e0:	f003 0320 	and.w	r3, r3, #32
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d105      	bne.n	800d2f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d2e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d2ec:	4b5a      	ldr	r3, [pc, #360]	; (800d458 <HAL_UART_IRQHandler+0x2b0>)
 800d2ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00b      	beq.n	800d30c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2208      	movs	r2, #8
 800d2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d302:	f043 0208 	orr.w	r2, r3, #8
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d314:	2b00      	cmp	r3, #0
 800d316:	d012      	beq.n	800d33e <HAL_UART_IRQHandler+0x196>
 800d318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d31c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00c      	beq.n	800d33e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d32c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d334:	f043 0220 	orr.w	r2, r3, #32
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 82c0 	beq.w	800d8ca <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d34e:	f003 0320 	and.w	r3, r3, #32
 800d352:	2b00      	cmp	r3, #0
 800d354:	d013      	beq.n	800d37e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d35a:	f003 0320 	and.w	r3, r3, #32
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d105      	bne.n	800d36e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d007      	beq.n	800d37e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d372:	2b00      	cmp	r3, #0
 800d374:	d003      	beq.n	800d37e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d392:	2b40      	cmp	r3, #64	; 0x40
 800d394:	d005      	beq.n	800d3a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d39a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d04f      	beq.n	800d442 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f001 fbd4 	bl	800eb50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b2:	2b40      	cmp	r3, #64	; 0x40
 800d3b4:	d141      	bne.n	800d43a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3308      	adds	r3, #8
 800d3bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d3c4:	e853 3f00 	ldrex	r3, [r3]
 800d3c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d3cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	3308      	adds	r3, #8
 800d3de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d3e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d3e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d3ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d3f2:	e841 2300 	strex	r3, r2, [r1]
 800d3f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d3fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1d9      	bne.n	800d3b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d406:	2b00      	cmp	r3, #0
 800d408:	d013      	beq.n	800d432 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d40e:	4a14      	ldr	r2, [pc, #80]	; (800d460 <HAL_UART_IRQHandler+0x2b8>)
 800d410:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d416:	4618      	mov	r0, r3
 800d418:	f7f9 fe32 	bl	8007080 <HAL_DMA_Abort_IT>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d017      	beq.n	800d452 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d42c:	4610      	mov	r0, r2
 800d42e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d430:	e00f      	b.n	800d452 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7f6 feb8 	bl	80041a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d438:	e00b      	b.n	800d452 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7f6 feb4 	bl	80041a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d440:	e007      	b.n	800d452 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7f6 feb0 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d450:	e23b      	b.n	800d8ca <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d452:	bf00      	nop
    return;
 800d454:	e239      	b.n	800d8ca <HAL_UART_IRQHandler+0x722>
 800d456:	bf00      	nop
 800d458:	10000001 	.word	0x10000001
 800d45c:	04000120 	.word	0x04000120
 800d460:	0800eea9 	.word	0x0800eea9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d468:	2b01      	cmp	r3, #1
 800d46a:	f040 81ce 	bne.w	800d80a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d472:	f003 0310 	and.w	r3, r3, #16
 800d476:	2b00      	cmp	r3, #0
 800d478:	f000 81c7 	beq.w	800d80a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d480:	f003 0310 	and.w	r3, r3, #16
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 81c0 	beq.w	800d80a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2210      	movs	r2, #16
 800d490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d49c:	2b40      	cmp	r3, #64	; 0x40
 800d49e:	f040 813b 	bne.w	800d718 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a8b      	ldr	r2, [pc, #556]	; (800d6d8 <HAL_UART_IRQHandler+0x530>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d059      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a89      	ldr	r2, [pc, #548]	; (800d6dc <HAL_UART_IRQHandler+0x534>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d053      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a87      	ldr	r2, [pc, #540]	; (800d6e0 <HAL_UART_IRQHandler+0x538>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d04d      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4a85      	ldr	r2, [pc, #532]	; (800d6e4 <HAL_UART_IRQHandler+0x53c>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d047      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a83      	ldr	r2, [pc, #524]	; (800d6e8 <HAL_UART_IRQHandler+0x540>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d041      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a81      	ldr	r2, [pc, #516]	; (800d6ec <HAL_UART_IRQHandler+0x544>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d03b      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a7f      	ldr	r2, [pc, #508]	; (800d6f0 <HAL_UART_IRQHandler+0x548>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d035      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a7d      	ldr	r2, [pc, #500]	; (800d6f4 <HAL_UART_IRQHandler+0x54c>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d02f      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a7b      	ldr	r2, [pc, #492]	; (800d6f8 <HAL_UART_IRQHandler+0x550>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d029      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a79      	ldr	r2, [pc, #484]	; (800d6fc <HAL_UART_IRQHandler+0x554>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d023      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a77      	ldr	r2, [pc, #476]	; (800d700 <HAL_UART_IRQHandler+0x558>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d01d      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a75      	ldr	r2, [pc, #468]	; (800d704 <HAL_UART_IRQHandler+0x55c>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d017      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a73      	ldr	r2, [pc, #460]	; (800d708 <HAL_UART_IRQHandler+0x560>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d011      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a71      	ldr	r2, [pc, #452]	; (800d70c <HAL_UART_IRQHandler+0x564>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d00b      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a6f      	ldr	r2, [pc, #444]	; (800d710 <HAL_UART_IRQHandler+0x568>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d005      	beq.n	800d562 <HAL_UART_IRQHandler+0x3ba>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a6d      	ldr	r2, [pc, #436]	; (800d714 <HAL_UART_IRQHandler+0x56c>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d105      	bne.n	800d56e <HAL_UART_IRQHandler+0x3c6>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	e004      	b.n	800d578 <HAL_UART_IRQHandler+0x3d0>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	b29b      	uxth	r3, r3
 800d578:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d57c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d580:	2b00      	cmp	r3, #0
 800d582:	f000 81a4 	beq.w	800d8ce <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d58c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d590:	429a      	cmp	r2, r3
 800d592:	f080 819c 	bcs.w	800d8ce <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d59c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5aa:	f000 8086 	beq.w	800d6ba <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d5ba:	e853 3f00 	ldrex	r3, [r3]
 800d5be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d5c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d5d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d5dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d5e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d5e8:	e841 2300 	strex	r3, r2, [r1]
 800d5ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d5f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1da      	bne.n	800d5ae <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d602:	e853 3f00 	ldrex	r3, [r3]
 800d606:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d60a:	f023 0301 	bic.w	r3, r3, #1
 800d60e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	3308      	adds	r3, #8
 800d618:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d61c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d620:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d622:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d624:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d628:	e841 2300 	strex	r3, r2, [r1]
 800d62c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d62e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1e1      	bne.n	800d5f8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	3308      	adds	r3, #8
 800d63a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d63c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d63e:	e853 3f00 	ldrex	r3, [r3]
 800d642:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d64a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	3308      	adds	r3, #8
 800d654:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d658:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d65a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d65c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d65e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d660:	e841 2300 	strex	r3, r2, [r1]
 800d664:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1e3      	bne.n	800d634 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2220      	movs	r2, #32
 800d670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d682:	e853 3f00 	ldrex	r3, [r3]
 800d686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d68a:	f023 0310 	bic.w	r3, r3, #16
 800d68e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	461a      	mov	r2, r3
 800d698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d69c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d69e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6a4:	e841 2300 	strex	r3, r2, [r1]
 800d6a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1e4      	bne.n	800d67a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7f9 f9c5 	bl	8006a44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f926 	bl	800d920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d6d4:	e0fb      	b.n	800d8ce <HAL_UART_IRQHandler+0x726>
 800d6d6:	bf00      	nop
 800d6d8:	40020010 	.word	0x40020010
 800d6dc:	40020028 	.word	0x40020028
 800d6e0:	40020040 	.word	0x40020040
 800d6e4:	40020058 	.word	0x40020058
 800d6e8:	40020070 	.word	0x40020070
 800d6ec:	40020088 	.word	0x40020088
 800d6f0:	400200a0 	.word	0x400200a0
 800d6f4:	400200b8 	.word	0x400200b8
 800d6f8:	40020410 	.word	0x40020410
 800d6fc:	40020428 	.word	0x40020428
 800d700:	40020440 	.word	0x40020440
 800d704:	40020458 	.word	0x40020458
 800d708:	40020470 	.word	0x40020470
 800d70c:	40020488 	.word	0x40020488
 800d710:	400204a0 	.word	0x400204a0
 800d714:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d724:	b29b      	uxth	r3, r3
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d732:	b29b      	uxth	r3, r3
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 80cc 	beq.w	800d8d2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d73a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d73e:	2b00      	cmp	r3, #0
 800d740:	f000 80c7 	beq.w	800d8d2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74c:	e853 3f00 	ldrex	r3, [r3]
 800d750:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d754:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	461a      	mov	r2, r3
 800d762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d766:	647b      	str	r3, [r7, #68]	; 0x44
 800d768:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d76c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d76e:	e841 2300 	strex	r3, r2, [r1]
 800d772:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1e4      	bne.n	800d744 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	3308      	adds	r3, #8
 800d780:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	e853 3f00 	ldrex	r3, [r3]
 800d788:	623b      	str	r3, [r7, #32]
   return(result);
 800d78a:	6a3a      	ldr	r2, [r7, #32]
 800d78c:	4b54      	ldr	r3, [pc, #336]	; (800d8e0 <HAL_UART_IRQHandler+0x738>)
 800d78e:	4013      	ands	r3, r2
 800d790:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	3308      	adds	r3, #8
 800d79a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d79e:	633a      	str	r2, [r7, #48]	; 0x30
 800d7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7a6:	e841 2300 	strex	r3, r2, [r1]
 800d7aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1e3      	bne.n	800d77a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2220      	movs	r2, #32
 800d7b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	e853 3f00 	ldrex	r3, [r3]
 800d7d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f023 0310 	bic.w	r3, r3, #16
 800d7da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d7e8:	61fb      	str	r3, [r7, #28]
 800d7ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ec:	69b9      	ldr	r1, [r7, #24]
 800d7ee:	69fa      	ldr	r2, [r7, #28]
 800d7f0:	e841 2300 	strex	r3, r2, [r1]
 800d7f4:	617b      	str	r3, [r7, #20]
   return(result);
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1e4      	bne.n	800d7c6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d7fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f88c 	bl	800d920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d808:	e063      	b.n	800d8d2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d80e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00e      	beq.n	800d834 <HAL_UART_IRQHandler+0x68c>
 800d816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d81a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d008      	beq.n	800d834 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d82a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f001 fb7c 	bl	800ef2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d832:	e051      	b.n	800d8d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d014      	beq.n	800d86a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d105      	bne.n	800d858 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d008      	beq.n	800d86a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d03a      	beq.n	800d8d6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	4798      	blx	r3
    }
    return;
 800d868:	e035      	b.n	800d8d6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d872:	2b00      	cmp	r3, #0
 800d874:	d009      	beq.n	800d88a <HAL_UART_IRQHandler+0x6e2>
 800d876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d003      	beq.n	800d88a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f001 fb26 	bl	800eed4 <UART_EndTransmit_IT>
    return;
 800d888:	e026      	b.n	800d8d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d88a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d88e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d892:	2b00      	cmp	r3, #0
 800d894:	d009      	beq.n	800d8aa <HAL_UART_IRQHandler+0x702>
 800d896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d89a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d003      	beq.n	800d8aa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f001 fb55 	bl	800ef52 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8a8:	e016      	b.n	800d8d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d8aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d010      	beq.n	800d8d8 <HAL_UART_IRQHandler+0x730>
 800d8b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	da0c      	bge.n	800d8d8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f001 fb3d 	bl	800ef3e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8c4:	e008      	b.n	800d8d8 <HAL_UART_IRQHandler+0x730>
      return;
 800d8c6:	bf00      	nop
 800d8c8:	e006      	b.n	800d8d8 <HAL_UART_IRQHandler+0x730>
    return;
 800d8ca:	bf00      	nop
 800d8cc:	e004      	b.n	800d8d8 <HAL_UART_IRQHandler+0x730>
      return;
 800d8ce:	bf00      	nop
 800d8d0:	e002      	b.n	800d8d8 <HAL_UART_IRQHandler+0x730>
      return;
 800d8d2:	bf00      	nop
 800d8d4:	e000      	b.n	800d8d8 <HAL_UART_IRQHandler+0x730>
    return;
 800d8d6:	bf00      	nop
  }
}
 800d8d8:	37e8      	adds	r7, #232	; 0xe8
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	effffffe 	.word	0xeffffffe

0800d8e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d8ec:	bf00      	nop
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d914:	bf00      	nop
 800d916:	370c      	adds	r7, #12
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d92c:	bf00      	nop
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d93c:	b092      	sub	sp, #72	; 0x48
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d942:	2300      	movs	r3, #0
 800d944:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	689a      	ldr	r2, [r3, #8]
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	691b      	ldr	r3, [r3, #16]
 800d950:	431a      	orrs	r2, r3
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	695b      	ldr	r3, [r3, #20]
 800d956:	431a      	orrs	r2, r3
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	69db      	ldr	r3, [r3, #28]
 800d95c:	4313      	orrs	r3, r2
 800d95e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	4bbe      	ldr	r3, [pc, #760]	; (800dc60 <UART_SetConfig+0x328>)
 800d968:	4013      	ands	r3, r2
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	6812      	ldr	r2, [r2, #0]
 800d96e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d970:	430b      	orrs	r3, r1
 800d972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	68da      	ldr	r2, [r3, #12]
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	430a      	orrs	r2, r1
 800d988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4ab3      	ldr	r2, [pc, #716]	; (800dc64 <UART_SetConfig+0x32c>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d004      	beq.n	800d9a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	6a1b      	ldr	r3, [r3, #32]
 800d99e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	689a      	ldr	r2, [r3, #8]
 800d9aa:	4baf      	ldr	r3, [pc, #700]	; (800dc68 <UART_SetConfig+0x330>)
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	6812      	ldr	r2, [r2, #0]
 800d9b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9b4:	430b      	orrs	r3, r1
 800d9b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9be:	f023 010f 	bic.w	r1, r3, #15
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	430a      	orrs	r2, r1
 800d9cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4aa6      	ldr	r2, [pc, #664]	; (800dc6c <UART_SetConfig+0x334>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d177      	bne.n	800dac8 <UART_SetConfig+0x190>
 800d9d8:	4ba5      	ldr	r3, [pc, #660]	; (800dc70 <UART_SetConfig+0x338>)
 800d9da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d9e0:	2b28      	cmp	r3, #40	; 0x28
 800d9e2:	d86d      	bhi.n	800dac0 <UART_SetConfig+0x188>
 800d9e4:	a201      	add	r2, pc, #4	; (adr r2, 800d9ec <UART_SetConfig+0xb4>)
 800d9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ea:	bf00      	nop
 800d9ec:	0800da91 	.word	0x0800da91
 800d9f0:	0800dac1 	.word	0x0800dac1
 800d9f4:	0800dac1 	.word	0x0800dac1
 800d9f8:	0800dac1 	.word	0x0800dac1
 800d9fc:	0800dac1 	.word	0x0800dac1
 800da00:	0800dac1 	.word	0x0800dac1
 800da04:	0800dac1 	.word	0x0800dac1
 800da08:	0800dac1 	.word	0x0800dac1
 800da0c:	0800da99 	.word	0x0800da99
 800da10:	0800dac1 	.word	0x0800dac1
 800da14:	0800dac1 	.word	0x0800dac1
 800da18:	0800dac1 	.word	0x0800dac1
 800da1c:	0800dac1 	.word	0x0800dac1
 800da20:	0800dac1 	.word	0x0800dac1
 800da24:	0800dac1 	.word	0x0800dac1
 800da28:	0800dac1 	.word	0x0800dac1
 800da2c:	0800daa1 	.word	0x0800daa1
 800da30:	0800dac1 	.word	0x0800dac1
 800da34:	0800dac1 	.word	0x0800dac1
 800da38:	0800dac1 	.word	0x0800dac1
 800da3c:	0800dac1 	.word	0x0800dac1
 800da40:	0800dac1 	.word	0x0800dac1
 800da44:	0800dac1 	.word	0x0800dac1
 800da48:	0800dac1 	.word	0x0800dac1
 800da4c:	0800daa9 	.word	0x0800daa9
 800da50:	0800dac1 	.word	0x0800dac1
 800da54:	0800dac1 	.word	0x0800dac1
 800da58:	0800dac1 	.word	0x0800dac1
 800da5c:	0800dac1 	.word	0x0800dac1
 800da60:	0800dac1 	.word	0x0800dac1
 800da64:	0800dac1 	.word	0x0800dac1
 800da68:	0800dac1 	.word	0x0800dac1
 800da6c:	0800dab1 	.word	0x0800dab1
 800da70:	0800dac1 	.word	0x0800dac1
 800da74:	0800dac1 	.word	0x0800dac1
 800da78:	0800dac1 	.word	0x0800dac1
 800da7c:	0800dac1 	.word	0x0800dac1
 800da80:	0800dac1 	.word	0x0800dac1
 800da84:	0800dac1 	.word	0x0800dac1
 800da88:	0800dac1 	.word	0x0800dac1
 800da8c:	0800dab9 	.word	0x0800dab9
 800da90:	2301      	movs	r3, #1
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da96:	e326      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800da98:	2304      	movs	r3, #4
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9e:	e322      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800daa0:	2308      	movs	r3, #8
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa6:	e31e      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800daa8:	2310      	movs	r3, #16
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daae:	e31a      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dab0:	2320      	movs	r3, #32
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab6:	e316      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dab8:	2340      	movs	r3, #64	; 0x40
 800daba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dabe:	e312      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dac0:	2380      	movs	r3, #128	; 0x80
 800dac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac6:	e30e      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a69      	ldr	r2, [pc, #420]	; (800dc74 <UART_SetConfig+0x33c>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d130      	bne.n	800db34 <UART_SetConfig+0x1fc>
 800dad2:	4b67      	ldr	r3, [pc, #412]	; (800dc70 <UART_SetConfig+0x338>)
 800dad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dad6:	f003 0307 	and.w	r3, r3, #7
 800dada:	2b05      	cmp	r3, #5
 800dadc:	d826      	bhi.n	800db2c <UART_SetConfig+0x1f4>
 800dade:	a201      	add	r2, pc, #4	; (adr r2, 800dae4 <UART_SetConfig+0x1ac>)
 800dae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae4:	0800dafd 	.word	0x0800dafd
 800dae8:	0800db05 	.word	0x0800db05
 800daec:	0800db0d 	.word	0x0800db0d
 800daf0:	0800db15 	.word	0x0800db15
 800daf4:	0800db1d 	.word	0x0800db1d
 800daf8:	0800db25 	.word	0x0800db25
 800dafc:	2300      	movs	r3, #0
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db02:	e2f0      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db04:	2304      	movs	r3, #4
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0a:	e2ec      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db0c:	2308      	movs	r3, #8
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db12:	e2e8      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db14:	2310      	movs	r3, #16
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1a:	e2e4      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db1c:	2320      	movs	r3, #32
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db22:	e2e0      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db24:	2340      	movs	r3, #64	; 0x40
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2a:	e2dc      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db2c:	2380      	movs	r3, #128	; 0x80
 800db2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db32:	e2d8      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a4f      	ldr	r2, [pc, #316]	; (800dc78 <UART_SetConfig+0x340>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d130      	bne.n	800dba0 <UART_SetConfig+0x268>
 800db3e:	4b4c      	ldr	r3, [pc, #304]	; (800dc70 <UART_SetConfig+0x338>)
 800db40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db42:	f003 0307 	and.w	r3, r3, #7
 800db46:	2b05      	cmp	r3, #5
 800db48:	d826      	bhi.n	800db98 <UART_SetConfig+0x260>
 800db4a:	a201      	add	r2, pc, #4	; (adr r2, 800db50 <UART_SetConfig+0x218>)
 800db4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db50:	0800db69 	.word	0x0800db69
 800db54:	0800db71 	.word	0x0800db71
 800db58:	0800db79 	.word	0x0800db79
 800db5c:	0800db81 	.word	0x0800db81
 800db60:	0800db89 	.word	0x0800db89
 800db64:	0800db91 	.word	0x0800db91
 800db68:	2300      	movs	r3, #0
 800db6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6e:	e2ba      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db70:	2304      	movs	r3, #4
 800db72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db76:	e2b6      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db78:	2308      	movs	r3, #8
 800db7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7e:	e2b2      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db80:	2310      	movs	r3, #16
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db86:	e2ae      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db88:	2320      	movs	r3, #32
 800db8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8e:	e2aa      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db90:	2340      	movs	r3, #64	; 0x40
 800db92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db96:	e2a6      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800db98:	2380      	movs	r3, #128	; 0x80
 800db9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9e:	e2a2      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a35      	ldr	r2, [pc, #212]	; (800dc7c <UART_SetConfig+0x344>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d130      	bne.n	800dc0c <UART_SetConfig+0x2d4>
 800dbaa:	4b31      	ldr	r3, [pc, #196]	; (800dc70 <UART_SetConfig+0x338>)
 800dbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbae:	f003 0307 	and.w	r3, r3, #7
 800dbb2:	2b05      	cmp	r3, #5
 800dbb4:	d826      	bhi.n	800dc04 <UART_SetConfig+0x2cc>
 800dbb6:	a201      	add	r2, pc, #4	; (adr r2, 800dbbc <UART_SetConfig+0x284>)
 800dbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbbc:	0800dbd5 	.word	0x0800dbd5
 800dbc0:	0800dbdd 	.word	0x0800dbdd
 800dbc4:	0800dbe5 	.word	0x0800dbe5
 800dbc8:	0800dbed 	.word	0x0800dbed
 800dbcc:	0800dbf5 	.word	0x0800dbf5
 800dbd0:	0800dbfd 	.word	0x0800dbfd
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbda:	e284      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dbdc:	2304      	movs	r3, #4
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe2:	e280      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dbe4:	2308      	movs	r3, #8
 800dbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbea:	e27c      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dbec:	2310      	movs	r3, #16
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf2:	e278      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dbf4:	2320      	movs	r3, #32
 800dbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfa:	e274      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dbfc:	2340      	movs	r3, #64	; 0x40
 800dbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc02:	e270      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dc04:	2380      	movs	r3, #128	; 0x80
 800dc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0a:	e26c      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a1b      	ldr	r2, [pc, #108]	; (800dc80 <UART_SetConfig+0x348>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d142      	bne.n	800dc9c <UART_SetConfig+0x364>
 800dc16:	4b16      	ldr	r3, [pc, #88]	; (800dc70 <UART_SetConfig+0x338>)
 800dc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc1a:	f003 0307 	and.w	r3, r3, #7
 800dc1e:	2b05      	cmp	r3, #5
 800dc20:	d838      	bhi.n	800dc94 <UART_SetConfig+0x35c>
 800dc22:	a201      	add	r2, pc, #4	; (adr r2, 800dc28 <UART_SetConfig+0x2f0>)
 800dc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc28:	0800dc41 	.word	0x0800dc41
 800dc2c:	0800dc49 	.word	0x0800dc49
 800dc30:	0800dc51 	.word	0x0800dc51
 800dc34:	0800dc59 	.word	0x0800dc59
 800dc38:	0800dc85 	.word	0x0800dc85
 800dc3c:	0800dc8d 	.word	0x0800dc8d
 800dc40:	2300      	movs	r3, #0
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc46:	e24e      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dc48:	2304      	movs	r3, #4
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4e:	e24a      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dc50:	2308      	movs	r3, #8
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc56:	e246      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dc58:	2310      	movs	r3, #16
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5e:	e242      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dc60:	cfff69f3 	.word	0xcfff69f3
 800dc64:	58000c00 	.word	0x58000c00
 800dc68:	11fff4ff 	.word	0x11fff4ff
 800dc6c:	40011000 	.word	0x40011000
 800dc70:	58024400 	.word	0x58024400
 800dc74:	40004400 	.word	0x40004400
 800dc78:	40004800 	.word	0x40004800
 800dc7c:	40004c00 	.word	0x40004c00
 800dc80:	40005000 	.word	0x40005000
 800dc84:	2320      	movs	r3, #32
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8a:	e22c      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dc8c:	2340      	movs	r3, #64	; 0x40
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc92:	e228      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dc94:	2380      	movs	r3, #128	; 0x80
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9a:	e224      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4ab1      	ldr	r2, [pc, #708]	; (800df68 <UART_SetConfig+0x630>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d176      	bne.n	800dd94 <UART_SetConfig+0x45c>
 800dca6:	4bb1      	ldr	r3, [pc, #708]	; (800df6c <UART_SetConfig+0x634>)
 800dca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dcae:	2b28      	cmp	r3, #40	; 0x28
 800dcb0:	d86c      	bhi.n	800dd8c <UART_SetConfig+0x454>
 800dcb2:	a201      	add	r2, pc, #4	; (adr r2, 800dcb8 <UART_SetConfig+0x380>)
 800dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb8:	0800dd5d 	.word	0x0800dd5d
 800dcbc:	0800dd8d 	.word	0x0800dd8d
 800dcc0:	0800dd8d 	.word	0x0800dd8d
 800dcc4:	0800dd8d 	.word	0x0800dd8d
 800dcc8:	0800dd8d 	.word	0x0800dd8d
 800dccc:	0800dd8d 	.word	0x0800dd8d
 800dcd0:	0800dd8d 	.word	0x0800dd8d
 800dcd4:	0800dd8d 	.word	0x0800dd8d
 800dcd8:	0800dd65 	.word	0x0800dd65
 800dcdc:	0800dd8d 	.word	0x0800dd8d
 800dce0:	0800dd8d 	.word	0x0800dd8d
 800dce4:	0800dd8d 	.word	0x0800dd8d
 800dce8:	0800dd8d 	.word	0x0800dd8d
 800dcec:	0800dd8d 	.word	0x0800dd8d
 800dcf0:	0800dd8d 	.word	0x0800dd8d
 800dcf4:	0800dd8d 	.word	0x0800dd8d
 800dcf8:	0800dd6d 	.word	0x0800dd6d
 800dcfc:	0800dd8d 	.word	0x0800dd8d
 800dd00:	0800dd8d 	.word	0x0800dd8d
 800dd04:	0800dd8d 	.word	0x0800dd8d
 800dd08:	0800dd8d 	.word	0x0800dd8d
 800dd0c:	0800dd8d 	.word	0x0800dd8d
 800dd10:	0800dd8d 	.word	0x0800dd8d
 800dd14:	0800dd8d 	.word	0x0800dd8d
 800dd18:	0800dd75 	.word	0x0800dd75
 800dd1c:	0800dd8d 	.word	0x0800dd8d
 800dd20:	0800dd8d 	.word	0x0800dd8d
 800dd24:	0800dd8d 	.word	0x0800dd8d
 800dd28:	0800dd8d 	.word	0x0800dd8d
 800dd2c:	0800dd8d 	.word	0x0800dd8d
 800dd30:	0800dd8d 	.word	0x0800dd8d
 800dd34:	0800dd8d 	.word	0x0800dd8d
 800dd38:	0800dd7d 	.word	0x0800dd7d
 800dd3c:	0800dd8d 	.word	0x0800dd8d
 800dd40:	0800dd8d 	.word	0x0800dd8d
 800dd44:	0800dd8d 	.word	0x0800dd8d
 800dd48:	0800dd8d 	.word	0x0800dd8d
 800dd4c:	0800dd8d 	.word	0x0800dd8d
 800dd50:	0800dd8d 	.word	0x0800dd8d
 800dd54:	0800dd8d 	.word	0x0800dd8d
 800dd58:	0800dd85 	.word	0x0800dd85
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd62:	e1c0      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dd64:	2304      	movs	r3, #4
 800dd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6a:	e1bc      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dd6c:	2308      	movs	r3, #8
 800dd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd72:	e1b8      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dd74:	2310      	movs	r3, #16
 800dd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7a:	e1b4      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dd7c:	2320      	movs	r3, #32
 800dd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd82:	e1b0      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dd84:	2340      	movs	r3, #64	; 0x40
 800dd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8a:	e1ac      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dd8c:	2380      	movs	r3, #128	; 0x80
 800dd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd92:	e1a8      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4a75      	ldr	r2, [pc, #468]	; (800df70 <UART_SetConfig+0x638>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d130      	bne.n	800de00 <UART_SetConfig+0x4c8>
 800dd9e:	4b73      	ldr	r3, [pc, #460]	; (800df6c <UART_SetConfig+0x634>)
 800dda0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dda2:	f003 0307 	and.w	r3, r3, #7
 800dda6:	2b05      	cmp	r3, #5
 800dda8:	d826      	bhi.n	800ddf8 <UART_SetConfig+0x4c0>
 800ddaa:	a201      	add	r2, pc, #4	; (adr r2, 800ddb0 <UART_SetConfig+0x478>)
 800ddac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb0:	0800ddc9 	.word	0x0800ddc9
 800ddb4:	0800ddd1 	.word	0x0800ddd1
 800ddb8:	0800ddd9 	.word	0x0800ddd9
 800ddbc:	0800dde1 	.word	0x0800dde1
 800ddc0:	0800dde9 	.word	0x0800dde9
 800ddc4:	0800ddf1 	.word	0x0800ddf1
 800ddc8:	2300      	movs	r3, #0
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddce:	e18a      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800ddd0:	2304      	movs	r3, #4
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd6:	e186      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800ddd8:	2308      	movs	r3, #8
 800ddda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddde:	e182      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dde0:	2310      	movs	r3, #16
 800dde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde6:	e17e      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800dde8:	2320      	movs	r3, #32
 800ddea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddee:	e17a      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800ddf0:	2340      	movs	r3, #64	; 0x40
 800ddf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf6:	e176      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800ddf8:	2380      	movs	r3, #128	; 0x80
 800ddfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfe:	e172      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a5b      	ldr	r2, [pc, #364]	; (800df74 <UART_SetConfig+0x63c>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d130      	bne.n	800de6c <UART_SetConfig+0x534>
 800de0a:	4b58      	ldr	r3, [pc, #352]	; (800df6c <UART_SetConfig+0x634>)
 800de0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de0e:	f003 0307 	and.w	r3, r3, #7
 800de12:	2b05      	cmp	r3, #5
 800de14:	d826      	bhi.n	800de64 <UART_SetConfig+0x52c>
 800de16:	a201      	add	r2, pc, #4	; (adr r2, 800de1c <UART_SetConfig+0x4e4>)
 800de18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de1c:	0800de35 	.word	0x0800de35
 800de20:	0800de3d 	.word	0x0800de3d
 800de24:	0800de45 	.word	0x0800de45
 800de28:	0800de4d 	.word	0x0800de4d
 800de2c:	0800de55 	.word	0x0800de55
 800de30:	0800de5d 	.word	0x0800de5d
 800de34:	2300      	movs	r3, #0
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3a:	e154      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800de3c:	2304      	movs	r3, #4
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e150      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800de44:	2308      	movs	r3, #8
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e14c      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800de4c:	2310      	movs	r3, #16
 800de4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de52:	e148      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800de54:	2320      	movs	r3, #32
 800de56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5a:	e144      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800de5c:	2340      	movs	r3, #64	; 0x40
 800de5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de62:	e140      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800de64:	2380      	movs	r3, #128	; 0x80
 800de66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6a:	e13c      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a41      	ldr	r2, [pc, #260]	; (800df78 <UART_SetConfig+0x640>)
 800de72:	4293      	cmp	r3, r2
 800de74:	f040 8082 	bne.w	800df7c <UART_SetConfig+0x644>
 800de78:	4b3c      	ldr	r3, [pc, #240]	; (800df6c <UART_SetConfig+0x634>)
 800de7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de80:	2b28      	cmp	r3, #40	; 0x28
 800de82:	d86d      	bhi.n	800df60 <UART_SetConfig+0x628>
 800de84:	a201      	add	r2, pc, #4	; (adr r2, 800de8c <UART_SetConfig+0x554>)
 800de86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de8a:	bf00      	nop
 800de8c:	0800df31 	.word	0x0800df31
 800de90:	0800df61 	.word	0x0800df61
 800de94:	0800df61 	.word	0x0800df61
 800de98:	0800df61 	.word	0x0800df61
 800de9c:	0800df61 	.word	0x0800df61
 800dea0:	0800df61 	.word	0x0800df61
 800dea4:	0800df61 	.word	0x0800df61
 800dea8:	0800df61 	.word	0x0800df61
 800deac:	0800df39 	.word	0x0800df39
 800deb0:	0800df61 	.word	0x0800df61
 800deb4:	0800df61 	.word	0x0800df61
 800deb8:	0800df61 	.word	0x0800df61
 800debc:	0800df61 	.word	0x0800df61
 800dec0:	0800df61 	.word	0x0800df61
 800dec4:	0800df61 	.word	0x0800df61
 800dec8:	0800df61 	.word	0x0800df61
 800decc:	0800df41 	.word	0x0800df41
 800ded0:	0800df61 	.word	0x0800df61
 800ded4:	0800df61 	.word	0x0800df61
 800ded8:	0800df61 	.word	0x0800df61
 800dedc:	0800df61 	.word	0x0800df61
 800dee0:	0800df61 	.word	0x0800df61
 800dee4:	0800df61 	.word	0x0800df61
 800dee8:	0800df61 	.word	0x0800df61
 800deec:	0800df49 	.word	0x0800df49
 800def0:	0800df61 	.word	0x0800df61
 800def4:	0800df61 	.word	0x0800df61
 800def8:	0800df61 	.word	0x0800df61
 800defc:	0800df61 	.word	0x0800df61
 800df00:	0800df61 	.word	0x0800df61
 800df04:	0800df61 	.word	0x0800df61
 800df08:	0800df61 	.word	0x0800df61
 800df0c:	0800df51 	.word	0x0800df51
 800df10:	0800df61 	.word	0x0800df61
 800df14:	0800df61 	.word	0x0800df61
 800df18:	0800df61 	.word	0x0800df61
 800df1c:	0800df61 	.word	0x0800df61
 800df20:	0800df61 	.word	0x0800df61
 800df24:	0800df61 	.word	0x0800df61
 800df28:	0800df61 	.word	0x0800df61
 800df2c:	0800df59 	.word	0x0800df59
 800df30:	2301      	movs	r3, #1
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df36:	e0d6      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800df38:	2304      	movs	r3, #4
 800df3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3e:	e0d2      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800df40:	2308      	movs	r3, #8
 800df42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df46:	e0ce      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800df48:	2310      	movs	r3, #16
 800df4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df4e:	e0ca      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800df50:	2320      	movs	r3, #32
 800df52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df56:	e0c6      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800df58:	2340      	movs	r3, #64	; 0x40
 800df5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df5e:	e0c2      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800df60:	2380      	movs	r3, #128	; 0x80
 800df62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df66:	e0be      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800df68:	40011400 	.word	0x40011400
 800df6c:	58024400 	.word	0x58024400
 800df70:	40007800 	.word	0x40007800
 800df74:	40007c00 	.word	0x40007c00
 800df78:	40011800 	.word	0x40011800
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4aad      	ldr	r2, [pc, #692]	; (800e238 <UART_SetConfig+0x900>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d176      	bne.n	800e074 <UART_SetConfig+0x73c>
 800df86:	4bad      	ldr	r3, [pc, #692]	; (800e23c <UART_SetConfig+0x904>)
 800df88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df8e:	2b28      	cmp	r3, #40	; 0x28
 800df90:	d86c      	bhi.n	800e06c <UART_SetConfig+0x734>
 800df92:	a201      	add	r2, pc, #4	; (adr r2, 800df98 <UART_SetConfig+0x660>)
 800df94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df98:	0800e03d 	.word	0x0800e03d
 800df9c:	0800e06d 	.word	0x0800e06d
 800dfa0:	0800e06d 	.word	0x0800e06d
 800dfa4:	0800e06d 	.word	0x0800e06d
 800dfa8:	0800e06d 	.word	0x0800e06d
 800dfac:	0800e06d 	.word	0x0800e06d
 800dfb0:	0800e06d 	.word	0x0800e06d
 800dfb4:	0800e06d 	.word	0x0800e06d
 800dfb8:	0800e045 	.word	0x0800e045
 800dfbc:	0800e06d 	.word	0x0800e06d
 800dfc0:	0800e06d 	.word	0x0800e06d
 800dfc4:	0800e06d 	.word	0x0800e06d
 800dfc8:	0800e06d 	.word	0x0800e06d
 800dfcc:	0800e06d 	.word	0x0800e06d
 800dfd0:	0800e06d 	.word	0x0800e06d
 800dfd4:	0800e06d 	.word	0x0800e06d
 800dfd8:	0800e04d 	.word	0x0800e04d
 800dfdc:	0800e06d 	.word	0x0800e06d
 800dfe0:	0800e06d 	.word	0x0800e06d
 800dfe4:	0800e06d 	.word	0x0800e06d
 800dfe8:	0800e06d 	.word	0x0800e06d
 800dfec:	0800e06d 	.word	0x0800e06d
 800dff0:	0800e06d 	.word	0x0800e06d
 800dff4:	0800e06d 	.word	0x0800e06d
 800dff8:	0800e055 	.word	0x0800e055
 800dffc:	0800e06d 	.word	0x0800e06d
 800e000:	0800e06d 	.word	0x0800e06d
 800e004:	0800e06d 	.word	0x0800e06d
 800e008:	0800e06d 	.word	0x0800e06d
 800e00c:	0800e06d 	.word	0x0800e06d
 800e010:	0800e06d 	.word	0x0800e06d
 800e014:	0800e06d 	.word	0x0800e06d
 800e018:	0800e05d 	.word	0x0800e05d
 800e01c:	0800e06d 	.word	0x0800e06d
 800e020:	0800e06d 	.word	0x0800e06d
 800e024:	0800e06d 	.word	0x0800e06d
 800e028:	0800e06d 	.word	0x0800e06d
 800e02c:	0800e06d 	.word	0x0800e06d
 800e030:	0800e06d 	.word	0x0800e06d
 800e034:	0800e06d 	.word	0x0800e06d
 800e038:	0800e065 	.word	0x0800e065
 800e03c:	2301      	movs	r3, #1
 800e03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e042:	e050      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e044:	2304      	movs	r3, #4
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04a:	e04c      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e04c:	2308      	movs	r3, #8
 800e04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e052:	e048      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e054:	2310      	movs	r3, #16
 800e056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05a:	e044      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e05c:	2320      	movs	r3, #32
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e062:	e040      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e064:	2340      	movs	r3, #64	; 0x40
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06a:	e03c      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e06c:	2380      	movs	r3, #128	; 0x80
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e072:	e038      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a71      	ldr	r2, [pc, #452]	; (800e240 <UART_SetConfig+0x908>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d130      	bne.n	800e0e0 <UART_SetConfig+0x7a8>
 800e07e:	4b6f      	ldr	r3, [pc, #444]	; (800e23c <UART_SetConfig+0x904>)
 800e080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e082:	f003 0307 	and.w	r3, r3, #7
 800e086:	2b05      	cmp	r3, #5
 800e088:	d826      	bhi.n	800e0d8 <UART_SetConfig+0x7a0>
 800e08a:	a201      	add	r2, pc, #4	; (adr r2, 800e090 <UART_SetConfig+0x758>)
 800e08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e090:	0800e0a9 	.word	0x0800e0a9
 800e094:	0800e0b1 	.word	0x0800e0b1
 800e098:	0800e0b9 	.word	0x0800e0b9
 800e09c:	0800e0c1 	.word	0x0800e0c1
 800e0a0:	0800e0c9 	.word	0x0800e0c9
 800e0a4:	0800e0d1 	.word	0x0800e0d1
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ae:	e01a      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e0b0:	2304      	movs	r3, #4
 800e0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b6:	e016      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e0b8:	2308      	movs	r3, #8
 800e0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0be:	e012      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e0c0:	2310      	movs	r3, #16
 800e0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c6:	e00e      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e0c8:	2320      	movs	r3, #32
 800e0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ce:	e00a      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e0d0:	2340      	movs	r3, #64	; 0x40
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d6:	e006      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e0d8:	2380      	movs	r3, #128	; 0x80
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0de:	e002      	b.n	800e0e6 <UART_SetConfig+0x7ae>
 800e0e0:	2380      	movs	r3, #128	; 0x80
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a55      	ldr	r2, [pc, #340]	; (800e240 <UART_SetConfig+0x908>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	f040 80f8 	bne.w	800e2e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e0f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e0f6:	2b20      	cmp	r3, #32
 800e0f8:	dc46      	bgt.n	800e188 <UART_SetConfig+0x850>
 800e0fa:	2b02      	cmp	r3, #2
 800e0fc:	db75      	blt.n	800e1ea <UART_SetConfig+0x8b2>
 800e0fe:	3b02      	subs	r3, #2
 800e100:	2b1e      	cmp	r3, #30
 800e102:	d872      	bhi.n	800e1ea <UART_SetConfig+0x8b2>
 800e104:	a201      	add	r2, pc, #4	; (adr r2, 800e10c <UART_SetConfig+0x7d4>)
 800e106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e10a:	bf00      	nop
 800e10c:	0800e18f 	.word	0x0800e18f
 800e110:	0800e1eb 	.word	0x0800e1eb
 800e114:	0800e197 	.word	0x0800e197
 800e118:	0800e1eb 	.word	0x0800e1eb
 800e11c:	0800e1eb 	.word	0x0800e1eb
 800e120:	0800e1eb 	.word	0x0800e1eb
 800e124:	0800e1a7 	.word	0x0800e1a7
 800e128:	0800e1eb 	.word	0x0800e1eb
 800e12c:	0800e1eb 	.word	0x0800e1eb
 800e130:	0800e1eb 	.word	0x0800e1eb
 800e134:	0800e1eb 	.word	0x0800e1eb
 800e138:	0800e1eb 	.word	0x0800e1eb
 800e13c:	0800e1eb 	.word	0x0800e1eb
 800e140:	0800e1eb 	.word	0x0800e1eb
 800e144:	0800e1b7 	.word	0x0800e1b7
 800e148:	0800e1eb 	.word	0x0800e1eb
 800e14c:	0800e1eb 	.word	0x0800e1eb
 800e150:	0800e1eb 	.word	0x0800e1eb
 800e154:	0800e1eb 	.word	0x0800e1eb
 800e158:	0800e1eb 	.word	0x0800e1eb
 800e15c:	0800e1eb 	.word	0x0800e1eb
 800e160:	0800e1eb 	.word	0x0800e1eb
 800e164:	0800e1eb 	.word	0x0800e1eb
 800e168:	0800e1eb 	.word	0x0800e1eb
 800e16c:	0800e1eb 	.word	0x0800e1eb
 800e170:	0800e1eb 	.word	0x0800e1eb
 800e174:	0800e1eb 	.word	0x0800e1eb
 800e178:	0800e1eb 	.word	0x0800e1eb
 800e17c:	0800e1eb 	.word	0x0800e1eb
 800e180:	0800e1eb 	.word	0x0800e1eb
 800e184:	0800e1dd 	.word	0x0800e1dd
 800e188:	2b40      	cmp	r3, #64	; 0x40
 800e18a:	d02a      	beq.n	800e1e2 <UART_SetConfig+0x8aa>
 800e18c:	e02d      	b.n	800e1ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e18e:	f7fc fe01 	bl	800ad94 <HAL_RCCEx_GetD3PCLK1Freq>
 800e192:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e194:	e02f      	b.n	800e1f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fc fe10 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1a4:	e027      	b.n	800e1f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1a6:	f107 0318 	add.w	r3, r7, #24
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fc ff5c 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1b4:	e01f      	b.n	800e1f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1b6:	4b21      	ldr	r3, [pc, #132]	; (800e23c <UART_SetConfig+0x904>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f003 0320 	and.w	r3, r3, #32
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d009      	beq.n	800e1d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1c2:	4b1e      	ldr	r3, [pc, #120]	; (800e23c <UART_SetConfig+0x904>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	08db      	lsrs	r3, r3, #3
 800e1c8:	f003 0303 	and.w	r3, r3, #3
 800e1cc:	4a1d      	ldr	r2, [pc, #116]	; (800e244 <UART_SetConfig+0x90c>)
 800e1ce:	fa22 f303 	lsr.w	r3, r2, r3
 800e1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1d4:	e00f      	b.n	800e1f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e1d6:	4b1b      	ldr	r3, [pc, #108]	; (800e244 <UART_SetConfig+0x90c>)
 800e1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1da:	e00c      	b.n	800e1f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1dc:	4b1a      	ldr	r3, [pc, #104]	; (800e248 <UART_SetConfig+0x910>)
 800e1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1e0:	e009      	b.n	800e1f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1e8:	e005      	b.n	800e1f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e1f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f000 81ee 	beq.w	800e5da <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e202:	4a12      	ldr	r2, [pc, #72]	; (800e24c <UART_SetConfig+0x914>)
 800e204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e208:	461a      	mov	r2, r3
 800e20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e20c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e210:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	685a      	ldr	r2, [r3, #4]
 800e216:	4613      	mov	r3, r2
 800e218:	005b      	lsls	r3, r3, #1
 800e21a:	4413      	add	r3, r2
 800e21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e21e:	429a      	cmp	r2, r3
 800e220:	d305      	bcc.n	800e22e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d910      	bls.n	800e250 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e22e:	2301      	movs	r3, #1
 800e230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e234:	e1d1      	b.n	800e5da <UART_SetConfig+0xca2>
 800e236:	bf00      	nop
 800e238:	40011c00 	.word	0x40011c00
 800e23c:	58024400 	.word	0x58024400
 800e240:	58000c00 	.word	0x58000c00
 800e244:	03d09000 	.word	0x03d09000
 800e248:	003d0900 	.word	0x003d0900
 800e24c:	0800f810 	.word	0x0800f810
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e252:	2200      	movs	r2, #0
 800e254:	60bb      	str	r3, [r7, #8]
 800e256:	60fa      	str	r2, [r7, #12]
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25c:	4ac0      	ldr	r2, [pc, #768]	; (800e560 <UART_SetConfig+0xc28>)
 800e25e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e262:	b29b      	uxth	r3, r3
 800e264:	2200      	movs	r2, #0
 800e266:	603b      	str	r3, [r7, #0]
 800e268:	607a      	str	r2, [r7, #4]
 800e26a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e26e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e272:	f7f2 f855 	bl	8000320 <__aeabi_uldivmod>
 800e276:	4602      	mov	r2, r0
 800e278:	460b      	mov	r3, r1
 800e27a:	4610      	mov	r0, r2
 800e27c:	4619      	mov	r1, r3
 800e27e:	f04f 0200 	mov.w	r2, #0
 800e282:	f04f 0300 	mov.w	r3, #0
 800e286:	020b      	lsls	r3, r1, #8
 800e288:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e28c:	0202      	lsls	r2, r0, #8
 800e28e:	6979      	ldr	r1, [r7, #20]
 800e290:	6849      	ldr	r1, [r1, #4]
 800e292:	0849      	lsrs	r1, r1, #1
 800e294:	2000      	movs	r0, #0
 800e296:	460c      	mov	r4, r1
 800e298:	4605      	mov	r5, r0
 800e29a:	eb12 0804 	adds.w	r8, r2, r4
 800e29e:	eb43 0905 	adc.w	r9, r3, r5
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	469a      	mov	sl, r3
 800e2aa:	4693      	mov	fp, r2
 800e2ac:	4652      	mov	r2, sl
 800e2ae:	465b      	mov	r3, fp
 800e2b0:	4640      	mov	r0, r8
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	f7f2 f834 	bl	8000320 <__aeabi_uldivmod>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4613      	mov	r3, r2
 800e2be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2c6:	d308      	bcc.n	800e2da <UART_SetConfig+0x9a2>
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2ce:	d204      	bcs.n	800e2da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2d6:	60da      	str	r2, [r3, #12]
 800e2d8:	e17f      	b.n	800e5da <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e2e0:	e17b      	b.n	800e5da <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	69db      	ldr	r3, [r3, #28]
 800e2e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ea:	f040 80bd 	bne.w	800e468 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e2ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e2f2:	2b20      	cmp	r3, #32
 800e2f4:	dc48      	bgt.n	800e388 <UART_SetConfig+0xa50>
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	db7b      	blt.n	800e3f2 <UART_SetConfig+0xaba>
 800e2fa:	2b20      	cmp	r3, #32
 800e2fc:	d879      	bhi.n	800e3f2 <UART_SetConfig+0xaba>
 800e2fe:	a201      	add	r2, pc, #4	; (adr r2, 800e304 <UART_SetConfig+0x9cc>)
 800e300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e304:	0800e38f 	.word	0x0800e38f
 800e308:	0800e397 	.word	0x0800e397
 800e30c:	0800e3f3 	.word	0x0800e3f3
 800e310:	0800e3f3 	.word	0x0800e3f3
 800e314:	0800e39f 	.word	0x0800e39f
 800e318:	0800e3f3 	.word	0x0800e3f3
 800e31c:	0800e3f3 	.word	0x0800e3f3
 800e320:	0800e3f3 	.word	0x0800e3f3
 800e324:	0800e3af 	.word	0x0800e3af
 800e328:	0800e3f3 	.word	0x0800e3f3
 800e32c:	0800e3f3 	.word	0x0800e3f3
 800e330:	0800e3f3 	.word	0x0800e3f3
 800e334:	0800e3f3 	.word	0x0800e3f3
 800e338:	0800e3f3 	.word	0x0800e3f3
 800e33c:	0800e3f3 	.word	0x0800e3f3
 800e340:	0800e3f3 	.word	0x0800e3f3
 800e344:	0800e3bf 	.word	0x0800e3bf
 800e348:	0800e3f3 	.word	0x0800e3f3
 800e34c:	0800e3f3 	.word	0x0800e3f3
 800e350:	0800e3f3 	.word	0x0800e3f3
 800e354:	0800e3f3 	.word	0x0800e3f3
 800e358:	0800e3f3 	.word	0x0800e3f3
 800e35c:	0800e3f3 	.word	0x0800e3f3
 800e360:	0800e3f3 	.word	0x0800e3f3
 800e364:	0800e3f3 	.word	0x0800e3f3
 800e368:	0800e3f3 	.word	0x0800e3f3
 800e36c:	0800e3f3 	.word	0x0800e3f3
 800e370:	0800e3f3 	.word	0x0800e3f3
 800e374:	0800e3f3 	.word	0x0800e3f3
 800e378:	0800e3f3 	.word	0x0800e3f3
 800e37c:	0800e3f3 	.word	0x0800e3f3
 800e380:	0800e3f3 	.word	0x0800e3f3
 800e384:	0800e3e5 	.word	0x0800e3e5
 800e388:	2b40      	cmp	r3, #64	; 0x40
 800e38a:	d02e      	beq.n	800e3ea <UART_SetConfig+0xab2>
 800e38c:	e031      	b.n	800e3f2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e38e:	f7fb fddb 	bl	8009f48 <HAL_RCC_GetPCLK1Freq>
 800e392:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e394:	e033      	b.n	800e3fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e396:	f7fb fded 	bl	8009f74 <HAL_RCC_GetPCLK2Freq>
 800e39a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e39c:	e02f      	b.n	800e3fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e39e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fc fd0c 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3ac:	e027      	b.n	800e3fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3ae:	f107 0318 	add.w	r3, r7, #24
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fc fe58 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3bc:	e01f      	b.n	800e3fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3be:	4b69      	ldr	r3, [pc, #420]	; (800e564 <UART_SetConfig+0xc2c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f003 0320 	and.w	r3, r3, #32
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d009      	beq.n	800e3de <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3ca:	4b66      	ldr	r3, [pc, #408]	; (800e564 <UART_SetConfig+0xc2c>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	08db      	lsrs	r3, r3, #3
 800e3d0:	f003 0303 	and.w	r3, r3, #3
 800e3d4:	4a64      	ldr	r2, [pc, #400]	; (800e568 <UART_SetConfig+0xc30>)
 800e3d6:	fa22 f303 	lsr.w	r3, r2, r3
 800e3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3dc:	e00f      	b.n	800e3fe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e3de:	4b62      	ldr	r3, [pc, #392]	; (800e568 <UART_SetConfig+0xc30>)
 800e3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3e2:	e00c      	b.n	800e3fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3e4:	4b61      	ldr	r3, [pc, #388]	; (800e56c <UART_SetConfig+0xc34>)
 800e3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3e8:	e009      	b.n	800e3fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3f0:	e005      	b.n	800e3fe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e3fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e400:	2b00      	cmp	r3, #0
 800e402:	f000 80ea 	beq.w	800e5da <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40a:	4a55      	ldr	r2, [pc, #340]	; (800e560 <UART_SetConfig+0xc28>)
 800e40c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e410:	461a      	mov	r2, r3
 800e412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e414:	fbb3 f3f2 	udiv	r3, r3, r2
 800e418:	005a      	lsls	r2, r3, #1
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	085b      	lsrs	r3, r3, #1
 800e420:	441a      	add	r2, r3
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	fbb2 f3f3 	udiv	r3, r2, r3
 800e42a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42e:	2b0f      	cmp	r3, #15
 800e430:	d916      	bls.n	800e460 <UART_SetConfig+0xb28>
 800e432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e438:	d212      	bcs.n	800e460 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	f023 030f 	bic.w	r3, r3, #15
 800e442:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e446:	085b      	lsrs	r3, r3, #1
 800e448:	b29b      	uxth	r3, r3
 800e44a:	f003 0307 	and.w	r3, r3, #7
 800e44e:	b29a      	uxth	r2, r3
 800e450:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e452:	4313      	orrs	r3, r2
 800e454:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e45c:	60da      	str	r2, [r3, #12]
 800e45e:	e0bc      	b.n	800e5da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e460:	2301      	movs	r3, #1
 800e462:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e466:	e0b8      	b.n	800e5da <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e468:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e46c:	2b20      	cmp	r3, #32
 800e46e:	dc4b      	bgt.n	800e508 <UART_SetConfig+0xbd0>
 800e470:	2b00      	cmp	r3, #0
 800e472:	f2c0 8087 	blt.w	800e584 <UART_SetConfig+0xc4c>
 800e476:	2b20      	cmp	r3, #32
 800e478:	f200 8084 	bhi.w	800e584 <UART_SetConfig+0xc4c>
 800e47c:	a201      	add	r2, pc, #4	; (adr r2, 800e484 <UART_SetConfig+0xb4c>)
 800e47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e482:	bf00      	nop
 800e484:	0800e50f 	.word	0x0800e50f
 800e488:	0800e517 	.word	0x0800e517
 800e48c:	0800e585 	.word	0x0800e585
 800e490:	0800e585 	.word	0x0800e585
 800e494:	0800e51f 	.word	0x0800e51f
 800e498:	0800e585 	.word	0x0800e585
 800e49c:	0800e585 	.word	0x0800e585
 800e4a0:	0800e585 	.word	0x0800e585
 800e4a4:	0800e52f 	.word	0x0800e52f
 800e4a8:	0800e585 	.word	0x0800e585
 800e4ac:	0800e585 	.word	0x0800e585
 800e4b0:	0800e585 	.word	0x0800e585
 800e4b4:	0800e585 	.word	0x0800e585
 800e4b8:	0800e585 	.word	0x0800e585
 800e4bc:	0800e585 	.word	0x0800e585
 800e4c0:	0800e585 	.word	0x0800e585
 800e4c4:	0800e53f 	.word	0x0800e53f
 800e4c8:	0800e585 	.word	0x0800e585
 800e4cc:	0800e585 	.word	0x0800e585
 800e4d0:	0800e585 	.word	0x0800e585
 800e4d4:	0800e585 	.word	0x0800e585
 800e4d8:	0800e585 	.word	0x0800e585
 800e4dc:	0800e585 	.word	0x0800e585
 800e4e0:	0800e585 	.word	0x0800e585
 800e4e4:	0800e585 	.word	0x0800e585
 800e4e8:	0800e585 	.word	0x0800e585
 800e4ec:	0800e585 	.word	0x0800e585
 800e4f0:	0800e585 	.word	0x0800e585
 800e4f4:	0800e585 	.word	0x0800e585
 800e4f8:	0800e585 	.word	0x0800e585
 800e4fc:	0800e585 	.word	0x0800e585
 800e500:	0800e585 	.word	0x0800e585
 800e504:	0800e577 	.word	0x0800e577
 800e508:	2b40      	cmp	r3, #64	; 0x40
 800e50a:	d037      	beq.n	800e57c <UART_SetConfig+0xc44>
 800e50c:	e03a      	b.n	800e584 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e50e:	f7fb fd1b 	bl	8009f48 <HAL_RCC_GetPCLK1Freq>
 800e512:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e514:	e03c      	b.n	800e590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e516:	f7fb fd2d 	bl	8009f74 <HAL_RCC_GetPCLK2Freq>
 800e51a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e51c:	e038      	b.n	800e590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e51e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e522:	4618      	mov	r0, r3
 800e524:	f7fc fc4c 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e52c:	e030      	b.n	800e590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e52e:	f107 0318 	add.w	r3, r7, #24
 800e532:	4618      	mov	r0, r3
 800e534:	f7fc fd98 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e53c:	e028      	b.n	800e590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e53e:	4b09      	ldr	r3, [pc, #36]	; (800e564 <UART_SetConfig+0xc2c>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f003 0320 	and.w	r3, r3, #32
 800e546:	2b00      	cmp	r3, #0
 800e548:	d012      	beq.n	800e570 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e54a:	4b06      	ldr	r3, [pc, #24]	; (800e564 <UART_SetConfig+0xc2c>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	08db      	lsrs	r3, r3, #3
 800e550:	f003 0303 	and.w	r3, r3, #3
 800e554:	4a04      	ldr	r2, [pc, #16]	; (800e568 <UART_SetConfig+0xc30>)
 800e556:	fa22 f303 	lsr.w	r3, r2, r3
 800e55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e55c:	e018      	b.n	800e590 <UART_SetConfig+0xc58>
 800e55e:	bf00      	nop
 800e560:	0800f810 	.word	0x0800f810
 800e564:	58024400 	.word	0x58024400
 800e568:	03d09000 	.word	0x03d09000
 800e56c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e570:	4b24      	ldr	r3, [pc, #144]	; (800e604 <UART_SetConfig+0xccc>)
 800e572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e574:	e00c      	b.n	800e590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e576:	4b24      	ldr	r3, [pc, #144]	; (800e608 <UART_SetConfig+0xcd0>)
 800e578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e57a:	e009      	b.n	800e590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e57c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e582:	e005      	b.n	800e590 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e584:	2300      	movs	r3, #0
 800e586:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e588:	2301      	movs	r3, #1
 800e58a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e58e:	bf00      	nop
    }

    if (pclk != 0U)
 800e590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e592:	2b00      	cmp	r3, #0
 800e594:	d021      	beq.n	800e5da <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59a:	4a1c      	ldr	r2, [pc, #112]	; (800e60c <UART_SetConfig+0xcd4>)
 800e59c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	085b      	lsrs	r3, r3, #1
 800e5ae:	441a      	add	r2, r3
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5b8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5bc:	2b0f      	cmp	r3, #15
 800e5be:	d909      	bls.n	800e5d4 <UART_SetConfig+0xc9c>
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5c6:	d205      	bcs.n	800e5d4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	60da      	str	r2, [r3, #12]
 800e5d2:	e002      	b.n	800e5da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e5f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3748      	adds	r7, #72	; 0x48
 800e5fe:	46bd      	mov	sp, r7
 800e600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e604:	03d09000 	.word	0x03d09000
 800e608:	003d0900 	.word	0x003d0900
 800e60c:	0800f810 	.word	0x0800f810

0800e610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e61c:	f003 0301 	and.w	r3, r3, #1
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00a      	beq.n	800e63a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	430a      	orrs	r2, r1
 800e638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e63e:	f003 0302 	and.w	r3, r3, #2
 800e642:	2b00      	cmp	r3, #0
 800e644:	d00a      	beq.n	800e65c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	430a      	orrs	r2, r1
 800e65a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e660:	f003 0304 	and.w	r3, r3, #4
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00a      	beq.n	800e67e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	430a      	orrs	r2, r1
 800e67c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e682:	f003 0308 	and.w	r3, r3, #8
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00a      	beq.n	800e6a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	430a      	orrs	r2, r1
 800e69e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a4:	f003 0310 	and.w	r3, r3, #16
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00a      	beq.n	800e6c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	430a      	orrs	r2, r1
 800e6c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c6:	f003 0320 	and.w	r3, r3, #32
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00a      	beq.n	800e6e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	430a      	orrs	r2, r1
 800e6e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d01a      	beq.n	800e726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	430a      	orrs	r2, r1
 800e704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e70a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e70e:	d10a      	bne.n	800e726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	430a      	orrs	r2, r1
 800e724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00a      	beq.n	800e748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	430a      	orrs	r2, r1
 800e746:	605a      	str	r2, [r3, #4]
  }
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af02      	add	r7, sp, #8
 800e75a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e764:	f7f7 f8a6 	bl	80058b4 <HAL_GetTick>
 800e768:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f003 0308 	and.w	r3, r3, #8
 800e774:	2b08      	cmp	r3, #8
 800e776:	d10e      	bne.n	800e796 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e778:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2200      	movs	r2, #0
 800e782:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f82f 	bl	800e7ea <UART_WaitOnFlagUntilTimeout>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e792:	2303      	movs	r3, #3
 800e794:	e025      	b.n	800e7e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f003 0304 	and.w	r3, r3, #4
 800e7a0:	2b04      	cmp	r3, #4
 800e7a2:	d10e      	bne.n	800e7c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7a8:	9300      	str	r3, [sp, #0]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 f819 	bl	800e7ea <UART_WaitOnFlagUntilTimeout>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d001      	beq.n	800e7c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7be:	2303      	movs	r3, #3
 800e7c0:	e00f      	b.n	800e7e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2220      	movs	r2, #32
 800e7c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2220      	movs	r2, #32
 800e7ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e7e0:	2300      	movs	r3, #0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3710      	adds	r7, #16
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b09c      	sub	sp, #112	; 0x70
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	60f8      	str	r0, [r7, #12]
 800e7f2:	60b9      	str	r1, [r7, #8]
 800e7f4:	603b      	str	r3, [r7, #0]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7fa:	e0a9      	b.n	800e950 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e802:	f000 80a5 	beq.w	800e950 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e806:	f7f7 f855 	bl	80058b4 <HAL_GetTick>
 800e80a:	4602      	mov	r2, r0
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	1ad3      	subs	r3, r2, r3
 800e810:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e812:	429a      	cmp	r2, r3
 800e814:	d302      	bcc.n	800e81c <UART_WaitOnFlagUntilTimeout+0x32>
 800e816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d140      	bne.n	800e89e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e824:	e853 3f00 	ldrex	r3, [r3]
 800e828:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e82c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e830:	667b      	str	r3, [r7, #100]	; 0x64
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	461a      	mov	r2, r3
 800e838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e83a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e83c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e83e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e840:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e842:	e841 2300 	strex	r3, r2, [r1]
 800e846:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1e6      	bne.n	800e81c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	3308      	adds	r3, #8
 800e854:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e858:	e853 3f00 	ldrex	r3, [r3]
 800e85c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e860:	f023 0301 	bic.w	r3, r3, #1
 800e864:	663b      	str	r3, [r7, #96]	; 0x60
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3308      	adds	r3, #8
 800e86c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e86e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e870:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e872:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e876:	e841 2300 	strex	r3, r2, [r1]
 800e87a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e87c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d1e5      	bne.n	800e84e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2220      	movs	r2, #32
 800e886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2220      	movs	r2, #32
 800e88e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2200      	movs	r2, #0
 800e896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e89a:	2303      	movs	r3, #3
 800e89c:	e069      	b.n	800e972 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f003 0304 	and.w	r3, r3, #4
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d051      	beq.n	800e950 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	69db      	ldr	r3, [r3, #28]
 800e8b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8ba:	d149      	bne.n	800e950 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	e853 3f00 	ldrex	r3, [r3]
 800e8d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e8da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8e4:	637b      	str	r3, [r7, #52]	; 0x34
 800e8e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8ec:	e841 2300 	strex	r3, r2, [r1]
 800e8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1e6      	bne.n	800e8c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	3308      	adds	r3, #8
 800e8fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	e853 3f00 	ldrex	r3, [r3]
 800e906:	613b      	str	r3, [r7, #16]
   return(result);
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	f023 0301 	bic.w	r3, r3, #1
 800e90e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	3308      	adds	r3, #8
 800e916:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e918:	623a      	str	r2, [r7, #32]
 800e91a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e91c:	69f9      	ldr	r1, [r7, #28]
 800e91e:	6a3a      	ldr	r2, [r7, #32]
 800e920:	e841 2300 	strex	r3, r2, [r1]
 800e924:	61bb      	str	r3, [r7, #24]
   return(result);
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1e5      	bne.n	800e8f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2220      	movs	r2, #32
 800e930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2220      	movs	r2, #32
 800e938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2220      	movs	r2, #32
 800e940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2200      	movs	r2, #0
 800e948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e94c:	2303      	movs	r3, #3
 800e94e:	e010      	b.n	800e972 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	69da      	ldr	r2, [r3, #28]
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	4013      	ands	r3, r2
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	bf0c      	ite	eq
 800e960:	2301      	moveq	r3, #1
 800e962:	2300      	movne	r3, #0
 800e964:	b2db      	uxtb	r3, r3
 800e966:	461a      	mov	r2, r3
 800e968:	79fb      	ldrb	r3, [r7, #7]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	f43f af46 	beq.w	800e7fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e970:	2300      	movs	r3, #0
}
 800e972:	4618      	mov	r0, r3
 800e974:	3770      	adds	r7, #112	; 0x70
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
	...

0800e97c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b096      	sub	sp, #88	; 0x58
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	4613      	mov	r3, r2
 800e988:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	88fa      	ldrh	r2, [r7, #6]
 800e994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2222      	movs	r2, #34	; 0x22
 800e9a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d02c      	beq.n	800ea0a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9b4:	4a42      	ldr	r2, [pc, #264]	; (800eac0 <UART_Start_Receive_DMA+0x144>)
 800e9b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9bc:	4a41      	ldr	r2, [pc, #260]	; (800eac4 <UART_Start_Receive_DMA+0x148>)
 800e9be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9c4:	4a40      	ldr	r2, [pc, #256]	; (800eac8 <UART_Start_Receive_DMA+0x14c>)
 800e9c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	3324      	adds	r3, #36	; 0x24
 800e9da:	4619      	mov	r1, r3
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	88fb      	ldrh	r3, [r7, #6]
 800e9e4:	f7f7 fdc4 	bl	8006570 <HAL_DMA_Start_IT>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00d      	beq.n	800ea0a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2210      	movs	r2, #16
 800e9f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2220      	movs	r2, #32
 800ea02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ea06:	2301      	movs	r3, #1
 800ea08:	e055      	b.n	800eab6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	691b      	ldr	r3, [r3, #16]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d018      	beq.n	800ea4c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea22:	e853 3f00 	ldrex	r3, [r3]
 800ea26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea2e:	657b      	str	r3, [r7, #84]	; 0x54
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	461a      	mov	r2, r3
 800ea36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea38:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea3a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea40:	e841 2300 	strex	r3, r2, [r1]
 800ea44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1e6      	bne.n	800ea1a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	3308      	adds	r3, #8
 800ea52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea56:	e853 3f00 	ldrex	r3, [r3]
 800ea5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5e:	f043 0301 	orr.w	r3, r3, #1
 800ea62:	653b      	str	r3, [r7, #80]	; 0x50
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	3308      	adds	r3, #8
 800ea6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea6c:	637a      	str	r2, [r7, #52]	; 0x34
 800ea6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea74:	e841 2300 	strex	r3, r2, [r1]
 800ea78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ea7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d1e5      	bne.n	800ea4c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	3308      	adds	r3, #8
 800ea86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	e853 3f00 	ldrex	r3, [r3]
 800ea8e:	613b      	str	r3, [r7, #16]
   return(result);
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3308      	adds	r3, #8
 800ea9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eaa0:	623a      	str	r2, [r7, #32]
 800eaa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa4:	69f9      	ldr	r1, [r7, #28]
 800eaa6:	6a3a      	ldr	r2, [r7, #32]
 800eaa8:	e841 2300 	strex	r3, r2, [r1]
 800eaac:	61bb      	str	r3, [r7, #24]
   return(result);
 800eaae:	69bb      	ldr	r3, [r7, #24]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d1e5      	bne.n	800ea80 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3758      	adds	r7, #88	; 0x58
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	0800eccf 	.word	0x0800eccf
 800eac4:	0800edf1 	.word	0x0800edf1
 800eac8:	0800ee29 	.word	0x0800ee29

0800eacc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eacc:	b480      	push	{r7}
 800eace:	b08f      	sub	sp, #60	; 0x3c
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	e853 3f00 	ldrex	r3, [r3]
 800eae0:	61fb      	str	r3, [r7, #28]
   return(result);
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eae8:	637b      	str	r3, [r7, #52]	; 0x34
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaf4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eaf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eafa:	e841 2300 	strex	r3, r2, [r1]
 800eafe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1e6      	bne.n	800ead4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3308      	adds	r3, #8
 800eb0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	e853 3f00 	ldrex	r3, [r3]
 800eb14:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eb1c:	633b      	str	r3, [r7, #48]	; 0x30
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	3308      	adds	r3, #8
 800eb24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb26:	61ba      	str	r2, [r7, #24]
 800eb28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2a:	6979      	ldr	r1, [r7, #20]
 800eb2c:	69ba      	ldr	r2, [r7, #24]
 800eb2e:	e841 2300 	strex	r3, r2, [r1]
 800eb32:	613b      	str	r3, [r7, #16]
   return(result);
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1e5      	bne.n	800eb06 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2220      	movs	r2, #32
 800eb3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800eb42:	bf00      	nop
 800eb44:	373c      	adds	r7, #60	; 0x3c
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr
	...

0800eb50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b095      	sub	sp, #84	; 0x54
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb60:	e853 3f00 	ldrex	r3, [r3]
 800eb64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	461a      	mov	r2, r3
 800eb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb76:	643b      	str	r3, [r7, #64]	; 0x40
 800eb78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb7e:	e841 2300 	strex	r3, r2, [r1]
 800eb82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1e6      	bne.n	800eb58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	3308      	adds	r3, #8
 800eb90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb92:	6a3b      	ldr	r3, [r7, #32]
 800eb94:	e853 3f00 	ldrex	r3, [r3]
 800eb98:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb9a:	69fa      	ldr	r2, [r7, #28]
 800eb9c:	4b1e      	ldr	r3, [pc, #120]	; (800ec18 <UART_EndRxTransfer+0xc8>)
 800eb9e:	4013      	ands	r3, r2
 800eba0:	64bb      	str	r3, [r7, #72]	; 0x48
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	3308      	adds	r3, #8
 800eba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebb2:	e841 2300 	strex	r3, r2, [r1]
 800ebb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ebb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1e5      	bne.n	800eb8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d118      	bne.n	800ebf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	e853 3f00 	ldrex	r3, [r3]
 800ebd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	f023 0310 	bic.w	r3, r3, #16
 800ebda:	647b      	str	r3, [r7, #68]	; 0x44
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebe4:	61bb      	str	r3, [r7, #24]
 800ebe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe8:	6979      	ldr	r1, [r7, #20]
 800ebea:	69ba      	ldr	r2, [r7, #24]
 800ebec:	e841 2300 	strex	r3, r2, [r1]
 800ebf0:	613b      	str	r3, [r7, #16]
   return(result);
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d1e6      	bne.n	800ebc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2220      	movs	r2, #32
 800ebfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2200      	movs	r2, #0
 800ec04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ec0c:	bf00      	nop
 800ec0e:	3754      	adds	r7, #84	; 0x54
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr
 800ec18:	effffffe 	.word	0xeffffffe

0800ec1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b090      	sub	sp, #64	; 0x40
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec28:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	69db      	ldr	r3, [r3, #28]
 800ec2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec32:	d037      	beq.n	800eca4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ec34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec36:	2200      	movs	r2, #0
 800ec38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ec3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	3308      	adds	r3, #8
 800ec42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec46:	e853 3f00 	ldrex	r3, [r3]
 800ec4a:	623b      	str	r3, [r7, #32]
   return(result);
 800ec4c:	6a3b      	ldr	r3, [r7, #32]
 800ec4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec52:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	3308      	adds	r3, #8
 800ec5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec5c:	633a      	str	r2, [r7, #48]	; 0x30
 800ec5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec64:	e841 2300 	strex	r3, r2, [r1]
 800ec68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d1e5      	bne.n	800ec3c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	e853 3f00 	ldrex	r3, [r3]
 800ec7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec84:	637b      	str	r3, [r7, #52]	; 0x34
 800ec86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec8e:	61fb      	str	r3, [r7, #28]
 800ec90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec92:	69b9      	ldr	r1, [r7, #24]
 800ec94:	69fa      	ldr	r2, [r7, #28]
 800ec96:	e841 2300 	strex	r3, r2, [r1]
 800ec9a:	617b      	str	r3, [r7, #20]
   return(result);
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1e6      	bne.n	800ec70 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eca2:	e002      	b.n	800ecaa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800eca4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eca6:	f7fe fe1d 	bl	800d8e4 <HAL_UART_TxCpltCallback>
}
 800ecaa:	bf00      	nop
 800ecac:	3740      	adds	r7, #64	; 0x40
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}

0800ecb2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	b084      	sub	sp, #16
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecbe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f7fe fe19 	bl	800d8f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecc6:	bf00      	nop
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b09c      	sub	sp, #112	; 0x70
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecda:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	69db      	ldr	r3, [r3, #28]
 800ece0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ece4:	d071      	beq.n	800edca <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ece6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ece8:	2200      	movs	r2, #0
 800ecea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecf6:	e853 3f00 	ldrex	r3, [r3]
 800ecfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ecfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed02:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	461a      	mov	r2, r3
 800ed0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed14:	e841 2300 	strex	r3, r2, [r1]
 800ed18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1e6      	bne.n	800ecee <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3308      	adds	r3, #8
 800ed26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2a:	e853 3f00 	ldrex	r3, [r3]
 800ed2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed32:	f023 0301 	bic.w	r3, r3, #1
 800ed36:	667b      	str	r3, [r7, #100]	; 0x64
 800ed38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	3308      	adds	r3, #8
 800ed3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed40:	647a      	str	r2, [r7, #68]	; 0x44
 800ed42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed48:	e841 2300 	strex	r3, r2, [r1]
 800ed4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1e5      	bne.n	800ed20 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3308      	adds	r3, #8
 800ed5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5e:	e853 3f00 	ldrex	r3, [r3]
 800ed62:	623b      	str	r3, [r7, #32]
   return(result);
 800ed64:	6a3b      	ldr	r3, [r7, #32]
 800ed66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed6a:	663b      	str	r3, [r7, #96]	; 0x60
 800ed6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	3308      	adds	r3, #8
 800ed72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed74:	633a      	str	r2, [r7, #48]	; 0x30
 800ed76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed7c:	e841 2300 	strex	r3, r2, [r1]
 800ed80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d1e5      	bne.n	800ed54 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ed88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed8a:	2220      	movs	r2, #32
 800ed8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d118      	bne.n	800edca <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	e853 3f00 	ldrex	r3, [r3]
 800eda4:	60fb      	str	r3, [r7, #12]
   return(result);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f023 0310 	bic.w	r3, r3, #16
 800edac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	461a      	mov	r2, r3
 800edb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edb6:	61fb      	str	r3, [r7, #28]
 800edb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edba:	69b9      	ldr	r1, [r7, #24]
 800edbc:	69fa      	ldr	r2, [r7, #28]
 800edbe:	e841 2300 	strex	r3, r2, [r1]
 800edc2:	617b      	str	r3, [r7, #20]
   return(result);
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d1e6      	bne.n	800ed98 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d107      	bne.n	800ede2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800edd8:	4619      	mov	r1, r3
 800edda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eddc:	f7fe fda0 	bl	800d920 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ede0:	e002      	b.n	800ede8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ede2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ede4:	f7f5 fa18 	bl	8004218 <HAL_UART_RxCpltCallback>
}
 800ede8:	bf00      	nop
 800edea:	3770      	adds	r7, #112	; 0x70
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edfc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d109      	bne.n	800ee1a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee0c:	085b      	lsrs	r3, r3, #1
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	4619      	mov	r1, r3
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f7fe fd84 	bl	800d920 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee18:	e002      	b.n	800ee20 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	f7fe fd76 	bl	800d90c <HAL_UART_RxHalfCpltCallback>
}
 800ee20:	bf00      	nop
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b086      	sub	sp, #24
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee34:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee3c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee50:	2b80      	cmp	r3, #128	; 0x80
 800ee52:	d109      	bne.n	800ee68 <UART_DMAError+0x40>
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	2b21      	cmp	r3, #33	; 0x21
 800ee58:	d106      	bne.n	800ee68 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ee62:	6978      	ldr	r0, [r7, #20]
 800ee64:	f7ff fe32 	bl	800eacc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	689b      	ldr	r3, [r3, #8]
 800ee6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee72:	2b40      	cmp	r3, #64	; 0x40
 800ee74:	d109      	bne.n	800ee8a <UART_DMAError+0x62>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2b22      	cmp	r3, #34	; 0x22
 800ee7a:	d106      	bne.n	800ee8a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ee84:	6978      	ldr	r0, [r7, #20]
 800ee86:	f7ff fe63 	bl	800eb50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee90:	f043 0210 	orr.w	r2, r3, #16
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee9a:	6978      	ldr	r0, [r7, #20]
 800ee9c:	f7f5 f984 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eea0:	bf00      	nop
 800eea2:	3718      	adds	r7, #24
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2200      	movs	r2, #0
 800eec2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f7f5 f96e 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eecc:	bf00      	nop
 800eece:	3710      	adds	r7, #16
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b088      	sub	sp, #32
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	e853 3f00 	ldrex	r3, [r3]
 800eee8:	60bb      	str	r3, [r7, #8]
   return(result);
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eef0:	61fb      	str	r3, [r7, #28]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	461a      	mov	r2, r3
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	61bb      	str	r3, [r7, #24]
 800eefc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eefe:	6979      	ldr	r1, [r7, #20]
 800ef00:	69ba      	ldr	r2, [r7, #24]
 800ef02:	e841 2300 	strex	r3, r2, [r1]
 800ef06:	613b      	str	r3, [r7, #16]
   return(result);
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1e6      	bne.n	800eedc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2220      	movs	r2, #32
 800ef12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7fe fce1 	bl	800d8e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef22:	bf00      	nop
 800ef24:	3720      	adds	r7, #32
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef2a:	b480      	push	{r7}
 800ef2c:	b083      	sub	sp, #12
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef32:	bf00      	nop
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr

0800ef3e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ef3e:	b480      	push	{r7}
 800ef40:	b083      	sub	sp, #12
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ef46:	bf00      	nop
 800ef48:	370c      	adds	r7, #12
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr

0800ef52 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ef52:	b480      	push	{r7}
 800ef54:	b083      	sub	sp, #12
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ef5a:	bf00      	nop
 800ef5c:	370c      	adds	r7, #12
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr

0800ef66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ef66:	b480      	push	{r7}
 800ef68:	b085      	sub	sp, #20
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d101      	bne.n	800ef7c <HAL_UARTEx_DisableFifoMode+0x16>
 800ef78:	2302      	movs	r3, #2
 800ef7a:	e027      	b.n	800efcc <HAL_UARTEx_DisableFifoMode+0x66>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2224      	movs	r2, #36	; 0x24
 800ef88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f022 0201 	bic.w	r2, r2, #1
 800efa2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800efaa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2200      	movs	r2, #0
 800efb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2220      	movs	r2, #32
 800efbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800efca:	2300      	movs	r3, #0
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3714      	adds	r7, #20
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr

0800efd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d101      	bne.n	800eff0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800efec:	2302      	movs	r3, #2
 800efee:	e02d      	b.n	800f04c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2201      	movs	r2, #1
 800eff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2224      	movs	r2, #36	; 0x24
 800effc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f022 0201 	bic.w	r2, r2, #1
 800f016:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	689b      	ldr	r3, [r3, #8]
 800f01e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	430a      	orrs	r2, r1
 800f02a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 f84f 	bl	800f0d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	68fa      	ldr	r2, [r7, #12]
 800f038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2220      	movs	r2, #32
 800f03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2200      	movs	r2, #0
 800f046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3710      	adds	r7, #16
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f064:	2b01      	cmp	r3, #1
 800f066:	d101      	bne.n	800f06c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f068:	2302      	movs	r3, #2
 800f06a:	e02d      	b.n	800f0c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2201      	movs	r2, #1
 800f070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2224      	movs	r2, #36	; 0x24
 800f078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f022 0201 	bic.w	r2, r2, #1
 800f092:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	689b      	ldr	r3, [r3, #8]
 800f09a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	430a      	orrs	r2, r1
 800f0a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 f811 	bl	800f0d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2220      	movs	r2, #32
 800f0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d108      	bne.n	800f0f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f0f0:	e031      	b.n	800f156 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f0f2:	2310      	movs	r3, #16
 800f0f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f0f6:	2310      	movs	r3, #16
 800f0f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	0e5b      	lsrs	r3, r3, #25
 800f102:	b2db      	uxtb	r3, r3
 800f104:	f003 0307 	and.w	r3, r3, #7
 800f108:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	0f5b      	lsrs	r3, r3, #29
 800f112:	b2db      	uxtb	r3, r3
 800f114:	f003 0307 	and.w	r3, r3, #7
 800f118:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f11a:	7bbb      	ldrb	r3, [r7, #14]
 800f11c:	7b3a      	ldrb	r2, [r7, #12]
 800f11e:	4911      	ldr	r1, [pc, #68]	; (800f164 <UARTEx_SetNbDataToProcess+0x94>)
 800f120:	5c8a      	ldrb	r2, [r1, r2]
 800f122:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f126:	7b3a      	ldrb	r2, [r7, #12]
 800f128:	490f      	ldr	r1, [pc, #60]	; (800f168 <UARTEx_SetNbDataToProcess+0x98>)
 800f12a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f12c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f130:	b29a      	uxth	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f138:	7bfb      	ldrb	r3, [r7, #15]
 800f13a:	7b7a      	ldrb	r2, [r7, #13]
 800f13c:	4909      	ldr	r1, [pc, #36]	; (800f164 <UARTEx_SetNbDataToProcess+0x94>)
 800f13e:	5c8a      	ldrb	r2, [r1, r2]
 800f140:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f144:	7b7a      	ldrb	r2, [r7, #13]
 800f146:	4908      	ldr	r1, [pc, #32]	; (800f168 <UARTEx_SetNbDataToProcess+0x98>)
 800f148:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f14a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f14e:	b29a      	uxth	r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f156:	bf00      	nop
 800f158:	3714      	adds	r7, #20
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	0800f828 	.word	0x0800f828
 800f168:	0800f830 	.word	0x0800f830

0800f16c <__cxa_pure_virtual>:
 800f16c:	b508      	push	{r3, lr}
 800f16e:	f000 f80d 	bl	800f18c <_ZSt9terminatev>

0800f172 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f172:	b508      	push	{r3, lr}
 800f174:	4780      	blx	r0
 800f176:	f000 f80e 	bl	800f196 <abort>
	...

0800f17c <_ZSt13get_terminatev>:
 800f17c:	4b02      	ldr	r3, [pc, #8]	; (800f188 <_ZSt13get_terminatev+0xc>)
 800f17e:	6818      	ldr	r0, [r3, #0]
 800f180:	f3bf 8f5b 	dmb	ish
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	24000068 	.word	0x24000068

0800f18c <_ZSt9terminatev>:
 800f18c:	b508      	push	{r3, lr}
 800f18e:	f7ff fff5 	bl	800f17c <_ZSt13get_terminatev>
 800f192:	f7ff ffee 	bl	800f172 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f196 <abort>:
 800f196:	b508      	push	{r3, lr}
 800f198:	2006      	movs	r0, #6
 800f19a:	f000 f873 	bl	800f284 <raise>
 800f19e:	2001      	movs	r0, #1
 800f1a0:	f7f6 fa20 	bl	80055e4 <_exit>

0800f1a4 <__errno>:
 800f1a4:	4b01      	ldr	r3, [pc, #4]	; (800f1ac <__errno+0x8>)
 800f1a6:	6818      	ldr	r0, [r3, #0]
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	2400006c 	.word	0x2400006c

0800f1b0 <__libc_init_array>:
 800f1b0:	b570      	push	{r4, r5, r6, lr}
 800f1b2:	4d0d      	ldr	r5, [pc, #52]	; (800f1e8 <__libc_init_array+0x38>)
 800f1b4:	4c0d      	ldr	r4, [pc, #52]	; (800f1ec <__libc_init_array+0x3c>)
 800f1b6:	1b64      	subs	r4, r4, r5
 800f1b8:	10a4      	asrs	r4, r4, #2
 800f1ba:	2600      	movs	r6, #0
 800f1bc:	42a6      	cmp	r6, r4
 800f1be:	d109      	bne.n	800f1d4 <__libc_init_array+0x24>
 800f1c0:	4d0b      	ldr	r5, [pc, #44]	; (800f1f0 <__libc_init_array+0x40>)
 800f1c2:	4c0c      	ldr	r4, [pc, #48]	; (800f1f4 <__libc_init_array+0x44>)
 800f1c4:	f000 f9b0 	bl	800f528 <_init>
 800f1c8:	1b64      	subs	r4, r4, r5
 800f1ca:	10a4      	asrs	r4, r4, #2
 800f1cc:	2600      	movs	r6, #0
 800f1ce:	42a6      	cmp	r6, r4
 800f1d0:	d105      	bne.n	800f1de <__libc_init_array+0x2e>
 800f1d2:	bd70      	pop	{r4, r5, r6, pc}
 800f1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1d8:	4798      	blx	r3
 800f1da:	3601      	adds	r6, #1
 800f1dc:	e7ee      	b.n	800f1bc <__libc_init_array+0xc>
 800f1de:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1e2:	4798      	blx	r3
 800f1e4:	3601      	adds	r6, #1
 800f1e6:	e7f2      	b.n	800f1ce <__libc_init_array+0x1e>
 800f1e8:	0800f840 	.word	0x0800f840
 800f1ec:	0800f840 	.word	0x0800f840
 800f1f0:	0800f840 	.word	0x0800f840
 800f1f4:	0800f848 	.word	0x0800f848

0800f1f8 <memcpy>:
 800f1f8:	440a      	add	r2, r1
 800f1fa:	4291      	cmp	r1, r2
 800f1fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f200:	d100      	bne.n	800f204 <memcpy+0xc>
 800f202:	4770      	bx	lr
 800f204:	b510      	push	{r4, lr}
 800f206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f20a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f20e:	4291      	cmp	r1, r2
 800f210:	d1f9      	bne.n	800f206 <memcpy+0xe>
 800f212:	bd10      	pop	{r4, pc}

0800f214 <memset>:
 800f214:	4402      	add	r2, r0
 800f216:	4603      	mov	r3, r0
 800f218:	4293      	cmp	r3, r2
 800f21a:	d100      	bne.n	800f21e <memset+0xa>
 800f21c:	4770      	bx	lr
 800f21e:	f803 1b01 	strb.w	r1, [r3], #1
 800f222:	e7f9      	b.n	800f218 <memset+0x4>

0800f224 <realloc>:
 800f224:	4b02      	ldr	r3, [pc, #8]	; (800f230 <realloc+0xc>)
 800f226:	460a      	mov	r2, r1
 800f228:	4601      	mov	r1, r0
 800f22a:	6818      	ldr	r0, [r3, #0]
 800f22c:	f000 b8da 	b.w	800f3e4 <_realloc_r>
 800f230:	2400006c 	.word	0x2400006c

0800f234 <_raise_r>:
 800f234:	291f      	cmp	r1, #31
 800f236:	b538      	push	{r3, r4, r5, lr}
 800f238:	4604      	mov	r4, r0
 800f23a:	460d      	mov	r5, r1
 800f23c:	d904      	bls.n	800f248 <_raise_r+0x14>
 800f23e:	2316      	movs	r3, #22
 800f240:	6003      	str	r3, [r0, #0]
 800f242:	f04f 30ff 	mov.w	r0, #4294967295
 800f246:	bd38      	pop	{r3, r4, r5, pc}
 800f248:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f24a:	b112      	cbz	r2, 800f252 <_raise_r+0x1e>
 800f24c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f250:	b94b      	cbnz	r3, 800f266 <_raise_r+0x32>
 800f252:	4620      	mov	r0, r4
 800f254:	f000 f830 	bl	800f2b8 <_getpid_r>
 800f258:	462a      	mov	r2, r5
 800f25a:	4601      	mov	r1, r0
 800f25c:	4620      	mov	r0, r4
 800f25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f262:	f000 b817 	b.w	800f294 <_kill_r>
 800f266:	2b01      	cmp	r3, #1
 800f268:	d00a      	beq.n	800f280 <_raise_r+0x4c>
 800f26a:	1c59      	adds	r1, r3, #1
 800f26c:	d103      	bne.n	800f276 <_raise_r+0x42>
 800f26e:	2316      	movs	r3, #22
 800f270:	6003      	str	r3, [r0, #0]
 800f272:	2001      	movs	r0, #1
 800f274:	e7e7      	b.n	800f246 <_raise_r+0x12>
 800f276:	2400      	movs	r4, #0
 800f278:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f27c:	4628      	mov	r0, r5
 800f27e:	4798      	blx	r3
 800f280:	2000      	movs	r0, #0
 800f282:	e7e0      	b.n	800f246 <_raise_r+0x12>

0800f284 <raise>:
 800f284:	4b02      	ldr	r3, [pc, #8]	; (800f290 <raise+0xc>)
 800f286:	4601      	mov	r1, r0
 800f288:	6818      	ldr	r0, [r3, #0]
 800f28a:	f7ff bfd3 	b.w	800f234 <_raise_r>
 800f28e:	bf00      	nop
 800f290:	2400006c 	.word	0x2400006c

0800f294 <_kill_r>:
 800f294:	b538      	push	{r3, r4, r5, lr}
 800f296:	4d07      	ldr	r5, [pc, #28]	; (800f2b4 <_kill_r+0x20>)
 800f298:	2300      	movs	r3, #0
 800f29a:	4604      	mov	r4, r0
 800f29c:	4608      	mov	r0, r1
 800f29e:	4611      	mov	r1, r2
 800f2a0:	602b      	str	r3, [r5, #0]
 800f2a2:	f7f6 f98f 	bl	80055c4 <_kill>
 800f2a6:	1c43      	adds	r3, r0, #1
 800f2a8:	d102      	bne.n	800f2b0 <_kill_r+0x1c>
 800f2aa:	682b      	ldr	r3, [r5, #0]
 800f2ac:	b103      	cbz	r3, 800f2b0 <_kill_r+0x1c>
 800f2ae:	6023      	str	r3, [r4, #0]
 800f2b0:	bd38      	pop	{r3, r4, r5, pc}
 800f2b2:	bf00      	nop
 800f2b4:	240010ac 	.word	0x240010ac

0800f2b8 <_getpid_r>:
 800f2b8:	f7f6 b97c 	b.w	80055b4 <_getpid>

0800f2bc <sbrk_aligned>:
 800f2bc:	b570      	push	{r4, r5, r6, lr}
 800f2be:	4e0e      	ldr	r6, [pc, #56]	; (800f2f8 <sbrk_aligned+0x3c>)
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	6831      	ldr	r1, [r6, #0]
 800f2c4:	4605      	mov	r5, r0
 800f2c6:	b911      	cbnz	r1, 800f2ce <sbrk_aligned+0x12>
 800f2c8:	f000 f8bc 	bl	800f444 <_sbrk_r>
 800f2cc:	6030      	str	r0, [r6, #0]
 800f2ce:	4621      	mov	r1, r4
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	f000 f8b7 	bl	800f444 <_sbrk_r>
 800f2d6:	1c43      	adds	r3, r0, #1
 800f2d8:	d00a      	beq.n	800f2f0 <sbrk_aligned+0x34>
 800f2da:	1cc4      	adds	r4, r0, #3
 800f2dc:	f024 0403 	bic.w	r4, r4, #3
 800f2e0:	42a0      	cmp	r0, r4
 800f2e2:	d007      	beq.n	800f2f4 <sbrk_aligned+0x38>
 800f2e4:	1a21      	subs	r1, r4, r0
 800f2e6:	4628      	mov	r0, r5
 800f2e8:	f000 f8ac 	bl	800f444 <_sbrk_r>
 800f2ec:	3001      	adds	r0, #1
 800f2ee:	d101      	bne.n	800f2f4 <sbrk_aligned+0x38>
 800f2f0:	f04f 34ff 	mov.w	r4, #4294967295
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	bd70      	pop	{r4, r5, r6, pc}
 800f2f8:	240010a8 	.word	0x240010a8

0800f2fc <_malloc_r>:
 800f2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f300:	1ccd      	adds	r5, r1, #3
 800f302:	f025 0503 	bic.w	r5, r5, #3
 800f306:	3508      	adds	r5, #8
 800f308:	2d0c      	cmp	r5, #12
 800f30a:	bf38      	it	cc
 800f30c:	250c      	movcc	r5, #12
 800f30e:	2d00      	cmp	r5, #0
 800f310:	4607      	mov	r7, r0
 800f312:	db01      	blt.n	800f318 <_malloc_r+0x1c>
 800f314:	42a9      	cmp	r1, r5
 800f316:	d905      	bls.n	800f324 <_malloc_r+0x28>
 800f318:	230c      	movs	r3, #12
 800f31a:	603b      	str	r3, [r7, #0]
 800f31c:	2600      	movs	r6, #0
 800f31e:	4630      	mov	r0, r6
 800f320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f324:	4e2e      	ldr	r6, [pc, #184]	; (800f3e0 <_malloc_r+0xe4>)
 800f326:	f000 f89d 	bl	800f464 <__malloc_lock>
 800f32a:	6833      	ldr	r3, [r6, #0]
 800f32c:	461c      	mov	r4, r3
 800f32e:	bb34      	cbnz	r4, 800f37e <_malloc_r+0x82>
 800f330:	4629      	mov	r1, r5
 800f332:	4638      	mov	r0, r7
 800f334:	f7ff ffc2 	bl	800f2bc <sbrk_aligned>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	4604      	mov	r4, r0
 800f33c:	d14d      	bne.n	800f3da <_malloc_r+0xde>
 800f33e:	6834      	ldr	r4, [r6, #0]
 800f340:	4626      	mov	r6, r4
 800f342:	2e00      	cmp	r6, #0
 800f344:	d140      	bne.n	800f3c8 <_malloc_r+0xcc>
 800f346:	6823      	ldr	r3, [r4, #0]
 800f348:	4631      	mov	r1, r6
 800f34a:	4638      	mov	r0, r7
 800f34c:	eb04 0803 	add.w	r8, r4, r3
 800f350:	f000 f878 	bl	800f444 <_sbrk_r>
 800f354:	4580      	cmp	r8, r0
 800f356:	d13a      	bne.n	800f3ce <_malloc_r+0xd2>
 800f358:	6821      	ldr	r1, [r4, #0]
 800f35a:	3503      	adds	r5, #3
 800f35c:	1a6d      	subs	r5, r5, r1
 800f35e:	f025 0503 	bic.w	r5, r5, #3
 800f362:	3508      	adds	r5, #8
 800f364:	2d0c      	cmp	r5, #12
 800f366:	bf38      	it	cc
 800f368:	250c      	movcc	r5, #12
 800f36a:	4629      	mov	r1, r5
 800f36c:	4638      	mov	r0, r7
 800f36e:	f7ff ffa5 	bl	800f2bc <sbrk_aligned>
 800f372:	3001      	adds	r0, #1
 800f374:	d02b      	beq.n	800f3ce <_malloc_r+0xd2>
 800f376:	6823      	ldr	r3, [r4, #0]
 800f378:	442b      	add	r3, r5
 800f37a:	6023      	str	r3, [r4, #0]
 800f37c:	e00e      	b.n	800f39c <_malloc_r+0xa0>
 800f37e:	6822      	ldr	r2, [r4, #0]
 800f380:	1b52      	subs	r2, r2, r5
 800f382:	d41e      	bmi.n	800f3c2 <_malloc_r+0xc6>
 800f384:	2a0b      	cmp	r2, #11
 800f386:	d916      	bls.n	800f3b6 <_malloc_r+0xba>
 800f388:	1961      	adds	r1, r4, r5
 800f38a:	42a3      	cmp	r3, r4
 800f38c:	6025      	str	r5, [r4, #0]
 800f38e:	bf18      	it	ne
 800f390:	6059      	strne	r1, [r3, #4]
 800f392:	6863      	ldr	r3, [r4, #4]
 800f394:	bf08      	it	eq
 800f396:	6031      	streq	r1, [r6, #0]
 800f398:	5162      	str	r2, [r4, r5]
 800f39a:	604b      	str	r3, [r1, #4]
 800f39c:	4638      	mov	r0, r7
 800f39e:	f104 060b 	add.w	r6, r4, #11
 800f3a2:	f000 f865 	bl	800f470 <__malloc_unlock>
 800f3a6:	f026 0607 	bic.w	r6, r6, #7
 800f3aa:	1d23      	adds	r3, r4, #4
 800f3ac:	1af2      	subs	r2, r6, r3
 800f3ae:	d0b6      	beq.n	800f31e <_malloc_r+0x22>
 800f3b0:	1b9b      	subs	r3, r3, r6
 800f3b2:	50a3      	str	r3, [r4, r2]
 800f3b4:	e7b3      	b.n	800f31e <_malloc_r+0x22>
 800f3b6:	6862      	ldr	r2, [r4, #4]
 800f3b8:	42a3      	cmp	r3, r4
 800f3ba:	bf0c      	ite	eq
 800f3bc:	6032      	streq	r2, [r6, #0]
 800f3be:	605a      	strne	r2, [r3, #4]
 800f3c0:	e7ec      	b.n	800f39c <_malloc_r+0xa0>
 800f3c2:	4623      	mov	r3, r4
 800f3c4:	6864      	ldr	r4, [r4, #4]
 800f3c6:	e7b2      	b.n	800f32e <_malloc_r+0x32>
 800f3c8:	4634      	mov	r4, r6
 800f3ca:	6876      	ldr	r6, [r6, #4]
 800f3cc:	e7b9      	b.n	800f342 <_malloc_r+0x46>
 800f3ce:	230c      	movs	r3, #12
 800f3d0:	603b      	str	r3, [r7, #0]
 800f3d2:	4638      	mov	r0, r7
 800f3d4:	f000 f84c 	bl	800f470 <__malloc_unlock>
 800f3d8:	e7a1      	b.n	800f31e <_malloc_r+0x22>
 800f3da:	6025      	str	r5, [r4, #0]
 800f3dc:	e7de      	b.n	800f39c <_malloc_r+0xa0>
 800f3de:	bf00      	nop
 800f3e0:	240010a4 	.word	0x240010a4

0800f3e4 <_realloc_r>:
 800f3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e8:	4680      	mov	r8, r0
 800f3ea:	4614      	mov	r4, r2
 800f3ec:	460e      	mov	r6, r1
 800f3ee:	b921      	cbnz	r1, 800f3fa <_realloc_r+0x16>
 800f3f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	f7ff bf81 	b.w	800f2fc <_malloc_r>
 800f3fa:	b92a      	cbnz	r2, 800f408 <_realloc_r+0x24>
 800f3fc:	f000 f83e 	bl	800f47c <_free_r>
 800f400:	4625      	mov	r5, r4
 800f402:	4628      	mov	r0, r5
 800f404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f408:	f000 f884 	bl	800f514 <_malloc_usable_size_r>
 800f40c:	4284      	cmp	r4, r0
 800f40e:	4607      	mov	r7, r0
 800f410:	d802      	bhi.n	800f418 <_realloc_r+0x34>
 800f412:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f416:	d812      	bhi.n	800f43e <_realloc_r+0x5a>
 800f418:	4621      	mov	r1, r4
 800f41a:	4640      	mov	r0, r8
 800f41c:	f7ff ff6e 	bl	800f2fc <_malloc_r>
 800f420:	4605      	mov	r5, r0
 800f422:	2800      	cmp	r0, #0
 800f424:	d0ed      	beq.n	800f402 <_realloc_r+0x1e>
 800f426:	42bc      	cmp	r4, r7
 800f428:	4622      	mov	r2, r4
 800f42a:	4631      	mov	r1, r6
 800f42c:	bf28      	it	cs
 800f42e:	463a      	movcs	r2, r7
 800f430:	f7ff fee2 	bl	800f1f8 <memcpy>
 800f434:	4631      	mov	r1, r6
 800f436:	4640      	mov	r0, r8
 800f438:	f000 f820 	bl	800f47c <_free_r>
 800f43c:	e7e1      	b.n	800f402 <_realloc_r+0x1e>
 800f43e:	4635      	mov	r5, r6
 800f440:	e7df      	b.n	800f402 <_realloc_r+0x1e>
	...

0800f444 <_sbrk_r>:
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	4d06      	ldr	r5, [pc, #24]	; (800f460 <_sbrk_r+0x1c>)
 800f448:	2300      	movs	r3, #0
 800f44a:	4604      	mov	r4, r0
 800f44c:	4608      	mov	r0, r1
 800f44e:	602b      	str	r3, [r5, #0]
 800f450:	f7f6 f8d2 	bl	80055f8 <_sbrk>
 800f454:	1c43      	adds	r3, r0, #1
 800f456:	d102      	bne.n	800f45e <_sbrk_r+0x1a>
 800f458:	682b      	ldr	r3, [r5, #0]
 800f45a:	b103      	cbz	r3, 800f45e <_sbrk_r+0x1a>
 800f45c:	6023      	str	r3, [r4, #0]
 800f45e:	bd38      	pop	{r3, r4, r5, pc}
 800f460:	240010ac 	.word	0x240010ac

0800f464 <__malloc_lock>:
 800f464:	4801      	ldr	r0, [pc, #4]	; (800f46c <__malloc_lock+0x8>)
 800f466:	f000 b85d 	b.w	800f524 <__retarget_lock_acquire_recursive>
 800f46a:	bf00      	nop
 800f46c:	240010b0 	.word	0x240010b0

0800f470 <__malloc_unlock>:
 800f470:	4801      	ldr	r0, [pc, #4]	; (800f478 <__malloc_unlock+0x8>)
 800f472:	f000 b858 	b.w	800f526 <__retarget_lock_release_recursive>
 800f476:	bf00      	nop
 800f478:	240010b0 	.word	0x240010b0

0800f47c <_free_r>:
 800f47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f47e:	2900      	cmp	r1, #0
 800f480:	d044      	beq.n	800f50c <_free_r+0x90>
 800f482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f486:	9001      	str	r0, [sp, #4]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f1a1 0404 	sub.w	r4, r1, #4
 800f48e:	bfb8      	it	lt
 800f490:	18e4      	addlt	r4, r4, r3
 800f492:	f7ff ffe7 	bl	800f464 <__malloc_lock>
 800f496:	4a1e      	ldr	r2, [pc, #120]	; (800f510 <_free_r+0x94>)
 800f498:	9801      	ldr	r0, [sp, #4]
 800f49a:	6813      	ldr	r3, [r2, #0]
 800f49c:	b933      	cbnz	r3, 800f4ac <_free_r+0x30>
 800f49e:	6063      	str	r3, [r4, #4]
 800f4a0:	6014      	str	r4, [r2, #0]
 800f4a2:	b003      	add	sp, #12
 800f4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4a8:	f7ff bfe2 	b.w	800f470 <__malloc_unlock>
 800f4ac:	42a3      	cmp	r3, r4
 800f4ae:	d908      	bls.n	800f4c2 <_free_r+0x46>
 800f4b0:	6825      	ldr	r5, [r4, #0]
 800f4b2:	1961      	adds	r1, r4, r5
 800f4b4:	428b      	cmp	r3, r1
 800f4b6:	bf01      	itttt	eq
 800f4b8:	6819      	ldreq	r1, [r3, #0]
 800f4ba:	685b      	ldreq	r3, [r3, #4]
 800f4bc:	1949      	addeq	r1, r1, r5
 800f4be:	6021      	streq	r1, [r4, #0]
 800f4c0:	e7ed      	b.n	800f49e <_free_r+0x22>
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	b10b      	cbz	r3, 800f4cc <_free_r+0x50>
 800f4c8:	42a3      	cmp	r3, r4
 800f4ca:	d9fa      	bls.n	800f4c2 <_free_r+0x46>
 800f4cc:	6811      	ldr	r1, [r2, #0]
 800f4ce:	1855      	adds	r5, r2, r1
 800f4d0:	42a5      	cmp	r5, r4
 800f4d2:	d10b      	bne.n	800f4ec <_free_r+0x70>
 800f4d4:	6824      	ldr	r4, [r4, #0]
 800f4d6:	4421      	add	r1, r4
 800f4d8:	1854      	adds	r4, r2, r1
 800f4da:	42a3      	cmp	r3, r4
 800f4dc:	6011      	str	r1, [r2, #0]
 800f4de:	d1e0      	bne.n	800f4a2 <_free_r+0x26>
 800f4e0:	681c      	ldr	r4, [r3, #0]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	6053      	str	r3, [r2, #4]
 800f4e6:	4421      	add	r1, r4
 800f4e8:	6011      	str	r1, [r2, #0]
 800f4ea:	e7da      	b.n	800f4a2 <_free_r+0x26>
 800f4ec:	d902      	bls.n	800f4f4 <_free_r+0x78>
 800f4ee:	230c      	movs	r3, #12
 800f4f0:	6003      	str	r3, [r0, #0]
 800f4f2:	e7d6      	b.n	800f4a2 <_free_r+0x26>
 800f4f4:	6825      	ldr	r5, [r4, #0]
 800f4f6:	1961      	adds	r1, r4, r5
 800f4f8:	428b      	cmp	r3, r1
 800f4fa:	bf04      	itt	eq
 800f4fc:	6819      	ldreq	r1, [r3, #0]
 800f4fe:	685b      	ldreq	r3, [r3, #4]
 800f500:	6063      	str	r3, [r4, #4]
 800f502:	bf04      	itt	eq
 800f504:	1949      	addeq	r1, r1, r5
 800f506:	6021      	streq	r1, [r4, #0]
 800f508:	6054      	str	r4, [r2, #4]
 800f50a:	e7ca      	b.n	800f4a2 <_free_r+0x26>
 800f50c:	b003      	add	sp, #12
 800f50e:	bd30      	pop	{r4, r5, pc}
 800f510:	240010a4 	.word	0x240010a4

0800f514 <_malloc_usable_size_r>:
 800f514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f518:	1f18      	subs	r0, r3, #4
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	bfbc      	itt	lt
 800f51e:	580b      	ldrlt	r3, [r1, r0]
 800f520:	18c0      	addlt	r0, r0, r3
 800f522:	4770      	bx	lr

0800f524 <__retarget_lock_acquire_recursive>:
 800f524:	4770      	bx	lr

0800f526 <__retarget_lock_release_recursive>:
 800f526:	4770      	bx	lr

0800f528 <_init>:
 800f528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52a:	bf00      	nop
 800f52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f52e:	bc08      	pop	{r3}
 800f530:	469e      	mov	lr, r3
 800f532:	4770      	bx	lr

0800f534 <_fini>:
 800f534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f536:	bf00      	nop
 800f538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f53a:	bc08      	pop	{r3}
 800f53c:	469e      	mov	lr, r3
 800f53e:	4770      	bx	lr
