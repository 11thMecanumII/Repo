
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f490  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800f760  0800f760  0001f760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fa58  0800fa58  0001fa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800fa60  0800fa60  0001fa60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fa68  0800fa68  0001fa68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d0  24000000  0800fa6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ffc  240000d0  0800fb3c  000200d0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240010cc  0800fb3c  000210cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f4f0  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032ff  00000000  00000000  0003f5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001468  00000000  00000000  000428f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001378  00000000  00000000  00043d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034c96  00000000  00000000  000450d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a7f6  00000000  00000000  00079d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001536f1  00000000  00000000  0009455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e7c4d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005bd0  00000000  00000000  001e7ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000d0 	.word	0x240000d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f748 	.word	0x0800f748

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d4 	.word	0x240000d4
 800030c:	0800f748 	.word	0x0800f748

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f005 f97c 	bl	8005980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 fae0 	bl	8000c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fee6 	bl	800145c <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 febc 	bl	800140c <MX_DMA_Init>
  MX_USART10_UART_Init();
 8000694:	f000 fe6e 	bl	8001374 <MX_USART10_UART_Init>
  MX_TIM3_Init();
 8000698:	f000 fb98 	bl	8000dcc <MX_TIM3_Init>
  MX_TIM4_Init();
 800069c:	f000 fbec 	bl	8000e78 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006a0:	f000 fc40 	bl	8000f24 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006a4:	f000 fc8c 	bl	8000fc0 <MX_TIM8_Init>
  MX_TIM15_Init();
 80006a8:	f000 fd26 	bl	80010f8 <MX_TIM15_Init>
  MX_TIM23_Init();
 80006ac:	f000 fdb6 	bl	800121c <MX_TIM23_Init>
  MX_TIM24_Init();
 80006b0:	f000 fe0a 	bl	80012c8 <MX_TIM24_Init>
  MX_TIM2_Init();
 80006b4:	f000 fb3c 	bl	8000d30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 80006b8:	48b5      	ldr	r0, [pc, #724]	; (8000990 <main+0x310>)
 80006ba:	f00b f8f5 	bl	800b8a8 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 80006be:	48b5      	ldr	r0, [pc, #724]	; (8000994 <main+0x314>)
 80006c0:	f00b f8f2 	bl	800b8a8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80006c4:	2108      	movs	r1, #8
 80006c6:	48b4      	ldr	r0, [pc, #720]	; (8000998 <main+0x318>)
 80006c8:	f00b f9cc 	bl	800ba64 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80006cc:	210c      	movs	r1, #12
 80006ce:	48b2      	ldr	r0, [pc, #712]	; (8000998 <main+0x318>)
 80006d0:	f00b f9c8 	bl	800ba64 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80006d4:	2100      	movs	r1, #0
 80006d6:	48b1      	ldr	r0, [pc, #708]	; (800099c <main+0x31c>)
 80006d8:	f00b f9c4 	bl	800ba64 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80006dc:	2104      	movs	r1, #4
 80006de:	48af      	ldr	r0, [pc, #700]	; (800099c <main+0x31c>)
 80006e0:	f00b f9c0 	bl	800ba64 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80006e4:	2100      	movs	r1, #0
 80006e6:	48ae      	ldr	r0, [pc, #696]	; (80009a0 <main+0x320>)
 80006e8:	f00b fb7e 	bl	800bde8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 80006ec:	2104      	movs	r1, #4
 80006ee:	48ac      	ldr	r0, [pc, #688]	; (80009a0 <main+0x320>)
 80006f0:	f00b fb7a 	bl	800bde8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006f4:	2100      	movs	r1, #0
 80006f6:	48ab      	ldr	r0, [pc, #684]	; (80009a4 <main+0x324>)
 80006f8:	f00b fb76 	bl	800bde8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006fc:	2104      	movs	r1, #4
 80006fe:	48a9      	ldr	r0, [pc, #676]	; (80009a4 <main+0x324>)
 8000700:	f00b fb72 	bl	800bde8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000704:	2100      	movs	r1, #0
 8000706:	48a8      	ldr	r0, [pc, #672]	; (80009a8 <main+0x328>)
 8000708:	f00b fb6e 	bl	800bde8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 800070c:	2104      	movs	r1, #4
 800070e:	48a6      	ldr	r0, [pc, #664]	; (80009a8 <main+0x328>)
 8000710:	f00b fb6a 	bl	800bde8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 8000714:	2100      	movs	r1, #0
 8000716:	48a5      	ldr	r0, [pc, #660]	; (80009ac <main+0x32c>)
 8000718:	f00b fb66 	bl	800bde8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 800071c:	2104      	movs	r1, #4
 800071e:	48a3      	ldr	r0, [pc, #652]	; (80009ac <main+0x32c>)
 8000720:	f00b fb62 	bl	800bde8 <HAL_TIM_Encoder_Start>
    run2 = 0;
 8000724:	4ba2      	ldr	r3, [pc, #648]	; (80009b0 <main+0x330>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
    run = 0;
 800072a:	4ba2      	ldr	r3, [pc, #648]	; (80009b4 <main+0x334>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
    ut1 = 0;
 8000730:	49a1      	ldr	r1, [pc, #644]	; (80009b8 <main+0x338>)
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	f04f 0300 	mov.w	r3, #0
 800073a:	e9c1 2300 	strd	r2, r3, [r1]
    ut2 = 0;
 800073e:	499f      	ldr	r1, [pc, #636]	; (80009bc <main+0x33c>)
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e9c1 2300 	strd	r2, r3, [r1]
    ut3 = 0;
 800074c:	499c      	ldr	r1, [pc, #624]	; (80009c0 <main+0x340>)
 800074e:	f04f 0200 	mov.w	r2, #0
 8000752:	f04f 0300 	mov.w	r3, #0
 8000756:	e9c1 2300 	strd	r2, r3, [r1]
    ut4 = 0;
 800075a:	499a      	ldr	r1, [pc, #616]	; (80009c4 <main+0x344>)
 800075c:	f04f 0200 	mov.w	r2, #0
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	e9c1 2300 	strd	r2, r3, [r1]
    up1 = 0;
 8000768:	4997      	ldr	r1, [pc, #604]	; (80009c8 <main+0x348>)
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	e9c1 2300 	strd	r2, r3, [r1]
    up2 = 0;
 8000776:	4995      	ldr	r1, [pc, #596]	; (80009cc <main+0x34c>)
 8000778:	f04f 0200 	mov.w	r2, #0
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	e9c1 2300 	strd	r2, r3, [r1]
    up3 = 0;
 8000784:	4992      	ldr	r1, [pc, #584]	; (80009d0 <main+0x350>)
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	e9c1 2300 	strd	r2, r3, [r1]
    up4 = 0;
 8000792:	4990      	ldr	r1, [pc, #576]	; (80009d4 <main+0x354>)
 8000794:	f04f 0200 	mov.w	r2, #0
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	e9c1 2300 	strd	r2, r3, [r1]
    ui1 = 0;
 80007a0:	498d      	ldr	r1, [pc, #564]	; (80009d8 <main+0x358>)
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	f04f 0300 	mov.w	r3, #0
 80007aa:	e9c1 2300 	strd	r2, r3, [r1]
    ui2 = 0;
 80007ae:	498b      	ldr	r1, [pc, #556]	; (80009dc <main+0x35c>)
 80007b0:	f04f 0200 	mov.w	r2, #0
 80007b4:	f04f 0300 	mov.w	r3, #0
 80007b8:	e9c1 2300 	strd	r2, r3, [r1]
    ui3 = 0;
 80007bc:	4988      	ldr	r1, [pc, #544]	; (80009e0 <main+0x360>)
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	f04f 0300 	mov.w	r3, #0
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
    ui4 = 0;
 80007ca:	4986      	ldr	r1, [pc, #536]	; (80009e4 <main+0x364>)
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	e9c1 2300 	strd	r2, r3, [r1]
    ud1 = 0;
 80007d8:	4983      	ldr	r1, [pc, #524]	; (80009e8 <main+0x368>)
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	e9c1 2300 	strd	r2, r3, [r1]
    ud2 = 0;
 80007e6:	4981      	ldr	r1, [pc, #516]	; (80009ec <main+0x36c>)
 80007e8:	f04f 0200 	mov.w	r2, #0
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	e9c1 2300 	strd	r2, r3, [r1]
    ud3 = 0;
 80007f4:	497e      	ldr	r1, [pc, #504]	; (80009f0 <main+0x370>)
 80007f6:	f04f 0200 	mov.w	r2, #0
 80007fa:	f04f 0300 	mov.w	r3, #0
 80007fe:	e9c1 2300 	strd	r2, r3, [r1]
    ud4 = 0;
 8000802:	497c      	ldr	r1, [pc, #496]	; (80009f4 <main+0x374>)
 8000804:	f04f 0200 	mov.w	r2, #0
 8000808:	f04f 0300 	mov.w	r3, #0
 800080c:	e9c1 2300 	strd	r2, r3, [r1]
    SV1 = 0;
 8000810:	4979      	ldr	r1, [pc, #484]	; (80009f8 <main+0x378>)
 8000812:	f04f 0200 	mov.w	r2, #0
 8000816:	f04f 0300 	mov.w	r3, #0
 800081a:	e9c1 2300 	strd	r2, r3, [r1]
    SV2 = 0;
 800081e:	4977      	ldr	r1, [pc, #476]	; (80009fc <main+0x37c>)
 8000820:	f04f 0200 	mov.w	r2, #0
 8000824:	f04f 0300 	mov.w	r3, #0
 8000828:	e9c1 2300 	strd	r2, r3, [r1]
    SV3 = 0;
 800082c:	4974      	ldr	r1, [pc, #464]	; (8000a00 <main+0x380>)
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	f04f 0300 	mov.w	r3, #0
 8000836:	e9c1 2300 	strd	r2, r3, [r1]
    SV4 = 0;
 800083a:	4972      	ldr	r1, [pc, #456]	; (8000a04 <main+0x384>)
 800083c:	f04f 0200 	mov.w	r2, #0
 8000840:	f04f 0300 	mov.w	r3, #0
 8000844:	e9c1 2300 	strd	r2, r3, [r1]
    PV1 = 0;
 8000848:	496f      	ldr	r1, [pc, #444]	; (8000a08 <main+0x388>)
 800084a:	f04f 0200 	mov.w	r2, #0
 800084e:	f04f 0300 	mov.w	r3, #0
 8000852:	e9c1 2300 	strd	r2, r3, [r1]
    PV2 = 0;
 8000856:	496d      	ldr	r1, [pc, #436]	; (8000a0c <main+0x38c>)
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	e9c1 2300 	strd	r2, r3, [r1]
    PV3 = 0;
 8000864:	496a      	ldr	r1, [pc, #424]	; (8000a10 <main+0x390>)
 8000866:	f04f 0200 	mov.w	r2, #0
 800086a:	f04f 0300 	mov.w	r3, #0
 800086e:	e9c1 2300 	strd	r2, r3, [r1]
    PV4 = 0;
 8000872:	4968      	ldr	r1, [pc, #416]	; (8000a14 <main+0x394>)
 8000874:	f04f 0200 	mov.w	r2, #0
 8000878:	f04f 0300 	mov.w	r3, #0
 800087c:	e9c1 2300 	strd	r2, r3, [r1]
    Kp1 = 0.3968;
 8000880:	4965      	ldr	r1, [pc, #404]	; (8000a18 <main+0x398>)
 8000882:	a32b      	add	r3, pc, #172	; (adr r3, 8000930 <main+0x2b0>)
 8000884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000888:	e9c1 2300 	strd	r2, r3, [r1]
    Ki1 = 9.292;
 800088c:	4963      	ldr	r1, [pc, #396]	; (8000a1c <main+0x39c>)
 800088e:	a32a      	add	r3, pc, #168	; (adr r3, 8000938 <main+0x2b8>)
 8000890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000894:	e9c1 2300 	strd	r2, r3, [r1]
    Kd1 = 0.001676;
 8000898:	4961      	ldr	r1, [pc, #388]	; (8000a20 <main+0x3a0>)
 800089a:	a329      	add	r3, pc, #164	; (adr r3, 8000940 <main+0x2c0>)
 800089c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008a0:	e9c1 2300 	strd	r2, r3, [r1]
    Kp2 = 0.3824;
 80008a4:	495f      	ldr	r1, [pc, #380]	; (8000a24 <main+0x3a4>)
 80008a6:	a328      	add	r3, pc, #160	; (adr r3, 8000948 <main+0x2c8>)
 80008a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ac:	e9c1 2300 	strd	r2, r3, [r1]
    Ki2 = 9.0983;
 80008b0:	495d      	ldr	r1, [pc, #372]	; (8000a28 <main+0x3a8>)
 80008b2:	a327      	add	r3, pc, #156	; (adr r3, 8000950 <main+0x2d0>)
 80008b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b8:	e9c1 2300 	strd	r2, r3, [r1]
    Kd2 = 0.001656;
 80008bc:	495b      	ldr	r1, [pc, #364]	; (8000a2c <main+0x3ac>)
 80008be:	a326      	add	r3, pc, #152	; (adr r3, 8000958 <main+0x2d8>)
 80008c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c4:	e9c1 2300 	strd	r2, r3, [r1]
    Kp3 = 0.3919;
 80008c8:	4959      	ldr	r1, [pc, #356]	; (8000a30 <main+0x3b0>)
 80008ca:	a325      	add	r3, pc, #148	; (adr r3, 8000960 <main+0x2e0>)
 80008cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d0:	e9c1 2300 	strd	r2, r3, [r1]
    Ki3 = 9.34526;
 80008d4:	4957      	ldr	r1, [pc, #348]	; (8000a34 <main+0x3b4>)
 80008d6:	a324      	add	r3, pc, #144	; (adr r3, 8000968 <main+0x2e8>)
 80008d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008dc:	e9c1 2300 	strd	r2, r3, [r1]
    Kd3 = 0.001684;
 80008e0:	4955      	ldr	r1, [pc, #340]	; (8000a38 <main+0x3b8>)
 80008e2:	a323      	add	r3, pc, #140	; (adr r3, 8000970 <main+0x2f0>)
 80008e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008e8:	e9c1 2300 	strd	r2, r3, [r1]
    Kp4 = 0.38488;
 80008ec:	4953      	ldr	r1, [pc, #332]	; (8000a3c <main+0x3bc>)
 80008ee:	a322      	add	r3, pc, #136	; (adr r3, 8000978 <main+0x2f8>)
 80008f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008f4:	e9c1 2300 	strd	r2, r3, [r1]
    Ki4 = 8.9584;
 80008f8:	4951      	ldr	r1, [pc, #324]	; (8000a40 <main+0x3c0>)
 80008fa:	a321      	add	r3, pc, #132	; (adr r3, 8000980 <main+0x300>)
 80008fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000900:	e9c1 2300 	strd	r2, r3, [r1]
    Kd4 = 0.001678;
 8000904:	494f      	ldr	r1, [pc, #316]	; (8000a44 <main+0x3c4>)
 8000906:	a320      	add	r3, pc, #128	; (adr r3, 8000988 <main+0x308>)
 8000908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800090c:	e9c1 2300 	strd	r2, r3, [r1]
    et1 = 0;
 8000910:	494d      	ldr	r1, [pc, #308]	; (8000a48 <main+0x3c8>)
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	f04f 0300 	mov.w	r3, #0
 800091a:	e9c1 2300 	strd	r2, r3, [r1]
    et2 = 0;
 800091e:	494b      	ldr	r1, [pc, #300]	; (8000a4c <main+0x3cc>)
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	f04f 0300 	mov.w	r3, #0
 8000928:	e9c1 2300 	strd	r2, r3, [r1]
 800092c:	e090      	b.n	8000a50 <main+0x3d0>
 800092e:	bf00      	nop
 8000930:	d3c36113 	.word	0xd3c36113
 8000934:	3fd9652b 	.word	0x3fd9652b
 8000938:	0624dd2f 	.word	0x0624dd2f
 800093c:	40229581 	.word	0x40229581
 8000940:	4c09c3ce 	.word	0x4c09c3ce
 8000944:	3f5b75a7 	.word	0x3f5b75a7
 8000948:	d97f62b7 	.word	0xd97f62b7
 800094c:	3fd8793d 	.word	0x3fd8793d
 8000950:	60aa64c3 	.word	0x60aa64c3
 8000954:	40223254 	.word	0x40223254
 8000958:	75e6362a 	.word	0x75e6362a
 800095c:	3f5b21c4 	.word	0x3f5b21c4
 8000960:	bcd35a86 	.word	0xbcd35a86
 8000964:	3fd914e3 	.word	0x3fd914e3
 8000968:	eb313be2 	.word	0xeb313be2
 800096c:	4022b0c5 	.word	0x4022b0c5
 8000970:	3b4b2fa9 	.word	0x3b4b2fa9
 8000974:	3f5b9735 	.word	0x3f5b9735
 8000978:	b9389b52 	.word	0xb9389b52
 800097c:	3fd8a1df 	.word	0x3fd8a1df
 8000980:	67a0f909 	.word	0x67a0f909
 8000984:	4021eab3 	.word	0x4021eab3
 8000988:	c7da1ec5 	.word	0xc7da1ec5
 800098c:	3f5b7e0a 	.word	0x3f5b7e0a
 8000990:	240001d0 	.word	0x240001d0
 8000994:	240000ec 	.word	0x240000ec
 8000998:	2400021c 	.word	0x2400021c
 800099c:	24000268 	.word	0x24000268
 80009a0:	24000300 	.word	0x24000300
 80009a4:	24000138 	.word	0x24000138
 80009a8:	24000184 	.word	0x24000184
 80009ac:	240002b4 	.word	0x240002b4
 80009b0:	24000658 	.word	0x24000658
 80009b4:	24000654 	.word	0x24000654
 80009b8:	240004d0 	.word	0x240004d0
 80009bc:	24000528 	.word	0x24000528
 80009c0:	24000580 	.word	0x24000580
 80009c4:	240005d8 	.word	0x240005d8
 80009c8:	240004d8 	.word	0x240004d8
 80009cc:	24000530 	.word	0x24000530
 80009d0:	24000588 	.word	0x24000588
 80009d4:	240005e0 	.word	0x240005e0
 80009d8:	240004e0 	.word	0x240004e0
 80009dc:	24000538 	.word	0x24000538
 80009e0:	24000590 	.word	0x24000590
 80009e4:	240005e8 	.word	0x240005e8
 80009e8:	240004e8 	.word	0x240004e8
 80009ec:	24000540 	.word	0x24000540
 80009f0:	24000598 	.word	0x24000598
 80009f4:	240005f0 	.word	0x240005f0
 80009f8:	240004f0 	.word	0x240004f0
 80009fc:	24000548 	.word	0x24000548
 8000a00:	240005a0 	.word	0x240005a0
 8000a04:	240005f8 	.word	0x240005f8
 8000a08:	240004f8 	.word	0x240004f8
 8000a0c:	24000550 	.word	0x24000550
 8000a10:	240005a8 	.word	0x240005a8
 8000a14:	24000600 	.word	0x24000600
 8000a18:	24000000 	.word	0x24000000
 8000a1c:	24000008 	.word	0x24000008
 8000a20:	24000500 	.word	0x24000500
 8000a24:	24000010 	.word	0x24000010
 8000a28:	24000018 	.word	0x24000018
 8000a2c:	24000558 	.word	0x24000558
 8000a30:	24000020 	.word	0x24000020
 8000a34:	24000028 	.word	0x24000028
 8000a38:	240005b0 	.word	0x240005b0
 8000a3c:	24000030 	.word	0x24000030
 8000a40:	24000038 	.word	0x24000038
 8000a44:	24000608 	.word	0x24000608
 8000a48:	24000508 	.word	0x24000508
 8000a4c:	24000560 	.word	0x24000560
    et3 = 0;
 8000a50:	495f      	ldr	r1, [pc, #380]	; (8000bd0 <main+0x550>)
 8000a52:	f04f 0200 	mov.w	r2, #0
 8000a56:	f04f 0300 	mov.w	r3, #0
 8000a5a:	e9c1 2300 	strd	r2, r3, [r1]
    et4 = 0;
 8000a5e:	495d      	ldr	r1, [pc, #372]	; (8000bd4 <main+0x554>)
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	e9c1 2300 	strd	r2, r3, [r1]
    pulse1 = 0;
 8000a6c:	495a      	ldr	r1, [pc, #360]	; (8000bd8 <main+0x558>)
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	e9c1 2300 	strd	r2, r3, [r1]
    pulse2 = 0;
 8000a7a:	4958      	ldr	r1, [pc, #352]	; (8000bdc <main+0x55c>)
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	e9c1 2300 	strd	r2, r3, [r1]
    pulse3 = 0;
 8000a88:	4955      	ldr	r1, [pc, #340]	; (8000be0 <main+0x560>)
 8000a8a:	f04f 0200 	mov.w	r2, #0
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	e9c1 2300 	strd	r2, r3, [r1]
    pulse4 = 0;
 8000a96:	4953      	ldr	r1, [pc, #332]	; (8000be4 <main+0x564>)
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	e9c1 2300 	strd	r2, r3, [r1]
    it1 = 0;
 8000aa4:	4950      	ldr	r1, [pc, #320]	; (8000be8 <main+0x568>)
 8000aa6:	f04f 0200 	mov.w	r2, #0
 8000aaa:	f04f 0300 	mov.w	r3, #0
 8000aae:	e9c1 2300 	strd	r2, r3, [r1]
    it2 = 0;
 8000ab2:	494e      	ldr	r1, [pc, #312]	; (8000bec <main+0x56c>)
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e9c1 2300 	strd	r2, r3, [r1]
    it3 = 0;
 8000ac0:	494b      	ldr	r1, [pc, #300]	; (8000bf0 <main+0x570>)
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	e9c1 2300 	strd	r2, r3, [r1]
    it4 = 0;
 8000ace:	4949      	ldr	r1, [pc, #292]	; (8000bf4 <main+0x574>)
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e9c1 2300 	strd	r2, r3, [r1]
    imax1 = 1;
 8000adc:	4946      	ldr	r1, [pc, #280]	; (8000bf8 <main+0x578>)
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	4b46      	ldr	r3, [pc, #280]	; (8000bfc <main+0x57c>)
 8000ae4:	e9c1 2300 	strd	r2, r3, [r1]
    imax2 = 1;
 8000ae8:	4945      	ldr	r1, [pc, #276]	; (8000c00 <main+0x580>)
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	4b43      	ldr	r3, [pc, #268]	; (8000bfc <main+0x57c>)
 8000af0:	e9c1 2300 	strd	r2, r3, [r1]
    imax3 = 1;
 8000af4:	4943      	ldr	r1, [pc, #268]	; (8000c04 <main+0x584>)
 8000af6:	f04f 0200 	mov.w	r2, #0
 8000afa:	4b40      	ldr	r3, [pc, #256]	; (8000bfc <main+0x57c>)
 8000afc:	e9c1 2300 	strd	r2, r3, [r1]
    imax4 = 1;
 8000b00:	4941      	ldr	r1, [pc, #260]	; (8000c08 <main+0x588>)
 8000b02:	f04f 0200 	mov.w	r2, #0
 8000b06:	4b3d      	ldr	r3, [pc, #244]	; (8000bfc <main+0x57c>)
 8000b08:	e9c1 2300 	strd	r2, r3, [r1]
    enc1 = 0;
 8000b0c:	4b3f      	ldr	r3, [pc, #252]	; (8000c0c <main+0x58c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	801a      	strh	r2, [r3, #0]
    enc2 = 0;
 8000b12:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <main+0x590>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	801a      	strh	r2, [r3, #0]
    enc3 = 0;
 8000b18:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <main+0x594>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	801a      	strh	r2, [r3, #0]
    enc4 = 0;
 8000b1e:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <main+0x598>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	801a      	strh	r2, [r3, #0]
    Vx = 0;
 8000b24:	493d      	ldr	r1, [pc, #244]	; (8000c1c <main+0x59c>)
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	f04f 0300 	mov.w	r3, #0
 8000b2e:	e9c1 2300 	strd	r2, r3, [r1]
    Vy = 0;
 8000b32:	493b      	ldr	r1, [pc, #236]	; (8000c20 <main+0x5a0>)
 8000b34:	f04f 0200 	mov.w	r2, #0
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e9c1 2300 	strd	r2, r3, [r1]
    W = 0;
 8000b40:	4938      	ldr	r1, [pc, #224]	; (8000c24 <main+0x5a4>)
 8000b42:	f04f 0200 	mov.w	r2, #0
 8000b46:	f04f 0300 	mov.w	r3, #0
 8000b4a:	e9c1 2300 	strd	r2, r3, [r1]
    cont = 0;
 8000b4e:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <main+0x5a8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
    max_rps = 5;
 8000b54:	4935      	ldr	r1, [pc, #212]	; (8000c2c <main+0x5ac>)
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <main+0x5b0>)
 8000b5c:	e9c1 2300 	strd	r2, r3, [r1]
    amax_rps = -1 * max_rps;
 8000b60:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <main+0x5ac>)
 8000b62:	ed93 7b00 	vldr	d7, [r3]
 8000b66:	eeb1 7b47 	vneg.f64	d7, d7
 8000b6a:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <main+0x5b4>)
 8000b6c:	ed83 7b00 	vstr	d7, [r3]
    temp_SV = 0;
 8000b70:	4931      	ldr	r1, [pc, #196]	; (8000c38 <main+0x5b8>)
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	f04f 0300 	mov.w	r3, #0
 8000b7a:	e9c1 2300 	strd	r2, r3, [r1]
    map = 0;
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <main+0x5bc>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
    rVy = 0;
 8000b84:	492e      	ldr	r1, [pc, #184]	; (8000c40 <main+0x5c0>)
 8000b86:	f04f 0200 	mov.w	r2, #0
 8000b8a:	f04f 0300 	mov.w	r3, #0
 8000b8e:	e9c1 2300 	strd	r2, r3, [r1]
    rVx = 0;
 8000b92:	492c      	ldr	r1, [pc, #176]	; (8000c44 <main+0x5c4>)
 8000b94:	f04f 0200 	mov.w	r2, #0
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e9c1 2300 	strd	r2, r3, [r1]
    rW = 0;
 8000ba0:	4929      	ldr	r1, [pc, #164]	; (8000c48 <main+0x5c8>)
 8000ba2:	f04f 0200 	mov.w	r2, #0
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	e9c1 2300 	strd	r2, r3, [r1]
    setup();
 8000bae:	f003 fc05 	bl	80043bc <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 8000bb2:	f003 fc19 	bl	80043e8 <loop>
		Vx = -0.08;
 8000bb6:	4919      	ldr	r1, [pc, #100]	; (8000c1c <main+0x59c>)
 8000bb8:	a303      	add	r3, pc, #12	; (adr r3, 8000bc8 <main+0x548>)
 8000bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbe:	e9c1 2300 	strd	r2, r3, [r1]
		loop();
 8000bc2:	e7f6      	b.n	8000bb2 <main+0x532>
 8000bc4:	f3af 8000 	nop.w
 8000bc8:	47ae147b 	.word	0x47ae147b
 8000bcc:	bfb47ae1 	.word	0xbfb47ae1
 8000bd0:	240005b8 	.word	0x240005b8
 8000bd4:	24000610 	.word	0x24000610
 8000bd8:	24000510 	.word	0x24000510
 8000bdc:	24000568 	.word	0x24000568
 8000be0:	240005c0 	.word	0x240005c0
 8000be4:	24000618 	.word	0x24000618
 8000be8:	24000518 	.word	0x24000518
 8000bec:	24000570 	.word	0x24000570
 8000bf0:	240005c8 	.word	0x240005c8
 8000bf4:	24000620 	.word	0x24000620
 8000bf8:	24000520 	.word	0x24000520
 8000bfc:	3ff00000 	.word	0x3ff00000
 8000c00:	24000578 	.word	0x24000578
 8000c04:	240005d0 	.word	0x240005d0
 8000c08:	24000628 	.word	0x24000628
 8000c0c:	24000630 	.word	0x24000630
 8000c10:	24000632 	.word	0x24000632
 8000c14:	24000634 	.word	0x24000634
 8000c18:	24000636 	.word	0x24000636
 8000c1c:	24000688 	.word	0x24000688
 8000c20:	24000690 	.word	0x24000690
 8000c24:	24000698 	.word	0x24000698
 8000c28:	2400065c 	.word	0x2400065c
 8000c2c:	24000638 	.word	0x24000638
 8000c30:	40140000 	.word	0x40140000
 8000c34:	24000640 	.word	0x24000640
 8000c38:	24000648 	.word	0x24000648
 8000c3c:	24000650 	.word	0x24000650
 8000c40:	240006a8 	.word	0x240006a8
 8000c44:	240006a0 	.word	0x240006a0
 8000c48:	240006b0 	.word	0x240006b0

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b09c      	sub	sp, #112	; 0x70
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	224c      	movs	r2, #76	; 0x4c
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f00e fbea 	bl	800f434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2220      	movs	r2, #32
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f00e fbe4 	bl	800f434 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f008 fb33 	bl	80092d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <SystemClock_Config+0xe0>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c7e:	4a2b      	ldr	r2, [pc, #172]	; (8000d2c <SystemClock_Config+0xe0>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6193      	str	r3, [r2, #24]
 8000c86:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <SystemClock_Config+0xe0>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c92:	bf00      	nop
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <SystemClock_Config+0xe0>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca0:	d1f8      	bne.n	8000c94 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000caa:	2340      	movs	r3, #64	; 0x40
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000cba:	2315      	movs	r3, #21
 8000cbc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f008 fb36 	bl	800934c <HAL_RCC_OscConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ce6:	f001 fccb 	bl	8002680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cea:	233f      	movs	r3, #63	; 0x3f
 8000cec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d00:	2340      	movs	r3, #64	; 0x40
 8000d02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d0a:	2340      	movs	r3, #64	; 0x40
 8000d0c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2102      	movs	r1, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f008 fec8 	bl	8009aa8 <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000d1e:	f001 fcaf 	bl	8002680 <Error_Handler>
  }
}
 8000d22:	bf00      	nop
 8000d24:	3770      	adds	r7, #112	; 0x70
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	58024800 	.word	0x58024800

08000d30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d58:	223f      	movs	r2, #63	; 0x3f
 8000d5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d64:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d78:	f00a fd3e 	bl	800b7f8 <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d82:	f001 fc7d 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d94:	f00b faea 	bl	800c36c <HAL_TIM_ConfigClockSource>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d9e:	f001 fc6f 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000db0:	f00c f83c 	bl	800ce2c <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dba:	f001 fc61 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	240000ec 	.word	0x240000ec

08000dcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	2224      	movs	r2, #36	; 0x24
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00e fb2a 	bl	800f434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <MX_TIM3_Init+0xa4>)
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <MX_TIM3_Init+0xa8>)
 8000dee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_TIM3_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM3_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_TIM3_Init+0xa4>)
 8000dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM3_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM3_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e10:	2303      	movs	r3, #3
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_TIM3_Init+0xa4>)
 8000e3c:	f00a ff2e 	bl	800bc9c <HAL_TIM_Encoder_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e46:	f001 fc1b 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM3_Init+0xa4>)
 8000e58:	f00b ffe8 	bl	800ce2c <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e62:	f001 fc0d 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3730      	adds	r7, #48	; 0x30
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	24000138 	.word	0x24000138
 8000e74:	40000400 	.word	0x40000400

08000e78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2224      	movs	r2, #36	; 0x24
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f00e fad4 	bl	800f434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_TIM4_Init+0xa4>)
 8000e98:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <MX_TIM4_Init+0xa8>)
 8000e9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_TIM4_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_TIM4_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_TIM4_Init+0xa4>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_TIM4_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_TIM4_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_TIM4_Init+0xa4>)
 8000ee8:	f00a fed8 	bl	800bc9c <HAL_TIM_Encoder_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000ef2:	f001 fbc5 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_TIM4_Init+0xa4>)
 8000f04:	f00b ff92 	bl	800ce2c <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f0e:	f001 fbb7 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000184 	.word	0x24000184
 8000f20:	40000800 	.word	0x40000800

08000f24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f44:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <MX_TIM5_Init+0x98>)
 8000f46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f4a:	223f      	movs	r2, #63	; 0x3f
 8000f4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f6a:	f00a fc45 	bl	800b7f8 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000f74:	f001 fb84 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f86:	f00b f9f1 	bl	800c36c <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000f90:	f001 fb76 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000fa2:	f00b ff43 	bl	800ce2c <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000fac:	f001 fb68 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	240001d0 	.word	0x240001d0
 8000fbc:	40000c00 	.word	0x40000c00

08000fc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b098      	sub	sp, #96	; 0x60
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2234      	movs	r2, #52	; 0x34
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00e fa21 	bl	800f434 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ff2:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <MX_TIM8_Init+0x130>)
 8000ff4:	4a3f      	ldr	r2, [pc, #252]	; (80010f4 <MX_TIM8_Init+0x134>)
 8000ff6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ff8:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <MX_TIM8_Init+0x130>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	4b3c      	ldr	r3, [pc, #240]	; (80010f0 <MX_TIM8_Init+0x130>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3199;
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <MX_TIM8_Init+0x130>)
 8001006:	f640 427f 	movw	r2, #3199	; 0xc7f
 800100a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <MX_TIM8_Init+0x130>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001012:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <MX_TIM8_Init+0x130>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <MX_TIM8_Init+0x130>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800101e:	4834      	ldr	r0, [pc, #208]	; (80010f0 <MX_TIM8_Init+0x130>)
 8001020:	f00a fcc8 	bl	800b9b4 <HAL_TIM_PWM_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800102a:	f001 fb29 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800103a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800103e:	4619      	mov	r1, r3
 8001040:	482b      	ldr	r0, [pc, #172]	; (80010f0 <MX_TIM8_Init+0x130>)
 8001042:	f00b fef3 	bl	800ce2c <HAL_TIMEx_MasterConfigSynchronization>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800104c:	f001 fb18 	bl	8002680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001050:	2360      	movs	r3, #96	; 0x60
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001058:	2300      	movs	r3, #0
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800105c:	2300      	movs	r3, #0
 800105e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800106c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001070:	2208      	movs	r2, #8
 8001072:	4619      	mov	r1, r3
 8001074:	481e      	ldr	r0, [pc, #120]	; (80010f0 <MX_TIM8_Init+0x130>)
 8001076:	f00b f865 	bl	800c144 <HAL_TIM_PWM_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001080:	f001 fafe 	bl	8002680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001084:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001088:	220c      	movs	r2, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4818      	ldr	r0, [pc, #96]	; (80010f0 <MX_TIM8_Init+0x130>)
 800108e:	f00b f859 	bl	800c144 <HAL_TIM_PWM_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001098:	f001 faf2 	bl	8002680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <MX_TIM8_Init+0x130>)
 80010d2:	f00b ff47 	bl	800cf64 <HAL_TIMEx_ConfigBreakDeadTime>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80010dc:	f001 fad0 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <MX_TIM8_Init+0x130>)
 80010e2:	f004 f94d 	bl	8005380 <HAL_TIM_MspPostInit>

}
 80010e6:	bf00      	nop
 80010e8:	3760      	adds	r7, #96	; 0x60
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2400021c 	.word	0x2400021c
 80010f4:	40010400 	.word	0x40010400

080010f8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b098      	sub	sp, #96	; 0x60
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	615a      	str	r2, [r3, #20]
 800111c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2234      	movs	r2, #52	; 0x34
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f00e f985 	bl	800f434 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800112a:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <MX_TIM15_Init+0x11c>)
 800112c:	4a3a      	ldr	r2, [pc, #232]	; (8001218 <MX_TIM15_Init+0x120>)
 800112e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001130:	4b38      	ldr	r3, [pc, #224]	; (8001214 <MX_TIM15_Init+0x11c>)
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b37      	ldr	r3, [pc, #220]	; (8001214 <MX_TIM15_Init+0x11c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <MX_TIM15_Init+0x11c>)
 800113e:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001142:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b33      	ldr	r3, [pc, #204]	; (8001214 <MX_TIM15_Init+0x11c>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800114a:	4b32      	ldr	r3, [pc, #200]	; (8001214 <MX_TIM15_Init+0x11c>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <MX_TIM15_Init+0x11c>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001156:	482f      	ldr	r0, [pc, #188]	; (8001214 <MX_TIM15_Init+0x11c>)
 8001158:	f00a fc2c 	bl	800b9b4 <HAL_TIM_PWM_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001162:	f001 fa8d 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800116e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001172:	4619      	mov	r1, r3
 8001174:	4827      	ldr	r0, [pc, #156]	; (8001214 <MX_TIM15_Init+0x11c>)
 8001176:	f00b fe59 	bl	800ce2c <HAL_TIMEx_MasterConfigSynchronization>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001180:	f001 fa7e 	bl	8002680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001184:	2360      	movs	r3, #96	; 0x60
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118c:	2300      	movs	r3, #0
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001190:	2300      	movs	r3, #0
 8001192:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011a4:	2200      	movs	r2, #0
 80011a6:	4619      	mov	r1, r3
 80011a8:	481a      	ldr	r0, [pc, #104]	; (8001214 <MX_TIM15_Init+0x11c>)
 80011aa:	f00a ffcb 	bl	800c144 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80011b4:	f001 fa64 	bl	8002680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011bc:	2204      	movs	r2, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	4814      	ldr	r0, [pc, #80]	; (8001214 <MX_TIM15_Init+0x11c>)
 80011c2:	f00a ffbf 	bl	800c144 <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80011cc:	f001 fa58 	bl	8002680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM15_Init+0x11c>)
 80011f8:	f00b feb4 	bl	800cf64 <HAL_TIMEx_ConfigBreakDeadTime>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001202:	f001 fa3d 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM15_Init+0x11c>)
 8001208:	f004 f8ba 	bl	8005380 <HAL_TIM_MspPostInit>

}
 800120c:	bf00      	nop
 800120e:	3760      	adds	r7, #96	; 0x60
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	24000268 	.word	0x24000268
 8001218:	40014000 	.word	0x40014000

0800121c <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2224      	movs	r2, #36	; 0x24
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f00e f902 	bl	800f434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_TIM23_Init+0xa4>)
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <MX_TIM23_Init+0xa8>)
 800123e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_TIM23_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_TIM23_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_TIM23_Init+0xa4>)
 800124e:	f04f 32ff 	mov.w	r2, #4294967295
 8001252:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM23_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_TIM23_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001260:	2303      	movs	r3, #3
 8001262:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001268:	2301      	movs	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001278:	2301      	movs	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_TIM23_Init+0xa4>)
 800128c:	f00a fd06 	bl	800bc9c <HAL_TIM_Encoder_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001296:	f001 f9f3 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_TIM23_Init+0xa4>)
 80012a8:	f00b fdc0 	bl	800ce2c <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80012b2:	f001 f9e5 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	; 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	240002b4 	.word	0x240002b4
 80012c4:	4000e000 	.word	0x4000e000

080012c8 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	; 0x30
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2224      	movs	r2, #36	; 0x24
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00e f8ac 	bl	800f434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <MX_TIM24_Init+0xa4>)
 80012e8:	4a21      	ldr	r2, [pc, #132]	; (8001370 <MX_TIM24_Init+0xa8>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_TIM24_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <MX_TIM24_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_TIM24_Init+0xa4>)
 80012fa:	f04f 32ff 	mov.w	r2, #4294967295
 80012fe:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_TIM24_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_TIM24_Init+0xa4>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800130c:	2303      	movs	r3, #3
 800130e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001314:	2301      	movs	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001324:	2301      	movs	r3, #1
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_TIM24_Init+0xa4>)
 8001338:	f00a fcb0 	bl	800bc9c <HAL_TIM_Encoder_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8001342:	f001 f99d 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <MX_TIM24_Init+0xa4>)
 8001354:	f00b fd6a 	bl	800ce2c <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 800135e:	f001 f98f 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3730      	adds	r7, #48	; 0x30
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	24000300 	.word	0x24000300
 8001370:	4000e400 	.word	0x4000e400

08001374 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <MX_USART10_UART_Init+0x90>)
 800137a:	4a23      	ldr	r2, [pc, #140]	; (8001408 <MX_USART10_UART_Init+0x94>)
 800137c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_USART10_UART_Init+0x90>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_USART10_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <MX_USART10_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_USART10_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_USART10_UART_Init+0x90>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_USART10_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_USART10_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_USART10_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_USART10_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <MX_USART10_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <MX_USART10_UART_Init+0x90>)
 80013be:	f00b fe8f 	bl	800d0e0 <HAL_UART_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 80013c8:	f001 f95a 	bl	8002680 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013cc:	2100      	movs	r1, #0
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_USART10_UART_Init+0x90>)
 80013d0:	f00d ff12 	bl	800f1f8 <HAL_UARTEx_SetTxFifoThreshold>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 80013da:	f001 f951 	bl	8002680 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013de:	2100      	movs	r1, #0
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <MX_USART10_UART_Init+0x90>)
 80013e2:	f00d ff47 	bl	800f274 <HAL_UARTEx_SetRxFifoThreshold>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80013ec:	f001 f948 	bl	8002680 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_USART10_UART_Init+0x90>)
 80013f2:	f00d fec8 	bl	800f186 <HAL_UARTEx_DisableFifoMode>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80013fc:	f001 f940 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2400034c 	.word	0x2400034c
 8001408:	40011c00 	.word	0x40011c00

0800140c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_DMA_Init+0x4c>)
 8001414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001418:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <MX_DMA_Init+0x4c>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <MX_DMA_Init+0x4c>)
 8001424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	200b      	movs	r0, #11
 8001436:	f004 fc34 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800143a:	200b      	movs	r0, #11
 800143c:	f004 fc4b 	bl	8005cd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	200c      	movs	r0, #12
 8001446:	f004 fc2c 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800144a:	200c      	movs	r0, #12
 800144c:	f004 fc43 	bl	8005cd6 <HAL_NVIC_EnableIRQ>

}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	58024400 	.word	0x58024400

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001472:	4b56      	ldr	r3, [pc, #344]	; (80015cc <MX_GPIO_Init+0x170>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	4a54      	ldr	r2, [pc, #336]	; (80015cc <MX_GPIO_Init+0x170>)
 800147a:	f043 0310 	orr.w	r3, r3, #16
 800147e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001482:	4b52      	ldr	r3, [pc, #328]	; (80015cc <MX_GPIO_Init+0x170>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001490:	4b4e      	ldr	r3, [pc, #312]	; (80015cc <MX_GPIO_Init+0x170>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001496:	4a4d      	ldr	r2, [pc, #308]	; (80015cc <MX_GPIO_Init+0x170>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a0:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <MX_GPIO_Init+0x170>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <MX_GPIO_Init+0x170>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	4a45      	ldr	r2, [pc, #276]	; (80015cc <MX_GPIO_Init+0x170>)
 80014b6:	f043 0320 	orr.w	r3, r3, #32
 80014ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014be:	4b43      	ldr	r3, [pc, #268]	; (80015cc <MX_GPIO_Init+0x170>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014cc:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <MX_GPIO_Init+0x170>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	4a3e      	ldr	r2, [pc, #248]	; (80015cc <MX_GPIO_Init+0x170>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014dc:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <MX_GPIO_Init+0x170>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <MX_GPIO_Init+0x170>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	4a36      	ldr	r2, [pc, #216]	; (80015cc <MX_GPIO_Init+0x170>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <MX_GPIO_Init+0x170>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b30      	ldr	r3, [pc, #192]	; (80015cc <MX_GPIO_Init+0x170>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <MX_GPIO_Init+0x170>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001518:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <MX_GPIO_Init+0x170>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <MX_GPIO_Init+0x170>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4a27      	ldr	r2, [pc, #156]	; (80015cc <MX_GPIO_Init+0x170>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4b25      	ldr	r3, [pc, #148]	; (80015cc <MX_GPIO_Init+0x170>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001544:	2200      	movs	r2, #0
 8001546:	f249 51c0 	movw	r1, #38336	; 0x95c0
 800154a:	4821      	ldr	r0, [pc, #132]	; (80015d0 <MX_GPIO_Init+0x174>)
 800154c:	f007 fe86 	bl	800925c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001556:	481f      	ldr	r0, [pc, #124]	; (80015d4 <MX_GPIO_Init+0x178>)
 8001558:	f007 fe80 	bl	800925c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800155c:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001560:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4816      	ldr	r0, [pc, #88]	; (80015d0 <MX_GPIO_Init+0x174>)
 8001576:	f007 fbc7 	bl	8008d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001580:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <MX_GPIO_Init+0x17c>)
 8001592:	f007 fbb9 	bl	8008d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001596:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4809      	ldr	r0, [pc, #36]	; (80015d4 <MX_GPIO_Init+0x178>)
 80015b0:	f007 fbaa 	bl	8008d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2028      	movs	r0, #40	; 0x28
 80015ba:	f004 fb72 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015be:	2028      	movs	r0, #40	; 0x28
 80015c0:	f004 fb89 	bl	8005cd6 <HAL_NVIC_EnableIRQ>

}
 80015c4:	bf00      	nop
 80015c6:	3730      	adds	r7, #48	; 0x30
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	58024400 	.word	0x58024400
 80015d0:	58021000 	.word	0x58021000
 80015d4:	58020400 	.word	0x58020400
 80015d8:	58020800 	.word	0x58020800
 80015dc:	00000000 	.word	0x00000000

080015e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
//	run++;
//	if (htim->Instance == TIM2) {
//		inttt ++;
//		inter();
//	}
	if (htim->Instance == TIM5) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a98      	ldr	r2, [pc, #608]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f041 803a 	bne.w	8002668 <HAL_TIM_PeriodElapsedCallback+0x1088>

		run2++;
 80015f4:	4b97      	ldr	r3, [pc, #604]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a96      	ldr	r2, [pc, #600]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80015fc:	6013      	str	r3, [r2, #0]
		SV1 = Vy + Vx + (W * 0.152767);
 80015fe:	4b96      	ldr	r3, [pc, #600]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001600:	ed93 6b00 	vldr	d6, [r3]
 8001604:	4b95      	ldr	r3, [pc, #596]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001606:	ed93 7b00 	vldr	d7, [r3]
 800160a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800160e:	4b94      	ldr	r3, [pc, #592]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001610:	ed93 7b00 	vldr	d7, [r3]
 8001614:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8001830 <HAL_TIM_PeriodElapsedCallback+0x250>
 8001618:	ee27 7b05 	vmul.f64	d7, d7, d5
 800161c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001620:	4b90      	ldr	r3, [pc, #576]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001622:	ed83 7b00 	vstr	d7, [r3]
		SV2 = Vy - Vx - (W * 0.152844);
 8001626:	4b8c      	ldr	r3, [pc, #560]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001628:	ed93 6b00 	vldr	d6, [r3]
 800162c:	4b8b      	ldr	r3, [pc, #556]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800162e:	ed93 7b00 	vldr	d7, [r3]
 8001632:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001636:	4b8a      	ldr	r3, [pc, #552]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001638:	ed93 7b00 	vldr	d7, [r3]
 800163c:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8001838 <HAL_TIM_PeriodElapsedCallback+0x258>
 8001640:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001644:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001648:	4b87      	ldr	r3, [pc, #540]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800164a:	ed83 7b00 	vstr	d7, [r3]
		SV3 = Vy + Vx - (W * 0.152998);
 800164e:	4b82      	ldr	r3, [pc, #520]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001650:	ed93 6b00 	vldr	d6, [r3]
 8001654:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001656:	ed93 7b00 	vldr	d7, [r3]
 800165a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800165e:	4b80      	ldr	r3, [pc, #512]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001660:	ed93 7b00 	vldr	d7, [r3]
 8001664:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8001840 <HAL_TIM_PeriodElapsedCallback+0x260>
 8001668:	ee27 7b05 	vmul.f64	d7, d7, d5
 800166c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001670:	4b7e      	ldr	r3, [pc, #504]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001672:	ed83 7b00 	vstr	d7, [r3]
		SV4 = Vy - Vx + (W * 0.154852);
 8001676:	4b78      	ldr	r3, [pc, #480]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001678:	ed93 6b00 	vldr	d6, [r3]
 800167c:	4b77      	ldr	r3, [pc, #476]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800167e:	ed93 7b00 	vldr	d7, [r3]
 8001682:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001686:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001688:	ed93 7b00 	vldr	d7, [r3]
 800168c:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8001848 <HAL_TIM_PeriodElapsedCallback+0x268>
 8001690:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001694:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001698:	4b75      	ldr	r3, [pc, #468]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800169a:	ed83 7b00 	vstr	d7, [r3]

		if (SV1 > max_rps){
 800169e:	4b71      	ldr	r3, [pc, #452]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016a0:	ed93 6b00 	vldr	d6, [r3]
 80016a4:	4b73      	ldr	r3, [pc, #460]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80016a6:	ed93 7b00 	vldr	d7, [r3]
 80016aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	dd37      	ble.n	8001724 <HAL_TIM_PeriodElapsedCallback+0x144>
			temp_SV = max_rps / SV1;
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80016b6:	ed93 5b00 	vldr	d5, [r3]
 80016ba:	4b6a      	ldr	r3, [pc, #424]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016bc:	ed93 6b00 	vldr	d6, [r3]
 80016c0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016c4:	4b6c      	ldr	r3, [pc, #432]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016c6:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 80016ca:	4b66      	ldr	r3, [pc, #408]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016cc:	ed93 6b00 	vldr	d6, [r3]
 80016d0:	4b69      	ldr	r3, [pc, #420]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016d2:	ed93 7b00 	vldr	d7, [r3]
 80016d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016da:	4b62      	ldr	r3, [pc, #392]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016dc:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 80016e0:	4b61      	ldr	r3, [pc, #388]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80016e2:	ed93 6b00 	vldr	d6, [r3]
 80016e6:	4b64      	ldr	r3, [pc, #400]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016e8:	ed93 7b00 	vldr	d7, [r3]
 80016ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016f0:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80016f2:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80016f8:	ed93 6b00 	vldr	d6, [r3]
 80016fc:	4b5e      	ldr	r3, [pc, #376]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016fe:	ed93 7b00 	vldr	d7, [r3]
 8001702:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001706:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001708:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 800170c:	4b58      	ldr	r3, [pc, #352]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800170e:	ed93 6b00 	vldr	d6, [r3]
 8001712:	4b59      	ldr	r3, [pc, #356]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001714:	ed93 7b00 	vldr	d7, [r3]
 8001718:	ee26 7b07 	vmul.f64	d7, d6, d7
 800171c:	4b54      	ldr	r3, [pc, #336]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800171e:	ed83 7b00 	vstr	d7, [r3]
 8001722:	e041      	b.n	80017a8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		}else if (SV1 < amax_rps){
 8001724:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001726:	ed93 6b00 	vldr	d6, [r3]
 800172a:	4b54      	ldr	r3, [pc, #336]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800172c:	ed93 7b00 	vldr	d7, [r3]
 8001730:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	d536      	bpl.n	80017a8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			temp_SV = amax_rps / SV1;
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800173c:	ed93 5b00 	vldr	d5, [r3]
 8001740:	4b48      	ldr	r3, [pc, #288]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001742:	ed93 6b00 	vldr	d6, [r3]
 8001746:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800174a:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800174c:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 8001750:	4b44      	ldr	r3, [pc, #272]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001752:	ed93 6b00 	vldr	d6, [r3]
 8001756:	4b48      	ldr	r3, [pc, #288]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001758:	ed93 7b00 	vldr	d7, [r3]
 800175c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001760:	4b40      	ldr	r3, [pc, #256]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001762:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 8001766:	4b40      	ldr	r3, [pc, #256]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001768:	ed93 6b00 	vldr	d6, [r3]
 800176c:	4b42      	ldr	r3, [pc, #264]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800176e:	ed93 7b00 	vldr	d7, [r3]
 8001772:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001776:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001778:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800177e:	ed93 6b00 	vldr	d6, [r3]
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001784:	ed93 7b00 	vldr	d7, [r3]
 8001788:	ee26 7b07 	vmul.f64	d7, d6, d7
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800178e:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001794:	ed93 6b00 	vldr	d6, [r3]
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800179a:	ed93 7b00 	vldr	d7, [r3]
 800179e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017a2:	4b33      	ldr	r3, [pc, #204]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80017a4:	ed83 7b00 	vstr	d7, [r3]
		}

		if (SV2 > max_rps){
 80017a8:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80017aa:	ed93 6b00 	vldr	d6, [r3]
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80017b0:	ed93 7b00 	vldr	d7, [r3]
 80017b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	dd60      	ble.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x2a0>
			temp_SV = max_rps / SV2;
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80017c0:	ed93 5b00 	vldr	d5, [r3]
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80017c6:	ed93 6b00 	vldr	d6, [r3]
 80017ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80017d0:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80017d6:	ed93 6b00 	vldr	d6, [r3]
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80017dc:	ed93 7b00 	vldr	d7, [r3]
 80017e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80017e6:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017ec:	ed93 6b00 	vldr	d6, [r3]
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80017f2:	ed93 7b00 	vldr	d7, [r3]
 80017f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017fc:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001802:	ed93 6b00 	vldr	d6, [r3]
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001808:	ed93 7b00 	vldr	d7, [r3]
 800180c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001812:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001818:	ed93 6b00 	vldr	d6, [r3]
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800181e:	ed93 7b00 	vldr	d7, [r3]
 8001822:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001828:	ed83 7b00 	vstr	d7, [r3]
 800182c:	e06a      	b.n	8001904 <HAL_TIM_PeriodElapsedCallback+0x324>
 800182e:	bf00      	nop
 8001830:	7a743a64 	.word	0x7a743a64
 8001834:	3fc38dde 	.word	0x3fc38dde
 8001838:	66b1e5c1 	.word	0x66b1e5c1
 800183c:	3fc39064 	.word	0x3fc39064
 8001840:	3f2d3c79 	.word	0x3f2d3c79
 8001844:	3fc39570 	.word	0x3fc39570
 8001848:	b9dc2f40 	.word	0xb9dc2f40
 800184c:	3fc3d230 	.word	0x3fc3d230
 8001850:	40000c00 	.word	0x40000c00
 8001854:	24000658 	.word	0x24000658
 8001858:	24000690 	.word	0x24000690
 800185c:	24000688 	.word	0x24000688
 8001860:	24000698 	.word	0x24000698
 8001864:	240004f0 	.word	0x240004f0
 8001868:	24000548 	.word	0x24000548
 800186c:	240005a0 	.word	0x240005a0
 8001870:	240005f8 	.word	0x240005f8
 8001874:	24000638 	.word	0x24000638
 8001878:	24000648 	.word	0x24000648
 800187c:	24000640 	.word	0x24000640
		}else if (SV2 < amax_rps){
 8001880:	4b84      	ldr	r3, [pc, #528]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001882:	ed93 6b00 	vldr	d6, [r3]
 8001886:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001888:	ed93 7b00 	vldr	d7, [r3]
 800188c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d536      	bpl.n	8001904 <HAL_TIM_PeriodElapsedCallback+0x324>
			temp_SV = amax_rps / SV2;
 8001896:	4b80      	ldr	r3, [pc, #512]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001898:	ed93 5b00 	vldr	d5, [r3]
 800189c:	4b7d      	ldr	r3, [pc, #500]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 800189e:	ed93 6b00 	vldr	d6, [r3]
 80018a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018a6:	4b7d      	ldr	r3, [pc, #500]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80018a8:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 80018ac:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80018ae:	ed93 6b00 	vldr	d6, [r3]
 80018b2:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80018b4:	ed93 7b00 	vldr	d7, [r3]
 80018b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018bc:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80018be:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 80018c2:	4b77      	ldr	r3, [pc, #476]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80018c4:	ed93 6b00 	vldr	d6, [r3]
 80018c8:	4b74      	ldr	r3, [pc, #464]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80018ca:	ed93 7b00 	vldr	d7, [r3]
 80018ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018d2:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80018d4:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 80018d8:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80018da:	ed93 6b00 	vldr	d6, [r3]
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80018e0:	ed93 7b00 	vldr	d7, [r3]
 80018e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018e8:	4b6e      	ldr	r3, [pc, #440]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80018ea:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 80018ee:	4b6e      	ldr	r3, [pc, #440]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80018f0:	ed93 6b00 	vldr	d6, [r3]
 80018f4:	4b69      	ldr	r3, [pc, #420]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80018f6:	ed93 7b00 	vldr	d7, [r3]
 80018fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018fe:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001900:	ed83 7b00 	vstr	d7, [r3]
		}
		if (SV3 > max_rps){
 8001904:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001906:	ed93 6b00 	vldr	d6, [r3]
 800190a:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800190c:	ed93 7b00 	vldr	d7, [r3]
 8001910:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	dd37      	ble.n	800198a <HAL_TIM_PeriodElapsedCallback+0x3aa>
			temp_SV = max_rps / SV3;
 800191a:	4b64      	ldr	r3, [pc, #400]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800191c:	ed93 5b00 	vldr	d5, [r3]
 8001920:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001922:	ed93 6b00 	vldr	d6, [r3]
 8001926:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800192a:	4b5c      	ldr	r3, [pc, #368]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 800192c:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 8001930:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001932:	ed93 6b00 	vldr	d6, [r3]
 8001936:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001938:	ed93 7b00 	vldr	d7, [r3]
 800193c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001940:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001942:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 8001946:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001948:	ed93 6b00 	vldr	d6, [r3]
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 800194e:	ed93 7b00 	vldr	d7, [r3]
 8001952:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001956:	4b52      	ldr	r3, [pc, #328]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001958:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 800195c:	4b4d      	ldr	r3, [pc, #308]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 800195e:	ed93 6b00 	vldr	d6, [r3]
 8001962:	4b4e      	ldr	r3, [pc, #312]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001964:	ed93 7b00 	vldr	d7, [r3]
 8001968:	ee26 7b07 	vmul.f64	d7, d6, d7
 800196c:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 800196e:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 8001972:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001974:	ed93 6b00 	vldr	d6, [r3]
 8001978:	4b48      	ldr	r3, [pc, #288]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 800197a:	ed93 7b00 	vldr	d7, [r3]
 800197e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001982:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001984:	ed83 7b00 	vstr	d7, [r3]
 8001988:	e041      	b.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x42e>
		}else if (SV3 < amax_rps){
 800198a:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800198c:	ed93 6b00 	vldr	d6, [r3]
 8001990:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001992:	ed93 7b00 	vldr	d7, [r3]
 8001996:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d536      	bpl.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x42e>
			temp_SV = amax_rps / SV3;
 80019a0:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 80019a2:	ed93 5b00 	vldr	d5, [r3]
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80019a8:	ed93 6b00 	vldr	d6, [r3]
 80019ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019b0:	4b3a      	ldr	r3, [pc, #232]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80019b2:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80019b8:	ed93 6b00 	vldr	d6, [r3]
 80019bc:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80019be:	ed93 7b00 	vldr	d7, [r3]
 80019c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80019c8:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80019ce:	ed93 6b00 	vldr	d6, [r3]
 80019d2:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80019d4:	ed93 7b00 	vldr	d7, [r3]
 80019d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80019de:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 80019e2:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80019e4:	ed93 6b00 	vldr	d6, [r3]
 80019e8:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80019ea:	ed93 7b00 	vldr	d7, [r3]
 80019ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80019f4:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80019fa:	ed93 6b00 	vldr	d6, [r3]
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001a00:	ed93 7b00 	vldr	d7, [r3]
 8001a04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a0a:	ed83 7b00 	vstr	d7, [r3]
		}
		if (SV4 > max_rps){
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a10:	ed93 6b00 	vldr	d6, [r3]
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001a16:	ed93 7b00 	vldr	d7, [r3]
 8001a1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	dd45      	ble.n	8001ab0 <HAL_TIM_PeriodElapsedCallback+0x4d0>
			temp_SV = max_rps / SV4;
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001a26:	ed93 5b00 	vldr	d5, [r3]
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a2c:	ed93 6b00 	vldr	d6, [r3]
 8001a30:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001a36:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a3c:	ed93 6b00 	vldr	d6, [r3]
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001a42:	ed93 7b00 	vldr	d7, [r3]
 8001a46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a4c:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001a52:	ed93 6b00 	vldr	d6, [r3]
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001a58:	ed93 7b00 	vldr	d7, [r3]
 8001a5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001a62:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a68:	ed93 6b00 	vldr	d6, [r3]
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001a6e:	ed93 7b00 	vldr	d7, [r3]
 8001a72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a78:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001a7e:	ed93 6b00 	vldr	d6, [r3]
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001a84:	ed93 7b00 	vldr	d7, [r3]
 8001a88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001a8e:	ed83 7b00 	vstr	d7, [r3]
 8001a92:	e04f      	b.n	8001b34 <HAL_TIM_PeriodElapsedCallback+0x554>
 8001a94:	24000548 	.word	0x24000548
 8001a98:	24000640 	.word	0x24000640
 8001a9c:	24000648 	.word	0x24000648
 8001aa0:	240004f0 	.word	0x240004f0
 8001aa4:	240005a0 	.word	0x240005a0
 8001aa8:	240005f8 	.word	0x240005f8
 8001aac:	24000638 	.word	0x24000638
		}else if (SV4 < amax_rps){
 8001ab0:	4bbf      	ldr	r3, [pc, #764]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8001ab2:	ed93 6b00 	vldr	d6, [r3]
 8001ab6:	4bbf      	ldr	r3, [pc, #764]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001ab8:	ed93 7b00 	vldr	d7, [r3]
 8001abc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	d536      	bpl.n	8001b34 <HAL_TIM_PeriodElapsedCallback+0x554>
			temp_SV = amax_rps / SV4;
 8001ac6:	4bbb      	ldr	r3, [pc, #748]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001ac8:	ed93 5b00 	vldr	d5, [r3]
 8001acc:	4bb8      	ldr	r3, [pc, #736]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8001ace:	ed93 6b00 	vldr	d6, [r3]
 8001ad2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ad6:	4bb8      	ldr	r3, [pc, #736]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8001ad8:	ed83 7b00 	vstr	d7, [r3]
			SV4 *= temp_SV;
 8001adc:	4bb4      	ldr	r3, [pc, #720]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8001ade:	ed93 6b00 	vldr	d6, [r3]
 8001ae2:	4bb5      	ldr	r3, [pc, #724]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8001ae4:	ed93 7b00 	vldr	d7, [r3]
 8001ae8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001aec:	4bb0      	ldr	r3, [pc, #704]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8001aee:	ed83 7b00 	vstr	d7, [r3]
			SV1 *= temp_SV;
 8001af2:	4bb2      	ldr	r3, [pc, #712]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8001af4:	ed93 6b00 	vldr	d6, [r3]
 8001af8:	4baf      	ldr	r3, [pc, #700]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8001afa:	ed93 7b00 	vldr	d7, [r3]
 8001afe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b02:	4bae      	ldr	r3, [pc, #696]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8001b04:	ed83 7b00 	vstr	d7, [r3]
			SV2 *= temp_SV;
 8001b08:	4bad      	ldr	r3, [pc, #692]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001b0a:	ed93 6b00 	vldr	d6, [r3]
 8001b0e:	4baa      	ldr	r3, [pc, #680]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8001b10:	ed93 7b00 	vldr	d7, [r3]
 8001b14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b18:	4ba9      	ldr	r3, [pc, #676]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001b1a:	ed83 7b00 	vstr	d7, [r3]
			SV3 *= temp_SV;
 8001b1e:	4ba9      	ldr	r3, [pc, #676]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001b20:	ed93 6b00 	vldr	d6, [r3]
 8001b24:	4ba4      	ldr	r3, [pc, #656]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8001b26:	ed93 7b00 	vldr	d7, [r3]
 8001b2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b2e:	4ba5      	ldr	r3, [pc, #660]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001b30:	ed83 7b00 	vstr	d7, [r3]
		}

		it1 = et1;
 8001b34:	4ba4      	ldr	r3, [pc, #656]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	49a4      	ldr	r1, [pc, #656]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8001b3c:	e9c1 2300 	strd	r2, r3, [r1]
		it2 = et2;
 8001b40:	4ba3      	ldr	r3, [pc, #652]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	49a3      	ldr	r1, [pc, #652]	; (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8001b48:	e9c1 2300 	strd	r2, r3, [r1]
		it3 = et3;
 8001b4c:	4ba2      	ldr	r3, [pc, #648]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	49a2      	ldr	r1, [pc, #648]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001b54:	e9c1 2300 	strd	r2, r3, [r1]
		it4 = et4;
 8001b58:	4ba1      	ldr	r3, [pc, #644]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	49a1      	ldr	r1, [pc, #644]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x804>)
 8001b60:	e9c1 2300 	strd	r2, r3, [r1]
		enc1 = __HAL_TIM_GetCounter(&htim23);
 8001b64:	4ba0      	ldr	r3, [pc, #640]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	4b9f      	ldr	r3, [pc, #636]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8001b6e:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim4);
 8001b70:	4b9f      	ldr	r3, [pc, #636]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b9e      	ldr	r3, [pc, #632]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001b7a:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim24);
 8001b7c:	4b9e      	ldr	r3, [pc, #632]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	4b9d      	ldr	r3, [pc, #628]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8001b86:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim3);
 8001b88:	4b9d      	ldr	r3, [pc, #628]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	4b9c      	ldr	r3, [pc, #624]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8001b92:	801a      	strh	r2, [r3, #0]
		enc2 *= -1;
 8001b94:	4b97      	ldr	r3, [pc, #604]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	425b      	negs	r3, r3
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b94      	ldr	r3, [pc, #592]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001ba4:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SetCounter(&htim24, 0);
 8001ba6:	4b94      	ldr	r3, [pc, #592]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 8001bae:	4b8e      	ldr	r3, [pc, #568]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 8001bb6:	4b92      	ldr	r3, [pc, #584]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 8001bbe:	4b8c      	ldr	r3, [pc, #560]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
//		speed1 = (double) enc1 * 99.6 * PI * 0.001 * 0.5 / (4 * resolution * reduction_ratio) * frequency;
//		speed2 = (double) enc2 * 99.6 * PI * 0.001 * 0.5 / (4 * resolution * reduction_ratio) * frequency;
//		speed3 = (double) enc3 * 99.6 * PI * 0.001 * 0.5 / (4 * resolution * reduction_ratio) * frequency;
//		speed4 = (double) enc4 * 99.6 * PI * 0.001 * 0.5 / (4 * resolution * reduction_ratio) * frequency;

		speed1 = (double) enc1 * PI * 0.0996 / (4 * resolution * reduction_ratio) * frequency;
 8001bc6:	4b89      	ldr	r3, [pc, #548]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bd4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8001da0 <HAL_TIM_PeriodElapsedCallback+0x7c0>
 8001bd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bdc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8001da8 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8001be0:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001be4:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001be6:	ed93 7b00 	vldr	d7, [r3]
 8001bea:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001bee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bf2:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8001bf4:	ed93 7b00 	vldr	d7, [r3]
 8001bf8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bfc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001c00:	4b83      	ldr	r3, [pc, #524]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001c02:	ed93 7b00 	vldr	d7, [r3]
 8001c06:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c0a:	4b82      	ldr	r3, [pc, #520]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001c0c:	ed83 7b00 	vstr	d7, [r3]
		speed2 = (double) enc2 * PI * 0.0996 / (4 * resolution * reduction_ratio) * frequency;
 8001c10:	4b78      	ldr	r3, [pc, #480]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c1e:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001da0 <HAL_TIM_PeriodElapsedCallback+0x7c0>
 8001c22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c26:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001da8 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8001c2a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001c2e:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001c30:	ed93 7b00 	vldr	d7, [r3]
 8001c34:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c38:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c3c:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8001c3e:	ed93 7b00 	vldr	d7, [r3]
 8001c42:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c46:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001c4a:	4b71      	ldr	r3, [pc, #452]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001c4c:	ed93 7b00 	vldr	d7, [r3]
 8001c50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c54:	4b70      	ldr	r3, [pc, #448]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001c56:	ed83 7b00 	vstr	d7, [r3]
		speed3 = (double) enc3 * PI * 0.0996 / (4 * resolution * reduction_ratio) * frequency;
 8001c5a:	4b68      	ldr	r3, [pc, #416]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8001c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c68:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001da0 <HAL_TIM_PeriodElapsedCallback+0x7c0>
 8001c6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c70:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001da8 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8001c74:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001c78:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001c7a:	ed93 7b00 	vldr	d7, [r3]
 8001c7e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c82:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c86:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8001c88:	ed93 7b00 	vldr	d7, [r3]
 8001c8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001c94:	4b5e      	ldr	r3, [pc, #376]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001c96:	ed93 7b00 	vldr	d7, [r3]
 8001c9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001ca0:	ed83 7b00 	vstr	d7, [r3]
		speed4 = (double) enc4 * PI * 0.0996 / (4 * resolution * reduction_ratio) * frequency;
 8001ca4:	4b57      	ldr	r3, [pc, #348]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cb2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001da0 <HAL_TIM_PeriodElapsedCallback+0x7c0>
 8001cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cba:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001da8 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8001cbe:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001cc2:	4b51      	ldr	r3, [pc, #324]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001cc4:	ed93 7b00 	vldr	d7, [r3]
 8001cc8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001ccc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8001cd2:	ed93 7b00 	vldr	d7, [r3]
 8001cd6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cda:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001cde:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001ce0:	ed93 7b00 	vldr	d7, [r3]
 8001ce4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ce8:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001cea:	ed83 7b00 	vstr	d7, [r3]
//		speed1 = (double) enc1  / (4 * resolution * reduction_ratio) * frequency;
//		speed2 = (double) enc2  / (4 * resolution * reduction_ratio) * frequency;
//		speed3 = (double) enc3  / (4 * resolution * reduction_ratio) * frequency;
//		speed4 = (double) enc4  / (4 * resolution * reduction_ratio) * frequency;

		rVy = 0.25 * ( speed1 + speed2 + speed3 + speed4 );
 8001cee:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001cf0:	ed93 6b00 	vldr	d6, [r3]
 8001cf4:	4b48      	ldr	r3, [pc, #288]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001cf6:	ed93 7b00 	vldr	d7, [r3]
 8001cfa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001d00:	ed93 7b00 	vldr	d7, [r3]
 8001d04:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d08:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001d0a:	ed93 7b00 	vldr	d7, [r3]
 8001d0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d12:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d1a:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001d1c:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( speed1 - speed2 + speed3 - speed4 );
 8001d20:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001d22:	ed93 6b00 	vldr	d6, [r3]
 8001d26:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001d28:	ed93 7b00 	vldr	d7, [r3]
 8001d2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001d30:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001d32:	ed93 7b00 	vldr	d7, [r3]
 8001d36:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d3a:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001d3c:	ed93 7b00 	vldr	d7, [r3]
 8001d40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d44:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001d48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8001d4e:	ed83 7b00 	vstr	d7, [r3]
		rW = 0.25 * ( speed1 - speed2 - speed3 + speed4 );
 8001d52:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001d54:	ed93 6b00 	vldr	d6, [r3]
 8001d58:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001d5a:	ed93 7b00 	vldr	d7, [r3]
 8001d5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001d62:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001d64:	ed93 7b00 	vldr	d7, [r3]
 8001d68:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001d6c:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001d6e:	ed93 7b00 	vldr	d7, [r3]
 8001d72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d76:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001d7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d80:	ed83 7b00 	vstr	d7, [r3]
		et1 = SV1 - speed1;
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8001d86:	ed93 6b00 	vldr	d6, [r3]
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001d8c:	ed93 7b00 	vldr	d7, [r3]
 8001d90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8001d96:	ed83 7b00 	vstr	d7, [r3]
 8001d9a:	e049      	b.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x850>
 8001d9c:	f3af 8000 	nop.w
 8001da0:	4d12d84a 	.word	0x4d12d84a
 8001da4:	400921fb 	.word	0x400921fb
 8001da8:	b6ae7d56 	.word	0xb6ae7d56
 8001dac:	3fb97f62 	.word	0x3fb97f62
 8001db0:	240005f8 	.word	0x240005f8
 8001db4:	24000640 	.word	0x24000640
 8001db8:	24000648 	.word	0x24000648
 8001dbc:	240004f0 	.word	0x240004f0
 8001dc0:	24000548 	.word	0x24000548
 8001dc4:	240005a0 	.word	0x240005a0
 8001dc8:	24000508 	.word	0x24000508
 8001dcc:	24000518 	.word	0x24000518
 8001dd0:	24000560 	.word	0x24000560
 8001dd4:	24000570 	.word	0x24000570
 8001dd8:	240005b8 	.word	0x240005b8
 8001ddc:	240005c8 	.word	0x240005c8
 8001de0:	24000610 	.word	0x24000610
 8001de4:	24000620 	.word	0x24000620
 8001de8:	240002b4 	.word	0x240002b4
 8001dec:	24000630 	.word	0x24000630
 8001df0:	24000184 	.word	0x24000184
 8001df4:	24000632 	.word	0x24000632
 8001df8:	24000300 	.word	0x24000300
 8001dfc:	24000634 	.word	0x24000634
 8001e00:	24000138 	.word	0x24000138
 8001e04:	24000636 	.word	0x24000636
 8001e08:	24000040 	.word	0x24000040
 8001e0c:	24000048 	.word	0x24000048
 8001e10:	24000050 	.word	0x24000050
 8001e14:	24000660 	.word	0x24000660
 8001e18:	24000668 	.word	0x24000668
 8001e1c:	24000670 	.word	0x24000670
 8001e20:	24000678 	.word	0x24000678
 8001e24:	240006a8 	.word	0x240006a8
 8001e28:	240006a0 	.word	0x240006a0
 8001e2c:	240006b0 	.word	0x240006b0
		et2 = SV2 - speed2;
 8001e30:	4bbb      	ldr	r3, [pc, #748]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8001e32:	ed93 6b00 	vldr	d6, [r3]
 8001e36:	4bbb      	ldr	r3, [pc, #748]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8001e38:	ed93 7b00 	vldr	d7, [r3]
 8001e3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e40:	4bb9      	ldr	r3, [pc, #740]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0xb48>)
 8001e42:	ed83 7b00 	vstr	d7, [r3]
		et3 = SV3 - speed3;
 8001e46:	4bb9      	ldr	r3, [pc, #740]	; (800212c <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8001e48:	ed93 6b00 	vldr	d6, [r3]
 8001e4c:	4bb8      	ldr	r3, [pc, #736]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8001e4e:	ed93 7b00 	vldr	d7, [r3]
 8001e52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e56:	4bb7      	ldr	r3, [pc, #732]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8001e58:	ed83 7b00 	vstr	d7, [r3]
		et4 = SV4 - speed4;
 8001e5c:	4bb6      	ldr	r3, [pc, #728]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8001e5e:	ed93 6b00 	vldr	d6, [r3]
 8001e62:	4bb6      	ldr	r3, [pc, #728]	; (800213c <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8001e64:	ed93 7b00 	vldr	d7, [r3]
 8001e68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e6c:	4bb4      	ldr	r3, [pc, #720]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8001e6e:	ed83 7b00 	vstr	d7, [r3]
		up1 = Kp1 * et1;
 8001e72:	4bb4      	ldr	r3, [pc, #720]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8001e74:	ed93 6b00 	vldr	d6, [r3]
 8001e78:	4bb3      	ldr	r3, [pc, #716]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 8001e7a:	ed93 7b00 	vldr	d7, [r3]
 8001e7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e82:	4bb2      	ldr	r3, [pc, #712]	; (800214c <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8001e84:	ed83 7b00 	vstr	d7, [r3]
		up2 = Kp2 * et2;
 8001e88:	4bb1      	ldr	r3, [pc, #708]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0xb70>)
 8001e8a:	ed93 6b00 	vldr	d6, [r3]
 8001e8e:	4ba6      	ldr	r3, [pc, #664]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0xb48>)
 8001e90:	ed93 7b00 	vldr	d7, [r3]
 8001e94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e98:	4bae      	ldr	r3, [pc, #696]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8001e9a:	ed83 7b00 	vstr	d7, [r3]
		up3 = Kp3 * et3;
 8001e9e:	4bae      	ldr	r3, [pc, #696]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0xb78>)
 8001ea0:	ed93 6b00 	vldr	d6, [r3]
 8001ea4:	4ba3      	ldr	r3, [pc, #652]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8001ea6:	ed93 7b00 	vldr	d7, [r3]
 8001eaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001eae:	4bab      	ldr	r3, [pc, #684]	; (800215c <HAL_TIM_PeriodElapsedCallback+0xb7c>)
 8001eb0:	ed83 7b00 	vstr	d7, [r3]
		up4 = Kp4 * et4;
 8001eb4:	4baa      	ldr	r3, [pc, #680]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8001eb6:	ed93 6b00 	vldr	d6, [r3]
 8001eba:	4ba1      	ldr	r3, [pc, #644]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8001ebc:	ed93 7b00 	vldr	d7, [r3]
 8001ec0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ec4:	4ba7      	ldr	r3, [pc, #668]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8001ec6:	ed83 7b00 	vstr	d7, [r3]
		ui1 += Ki1 * it1 * 0.001;
 8001eca:	4ba7      	ldr	r3, [pc, #668]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8001ecc:	ed93 6b00 	vldr	d6, [r3]
 8001ed0:	4ba6      	ldr	r3, [pc, #664]	; (800216c <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8001ed2:	ed93 7b00 	vldr	d7, [r3]
 8001ed6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001eda:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8002118 <HAL_TIM_PeriodElapsedCallback+0xb38>
 8001ede:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ee2:	4ba3      	ldr	r3, [pc, #652]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8001ee4:	ed93 7b00 	vldr	d7, [r3]
 8001ee8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001eec:	4ba0      	ldr	r3, [pc, #640]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8001eee:	ed83 7b00 	vstr	d7, [r3]
		ui2 += Ki2 * it2 * 0.001;
 8001ef2:	4ba0      	ldr	r3, [pc, #640]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0xb94>)
 8001ef4:	ed93 6b00 	vldr	d6, [r3]
 8001ef8:	4b9f      	ldr	r3, [pc, #636]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8001efa:	ed93 7b00 	vldr	d7, [r3]
 8001efe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001f02:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002118 <HAL_TIM_PeriodElapsedCallback+0xb38>
 8001f06:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f0a:	4b9c      	ldr	r3, [pc, #624]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8001f0c:	ed93 7b00 	vldr	d7, [r3]
 8001f10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f14:	4b99      	ldr	r3, [pc, #612]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8001f16:	ed83 7b00 	vstr	d7, [r3]
		ui3 += Ki3 * it3 * 0.001;
 8001f1a:	4b99      	ldr	r3, [pc, #612]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8001f1c:	ed93 6b00 	vldr	d6, [r3]
 8001f20:	4b98      	ldr	r3, [pc, #608]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xba4>)
 8001f22:	ed93 7b00 	vldr	d7, [r3]
 8001f26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001f2a:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 8002118 <HAL_TIM_PeriodElapsedCallback+0xb38>
 8001f2e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f32:	4b95      	ldr	r3, [pc, #596]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8001f34:	ed93 7b00 	vldr	d7, [r3]
 8001f38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f3c:	4b92      	ldr	r3, [pc, #584]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8001f3e:	ed83 7b00 	vstr	d7, [r3]
		ui4 += Ki4 * it4 * 0.001;
 8001f42:	4b92      	ldr	r3, [pc, #584]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8001f44:	ed93 6b00 	vldr	d6, [r3]
 8001f48:	4b91      	ldr	r3, [pc, #580]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8001f4a:	ed93 7b00 	vldr	d7, [r3]
 8001f4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001f52:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002118 <HAL_TIM_PeriodElapsedCallback+0xb38>
 8001f56:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f5a:	4b8e      	ldr	r3, [pc, #568]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 8001f5c:	ed93 7b00 	vldr	d7, [r3]
 8001f60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f64:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 8001f66:	ed83 7b00 	vstr	d7, [r3]
		ud1 = Kd1 * (et1 - it1) / 0.001;
 8001f6a:	4b77      	ldr	r3, [pc, #476]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 8001f6c:	ed93 6b00 	vldr	d6, [r3]
 8001f70:	4b7e      	ldr	r3, [pc, #504]	; (800216c <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8001f72:	ed93 7b00 	vldr	d7, [r3]
 8001f76:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f7a:	4b87      	ldr	r3, [pc, #540]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 8001f7c:	ed93 7b00 	vldr	d7, [r3]
 8001f80:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f84:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8002118 <HAL_TIM_PeriodElapsedCallback+0xb38>
 8001f88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f8c:	4b83      	ldr	r3, [pc, #524]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 8001f8e:	ed83 7b00 	vstr	d7, [r3]
		ud2 = Kd2 * (et2 - it2) / 0.001;
 8001f92:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0xb48>)
 8001f94:	ed93 6b00 	vldr	d6, [r3]
 8001f98:	4b77      	ldr	r3, [pc, #476]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8001f9a:	ed93 7b00 	vldr	d7, [r3]
 8001f9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001fa2:	4b7f      	ldr	r3, [pc, #508]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xbc0>)
 8001fa4:	ed93 7b00 	vldr	d7, [r3]
 8001fa8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001fac:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8002118 <HAL_TIM_PeriodElapsedCallback+0xb38>
 8001fb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fb4:	4b7b      	ldr	r3, [pc, #492]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xbc4>)
 8001fb6:	ed83 7b00 	vstr	d7, [r3]
		ud3 = Kd3 * (et3 - it3) / 0.001;
 8001fba:	4b5e      	ldr	r3, [pc, #376]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8001fbc:	ed93 6b00 	vldr	d6, [r3]
 8001fc0:	4b70      	ldr	r3, [pc, #448]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xba4>)
 8001fc2:	ed93 7b00 	vldr	d7, [r3]
 8001fc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001fca:	4b77      	ldr	r3, [pc, #476]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0xbc8>)
 8001fcc:	ed93 7b00 	vldr	d7, [r3]
 8001fd0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001fd4:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8002118 <HAL_TIM_PeriodElapsedCallback+0xb38>
 8001fd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fdc:	4b73      	ldr	r3, [pc, #460]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0xbcc>)
 8001fde:	ed83 7b00 	vstr	d7, [r3]
		ud4 = Kd4 * (et4 - it4) / 0.001;
 8001fe2:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8001fe4:	ed93 6b00 	vldr	d6, [r3]
 8001fe8:	4b69      	ldr	r3, [pc, #420]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8001fea:	ed93 7b00 	vldr	d7, [r3]
 8001fee:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001ff2:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8001ff4:	ed93 7b00 	vldr	d7, [r3]
 8001ff8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ffc:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8002118 <HAL_TIM_PeriodElapsedCallback+0xb38>
 8002000:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002004:	4b6b      	ldr	r3, [pc, #428]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0xbd4>)
 8002006:	ed83 7b00 	vstr	d7, [r3]
		if (ui1 > imax1){
 800200a:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 800200c:	ed93 6b00 	vldr	d6, [r3]
 8002010:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8002012:	ed93 7b00 	vldr	d7, [r3]
 8002016:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	dd06      	ble.n	800202e <HAL_TIM_PeriodElapsedCallback+0xa4e>
			ui1 = imax1;
 8002020:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	4952      	ldr	r1, [pc, #328]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8002028:	e9c1 2300 	strd	r2, r3, [r1]
 800202c:	e014      	b.n	8002058 <HAL_TIM_PeriodElapsedCallback+0xa78>
		}else if (ui1 < imax1 * -1){
 800202e:	4b62      	ldr	r3, [pc, #392]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8002030:	ed93 7b00 	vldr	d7, [r3]
 8002034:	eeb1 6b47 	vneg.f64	d6, d7
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 800203a:	ed93 7b00 	vldr	d7, [r3]
 800203e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	dd07      	ble.n	8002058 <HAL_TIM_PeriodElapsedCallback+0xa78>
			ui1 = imax1 * -1;
 8002048:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800204a:	ed93 7b00 	vldr	d7, [r3]
 800204e:	eeb1 7b47 	vneg.f64	d7, d7
 8002052:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8002054:	ed83 7b00 	vstr	d7, [r3]
		}
		if (ui2 > imax2){
 8002058:	4b48      	ldr	r3, [pc, #288]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 800205a:	ed93 6b00 	vldr	d6, [r3]
 800205e:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8002060:	ed93 7b00 	vldr	d7, [r3]
 8002064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	dd06      	ble.n	800207c <HAL_TIM_PeriodElapsedCallback+0xa9c>
			ui2 = imax2;
 800206e:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	4941      	ldr	r1, [pc, #260]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8002076:	e9c1 2300 	strd	r2, r3, [r1]
 800207a:	e014      	b.n	80020a6 <HAL_TIM_PeriodElapsedCallback+0xac6>
		}else if (ui2 < imax2 * -1){
 800207c:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 800207e:	ed93 7b00 	vldr	d7, [r3]
 8002082:	eeb1 6b47 	vneg.f64	d6, d7
 8002086:	4b3d      	ldr	r3, [pc, #244]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8002088:	ed93 7b00 	vldr	d7, [r3]
 800208c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	dd07      	ble.n	80020a6 <HAL_TIM_PeriodElapsedCallback+0xac6>
			ui2 = imax2 * -1;
 8002096:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8002098:	ed93 7b00 	vldr	d7, [r3]
 800209c:	eeb1 7b47 	vneg.f64	d7, d7
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80020a2:	ed83 7b00 	vstr	d7, [r3]
		}
		if (ui3 > imax3){
 80020a6:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 80020a8:	ed93 6b00 	vldr	d6, [r3]
 80020ac:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80020ae:	ed93 7b00 	vldr	d7, [r3]
 80020b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ba:	dd06      	ble.n	80020ca <HAL_TIM_PeriodElapsedCallback+0xaea>
			ui3 = imax3;
 80020bc:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	4931      	ldr	r1, [pc, #196]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 80020c4:	e9c1 2300 	strd	r2, r3, [r1]
 80020c8:	e014      	b.n	80020f4 <HAL_TIM_PeriodElapsedCallback+0xb14>
		}else if (ui3 < imax3 * -1){
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80020cc:	ed93 7b00 	vldr	d7, [r3]
 80020d0:	eeb1 6b47 	vneg.f64	d6, d7
 80020d4:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 80020d6:	ed93 7b00 	vldr	d7, [r3]
 80020da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	dd07      	ble.n	80020f4 <HAL_TIM_PeriodElapsedCallback+0xb14>
			ui3 = imax3 * -1;
 80020e4:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80020e6:	ed93 7b00 	vldr	d7, [r3]
 80020ea:	eeb1 7b47 	vneg.f64	d7, d7
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 80020f0:	ed83 7b00 	vstr	d7, [r3]
		}
		if (ui4 > imax4){
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 80020f6:	ed93 6b00 	vldr	d6, [r3]
 80020fa:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 80020fc:	ed93 7b00 	vldr	d7, [r3]
 8002100:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	dd5e      	ble.n	80021c8 <HAL_TIM_PeriodElapsedCallback+0xbe8>
			ui4 = imax4;
 800210a:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	4920      	ldr	r1, [pc, #128]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 8002112:	e9c1 2300 	strd	r2, r3, [r1]
 8002116:	e06c      	b.n	80021f2 <HAL_TIM_PeriodElapsedCallback+0xc12>
 8002118:	d2f1a9fc 	.word	0xd2f1a9fc
 800211c:	3f50624d 	.word	0x3f50624d
 8002120:	24000548 	.word	0x24000548
 8002124:	24000668 	.word	0x24000668
 8002128:	24000560 	.word	0x24000560
 800212c:	240005a0 	.word	0x240005a0
 8002130:	24000670 	.word	0x24000670
 8002134:	240005b8 	.word	0x240005b8
 8002138:	240005f8 	.word	0x240005f8
 800213c:	24000678 	.word	0x24000678
 8002140:	24000610 	.word	0x24000610
 8002144:	24000000 	.word	0x24000000
 8002148:	24000508 	.word	0x24000508
 800214c:	240004d8 	.word	0x240004d8
 8002150:	24000010 	.word	0x24000010
 8002154:	24000530 	.word	0x24000530
 8002158:	24000020 	.word	0x24000020
 800215c:	24000588 	.word	0x24000588
 8002160:	24000030 	.word	0x24000030
 8002164:	240005e0 	.word	0x240005e0
 8002168:	24000008 	.word	0x24000008
 800216c:	24000518 	.word	0x24000518
 8002170:	240004e0 	.word	0x240004e0
 8002174:	24000018 	.word	0x24000018
 8002178:	24000570 	.word	0x24000570
 800217c:	24000538 	.word	0x24000538
 8002180:	24000028 	.word	0x24000028
 8002184:	240005c8 	.word	0x240005c8
 8002188:	24000590 	.word	0x24000590
 800218c:	24000038 	.word	0x24000038
 8002190:	24000620 	.word	0x24000620
 8002194:	240005e8 	.word	0x240005e8
 8002198:	24000500 	.word	0x24000500
 800219c:	240004e8 	.word	0x240004e8
 80021a0:	24000558 	.word	0x24000558
 80021a4:	24000540 	.word	0x24000540
 80021a8:	240005b0 	.word	0x240005b0
 80021ac:	24000598 	.word	0x24000598
 80021b0:	24000608 	.word	0x24000608
 80021b4:	240005f0 	.word	0x240005f0
 80021b8:	24000520 	.word	0x24000520
 80021bc:	24000578 	.word	0x24000578
 80021c0:	240005d0 	.word	0x240005d0
 80021c4:	24000628 	.word	0x24000628
		}else if (ui4 < imax4 * -1){
 80021c8:	4bbd      	ldr	r3, [pc, #756]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xee0>)
 80021ca:	ed93 7b00 	vldr	d7, [r3]
 80021ce:	eeb1 6b47 	vneg.f64	d6, d7
 80021d2:	4bbc      	ldr	r3, [pc, #752]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0xee4>)
 80021d4:	ed93 7b00 	vldr	d7, [r3]
 80021d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	dd07      	ble.n	80021f2 <HAL_TIM_PeriodElapsedCallback+0xc12>
			ui4 = imax4 * -1;
 80021e2:	4bb7      	ldr	r3, [pc, #732]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0xee0>)
 80021e4:	ed93 7b00 	vldr	d7, [r3]
 80021e8:	eeb1 7b47 	vneg.f64	d7, d7
 80021ec:	4bb5      	ldr	r3, [pc, #724]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0xee4>)
 80021ee:	ed83 7b00 	vstr	d7, [r3]
		}
		ut1 = up1 + ui1 + ud1;
 80021f2:	4bb5      	ldr	r3, [pc, #724]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0xee8>)
 80021f4:	ed93 6b00 	vldr	d6, [r3]
 80021f8:	4bb4      	ldr	r3, [pc, #720]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0xeec>)
 80021fa:	ed93 7b00 	vldr	d7, [r3]
 80021fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002202:	4bb3      	ldr	r3, [pc, #716]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0xef0>)
 8002204:	ed93 7b00 	vldr	d7, [r3]
 8002208:	ee36 7b07 	vadd.f64	d7, d6, d7
 800220c:	4bb1      	ldr	r3, [pc, #708]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 800220e:	ed83 7b00 	vstr	d7, [r3]
		ut2 = up2 + ui2 + ud2;
 8002212:	4bb1      	ldr	r3, [pc, #708]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8002214:	ed93 6b00 	vldr	d6, [r3]
 8002218:	4bb0      	ldr	r3, [pc, #704]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0xefc>)
 800221a:	ed93 7b00 	vldr	d7, [r3]
 800221e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002222:	4baf      	ldr	r3, [pc, #700]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 8002224:	ed93 7b00 	vldr	d7, [r3]
 8002228:	ee36 7b07 	vadd.f64	d7, d6, d7
 800222c:	4bad      	ldr	r3, [pc, #692]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 800222e:	ed83 7b00 	vstr	d7, [r3]
		ut3 = up3 + ui3 + ud3;
 8002232:	4bad      	ldr	r3, [pc, #692]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0xf08>)
 8002234:	ed93 6b00 	vldr	d6, [r3]
 8002238:	4bac      	ldr	r3, [pc, #688]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 800223a:	ed93 7b00 	vldr	d7, [r3]
 800223e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002242:	4bab      	ldr	r3, [pc, #684]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0xf10>)
 8002244:	ed93 7b00 	vldr	d7, [r3]
 8002248:	ee36 7b07 	vadd.f64	d7, d6, d7
 800224c:	4ba9      	ldr	r3, [pc, #676]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0xf14>)
 800224e:	ed83 7b00 	vstr	d7, [r3]
		ut4 = up4 + ui4 + ud4;
 8002252:	4ba9      	ldr	r3, [pc, #676]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 8002254:	ed93 6b00 	vldr	d6, [r3]
 8002258:	4b9a      	ldr	r3, [pc, #616]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0xee4>)
 800225a:	ed93 7b00 	vldr	d7, [r3]
 800225e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002262:	4ba6      	ldr	r3, [pc, #664]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0xf1c>)
 8002264:	ed93 7b00 	vldr	d7, [r3]
 8002268:	ee36 7b07 	vadd.f64	d7, d6, d7
 800226c:	4ba4      	ldr	r3, [pc, #656]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0xf20>)
 800226e:	ed83 7b00 	vstr	d7, [r3]
		pulse1 = ut1 * 3200;
 8002272:	4b98      	ldr	r3, [pc, #608]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8002274:	ed93 7b00 	vldr	d7, [r3]
 8002278:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80024b8 <HAL_TIM_PeriodElapsedCallback+0xed8>
 800227c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002280:	4ba0      	ldr	r3, [pc, #640]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 8002282:	ed83 7b00 	vstr	d7, [r3]
		pulse2 = ut2 * 3200;
 8002286:	4b97      	ldr	r3, [pc, #604]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 8002288:	ed93 7b00 	vldr	d7, [r3]
 800228c:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 80024b8 <HAL_TIM_PeriodElapsedCallback+0xed8>
 8002290:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002294:	4b9c      	ldr	r3, [pc, #624]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 8002296:	ed83 7b00 	vstr	d7, [r3]
		pulse3 = ut3 * 3200;
 800229a:	4b96      	ldr	r3, [pc, #600]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0xf14>)
 800229c:	ed93 7b00 	vldr	d7, [r3]
 80022a0:	ed9f 6b85 	vldr	d6, [pc, #532]	; 80024b8 <HAL_TIM_PeriodElapsedCallback+0xed8>
 80022a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022a8:	4b98      	ldr	r3, [pc, #608]	; (800250c <HAL_TIM_PeriodElapsedCallback+0xf2c>)
 80022aa:	ed83 7b00 	vstr	d7, [r3]
		pulse4 = ut4 * 3200;
 80022ae:	4b94      	ldr	r3, [pc, #592]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0xf20>)
 80022b0:	ed93 7b00 	vldr	d7, [r3]
 80022b4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80024b8 <HAL_TIM_PeriodElapsedCallback+0xed8>
 80022b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022bc:	4b94      	ldr	r3, [pc, #592]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 80022be:	ed83 7b00 	vstr	d7, [r3]
		if (ut1 < 0){
 80022c2:	4b84      	ldr	r3, [pc, #528]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80022c4:	ed93 7b00 	vldr	d7, [r3]
 80022c8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d507      	bpl.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0xd02>
			pulse1 *= -1;
 80022d2:	4b8c      	ldr	r3, [pc, #560]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 80022d4:	ed93 7b00 	vldr	d7, [r3]
 80022d8:	eeb1 7b47 	vneg.f64	d7, d7
 80022dc:	4b89      	ldr	r3, [pc, #548]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 80022de:	ed83 7b00 	vstr	d7, [r3]
		}
		if (ut2 < 0){
 80022e2:	4b80      	ldr	r3, [pc, #512]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 80022e4:	ed93 7b00 	vldr	d7, [r3]
 80022e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80022ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f0:	d507      	bpl.n	8002302 <HAL_TIM_PeriodElapsedCallback+0xd22>
			pulse2 *= -1;
 80022f2:	4b85      	ldr	r3, [pc, #532]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 80022f4:	ed93 7b00 	vldr	d7, [r3]
 80022f8:	eeb1 7b47 	vneg.f64	d7, d7
 80022fc:	4b82      	ldr	r3, [pc, #520]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 80022fe:	ed83 7b00 	vstr	d7, [r3]
				}
		if (ut3 < 0){
 8002302:	4b7c      	ldr	r3, [pc, #496]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0xf14>)
 8002304:	ed93 7b00 	vldr	d7, [r3]
 8002308:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002310:	d507      	bpl.n	8002322 <HAL_TIM_PeriodElapsedCallback+0xd42>
			pulse3 *= -1;
 8002312:	4b7e      	ldr	r3, [pc, #504]	; (800250c <HAL_TIM_PeriodElapsedCallback+0xf2c>)
 8002314:	ed93 7b00 	vldr	d7, [r3]
 8002318:	eeb1 7b47 	vneg.f64	d7, d7
 800231c:	4b7b      	ldr	r3, [pc, #492]	; (800250c <HAL_TIM_PeriodElapsedCallback+0xf2c>)
 800231e:	ed83 7b00 	vstr	d7, [r3]
		}
		if (ut4 < 0){
 8002322:	4b77      	ldr	r3, [pc, #476]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0xf20>)
 8002324:	ed93 7b00 	vldr	d7, [r3]
 8002328:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	d507      	bpl.n	8002342 <HAL_TIM_PeriodElapsedCallback+0xd62>
			pulse4 *= -1;
 8002332:	4b77      	ldr	r3, [pc, #476]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 8002334:	ed93 7b00 	vldr	d7, [r3]
 8002338:	eeb1 7b47 	vneg.f64	d7, d7
 800233c:	4b74      	ldr	r3, [pc, #464]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 800233e:	ed83 7b00 	vstr	d7, [r3]
		}
		if(pulse1 > 3200) pulse1 = 3200;
 8002342:	4b70      	ldr	r3, [pc, #448]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 8002344:	ed93 7b00 	vldr	d7, [r3]
 8002348:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80024b8 <HAL_TIM_PeriodElapsedCallback+0xed8>
 800234c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	dd05      	ble.n	8002362 <HAL_TIM_PeriodElapsedCallback+0xd82>
 8002356:	496b      	ldr	r1, [pc, #428]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800235e:	e9c1 2300 	strd	r2, r3, [r1]
		if(pulse2 > 3200) pulse2 = 3200;
 8002362:	4b69      	ldr	r3, [pc, #420]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 8002364:	ed93 7b00 	vldr	d7, [r3]
 8002368:	ed9f 6b53 	vldr	d6, [pc, #332]	; 80024b8 <HAL_TIM_PeriodElapsedCallback+0xed8>
 800236c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	dd05      	ble.n	8002382 <HAL_TIM_PeriodElapsedCallback+0xda2>
 8002376:	4964      	ldr	r1, [pc, #400]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800237e:	e9c1 2300 	strd	r2, r3, [r1]
		if(pulse3 > 3200) pulse3 = 3200;
 8002382:	4b62      	ldr	r3, [pc, #392]	; (800250c <HAL_TIM_PeriodElapsedCallback+0xf2c>)
 8002384:	ed93 7b00 	vldr	d7, [r3]
 8002388:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80024b8 <HAL_TIM_PeriodElapsedCallback+0xed8>
 800238c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	dd05      	ble.n	80023a2 <HAL_TIM_PeriodElapsedCallback+0xdc2>
 8002396:	495d      	ldr	r1, [pc, #372]	; (800250c <HAL_TIM_PeriodElapsedCallback+0xf2c>)
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	4b5d      	ldr	r3, [pc, #372]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0xf34>)
 800239e:	e9c1 2300 	strd	r2, r3, [r1]
		if(pulse4 > 3200) pulse4 = 3200;
 80023a2:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 80023a4:	ed93 7b00 	vldr	d7, [r3]
 80023a8:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80024b8 <HAL_TIM_PeriodElapsedCallback+0xed8>
 80023ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	dd05      	ble.n	80023c2 <HAL_TIM_PeriodElapsedCallback+0xde2>
 80023b6:	4956      	ldr	r1, [pc, #344]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	4b55      	ldr	r3, [pc, #340]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0xf34>)
 80023be:	e9c1 2300 	strd	r2, r3, [r1]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pulse1);
 80023c2:	4b50      	ldr	r3, [pc, #320]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 80023c4:	ed93 7b00 	vldr	d7, [r3]
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023d0:	ee17 2a90 	vmov	r2, s15
 80023d4:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pulse2);
 80023d6:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 80023d8:	ed93 7b00 	vldr	d7, [r3]
 80023dc:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023e4:	ee17 2a90 	vmov	r2, s15
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, pulse3);
 80023ea:	4b48      	ldr	r3, [pc, #288]	; (800250c <HAL_TIM_PeriodElapsedCallback+0xf2c>)
 80023ec:	ed93 7b00 	vldr	d7, [r3]
 80023f0:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_TIM_PeriodElapsedCallback+0xf3c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023f8:	ee17 2a90 	vmov	r2, s15
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse4);
 80023fe:	4b44      	ldr	r3, [pc, #272]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 8002400:	ed93 7b00 	vldr	d7, [r3]
 8002404:	4b45      	ldr	r3, [pc, #276]	; (800251c <HAL_TIM_PeriodElapsedCallback+0xf3c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800240c:	ee17 2a90 	vmov	r2, s15
 8002410:	635a      	str	r2, [r3, #52]	; 0x34
		if (ut1 > 0){
 8002412:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8002414:	ed93 7b00 	vldr	d7, [r3]
 8002418:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	dd0c      	ble.n	800243c <HAL_TIM_PeriodElapsedCallback+0xe5c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002428:	483d      	ldr	r0, [pc, #244]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800242a:	f006 ff17 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800242e:	2200      	movs	r2, #0
 8002430:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002434:	483a      	ldr	r0, [pc, #232]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 8002436:	f006 ff11 	bl	800925c <HAL_GPIO_WritePin>
 800243a:	e028      	b.n	800248e <HAL_TIM_PeriodElapsedCallback+0xeae>
		}else if (ut1 < 0){
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 800243e:	ed93 7b00 	vldr	d7, [r3]
 8002442:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	d50c      	bpl.n	8002466 <HAL_TIM_PeriodElapsedCallback+0xe86>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002452:	4833      	ldr	r0, [pc, #204]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 8002454:	f006 ff02 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800245e:	4830      	ldr	r0, [pc, #192]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 8002460:	f006 fefc 	bl	800925c <HAL_GPIO_WritePin>
 8002464:	e013      	b.n	800248e <HAL_TIM_PeriodElapsedCallback+0xeae>
		}else if (ut1 == 0){
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8002468:	ed93 7b00 	vldr	d7, [r3]
 800246c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	d10b      	bne.n	800248e <HAL_TIM_PeriodElapsedCallback+0xeae>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002476:	2200      	movs	r2, #0
 8002478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800247c:	4828      	ldr	r0, [pc, #160]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800247e:	f006 feed 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002482:	2200      	movs	r2, #0
 8002484:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002488:	4825      	ldr	r0, [pc, #148]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800248a:	f006 fee7 	bl	800925c <HAL_GPIO_WritePin>
		}
		if (ut2 < 0){
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 8002490:	ed93 7b00 	vldr	d7, [r3]
 8002494:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	d544      	bpl.n	8002528 <HAL_TIM_PeriodElapsedCallback+0xf48>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 800249e:	2201      	movs	r2, #1
 80024a0:	2140      	movs	r1, #64	; 0x40
 80024a2:	4820      	ldr	r0, [pc, #128]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0xf44>)
 80024a4:	f006 feda 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ae:	481d      	ldr	r0, [pc, #116]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0xf44>)
 80024b0:	f006 fed4 	bl	800925c <HAL_GPIO_WritePin>
 80024b4:	e05f      	b.n	8002576 <HAL_TIM_PeriodElapsedCallback+0xf96>
 80024b6:	bf00      	nop
 80024b8:	00000000 	.word	0x00000000
 80024bc:	40a90000 	.word	0x40a90000
 80024c0:	24000628 	.word	0x24000628
 80024c4:	240005e8 	.word	0x240005e8
 80024c8:	240004d8 	.word	0x240004d8
 80024cc:	240004e0 	.word	0x240004e0
 80024d0:	240004e8 	.word	0x240004e8
 80024d4:	240004d0 	.word	0x240004d0
 80024d8:	24000530 	.word	0x24000530
 80024dc:	24000538 	.word	0x24000538
 80024e0:	24000540 	.word	0x24000540
 80024e4:	24000528 	.word	0x24000528
 80024e8:	24000588 	.word	0x24000588
 80024ec:	24000590 	.word	0x24000590
 80024f0:	24000598 	.word	0x24000598
 80024f4:	24000580 	.word	0x24000580
 80024f8:	240005e0 	.word	0x240005e0
 80024fc:	240005f0 	.word	0x240005f0
 8002500:	240005d8 	.word	0x240005d8
 8002504:	24000510 	.word	0x24000510
 8002508:	24000568 	.word	0x24000568
 800250c:	240005c0 	.word	0x240005c0
 8002510:	24000618 	.word	0x24000618
 8002514:	40a90000 	.word	0x40a90000
 8002518:	2400021c 	.word	0x2400021c
 800251c:	24000268 	.word	0x24000268
 8002520:	58020400 	.word	0x58020400
 8002524:	58021000 	.word	0x58021000
		}else if (ut2 > 0){
 8002528:	4b51      	ldr	r3, [pc, #324]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x1090>)
 800252a:	ed93 7b00 	vldr	d7, [r3]
 800252e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002536:	dd0b      	ble.n	8002550 <HAL_TIM_PeriodElapsedCallback+0xf70>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	2140      	movs	r1, #64	; 0x40
 800253c:	484d      	ldr	r0, [pc, #308]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 800253e:	f006 fe8d 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8002542:	2201      	movs	r2, #1
 8002544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002548:	484a      	ldr	r0, [pc, #296]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 800254a:	f006 fe87 	bl	800925c <HAL_GPIO_WritePin>
 800254e:	e012      	b.n	8002576 <HAL_TIM_PeriodElapsedCallback+0xf96>
		}else if (ut2 == 0){
 8002550:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x1090>)
 8002552:	ed93 7b00 	vldr	d7, [r3]
 8002556:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	d10a      	bne.n	8002576 <HAL_TIM_PeriodElapsedCallback+0xf96>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8002560:	2200      	movs	r2, #0
 8002562:	2140      	movs	r1, #64	; 0x40
 8002564:	4843      	ldr	r0, [pc, #268]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8002566:	f006 fe79 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002570:	4840      	ldr	r0, [pc, #256]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8002572:	f006 fe73 	bl	800925c <HAL_GPIO_WritePin>
		}
		if (ut3 > 0){
 8002576:	4b40      	ldr	r3, [pc, #256]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x1098>)
 8002578:	ed93 7b00 	vldr	d7, [r3]
 800257c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	dd0c      	ble.n	80025a0 <HAL_TIM_PeriodElapsedCallback+0xfc0>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800258c:	4839      	ldr	r0, [pc, #228]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 800258e:	f006 fe65 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002598:	4836      	ldr	r0, [pc, #216]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 800259a:	f006 fe5f 	bl	800925c <HAL_GPIO_WritePin>
 800259e:	e028      	b.n	80025f2 <HAL_TIM_PeriodElapsedCallback+0x1012>
		}else if (ut3 < 0){
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x1098>)
 80025a2:	ed93 7b00 	vldr	d7, [r3]
 80025a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	d50c      	bpl.n	80025ca <HAL_TIM_PeriodElapsedCallback+0xfea>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025b6:	482f      	ldr	r0, [pc, #188]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 80025b8:	f006 fe50 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80025bc:	2201      	movs	r2, #1
 80025be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025c2:	482c      	ldr	r0, [pc, #176]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 80025c4:	f006 fe4a 	bl	800925c <HAL_GPIO_WritePin>
 80025c8:	e013      	b.n	80025f2 <HAL_TIM_PeriodElapsedCallback+0x1012>
		}else if (ut3 == 0){
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x1098>)
 80025cc:	ed93 7b00 	vldr	d7, [r3]
 80025d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	d10b      	bne.n	80025f2 <HAL_TIM_PeriodElapsedCallback+0x1012>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80025da:	2200      	movs	r2, #0
 80025dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025e0:	4824      	ldr	r0, [pc, #144]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 80025e2:	f006 fe3b 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80025e6:	2200      	movs	r2, #0
 80025e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ec:	4821      	ldr	r0, [pc, #132]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 80025ee:	f006 fe35 	bl	800925c <HAL_GPIO_WritePin>
		}
		if (ut4 > 0){
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x109c>)
 80025f4:	ed93 7b00 	vldr	d7, [r3]
 80025f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	dd0b      	ble.n	800261a <HAL_TIM_PeriodElapsedCallback+0x103a>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8002602:	2201      	movs	r2, #1
 8002604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002608:	481a      	ldr	r0, [pc, #104]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 800260a:	f006 fe27 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800260e:	2200      	movs	r2, #0
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	4818      	ldr	r0, [pc, #96]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8002614:	f006 fe22 	bl	800925c <HAL_GPIO_WritePin>
		}else if (ut4 == 0){
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
		}
	}
}
 8002618:	e026      	b.n	8002668 <HAL_TIM_PeriodElapsedCallback+0x1088>
		}else if (ut4 < 0){
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x109c>)
 800261c:	ed93 7b00 	vldr	d7, [r3]
 8002620:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	d50b      	bpl.n	8002642 <HAL_TIM_PeriodElapsedCallback+0x1062>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800262a:	2200      	movs	r2, #0
 800262c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002630:	4810      	ldr	r0, [pc, #64]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8002632:	f006 fe13 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8002636:	2201      	movs	r2, #1
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	480e      	ldr	r0, [pc, #56]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 800263c:	f006 fe0e 	bl	800925c <HAL_GPIO_WritePin>
}
 8002640:	e012      	b.n	8002668 <HAL_TIM_PeriodElapsedCallback+0x1088>
		}else if (ut4 == 0){
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x109c>)
 8002644:	ed93 7b00 	vldr	d7, [r3]
 8002648:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	d10a      	bne.n	8002668 <HAL_TIM_PeriodElapsedCallback+0x1088>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8002652:	2200      	movs	r2, #0
 8002654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002658:	4806      	ldr	r0, [pc, #24]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 800265a:	f006 fdff 	bl	800925c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	4804      	ldr	r0, [pc, #16]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8002664:	f006 fdfa 	bl	800925c <HAL_GPIO_WritePin>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	24000528 	.word	0x24000528
 8002674:	58021000 	.word	0x58021000
 8002678:	24000580 	.word	0x24000580
 800267c:	240005d8 	.word	0x240005d8

08002680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
}
 8002686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002688:	e7fe      	b.n	8002688 <Error_Handler+0x8>

0800268a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <_ZN3ros3MsgC1Ev+0x1c>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	0800fa08 	.word	0x0800fa08

080026cc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
      data()
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ffe8 	bl	80026ac <_ZN3ros3MsgC1Ev>
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ffcf 	bl	800268a <_ZN3ros4TimeC1Ev>
    {
    }
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	0800f9f0 	.word	0x0800f9f0

080026fc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	4413      	add	r3, r2
 8002714:	b2ca      	uxtb	r2, r1
 8002716:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	0a19      	lsrs	r1, r3, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	4413      	add	r3, r2
 8002726:	b2ca      	uxtb	r2, r1
 8002728:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0c19      	lsrs	r1, r3, #16
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3302      	adds	r3, #2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	4413      	add	r3, r2
 8002738:	b2ca      	uxtb	r2, r1
 800273a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0e19      	lsrs	r1, r3, #24
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3303      	adds	r3, #3
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	b2ca      	uxtb	r2, r1
 800274c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3304      	adds	r3, #4
 8002752:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	4413      	add	r3, r2
 800275e:	b2ca      	uxtb	r2, r1
 8002760:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0a19      	lsrs	r1, r3, #8
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4413      	add	r3, r2
 8002770:	b2ca      	uxtb	r2, r1
 8002772:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	0c19      	lsrs	r1, r3, #16
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3302      	adds	r3, #2
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	b2ca      	uxtb	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0e19      	lsrs	r1, r3, #24
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3303      	adds	r3, #3
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	b2ca      	uxtb	r2, r1
 8002796:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3304      	adds	r3, #4
 800279c:	60fb      	str	r3, [r7, #12]
      return offset;
 800279e:	68fb      	ldr	r3, [r7, #12]
    }
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3301      	adds	r3, #1
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	440b      	add	r3, r1
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3302      	adds	r3, #2
 80027e6:	6839      	ldr	r1, [r7, #0]
 80027e8:	440b      	add	r3, r1
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	041b      	lsls	r3, r3, #16
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3303      	adds	r3, #3
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	440b      	add	r3, r1
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3304      	adds	r3, #4
 800280e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	4413      	add	r3, r2
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3301      	adds	r3, #1
 8002826:	6839      	ldr	r1, [r7, #0]
 8002828:	440b      	add	r3, r1
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3302      	adds	r3, #2
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	440b      	add	r3, r1
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3303      	adds	r3, #3
 8002852:	6839      	ldr	r1, [r7, #0]
 8002854:	440b      	add	r3, r1
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3304      	adds	r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
     return offset;
 8002866:	68fb      	ldr	r3, [r7, #12]
    }
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	0800f760 	.word	0x0800f760

08002890 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	0800f774 	.word	0x0800f774

080028ac <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fef8 	bl	80026ac <_ZN3ros3MsgC1Ev>
 80028bc:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	809a      	strh	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028d2:	60da      	str	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028d8:	611a      	str	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
    {
    }
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	0800f9d8 	.word	0x0800f9d8
 80028f0:	0800f798 	.word	0x0800f798

080028f4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8899      	ldrh	r1, [r3, #4]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	4413      	add	r3, r2
 800290c:	b2ca      	uxtb	r2, r1
 800290e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	889b      	ldrh	r3, [r3, #4]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	b299      	uxth	r1, r3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	3301      	adds	r3, #1
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	4413      	add	r3, r2
 8002920:	b2ca      	uxtb	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	3302      	adds	r3, #2
 8002928:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fcee 	bl	8000310 <strlen>
 8002934:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	4413      	add	r3, r2
 800293c:	69b9      	ldr	r1, [r7, #24]
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fd5c 	bl	80043fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	3304      	adds	r3, #4
 8002948:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	18d0      	adds	r0, r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4619      	mov	r1, r3
 8002958:	f00c fd5e 	bl	800f418 <memcpy>
      offset += length_topic_name;
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fcd1 	bl	8000310 <strlen>
 800296e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	4413      	add	r3, r2
 8002976:	6979      	ldr	r1, [r7, #20]
 8002978:	4618      	mov	r0, r3
 800297a:	f001 fd3f 	bl	80043fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3304      	adds	r3, #4
 8002982:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	18d0      	adds	r0, r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4619      	mov	r1, r3
 8002992:	f00c fd41 	bl	800f418 <memcpy>
      offset += length_message_type;
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	4413      	add	r3, r2
 800299c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fcb4 	bl	8000310 <strlen>
 80029a8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	6939      	ldr	r1, [r7, #16]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 fd22 	bl	80043fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	3304      	adds	r3, #4
 80029bc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	18d0      	adds	r0, r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4619      	mov	r1, r3
 80029cc:	f00c fd24 	bl	800f418 <memcpy>
      offset += length_md5sum;
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	b2ca      	uxtb	r2, r1
 80029e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	0a19      	lsrs	r1, r3, #8
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4413      	add	r3, r2
 80029f6:	b2ca      	uxtb	r2, r1
 80029f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	0c19      	lsrs	r1, r3, #16
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3302      	adds	r3, #2
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	b2ca      	uxtb	r2, r1
 8002a08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	0e19      	lsrs	r1, r3, #24
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3303      	adds	r3, #3
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	b2ca      	uxtb	r2, r1
 8002a18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002a20:	69fb      	ldr	r3, [r7, #28]
    }
 8002a22:	4618      	mov	r0, r3
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b08a      	sub	sp, #40	; 0x28
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	889b      	ldrh	r3, [r3, #4]
 8002a4a:	b21a      	sxth	r2, r3
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	440b      	add	r3, r1
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	b21b      	sxth	r3, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	3302      	adds	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	441a      	add	r2, r3
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fcde 	bl	8004438 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d20c      	bcs.n	8002aac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	441a      	add	r2, r3
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	6839      	ldr	r1, [r7, #0]
 8002a9e:	440b      	add	r3, r1
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aaa:	e7ec      	b.n	8002a86 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	441a      	add	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	4413      	add	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	441a      	add	r2, r3
 8002ad6:	f107 0310 	add.w	r3, r7, #16
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f001 fcab 	bl	8004438 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4413      	add	r3, r2
 8002af2:	6a3a      	ldr	r2, [r7, #32]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d20c      	bcs.n	8002b12 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	441a      	add	r2, r3
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	440b      	add	r3, r1
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	e7ec      	b.n	8002aec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	441a      	add	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	441a      	add	r2, r3
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f001 fc78 	bl	8004438 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d20c      	bcs.n	8002b78 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	441a      	add	r2, r3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	440b      	add	r3, r1
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	3301      	adds	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e7ec      	b.n	8002b52 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	441a      	add	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4413      	add	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	6839      	ldr	r1, [r7, #0]
 8002ba6:	440a      	add	r2, r1
 8002ba8:	7812      	ldrb	r2, [r2, #0]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	440b      	add	r3, r1
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	6839      	ldr	r1, [r7, #0]
 8002bc8:	440b      	add	r3, r1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	3303      	adds	r3, #3
 8002bd8:	6839      	ldr	r1, [r7, #0]
 8002bda:	440b      	add	r3, r1
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	3304      	adds	r3, #4
 8002bee:	61bb      	str	r3, [r7, #24]
     return offset;
 8002bf0:	69bb      	ldr	r3, [r7, #24]
    }
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	0800f79c 	.word	0x0800f79c

08002c18 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	0800f7b8 	.word	0x0800f7b8

08002c34 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fd34 	bl	80026ac <_ZN3ros3MsgC1Ev>
 8002c44:	4a06      	ldr	r2, [pc, #24]	; (8002c60 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	711a      	strb	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002c54:	609a      	str	r2, [r3, #8]
    {
    }
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	0800f9c0 	.word	0x0800f9c0
 8002c64:	0800f798 	.word	0x0800f798

08002c68 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	7912      	ldrb	r2, [r2, #4]
 8002c80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3301      	adds	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fb3f 	bl	8000310 <strlen>
 8002c92:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	4413      	add	r3, r2
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 fbad 	bl	80043fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	18d0      	adds	r0, r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f00c fbaf 	bl	800f418 <memcpy>
      offset += length_msg;
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    }
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	441a      	add	r2, r3
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 fb9d 	bl	8004438 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	3304      	adds	r3, #4
 8002d02:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d20c      	bcs.n	8002d2e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	441a      	add	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	6839      	ldr	r1, [r7, #0]
 8002d20:	440b      	add	r3, r1
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e7ec      	b.n	8002d08 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	3b01      	subs	r3, #1
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	4413      	add	r3, r2
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	441a      	add	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
     return offset;
 8002d52:	693b      	ldr	r3, [r7, #16]
    }
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	0800f7dc 	.word	0x0800f7dc

08002d78 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	0800f7f0 	.word	0x0800f7f0

08002d94 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fc84 	bl	80026ac <_ZN3ros3MsgC1Ev>
 8002da4:	4a0c      	ldr	r2, [pc, #48]	; (8002dd8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	619a      	str	r2, [r3, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	61da      	str	r2, [r3, #28]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	0800f9a8 	.word	0x0800f9a8

08002ddc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	b2ca      	uxtb	r2, r1
 8002df6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0a19      	lsrs	r1, r3, #8
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	3301      	adds	r3, #1
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	4413      	add	r3, r2
 8002e06:	b2ca      	uxtb	r2, r1
 8002e08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	0c19      	lsrs	r1, r3, #16
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	3302      	adds	r3, #2
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	b2ca      	uxtb	r2, r1
 8002e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	0e19      	lsrs	r1, r3, #24
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	3303      	adds	r3, #3
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	4413      	add	r3, r2
 8002e2a:	b2ca      	uxtb	r2, r1
 8002e2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	3304      	adds	r3, #4
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	6a3a      	ldr	r2, [r7, #32]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d22b      	bcs.n	8002e9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002e50:	6939      	ldr	r1, [r7, #16]
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	b2ca      	uxtb	r2, r1
 8002e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	0a19      	lsrs	r1, r3, #8
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	3301      	adds	r3, #1
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	b2ca      	uxtb	r2, r1
 8002e6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	0c19      	lsrs	r1, r3, #16
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	3302      	adds	r3, #2
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	b2ca      	uxtb	r2, r1
 8002e7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	0e19      	lsrs	r1, r3, #24
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	3303      	adds	r3, #3
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	b2ca      	uxtb	r2, r1
 8002e8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	3304      	adds	r3, #4
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	3301      	adds	r3, #1
 8002e96:	623b      	str	r3, [r7, #32]
 8002e98:	e7ce      	b.n	8002e38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6919      	ldr	r1, [r3, #16]
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b2ca      	uxtb	r2, r1
 8002ea6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	0a19      	lsrs	r1, r3, #8
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	b2ca      	uxtb	r2, r1
 8002eb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	0c19      	lsrs	r1, r3, #16
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	b2ca      	uxtb	r2, r1
 8002eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	0e19      	lsrs	r1, r3, #24
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	3303      	adds	r3, #3
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	4413      	add	r3, r2
 8002eda:	b2ca      	uxtb	r2, r1
 8002edc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d22b      	bcs.n	8002f4a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002f00:	68f9      	ldr	r1, [r7, #12]
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	b2ca      	uxtb	r2, r1
 8002f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	0a19      	lsrs	r1, r3, #8
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	3301      	adds	r3, #1
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	b2ca      	uxtb	r2, r1
 8002f1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	0c19      	lsrs	r1, r3, #16
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	3302      	adds	r3, #2
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	b2ca      	uxtb	r2, r1
 8002f2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	0e19      	lsrs	r1, r3, #24
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	3303      	adds	r3, #3
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	b2ca      	uxtb	r2, r1
 8002f3a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	3304      	adds	r3, #4
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3301      	adds	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	e7ce      	b.n	8002ee8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69d9      	ldr	r1, [r3, #28]
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	b2ca      	uxtb	r2, r1
 8002f56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	0a19      	lsrs	r1, r3, #8
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	3301      	adds	r3, #1
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	b2ca      	uxtb	r2, r1
 8002f68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	0c19      	lsrs	r1, r3, #16
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	3302      	adds	r3, #2
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	b2ca      	uxtb	r2, r1
 8002f7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	0e19      	lsrs	r1, r3, #24
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	3303      	adds	r3, #3
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	b2ca      	uxtb	r2, r1
 8002f8c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	3304      	adds	r3, #4
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002f94:	2300      	movs	r3, #0
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d228      	bcs.n	8002ff4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd f9ae 	bl	8000310 <strlen>
 8002fb4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	6979      	ldr	r1, [r7, #20]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 fa1c 	bl	80043fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	18d0      	adds	r0, r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f00c fa1a 	bl	800f418 <memcpy>
      offset += length_stringsi;
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	4413      	add	r3, r2
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	e7d1      	b.n	8002f98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3728      	adds	r7, #40	; 0x28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b08e      	sub	sp, #56	; 0x38
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	4413      	add	r3, r2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003018:	3301      	adds	r3, #1
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	4413      	add	r3, r2
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	6a3a      	ldr	r2, [r7, #32]
 8003024:	4313      	orrs	r3, r2
 8003026:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302a:	3302      	adds	r3, #2
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	4413      	add	r3, r2
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	4313      	orrs	r3, r2
 8003038:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	3303      	adds	r3, #3
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	4413      	add	r3, r2
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	6a3a      	ldr	r2, [r7, #32]
 8003048:	4313      	orrs	r3, r2
 800304a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	3304      	adds	r3, #4
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	6a3a      	ldr	r2, [r7, #32]
 8003058:	429a      	cmp	r2, r3
 800305a:	d90a      	bls.n	8003072 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f00c f9ec 	bl	800f444 <realloc>
 800306c:	4602      	mov	r2, r0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003078:	2300      	movs	r3, #0
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003082:	429a      	cmp	r2, r3
 8003084:	d236      	bcs.n	80030f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800308e:	6839      	ldr	r1, [r7, #0]
 8003090:	440a      	add	r2, r1
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309c:	3301      	adds	r3, #1
 800309e:	6839      	ldr	r1, [r7, #0]
 80030a0:	440b      	add	r3, r1
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	3302      	adds	r3, #2
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	440b      	add	r3, r1
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c0:	3303      	adds	r3, #3
 80030c2:	6839      	ldr	r1, [r7, #0]
 80030c4:	440b      	add	r3, r1
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	3304      	adds	r3, #4
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	3208      	adds	r2, #8
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	3301      	adds	r3, #1
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
 80030f2:	e7c3      	b.n	800307c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003100:	3301      	adds	r3, #1
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4413      	add	r3, r2
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	4313      	orrs	r3, r2
 800310e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	3302      	adds	r3, #2
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	4313      	orrs	r3, r2
 8003120:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003124:	3303      	adds	r3, #3
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	4413      	add	r3, r2
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	4313      	orrs	r3, r2
 8003132:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	3304      	adds	r3, #4
 8003138:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	429a      	cmp	r2, r3
 8003142:	d90a      	bls.n	800315a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699a      	ldr	r2, [r3, #24]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f00c f978 	bl	800f444 <realloc>
 8003154:	4602      	mov	r2, r0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003160:	2300      	movs	r3, #0
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316a:	429a      	cmp	r2, r3
 800316c:	d236      	bcs.n	80031dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003176:	6839      	ldr	r1, [r7, #0]
 8003178:	440a      	add	r2, r1
 800317a:	7812      	ldrb	r2, [r2, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003184:	3301      	adds	r3, #1
 8003186:	6839      	ldr	r1, [r7, #0]
 8003188:	440b      	add	r3, r1
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003196:	3302      	adds	r3, #2
 8003198:	6839      	ldr	r1, [r7, #0]
 800319a:	440b      	add	r3, r1
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a8:	3303      	adds	r3, #3
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	440b      	add	r3, r1
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	061b      	lsls	r3, r3, #24
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80031bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031be:	3304      	adds	r3, #4
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	3214      	adds	r2, #20
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	3301      	adds	r3, #1
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031da:	e7c3      	b.n	8003164 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80031e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e8:	3301      	adds	r3, #1
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	4413      	add	r3, r2
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80031f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fa:	3302      	adds	r3, #2
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	3303      	adds	r3, #3
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	4413      	add	r3, r2
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	3304      	adds	r3, #4
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	429a      	cmp	r2, r3
 800322a:	d90a      	bls.n	8003242 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f00c f904 	bl	800f444 <realloc>
 800323c:	4602      	mov	r2, r0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003248:	2300      	movs	r3, #0
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003252:	429a      	cmp	r2, r3
 8003254:	d23f      	bcs.n	80032d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	441a      	add	r2, r3
 800325c:	f107 030c 	add.w	r3, r7, #12
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f001 f8e8 	bl	8004438 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	3304      	adds	r3, #4
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327a:	429a      	cmp	r2, r3
 800327c:	d20c      	bcs.n	8003298 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	441a      	add	r2, r3
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	3b01      	subs	r3, #1
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	440b      	add	r3, r1
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	3301      	adds	r3, #1
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	e7ec      	b.n	8003272 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	3b01      	subs	r3, #1
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	4413      	add	r3, r2
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	3b01      	subs	r3, #1
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	441a      	add	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80032b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	3220      	adds	r2, #32
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	3301      	adds	r3, #1
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d4:	e7ba      	b.n	800324c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80032d8:	4618      	mov	r0, r3
 80032da:	3738      	adds	r7, #56	; 0x38
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	0800f8fc 	.word	0x0800f8fc

080032fc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	0800f814 	.word	0x0800f814

08003318 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	611a      	str	r2, [r3, #16]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
  }
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a42      	ldr	r2, [pc, #264]	; (800347c <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d068      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a40      	ldr	r2, [pc, #256]	; (8003480 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d061      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a3d      	ldr	r2, [pc, #244]	; (8003484 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d05a      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d053      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a38      	ldr	r2, [pc, #224]	; (800348c <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d04c      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a36      	ldr	r2, [pc, #216]	; (8003490 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d045      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a33      	ldr	r2, [pc, #204]	; (8003494 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d03e      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a31      	ldr	r2, [pc, #196]	; (8003498 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d037      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2e      	ldr	r2, [pc, #184]	; (800349c <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d030      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d029      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d022      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d01b      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a24      	ldr	r2, [pc, #144]	; (80034ac <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d014      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a22      	ldr	r2, [pc, #136]	; (80034b0 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00d      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d006      	beq.n	8003448 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d109      	bne.n	800345c <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345a:	e008      	b.n	800346e <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40020010 	.word	0x40020010
 8003480:	40020028 	.word	0x40020028
 8003484:	40020040 	.word	0x40020040
 8003488:	40020058 	.word	0x40020058
 800348c:	40020070 	.word	0x40020070
 8003490:	40020088 	.word	0x40020088
 8003494:	400200a0 	.word	0x400200a0
 8003498:	400200b8 	.word	0x400200b8
 800349c:	40020410 	.word	0x40020410
 80034a0:	40020428 	.word	0x40020428
 80034a4:	40020440 	.word	0x40020440
 80034a8:	40020458 	.word	0x40020458
 80034ac:	40020470 	.word	0x40020470
 80034b0:	40020488 	.word	0x40020488
 80034b4:	400204a0 	.word	0x400204a0
 80034b8:	400204b8 	.word	0x400204b8

080034bc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <_ZN13STM32HardwareC1Ev+0x34>)
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	2400034c 	.word	0x2400034c

080034f4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f804 	bl	800350a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351e:	4619      	mov	r1, r3
 8003520:	f009 fefc 	bl	800d31c <HAL_UART_Receive_DMA>
    }
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_ZN13STM32Hardware4readEv>:

    int read(){
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295
 8003538:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff0d 	bl	8003360 <_ZN13STM32Hardware10getRdmaIndEv>
 8003546:	4603      	mov	r3, r0
 8003548:	429c      	cmp	r4, r3
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d012      	beq.n	800357c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800355c:	1c59      	adds	r1, r3, #1
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	791b      	ldrb	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800357c:	68fb      	ldr	r3, [r7, #12]
    }
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bd90      	pop	{r4, r7, pc}
	...

08003588 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003598:	2b20      	cmp	r3, #32
 800359a:	d108      	bne.n	80035ae <_ZN13STM32Hardware5flushEv+0x26>
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <_ZN13STM32Hardware5flushEv+0xb4>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	f083 0301 	eor.w	r3, r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <_ZN13STM32Hardware5flushEv+0x26>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <_ZN13STM32Hardware5flushEv+0x28>
 80035ae:	2300      	movs	r3, #0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03f      	beq.n	8003634 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <_ZN13STM32Hardware5flushEv+0xb4>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d031      	beq.n	800362e <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d20a      	bcs.n	80035f0 <_ZN13STM32Hardware5flushEv+0x68>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	e006      	b.n	80035fe <_ZN13STM32Hardware5flushEv+0x76>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800360a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4413      	add	r3, r2
 8003612:	89fa      	ldrh	r2, [r7, #14]
 8003614:	4619      	mov	r1, r3
 8003616:	f009 fdef 	bl	800d1f8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003620:	89fb      	ldrh	r3, [r7, #14]
 8003622:	4413      	add	r3, r2
 8003624:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800362e:	4b03      	ldr	r3, [pc, #12]	; (800363c <_ZN13STM32Hardware5flushEv+0xb4>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
      }
    }
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	24000680 	.word	0x24000680

08003640 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
      int n = length;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003656:	bfa8      	it	ge
 8003658:	f44f 7300 	movge.w	r3, #512	; 0x200
 800365c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003664:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4293      	cmp	r3, r2
 800366c:	bf28      	it	cs
 800366e:	4613      	movcs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003678:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	4618      	mov	r0, r3
 8003686:	f00b fec7 	bl	800f418 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	4413      	add	r3, r2
 8003694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d00b      	beq.n	80036be <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	18d1      	adds	r1, r2, r3
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	f00b fead 	bl	800f418 <memcpy>
      }

      flush();
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff ff62 	bl	8003588 <_ZN13STM32Hardware5flushEv>
    }
 80036c4:	bf00      	nop
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	f002 f9da 	bl	8005a8c <HAL_GetTick>
 80036d8:	4603      	mov	r3, r0
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe ffdc 	bl	80026ac <_ZN3ros3MsgC1Ev>
 80036f4:	4a0e      	ldr	r2, [pc, #56]	; (8003730 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	0800f964 	.word	0x0800f964

08003734 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003734:	b480      	push	{r7}
 8003736:	b08b      	sub	sp, #44	; 0x2c
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003748:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800374c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003752:	6838      	ldr	r0, [r7, #0]
 8003754:	4401      	add	r1, r0
 8003756:	b2d3      	uxtb	r3, r2
 8003758:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800375a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	0a02      	lsrs	r2, r0, #8
 8003768:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800376c:	0a0b      	lsrs	r3, r1, #8
 800376e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003770:	3101      	adds	r1, #1
 8003772:	6838      	ldr	r0, [r7, #0]
 8003774:	4401      	add	r1, r0
 8003776:	b2d3      	uxtb	r3, r2
 8003778:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800377a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	0c02      	lsrs	r2, r0, #16
 8003788:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800378c:	0c0b      	lsrs	r3, r1, #16
 800378e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003790:	3102      	adds	r1, #2
 8003792:	6838      	ldr	r0, [r7, #0]
 8003794:	4401      	add	r1, r0
 8003796:	b2d3      	uxtb	r3, r2
 8003798:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800379a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	0e02      	lsrs	r2, r0, #24
 80037a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037ac:	0e0b      	lsrs	r3, r1, #24
 80037ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b0:	3103      	adds	r1, #3
 80037b2:	6838      	ldr	r0, [r7, #0]
 80037b4:	4401      	add	r1, r0
 80037b6:	b2d3      	uxtb	r3, r2
 80037b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80037ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	000a      	movs	r2, r1
 80037c8:	2300      	movs	r3, #0
 80037ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037cc:	3104      	adds	r1, #4
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	4401      	add	r1, r0
 80037d2:	b2d3      	uxtb	r3, r2
 80037d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80037d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	0a0a      	lsrs	r2, r1, #8
 80037e4:	2300      	movs	r3, #0
 80037e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e8:	3105      	adds	r1, #5
 80037ea:	6838      	ldr	r0, [r7, #0]
 80037ec:	4401      	add	r1, r0
 80037ee:	b2d3      	uxtb	r3, r2
 80037f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80037f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	0c0a      	lsrs	r2, r1, #16
 8003800:	2300      	movs	r3, #0
 8003802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003804:	3106      	adds	r1, #6
 8003806:	6838      	ldr	r0, [r7, #0]
 8003808:	4401      	add	r1, r0
 800380a:	b2d3      	uxtb	r3, r2
 800380c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800380e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	0e0a      	lsrs	r2, r1, #24
 800381c:	2300      	movs	r3, #0
 800381e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003820:	3107      	adds	r1, #7
 8003822:	6838      	ldr	r0, [r7, #0]
 8003824:	4401      	add	r1, r0
 8003826:	b2d3      	uxtb	r3, r2
 8003828:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	3308      	adds	r3, #8
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003836:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800383a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800383e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003840:	6838      	ldr	r0, [r7, #0]
 8003842:	4401      	add	r1, r0
 8003844:	b2d3      	uxtb	r3, r2
 8003846:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003848:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	0a02      	lsrs	r2, r0, #8
 8003856:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800385a:	0a0b      	lsrs	r3, r1, #8
 800385c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800385e:	3101      	adds	r1, #1
 8003860:	6838      	ldr	r0, [r7, #0]
 8003862:	4401      	add	r1, r0
 8003864:	b2d3      	uxtb	r3, r2
 8003866:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003868:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	0c02      	lsrs	r2, r0, #16
 8003876:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800387a:	0c0b      	lsrs	r3, r1, #16
 800387c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800387e:	3102      	adds	r1, #2
 8003880:	6838      	ldr	r0, [r7, #0]
 8003882:	4401      	add	r1, r0
 8003884:	b2d3      	uxtb	r3, r2
 8003886:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003888:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	0e02      	lsrs	r2, r0, #24
 8003896:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800389a:	0e0b      	lsrs	r3, r1, #24
 800389c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800389e:	3103      	adds	r1, #3
 80038a0:	6838      	ldr	r0, [r7, #0]
 80038a2:	4401      	add	r1, r0
 80038a4:	b2d3      	uxtb	r3, r2
 80038a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80038a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	000a      	movs	r2, r1
 80038b6:	2300      	movs	r3, #0
 80038b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ba:	3104      	adds	r1, #4
 80038bc:	6838      	ldr	r0, [r7, #0]
 80038be:	4401      	add	r1, r0
 80038c0:	b2d3      	uxtb	r3, r2
 80038c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80038c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	0a0a      	lsrs	r2, r1, #8
 80038d2:	2300      	movs	r3, #0
 80038d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d6:	3105      	adds	r1, #5
 80038d8:	6838      	ldr	r0, [r7, #0]
 80038da:	4401      	add	r1, r0
 80038dc:	b2d3      	uxtb	r3, r2
 80038de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80038e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	0c0a      	lsrs	r2, r1, #16
 80038ee:	2300      	movs	r3, #0
 80038f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f2:	3106      	adds	r1, #6
 80038f4:	6838      	ldr	r0, [r7, #0]
 80038f6:	4401      	add	r1, r0
 80038f8:	b2d3      	uxtb	r3, r2
 80038fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80038fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	0e0a      	lsrs	r2, r1, #24
 800390a:	2300      	movs	r3, #0
 800390c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800390e:	3107      	adds	r1, #7
 8003910:	6838      	ldr	r0, [r7, #0]
 8003912:	4401      	add	r1, r0
 8003914:	b2d3      	uxtb	r3, r2
 8003916:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	3308      	adds	r3, #8
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003924:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800392c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800392e:	6838      	ldr	r0, [r7, #0]
 8003930:	4401      	add	r1, r0
 8003932:	b2d3      	uxtb	r3, r2
 8003934:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	0a02      	lsrs	r2, r0, #8
 8003944:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003948:	0a0b      	lsrs	r3, r1, #8
 800394a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800394c:	3101      	adds	r1, #1
 800394e:	6838      	ldr	r0, [r7, #0]
 8003950:	4401      	add	r1, r0
 8003952:	b2d3      	uxtb	r3, r2
 8003954:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003956:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	0c02      	lsrs	r2, r0, #16
 8003964:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003968:	0c0b      	lsrs	r3, r1, #16
 800396a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800396c:	3102      	adds	r1, #2
 800396e:	6838      	ldr	r0, [r7, #0]
 8003970:	4401      	add	r1, r0
 8003972:	b2d3      	uxtb	r3, r2
 8003974:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	0e02      	lsrs	r2, r0, #24
 8003984:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003988:	0e0b      	lsrs	r3, r1, #24
 800398a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800398c:	3103      	adds	r1, #3
 800398e:	6838      	ldr	r0, [r7, #0]
 8003990:	4401      	add	r1, r0
 8003992:	b2d3      	uxtb	r3, r2
 8003994:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003996:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	000a      	movs	r2, r1
 80039a4:	2300      	movs	r3, #0
 80039a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039a8:	3104      	adds	r1, #4
 80039aa:	6838      	ldr	r0, [r7, #0]
 80039ac:	4401      	add	r1, r0
 80039ae:	b2d3      	uxtb	r3, r2
 80039b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80039b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	0a0a      	lsrs	r2, r1, #8
 80039c0:	2300      	movs	r3, #0
 80039c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c4:	3105      	adds	r1, #5
 80039c6:	6838      	ldr	r0, [r7, #0]
 80039c8:	4401      	add	r1, r0
 80039ca:	b2d3      	uxtb	r3, r2
 80039cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80039ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	0c0a      	lsrs	r2, r1, #16
 80039dc:	2300      	movs	r3, #0
 80039de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039e0:	3106      	adds	r1, #6
 80039e2:	6838      	ldr	r0, [r7, #0]
 80039e4:	4401      	add	r1, r0
 80039e6:	b2d3      	uxtb	r3, r2
 80039e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80039ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	0e0a      	lsrs	r2, r1, #24
 80039f8:	2300      	movs	r3, #0
 80039fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039fc:	3107      	adds	r1, #7
 80039fe:	6838      	ldr	r0, [r7, #0]
 8003a00:	4401      	add	r1, r0
 8003a02:	b2d3      	uxtb	r3, r2
 8003a04:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	3308      	adds	r3, #8
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003a0e:	4618      	mov	r0, r3
 8003a10:	372c      	adds	r7, #44	; 0x2c
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a1a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003a1e:	b0eb      	sub	sp, #428	; 0x1ac
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8003a26:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a3c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a40:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a44:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a48:	4413      	add	r3, r2
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2200      	movs	r2, #0
 8003a50:	461c      	mov	r4, r3
 8003a52:	4615      	mov	r5, r2
 8003a54:	ea40 0804 	orr.w	r8, r0, r4
 8003a58:	ea41 0905 	orr.w	r9, r1, r5
 8003a5c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a60:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a6e:	4413      	add	r3, r2
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	469a      	mov	sl, r3
 8003a78:	4693      	mov	fp, r2
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003a86:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003a8a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003a8e:	ea40 0402 	orr.w	r4, r0, r2
 8003a92:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003a96:	430b      	orrs	r3, r1
 8003a98:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003a9c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003aa0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003aa4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003aa8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ab2:	4413      	add	r3, r2
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003abe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003ace:	464c      	mov	r4, r9
 8003ad0:	0423      	lsls	r3, r4, #16
 8003ad2:	4644      	mov	r4, r8
 8003ad4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003ad8:	4644      	mov	r4, r8
 8003ada:	0422      	lsls	r2, r4, #16
 8003adc:	ea40 0402 	orr.w	r4, r0, r2
 8003ae0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003aea:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003aee:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003af2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003af6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003afa:	1cda      	adds	r2, r3, #3
 8003afc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b00:	4413      	add	r3, r2
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003b0c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003b10:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003b14:	4623      	mov	r3, r4
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003b1c:	4623      	mov	r3, r4
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003b24:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003b28:	4623      	mov	r3, r4
 8003b2a:	4303      	orrs	r3, r0
 8003b2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003b30:	462b      	mov	r3, r5
 8003b32:	430b      	orrs	r3, r1
 8003b34:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003b38:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003b3c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b40:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b48:	1d1a      	adds	r2, r3, #4
 8003b4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b4e:	4413      	add	r3, r2
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003b5a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003b6a:	0023      	movs	r3, r4
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	ea40 0402 	orr.w	r4, r0, r2
 8003b72:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003b76:	430b      	orrs	r3, r1
 8003b78:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003b7c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003b80:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b84:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b8c:	1d5a      	adds	r2, r3, #5
 8003b8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b92:	4413      	add	r3, r2
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003b9e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003bae:	0223      	lsls	r3, r4, #8
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	ea40 0402 	orr.w	r4, r0, r2
 8003bb6:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003bc0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003bc4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003bc8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003bcc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bd0:	1d9a      	adds	r2, r3, #6
 8003bd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003be2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003bf2:	0423      	lsls	r3, r4, #16
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	ea40 0402 	orr.w	r4, r0, r2
 8003bfa:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c04:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003c08:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c0c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003c10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c14:	1dda      	adds	r2, r3, #7
 8003c16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c1a:	4413      	add	r3, r2
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003c26:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003c36:	0623      	lsls	r3, r4, #24
 8003c38:	2200      	movs	r2, #0
 8003c3a:	ea40 0402 	orr.w	r4, r0, r2
 8003c3e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003c42:	430b      	orrs	r3, r1
 8003c44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003c48:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003c4c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003c50:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003c54:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003c58:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003c5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c60:	3308      	adds	r3, #8
 8003c62:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c72:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c76:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003c7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c7e:	4413      	add	r3, r2
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003c8a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003c8e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003c92:	4623      	mov	r3, r4
 8003c94:	4303      	orrs	r3, r0
 8003c96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c9a:	462b      	mov	r3, r5
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ca2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003ca6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003caa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003cae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cb8:	4413      	add	r3, r2
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cc4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003cd4:	464c      	mov	r4, r9
 8003cd6:	0223      	lsls	r3, r4, #8
 8003cd8:	4644      	mov	r4, r8
 8003cda:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cde:	4644      	mov	r4, r8
 8003ce0:	0222      	lsls	r2, r4, #8
 8003ce2:	ea40 0402 	orr.w	r4, r0, r2
 8003ce6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003cea:	430b      	orrs	r3, r1
 8003cec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003cf0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003cf4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003cf8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003cfc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d00:	1c9a      	adds	r2, r3, #2
 8003d02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003d22:	464c      	mov	r4, r9
 8003d24:	0423      	lsls	r3, r4, #16
 8003d26:	4644      	mov	r4, r8
 8003d28:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003d2c:	4644      	mov	r4, r8
 8003d2e:	0422      	lsls	r2, r4, #16
 8003d30:	ea40 0402 	orr.w	r4, r0, r2
 8003d34:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d3e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003d42:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d46:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d4e:	1cda      	adds	r2, r3, #3
 8003d50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d54:	4413      	add	r3, r2
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d60:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d64:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003d68:	4623      	mov	r3, r4
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d70:	4623      	mov	r3, r4
 8003d72:	061b      	lsls	r3, r3, #24
 8003d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d78:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003d7c:	4623      	mov	r3, r4
 8003d7e:	4303      	orrs	r3, r0
 8003d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d84:	462b      	mov	r3, r5
 8003d86:	430b      	orrs	r3, r1
 8003d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d8c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003d90:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d94:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d9c:	1d1a      	adds	r2, r3, #4
 8003d9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003da2:	4413      	add	r3, r2
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dae:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003dbe:	0023      	movs	r3, r4
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	ea40 0402 	orr.w	r4, r0, r2
 8003dc6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003dd0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003dd4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003dd8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ddc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003de0:	1d5a      	adds	r2, r3, #5
 8003de2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003de6:	4413      	add	r3, r2
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003df2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003e02:	0223      	lsls	r3, r4, #8
 8003e04:	2200      	movs	r2, #0
 8003e06:	ea40 0402 	orr.w	r4, r0, r2
 8003e0a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e14:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003e18:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e1c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003e20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e24:	1d9a      	adds	r2, r3, #6
 8003e26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e2a:	4413      	add	r3, r2
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003e46:	0423      	lsls	r3, r4, #16
 8003e48:	2200      	movs	r2, #0
 8003e4a:	ea40 0402 	orr.w	r4, r0, r2
 8003e4e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003e52:	430b      	orrs	r3, r1
 8003e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e58:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003e5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e60:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003e64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e68:	1dda      	adds	r2, r3, #7
 8003e6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003e8a:	0623      	lsls	r3, r4, #24
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	ea40 0402 	orr.w	r4, r0, r2
 8003e92:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003e96:	430b      	orrs	r3, r1
 8003e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e9c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003ea0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003ea4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ea8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003eac:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003eb0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ec6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003eca:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003ece:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ede:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ee2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	4303      	orrs	r3, r0
 8003eea:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eec:	462b      	mov	r3, r5
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ef2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003ef6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003efa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003efe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f08:	4413      	add	r3, r2
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2200      	movs	r2, #0
 8003f10:	673b      	str	r3, [r7, #112]	; 0x70
 8003f12:	677a      	str	r2, [r7, #116]	; 0x74
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f20:	464c      	mov	r4, r9
 8003f22:	0223      	lsls	r3, r4, #8
 8003f24:	4644      	mov	r4, r8
 8003f26:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f2a:	4644      	mov	r4, r8
 8003f2c:	0222      	lsls	r2, r4, #8
 8003f2e:	ea40 0402 	orr.w	r4, r0, r2
 8003f32:	66bc      	str	r4, [r7, #104]	; 0x68
 8003f34:	430b      	orrs	r3, r1
 8003f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f38:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003f3c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f40:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003f44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f48:	1c9a      	adds	r2, r3, #2
 8003f4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f4e:	4413      	add	r3, r2
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2200      	movs	r2, #0
 8003f56:	663b      	str	r3, [r7, #96]	; 0x60
 8003f58:	667a      	str	r2, [r7, #100]	; 0x64
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f66:	464c      	mov	r4, r9
 8003f68:	0423      	lsls	r3, r4, #16
 8003f6a:	4644      	mov	r4, r8
 8003f6c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003f70:	4644      	mov	r4, r8
 8003f72:	0422      	lsls	r2, r4, #16
 8003f74:	ea40 0402 	orr.w	r4, r0, r2
 8003f78:	65bc      	str	r4, [r7, #88]	; 0x58
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f7e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003f82:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f86:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003f8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f8e:	1cda      	adds	r2, r3, #3
 8003f90:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f94:	4413      	add	r3, r2
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f9e:	657a      	str	r2, [r7, #84]	; 0x54
 8003fa0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003fa4:	4623      	mov	r3, r4
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003faa:	4623      	mov	r3, r4
 8003fac:	061b      	lsls	r3, r3, #24
 8003fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fb0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	4303      	orrs	r3, r0
 8003fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8003fba:	462b      	mov	r3, r5
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003fc4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003fc8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003fcc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003fd6:	4413      	add	r3, r2
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2200      	movs	r2, #0
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003fec:	0023      	movs	r3, r4
 8003fee:	2200      	movs	r2, #0
 8003ff0:	ea40 0402 	orr.w	r4, r0, r2
 8003ff4:	633c      	str	r4, [r7, #48]	; 0x30
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003ffe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004002:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004006:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800400a:	1d5a      	adds	r2, r3, #5
 800400c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004010:	4413      	add	r3, r2
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2200      	movs	r2, #0
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
 800401a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8004026:	0223      	lsls	r3, r4, #8
 8004028:	2200      	movs	r2, #0
 800402a:	ea40 0402 	orr.w	r4, r0, r2
 800402e:	623c      	str	r4, [r7, #32]
 8004030:	430b      	orrs	r3, r1
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
 8004034:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004038:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800403c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004040:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004044:	3306      	adds	r3, #6
 8004046:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800404a:	4413      	add	r3, r2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2200      	movs	r2, #0
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	61fa      	str	r2, [r7, #28]
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	69bc      	ldr	r4, [r7, #24]
 8004060:	0423      	lsls	r3, r4, #16
 8004062:	2200      	movs	r2, #0
 8004064:	ea40 0402 	orr.w	r4, r0, r2
 8004068:	613c      	str	r4, [r7, #16]
 800406a:	430b      	orrs	r3, r1
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004072:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004076:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800407a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800407e:	3307      	adds	r3, #7
 8004080:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8004084:	4413      	add	r3, r2
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2200      	movs	r2, #0
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	60fa      	str	r2, [r7, #12]
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	68bc      	ldr	r4, [r7, #8]
 800409a:	0623      	lsls	r3, r4, #24
 800409c:	2200      	movs	r2, #0
 800409e:	ea40 0402 	orr.w	r4, r0, r2
 80040a2:	603c      	str	r4, [r7, #0]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80040ac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80040b0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80040b4:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80040b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80040bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80040c0:	3308      	adds	r3, #8
 80040c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80040c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80040ca:	4618      	mov	r0, r3
 80040cc:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80040d0:	46bd      	mov	sp, r7
 80040d2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80040d6:	4770      	bx	lr

080040d8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	0800f838 	.word	0x0800f838

080040f4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	0800f850 	.word	0x0800f850

08004110 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fac6 	bl	80026ac <_ZN3ros3MsgC1Ev>
 8004120:	4a08      	ldr	r2, [pc, #32]	; (8004144 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3308      	adds	r3, #8
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fada 	bl	80036e4 <_ZN13geometry_msgs7Vector3C1Ev>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3328      	adds	r3, #40	; 0x28
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fad5 	bl	80036e4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	0800f94c 	.word	0x0800f94c

08004148 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f103 0008 	add.w	r0, r3, #8
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	4413      	add	r3, r2
 8004162:	4619      	mov	r1, r3
 8004164:	f7ff fae6 	bl	8003734 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4413      	add	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	4413      	add	r3, r2
 800417c:	4619      	mov	r1, r3
 800417e:	f7ff fad9 	bl	8003734 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004182:	4602      	mov	r2, r0
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
      return offset;
 800418a:	68fb      	ldr	r3, [r7, #12]
    }
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f103 0008 	add.w	r0, r3, #8
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	4413      	add	r3, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	f7ff fc33 	bl	8003a1a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	4413      	add	r3, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	f7ff fc26 	bl	8003a1a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
     return offset;
 80041d6:	68fb      	ldr	r3, [r7, #12]
    }
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	0800f874 	.word	0x0800f874

080041fc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	0800f888 	.word	0x0800f888

08004218 <_Z8callbackRKN13geometry_msgs5TwistE>:
				/ (4 * resolution * reduction_ratio) * frequency;
}


void callback(const geometry_msgs::Twist &msg)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004226:	490a      	ldr	r1, [pc, #40]	; (8004250 <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 8004228:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004232:	4908      	ldr	r1, [pc, #32]	; (8004254 <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 8004234:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800423e:	4906      	ldr	r1, [pc, #24]	; (8004258 <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 8004240:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	24000688 	.word	0x24000688
 8004254:	24000690 	.word	0x24000690
 8004258:	24000698 	.word	0x24000698

0800425c <_Z13Error_Handlerv>:
ros::Publisher pub("/ins_vel", &insVel);
//	std_msgs

/* UART Communication */
void Error_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004260:	b672      	cpsid	i
}
 8004262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004264:	e7fe      	b.n	8004264 <_Z13Error_Handlerv+0x8>
	...

08004268 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 800426c:	4b2c      	ldr	r3, [pc, #176]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800426e:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <_ZL20MX_USART10_UART_Initv+0xbc>)
 8004270:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8004272:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004278:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800427a:	4b29      	ldr	r3, [pc, #164]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800427c:	2200      	movs	r2, #0
 800427e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8004280:	4b27      	ldr	r3, [pc, #156]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004282:	2200      	movs	r2, #0
 8004284:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8004286:	4b26      	ldr	r3, [pc, #152]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004288:	2200      	movs	r2, #0
 800428a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 800428c:	4b24      	ldr	r3, [pc, #144]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800428e:	220c      	movs	r2, #12
 8004290:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004292:	4b23      	ldr	r3, [pc, #140]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004294:	2200      	movs	r2, #0
 8004296:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8004298:	4b21      	ldr	r3, [pc, #132]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800429a:	2200      	movs	r2, #0
 800429c:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800429e:	4b20      	ldr	r3, [pc, #128]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80042a4:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80042b0:	481b      	ldr	r0, [pc, #108]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80042b2:	f008 ff15 	bl	800d0e0 <HAL_UART_Init>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 80042c6:	f7ff ffc9 	bl	800425c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042ca:	2100      	movs	r1, #0
 80042cc:	4814      	ldr	r0, [pc, #80]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80042ce:	f00a ff93 	bl	800f1f8 <HAL_UARTEx_SetTxFifoThreshold>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 80042e2:	f7ff ffbb 	bl	800425c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042e6:	2100      	movs	r1, #0
 80042e8:	480d      	ldr	r0, [pc, #52]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80042ea:	f00a ffc3 	bl	800f274 <HAL_UARTEx_SetRxFifoThreshold>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 80042fe:	f7ff ffad 	bl	800425c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8004302:	4807      	ldr	r0, [pc, #28]	; (8004320 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8004304:	f00a ff3f 	bl	800f186 <HAL_UARTEx_DisableFifoMode>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 8004318:	f7ff ffa0 	bl	800425c <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}
 8004320:	2400034c 	.word	0x2400034c
 8004324:	40011c00 	.word	0x40011c00

08004328 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a14      	ldr	r2, [pc, #80]	; (8004384 <HAL_UART_ErrorCallback+0x5c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d120      	bne.n	800437a <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 8004338:	4913      	ldr	r1, [pc, #76]	; (8004388 <HAL_UART_ErrorCallback+0x60>)
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 8004346:	4911      	ldr	r1, [pc, #68]	; (800438c <HAL_UART_ErrorCallback+0x64>)
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 8004354:	490e      	ldr	r1, [pc, #56]	; (8004390 <HAL_UART_ErrorCallback+0x68>)
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 8004362:	4808      	ldr	r0, [pc, #32]	; (8004384 <HAL_UART_ErrorCallback+0x5c>)
 8004364:	f008 ff0c 	bl	800d180 <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 8004368:	f7ff ff7e 	bl	8004268 <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 800436c:	4809      	ldr	r0, [pc, #36]	; (8004394 <HAL_UART_ErrorCallback+0x6c>)
 800436e:	f000 f94d 	bl	800460c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004372:	4603      	mov	r3, r0
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff f8bd 	bl	80034f4 <_ZN13STM32Hardware4initEv>
    }
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	2400034c 	.word	0x2400034c
 8004388:	24000688 	.word	0x24000688
 800438c:	24000690 	.word	0x24000690
 8004390:	24000698 	.word	0x24000698
 8004394:	24000700 	.word	0x24000700

08004398 <HAL_UART_RxCpltCallback>:
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
//{
//    nh.getHardware()->flush();
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 80043a0:	4805      	ldr	r0, [pc, #20]	; (80043b8 <HAL_UART_RxCpltCallback+0x20>)
 80043a2:	f000 f933 	bl	800460c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff f8ae 	bl	800350a <_ZN13STM32Hardware10reset_rbufEv>
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	24000700 	.word	0x24000700

080043bc <setup>:
void setup(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
    nh.initNode();
 80043c0:	4806      	ldr	r0, [pc, #24]	; (80043dc <setup+0x20>)
 80043c2:	f000 f92f 	bl	8004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 80043c6:	4906      	ldr	r1, [pc, #24]	; (80043e0 <setup+0x24>)
 80043c8:	4804      	ldr	r0, [pc, #16]	; (80043dc <setup+0x20>)
 80043ca:	f000 f948 	bl	800465e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 80043ce:	4905      	ldr	r1, [pc, #20]	; (80043e4 <setup+0x28>)
 80043d0:	4802      	ldr	r0, [pc, #8]	; (80043dc <setup+0x20>)
 80043d2:	f000 f96f 	bl	80046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	24000700 	.word	0x24000700
 80043e0:	24001040 	.word	0x24001040
 80043e4:	240010a0 	.word	0x240010a0

080043e8 <loop>:
void loop(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80043ec:	4802      	ldr	r0, [pc, #8]	; (80043f8 <loop+0x10>)
 80043ee:	f000 f991 	bl	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	24000700 	.word	0x24000700

080043fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b03      	cmp	r3, #3
 800440e:	d80d      	bhi.n	800442c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	fa22 f103 	lsr.w	r1, r2, r3
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	b2ca      	uxtb	r2, r1
 8004422:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3301      	adds	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e7ee      	b.n	800440a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b03      	cmp	r3, #3
 8004450:	d811      	bhi.n	8004476 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6839      	ldr	r1, [r7, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	440a      	add	r2, r1
 800445c:	7812      	ldrb	r2, [r2, #0]
 800445e:	4611      	mov	r1, r2
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	00d2      	lsls	r2, r2, #3
 8004464:	fa01 f202 	lsl.w	r2, r1, r2
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e7ea      	b.n	800444c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	0800f994 	.word	0x0800f994

080044a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff ffe8 	bl	8004484 <_ZN3ros15NodeHandleBase_C1Ev>
 80044b4:	4a3a      	ldr	r2, [pc, #232]	; (80045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fffc 	bl	80034bc <_ZN13STM32HardwareC1Ev>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fc5e 	bl	8002d94 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b18      	cmp	r3, #24
 80044e0:	d80b      	bhi.n	80044fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	2200      	movs	r2, #0
 80044f0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	3301      	adds	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e7f0      	b.n	80044dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b18      	cmp	r3, #24
 8004502:	d80a      	bhi.n	800451a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	f202 2222 	addw	r2, r2, #546	; 0x222
 800450c:	2100      	movs	r1, #0
 800450e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	3301      	adds	r3, #1
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	e7f1      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	d20a      	bcs.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e7f0      	b.n	800451e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800453c:	2300      	movs	r3, #0
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004546:	d20a      	bcs.n	800455e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4413      	add	r3, r2
 800454e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3301      	adds	r3, #1
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	e7f0      	b.n	8004540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	0800f938 	.word	0x0800f938

080045a4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	0800f97c 	.word	0x0800f97c

080045c4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ffe5 	bl	80045a4 <_ZN3ros11Subscriber_C1Ev>
 80045da:	4a0b      	ldr	r2, [pc, #44]	; (8004608 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3310      	adds	r3, #16
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fd93 	bl	8004110 <_ZN13geometry_msgs5TwistC1Ev>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	659a      	str	r2, [r3, #88]	; 0x58
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	609a      	str	r2, [r3, #8]
  };
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	0800f920 	.word	0x0800f920

0800460c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
  }
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe ff5f 	bl	80034f4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b18      	cmp	r3, #24
 8004670:	dc19      	bgt.n	80046a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	f202 2222 	addw	r2, r2, #546	; 0x222
 800467a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f202 2222 	addw	r2, r2, #546	; 0x222
 800468c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	605a      	str	r2, [r3, #4]
        return true;
 800469a:	2301      	movs	r3, #1
 800469c:	e004      	b.n	80046a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e7e2      	b.n	800466c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80046a6:	2300      	movs	r3, #0
  }
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b18      	cmp	r3, #24
 80046c6:	dc1e      	bgt.n	8004706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d111      	bne.n	80046fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	60da      	str	r2, [r3, #12]
        return true;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e004      	b.n	8004708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3301      	adds	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e7dd      	b.n	80046c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8004706:	2300      	movs	r3, #0
  }
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe ffd3 	bl	80036cc <_ZN13STM32Hardware4timeEv>
 8004726:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004736:	4293      	cmp	r3, r2
 8004738:	d903      	bls.n	8004742 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004748:	2b00      	cmp	r3, #0
 800474a:	d009      	beq.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	429a      	cmp	r2, r3
 8004756:	d903      	bls.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004766:	2b00      	cmp	r3, #0
 8004768:	d014      	beq.n	8004794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe ffac 	bl	80036cc <_ZN13STM32Hardware4timeEv>
 8004774:	4602      	mov	r2, r0
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1ad2      	subs	r2, r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004780:	429a      	cmp	r2, r3
 8004782:	bf8c      	ite	hi
 8004784:	2301      	movhi	r3, #1
 8004786:	2300      	movls	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800478e:	f06f 0301 	mvn.w	r3, #1
 8004792:	e194      	b.n	8004abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe fec7 	bl	800352c <_ZN13STM32Hardware4readEv>
 800479e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f2c0 8174 	blt.w	8004a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	441a      	add	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047be:	2b07      	cmp	r3, #7
 80047c0:	d11e      	bne.n	8004800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80047c8:	1c59      	adds	r1, r3, #1
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	b2d1      	uxtb	r1, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	460a      	mov	r2, r1
 80047da:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80047e4:	1e5a      	subs	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1b4      	bne.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2208      	movs	r2, #8
 80047fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80047fe:	e7af      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004806:	2b00      	cmp	r3, #0
 8004808:	d128      	bne.n	800485c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2bff      	cmp	r3, #255	; 0xff
 800480e:	d10d      	bne.n	800482c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f103 0214 	add.w	r2, r3, #20
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800482a:	e799      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4618      	mov	r0, r3
 8004832:	f7fe ff4b 	bl	80036cc <_ZN13STM32Hardware4timeEv>
 8004836:	4602      	mov	r2, r0
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004840:	4293      	cmp	r3, r2
 8004842:	bf8c      	ite	hi
 8004844:	2301      	movhi	r3, #1
 8004846:	2300      	movls	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d088      	beq.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8004856:	f06f 0301 	mvn.w	r3, #1
 800485a:	e130      	b.n	8004abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004862:	2b01      	cmp	r3, #1
 8004864:	d118      	bne.n	8004898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2bfe      	cmp	r3, #254	; 0xfe
 800486a:	d107      	bne.n	800487c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800487a:	e771      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800488a:	2b00      	cmp	r3, #0
 800488c:	f47f af68 	bne.w	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f918 	bl	8004ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004896:	e763      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d113      	bne.n	80048ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80048c8:	e74a      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d110      	bne.n	80048f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	441a      	add	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80048f4:	e734      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d116      	bne.n	800492e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004906:	425a      	negs	r2, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	bf58      	it	pl
 800490e:	4253      	negpl	r3, r2
 8004910:	2bff      	cmp	r3, #255	; 0xff
 8004912:	d107      	bne.n	8004924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004922:	e71d      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800492c:	e718      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004934:	2b05      	cmp	r3, #5
 8004936:	d10f      	bne.n	8004958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004956:	e703      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800495e:	2b06      	cmp	r3, #6
 8004960:	d117      	bne.n	8004992 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	441a      	add	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2207      	movs	r2, #7
 8004978:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004982:	2b00      	cmp	r3, #0
 8004984:	f47f aeec 	bne.w	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2208      	movs	r2, #8
 800498c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004990:	e6e6      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004998:	2b08      	cmp	r3, #8
 800499a:	f47f aee1 	bne.w	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80049ac:	425a      	negs	r2, r3
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	bf58      	it	pl
 80049b4:	4253      	negpl	r3, r2
 80049b6:	2bff      	cmp	r3, #255	; 0xff
 80049b8:	f47f aed2 	bne.w	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d110      	bne.n	80049e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f87d 	bl	8004ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f898 	bl	8004b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80049e2:	f04f 33ff 	mov.w	r3, #4294967295
 80049e6:	e06a      	b.n	8004abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80049ee:	2b0a      	cmp	r3, #10
 80049f0:	d107      	bne.n	8004a02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f960 	bl	8004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004a00:	e6ae      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004a08:	2b06      	cmp	r3, #6
 8004a0a:	d10e      	bne.n	8004a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7fe faef 	bl	8002ffe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004a28:	e69a      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004a30:	2b0b      	cmp	r3, #11
 8004a32:	d104      	bne.n	8004a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004a3c:	e690      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004a44:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f43f ae84 	beq.w	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004a5e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004a72:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4798      	blx	r3
    while (true)
 8004a8e:	e667      	b.n	8004760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004a90:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00f      	beq.n	8004abc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d906      	bls.n	8004abc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f809 	bl	8004ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8004abc:	2300      	movs	r3, #0
  }
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004ace:	f107 030c 	add.w	r3, r7, #12
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fd fdfa 	bl	80026cc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f107 020c 	add.w	r2, r7, #12
 8004ae2:	210a      	movs	r1, #10
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
    rt_time = hardware_.time();
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fe fded 	bl	80036cc <_ZN13STM32Hardware4timeEv>
 8004af2:	4602      	mov	r2, r0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004afa:	bf00      	nop
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004b02:	b590      	push	{r4, r7, lr}
 8004b04:	b08b      	sub	sp, #44	; 0x2c
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004b0a:	f107 030c 	add.w	r3, r7, #12
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fd fecc 	bl	80028ac <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b14:	2300      	movs	r3, #0
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	2b18      	cmp	r3, #24
 8004b1c:	dc63      	bgt.n	8004be6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d056      	beq.n	8004bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	6859      	ldr	r1, [r3, #4]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4798      	blx	r3
 8004b80:	4603      	mov	r3, r0
 8004b82:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4608      	mov	r0, r1
 8004bac:	4798      	blx	r3
 8004bae:	4603      	mov	r3, r0
 8004bb0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bb6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681c      	ldr	r4, [r3, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fe fbba 	bl	8003346 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	f107 030c 	add.w	r3, r7, #12
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	3301      	adds	r3, #1
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
 8004be4:	e798      	b.n	8004b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004be6:	2300      	movs	r3, #0
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	2b18      	cmp	r3, #24
 8004bee:	dc5f      	bgt.n	8004cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d053      	beq.n	8004ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c16:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004c2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c32:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4608      	mov	r0, r1
 8004c42:	4798      	blx	r3
 8004c44:	4603      	mov	r3, r0
 8004c46:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4608      	mov	r0, r1
 8004c68:	4798      	blx	r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c72:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681c      	ldr	r4, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004c82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3304      	adds	r3, #4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4798      	blx	r3
 8004c9c:	4601      	mov	r1, r0
 8004c9e:	f107 030c 	add.w	r3, r7, #12
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	3301      	adds	r3, #1
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
 8004cae:	e79c      	b.n	8004bea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004cb8:	bf00      	nop
 8004cba:	372c      	adds	r7, #44	; 0x2c
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd90      	pop	{r4, r7, pc}

08004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004cca:	f107 0308 	add.w	r3, r7, #8
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fd fcfc 	bl	80026cc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fe fcf7 	bl	80036cc <_ZN13STM32Hardware4timeEv>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004cea:	f107 0308 	add.w	r3, r7, #8
 8004cee:	6839      	ldr	r1, [r7, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fd fd5b 	bl	80027ac <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4915      	ldr	r1, [pc, #84]	; (8004d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004cfc:	fba1 1303 	umull	r1, r3, r1, r3
 8004d00:	099b      	lsrs	r3, r3, #6
 8004d02:	4413      	add	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004d06:	6939      	ldr	r1, [r7, #16]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004d0c:	fba3 0302 	umull	r0, r3, r3, r2
 8004d10:	099b      	lsrs	r3, r3, #6
 8004d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d16:	fb00 f303 	mul.w	r3, r0, r3
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	; (8004d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	440b      	add	r3, r1
 8004d24:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004d26:	f107 0308 	add.w	r3, r7, #8
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8a6 	bl	8004e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe fcc7 	bl	80036cc <_ZN13STM32Hardware4timeEv>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004d46:	bf00      	nop
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	10624dd3 	.word	0x10624dd3
 8004d54:	000f4240 	.word	0x000f4240

08004d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b63      	cmp	r3, #99	; 0x63
 8004d68:	dd09      	ble.n	8004d7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004d70:	f083 0301 	eor.w	r3, r3, #1
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e079      	b.n	8004e72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004d8a:	3207      	adds	r2, #7
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
 8004d92:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	22ff      	movs	r2, #255	; 0xff
 8004d98:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	22fe      	movs	r2, #254	; 0xfe
 8004da0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	0a1b      	lsrs	r3, r3, #8
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004dca:	4413      	add	r3, r2
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	b21b      	sxth	r3, r3
 8004de6:	121b      	asrs	r3, r3, #8
 8004de8:	b21b      	sxth	r3, r3
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004df6:	2305      	movs	r3, #5
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	3306      	adds	r3, #6
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	dc0d      	bgt.n	8004e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	e7ec      	b.n	8004dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	3307      	adds	r3, #7
 8004e24:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	425a      	negs	r2, r3
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	bf58      	it	pl
 8004e30:	4253      	negpl	r3, r2
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	1c59      	adds	r1, r3, #1
 8004e38:	6179      	str	r1, [r7, #20]
 8004e3a:	43d2      	mvns	r2, r2
 8004e3c:	b2d1      	uxtb	r1, r2
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	460a      	mov	r2, r1
 8004e44:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4e:	dc0a      	bgt.n	8004e66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	1d18      	adds	r0, r3, #4
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f7fe fbef 	bl	8003640 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	e005      	b.n	8004e72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004e66:	4905      	ldr	r1, [pc, #20]	; (8004e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f849 	bl	8004f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004e72:	4618      	mov	r0, r3
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	0800f8ac 	.word	0x0800f8ac

08004e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe fc1c 	bl	80036cc <_ZN13STM32Hardware4timeEv>
 8004e94:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4915      	ldr	r1, [pc, #84]	; (8004ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004e9e:	fba1 1303 	umull	r1, r3, r1, r3
 8004ea2:	099b      	lsrs	r3, r3, #6
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	1e5a      	subs	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8004eba:	099b      	lsrs	r3, r3, #6
 8004ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ec0:	fb00 f303 	mul.w	r3, r0, r3
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004ec8:	fb02 f303 	mul.w	r3, r2, r3
 8004ecc:	1aca      	subs	r2, r1, r3
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004ed0:	4413      	add	r3, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fb fb9c 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	10624dd3 	.word	0x10624dd3
 8004ef8:	000f4240 	.word	0x000f4240
 8004efc:	3b9aca00 	.word	0x3b9aca00

08004f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	2103      	movs	r1, #3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f804 	bl	8004f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	460b      	mov	r3, r1
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004f2a:	f107 0314 	add.w	r3, r7, #20
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fd fe80 	bl	8002c34 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004f34:	7afb      	ldrb	r3, [r7, #11]
 8004f36:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f107 0214 	add.w	r2, r7, #20
 8004f46:	2107      	movs	r1, #7
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	4798      	blx	r3
  }
 8004f4c:	bf00      	nop
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <_Z41__static_initialization_and_destruction_0ii>:
	insVel.angular.z = rW;
	run_inter0 ++;
	pub.publish(&insVel);

	run_inter1 ++;
}
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d116      	bne.n	8004f92 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d111      	bne.n	8004f92 <_Z41__static_initialization_and_destruction_0ii+0x3e>
geometry_msgs::Twist insVel;
 8004f6e:	480b      	ldr	r0, [pc, #44]	; (8004f9c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004f70:	f7ff f8ce 	bl	8004110 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004f74:	480a      	ldr	r0, [pc, #40]	; (8004fa0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004f76:	f7ff fa95 	bl	80044a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004f7e:	490a      	ldr	r1, [pc, #40]	; (8004fa8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f80:	480a      	ldr	r0, [pc, #40]	; (8004fac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004f82:	f7ff fb1f 	bl	80045c4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("/ins_vel", &insVel);
 8004f86:	2300      	movs	r3, #0
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004f8a:	4909      	ldr	r1, [pc, #36]	; (8004fb0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004f8c:	4809      	ldr	r0, [pc, #36]	; (8004fb4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004f8e:	f7fe f9c3 	bl	8003318 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	240006b8 	.word	0x240006b8
 8004fa0:	24000700 	.word	0x24000700
 8004fa4:	08004219 	.word	0x08004219
 8004fa8:	0800f8e8 	.word	0x0800f8e8
 8004fac:	24001040 	.word	0x24001040
 8004fb0:	0800f8f0 	.word	0x0800f8f0
 8004fb4:	240010a0 	.word	0x240010a0

08004fb8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3310      	adds	r3, #16
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff f8e3 	bl	8004194 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	3210      	adds	r2, #16
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4798      	blx	r3
  }
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3310      	adds	r3, #16
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff f8ea 	bl	80041e0 <_ZN13geometry_msgs5Twist7getTypeEv>
 800500c:	4603      	mov	r3, r0
  }
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3310      	adds	r3, #16
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff f8ea 	bl	80041fc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8005028:	4603      	mov	r3, r0
  }
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
    return configured_;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <_GLOBAL__sub_I_count>:
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
 8005050:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005054:	2001      	movs	r0, #1
 8005056:	f7ff ff7d 	bl	8004f54 <_Z41__static_initialization_and_destruction_0ii>
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <HAL_MspInit+0x3c>)
 8005064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005068:	4a0b      	ldr	r2, [pc, #44]	; (8005098 <HAL_MspInit+0x3c>)
 800506a:	f043 0302 	orr.w	r3, r3, #2
 800506e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_MspInit+0x3c>)
 8005074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005080:	2200      	movs	r2, #0
 8005082:	2100      	movs	r1, #0
 8005084:	2005      	movs	r0, #5
 8005086:	f000 fe0c 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800508a:	2005      	movs	r0, #5
 800508c:	f000 fe23 	bl	8005cd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	58024400 	.word	0x58024400

0800509c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ac:	d117      	bne.n	80050de <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050ae:	4b1c      	ldr	r3, [pc, #112]	; (8005120 <HAL_TIM_Base_MspInit+0x84>)
 80050b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050b4:	4a1a      	ldr	r2, [pc, #104]	; (8005120 <HAL_TIM_Base_MspInit+0x84>)
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <HAL_TIM_Base_MspInit+0x84>)
 80050c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80050cc:	2200      	movs	r2, #0
 80050ce:	2100      	movs	r1, #0
 80050d0:	201c      	movs	r0, #28
 80050d2:	f000 fde6 	bl	8005ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050d6:	201c      	movs	r0, #28
 80050d8:	f000 fdfd 	bl	8005cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80050dc:	e01b      	b.n	8005116 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a10      	ldr	r2, [pc, #64]	; (8005124 <HAL_TIM_Base_MspInit+0x88>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d116      	bne.n	8005116 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050e8:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <HAL_TIM_Base_MspInit+0x84>)
 80050ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050ee:	4a0c      	ldr	r2, [pc, #48]	; (8005120 <HAL_TIM_Base_MspInit+0x84>)
 80050f0:	f043 0308 	orr.w	r3, r3, #8
 80050f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <HAL_TIM_Base_MspInit+0x84>)
 80050fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	60bb      	str	r3, [r7, #8]
 8005104:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005106:	2200      	movs	r2, #0
 8005108:	2100      	movs	r1, #0
 800510a:	2032      	movs	r0, #50	; 0x32
 800510c:	f000 fdc9 	bl	8005ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005110:	2032      	movs	r0, #50	; 0x32
 8005112:	f000 fde0 	bl	8005cd6 <HAL_NVIC_EnableIRQ>
}
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	58024400 	.word	0x58024400
 8005124:	40000c00 	.word	0x40000c00

08005128 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b090      	sub	sp, #64	; 0x40
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a69      	ldr	r2, [pc, #420]	; (80052ec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d12e      	bne.n	80051a8 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800514a:	4b69      	ldr	r3, [pc, #420]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800514c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005150:	4a67      	ldr	r2, [pc, #412]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005152:	f043 0302 	orr.w	r3, r3, #2
 8005156:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800515a:	4b65      	ldr	r3, [pc, #404]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800515c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005168:	4b61      	ldr	r3, [pc, #388]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800516a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800516e:	4a60      	ldr	r2, [pc, #384]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005178:	4b5d      	ldr	r3, [pc, #372]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800517a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005186:	23c0      	movs	r3, #192	; 0xc0
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518a:	2302      	movs	r3, #2
 800518c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518e:	2300      	movs	r3, #0
 8005190:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005192:	2300      	movs	r3, #0
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005196:	2302      	movs	r3, #2
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800519a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800519e:	4619      	mov	r1, r3
 80051a0:	4854      	ldr	r0, [pc, #336]	; (80052f4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80051a2:	f003 fdb1 	bl	8008d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80051a6:	e09c      	b.n	80052e2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a52      	ldr	r2, [pc, #328]	; (80052f8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d12f      	bne.n	8005212 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051b2:	4b4f      	ldr	r3, [pc, #316]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80051b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051b8:	4a4d      	ldr	r2, [pc, #308]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80051ba:	f043 0304 	orr.w	r3, r3, #4
 80051be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051c2:	4b4b      	ldr	r3, [pc, #300]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80051c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051d0:	4b47      	ldr	r3, [pc, #284]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80051d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051d6:	4a46      	ldr	r2, [pc, #280]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80051d8:	f043 0308 	orr.w	r3, r3, #8
 80051dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051e0:	4b43      	ldr	r3, [pc, #268]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80051e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80051ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80051f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051fc:	2300      	movs	r3, #0
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005200:	2302      	movs	r3, #2
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005208:	4619      	mov	r1, r3
 800520a:	483c      	ldr	r0, [pc, #240]	; (80052fc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800520c:	f003 fd7c 	bl	8008d08 <HAL_GPIO_Init>
}
 8005210:	e067      	b.n	80052e2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a3a      	ldr	r2, [pc, #232]	; (8005300 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d12e      	bne.n	800527a <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800521c:	4b34      	ldr	r3, [pc, #208]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800521e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005222:	4a33      	ldr	r2, [pc, #204]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005228:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800522c:	4b30      	ldr	r3, [pc, #192]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800522e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800523a:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800523c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005240:	4a2b      	ldr	r2, [pc, #172]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005242:	f043 0320 	orr.w	r3, r3, #32
 8005246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800524a:	4b29      	ldr	r3, [pc, #164]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800524c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005258:	2303      	movs	r3, #3
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525c:	2302      	movs	r3, #2
 800525e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005260:	2300      	movs	r3, #0
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005264:	2300      	movs	r3, #0
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8005268:	230d      	movs	r3, #13
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800526c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005270:	4619      	mov	r1, r3
 8005272:	4824      	ldr	r0, [pc, #144]	; (8005304 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8005274:	f003 fd48 	bl	8008d08 <HAL_GPIO_Init>
}
 8005278:	e033      	b.n	80052e2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a22      	ldr	r2, [pc, #136]	; (8005308 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d12e      	bne.n	80052e2 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8005284:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005286:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800528a:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800528c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005290:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005294:	4b16      	ldr	r3, [pc, #88]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005296:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800529a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80052a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a8:	4a11      	ldr	r2, [pc, #68]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80052aa:	f043 0320 	orr.w	r3, r3, #32
 80052ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80052b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80052c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c6:	2302      	movs	r3, #2
 80052c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ce:	2300      	movs	r3, #0
 80052d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80052d2:	230e      	movs	r3, #14
 80052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052da:	4619      	mov	r1, r3
 80052dc:	4809      	ldr	r0, [pc, #36]	; (8005304 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80052de:	f003 fd13 	bl	8008d08 <HAL_GPIO_Init>
}
 80052e2:	bf00      	nop
 80052e4:	3740      	adds	r7, #64	; 0x40
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40000400 	.word	0x40000400
 80052f0:	58024400 	.word	0x58024400
 80052f4:	58020000 	.word	0x58020000
 80052f8:	40000800 	.word	0x40000800
 80052fc:	58020c00 	.word	0x58020c00
 8005300:	4000e000 	.word	0x4000e000
 8005304:	58021400 	.word	0x58021400
 8005308:	4000e400 	.word	0x4000e400

0800530c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_TIM_PWM_MspInit+0x68>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d10f      	bne.n	800533e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800531e:	4b16      	ldr	r3, [pc, #88]	; (8005378 <HAL_TIM_PWM_MspInit+0x6c>)
 8005320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005324:	4a14      	ldr	r2, [pc, #80]	; (8005378 <HAL_TIM_PWM_MspInit+0x6c>)
 8005326:	f043 0302 	orr.w	r3, r3, #2
 800532a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <HAL_TIM_PWM_MspInit+0x6c>)
 8005330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800533c:	e013      	b.n	8005366 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a0e      	ldr	r2, [pc, #56]	; (800537c <HAL_TIM_PWM_MspInit+0x70>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d10e      	bne.n	8005366 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <HAL_TIM_PWM_MspInit+0x6c>)
 800534a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800534e:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <HAL_TIM_PWM_MspInit+0x6c>)
 8005350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005354:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <HAL_TIM_PWM_MspInit+0x6c>)
 800535a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800535e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	68bb      	ldr	r3, [r7, #8]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010400 	.word	0x40010400
 8005378:	58024400 	.word	0x58024400
 800537c:	40014000 	.word	0x40014000

08005380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005388:	f107 0314 	add.w	r3, r7, #20
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	605a      	str	r2, [r3, #4]
 8005392:	609a      	str	r2, [r3, #8]
 8005394:	60da      	str	r2, [r3, #12]
 8005396:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a35      	ldr	r2, [pc, #212]	; (8005474 <HAL_TIM_MspPostInit+0xf4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d120      	bne.n	80053e4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053a2:	4b35      	ldr	r3, [pc, #212]	; (8005478 <HAL_TIM_MspPostInit+0xf8>)
 80053a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053a8:	4a33      	ldr	r2, [pc, #204]	; (8005478 <HAL_TIM_MspPostInit+0xf8>)
 80053aa:	f043 0304 	orr.w	r3, r3, #4
 80053ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053b2:	4b31      	ldr	r3, [pc, #196]	; (8005478 <HAL_TIM_MspPostInit+0xf8>)
 80053b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80053c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c6:	2302      	movs	r3, #2
 80053c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ce:	2300      	movs	r3, #0
 80053d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80053d2:	2303      	movs	r3, #3
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053d6:	f107 0314 	add.w	r3, r7, #20
 80053da:	4619      	mov	r1, r3
 80053dc:	4827      	ldr	r0, [pc, #156]	; (800547c <HAL_TIM_MspPostInit+0xfc>)
 80053de:	f003 fc93 	bl	8008d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80053e2:	e042      	b.n	800546a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a25      	ldr	r2, [pc, #148]	; (8005480 <HAL_TIM_MspPostInit+0x100>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d13d      	bne.n	800546a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80053ee:	4b22      	ldr	r3, [pc, #136]	; (8005478 <HAL_TIM_MspPostInit+0xf8>)
 80053f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053f4:	4a20      	ldr	r2, [pc, #128]	; (8005478 <HAL_TIM_MspPostInit+0xf8>)
 80053f6:	f043 0310 	orr.w	r3, r3, #16
 80053fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053fe:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <HAL_TIM_MspPostInit+0xf8>)
 8005400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800540c:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <HAL_TIM_MspPostInit+0xf8>)
 800540e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005412:	4a19      	ldr	r2, [pc, #100]	; (8005478 <HAL_TIM_MspPostInit+0xf8>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800541c:	4b16      	ldr	r3, [pc, #88]	; (8005478 <HAL_TIM_MspPostInit+0xf8>)
 800541e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800542a:	2320      	movs	r3, #32
 800542c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542e:	2302      	movs	r3, #2
 8005430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005436:	2300      	movs	r3, #0
 8005438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800543a:	2304      	movs	r3, #4
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800543e:	f107 0314 	add.w	r3, r7, #20
 8005442:	4619      	mov	r1, r3
 8005444:	480f      	ldr	r0, [pc, #60]	; (8005484 <HAL_TIM_MspPostInit+0x104>)
 8005446:	f003 fc5f 	bl	8008d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800544a:	2308      	movs	r3, #8
 800544c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800544e:	2302      	movs	r3, #2
 8005450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005456:	2300      	movs	r3, #0
 8005458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800545a:	2304      	movs	r3, #4
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800545e:	f107 0314 	add.w	r3, r7, #20
 8005462:	4619      	mov	r1, r3
 8005464:	4808      	ldr	r0, [pc, #32]	; (8005488 <HAL_TIM_MspPostInit+0x108>)
 8005466:	f003 fc4f 	bl	8008d08 <HAL_GPIO_Init>
}
 800546a:	bf00      	nop
 800546c:	3728      	adds	r7, #40	; 0x28
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40010400 	.word	0x40010400
 8005478:	58024400 	.word	0x58024400
 800547c:	58020800 	.word	0x58020800
 8005480:	40014000 	.word	0x40014000
 8005484:	58021000 	.word	0x58021000
 8005488:	58020000 	.word	0x58020000

0800548c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b0b6      	sub	sp, #216	; 0xd8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005494:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	60da      	str	r2, [r3, #12]
 80054a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054a4:	f107 0310 	add.w	r3, r7, #16
 80054a8:	22b4      	movs	r2, #180	; 0xb4
 80054aa:	2100      	movs	r1, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	f009 ffc1 	bl	800f434 <memset>
  if(huart->Instance==USART10)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a62      	ldr	r2, [pc, #392]	; (8005640 <HAL_UART_MspInit+0x1b4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	f040 80bc 	bne.w	8005636 <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 80054be:	2301      	movs	r3, #1
 80054c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80054c2:	2300      	movs	r3, #0
 80054c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054c8:	f107 0310 	add.w	r3, r7, #16
 80054cc:	4618      	mov	r0, r3
 80054ce:	f004 fe77 	bl	800a1c0 <HAL_RCCEx_PeriphCLKConfig>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80054d8:	f7fd f8d2 	bl	8002680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 80054dc:	4b59      	ldr	r3, [pc, #356]	; (8005644 <HAL_UART_MspInit+0x1b8>)
 80054de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054e2:	4a58      	ldr	r2, [pc, #352]	; (8005644 <HAL_UART_MspInit+0x1b8>)
 80054e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80054ec:	4b55      	ldr	r3, [pc, #340]	; (8005644 <HAL_UART_MspInit+0x1b8>)
 80054ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054fa:	4b52      	ldr	r3, [pc, #328]	; (8005644 <HAL_UART_MspInit+0x1b8>)
 80054fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005500:	4a50      	ldr	r2, [pc, #320]	; (8005644 <HAL_UART_MspInit+0x1b8>)
 8005502:	f043 0310 	orr.w	r3, r3, #16
 8005506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800550a:	4b4e      	ldr	r3, [pc, #312]	; (8005644 <HAL_UART_MspInit+0x1b8>)
 800550c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005518:	2304      	movs	r3, #4
 800551a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800551e:	2302      	movs	r3, #2
 8005520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005524:	2300      	movs	r3, #0
 8005526:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552a:	2300      	movs	r3, #0
 800552c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8005530:	2304      	movs	r3, #4
 8005532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005536:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800553a:	4619      	mov	r1, r3
 800553c:	4842      	ldr	r0, [pc, #264]	; (8005648 <HAL_UART_MspInit+0x1bc>)
 800553e:	f003 fbe3 	bl	8008d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005542:	2308      	movs	r3, #8
 8005544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005548:	2302      	movs	r3, #2
 800554a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005554:	2300      	movs	r3, #0
 8005556:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 800555a:	230b      	movs	r3, #11
 800555c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005560:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005564:	4619      	mov	r1, r3
 8005566:	4838      	ldr	r0, [pc, #224]	; (8005648 <HAL_UART_MspInit+0x1bc>)
 8005568:	f003 fbce 	bl	8008d08 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 800556c:	4b37      	ldr	r3, [pc, #220]	; (800564c <HAL_UART_MspInit+0x1c0>)
 800556e:	4a38      	ldr	r2, [pc, #224]	; (8005650 <HAL_UART_MspInit+0x1c4>)
 8005570:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 8005572:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_UART_MspInit+0x1c0>)
 8005574:	2276      	movs	r2, #118	; 0x76
 8005576:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005578:	4b34      	ldr	r3, [pc, #208]	; (800564c <HAL_UART_MspInit+0x1c0>)
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800557e:	4b33      	ldr	r3, [pc, #204]	; (800564c <HAL_UART_MspInit+0x1c0>)
 8005580:	2200      	movs	r2, #0
 8005582:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005584:	4b31      	ldr	r3, [pc, #196]	; (800564c <HAL_UART_MspInit+0x1c0>)
 8005586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800558a:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800558c:	4b2f      	ldr	r3, [pc, #188]	; (800564c <HAL_UART_MspInit+0x1c0>)
 800558e:	2200      	movs	r2, #0
 8005590:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005592:	4b2e      	ldr	r3, [pc, #184]	; (800564c <HAL_UART_MspInit+0x1c0>)
 8005594:	2200      	movs	r2, #0
 8005596:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 8005598:	4b2c      	ldr	r3, [pc, #176]	; (800564c <HAL_UART_MspInit+0x1c0>)
 800559a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559e:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80055a0:	4b2a      	ldr	r3, [pc, #168]	; (800564c <HAL_UART_MspInit+0x1c0>)
 80055a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055a6:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055a8:	4b28      	ldr	r3, [pc, #160]	; (800564c <HAL_UART_MspInit+0x1c0>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 80055ae:	4827      	ldr	r0, [pc, #156]	; (800564c <HAL_UART_MspInit+0x1c0>)
 80055b0:	f000 fbba 	bl	8005d28 <HAL_DMA_Init>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80055ba:	f7fd f861 	bl	8002680 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a22      	ldr	r2, [pc, #136]	; (800564c <HAL_UART_MspInit+0x1c0>)
 80055c2:	67da      	str	r2, [r3, #124]	; 0x7c
 80055c4:	4a21      	ldr	r2, [pc, #132]	; (800564c <HAL_UART_MspInit+0x1c0>)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 80055ca:	4b22      	ldr	r3, [pc, #136]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 80055cc:	4a22      	ldr	r2, [pc, #136]	; (8005658 <HAL_UART_MspInit+0x1cc>)
 80055ce:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 80055d0:	4b20      	ldr	r3, [pc, #128]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 80055d2:	2277      	movs	r2, #119	; 0x77
 80055d4:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055d6:	4b1f      	ldr	r3, [pc, #124]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 80055d8:	2240      	movs	r2, #64	; 0x40
 80055da:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055dc:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 80055de:	2200      	movs	r2, #0
 80055e0:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055e2:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 80055e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055e8:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055ea:	4b1a      	ldr	r3, [pc, #104]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055f0:	4b18      	ldr	r3, [pc, #96]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 80055f6:	4b17      	ldr	r3, [pc, #92]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80055fc:	4b15      	ldr	r3, [pc, #84]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 80055fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005602:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005604:	4b13      	ldr	r3, [pc, #76]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 8005606:	2200      	movs	r2, #0
 8005608:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 800560a:	4812      	ldr	r0, [pc, #72]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 800560c:	f000 fb8c 	bl	8005d28 <HAL_DMA_Init>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 8005616:	f7fd f833 	bl	8002680 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 800561e:	679a      	str	r2, [r3, #120]	; 0x78
 8005620:	4a0c      	ldr	r2, [pc, #48]	; (8005654 <HAL_UART_MspInit+0x1c8>)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8005626:	2200      	movs	r2, #0
 8005628:	2100      	movs	r1, #0
 800562a:	209c      	movs	r0, #156	; 0x9c
 800562c:	f000 fb39 	bl	8005ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8005630:	209c      	movs	r0, #156	; 0x9c
 8005632:	f000 fb50 	bl	8005cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8005636:	bf00      	nop
 8005638:	37d8      	adds	r7, #216	; 0xd8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40011c00 	.word	0x40011c00
 8005644:	58024400 	.word	0x58024400
 8005648:	58021000 	.word	0x58021000
 800564c:	240003dc 	.word	0x240003dc
 8005650:	40020010 	.word	0x40020010
 8005654:	24000454 	.word	0x24000454
 8005658:	40020028 	.word	0x40020028

0800565c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a0f      	ldr	r2, [pc, #60]	; (80056a8 <HAL_UART_MspDeInit+0x4c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d118      	bne.n	80056a0 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 800566e:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <HAL_UART_MspDeInit+0x50>)
 8005670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005674:	4a0d      	ldr	r2, [pc, #52]	; (80056ac <HAL_UART_MspDeInit+0x50>)
 8005676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800567a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 800567e:	210c      	movs	r1, #12
 8005680:	480b      	ldr	r0, [pc, #44]	; (80056b0 <HAL_UART_MspDeInit+0x54>)
 8005682:	f003 fce9 	bl	8009058 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fea6 	bl	80063dc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fea1 	bl	80063dc <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 800569a:	209c      	movs	r0, #156	; 0x9c
 800569c:	f000 fb29 	bl	8005cf2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40011c00 	.word	0x40011c00
 80056ac:	58024400 	.word	0x58024400
 80056b0:	58021000 	.word	0x58021000

080056b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056b8:	e7fe      	b.n	80056b8 <NMI_Handler+0x4>

080056ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056ba:	b480      	push	{r7}
 80056bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056be:	e7fe      	b.n	80056be <HardFault_Handler+0x4>

080056c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056c4:	e7fe      	b.n	80056c4 <MemManage_Handler+0x4>

080056c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056c6:	b480      	push	{r7}
 80056c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056ca:	e7fe      	b.n	80056ca <BusFault_Handler+0x4>

080056cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056d0:	e7fe      	b.n	80056d0 <UsageFault_Handler+0x4>

080056d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056ee:	b480      	push	{r7}
 80056f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005700:	f000 f9b0 	bl	8005a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005704:	bf00      	nop
 8005706:	bd80      	pop	{r7, pc}

08005708 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 800571c:	4802      	ldr	r0, [pc, #8]	; (8005728 <DMA1_Stream0_IRQHandler+0x10>)
 800571e:	f001 ffe1 	bl	80076e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	240003dc 	.word	0x240003dc

0800572c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8005730:	4802      	ldr	r0, [pc, #8]	; (800573c <DMA1_Stream1_IRQHandler+0x10>)
 8005732:	f001 ffd7 	bl	80076e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005736:	bf00      	nop
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	24000454 	.word	0x24000454

08005740 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005744:	4802      	ldr	r0, [pc, #8]	; (8005750 <TIM2_IRQHandler+0x10>)
 8005746:	f006 fbdd 	bl	800bf04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800574a:	bf00      	nop
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	240000ec 	.word	0x240000ec

08005754 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005758:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800575c:	f003 fd97 	bl	800928e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005760:	bf00      	nop
 8005762:	bd80      	pop	{r7, pc}

08005764 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005768:	4802      	ldr	r0, [pc, #8]	; (8005774 <TIM5_IRQHandler+0x10>)
 800576a:	f006 fbcb 	bl	800bf04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	240001d0 	.word	0x240001d0

08005778 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 800577c:	4802      	ldr	r0, [pc, #8]	; (8005788 <USART10_IRQHandler+0x10>)
 800577e:	f007 fe23 	bl	800d3c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8005782:	bf00      	nop
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	2400034c 	.word	0x2400034c

0800578c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
	return 1;
 8005790:	2301      	movs	r3, #1
}
 8005792:	4618      	mov	r0, r3
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <_kill>:

int _kill(int pid, int sig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80057a6:	f009 fe0d 	bl	800f3c4 <__errno>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2216      	movs	r2, #22
 80057ae:	601a      	str	r2, [r3, #0]
	return -1;
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <_exit>:

void _exit (int status)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80057c4:	f04f 31ff 	mov.w	r1, #4294967295
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ffe7 	bl	800579c <_kill>
	while (1) {}		/* Make sure we hang here */
 80057ce:	e7fe      	b.n	80057ce <_exit+0x12>

080057d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057d8:	4a14      	ldr	r2, [pc, #80]	; (800582c <_sbrk+0x5c>)
 80057da:	4b15      	ldr	r3, [pc, #84]	; (8005830 <_sbrk+0x60>)
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057e4:	4b13      	ldr	r3, [pc, #76]	; (8005834 <_sbrk+0x64>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057ec:	4b11      	ldr	r3, [pc, #68]	; (8005834 <_sbrk+0x64>)
 80057ee:	4a12      	ldr	r2, [pc, #72]	; (8005838 <_sbrk+0x68>)
 80057f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057f2:	4b10      	ldr	r3, [pc, #64]	; (8005834 <_sbrk+0x64>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d207      	bcs.n	8005810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005800:	f009 fde0 	bl	800f3c4 <__errno>
 8005804:	4603      	mov	r3, r0
 8005806:	220c      	movs	r2, #12
 8005808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800580a:	f04f 33ff 	mov.w	r3, #4294967295
 800580e:	e009      	b.n	8005824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005810:	4b08      	ldr	r3, [pc, #32]	; (8005834 <_sbrk+0x64>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005816:	4b07      	ldr	r3, [pc, #28]	; (8005834 <_sbrk+0x64>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4413      	add	r3, r2
 800581e:	4a05      	ldr	r2, [pc, #20]	; (8005834 <_sbrk+0x64>)
 8005820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	24050000 	.word	0x24050000
 8005830:	00000400 	.word	0x00000400
 8005834:	240010b4 	.word	0x240010b4
 8005838:	240010d0 	.word	0x240010d0

0800583c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005840:	4b32      	ldr	r3, [pc, #200]	; (800590c <SystemInit+0xd0>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	4a31      	ldr	r2, [pc, #196]	; (800590c <SystemInit+0xd0>)
 8005848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800584c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005850:	4b2f      	ldr	r3, [pc, #188]	; (8005910 <SystemInit+0xd4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 030f 	and.w	r3, r3, #15
 8005858:	2b06      	cmp	r3, #6
 800585a:	d807      	bhi.n	800586c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800585c:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <SystemInit+0xd4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f023 030f 	bic.w	r3, r3, #15
 8005864:	4a2a      	ldr	r2, [pc, #168]	; (8005910 <SystemInit+0xd4>)
 8005866:	f043 0307 	orr.w	r3, r3, #7
 800586a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800586c:	4b29      	ldr	r3, [pc, #164]	; (8005914 <SystemInit+0xd8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a28      	ldr	r2, [pc, #160]	; (8005914 <SystemInit+0xd8>)
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005878:	4b26      	ldr	r3, [pc, #152]	; (8005914 <SystemInit+0xd8>)
 800587a:	2200      	movs	r2, #0
 800587c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800587e:	4b25      	ldr	r3, [pc, #148]	; (8005914 <SystemInit+0xd8>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4924      	ldr	r1, [pc, #144]	; (8005914 <SystemInit+0xd8>)
 8005884:	4b24      	ldr	r3, [pc, #144]	; (8005918 <SystemInit+0xdc>)
 8005886:	4013      	ands	r3, r2
 8005888:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800588a:	4b21      	ldr	r3, [pc, #132]	; (8005910 <SystemInit+0xd4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005896:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <SystemInit+0xd4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 030f 	bic.w	r3, r3, #15
 800589e:	4a1c      	ldr	r2, [pc, #112]	; (8005910 <SystemInit+0xd4>)
 80058a0:	f043 0307 	orr.w	r3, r3, #7
 80058a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80058a6:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <SystemInit+0xd8>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80058ac:	4b19      	ldr	r3, [pc, #100]	; (8005914 <SystemInit+0xd8>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80058b2:	4b18      	ldr	r3, [pc, #96]	; (8005914 <SystemInit+0xd8>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80058b8:	4b16      	ldr	r3, [pc, #88]	; (8005914 <SystemInit+0xd8>)
 80058ba:	4a18      	ldr	r2, [pc, #96]	; (800591c <SystemInit+0xe0>)
 80058bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80058be:	4b15      	ldr	r3, [pc, #84]	; (8005914 <SystemInit+0xd8>)
 80058c0:	4a17      	ldr	r2, [pc, #92]	; (8005920 <SystemInit+0xe4>)
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80058c4:	4b13      	ldr	r3, [pc, #76]	; (8005914 <SystemInit+0xd8>)
 80058c6:	4a17      	ldr	r2, [pc, #92]	; (8005924 <SystemInit+0xe8>)
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <SystemInit+0xd8>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80058d0:	4b10      	ldr	r3, [pc, #64]	; (8005914 <SystemInit+0xd8>)
 80058d2:	4a14      	ldr	r2, [pc, #80]	; (8005924 <SystemInit+0xe8>)
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80058d6:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <SystemInit+0xd8>)
 80058d8:	2200      	movs	r2, #0
 80058da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <SystemInit+0xd8>)
 80058de:	4a11      	ldr	r2, [pc, #68]	; (8005924 <SystemInit+0xe8>)
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80058e2:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <SystemInit+0xd8>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <SystemInit+0xd8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a09      	ldr	r2, [pc, #36]	; (8005914 <SystemInit+0xd8>)
 80058ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80058f4:	4b07      	ldr	r3, [pc, #28]	; (8005914 <SystemInit+0xd8>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <SystemInit+0xec>)
 80058fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005900:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005902:	bf00      	nop
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	e000ed00 	.word	0xe000ed00
 8005910:	52002000 	.word	0x52002000
 8005914:	58024400 	.word	0x58024400
 8005918:	eaf6ed7f 	.word	0xeaf6ed7f
 800591c:	02020200 	.word	0x02020200
 8005920:	01ff0000 	.word	0x01ff0000
 8005924:	01010280 	.word	0x01010280
 8005928:	52004000 	.word	0x52004000

0800592c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800592c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005964 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005930:	f7ff ff84 	bl	800583c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005934:	480c      	ldr	r0, [pc, #48]	; (8005968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005936:	490d      	ldr	r1, [pc, #52]	; (800596c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005938:	4a0d      	ldr	r2, [pc, #52]	; (8005970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800593a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800593c:	e002      	b.n	8005944 <LoopCopyDataInit>

0800593e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800593e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005942:	3304      	adds	r3, #4

08005944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005948:	d3f9      	bcc.n	800593e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800594a:	4a0a      	ldr	r2, [pc, #40]	; (8005974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800594c:	4c0a      	ldr	r4, [pc, #40]	; (8005978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800594e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005950:	e001      	b.n	8005956 <LoopFillZerobss>

08005952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005954:	3204      	adds	r2, #4

08005956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005958:	d3fb      	bcc.n	8005952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800595a:	f009 fd39 	bl	800f3d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800595e:	f7fa fe8f 	bl	8000680 <main>
  bx  lr
 8005962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005964:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005968:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800596c:	240000d0 	.word	0x240000d0
  ldr r2, =_sidata
 8005970:	0800fa6c 	.word	0x0800fa6c
  ldr r2, =_sbss
 8005974:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8005978:	240010cc 	.word	0x240010cc

0800597c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800597c:	e7fe      	b.n	800597c <ADC3_IRQHandler>
	...

08005980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005986:	2003      	movs	r0, #3
 8005988:	f000 f980 	bl	8005c8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800598c:	f004 fa42 	bl	8009e14 <HAL_RCC_GetSysClockFreq>
 8005990:	4602      	mov	r2, r0
 8005992:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <HAL_Init+0x68>)
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	4913      	ldr	r1, [pc, #76]	; (80059ec <HAL_Init+0x6c>)
 800599e:	5ccb      	ldrb	r3, [r1, r3]
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
 80059a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059aa:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <HAL_Init+0x68>)
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	4a0e      	ldr	r2, [pc, #56]	; (80059ec <HAL_Init+0x6c>)
 80059b4:	5cd3      	ldrb	r3, [r2, r3]
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
 80059c0:	4a0b      	ldr	r2, [pc, #44]	; (80059f0 <HAL_Init+0x70>)
 80059c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059c4:	4a0b      	ldr	r2, [pc, #44]	; (80059f4 <HAL_Init+0x74>)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059ca:	200f      	movs	r0, #15
 80059cc:	f000 f814 	bl	80059f8 <HAL_InitTick>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e002      	b.n	80059e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80059da:	f7ff fb3f 	bl	800505c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	58024400 	.word	0x58024400
 80059ec:	0800fa18 	.word	0x0800fa18
 80059f0:	2400005c 	.word	0x2400005c
 80059f4:	24000058 	.word	0x24000058

080059f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005a00:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <HAL_InitTick+0x60>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e021      	b.n	8005a50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_InitTick+0x64>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_InitTick+0x60>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	4619      	mov	r1, r3
 8005a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 f973 	bl	8005d0e <HAL_SYSTICK_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e00e      	b.n	8005a50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b0f      	cmp	r3, #15
 8005a36:	d80a      	bhi.n	8005a4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	f000 f92f 	bl	8005ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a44:	4a06      	ldr	r2, [pc, #24]	; (8005a60 <HAL_InitTick+0x68>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	24000064 	.word	0x24000064
 8005a5c:	24000058 	.word	0x24000058
 8005a60:	24000060 	.word	0x24000060

08005a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <HAL_IncTick+0x20>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <HAL_IncTick+0x24>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4413      	add	r3, r2
 8005a74:	4a04      	ldr	r2, [pc, #16]	; (8005a88 <HAL_IncTick+0x24>)
 8005a76:	6013      	str	r3, [r2, #0]
}
 8005a78:	bf00      	nop
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	24000064 	.word	0x24000064
 8005a88:	240010b8 	.word	0x240010b8

08005a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <HAL_GetTick+0x14>)
 8005a92:	681b      	ldr	r3, [r3, #0]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	240010b8 	.word	0x240010b8

08005aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ad2:	4a04      	ldr	r2, [pc, #16]	; (8005ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	60d3      	str	r3, [r2, #12]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	e000ed00 	.word	0xe000ed00
 8005ae8:	05fa0000 	.word	0x05fa0000

08005aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <__NVIC_GetPriorityGrouping+0x18>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	0a1b      	lsrs	r3, r3, #8
 8005af6:	f003 0307 	and.w	r3, r3, #7
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	e000ed00 	.word	0xe000ed00

08005b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	db0b      	blt.n	8005b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	f003 021f 	and.w	r2, r3, #31
 8005b20:	4907      	ldr	r1, [pc, #28]	; (8005b40 <__NVIC_EnableIRQ+0x38>)
 8005b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	2001      	movs	r0, #1
 8005b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000e100 	.word	0xe000e100

08005b44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	db12      	blt.n	8005b7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	f003 021f 	and.w	r2, r3, #31
 8005b5c:	490a      	ldr	r1, [pc, #40]	; (8005b88 <__NVIC_DisableIRQ+0x44>)
 8005b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	2001      	movs	r0, #1
 8005b66:	fa00 f202 	lsl.w	r2, r0, r2
 8005b6a:	3320      	adds	r3, #32
 8005b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005b70:	f3bf 8f4f 	dsb	sy
}
 8005b74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b76:	f3bf 8f6f 	isb	sy
}
 8005b7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	e000e100 	.word	0xe000e100

08005b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4603      	mov	r3, r0
 8005b94:	6039      	str	r1, [r7, #0]
 8005b96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	db0a      	blt.n	8005bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	490c      	ldr	r1, [pc, #48]	; (8005bd8 <__NVIC_SetPriority+0x4c>)
 8005ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005baa:	0112      	lsls	r2, r2, #4
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	440b      	add	r3, r1
 8005bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bb4:	e00a      	b.n	8005bcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4908      	ldr	r1, [pc, #32]	; (8005bdc <__NVIC_SetPriority+0x50>)
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	3b04      	subs	r3, #4
 8005bc4:	0112      	lsls	r2, r2, #4
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	440b      	add	r3, r1
 8005bca:	761a      	strb	r2, [r3, #24]
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	e000e100 	.word	0xe000e100
 8005bdc:	e000ed00 	.word	0xe000ed00

08005be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b089      	sub	sp, #36	; 0x24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	f1c3 0307 	rsb	r3, r3, #7
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	bf28      	it	cs
 8005bfe:	2304      	movcs	r3, #4
 8005c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	3304      	adds	r3, #4
 8005c06:	2b06      	cmp	r3, #6
 8005c08:	d902      	bls.n	8005c10 <NVIC_EncodePriority+0x30>
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	3b03      	subs	r3, #3
 8005c0e:	e000      	b.n	8005c12 <NVIC_EncodePriority+0x32>
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c14:	f04f 32ff 	mov.w	r2, #4294967295
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43da      	mvns	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	401a      	ands	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c28:	f04f 31ff 	mov.w	r1, #4294967295
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	43d9      	mvns	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c38:	4313      	orrs	r3, r2
         );
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3724      	adds	r7, #36	; 0x24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c58:	d301      	bcc.n	8005c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e00f      	b.n	8005c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c5e:	4a0a      	ldr	r2, [pc, #40]	; (8005c88 <SysTick_Config+0x40>)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c66:	210f      	movs	r1, #15
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	f7ff ff8e 	bl	8005b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <SysTick_Config+0x40>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c76:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <SysTick_Config+0x40>)
 8005c78:	2207      	movs	r2, #7
 8005c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	e000e010 	.word	0xe000e010

08005c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff ff05 	bl	8005aa4 <__NVIC_SetPriorityGrouping>
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	4603      	mov	r3, r0
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cb0:	f7ff ff1c 	bl	8005aec <__NVIC_GetPriorityGrouping>
 8005cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	6978      	ldr	r0, [r7, #20]
 8005cbc:	f7ff ff90 	bl	8005be0 <NVIC_EncodePriority>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff ff5f 	bl	8005b8c <__NVIC_SetPriority>
}
 8005cce:	bf00      	nop
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	4603      	mov	r3, r0
 8005cde:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff ff0f 	bl	8005b08 <__NVIC_EnableIRQ>
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff ff1f 	bl	8005b44 <__NVIC_DisableIRQ>
}
 8005d06:	bf00      	nop
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff ff96 	bl	8005c48 <SysTick_Config>
 8005d1c:	4603      	mov	r3, r0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d30:	f7ff feac 	bl	8005a8c <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e314      	b.n	800636a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a66      	ldr	r2, [pc, #408]	; (8005ee0 <HAL_DMA_Init+0x1b8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d04a      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a65      	ldr	r2, [pc, #404]	; (8005ee4 <HAL_DMA_Init+0x1bc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d045      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a63      	ldr	r2, [pc, #396]	; (8005ee8 <HAL_DMA_Init+0x1c0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d040      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a62      	ldr	r2, [pc, #392]	; (8005eec <HAL_DMA_Init+0x1c4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d03b      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a60      	ldr	r2, [pc, #384]	; (8005ef0 <HAL_DMA_Init+0x1c8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d036      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a5f      	ldr	r2, [pc, #380]	; (8005ef4 <HAL_DMA_Init+0x1cc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d031      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a5d      	ldr	r2, [pc, #372]	; (8005ef8 <HAL_DMA_Init+0x1d0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d02c      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a5c      	ldr	r2, [pc, #368]	; (8005efc <HAL_DMA_Init+0x1d4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d027      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a5a      	ldr	r2, [pc, #360]	; (8005f00 <HAL_DMA_Init+0x1d8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d022      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a59      	ldr	r2, [pc, #356]	; (8005f04 <HAL_DMA_Init+0x1dc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d01d      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a57      	ldr	r2, [pc, #348]	; (8005f08 <HAL_DMA_Init+0x1e0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d018      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a56      	ldr	r2, [pc, #344]	; (8005f0c <HAL_DMA_Init+0x1e4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d013      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a54      	ldr	r2, [pc, #336]	; (8005f10 <HAL_DMA_Init+0x1e8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00e      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a53      	ldr	r2, [pc, #332]	; (8005f14 <HAL_DMA_Init+0x1ec>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d009      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a51      	ldr	r2, [pc, #324]	; (8005f18 <HAL_DMA_Init+0x1f0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d004      	beq.n	8005de0 <HAL_DMA_Init+0xb8>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a50      	ldr	r2, [pc, #320]	; (8005f1c <HAL_DMA_Init+0x1f4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d101      	bne.n	8005de4 <HAL_DMA_Init+0xbc>
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <HAL_DMA_Init+0xbe>
 8005de4:	2300      	movs	r3, #0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 813c 	beq.w	8006064 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a37      	ldr	r2, [pc, #220]	; (8005ee0 <HAL_DMA_Init+0x1b8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d04a      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a36      	ldr	r2, [pc, #216]	; (8005ee4 <HAL_DMA_Init+0x1bc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d045      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a34      	ldr	r2, [pc, #208]	; (8005ee8 <HAL_DMA_Init+0x1c0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d040      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a33      	ldr	r2, [pc, #204]	; (8005eec <HAL_DMA_Init+0x1c4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d03b      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a31      	ldr	r2, [pc, #196]	; (8005ef0 <HAL_DMA_Init+0x1c8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d036      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a30      	ldr	r2, [pc, #192]	; (8005ef4 <HAL_DMA_Init+0x1cc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d031      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2e      	ldr	r2, [pc, #184]	; (8005ef8 <HAL_DMA_Init+0x1d0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d02c      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a2d      	ldr	r2, [pc, #180]	; (8005efc <HAL_DMA_Init+0x1d4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d027      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a2b      	ldr	r2, [pc, #172]	; (8005f00 <HAL_DMA_Init+0x1d8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d022      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a2a      	ldr	r2, [pc, #168]	; (8005f04 <HAL_DMA_Init+0x1dc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d01d      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a28      	ldr	r2, [pc, #160]	; (8005f08 <HAL_DMA_Init+0x1e0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d018      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a27      	ldr	r2, [pc, #156]	; (8005f0c <HAL_DMA_Init+0x1e4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d013      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a25      	ldr	r2, [pc, #148]	; (8005f10 <HAL_DMA_Init+0x1e8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00e      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a24      	ldr	r2, [pc, #144]	; (8005f14 <HAL_DMA_Init+0x1ec>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d009      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a22      	ldr	r2, [pc, #136]	; (8005f18 <HAL_DMA_Init+0x1f0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <HAL_DMA_Init+0x174>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a21      	ldr	r2, [pc, #132]	; (8005f1c <HAL_DMA_Init+0x1f4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d108      	bne.n	8005eae <HAL_DMA_Init+0x186>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0201 	bic.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e007      	b.n	8005ebe <HAL_DMA_Init+0x196>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ebe:	e02f      	b.n	8005f20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ec0:	f7ff fde4 	bl	8005a8c <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d928      	bls.n	8005f20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e244      	b.n	800636a <HAL_DMA_Init+0x642>
 8005ee0:	40020010 	.word	0x40020010
 8005ee4:	40020028 	.word	0x40020028
 8005ee8:	40020040 	.word	0x40020040
 8005eec:	40020058 	.word	0x40020058
 8005ef0:	40020070 	.word	0x40020070
 8005ef4:	40020088 	.word	0x40020088
 8005ef8:	400200a0 	.word	0x400200a0
 8005efc:	400200b8 	.word	0x400200b8
 8005f00:	40020410 	.word	0x40020410
 8005f04:	40020428 	.word	0x40020428
 8005f08:	40020440 	.word	0x40020440
 8005f0c:	40020458 	.word	0x40020458
 8005f10:	40020470 	.word	0x40020470
 8005f14:	40020488 	.word	0x40020488
 8005f18:	400204a0 	.word	0x400204a0
 8005f1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1c8      	bne.n	8005ec0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4b84      	ldr	r3, [pc, #528]	; (800614c <HAL_DMA_Init+0x424>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d107      	bne.n	8005f84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b28      	cmp	r3, #40	; 0x28
 8005f8a:	d903      	bls.n	8005f94 <HAL_DMA_Init+0x26c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b2e      	cmp	r3, #46	; 0x2e
 8005f92:	d91f      	bls.n	8005fd4 <HAL_DMA_Init+0x2ac>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b3e      	cmp	r3, #62	; 0x3e
 8005f9a:	d903      	bls.n	8005fa4 <HAL_DMA_Init+0x27c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b42      	cmp	r3, #66	; 0x42
 8005fa2:	d917      	bls.n	8005fd4 <HAL_DMA_Init+0x2ac>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b46      	cmp	r3, #70	; 0x46
 8005faa:	d903      	bls.n	8005fb4 <HAL_DMA_Init+0x28c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b48      	cmp	r3, #72	; 0x48
 8005fb2:	d90f      	bls.n	8005fd4 <HAL_DMA_Init+0x2ac>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b4e      	cmp	r3, #78	; 0x4e
 8005fba:	d903      	bls.n	8005fc4 <HAL_DMA_Init+0x29c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b52      	cmp	r3, #82	; 0x52
 8005fc2:	d907      	bls.n	8005fd4 <HAL_DMA_Init+0x2ac>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b73      	cmp	r3, #115	; 0x73
 8005fca:	d905      	bls.n	8005fd8 <HAL_DMA_Init+0x2b0>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b77      	cmp	r3, #119	; 0x77
 8005fd2:	d801      	bhi.n	8005fd8 <HAL_DMA_Init+0x2b0>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <HAL_DMA_Init+0x2b2>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fe4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f023 0307 	bic.w	r3, r3, #7
 8005ffc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b04      	cmp	r3, #4
 800600e:	d117      	bne.n	8006040 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00e      	beq.n	8006040 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f002 fce6 	bl	80089f4 <DMA_CheckFifoParam>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2240      	movs	r2, #64	; 0x40
 8006032:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e194      	b.n	800636a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f002 fc21 	bl	8008890 <DMA_CalcBaseAndBitshift>
 800604e:	4603      	mov	r3, r0
 8006050:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	223f      	movs	r2, #63	; 0x3f
 800605c:	409a      	lsls	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	609a      	str	r2, [r3, #8]
 8006062:	e0ca      	b.n	80061fa <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a39      	ldr	r2, [pc, #228]	; (8006150 <HAL_DMA_Init+0x428>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d022      	beq.n	80060b4 <HAL_DMA_Init+0x38c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a38      	ldr	r2, [pc, #224]	; (8006154 <HAL_DMA_Init+0x42c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d01d      	beq.n	80060b4 <HAL_DMA_Init+0x38c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a36      	ldr	r2, [pc, #216]	; (8006158 <HAL_DMA_Init+0x430>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d018      	beq.n	80060b4 <HAL_DMA_Init+0x38c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a35      	ldr	r2, [pc, #212]	; (800615c <HAL_DMA_Init+0x434>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <HAL_DMA_Init+0x38c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a33      	ldr	r2, [pc, #204]	; (8006160 <HAL_DMA_Init+0x438>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <HAL_DMA_Init+0x38c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a32      	ldr	r2, [pc, #200]	; (8006164 <HAL_DMA_Init+0x43c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d009      	beq.n	80060b4 <HAL_DMA_Init+0x38c>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a30      	ldr	r2, [pc, #192]	; (8006168 <HAL_DMA_Init+0x440>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_DMA_Init+0x38c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a2f      	ldr	r2, [pc, #188]	; (800616c <HAL_DMA_Init+0x444>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d101      	bne.n	80060b8 <HAL_DMA_Init+0x390>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <HAL_DMA_Init+0x392>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8094 	beq.w	80061e8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a22      	ldr	r2, [pc, #136]	; (8006150 <HAL_DMA_Init+0x428>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d021      	beq.n	800610e <HAL_DMA_Init+0x3e6>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a21      	ldr	r2, [pc, #132]	; (8006154 <HAL_DMA_Init+0x42c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d01c      	beq.n	800610e <HAL_DMA_Init+0x3e6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <HAL_DMA_Init+0x430>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d017      	beq.n	800610e <HAL_DMA_Init+0x3e6>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1e      	ldr	r2, [pc, #120]	; (800615c <HAL_DMA_Init+0x434>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d012      	beq.n	800610e <HAL_DMA_Init+0x3e6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <HAL_DMA_Init+0x438>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00d      	beq.n	800610e <HAL_DMA_Init+0x3e6>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1b      	ldr	r2, [pc, #108]	; (8006164 <HAL_DMA_Init+0x43c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d008      	beq.n	800610e <HAL_DMA_Init+0x3e6>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a19      	ldr	r2, [pc, #100]	; (8006168 <HAL_DMA_Init+0x440>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <HAL_DMA_Init+0x3e6>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a18      	ldr	r2, [pc, #96]	; (800616c <HAL_DMA_Init+0x444>)
 800610c:	4293      	cmp	r3, r2
 800610e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4b11      	ldr	r3, [pc, #68]	; (8006170 <HAL_DMA_Init+0x448>)
 800612c:	4013      	ands	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b40      	cmp	r3, #64	; 0x40
 8006136:	d01d      	beq.n	8006174 <HAL_DMA_Init+0x44c>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b80      	cmp	r3, #128	; 0x80
 800613e:	d102      	bne.n	8006146 <HAL_DMA_Init+0x41e>
 8006140:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006144:	e017      	b.n	8006176 <HAL_DMA_Init+0x44e>
 8006146:	2300      	movs	r3, #0
 8006148:	e015      	b.n	8006176 <HAL_DMA_Init+0x44e>
 800614a:	bf00      	nop
 800614c:	fe10803f 	.word	0xfe10803f
 8006150:	58025408 	.word	0x58025408
 8006154:	5802541c 	.word	0x5802541c
 8006158:	58025430 	.word	0x58025430
 800615c:	58025444 	.word	0x58025444
 8006160:	58025458 	.word	0x58025458
 8006164:	5802546c 	.word	0x5802546c
 8006168:	58025480 	.word	0x58025480
 800616c:	58025494 	.word	0x58025494
 8006170:	fffe000f 	.word	0xfffe000f
 8006174:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	68d2      	ldr	r2, [r2, #12]
 800617a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800617c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800618c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800619c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	4b6e      	ldr	r3, [pc, #440]	; (8006374 <HAL_DMA_Init+0x64c>)
 80061bc:	4413      	add	r3, r2
 80061be:	4a6e      	ldr	r2, [pc, #440]	; (8006378 <HAL_DMA_Init+0x650>)
 80061c0:	fba2 2303 	umull	r2, r3, r2, r3
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	009a      	lsls	r2, r3, #2
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f002 fb5f 	bl	8008890 <DMA_CalcBaseAndBitshift>
 80061d2:	4603      	mov	r3, r0
 80061d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	2201      	movs	r2, #1
 80061e0:	409a      	lsls	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	e008      	b.n	80061fa <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2240      	movs	r2, #64	; 0x40
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2203      	movs	r2, #3
 80061f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e0b7      	b.n	800636a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a5f      	ldr	r2, [pc, #380]	; (800637c <HAL_DMA_Init+0x654>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d072      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5d      	ldr	r2, [pc, #372]	; (8006380 <HAL_DMA_Init+0x658>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d06d      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a5c      	ldr	r2, [pc, #368]	; (8006384 <HAL_DMA_Init+0x65c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d068      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a5a      	ldr	r2, [pc, #360]	; (8006388 <HAL_DMA_Init+0x660>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d063      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a59      	ldr	r2, [pc, #356]	; (800638c <HAL_DMA_Init+0x664>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d05e      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a57      	ldr	r2, [pc, #348]	; (8006390 <HAL_DMA_Init+0x668>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d059      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a56      	ldr	r2, [pc, #344]	; (8006394 <HAL_DMA_Init+0x66c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d054      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a54      	ldr	r2, [pc, #336]	; (8006398 <HAL_DMA_Init+0x670>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d04f      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a53      	ldr	r2, [pc, #332]	; (800639c <HAL_DMA_Init+0x674>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d04a      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a51      	ldr	r2, [pc, #324]	; (80063a0 <HAL_DMA_Init+0x678>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d045      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a50      	ldr	r2, [pc, #320]	; (80063a4 <HAL_DMA_Init+0x67c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d040      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a4e      	ldr	r2, [pc, #312]	; (80063a8 <HAL_DMA_Init+0x680>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d03b      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a4d      	ldr	r2, [pc, #308]	; (80063ac <HAL_DMA_Init+0x684>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d036      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a4b      	ldr	r2, [pc, #300]	; (80063b0 <HAL_DMA_Init+0x688>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d031      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a4a      	ldr	r2, [pc, #296]	; (80063b4 <HAL_DMA_Init+0x68c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d02c      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a48      	ldr	r2, [pc, #288]	; (80063b8 <HAL_DMA_Init+0x690>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d027      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a47      	ldr	r2, [pc, #284]	; (80063bc <HAL_DMA_Init+0x694>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a45      	ldr	r2, [pc, #276]	; (80063c0 <HAL_DMA_Init+0x698>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01d      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a44      	ldr	r2, [pc, #272]	; (80063c4 <HAL_DMA_Init+0x69c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a42      	ldr	r2, [pc, #264]	; (80063c8 <HAL_DMA_Init+0x6a0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a41      	ldr	r2, [pc, #260]	; (80063cc <HAL_DMA_Init+0x6a4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3f      	ldr	r2, [pc, #252]	; (80063d0 <HAL_DMA_Init+0x6a8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a3e      	ldr	r2, [pc, #248]	; (80063d4 <HAL_DMA_Init+0x6ac>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_DMA_Init+0x5c2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a3c      	ldr	r2, [pc, #240]	; (80063d8 <HAL_DMA_Init+0x6b0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_DMA_Init+0x5c6>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <HAL_DMA_Init+0x5c8>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d032      	beq.n	800635a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f002 fbf9 	bl	8008aec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d102      	bne.n	8006308 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800631c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d010      	beq.n	8006348 <HAL_DMA_Init+0x620>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b08      	cmp	r3, #8
 800632c:	d80c      	bhi.n	8006348 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f002 fc76 	bl	8008c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	e008      	b.n	800635a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	a7fdabf8 	.word	0xa7fdabf8
 8006378:	cccccccd 	.word	0xcccccccd
 800637c:	40020010 	.word	0x40020010
 8006380:	40020028 	.word	0x40020028
 8006384:	40020040 	.word	0x40020040
 8006388:	40020058 	.word	0x40020058
 800638c:	40020070 	.word	0x40020070
 8006390:	40020088 	.word	0x40020088
 8006394:	400200a0 	.word	0x400200a0
 8006398:	400200b8 	.word	0x400200b8
 800639c:	40020410 	.word	0x40020410
 80063a0:	40020428 	.word	0x40020428
 80063a4:	40020440 	.word	0x40020440
 80063a8:	40020458 	.word	0x40020458
 80063ac:	40020470 	.word	0x40020470
 80063b0:	40020488 	.word	0x40020488
 80063b4:	400204a0 	.word	0x400204a0
 80063b8:	400204b8 	.word	0x400204b8
 80063bc:	58025408 	.word	0x58025408
 80063c0:	5802541c 	.word	0x5802541c
 80063c4:	58025430 	.word	0x58025430
 80063c8:	58025444 	.word	0x58025444
 80063cc:	58025458 	.word	0x58025458
 80063d0:	5802546c 	.word	0x5802546c
 80063d4:	58025480 	.word	0x58025480
 80063d8:	58025494 	.word	0x58025494

080063dc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e1a8      	b.n	8006740 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a82      	ldr	r2, [pc, #520]	; (80065fc <HAL_DMA_DeInit+0x220>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d04a      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a80      	ldr	r2, [pc, #512]	; (8006600 <HAL_DMA_DeInit+0x224>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d045      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a7f      	ldr	r2, [pc, #508]	; (8006604 <HAL_DMA_DeInit+0x228>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d040      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a7d      	ldr	r2, [pc, #500]	; (8006608 <HAL_DMA_DeInit+0x22c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d03b      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a7c      	ldr	r2, [pc, #496]	; (800660c <HAL_DMA_DeInit+0x230>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d036      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a7a      	ldr	r2, [pc, #488]	; (8006610 <HAL_DMA_DeInit+0x234>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d031      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a79      	ldr	r2, [pc, #484]	; (8006614 <HAL_DMA_DeInit+0x238>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d02c      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a77      	ldr	r2, [pc, #476]	; (8006618 <HAL_DMA_DeInit+0x23c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d027      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a76      	ldr	r2, [pc, #472]	; (800661c <HAL_DMA_DeInit+0x240>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d022      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a74      	ldr	r2, [pc, #464]	; (8006620 <HAL_DMA_DeInit+0x244>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01d      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a73      	ldr	r2, [pc, #460]	; (8006624 <HAL_DMA_DeInit+0x248>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d018      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a71      	ldr	r2, [pc, #452]	; (8006628 <HAL_DMA_DeInit+0x24c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a70      	ldr	r2, [pc, #448]	; (800662c <HAL_DMA_DeInit+0x250>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00e      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a6e      	ldr	r2, [pc, #440]	; (8006630 <HAL_DMA_DeInit+0x254>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d009      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a6d      	ldr	r2, [pc, #436]	; (8006634 <HAL_DMA_DeInit+0x258>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_DMA_DeInit+0xb2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a6b      	ldr	r2, [pc, #428]	; (8006638 <HAL_DMA_DeInit+0x25c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d108      	bne.n	80064a0 <HAL_DMA_DeInit+0xc4>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0201 	bic.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e007      	b.n	80064b0 <HAL_DMA_DeInit+0xd4>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0201 	bic.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a51      	ldr	r2, [pc, #324]	; (80065fc <HAL_DMA_DeInit+0x220>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d04a      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a50      	ldr	r2, [pc, #320]	; (8006600 <HAL_DMA_DeInit+0x224>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d045      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a4e      	ldr	r2, [pc, #312]	; (8006604 <HAL_DMA_DeInit+0x228>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d040      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a4d      	ldr	r2, [pc, #308]	; (8006608 <HAL_DMA_DeInit+0x22c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d03b      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a4b      	ldr	r2, [pc, #300]	; (800660c <HAL_DMA_DeInit+0x230>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d036      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a4a      	ldr	r2, [pc, #296]	; (8006610 <HAL_DMA_DeInit+0x234>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d031      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a48      	ldr	r2, [pc, #288]	; (8006614 <HAL_DMA_DeInit+0x238>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d02c      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a47      	ldr	r2, [pc, #284]	; (8006618 <HAL_DMA_DeInit+0x23c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d027      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a45      	ldr	r2, [pc, #276]	; (800661c <HAL_DMA_DeInit+0x240>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d022      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a44      	ldr	r2, [pc, #272]	; (8006620 <HAL_DMA_DeInit+0x244>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d01d      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a42      	ldr	r2, [pc, #264]	; (8006624 <HAL_DMA_DeInit+0x248>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d018      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a41      	ldr	r2, [pc, #260]	; (8006628 <HAL_DMA_DeInit+0x24c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d013      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a3f      	ldr	r2, [pc, #252]	; (800662c <HAL_DMA_DeInit+0x250>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00e      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a3e      	ldr	r2, [pc, #248]	; (8006630 <HAL_DMA_DeInit+0x254>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a3c      	ldr	r2, [pc, #240]	; (8006634 <HAL_DMA_DeInit+0x258>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d004      	beq.n	8006550 <HAL_DMA_DeInit+0x174>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a3b      	ldr	r2, [pc, #236]	; (8006638 <HAL_DMA_DeInit+0x25c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d101      	bne.n	8006554 <HAL_DMA_DeInit+0x178>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <HAL_DMA_DeInit+0x17a>
 8006554:	2300      	movs	r3, #0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d025      	beq.n	80065a6 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2200      	movs	r2, #0
 8006568:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2200      	movs	r2, #0
 8006570:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2200      	movs	r2, #0
 8006578:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2221      	movs	r2, #33	; 0x21
 8006588:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f002 f980 	bl	8008890 <DMA_CalcBaseAndBitshift>
 8006590:	4603      	mov	r3, r0
 8006592:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	223f      	movs	r2, #63	; 0x3f
 800659e:	409a      	lsls	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	609a      	str	r2, [r3, #8]
 80065a4:	e081      	b.n	80066aa <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a24      	ldr	r2, [pc, #144]	; (800663c <HAL_DMA_DeInit+0x260>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d022      	beq.n	80065f6 <HAL_DMA_DeInit+0x21a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a22      	ldr	r2, [pc, #136]	; (8006640 <HAL_DMA_DeInit+0x264>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01d      	beq.n	80065f6 <HAL_DMA_DeInit+0x21a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a21      	ldr	r2, [pc, #132]	; (8006644 <HAL_DMA_DeInit+0x268>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d018      	beq.n	80065f6 <HAL_DMA_DeInit+0x21a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1f      	ldr	r2, [pc, #124]	; (8006648 <HAL_DMA_DeInit+0x26c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <HAL_DMA_DeInit+0x21a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1e      	ldr	r2, [pc, #120]	; (800664c <HAL_DMA_DeInit+0x270>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00e      	beq.n	80065f6 <HAL_DMA_DeInit+0x21a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <HAL_DMA_DeInit+0x274>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_DMA_DeInit+0x21a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <HAL_DMA_DeInit+0x278>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_DMA_DeInit+0x21a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a19      	ldr	r2, [pc, #100]	; (8006658 <HAL_DMA_DeInit+0x27c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d132      	bne.n	800665c <HAL_DMA_DeInit+0x280>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e031      	b.n	800665e <HAL_DMA_DeInit+0x282>
 80065fa:	bf00      	nop
 80065fc:	40020010 	.word	0x40020010
 8006600:	40020028 	.word	0x40020028
 8006604:	40020040 	.word	0x40020040
 8006608:	40020058 	.word	0x40020058
 800660c:	40020070 	.word	0x40020070
 8006610:	40020088 	.word	0x40020088
 8006614:	400200a0 	.word	0x400200a0
 8006618:	400200b8 	.word	0x400200b8
 800661c:	40020410 	.word	0x40020410
 8006620:	40020428 	.word	0x40020428
 8006624:	40020440 	.word	0x40020440
 8006628:	40020458 	.word	0x40020458
 800662c:	40020470 	.word	0x40020470
 8006630:	40020488 	.word	0x40020488
 8006634:	400204a0 	.word	0x400204a0
 8006638:	400204b8 	.word	0x400204b8
 800663c:	58025408 	.word	0x58025408
 8006640:	5802541c 	.word	0x5802541c
 8006644:	58025430 	.word	0x58025430
 8006648:	58025444 	.word	0x58025444
 800664c:	58025458 	.word	0x58025458
 8006650:	5802546c 	.word	0x5802546c
 8006654:	58025480 	.word	0x58025480
 8006658:	58025494 	.word	0x58025494
 800665c:	2300      	movs	r3, #0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d021      	beq.n	80066a6 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2200      	movs	r2, #0
 8006670:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2200      	movs	r2, #0
 8006678:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2200      	movs	r2, #0
 8006680:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2200      	movs	r2, #0
 8006688:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f002 f900 	bl	8008890 <DMA_CalcBaseAndBitshift>
 8006690:	4603      	mov	r3, r0
 8006692:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	2201      	movs	r2, #1
 800669e:	409a      	lsls	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	605a      	str	r2, [r3, #4]
 80066a4:	e001      	b.n	80066aa <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e04a      	b.n	8006740 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f002 fa1e 	bl	8008aec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d008      	beq.n	80066ca <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066c8:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00f      	beq.n	80066f2 <HAL_DMA_DeInit+0x316>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d80b      	bhi.n	80066f2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f002 faa0 	bl	8008c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066f0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e226      	b.n	8006bb2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_DMA_Start_IT+0x2a>
 800676e:	2302      	movs	r3, #2
 8006770:	e21f      	b.n	8006bb2 <HAL_DMA_Start_IT+0x46a>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	f040 820a 	bne.w	8006b9c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a68      	ldr	r2, [pc, #416]	; (800693c <HAL_DMA_Start_IT+0x1f4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d04a      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a66      	ldr	r2, [pc, #408]	; (8006940 <HAL_DMA_Start_IT+0x1f8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d045      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a65      	ldr	r2, [pc, #404]	; (8006944 <HAL_DMA_Start_IT+0x1fc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d040      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a63      	ldr	r2, [pc, #396]	; (8006948 <HAL_DMA_Start_IT+0x200>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d03b      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a62      	ldr	r2, [pc, #392]	; (800694c <HAL_DMA_Start_IT+0x204>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d036      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a60      	ldr	r2, [pc, #384]	; (8006950 <HAL_DMA_Start_IT+0x208>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d031      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a5f      	ldr	r2, [pc, #380]	; (8006954 <HAL_DMA_Start_IT+0x20c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d02c      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a5d      	ldr	r2, [pc, #372]	; (8006958 <HAL_DMA_Start_IT+0x210>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d027      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a5c      	ldr	r2, [pc, #368]	; (800695c <HAL_DMA_Start_IT+0x214>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d022      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a5a      	ldr	r2, [pc, #360]	; (8006960 <HAL_DMA_Start_IT+0x218>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d01d      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a59      	ldr	r2, [pc, #356]	; (8006964 <HAL_DMA_Start_IT+0x21c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d018      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a57      	ldr	r2, [pc, #348]	; (8006968 <HAL_DMA_Start_IT+0x220>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a56      	ldr	r2, [pc, #344]	; (800696c <HAL_DMA_Start_IT+0x224>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00e      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a54      	ldr	r2, [pc, #336]	; (8006970 <HAL_DMA_Start_IT+0x228>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d009      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a53      	ldr	r2, [pc, #332]	; (8006974 <HAL_DMA_Start_IT+0x22c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d004      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a51      	ldr	r2, [pc, #324]	; (8006978 <HAL_DMA_Start_IT+0x230>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d108      	bne.n	8006848 <HAL_DMA_Start_IT+0x100>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e007      	b.n	8006858 <HAL_DMA_Start_IT+0x110>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0201 	bic.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	68b9      	ldr	r1, [r7, #8]
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f001 fe6a 	bl	8008538 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a34      	ldr	r2, [pc, #208]	; (800693c <HAL_DMA_Start_IT+0x1f4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d04a      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a33      	ldr	r2, [pc, #204]	; (8006940 <HAL_DMA_Start_IT+0x1f8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d045      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a31      	ldr	r2, [pc, #196]	; (8006944 <HAL_DMA_Start_IT+0x1fc>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d040      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a30      	ldr	r2, [pc, #192]	; (8006948 <HAL_DMA_Start_IT+0x200>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d03b      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a2e      	ldr	r2, [pc, #184]	; (800694c <HAL_DMA_Start_IT+0x204>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d036      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2d      	ldr	r2, [pc, #180]	; (8006950 <HAL_DMA_Start_IT+0x208>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d031      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2b      	ldr	r2, [pc, #172]	; (8006954 <HAL_DMA_Start_IT+0x20c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d02c      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2a      	ldr	r2, [pc, #168]	; (8006958 <HAL_DMA_Start_IT+0x210>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d027      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a28      	ldr	r2, [pc, #160]	; (800695c <HAL_DMA_Start_IT+0x214>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a27      	ldr	r2, [pc, #156]	; (8006960 <HAL_DMA_Start_IT+0x218>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d01d      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a25      	ldr	r2, [pc, #148]	; (8006964 <HAL_DMA_Start_IT+0x21c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a24      	ldr	r2, [pc, #144]	; (8006968 <HAL_DMA_Start_IT+0x220>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a22      	ldr	r2, [pc, #136]	; (800696c <HAL_DMA_Start_IT+0x224>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a21      	ldr	r2, [pc, #132]	; (8006970 <HAL_DMA_Start_IT+0x228>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <HAL_DMA_Start_IT+0x22c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <HAL_DMA_Start_IT+0x230>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d101      	bne.n	8006908 <HAL_DMA_Start_IT+0x1c0>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <HAL_DMA_Start_IT+0x1c2>
 8006908:	2300      	movs	r3, #0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d036      	beq.n	800697c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f023 021e 	bic.w	r2, r3, #30
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0216 	orr.w	r2, r2, #22
 8006920:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d03e      	beq.n	80069a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0208 	orr.w	r2, r2, #8
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e035      	b.n	80069a8 <HAL_DMA_Start_IT+0x260>
 800693c:	40020010 	.word	0x40020010
 8006940:	40020028 	.word	0x40020028
 8006944:	40020040 	.word	0x40020040
 8006948:	40020058 	.word	0x40020058
 800694c:	40020070 	.word	0x40020070
 8006950:	40020088 	.word	0x40020088
 8006954:	400200a0 	.word	0x400200a0
 8006958:	400200b8 	.word	0x400200b8
 800695c:	40020410 	.word	0x40020410
 8006960:	40020428 	.word	0x40020428
 8006964:	40020440 	.word	0x40020440
 8006968:	40020458 	.word	0x40020458
 800696c:	40020470 	.word	0x40020470
 8006970:	40020488 	.word	0x40020488
 8006974:	400204a0 	.word	0x400204a0
 8006978:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f023 020e 	bic.w	r2, r3, #14
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 020a 	orr.w	r2, r2, #10
 800698e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0204 	orr.w	r2, r2, #4
 80069a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a83      	ldr	r2, [pc, #524]	; (8006bbc <HAL_DMA_Start_IT+0x474>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d072      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a82      	ldr	r2, [pc, #520]	; (8006bc0 <HAL_DMA_Start_IT+0x478>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d06d      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a80      	ldr	r2, [pc, #512]	; (8006bc4 <HAL_DMA_Start_IT+0x47c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d068      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a7f      	ldr	r2, [pc, #508]	; (8006bc8 <HAL_DMA_Start_IT+0x480>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d063      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a7d      	ldr	r2, [pc, #500]	; (8006bcc <HAL_DMA_Start_IT+0x484>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d05e      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a7c      	ldr	r2, [pc, #496]	; (8006bd0 <HAL_DMA_Start_IT+0x488>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d059      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a7a      	ldr	r2, [pc, #488]	; (8006bd4 <HAL_DMA_Start_IT+0x48c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d054      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a79      	ldr	r2, [pc, #484]	; (8006bd8 <HAL_DMA_Start_IT+0x490>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d04f      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a77      	ldr	r2, [pc, #476]	; (8006bdc <HAL_DMA_Start_IT+0x494>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d04a      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a76      	ldr	r2, [pc, #472]	; (8006be0 <HAL_DMA_Start_IT+0x498>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d045      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a74      	ldr	r2, [pc, #464]	; (8006be4 <HAL_DMA_Start_IT+0x49c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d040      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a73      	ldr	r2, [pc, #460]	; (8006be8 <HAL_DMA_Start_IT+0x4a0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d03b      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a71      	ldr	r2, [pc, #452]	; (8006bec <HAL_DMA_Start_IT+0x4a4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d036      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a70      	ldr	r2, [pc, #448]	; (8006bf0 <HAL_DMA_Start_IT+0x4a8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d031      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a6e      	ldr	r2, [pc, #440]	; (8006bf4 <HAL_DMA_Start_IT+0x4ac>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d02c      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a6d      	ldr	r2, [pc, #436]	; (8006bf8 <HAL_DMA_Start_IT+0x4b0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d027      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a6b      	ldr	r2, [pc, #428]	; (8006bfc <HAL_DMA_Start_IT+0x4b4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d022      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a6a      	ldr	r2, [pc, #424]	; (8006c00 <HAL_DMA_Start_IT+0x4b8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d01d      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a68      	ldr	r2, [pc, #416]	; (8006c04 <HAL_DMA_Start_IT+0x4bc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d018      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a67      	ldr	r2, [pc, #412]	; (8006c08 <HAL_DMA_Start_IT+0x4c0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d013      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a65      	ldr	r2, [pc, #404]	; (8006c0c <HAL_DMA_Start_IT+0x4c4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00e      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a64      	ldr	r2, [pc, #400]	; (8006c10 <HAL_DMA_Start_IT+0x4c8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d009      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a62      	ldr	r2, [pc, #392]	; (8006c14 <HAL_DMA_Start_IT+0x4cc>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d004      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a61      	ldr	r2, [pc, #388]	; (8006c18 <HAL_DMA_Start_IT+0x4d0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d101      	bne.n	8006a9c <HAL_DMA_Start_IT+0x354>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <HAL_DMA_Start_IT+0x356>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01a      	beq.n	8006ad8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d007      	beq.n	8006ac0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006abe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ad6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a37      	ldr	r2, [pc, #220]	; (8006bbc <HAL_DMA_Start_IT+0x474>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d04a      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a36      	ldr	r2, [pc, #216]	; (8006bc0 <HAL_DMA_Start_IT+0x478>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d045      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a34      	ldr	r2, [pc, #208]	; (8006bc4 <HAL_DMA_Start_IT+0x47c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d040      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a33      	ldr	r2, [pc, #204]	; (8006bc8 <HAL_DMA_Start_IT+0x480>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d03b      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a31      	ldr	r2, [pc, #196]	; (8006bcc <HAL_DMA_Start_IT+0x484>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d036      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a30      	ldr	r2, [pc, #192]	; (8006bd0 <HAL_DMA_Start_IT+0x488>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d031      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a2e      	ldr	r2, [pc, #184]	; (8006bd4 <HAL_DMA_Start_IT+0x48c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d02c      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2d      	ldr	r2, [pc, #180]	; (8006bd8 <HAL_DMA_Start_IT+0x490>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d027      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2b      	ldr	r2, [pc, #172]	; (8006bdc <HAL_DMA_Start_IT+0x494>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d022      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2a      	ldr	r2, [pc, #168]	; (8006be0 <HAL_DMA_Start_IT+0x498>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d01d      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a28      	ldr	r2, [pc, #160]	; (8006be4 <HAL_DMA_Start_IT+0x49c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d018      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a27      	ldr	r2, [pc, #156]	; (8006be8 <HAL_DMA_Start_IT+0x4a0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d013      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a25      	ldr	r2, [pc, #148]	; (8006bec <HAL_DMA_Start_IT+0x4a4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00e      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a24      	ldr	r2, [pc, #144]	; (8006bf0 <HAL_DMA_Start_IT+0x4a8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <HAL_DMA_Start_IT+0x4ac>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <HAL_DMA_Start_IT+0x4b0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d108      	bne.n	8006b8a <HAL_DMA_Start_IT+0x442>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e012      	b.n	8006bb0 <HAL_DMA_Start_IT+0x468>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0201 	orr.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e009      	b.n	8006bb0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40020010 	.word	0x40020010
 8006bc0:	40020028 	.word	0x40020028
 8006bc4:	40020040 	.word	0x40020040
 8006bc8:	40020058 	.word	0x40020058
 8006bcc:	40020070 	.word	0x40020070
 8006bd0:	40020088 	.word	0x40020088
 8006bd4:	400200a0 	.word	0x400200a0
 8006bd8:	400200b8 	.word	0x400200b8
 8006bdc:	40020410 	.word	0x40020410
 8006be0:	40020428 	.word	0x40020428
 8006be4:	40020440 	.word	0x40020440
 8006be8:	40020458 	.word	0x40020458
 8006bec:	40020470 	.word	0x40020470
 8006bf0:	40020488 	.word	0x40020488
 8006bf4:	400204a0 	.word	0x400204a0
 8006bf8:	400204b8 	.word	0x400204b8
 8006bfc:	58025408 	.word	0x58025408
 8006c00:	5802541c 	.word	0x5802541c
 8006c04:	58025430 	.word	0x58025430
 8006c08:	58025444 	.word	0x58025444
 8006c0c:	58025458 	.word	0x58025458
 8006c10:	5802546c 	.word	0x5802546c
 8006c14:	58025480 	.word	0x58025480
 8006c18:	58025494 	.word	0x58025494

08006c1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006c24:	f7fe ff32 	bl	8005a8c <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e2dc      	b.n	80071ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d008      	beq.n	8006c52 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2280      	movs	r2, #128	; 0x80
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e2cd      	b.n	80071ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a76      	ldr	r2, [pc, #472]	; (8006e30 <HAL_DMA_Abort+0x214>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d04a      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a74      	ldr	r2, [pc, #464]	; (8006e34 <HAL_DMA_Abort+0x218>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d045      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a73      	ldr	r2, [pc, #460]	; (8006e38 <HAL_DMA_Abort+0x21c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d040      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a71      	ldr	r2, [pc, #452]	; (8006e3c <HAL_DMA_Abort+0x220>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d03b      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a70      	ldr	r2, [pc, #448]	; (8006e40 <HAL_DMA_Abort+0x224>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d036      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a6e      	ldr	r2, [pc, #440]	; (8006e44 <HAL_DMA_Abort+0x228>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d031      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a6d      	ldr	r2, [pc, #436]	; (8006e48 <HAL_DMA_Abort+0x22c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d02c      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a6b      	ldr	r2, [pc, #428]	; (8006e4c <HAL_DMA_Abort+0x230>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d027      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a6a      	ldr	r2, [pc, #424]	; (8006e50 <HAL_DMA_Abort+0x234>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d022      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a68      	ldr	r2, [pc, #416]	; (8006e54 <HAL_DMA_Abort+0x238>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d01d      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a67      	ldr	r2, [pc, #412]	; (8006e58 <HAL_DMA_Abort+0x23c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d018      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a65      	ldr	r2, [pc, #404]	; (8006e5c <HAL_DMA_Abort+0x240>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a64      	ldr	r2, [pc, #400]	; (8006e60 <HAL_DMA_Abort+0x244>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a62      	ldr	r2, [pc, #392]	; (8006e64 <HAL_DMA_Abort+0x248>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d009      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a61      	ldr	r2, [pc, #388]	; (8006e68 <HAL_DMA_Abort+0x24c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d004      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a5f      	ldr	r2, [pc, #380]	; (8006e6c <HAL_DMA_Abort+0x250>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d101      	bne.n	8006cf6 <HAL_DMA_Abort+0xda>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <HAL_DMA_Abort+0xdc>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d013      	beq.n	8006d24 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 021e 	bic.w	r2, r2, #30
 8006d0a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695a      	ldr	r2, [r3, #20]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d1a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	e00a      	b.n	8006d3a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 020e 	bic.w	r2, r2, #14
 8006d32:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a3c      	ldr	r2, [pc, #240]	; (8006e30 <HAL_DMA_Abort+0x214>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d072      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a3a      	ldr	r2, [pc, #232]	; (8006e34 <HAL_DMA_Abort+0x218>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d06d      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a39      	ldr	r2, [pc, #228]	; (8006e38 <HAL_DMA_Abort+0x21c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d068      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a37      	ldr	r2, [pc, #220]	; (8006e3c <HAL_DMA_Abort+0x220>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d063      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a36      	ldr	r2, [pc, #216]	; (8006e40 <HAL_DMA_Abort+0x224>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d05e      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a34      	ldr	r2, [pc, #208]	; (8006e44 <HAL_DMA_Abort+0x228>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d059      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a33      	ldr	r2, [pc, #204]	; (8006e48 <HAL_DMA_Abort+0x22c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d054      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a31      	ldr	r2, [pc, #196]	; (8006e4c <HAL_DMA_Abort+0x230>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d04f      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <HAL_DMA_Abort+0x234>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d04a      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a2e      	ldr	r2, [pc, #184]	; (8006e54 <HAL_DMA_Abort+0x238>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d045      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a2d      	ldr	r2, [pc, #180]	; (8006e58 <HAL_DMA_Abort+0x23c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d040      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a2b      	ldr	r2, [pc, #172]	; (8006e5c <HAL_DMA_Abort+0x240>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d03b      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <HAL_DMA_Abort+0x244>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d036      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a28      	ldr	r2, [pc, #160]	; (8006e64 <HAL_DMA_Abort+0x248>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d031      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a27      	ldr	r2, [pc, #156]	; (8006e68 <HAL_DMA_Abort+0x24c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d02c      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <HAL_DMA_Abort+0x250>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d027      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a24      	ldr	r2, [pc, #144]	; (8006e70 <HAL_DMA_Abort+0x254>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <HAL_DMA_Abort+0x258>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01d      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a21      	ldr	r2, [pc, #132]	; (8006e78 <HAL_DMA_Abort+0x25c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1f      	ldr	r2, [pc, #124]	; (8006e7c <HAL_DMA_Abort+0x260>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <HAL_DMA_Abort+0x264>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a1c      	ldr	r2, [pc, #112]	; (8006e84 <HAL_DMA_Abort+0x268>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a1b      	ldr	r2, [pc, #108]	; (8006e88 <HAL_DMA_Abort+0x26c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a19      	ldr	r2, [pc, #100]	; (8006e8c <HAL_DMA_Abort+0x270>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d132      	bne.n	8006e90 <HAL_DMA_Abort+0x274>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e031      	b.n	8006e92 <HAL_DMA_Abort+0x276>
 8006e2e:	bf00      	nop
 8006e30:	40020010 	.word	0x40020010
 8006e34:	40020028 	.word	0x40020028
 8006e38:	40020040 	.word	0x40020040
 8006e3c:	40020058 	.word	0x40020058
 8006e40:	40020070 	.word	0x40020070
 8006e44:	40020088 	.word	0x40020088
 8006e48:	400200a0 	.word	0x400200a0
 8006e4c:	400200b8 	.word	0x400200b8
 8006e50:	40020410 	.word	0x40020410
 8006e54:	40020428 	.word	0x40020428
 8006e58:	40020440 	.word	0x40020440
 8006e5c:	40020458 	.word	0x40020458
 8006e60:	40020470 	.word	0x40020470
 8006e64:	40020488 	.word	0x40020488
 8006e68:	400204a0 	.word	0x400204a0
 8006e6c:	400204b8 	.word	0x400204b8
 8006e70:	58025408 	.word	0x58025408
 8006e74:	5802541c 	.word	0x5802541c
 8006e78:	58025430 	.word	0x58025430
 8006e7c:	58025444 	.word	0x58025444
 8006e80:	58025458 	.word	0x58025458
 8006e84:	5802546c 	.word	0x5802546c
 8006e88:	58025480 	.word	0x58025480
 8006e8c:	58025494 	.word	0x58025494
 8006e90:	2300      	movs	r3, #0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a6d      	ldr	r2, [pc, #436]	; (8007060 <HAL_DMA_Abort+0x444>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d04a      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a6b      	ldr	r2, [pc, #428]	; (8007064 <HAL_DMA_Abort+0x448>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d045      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a6a      	ldr	r2, [pc, #424]	; (8007068 <HAL_DMA_Abort+0x44c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d040      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a68      	ldr	r2, [pc, #416]	; (800706c <HAL_DMA_Abort+0x450>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d03b      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a67      	ldr	r2, [pc, #412]	; (8007070 <HAL_DMA_Abort+0x454>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d036      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a65      	ldr	r2, [pc, #404]	; (8007074 <HAL_DMA_Abort+0x458>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d031      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a64      	ldr	r2, [pc, #400]	; (8007078 <HAL_DMA_Abort+0x45c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d02c      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a62      	ldr	r2, [pc, #392]	; (800707c <HAL_DMA_Abort+0x460>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d027      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a61      	ldr	r2, [pc, #388]	; (8007080 <HAL_DMA_Abort+0x464>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d022      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a5f      	ldr	r2, [pc, #380]	; (8007084 <HAL_DMA_Abort+0x468>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d01d      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a5e      	ldr	r2, [pc, #376]	; (8007088 <HAL_DMA_Abort+0x46c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d018      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a5c      	ldr	r2, [pc, #368]	; (800708c <HAL_DMA_Abort+0x470>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d013      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a5b      	ldr	r2, [pc, #364]	; (8007090 <HAL_DMA_Abort+0x474>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00e      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a59      	ldr	r2, [pc, #356]	; (8007094 <HAL_DMA_Abort+0x478>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d009      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a58      	ldr	r2, [pc, #352]	; (8007098 <HAL_DMA_Abort+0x47c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d004      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a56      	ldr	r2, [pc, #344]	; (800709c <HAL_DMA_Abort+0x480>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d108      	bne.n	8006f58 <HAL_DMA_Abort+0x33c>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e007      	b.n	8006f68 <HAL_DMA_Abort+0x34c>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f68:	e013      	b.n	8006f92 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f6a:	f7fe fd8f 	bl	8005a8c <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b05      	cmp	r3, #5
 8006f76:	d90c      	bls.n	8006f92 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2203      	movs	r2, #3
 8006f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e12d      	b.n	80071ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e5      	bne.n	8006f6a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2f      	ldr	r2, [pc, #188]	; (8007060 <HAL_DMA_Abort+0x444>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d04a      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2d      	ldr	r2, [pc, #180]	; (8007064 <HAL_DMA_Abort+0x448>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d045      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2c      	ldr	r2, [pc, #176]	; (8007068 <HAL_DMA_Abort+0x44c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d040      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2a      	ldr	r2, [pc, #168]	; (800706c <HAL_DMA_Abort+0x450>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d03b      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a29      	ldr	r2, [pc, #164]	; (8007070 <HAL_DMA_Abort+0x454>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d036      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a27      	ldr	r2, [pc, #156]	; (8007074 <HAL_DMA_Abort+0x458>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d031      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a26      	ldr	r2, [pc, #152]	; (8007078 <HAL_DMA_Abort+0x45c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d02c      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a24      	ldr	r2, [pc, #144]	; (800707c <HAL_DMA_Abort+0x460>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d027      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a23      	ldr	r2, [pc, #140]	; (8007080 <HAL_DMA_Abort+0x464>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a21      	ldr	r2, [pc, #132]	; (8007084 <HAL_DMA_Abort+0x468>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a20      	ldr	r2, [pc, #128]	; (8007088 <HAL_DMA_Abort+0x46c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_DMA_Abort+0x422>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1e      	ldr	r2, [pc, #120]	; (800708c <HAL_DMA_Abort+0x470>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1d      	ldr	r2, [pc, #116]	; (8007090 <HAL_DMA_Abort+0x474>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1b      	ldr	r2, [pc, #108]	; (8007094 <HAL_DMA_Abort+0x478>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_DMA_Abort+0x422>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1a      	ldr	r2, [pc, #104]	; (8007098 <HAL_DMA_Abort+0x47c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a18      	ldr	r2, [pc, #96]	; (800709c <HAL_DMA_Abort+0x480>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <HAL_DMA_Abort+0x426>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <HAL_DMA_Abort+0x428>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d02b      	beq.n	80070a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	223f      	movs	r2, #63	; 0x3f
 8007058:	409a      	lsls	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	609a      	str	r2, [r3, #8]
 800705e:	e02a      	b.n	80070b6 <HAL_DMA_Abort+0x49a>
 8007060:	40020010 	.word	0x40020010
 8007064:	40020028 	.word	0x40020028
 8007068:	40020040 	.word	0x40020040
 800706c:	40020058 	.word	0x40020058
 8007070:	40020070 	.word	0x40020070
 8007074:	40020088 	.word	0x40020088
 8007078:	400200a0 	.word	0x400200a0
 800707c:	400200b8 	.word	0x400200b8
 8007080:	40020410 	.word	0x40020410
 8007084:	40020428 	.word	0x40020428
 8007088:	40020440 	.word	0x40020440
 800708c:	40020458 	.word	0x40020458
 8007090:	40020470 	.word	0x40020470
 8007094:	40020488 	.word	0x40020488
 8007098:	400204a0 	.word	0x400204a0
 800709c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2201      	movs	r2, #1
 80070b0:	409a      	lsls	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a4f      	ldr	r2, [pc, #316]	; (80071f8 <HAL_DMA_Abort+0x5dc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d072      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a4d      	ldr	r2, [pc, #308]	; (80071fc <HAL_DMA_Abort+0x5e0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d06d      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a4c      	ldr	r2, [pc, #304]	; (8007200 <HAL_DMA_Abort+0x5e4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d068      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a4a      	ldr	r2, [pc, #296]	; (8007204 <HAL_DMA_Abort+0x5e8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d063      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a49      	ldr	r2, [pc, #292]	; (8007208 <HAL_DMA_Abort+0x5ec>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d05e      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a47      	ldr	r2, [pc, #284]	; (800720c <HAL_DMA_Abort+0x5f0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d059      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a46      	ldr	r2, [pc, #280]	; (8007210 <HAL_DMA_Abort+0x5f4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d054      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a44      	ldr	r2, [pc, #272]	; (8007214 <HAL_DMA_Abort+0x5f8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d04f      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a43      	ldr	r2, [pc, #268]	; (8007218 <HAL_DMA_Abort+0x5fc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d04a      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a41      	ldr	r2, [pc, #260]	; (800721c <HAL_DMA_Abort+0x600>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d045      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a40      	ldr	r2, [pc, #256]	; (8007220 <HAL_DMA_Abort+0x604>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d040      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a3e      	ldr	r2, [pc, #248]	; (8007224 <HAL_DMA_Abort+0x608>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d03b      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a3d      	ldr	r2, [pc, #244]	; (8007228 <HAL_DMA_Abort+0x60c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d036      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a3b      	ldr	r2, [pc, #236]	; (800722c <HAL_DMA_Abort+0x610>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d031      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a3a      	ldr	r2, [pc, #232]	; (8007230 <HAL_DMA_Abort+0x614>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d02c      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a38      	ldr	r2, [pc, #224]	; (8007234 <HAL_DMA_Abort+0x618>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d027      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a37      	ldr	r2, [pc, #220]	; (8007238 <HAL_DMA_Abort+0x61c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d022      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a35      	ldr	r2, [pc, #212]	; (800723c <HAL_DMA_Abort+0x620>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d01d      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a34      	ldr	r2, [pc, #208]	; (8007240 <HAL_DMA_Abort+0x624>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d018      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a32      	ldr	r2, [pc, #200]	; (8007244 <HAL_DMA_Abort+0x628>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d013      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a31      	ldr	r2, [pc, #196]	; (8007248 <HAL_DMA_Abort+0x62c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00e      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a2f      	ldr	r2, [pc, #188]	; (800724c <HAL_DMA_Abort+0x630>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d009      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a2e      	ldr	r2, [pc, #184]	; (8007250 <HAL_DMA_Abort+0x634>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d004      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a2c      	ldr	r2, [pc, #176]	; (8007254 <HAL_DMA_Abort+0x638>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d101      	bne.n	80071aa <HAL_DMA_Abort+0x58e>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <HAL_DMA_Abort+0x590>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d015      	beq.n	80071dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00c      	beq.n	80071dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40020010 	.word	0x40020010
 80071fc:	40020028 	.word	0x40020028
 8007200:	40020040 	.word	0x40020040
 8007204:	40020058 	.word	0x40020058
 8007208:	40020070 	.word	0x40020070
 800720c:	40020088 	.word	0x40020088
 8007210:	400200a0 	.word	0x400200a0
 8007214:	400200b8 	.word	0x400200b8
 8007218:	40020410 	.word	0x40020410
 800721c:	40020428 	.word	0x40020428
 8007220:	40020440 	.word	0x40020440
 8007224:	40020458 	.word	0x40020458
 8007228:	40020470 	.word	0x40020470
 800722c:	40020488 	.word	0x40020488
 8007230:	400204a0 	.word	0x400204a0
 8007234:	400204b8 	.word	0x400204b8
 8007238:	58025408 	.word	0x58025408
 800723c:	5802541c 	.word	0x5802541c
 8007240:	58025430 	.word	0x58025430
 8007244:	58025444 	.word	0x58025444
 8007248:	58025458 	.word	0x58025458
 800724c:	5802546c 	.word	0x5802546c
 8007250:	58025480 	.word	0x58025480
 8007254:	58025494 	.word	0x58025494

08007258 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e237      	b.n	80076da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d004      	beq.n	8007280 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2280      	movs	r2, #128	; 0x80
 800727a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e22c      	b.n	80076da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a5c      	ldr	r2, [pc, #368]	; (80073f8 <HAL_DMA_Abort_IT+0x1a0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d04a      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a5b      	ldr	r2, [pc, #364]	; (80073fc <HAL_DMA_Abort_IT+0x1a4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d045      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a59      	ldr	r2, [pc, #356]	; (8007400 <HAL_DMA_Abort_IT+0x1a8>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d040      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a58      	ldr	r2, [pc, #352]	; (8007404 <HAL_DMA_Abort_IT+0x1ac>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d03b      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a56      	ldr	r2, [pc, #344]	; (8007408 <HAL_DMA_Abort_IT+0x1b0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d036      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a55      	ldr	r2, [pc, #340]	; (800740c <HAL_DMA_Abort_IT+0x1b4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d031      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a53      	ldr	r2, [pc, #332]	; (8007410 <HAL_DMA_Abort_IT+0x1b8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d02c      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a52      	ldr	r2, [pc, #328]	; (8007414 <HAL_DMA_Abort_IT+0x1bc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d027      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a50      	ldr	r2, [pc, #320]	; (8007418 <HAL_DMA_Abort_IT+0x1c0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d022      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a4f      	ldr	r2, [pc, #316]	; (800741c <HAL_DMA_Abort_IT+0x1c4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d01d      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a4d      	ldr	r2, [pc, #308]	; (8007420 <HAL_DMA_Abort_IT+0x1c8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d018      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a4c      	ldr	r2, [pc, #304]	; (8007424 <HAL_DMA_Abort_IT+0x1cc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d013      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a4a      	ldr	r2, [pc, #296]	; (8007428 <HAL_DMA_Abort_IT+0x1d0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00e      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a49      	ldr	r2, [pc, #292]	; (800742c <HAL_DMA_Abort_IT+0x1d4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d009      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a47      	ldr	r2, [pc, #284]	; (8007430 <HAL_DMA_Abort_IT+0x1d8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d004      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a46      	ldr	r2, [pc, #280]	; (8007434 <HAL_DMA_Abort_IT+0x1dc>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d101      	bne.n	8007324 <HAL_DMA_Abort_IT+0xcc>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <HAL_DMA_Abort_IT+0xce>
 8007324:	2300      	movs	r3, #0
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8086 	beq.w	8007438 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2204      	movs	r2, #4
 8007330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a2f      	ldr	r2, [pc, #188]	; (80073f8 <HAL_DMA_Abort_IT+0x1a0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d04a      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a2e      	ldr	r2, [pc, #184]	; (80073fc <HAL_DMA_Abort_IT+0x1a4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d045      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a2c      	ldr	r2, [pc, #176]	; (8007400 <HAL_DMA_Abort_IT+0x1a8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d040      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2b      	ldr	r2, [pc, #172]	; (8007404 <HAL_DMA_Abort_IT+0x1ac>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d03b      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a29      	ldr	r2, [pc, #164]	; (8007408 <HAL_DMA_Abort_IT+0x1b0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d036      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a28      	ldr	r2, [pc, #160]	; (800740c <HAL_DMA_Abort_IT+0x1b4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d031      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a26      	ldr	r2, [pc, #152]	; (8007410 <HAL_DMA_Abort_IT+0x1b8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d02c      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a25      	ldr	r2, [pc, #148]	; (8007414 <HAL_DMA_Abort_IT+0x1bc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d027      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a23      	ldr	r2, [pc, #140]	; (8007418 <HAL_DMA_Abort_IT+0x1c0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d022      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a22      	ldr	r2, [pc, #136]	; (800741c <HAL_DMA_Abort_IT+0x1c4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d01d      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a20      	ldr	r2, [pc, #128]	; (8007420 <HAL_DMA_Abort_IT+0x1c8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d018      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1f      	ldr	r2, [pc, #124]	; (8007424 <HAL_DMA_Abort_IT+0x1cc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d013      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <HAL_DMA_Abort_IT+0x1d0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00e      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a1c      	ldr	r2, [pc, #112]	; (800742c <HAL_DMA_Abort_IT+0x1d4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d009      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a1a      	ldr	r2, [pc, #104]	; (8007430 <HAL_DMA_Abort_IT+0x1d8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a19      	ldr	r2, [pc, #100]	; (8007434 <HAL_DMA_Abort_IT+0x1dc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d108      	bne.n	80073e6 <HAL_DMA_Abort_IT+0x18e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0201 	bic.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	e178      	b.n	80076d8 <HAL_DMA_Abort_IT+0x480>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0201 	bic.w	r2, r2, #1
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	e16f      	b.n	80076d8 <HAL_DMA_Abort_IT+0x480>
 80073f8:	40020010 	.word	0x40020010
 80073fc:	40020028 	.word	0x40020028
 8007400:	40020040 	.word	0x40020040
 8007404:	40020058 	.word	0x40020058
 8007408:	40020070 	.word	0x40020070
 800740c:	40020088 	.word	0x40020088
 8007410:	400200a0 	.word	0x400200a0
 8007414:	400200b8 	.word	0x400200b8
 8007418:	40020410 	.word	0x40020410
 800741c:	40020428 	.word	0x40020428
 8007420:	40020440 	.word	0x40020440
 8007424:	40020458 	.word	0x40020458
 8007428:	40020470 	.word	0x40020470
 800742c:	40020488 	.word	0x40020488
 8007430:	400204a0 	.word	0x400204a0
 8007434:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 020e 	bic.w	r2, r2, #14
 8007446:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a6c      	ldr	r2, [pc, #432]	; (8007600 <HAL_DMA_Abort_IT+0x3a8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d04a      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a6b      	ldr	r2, [pc, #428]	; (8007604 <HAL_DMA_Abort_IT+0x3ac>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d045      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a69      	ldr	r2, [pc, #420]	; (8007608 <HAL_DMA_Abort_IT+0x3b0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d040      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a68      	ldr	r2, [pc, #416]	; (800760c <HAL_DMA_Abort_IT+0x3b4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d03b      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a66      	ldr	r2, [pc, #408]	; (8007610 <HAL_DMA_Abort_IT+0x3b8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d036      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a65      	ldr	r2, [pc, #404]	; (8007614 <HAL_DMA_Abort_IT+0x3bc>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d031      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a63      	ldr	r2, [pc, #396]	; (8007618 <HAL_DMA_Abort_IT+0x3c0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d02c      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a62      	ldr	r2, [pc, #392]	; (800761c <HAL_DMA_Abort_IT+0x3c4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d027      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a60      	ldr	r2, [pc, #384]	; (8007620 <HAL_DMA_Abort_IT+0x3c8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d022      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a5f      	ldr	r2, [pc, #380]	; (8007624 <HAL_DMA_Abort_IT+0x3cc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d01d      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a5d      	ldr	r2, [pc, #372]	; (8007628 <HAL_DMA_Abort_IT+0x3d0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d018      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a5c      	ldr	r2, [pc, #368]	; (800762c <HAL_DMA_Abort_IT+0x3d4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a5a      	ldr	r2, [pc, #360]	; (8007630 <HAL_DMA_Abort_IT+0x3d8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a59      	ldr	r2, [pc, #356]	; (8007634 <HAL_DMA_Abort_IT+0x3dc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a57      	ldr	r2, [pc, #348]	; (8007638 <HAL_DMA_Abort_IT+0x3e0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a56      	ldr	r2, [pc, #344]	; (800763c <HAL_DMA_Abort_IT+0x3e4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <HAL_DMA_Abort_IT+0x2a2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e007      	b.n	800750a <HAL_DMA_Abort_IT+0x2b2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a3c      	ldr	r2, [pc, #240]	; (8007600 <HAL_DMA_Abort_IT+0x3a8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d072      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a3a      	ldr	r2, [pc, #232]	; (8007604 <HAL_DMA_Abort_IT+0x3ac>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d06d      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a39      	ldr	r2, [pc, #228]	; (8007608 <HAL_DMA_Abort_IT+0x3b0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d068      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a37      	ldr	r2, [pc, #220]	; (800760c <HAL_DMA_Abort_IT+0x3b4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d063      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a36      	ldr	r2, [pc, #216]	; (8007610 <HAL_DMA_Abort_IT+0x3b8>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d05e      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a34      	ldr	r2, [pc, #208]	; (8007614 <HAL_DMA_Abort_IT+0x3bc>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d059      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a33      	ldr	r2, [pc, #204]	; (8007618 <HAL_DMA_Abort_IT+0x3c0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d054      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a31      	ldr	r2, [pc, #196]	; (800761c <HAL_DMA_Abort_IT+0x3c4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d04f      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a30      	ldr	r2, [pc, #192]	; (8007620 <HAL_DMA_Abort_IT+0x3c8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d04a      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a2e      	ldr	r2, [pc, #184]	; (8007624 <HAL_DMA_Abort_IT+0x3cc>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d045      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a2d      	ldr	r2, [pc, #180]	; (8007628 <HAL_DMA_Abort_IT+0x3d0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d040      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a2b      	ldr	r2, [pc, #172]	; (800762c <HAL_DMA_Abort_IT+0x3d4>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d03b      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a2a      	ldr	r2, [pc, #168]	; (8007630 <HAL_DMA_Abort_IT+0x3d8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d036      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a28      	ldr	r2, [pc, #160]	; (8007634 <HAL_DMA_Abort_IT+0x3dc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d031      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a27      	ldr	r2, [pc, #156]	; (8007638 <HAL_DMA_Abort_IT+0x3e0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d02c      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a25      	ldr	r2, [pc, #148]	; (800763c <HAL_DMA_Abort_IT+0x3e4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d027      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a24      	ldr	r2, [pc, #144]	; (8007640 <HAL_DMA_Abort_IT+0x3e8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d022      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a22      	ldr	r2, [pc, #136]	; (8007644 <HAL_DMA_Abort_IT+0x3ec>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01d      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a21      	ldr	r2, [pc, #132]	; (8007648 <HAL_DMA_Abort_IT+0x3f0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d018      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a1f      	ldr	r2, [pc, #124]	; (800764c <HAL_DMA_Abort_IT+0x3f4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d013      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a1e      	ldr	r2, [pc, #120]	; (8007650 <HAL_DMA_Abort_IT+0x3f8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00e      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1c      	ldr	r2, [pc, #112]	; (8007654 <HAL_DMA_Abort_IT+0x3fc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d009      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a1b      	ldr	r2, [pc, #108]	; (8007658 <HAL_DMA_Abort_IT+0x400>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d004      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a19      	ldr	r2, [pc, #100]	; (800765c <HAL_DMA_Abort_IT+0x404>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d132      	bne.n	8007660 <HAL_DMA_Abort_IT+0x408>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e031      	b.n	8007662 <HAL_DMA_Abort_IT+0x40a>
 80075fe:	bf00      	nop
 8007600:	40020010 	.word	0x40020010
 8007604:	40020028 	.word	0x40020028
 8007608:	40020040 	.word	0x40020040
 800760c:	40020058 	.word	0x40020058
 8007610:	40020070 	.word	0x40020070
 8007614:	40020088 	.word	0x40020088
 8007618:	400200a0 	.word	0x400200a0
 800761c:	400200b8 	.word	0x400200b8
 8007620:	40020410 	.word	0x40020410
 8007624:	40020428 	.word	0x40020428
 8007628:	40020440 	.word	0x40020440
 800762c:	40020458 	.word	0x40020458
 8007630:	40020470 	.word	0x40020470
 8007634:	40020488 	.word	0x40020488
 8007638:	400204a0 	.word	0x400204a0
 800763c:	400204b8 	.word	0x400204b8
 8007640:	58025408 	.word	0x58025408
 8007644:	5802541c 	.word	0x5802541c
 8007648:	58025430 	.word	0x58025430
 800764c:	58025444 	.word	0x58025444
 8007650:	58025458 	.word	0x58025458
 8007654:	5802546c 	.word	0x5802546c
 8007658:	58025480 	.word	0x58025480
 800765c:	58025494 	.word	0x58025494
 8007660:	2300      	movs	r3, #0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d028      	beq.n	80076b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007674:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007680:	f003 031f 	and.w	r3, r3, #31
 8007684:	2201      	movs	r2, #1
 8007686:	409a      	lsls	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007694:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00c      	beq.n	80076b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop

080076e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076f0:	4b67      	ldr	r3, [pc, #412]	; (8007890 <HAL_DMA_IRQHandler+0x1ac>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a67      	ldr	r2, [pc, #412]	; (8007894 <HAL_DMA_IRQHandler+0x1b0>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	0a9b      	lsrs	r3, r3, #10
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007702:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007708:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a5f      	ldr	r2, [pc, #380]	; (8007898 <HAL_DMA_IRQHandler+0x1b4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d04a      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a5d      	ldr	r2, [pc, #372]	; (800789c <HAL_DMA_IRQHandler+0x1b8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d045      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a5c      	ldr	r2, [pc, #368]	; (80078a0 <HAL_DMA_IRQHandler+0x1bc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d040      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a5a      	ldr	r2, [pc, #360]	; (80078a4 <HAL_DMA_IRQHandler+0x1c0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d03b      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a59      	ldr	r2, [pc, #356]	; (80078a8 <HAL_DMA_IRQHandler+0x1c4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d036      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a57      	ldr	r2, [pc, #348]	; (80078ac <HAL_DMA_IRQHandler+0x1c8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d031      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a56      	ldr	r2, [pc, #344]	; (80078b0 <HAL_DMA_IRQHandler+0x1cc>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d02c      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a54      	ldr	r2, [pc, #336]	; (80078b4 <HAL_DMA_IRQHandler+0x1d0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d027      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a53      	ldr	r2, [pc, #332]	; (80078b8 <HAL_DMA_IRQHandler+0x1d4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d022      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a51      	ldr	r2, [pc, #324]	; (80078bc <HAL_DMA_IRQHandler+0x1d8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d01d      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a50      	ldr	r2, [pc, #320]	; (80078c0 <HAL_DMA_IRQHandler+0x1dc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d018      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a4e      	ldr	r2, [pc, #312]	; (80078c4 <HAL_DMA_IRQHandler+0x1e0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d013      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a4d      	ldr	r2, [pc, #308]	; (80078c8 <HAL_DMA_IRQHandler+0x1e4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00e      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a4b      	ldr	r2, [pc, #300]	; (80078cc <HAL_DMA_IRQHandler+0x1e8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d009      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a4a      	ldr	r2, [pc, #296]	; (80078d0 <HAL_DMA_IRQHandler+0x1ec>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d004      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a48      	ldr	r2, [pc, #288]	; (80078d4 <HAL_DMA_IRQHandler+0x1f0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d101      	bne.n	80077ba <HAL_DMA_IRQHandler+0xd6>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <HAL_DMA_IRQHandler+0xd8>
 80077ba:	2300      	movs	r3, #0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 842b 	beq.w	8008018 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	2208      	movs	r2, #8
 80077cc:	409a      	lsls	r2, r3
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	4013      	ands	r3, r2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 80a2 	beq.w	800791c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a2e      	ldr	r2, [pc, #184]	; (8007898 <HAL_DMA_IRQHandler+0x1b4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d04a      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a2d      	ldr	r2, [pc, #180]	; (800789c <HAL_DMA_IRQHandler+0x1b8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d045      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2b      	ldr	r2, [pc, #172]	; (80078a0 <HAL_DMA_IRQHandler+0x1bc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d040      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2a      	ldr	r2, [pc, #168]	; (80078a4 <HAL_DMA_IRQHandler+0x1c0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d03b      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <HAL_DMA_IRQHandler+0x1c4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d036      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a27      	ldr	r2, [pc, #156]	; (80078ac <HAL_DMA_IRQHandler+0x1c8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d031      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <HAL_DMA_IRQHandler+0x1cc>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d02c      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a24      	ldr	r2, [pc, #144]	; (80078b4 <HAL_DMA_IRQHandler+0x1d0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d027      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a22      	ldr	r2, [pc, #136]	; (80078b8 <HAL_DMA_IRQHandler+0x1d4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d022      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a21      	ldr	r2, [pc, #132]	; (80078bc <HAL_DMA_IRQHandler+0x1d8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d01d      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <HAL_DMA_IRQHandler+0x1dc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d018      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1e      	ldr	r2, [pc, #120]	; (80078c4 <HAL_DMA_IRQHandler+0x1e0>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d013      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1c      	ldr	r2, [pc, #112]	; (80078c8 <HAL_DMA_IRQHandler+0x1e4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00e      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1b      	ldr	r2, [pc, #108]	; (80078cc <HAL_DMA_IRQHandler+0x1e8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d009      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <HAL_DMA_IRQHandler+0x1ec>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d004      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a18      	ldr	r2, [pc, #96]	; (80078d4 <HAL_DMA_IRQHandler+0x1f0>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d12f      	bne.n	80078d8 <HAL_DMA_IRQHandler+0x1f4>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	e02e      	b.n	80078ec <HAL_DMA_IRQHandler+0x208>
 800788e:	bf00      	nop
 8007890:	24000058 	.word	0x24000058
 8007894:	1b4e81b5 	.word	0x1b4e81b5
 8007898:	40020010 	.word	0x40020010
 800789c:	40020028 	.word	0x40020028
 80078a0:	40020040 	.word	0x40020040
 80078a4:	40020058 	.word	0x40020058
 80078a8:	40020070 	.word	0x40020070
 80078ac:	40020088 	.word	0x40020088
 80078b0:	400200a0 	.word	0x400200a0
 80078b4:	400200b8 	.word	0x400200b8
 80078b8:	40020410 	.word	0x40020410
 80078bc:	40020428 	.word	0x40020428
 80078c0:	40020440 	.word	0x40020440
 80078c4:	40020458 	.word	0x40020458
 80078c8:	40020470 	.word	0x40020470
 80078cc:	40020488 	.word	0x40020488
 80078d0:	400204a0 	.word	0x400204a0
 80078d4:	400204b8 	.word	0x400204b8
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	bf14      	ite	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	2300      	moveq	r3, #0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d015      	beq.n	800791c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0204 	bic.w	r2, r2, #4
 80078fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2208      	movs	r2, #8
 800790a:	409a      	lsls	r2, r3
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007914:	f043 0201 	orr.w	r2, r3, #1
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	fa22 f303 	lsr.w	r3, r2, r3
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d06e      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a69      	ldr	r2, [pc, #420]	; (8007adc <HAL_DMA_IRQHandler+0x3f8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d04a      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a67      	ldr	r2, [pc, #412]	; (8007ae0 <HAL_DMA_IRQHandler+0x3fc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d045      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a66      	ldr	r2, [pc, #408]	; (8007ae4 <HAL_DMA_IRQHandler+0x400>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d040      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a64      	ldr	r2, [pc, #400]	; (8007ae8 <HAL_DMA_IRQHandler+0x404>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d03b      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a63      	ldr	r2, [pc, #396]	; (8007aec <HAL_DMA_IRQHandler+0x408>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d036      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a61      	ldr	r2, [pc, #388]	; (8007af0 <HAL_DMA_IRQHandler+0x40c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d031      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a60      	ldr	r2, [pc, #384]	; (8007af4 <HAL_DMA_IRQHandler+0x410>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d02c      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a5e      	ldr	r2, [pc, #376]	; (8007af8 <HAL_DMA_IRQHandler+0x414>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d027      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a5d      	ldr	r2, [pc, #372]	; (8007afc <HAL_DMA_IRQHandler+0x418>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d022      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a5b      	ldr	r2, [pc, #364]	; (8007b00 <HAL_DMA_IRQHandler+0x41c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d01d      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a5a      	ldr	r2, [pc, #360]	; (8007b04 <HAL_DMA_IRQHandler+0x420>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d018      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a58      	ldr	r2, [pc, #352]	; (8007b08 <HAL_DMA_IRQHandler+0x424>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d013      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a57      	ldr	r2, [pc, #348]	; (8007b0c <HAL_DMA_IRQHandler+0x428>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00e      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a55      	ldr	r2, [pc, #340]	; (8007b10 <HAL_DMA_IRQHandler+0x42c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d009      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a54      	ldr	r2, [pc, #336]	; (8007b14 <HAL_DMA_IRQHandler+0x430>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d004      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a52      	ldr	r2, [pc, #328]	; (8007b18 <HAL_DMA_IRQHandler+0x434>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d10a      	bne.n	80079e8 <HAL_DMA_IRQHandler+0x304>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bf14      	ite	ne
 80079e0:	2301      	movne	r3, #1
 80079e2:	2300      	moveq	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	e003      	b.n	80079f0 <HAL_DMA_IRQHandler+0x30c>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2300      	movs	r3, #0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00d      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f8:	f003 031f 	and.w	r3, r3, #31
 80079fc:	2201      	movs	r2, #1
 80079fe:	409a      	lsls	r2, r3
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a08:	f043 0202 	orr.w	r2, r3, #2
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2204      	movs	r2, #4
 8007a1a:	409a      	lsls	r2, r3
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 808f 	beq.w	8007b44 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a2c      	ldr	r2, [pc, #176]	; (8007adc <HAL_DMA_IRQHandler+0x3f8>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d04a      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a2a      	ldr	r2, [pc, #168]	; (8007ae0 <HAL_DMA_IRQHandler+0x3fc>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d045      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a29      	ldr	r2, [pc, #164]	; (8007ae4 <HAL_DMA_IRQHandler+0x400>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d040      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a27      	ldr	r2, [pc, #156]	; (8007ae8 <HAL_DMA_IRQHandler+0x404>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d03b      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a26      	ldr	r2, [pc, #152]	; (8007aec <HAL_DMA_IRQHandler+0x408>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d036      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a24      	ldr	r2, [pc, #144]	; (8007af0 <HAL_DMA_IRQHandler+0x40c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d031      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a23      	ldr	r2, [pc, #140]	; (8007af4 <HAL_DMA_IRQHandler+0x410>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d02c      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a21      	ldr	r2, [pc, #132]	; (8007af8 <HAL_DMA_IRQHandler+0x414>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d027      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a20      	ldr	r2, [pc, #128]	; (8007afc <HAL_DMA_IRQHandler+0x418>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d022      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a1e      	ldr	r2, [pc, #120]	; (8007b00 <HAL_DMA_IRQHandler+0x41c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01d      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <HAL_DMA_IRQHandler+0x420>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d018      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a1b      	ldr	r2, [pc, #108]	; (8007b08 <HAL_DMA_IRQHandler+0x424>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d013      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a1a      	ldr	r2, [pc, #104]	; (8007b0c <HAL_DMA_IRQHandler+0x428>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a18      	ldr	r2, [pc, #96]	; (8007b10 <HAL_DMA_IRQHandler+0x42c>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d009      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a17      	ldr	r2, [pc, #92]	; (8007b14 <HAL_DMA_IRQHandler+0x430>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <HAL_DMA_IRQHandler+0x434>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d12a      	bne.n	8007b1c <HAL_DMA_IRQHandler+0x438>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	e023      	b.n	8007b24 <HAL_DMA_IRQHandler+0x440>
 8007adc:	40020010 	.word	0x40020010
 8007ae0:	40020028 	.word	0x40020028
 8007ae4:	40020040 	.word	0x40020040
 8007ae8:	40020058 	.word	0x40020058
 8007aec:	40020070 	.word	0x40020070
 8007af0:	40020088 	.word	0x40020088
 8007af4:	400200a0 	.word	0x400200a0
 8007af8:	400200b8 	.word	0x400200b8
 8007afc:	40020410 	.word	0x40020410
 8007b00:	40020428 	.word	0x40020428
 8007b04:	40020440 	.word	0x40020440
 8007b08:	40020458 	.word	0x40020458
 8007b0c:	40020470 	.word	0x40020470
 8007b10:	40020488 	.word	0x40020488
 8007b14:	400204a0 	.word	0x400204a0
 8007b18:	400204b8 	.word	0x400204b8
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00d      	beq.n	8007b44 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b2c:	f003 031f 	and.w	r3, r3, #31
 8007b30:	2204      	movs	r2, #4
 8007b32:	409a      	lsls	r2, r3
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3c:	f043 0204 	orr.w	r2, r3, #4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b48:	f003 031f 	and.w	r3, r3, #31
 8007b4c:	2210      	movs	r2, #16
 8007b4e:	409a      	lsls	r2, r3
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	4013      	ands	r3, r2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 80a6 	beq.w	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a85      	ldr	r2, [pc, #532]	; (8007d74 <HAL_DMA_IRQHandler+0x690>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d04a      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a83      	ldr	r2, [pc, #524]	; (8007d78 <HAL_DMA_IRQHandler+0x694>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d045      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a82      	ldr	r2, [pc, #520]	; (8007d7c <HAL_DMA_IRQHandler+0x698>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d040      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a80      	ldr	r2, [pc, #512]	; (8007d80 <HAL_DMA_IRQHandler+0x69c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d03b      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a7f      	ldr	r2, [pc, #508]	; (8007d84 <HAL_DMA_IRQHandler+0x6a0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d036      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a7d      	ldr	r2, [pc, #500]	; (8007d88 <HAL_DMA_IRQHandler+0x6a4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d031      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a7c      	ldr	r2, [pc, #496]	; (8007d8c <HAL_DMA_IRQHandler+0x6a8>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d02c      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a7a      	ldr	r2, [pc, #488]	; (8007d90 <HAL_DMA_IRQHandler+0x6ac>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d027      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a79      	ldr	r2, [pc, #484]	; (8007d94 <HAL_DMA_IRQHandler+0x6b0>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d022      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a77      	ldr	r2, [pc, #476]	; (8007d98 <HAL_DMA_IRQHandler+0x6b4>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d01d      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a76      	ldr	r2, [pc, #472]	; (8007d9c <HAL_DMA_IRQHandler+0x6b8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d018      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a74      	ldr	r2, [pc, #464]	; (8007da0 <HAL_DMA_IRQHandler+0x6bc>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d013      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a73      	ldr	r2, [pc, #460]	; (8007da4 <HAL_DMA_IRQHandler+0x6c0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00e      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a71      	ldr	r2, [pc, #452]	; (8007da8 <HAL_DMA_IRQHandler+0x6c4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d009      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a70      	ldr	r2, [pc, #448]	; (8007dac <HAL_DMA_IRQHandler+0x6c8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d004      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a6e      	ldr	r2, [pc, #440]	; (8007db0 <HAL_DMA_IRQHandler+0x6cc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d10a      	bne.n	8007c10 <HAL_DMA_IRQHandler+0x52c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bf14      	ite	ne
 8007c08:	2301      	movne	r3, #1
 8007c0a:	2300      	moveq	r3, #0
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	e009      	b.n	8007c24 <HAL_DMA_IRQHandler+0x540>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bf14      	ite	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	2300      	moveq	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d03e      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2c:	f003 031f 	and.w	r3, r3, #31
 8007c30:	2210      	movs	r2, #16
 8007c32:	409a      	lsls	r2, r3
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d018      	beq.n	8007c78 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d108      	bne.n	8007c66 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d024      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
 8007c64:	e01f      	b.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01b      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
 8007c76:	e016      	b.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d107      	bne.n	8007c96 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0208 	bic.w	r2, r2, #8
 8007c94:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2220      	movs	r2, #32
 8007cb0:	409a      	lsls	r2, r3
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8110 	beq.w	8007edc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a2c      	ldr	r2, [pc, #176]	; (8007d74 <HAL_DMA_IRQHandler+0x690>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d04a      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a2b      	ldr	r2, [pc, #172]	; (8007d78 <HAL_DMA_IRQHandler+0x694>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d045      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a29      	ldr	r2, [pc, #164]	; (8007d7c <HAL_DMA_IRQHandler+0x698>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d040      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a28      	ldr	r2, [pc, #160]	; (8007d80 <HAL_DMA_IRQHandler+0x69c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d03b      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a26      	ldr	r2, [pc, #152]	; (8007d84 <HAL_DMA_IRQHandler+0x6a0>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d036      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a25      	ldr	r2, [pc, #148]	; (8007d88 <HAL_DMA_IRQHandler+0x6a4>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d031      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a23      	ldr	r2, [pc, #140]	; (8007d8c <HAL_DMA_IRQHandler+0x6a8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d02c      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a22      	ldr	r2, [pc, #136]	; (8007d90 <HAL_DMA_IRQHandler+0x6ac>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d027      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a20      	ldr	r2, [pc, #128]	; (8007d94 <HAL_DMA_IRQHandler+0x6b0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d022      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a1f      	ldr	r2, [pc, #124]	; (8007d98 <HAL_DMA_IRQHandler+0x6b4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d01d      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <HAL_DMA_IRQHandler+0x6b8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d018      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a1c      	ldr	r2, [pc, #112]	; (8007da0 <HAL_DMA_IRQHandler+0x6bc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d013      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a1a      	ldr	r2, [pc, #104]	; (8007da4 <HAL_DMA_IRQHandler+0x6c0>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00e      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a19      	ldr	r2, [pc, #100]	; (8007da8 <HAL_DMA_IRQHandler+0x6c4>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d009      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a17      	ldr	r2, [pc, #92]	; (8007dac <HAL_DMA_IRQHandler+0x6c8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d004      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <HAL_DMA_IRQHandler+0x6cc>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d12b      	bne.n	8007db4 <HAL_DMA_IRQHandler+0x6d0>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0310 	and.w	r3, r3, #16
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bf14      	ite	ne
 8007d6a:	2301      	movne	r3, #1
 8007d6c:	2300      	moveq	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	e02a      	b.n	8007dc8 <HAL_DMA_IRQHandler+0x6e4>
 8007d72:	bf00      	nop
 8007d74:	40020010 	.word	0x40020010
 8007d78:	40020028 	.word	0x40020028
 8007d7c:	40020040 	.word	0x40020040
 8007d80:	40020058 	.word	0x40020058
 8007d84:	40020070 	.word	0x40020070
 8007d88:	40020088 	.word	0x40020088
 8007d8c:	400200a0 	.word	0x400200a0
 8007d90:	400200b8 	.word	0x400200b8
 8007d94:	40020410 	.word	0x40020410
 8007d98:	40020428 	.word	0x40020428
 8007d9c:	40020440 	.word	0x40020440
 8007da0:	40020458 	.word	0x40020458
 8007da4:	40020470 	.word	0x40020470
 8007da8:	40020488 	.word	0x40020488
 8007dac:	400204a0 	.word	0x400204a0
 8007db0:	400204b8 	.word	0x400204b8
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	bf14      	ite	ne
 8007dc2:	2301      	movne	r3, #1
 8007dc4:	2300      	moveq	r3, #0
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 8087 	beq.w	8007edc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	409a      	lsls	r2, r3
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d139      	bne.n	8007e5e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0216 	bic.w	r2, r2, #22
 8007df8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695a      	ldr	r2, [r3, #20]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e08:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <HAL_DMA_IRQHandler+0x736>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d007      	beq.n	8007e2a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0208 	bic.w	r2, r2, #8
 8007e28:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	223f      	movs	r2, #63	; 0x3f
 8007e34:	409a      	lsls	r2, r3
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 834a 	beq.w	80084e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
          }
          return;
 8007e5c:	e344      	b.n	80084e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d018      	beq.n	8007e9e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d108      	bne.n	8007e8c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d02c      	beq.n	8007edc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	4798      	blx	r3
 8007e8a:	e027      	b.n	8007edc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d023      	beq.n	8007edc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4798      	blx	r3
 8007e9c:	e01e      	b.n	8007edc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10f      	bne.n	8007ecc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0210 	bic.w	r2, r2, #16
 8007eba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8306 	beq.w	80084f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 8088 	beq.w	8008004 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2204      	movs	r2, #4
 8007ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a7a      	ldr	r2, [pc, #488]	; (80080ec <HAL_DMA_IRQHandler+0xa08>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d04a      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a79      	ldr	r2, [pc, #484]	; (80080f0 <HAL_DMA_IRQHandler+0xa0c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d045      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a77      	ldr	r2, [pc, #476]	; (80080f4 <HAL_DMA_IRQHandler+0xa10>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d040      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a76      	ldr	r2, [pc, #472]	; (80080f8 <HAL_DMA_IRQHandler+0xa14>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d03b      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a74      	ldr	r2, [pc, #464]	; (80080fc <HAL_DMA_IRQHandler+0xa18>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d036      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a73      	ldr	r2, [pc, #460]	; (8008100 <HAL_DMA_IRQHandler+0xa1c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d031      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a71      	ldr	r2, [pc, #452]	; (8008104 <HAL_DMA_IRQHandler+0xa20>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d02c      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a70      	ldr	r2, [pc, #448]	; (8008108 <HAL_DMA_IRQHandler+0xa24>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d027      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a6e      	ldr	r2, [pc, #440]	; (800810c <HAL_DMA_IRQHandler+0xa28>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d022      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a6d      	ldr	r2, [pc, #436]	; (8008110 <HAL_DMA_IRQHandler+0xa2c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d01d      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a6b      	ldr	r2, [pc, #428]	; (8008114 <HAL_DMA_IRQHandler+0xa30>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d018      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a6a      	ldr	r2, [pc, #424]	; (8008118 <HAL_DMA_IRQHandler+0xa34>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d013      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a68      	ldr	r2, [pc, #416]	; (800811c <HAL_DMA_IRQHandler+0xa38>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d00e      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a67      	ldr	r2, [pc, #412]	; (8008120 <HAL_DMA_IRQHandler+0xa3c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d009      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a65      	ldr	r2, [pc, #404]	; (8008124 <HAL_DMA_IRQHandler+0xa40>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d004      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a64      	ldr	r2, [pc, #400]	; (8008128 <HAL_DMA_IRQHandler+0xa44>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d108      	bne.n	8007fae <HAL_DMA_IRQHandler+0x8ca>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0201 	bic.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	e007      	b.n	8007fbe <HAL_DMA_IRQHandler+0x8da>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d307      	bcc.n	8007fda <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1f2      	bne.n	8007fbe <HAL_DMA_IRQHandler+0x8da>
 8007fd8:	e000      	b.n	8007fdc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007fda:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d004      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2203      	movs	r2, #3
 8007fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007ff2:	e003      	b.n	8007ffc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 8272 	beq.w	80084f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
 8008016:	e26c      	b.n	80084f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a43      	ldr	r2, [pc, #268]	; (800812c <HAL_DMA_IRQHandler+0xa48>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d022      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a42      	ldr	r2, [pc, #264]	; (8008130 <HAL_DMA_IRQHandler+0xa4c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d01d      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a40      	ldr	r2, [pc, #256]	; (8008134 <HAL_DMA_IRQHandler+0xa50>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d018      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a3f      	ldr	r2, [pc, #252]	; (8008138 <HAL_DMA_IRQHandler+0xa54>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d013      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a3d      	ldr	r2, [pc, #244]	; (800813c <HAL_DMA_IRQHandler+0xa58>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00e      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a3c      	ldr	r2, [pc, #240]	; (8008140 <HAL_DMA_IRQHandler+0xa5c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d009      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a3a      	ldr	r2, [pc, #232]	; (8008144 <HAL_DMA_IRQHandler+0xa60>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d004      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a39      	ldr	r2, [pc, #228]	; (8008148 <HAL_DMA_IRQHandler+0xa64>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d101      	bne.n	800806c <HAL_DMA_IRQHandler+0x988>
 8008068:	2301      	movs	r3, #1
 800806a:	e000      	b.n	800806e <HAL_DMA_IRQHandler+0x98a>
 800806c:	2300      	movs	r3, #0
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 823f 	beq.w	80084f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008080:	f003 031f 	and.w	r3, r3, #31
 8008084:	2204      	movs	r2, #4
 8008086:	409a      	lsls	r2, r3
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	4013      	ands	r3, r2
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 80cd 	beq.w	800822c <HAL_DMA_IRQHandler+0xb48>
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80c7 	beq.w	800822c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a2:	f003 031f 	and.w	r3, r3, #31
 80080a6:	2204      	movs	r2, #4
 80080a8:	409a      	lsls	r2, r3
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d049      	beq.n	800814c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 8210 	beq.w	80084ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080d4:	e20a      	b.n	80084ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 8206 	beq.w	80084ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080e8:	e200      	b.n	80084ec <HAL_DMA_IRQHandler+0xe08>
 80080ea:	bf00      	nop
 80080ec:	40020010 	.word	0x40020010
 80080f0:	40020028 	.word	0x40020028
 80080f4:	40020040 	.word	0x40020040
 80080f8:	40020058 	.word	0x40020058
 80080fc:	40020070 	.word	0x40020070
 8008100:	40020088 	.word	0x40020088
 8008104:	400200a0 	.word	0x400200a0
 8008108:	400200b8 	.word	0x400200b8
 800810c:	40020410 	.word	0x40020410
 8008110:	40020428 	.word	0x40020428
 8008114:	40020440 	.word	0x40020440
 8008118:	40020458 	.word	0x40020458
 800811c:	40020470 	.word	0x40020470
 8008120:	40020488 	.word	0x40020488
 8008124:	400204a0 	.word	0x400204a0
 8008128:	400204b8 	.word	0x400204b8
 800812c:	58025408 	.word	0x58025408
 8008130:	5802541c 	.word	0x5802541c
 8008134:	58025430 	.word	0x58025430
 8008138:	58025444 	.word	0x58025444
 800813c:	58025458 	.word	0x58025458
 8008140:	5802546c 	.word	0x5802546c
 8008144:	58025480 	.word	0x58025480
 8008148:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d160      	bne.n	8008218 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a7f      	ldr	r2, [pc, #508]	; (8008358 <HAL_DMA_IRQHandler+0xc74>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d04a      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a7d      	ldr	r2, [pc, #500]	; (800835c <HAL_DMA_IRQHandler+0xc78>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d045      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a7c      	ldr	r2, [pc, #496]	; (8008360 <HAL_DMA_IRQHandler+0xc7c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d040      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a7a      	ldr	r2, [pc, #488]	; (8008364 <HAL_DMA_IRQHandler+0xc80>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d03b      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a79      	ldr	r2, [pc, #484]	; (8008368 <HAL_DMA_IRQHandler+0xc84>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d036      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a77      	ldr	r2, [pc, #476]	; (800836c <HAL_DMA_IRQHandler+0xc88>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d031      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a76      	ldr	r2, [pc, #472]	; (8008370 <HAL_DMA_IRQHandler+0xc8c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d02c      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a74      	ldr	r2, [pc, #464]	; (8008374 <HAL_DMA_IRQHandler+0xc90>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d027      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a73      	ldr	r2, [pc, #460]	; (8008378 <HAL_DMA_IRQHandler+0xc94>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d022      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a71      	ldr	r2, [pc, #452]	; (800837c <HAL_DMA_IRQHandler+0xc98>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d01d      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a70      	ldr	r2, [pc, #448]	; (8008380 <HAL_DMA_IRQHandler+0xc9c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d018      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a6e      	ldr	r2, [pc, #440]	; (8008384 <HAL_DMA_IRQHandler+0xca0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a6d      	ldr	r2, [pc, #436]	; (8008388 <HAL_DMA_IRQHandler+0xca4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00e      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a6b      	ldr	r2, [pc, #428]	; (800838c <HAL_DMA_IRQHandler+0xca8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d009      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a6a      	ldr	r2, [pc, #424]	; (8008390 <HAL_DMA_IRQHandler+0xcac>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d004      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a68      	ldr	r2, [pc, #416]	; (8008394 <HAL_DMA_IRQHandler+0xcb0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d108      	bne.n	8008208 <HAL_DMA_IRQHandler+0xb24>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0208 	bic.w	r2, r2, #8
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	e007      	b.n	8008218 <HAL_DMA_IRQHandler+0xb34>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0204 	bic.w	r2, r2, #4
 8008216:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8165 	beq.w	80084ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800822a:	e15f      	b.n	80084ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008230:	f003 031f 	and.w	r3, r3, #31
 8008234:	2202      	movs	r2, #2
 8008236:	409a      	lsls	r2, r3
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80c5 	beq.w	80083cc <HAL_DMA_IRQHandler+0xce8>
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 80bf 	beq.w	80083cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008252:	f003 031f 	and.w	r3, r3, #31
 8008256:	2202      	movs	r2, #2
 8008258:	409a      	lsls	r2, r3
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d018      	beq.n	800829a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d109      	bne.n	8008286 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 813a 	beq.w	80084f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008284:	e134      	b.n	80084f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 8130 	beq.w	80084f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008298:	e12a      	b.n	80084f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f040 8089 	bne.w	80083b8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a2b      	ldr	r2, [pc, #172]	; (8008358 <HAL_DMA_IRQHandler+0xc74>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d04a      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a29      	ldr	r2, [pc, #164]	; (800835c <HAL_DMA_IRQHandler+0xc78>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d045      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a28      	ldr	r2, [pc, #160]	; (8008360 <HAL_DMA_IRQHandler+0xc7c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d040      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a26      	ldr	r2, [pc, #152]	; (8008364 <HAL_DMA_IRQHandler+0xc80>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d03b      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a25      	ldr	r2, [pc, #148]	; (8008368 <HAL_DMA_IRQHandler+0xc84>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d036      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a23      	ldr	r2, [pc, #140]	; (800836c <HAL_DMA_IRQHandler+0xc88>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d031      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a22      	ldr	r2, [pc, #136]	; (8008370 <HAL_DMA_IRQHandler+0xc8c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d02c      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a20      	ldr	r2, [pc, #128]	; (8008374 <HAL_DMA_IRQHandler+0xc90>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d027      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <HAL_DMA_IRQHandler+0xc94>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d022      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a1d      	ldr	r2, [pc, #116]	; (800837c <HAL_DMA_IRQHandler+0xc98>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d01d      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a1c      	ldr	r2, [pc, #112]	; (8008380 <HAL_DMA_IRQHandler+0xc9c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d018      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1a      	ldr	r2, [pc, #104]	; (8008384 <HAL_DMA_IRQHandler+0xca0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d013      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a19      	ldr	r2, [pc, #100]	; (8008388 <HAL_DMA_IRQHandler+0xca4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00e      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a17      	ldr	r2, [pc, #92]	; (800838c <HAL_DMA_IRQHandler+0xca8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d009      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a16      	ldr	r2, [pc, #88]	; (8008390 <HAL_DMA_IRQHandler+0xcac>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d004      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a14      	ldr	r2, [pc, #80]	; (8008394 <HAL_DMA_IRQHandler+0xcb0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d128      	bne.n	8008398 <HAL_DMA_IRQHandler+0xcb4>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0214 	bic.w	r2, r2, #20
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	e027      	b.n	80083a8 <HAL_DMA_IRQHandler+0xcc4>
 8008358:	40020010 	.word	0x40020010
 800835c:	40020028 	.word	0x40020028
 8008360:	40020040 	.word	0x40020040
 8008364:	40020058 	.word	0x40020058
 8008368:	40020070 	.word	0x40020070
 800836c:	40020088 	.word	0x40020088
 8008370:	400200a0 	.word	0x400200a0
 8008374:	400200b8 	.word	0x400200b8
 8008378:	40020410 	.word	0x40020410
 800837c:	40020428 	.word	0x40020428
 8008380:	40020440 	.word	0x40020440
 8008384:	40020458 	.word	0x40020458
 8008388:	40020470 	.word	0x40020470
 800838c:	40020488 	.word	0x40020488
 8008390:	400204a0 	.word	0x400204a0
 8008394:	400204b8 	.word	0x400204b8
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 020a 	bic.w	r2, r2, #10
 80083a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8097 	beq.w	80084f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083ca:	e091      	b.n	80084f0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d0:	f003 031f 	and.w	r3, r3, #31
 80083d4:	2208      	movs	r2, #8
 80083d6:	409a      	lsls	r2, r3
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4013      	ands	r3, r2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 8088 	beq.w	80084f2 <HAL_DMA_IRQHandler+0xe0e>
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8082 	beq.w	80084f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a41      	ldr	r2, [pc, #260]	; (80084f8 <HAL_DMA_IRQHandler+0xe14>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d04a      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a3f      	ldr	r2, [pc, #252]	; (80084fc <HAL_DMA_IRQHandler+0xe18>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d045      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a3e      	ldr	r2, [pc, #248]	; (8008500 <HAL_DMA_IRQHandler+0xe1c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d040      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a3c      	ldr	r2, [pc, #240]	; (8008504 <HAL_DMA_IRQHandler+0xe20>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d03b      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a3b      	ldr	r2, [pc, #236]	; (8008508 <HAL_DMA_IRQHandler+0xe24>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d036      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a39      	ldr	r2, [pc, #228]	; (800850c <HAL_DMA_IRQHandler+0xe28>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d031      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a38      	ldr	r2, [pc, #224]	; (8008510 <HAL_DMA_IRQHandler+0xe2c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d02c      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a36      	ldr	r2, [pc, #216]	; (8008514 <HAL_DMA_IRQHandler+0xe30>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d027      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a35      	ldr	r2, [pc, #212]	; (8008518 <HAL_DMA_IRQHandler+0xe34>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d022      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a33      	ldr	r2, [pc, #204]	; (800851c <HAL_DMA_IRQHandler+0xe38>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d01d      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a32      	ldr	r2, [pc, #200]	; (8008520 <HAL_DMA_IRQHandler+0xe3c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d018      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a30      	ldr	r2, [pc, #192]	; (8008524 <HAL_DMA_IRQHandler+0xe40>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d013      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a2f      	ldr	r2, [pc, #188]	; (8008528 <HAL_DMA_IRQHandler+0xe44>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00e      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a2d      	ldr	r2, [pc, #180]	; (800852c <HAL_DMA_IRQHandler+0xe48>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d009      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a2c      	ldr	r2, [pc, #176]	; (8008530 <HAL_DMA_IRQHandler+0xe4c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d004      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a2a      	ldr	r2, [pc, #168]	; (8008534 <HAL_DMA_IRQHandler+0xe50>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d108      	bne.n	80084a0 <HAL_DMA_IRQHandler+0xdbc>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 021c 	bic.w	r2, r2, #28
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	e007      	b.n	80084b0 <HAL_DMA_IRQHandler+0xdcc>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 020e 	bic.w	r2, r2, #14
 80084ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b4:	f003 031f 	and.w	r3, r3, #31
 80084b8:	2201      	movs	r2, #1
 80084ba:	409a      	lsls	r2, r3
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	4798      	blx	r3
 80084e6:	e004      	b.n	80084f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80084e8:	bf00      	nop
 80084ea:	e002      	b.n	80084f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084ec:	bf00      	nop
 80084ee:	e000      	b.n	80084f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80084f2:	3728      	adds	r7, #40	; 0x28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	40020010 	.word	0x40020010
 80084fc:	40020028 	.word	0x40020028
 8008500:	40020040 	.word	0x40020040
 8008504:	40020058 	.word	0x40020058
 8008508:	40020070 	.word	0x40020070
 800850c:	40020088 	.word	0x40020088
 8008510:	400200a0 	.word	0x400200a0
 8008514:	400200b8 	.word	0x400200b8
 8008518:	40020410 	.word	0x40020410
 800851c:	40020428 	.word	0x40020428
 8008520:	40020440 	.word	0x40020440
 8008524:	40020458 	.word	0x40020458
 8008528:	40020470 	.word	0x40020470
 800852c:	40020488 	.word	0x40020488
 8008530:	400204a0 	.word	0x400204a0
 8008534:	400204b8 	.word	0x400204b8

08008538 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008550:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a7f      	ldr	r2, [pc, #508]	; (8008754 <DMA_SetConfig+0x21c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d072      	beq.n	8008642 <DMA_SetConfig+0x10a>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a7d      	ldr	r2, [pc, #500]	; (8008758 <DMA_SetConfig+0x220>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d06d      	beq.n	8008642 <DMA_SetConfig+0x10a>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a7c      	ldr	r2, [pc, #496]	; (800875c <DMA_SetConfig+0x224>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d068      	beq.n	8008642 <DMA_SetConfig+0x10a>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a7a      	ldr	r2, [pc, #488]	; (8008760 <DMA_SetConfig+0x228>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d063      	beq.n	8008642 <DMA_SetConfig+0x10a>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a79      	ldr	r2, [pc, #484]	; (8008764 <DMA_SetConfig+0x22c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d05e      	beq.n	8008642 <DMA_SetConfig+0x10a>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a77      	ldr	r2, [pc, #476]	; (8008768 <DMA_SetConfig+0x230>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d059      	beq.n	8008642 <DMA_SetConfig+0x10a>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a76      	ldr	r2, [pc, #472]	; (800876c <DMA_SetConfig+0x234>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d054      	beq.n	8008642 <DMA_SetConfig+0x10a>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a74      	ldr	r2, [pc, #464]	; (8008770 <DMA_SetConfig+0x238>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d04f      	beq.n	8008642 <DMA_SetConfig+0x10a>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a73      	ldr	r2, [pc, #460]	; (8008774 <DMA_SetConfig+0x23c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d04a      	beq.n	8008642 <DMA_SetConfig+0x10a>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a71      	ldr	r2, [pc, #452]	; (8008778 <DMA_SetConfig+0x240>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d045      	beq.n	8008642 <DMA_SetConfig+0x10a>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a70      	ldr	r2, [pc, #448]	; (800877c <DMA_SetConfig+0x244>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d040      	beq.n	8008642 <DMA_SetConfig+0x10a>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a6e      	ldr	r2, [pc, #440]	; (8008780 <DMA_SetConfig+0x248>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d03b      	beq.n	8008642 <DMA_SetConfig+0x10a>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a6d      	ldr	r2, [pc, #436]	; (8008784 <DMA_SetConfig+0x24c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d036      	beq.n	8008642 <DMA_SetConfig+0x10a>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a6b      	ldr	r2, [pc, #428]	; (8008788 <DMA_SetConfig+0x250>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d031      	beq.n	8008642 <DMA_SetConfig+0x10a>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a6a      	ldr	r2, [pc, #424]	; (800878c <DMA_SetConfig+0x254>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d02c      	beq.n	8008642 <DMA_SetConfig+0x10a>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a68      	ldr	r2, [pc, #416]	; (8008790 <DMA_SetConfig+0x258>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d027      	beq.n	8008642 <DMA_SetConfig+0x10a>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a67      	ldr	r2, [pc, #412]	; (8008794 <DMA_SetConfig+0x25c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d022      	beq.n	8008642 <DMA_SetConfig+0x10a>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a65      	ldr	r2, [pc, #404]	; (8008798 <DMA_SetConfig+0x260>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d01d      	beq.n	8008642 <DMA_SetConfig+0x10a>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a64      	ldr	r2, [pc, #400]	; (800879c <DMA_SetConfig+0x264>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d018      	beq.n	8008642 <DMA_SetConfig+0x10a>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a62      	ldr	r2, [pc, #392]	; (80087a0 <DMA_SetConfig+0x268>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d013      	beq.n	8008642 <DMA_SetConfig+0x10a>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a61      	ldr	r2, [pc, #388]	; (80087a4 <DMA_SetConfig+0x26c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d00e      	beq.n	8008642 <DMA_SetConfig+0x10a>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a5f      	ldr	r2, [pc, #380]	; (80087a8 <DMA_SetConfig+0x270>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d009      	beq.n	8008642 <DMA_SetConfig+0x10a>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a5e      	ldr	r2, [pc, #376]	; (80087ac <DMA_SetConfig+0x274>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d004      	beq.n	8008642 <DMA_SetConfig+0x10a>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a5c      	ldr	r2, [pc, #368]	; (80087b0 <DMA_SetConfig+0x278>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d101      	bne.n	8008646 <DMA_SetConfig+0x10e>
 8008642:	2301      	movs	r3, #1
 8008644:	e000      	b.n	8008648 <DMA_SetConfig+0x110>
 8008646:	2300      	movs	r3, #0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00d      	beq.n	8008668 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008654:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d004      	beq.n	8008668 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008666:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a39      	ldr	r2, [pc, #228]	; (8008754 <DMA_SetConfig+0x21c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d04a      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a38      	ldr	r2, [pc, #224]	; (8008758 <DMA_SetConfig+0x220>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d045      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a36      	ldr	r2, [pc, #216]	; (800875c <DMA_SetConfig+0x224>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d040      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a35      	ldr	r2, [pc, #212]	; (8008760 <DMA_SetConfig+0x228>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d03b      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a33      	ldr	r2, [pc, #204]	; (8008764 <DMA_SetConfig+0x22c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d036      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a32      	ldr	r2, [pc, #200]	; (8008768 <DMA_SetConfig+0x230>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d031      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a30      	ldr	r2, [pc, #192]	; (800876c <DMA_SetConfig+0x234>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d02c      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a2f      	ldr	r2, [pc, #188]	; (8008770 <DMA_SetConfig+0x238>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d027      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a2d      	ldr	r2, [pc, #180]	; (8008774 <DMA_SetConfig+0x23c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d022      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a2c      	ldr	r2, [pc, #176]	; (8008778 <DMA_SetConfig+0x240>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d01d      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a2a      	ldr	r2, [pc, #168]	; (800877c <DMA_SetConfig+0x244>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d018      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a29      	ldr	r2, [pc, #164]	; (8008780 <DMA_SetConfig+0x248>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d013      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a27      	ldr	r2, [pc, #156]	; (8008784 <DMA_SetConfig+0x24c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d00e      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a26      	ldr	r2, [pc, #152]	; (8008788 <DMA_SetConfig+0x250>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d009      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a24      	ldr	r2, [pc, #144]	; (800878c <DMA_SetConfig+0x254>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d004      	beq.n	8008708 <DMA_SetConfig+0x1d0>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a23      	ldr	r2, [pc, #140]	; (8008790 <DMA_SetConfig+0x258>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d101      	bne.n	800870c <DMA_SetConfig+0x1d4>
 8008708:	2301      	movs	r3, #1
 800870a:	e000      	b.n	800870e <DMA_SetConfig+0x1d6>
 800870c:	2300      	movs	r3, #0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d059      	beq.n	80087c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008716:	f003 031f 	and.w	r3, r3, #31
 800871a:	223f      	movs	r2, #63	; 0x3f
 800871c:	409a      	lsls	r2, r3
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008730:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	2b40      	cmp	r3, #64	; 0x40
 8008740:	d138      	bne.n	80087b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008752:	e086      	b.n	8008862 <DMA_SetConfig+0x32a>
 8008754:	40020010 	.word	0x40020010
 8008758:	40020028 	.word	0x40020028
 800875c:	40020040 	.word	0x40020040
 8008760:	40020058 	.word	0x40020058
 8008764:	40020070 	.word	0x40020070
 8008768:	40020088 	.word	0x40020088
 800876c:	400200a0 	.word	0x400200a0
 8008770:	400200b8 	.word	0x400200b8
 8008774:	40020410 	.word	0x40020410
 8008778:	40020428 	.word	0x40020428
 800877c:	40020440 	.word	0x40020440
 8008780:	40020458 	.word	0x40020458
 8008784:	40020470 	.word	0x40020470
 8008788:	40020488 	.word	0x40020488
 800878c:	400204a0 	.word	0x400204a0
 8008790:	400204b8 	.word	0x400204b8
 8008794:	58025408 	.word	0x58025408
 8008798:	5802541c 	.word	0x5802541c
 800879c:	58025430 	.word	0x58025430
 80087a0:	58025444 	.word	0x58025444
 80087a4:	58025458 	.word	0x58025458
 80087a8:	5802546c 	.word	0x5802546c
 80087ac:	58025480 	.word	0x58025480
 80087b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	60da      	str	r2, [r3, #12]
}
 80087c4:	e04d      	b.n	8008862 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a29      	ldr	r2, [pc, #164]	; (8008870 <DMA_SetConfig+0x338>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d022      	beq.n	8008816 <DMA_SetConfig+0x2de>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a27      	ldr	r2, [pc, #156]	; (8008874 <DMA_SetConfig+0x33c>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d01d      	beq.n	8008816 <DMA_SetConfig+0x2de>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a26      	ldr	r2, [pc, #152]	; (8008878 <DMA_SetConfig+0x340>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d018      	beq.n	8008816 <DMA_SetConfig+0x2de>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a24      	ldr	r2, [pc, #144]	; (800887c <DMA_SetConfig+0x344>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d013      	beq.n	8008816 <DMA_SetConfig+0x2de>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a23      	ldr	r2, [pc, #140]	; (8008880 <DMA_SetConfig+0x348>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00e      	beq.n	8008816 <DMA_SetConfig+0x2de>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a21      	ldr	r2, [pc, #132]	; (8008884 <DMA_SetConfig+0x34c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d009      	beq.n	8008816 <DMA_SetConfig+0x2de>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a20      	ldr	r2, [pc, #128]	; (8008888 <DMA_SetConfig+0x350>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d004      	beq.n	8008816 <DMA_SetConfig+0x2de>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a1e      	ldr	r2, [pc, #120]	; (800888c <DMA_SetConfig+0x354>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d101      	bne.n	800881a <DMA_SetConfig+0x2e2>
 8008816:	2301      	movs	r3, #1
 8008818:	e000      	b.n	800881c <DMA_SetConfig+0x2e4>
 800881a:	2300      	movs	r3, #0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d020      	beq.n	8008862 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008824:	f003 031f 	and.w	r3, r3, #31
 8008828:	2201      	movs	r2, #1
 800882a:	409a      	lsls	r2, r3
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	2b40      	cmp	r3, #64	; 0x40
 800883e:	d108      	bne.n	8008852 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	60da      	str	r2, [r3, #12]
}
 8008850:	e007      	b.n	8008862 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	60da      	str	r2, [r3, #12]
}
 8008862:	bf00      	nop
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	58025408 	.word	0x58025408
 8008874:	5802541c 	.word	0x5802541c
 8008878:	58025430 	.word	0x58025430
 800887c:	58025444 	.word	0x58025444
 8008880:	58025458 	.word	0x58025458
 8008884:	5802546c 	.word	0x5802546c
 8008888:	58025480 	.word	0x58025480
 800888c:	58025494 	.word	0x58025494

08008890 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a42      	ldr	r2, [pc, #264]	; (80089a8 <DMA_CalcBaseAndBitshift+0x118>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d04a      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a41      	ldr	r2, [pc, #260]	; (80089ac <DMA_CalcBaseAndBitshift+0x11c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d045      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a3f      	ldr	r2, [pc, #252]	; (80089b0 <DMA_CalcBaseAndBitshift+0x120>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d040      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a3e      	ldr	r2, [pc, #248]	; (80089b4 <DMA_CalcBaseAndBitshift+0x124>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d03b      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a3c      	ldr	r2, [pc, #240]	; (80089b8 <DMA_CalcBaseAndBitshift+0x128>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d036      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a3b      	ldr	r2, [pc, #236]	; (80089bc <DMA_CalcBaseAndBitshift+0x12c>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d031      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a39      	ldr	r2, [pc, #228]	; (80089c0 <DMA_CalcBaseAndBitshift+0x130>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d02c      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a38      	ldr	r2, [pc, #224]	; (80089c4 <DMA_CalcBaseAndBitshift+0x134>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d027      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a36      	ldr	r2, [pc, #216]	; (80089c8 <DMA_CalcBaseAndBitshift+0x138>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d022      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a35      	ldr	r2, [pc, #212]	; (80089cc <DMA_CalcBaseAndBitshift+0x13c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d01d      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a33      	ldr	r2, [pc, #204]	; (80089d0 <DMA_CalcBaseAndBitshift+0x140>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d018      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a32      	ldr	r2, [pc, #200]	; (80089d4 <DMA_CalcBaseAndBitshift+0x144>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d013      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a30      	ldr	r2, [pc, #192]	; (80089d8 <DMA_CalcBaseAndBitshift+0x148>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00e      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a2f      	ldr	r2, [pc, #188]	; (80089dc <DMA_CalcBaseAndBitshift+0x14c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d009      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a2d      	ldr	r2, [pc, #180]	; (80089e0 <DMA_CalcBaseAndBitshift+0x150>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d004      	beq.n	8008938 <DMA_CalcBaseAndBitshift+0xa8>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a2c      	ldr	r2, [pc, #176]	; (80089e4 <DMA_CalcBaseAndBitshift+0x154>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d101      	bne.n	800893c <DMA_CalcBaseAndBitshift+0xac>
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <DMA_CalcBaseAndBitshift+0xae>
 800893c:	2300      	movs	r3, #0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d024      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	3b10      	subs	r3, #16
 800894a:	4a27      	ldr	r2, [pc, #156]	; (80089e8 <DMA_CalcBaseAndBitshift+0x158>)
 800894c:	fba2 2303 	umull	r2, r3, r2, r3
 8008950:	091b      	lsrs	r3, r3, #4
 8008952:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	4a24      	ldr	r2, [pc, #144]	; (80089ec <DMA_CalcBaseAndBitshift+0x15c>)
 800895c:	5cd3      	ldrb	r3, [r2, r3]
 800895e:	461a      	mov	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b03      	cmp	r3, #3
 8008968:	d908      	bls.n	800897c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	4b1f      	ldr	r3, [pc, #124]	; (80089f0 <DMA_CalcBaseAndBitshift+0x160>)
 8008972:	4013      	ands	r3, r2
 8008974:	1d1a      	adds	r2, r3, #4
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	659a      	str	r2, [r3, #88]	; 0x58
 800897a:	e00d      	b.n	8008998 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
 8008982:	4b1b      	ldr	r3, [pc, #108]	; (80089f0 <DMA_CalcBaseAndBitshift+0x160>)
 8008984:	4013      	ands	r3, r2
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	6593      	str	r3, [r2, #88]	; 0x58
 800898a:	e005      	b.n	8008998 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	40020010 	.word	0x40020010
 80089ac:	40020028 	.word	0x40020028
 80089b0:	40020040 	.word	0x40020040
 80089b4:	40020058 	.word	0x40020058
 80089b8:	40020070 	.word	0x40020070
 80089bc:	40020088 	.word	0x40020088
 80089c0:	400200a0 	.word	0x400200a0
 80089c4:	400200b8 	.word	0x400200b8
 80089c8:	40020410 	.word	0x40020410
 80089cc:	40020428 	.word	0x40020428
 80089d0:	40020440 	.word	0x40020440
 80089d4:	40020458 	.word	0x40020458
 80089d8:	40020470 	.word	0x40020470
 80089dc:	40020488 	.word	0x40020488
 80089e0:	400204a0 	.word	0x400204a0
 80089e4:	400204b8 	.word	0x400204b8
 80089e8:	aaaaaaab 	.word	0xaaaaaaab
 80089ec:	0800fa28 	.word	0x0800fa28
 80089f0:	fffffc00 	.word	0xfffffc00

080089f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d120      	bne.n	8008a4a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d858      	bhi.n	8008ac2 <DMA_CheckFifoParam+0xce>
 8008a10:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <DMA_CheckFifoParam+0x24>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a29 	.word	0x08008a29
 8008a1c:	08008a3b 	.word	0x08008a3b
 8008a20:	08008a29 	.word	0x08008a29
 8008a24:	08008ac3 	.word	0x08008ac3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d048      	beq.n	8008ac6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a38:	e045      	b.n	8008ac6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a42:	d142      	bne.n	8008aca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a48:	e03f      	b.n	8008aca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a52:	d123      	bne.n	8008a9c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d838      	bhi.n	8008ace <DMA_CheckFifoParam+0xda>
 8008a5c:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <DMA_CheckFifoParam+0x70>)
 8008a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a62:	bf00      	nop
 8008a64:	08008a75 	.word	0x08008a75
 8008a68:	08008a7b 	.word	0x08008a7b
 8008a6c:	08008a75 	.word	0x08008a75
 8008a70:	08008a8d 	.word	0x08008a8d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	73fb      	strb	r3, [r7, #15]
        break;
 8008a78:	e030      	b.n	8008adc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d025      	beq.n	8008ad2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a8a:	e022      	b.n	8008ad2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a94:	d11f      	bne.n	8008ad6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a9a:	e01c      	b.n	8008ad6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d902      	bls.n	8008aaa <DMA_CheckFifoParam+0xb6>
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d003      	beq.n	8008ab0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008aa8:	e018      	b.n	8008adc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	73fb      	strb	r3, [r7, #15]
        break;
 8008aae:	e015      	b.n	8008adc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00e      	beq.n	8008ada <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac0:	e00b      	b.n	8008ada <DMA_CheckFifoParam+0xe6>
        break;
 8008ac2:	bf00      	nop
 8008ac4:	e00a      	b.n	8008adc <DMA_CheckFifoParam+0xe8>
        break;
 8008ac6:	bf00      	nop
 8008ac8:	e008      	b.n	8008adc <DMA_CheckFifoParam+0xe8>
        break;
 8008aca:	bf00      	nop
 8008acc:	e006      	b.n	8008adc <DMA_CheckFifoParam+0xe8>
        break;
 8008ace:	bf00      	nop
 8008ad0:	e004      	b.n	8008adc <DMA_CheckFifoParam+0xe8>
        break;
 8008ad2:	bf00      	nop
 8008ad4:	e002      	b.n	8008adc <DMA_CheckFifoParam+0xe8>
        break;
 8008ad6:	bf00      	nop
 8008ad8:	e000      	b.n	8008adc <DMA_CheckFifoParam+0xe8>
    break;
 8008ada:	bf00      	nop
    }
  }

  return status;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop

08008aec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a38      	ldr	r2, [pc, #224]	; (8008be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d022      	beq.n	8008b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a36      	ldr	r2, [pc, #216]	; (8008be4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d01d      	beq.n	8008b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a35      	ldr	r2, [pc, #212]	; (8008be8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d018      	beq.n	8008b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a33      	ldr	r2, [pc, #204]	; (8008bec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d013      	beq.n	8008b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a32      	ldr	r2, [pc, #200]	; (8008bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00e      	beq.n	8008b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a30      	ldr	r2, [pc, #192]	; (8008bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d009      	beq.n	8008b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a2f      	ldr	r2, [pc, #188]	; (8008bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d004      	beq.n	8008b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a2d      	ldr	r2, [pc, #180]	; (8008bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d101      	bne.n	8008b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d01a      	beq.n	8008b8a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	3b08      	subs	r3, #8
 8008b5c:	4a28      	ldr	r2, [pc, #160]	; (8008c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b62:	091b      	lsrs	r3, r3, #4
 8008b64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4b26      	ldr	r3, [pc, #152]	; (8008c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	461a      	mov	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a24      	ldr	r2, [pc, #144]	; (8008c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008b78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f003 031f 	and.w	r3, r3, #31
 8008b80:	2201      	movs	r2, #1
 8008b82:	409a      	lsls	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008b88:	e024      	b.n	8008bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	3b10      	subs	r3, #16
 8008b92:	4a1e      	ldr	r2, [pc, #120]	; (8008c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008b94:	fba2 2303 	umull	r2, r3, r2, r3
 8008b98:	091b      	lsrs	r3, r3, #4
 8008b9a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4a1c      	ldr	r2, [pc, #112]	; (8008c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d806      	bhi.n	8008bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4a1b      	ldr	r2, [pc, #108]	; (8008c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d902      	bls.n	8008bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3308      	adds	r3, #8
 8008bb0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	4b18      	ldr	r3, [pc, #96]	; (8008c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	461a      	mov	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a16      	ldr	r2, [pc, #88]	; (8008c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008bc4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	2201      	movs	r2, #1
 8008bce:	409a      	lsls	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008bd4:	bf00      	nop
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	58025408 	.word	0x58025408
 8008be4:	5802541c 	.word	0x5802541c
 8008be8:	58025430 	.word	0x58025430
 8008bec:	58025444 	.word	0x58025444
 8008bf0:	58025458 	.word	0x58025458
 8008bf4:	5802546c 	.word	0x5802546c
 8008bf8:	58025480 	.word	0x58025480
 8008bfc:	58025494 	.word	0x58025494
 8008c00:	cccccccd 	.word	0xcccccccd
 8008c04:	16009600 	.word	0x16009600
 8008c08:	58025880 	.word	0x58025880
 8008c0c:	aaaaaaab 	.word	0xaaaaaaab
 8008c10:	400204b8 	.word	0x400204b8
 8008c14:	4002040f 	.word	0x4002040f
 8008c18:	10008200 	.word	0x10008200
 8008c1c:	40020880 	.word	0x40020880

08008c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d04a      	beq.n	8008ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d847      	bhi.n	8008ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a25      	ldr	r2, [pc, #148]	; (8008cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d022      	beq.n	8008c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a24      	ldr	r2, [pc, #144]	; (8008cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d01d      	beq.n	8008c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a22      	ldr	r2, [pc, #136]	; (8008ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d018      	beq.n	8008c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a21      	ldr	r2, [pc, #132]	; (8008ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d013      	beq.n	8008c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a1f      	ldr	r2, [pc, #124]	; (8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00e      	beq.n	8008c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a1e      	ldr	r2, [pc, #120]	; (8008cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d009      	beq.n	8008c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a1c      	ldr	r2, [pc, #112]	; (8008cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d004      	beq.n	8008c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a1b      	ldr	r2, [pc, #108]	; (8008cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d101      	bne.n	8008c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e000      	b.n	8008c92 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008c90:	2300      	movs	r3, #0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4b17      	ldr	r3, [pc, #92]	; (8008cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a15      	ldr	r2, [pc, #84]	; (8008cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008ca8:	671a      	str	r2, [r3, #112]	; 0x70
 8008caa:	e009      	b.n	8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	4b14      	ldr	r3, [pc, #80]	; (8008d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a11      	ldr	r2, [pc, #68]	; (8008d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008cbe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	409a      	lsls	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008ccc:	bf00      	nop
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	58025408 	.word	0x58025408
 8008cdc:	5802541c 	.word	0x5802541c
 8008ce0:	58025430 	.word	0x58025430
 8008ce4:	58025444 	.word	0x58025444
 8008ce8:	58025458 	.word	0x58025458
 8008cec:	5802546c 	.word	0x5802546c
 8008cf0:	58025480 	.word	0x58025480
 8008cf4:	58025494 	.word	0x58025494
 8008cf8:	1600963f 	.word	0x1600963f
 8008cfc:	58025940 	.word	0x58025940
 8008d00:	1000823f 	.word	0x1000823f
 8008d04:	40020940 	.word	0x40020940

08008d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b089      	sub	sp, #36	; 0x24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008d16:	4b86      	ldr	r3, [pc, #536]	; (8008f30 <HAL_GPIO_Init+0x228>)
 8008d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d1a:	e18c      	b.n	8009036 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	2101      	movs	r1, #1
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	fa01 f303 	lsl.w	r3, r1, r3
 8008d28:	4013      	ands	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 817e 	beq.w	8009030 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d005      	beq.n	8008d4c <HAL_GPIO_Init+0x44>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d130      	bne.n	8008dae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	2203      	movs	r2, #3
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	4013      	ands	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d82:	2201      	movs	r2, #1
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	091b      	lsrs	r3, r3, #4
 8008d98:	f003 0201 	and.w	r2, r3, #1
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f003 0303 	and.w	r3, r3, #3
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d017      	beq.n	8008dea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dca:	43db      	mvns	r3, r3
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	fa02 f303 	lsl.w	r3, r2, r3
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d123      	bne.n	8008e3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	08da      	lsrs	r2, r3, #3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3208      	adds	r2, #8
 8008dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	220f      	movs	r2, #15
 8008e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e12:	43db      	mvns	r3, r3
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	4013      	ands	r3, r2
 8008e18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	f003 0307 	and.w	r3, r3, #7
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	08da      	lsrs	r2, r3, #3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3208      	adds	r2, #8
 8008e38:	69b9      	ldr	r1, [r7, #24]
 8008e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	2203      	movs	r2, #3
 8008e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4e:	43db      	mvns	r3, r3
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	4013      	ands	r3, r2
 8008e54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	f003 0203 	and.w	r2, r3, #3
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	005b      	lsls	r3, r3, #1
 8008e62:	fa02 f303 	lsl.w	r3, r2, r3
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 80d8 	beq.w	8009030 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e80:	4b2c      	ldr	r3, [pc, #176]	; (8008f34 <HAL_GPIO_Init+0x22c>)
 8008e82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e86:	4a2b      	ldr	r2, [pc, #172]	; (8008f34 <HAL_GPIO_Init+0x22c>)
 8008e88:	f043 0302 	orr.w	r3, r3, #2
 8008e8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008e90:	4b28      	ldr	r3, [pc, #160]	; (8008f34 <HAL_GPIO_Init+0x22c>)
 8008e92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e9e:	4a26      	ldr	r2, [pc, #152]	; (8008f38 <HAL_GPIO_Init+0x230>)
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	089b      	lsrs	r3, r3, #2
 8008ea4:	3302      	adds	r3, #2
 8008ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	220f      	movs	r2, #15
 8008eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eba:	43db      	mvns	r3, r3
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a1d      	ldr	r2, [pc, #116]	; (8008f3c <HAL_GPIO_Init+0x234>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d04a      	beq.n	8008f60 <HAL_GPIO_Init+0x258>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a1c      	ldr	r2, [pc, #112]	; (8008f40 <HAL_GPIO_Init+0x238>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d02b      	beq.n	8008f2a <HAL_GPIO_Init+0x222>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a1b      	ldr	r2, [pc, #108]	; (8008f44 <HAL_GPIO_Init+0x23c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d025      	beq.n	8008f26 <HAL_GPIO_Init+0x21e>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a1a      	ldr	r2, [pc, #104]	; (8008f48 <HAL_GPIO_Init+0x240>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d01f      	beq.n	8008f22 <HAL_GPIO_Init+0x21a>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a19      	ldr	r2, [pc, #100]	; (8008f4c <HAL_GPIO_Init+0x244>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d019      	beq.n	8008f1e <HAL_GPIO_Init+0x216>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a18      	ldr	r2, [pc, #96]	; (8008f50 <HAL_GPIO_Init+0x248>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d013      	beq.n	8008f1a <HAL_GPIO_Init+0x212>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a17      	ldr	r2, [pc, #92]	; (8008f54 <HAL_GPIO_Init+0x24c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d00d      	beq.n	8008f16 <HAL_GPIO_Init+0x20e>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a16      	ldr	r2, [pc, #88]	; (8008f58 <HAL_GPIO_Init+0x250>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d007      	beq.n	8008f12 <HAL_GPIO_Init+0x20a>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a15      	ldr	r2, [pc, #84]	; (8008f5c <HAL_GPIO_Init+0x254>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d101      	bne.n	8008f0e <HAL_GPIO_Init+0x206>
 8008f0a:	2309      	movs	r3, #9
 8008f0c:	e029      	b.n	8008f62 <HAL_GPIO_Init+0x25a>
 8008f0e:	230a      	movs	r3, #10
 8008f10:	e027      	b.n	8008f62 <HAL_GPIO_Init+0x25a>
 8008f12:	2307      	movs	r3, #7
 8008f14:	e025      	b.n	8008f62 <HAL_GPIO_Init+0x25a>
 8008f16:	2306      	movs	r3, #6
 8008f18:	e023      	b.n	8008f62 <HAL_GPIO_Init+0x25a>
 8008f1a:	2305      	movs	r3, #5
 8008f1c:	e021      	b.n	8008f62 <HAL_GPIO_Init+0x25a>
 8008f1e:	2304      	movs	r3, #4
 8008f20:	e01f      	b.n	8008f62 <HAL_GPIO_Init+0x25a>
 8008f22:	2303      	movs	r3, #3
 8008f24:	e01d      	b.n	8008f62 <HAL_GPIO_Init+0x25a>
 8008f26:	2302      	movs	r3, #2
 8008f28:	e01b      	b.n	8008f62 <HAL_GPIO_Init+0x25a>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e019      	b.n	8008f62 <HAL_GPIO_Init+0x25a>
 8008f2e:	bf00      	nop
 8008f30:	58000080 	.word	0x58000080
 8008f34:	58024400 	.word	0x58024400
 8008f38:	58000400 	.word	0x58000400
 8008f3c:	58020000 	.word	0x58020000
 8008f40:	58020400 	.word	0x58020400
 8008f44:	58020800 	.word	0x58020800
 8008f48:	58020c00 	.word	0x58020c00
 8008f4c:	58021000 	.word	0x58021000
 8008f50:	58021400 	.word	0x58021400
 8008f54:	58021800 	.word	0x58021800
 8008f58:	58021c00 	.word	0x58021c00
 8008f5c:	58022400 	.word	0x58022400
 8008f60:	2300      	movs	r3, #0
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	f002 0203 	and.w	r2, r2, #3
 8008f68:	0092      	lsls	r2, r2, #2
 8008f6a:	4093      	lsls	r3, r2
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f72:	4938      	ldr	r1, [pc, #224]	; (8009054 <HAL_GPIO_Init+0x34c>)
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	089b      	lsrs	r3, r3, #2
 8008f78:	3302      	adds	r3, #2
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	43db      	mvns	r3, r3
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	4013      	ands	r3, r2
 8008f90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	43db      	mvns	r3, r3
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	43db      	mvns	r3, r3
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	4013      	ands	r3, r2
 8009014:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009022:	69ba      	ldr	r2, [r7, #24]
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	4313      	orrs	r3, r2
 8009028:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	3301      	adds	r3, #1
 8009034:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	fa22 f303 	lsr.w	r3, r2, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	f47f ae6b 	bne.w	8008d1c <HAL_GPIO_Init+0x14>
  }
}
 8009046:	bf00      	nop
 8009048:	bf00      	nop
 800904a:	3724      	adds	r7, #36	; 0x24
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	58000400 	.word	0x58000400

08009058 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009062:	2300      	movs	r3, #0
 8009064:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009066:	4b72      	ldr	r3, [pc, #456]	; (8009230 <HAL_GPIO_DeInit+0x1d8>)
 8009068:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800906a:	e0d3      	b.n	8009214 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800906c:	2201      	movs	r2, #1
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	fa02 f303 	lsl.w	r3, r2, r3
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	4013      	ands	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 80c6 	beq.w	800920e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009082:	4a6c      	ldr	r2, [pc, #432]	; (8009234 <HAL_GPIO_DeInit+0x1dc>)
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	089b      	lsrs	r3, r3, #2
 8009088:	3302      	adds	r3, #2
 800908a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800908e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	220f      	movs	r2, #15
 800909a:	fa02 f303 	lsl.w	r3, r2, r3
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	4013      	ands	r3, r2
 80090a2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a64      	ldr	r2, [pc, #400]	; (8009238 <HAL_GPIO_DeInit+0x1e0>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d031      	beq.n	8009110 <HAL_GPIO_DeInit+0xb8>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a63      	ldr	r2, [pc, #396]	; (800923c <HAL_GPIO_DeInit+0x1e4>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d02b      	beq.n	800910c <HAL_GPIO_DeInit+0xb4>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a62      	ldr	r2, [pc, #392]	; (8009240 <HAL_GPIO_DeInit+0x1e8>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d025      	beq.n	8009108 <HAL_GPIO_DeInit+0xb0>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a61      	ldr	r2, [pc, #388]	; (8009244 <HAL_GPIO_DeInit+0x1ec>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d01f      	beq.n	8009104 <HAL_GPIO_DeInit+0xac>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a60      	ldr	r2, [pc, #384]	; (8009248 <HAL_GPIO_DeInit+0x1f0>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d019      	beq.n	8009100 <HAL_GPIO_DeInit+0xa8>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a5f      	ldr	r2, [pc, #380]	; (800924c <HAL_GPIO_DeInit+0x1f4>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d013      	beq.n	80090fc <HAL_GPIO_DeInit+0xa4>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a5e      	ldr	r2, [pc, #376]	; (8009250 <HAL_GPIO_DeInit+0x1f8>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d00d      	beq.n	80090f8 <HAL_GPIO_DeInit+0xa0>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a5d      	ldr	r2, [pc, #372]	; (8009254 <HAL_GPIO_DeInit+0x1fc>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d007      	beq.n	80090f4 <HAL_GPIO_DeInit+0x9c>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a5c      	ldr	r2, [pc, #368]	; (8009258 <HAL_GPIO_DeInit+0x200>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d101      	bne.n	80090f0 <HAL_GPIO_DeInit+0x98>
 80090ec:	2309      	movs	r3, #9
 80090ee:	e010      	b.n	8009112 <HAL_GPIO_DeInit+0xba>
 80090f0:	230a      	movs	r3, #10
 80090f2:	e00e      	b.n	8009112 <HAL_GPIO_DeInit+0xba>
 80090f4:	2307      	movs	r3, #7
 80090f6:	e00c      	b.n	8009112 <HAL_GPIO_DeInit+0xba>
 80090f8:	2306      	movs	r3, #6
 80090fa:	e00a      	b.n	8009112 <HAL_GPIO_DeInit+0xba>
 80090fc:	2305      	movs	r3, #5
 80090fe:	e008      	b.n	8009112 <HAL_GPIO_DeInit+0xba>
 8009100:	2304      	movs	r3, #4
 8009102:	e006      	b.n	8009112 <HAL_GPIO_DeInit+0xba>
 8009104:	2303      	movs	r3, #3
 8009106:	e004      	b.n	8009112 <HAL_GPIO_DeInit+0xba>
 8009108:	2302      	movs	r3, #2
 800910a:	e002      	b.n	8009112 <HAL_GPIO_DeInit+0xba>
 800910c:	2301      	movs	r3, #1
 800910e:	e000      	b.n	8009112 <HAL_GPIO_DeInit+0xba>
 8009110:	2300      	movs	r3, #0
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	f002 0203 	and.w	r2, r2, #3
 8009118:	0092      	lsls	r2, r2, #2
 800911a:	4093      	lsls	r3, r2
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	429a      	cmp	r2, r3
 8009120:	d136      	bne.n	8009190 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	43db      	mvns	r3, r3
 800912a:	401a      	ands	r2, r3
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	43db      	mvns	r3, r3
 8009138:	401a      	ands	r2, r3
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800913e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	43db      	mvns	r3, r3
 8009148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800914c:	4013      	ands	r3, r2
 800914e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	43db      	mvns	r3, r3
 800915a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800915e:	4013      	ands	r3, r2
 8009160:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f003 0303 	and.w	r3, r3, #3
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	220f      	movs	r2, #15
 800916c:	fa02 f303 	lsl.w	r3, r2, r3
 8009170:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009172:	4a30      	ldr	r2, [pc, #192]	; (8009234 <HAL_GPIO_DeInit+0x1dc>)
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	089b      	lsrs	r3, r3, #2
 8009178:	3302      	adds	r3, #2
 800917a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	43da      	mvns	r2, r3
 8009182:	482c      	ldr	r0, [pc, #176]	; (8009234 <HAL_GPIO_DeInit+0x1dc>)
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	089b      	lsrs	r3, r3, #2
 8009188:	400a      	ands	r2, r1
 800918a:	3302      	adds	r3, #2
 800918c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	2103      	movs	r1, #3
 800919a:	fa01 f303 	lsl.w	r3, r1, r3
 800919e:	431a      	orrs	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	08da      	lsrs	r2, r3, #3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3208      	adds	r2, #8
 80091ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	220f      	movs	r2, #15
 80091ba:	fa02 f303 	lsl.w	r3, r2, r3
 80091be:	43db      	mvns	r3, r3
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	08d2      	lsrs	r2, r2, #3
 80091c4:	4019      	ands	r1, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3208      	adds	r2, #8
 80091ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	2103      	movs	r1, #3
 80091d8:	fa01 f303 	lsl.w	r3, r1, r3
 80091dc:	43db      	mvns	r3, r3
 80091de:	401a      	ands	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	2101      	movs	r1, #1
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	fa01 f303 	lsl.w	r3, r1, r3
 80091f0:	43db      	mvns	r3, r3
 80091f2:	401a      	ands	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	2103      	movs	r1, #3
 8009202:	fa01 f303 	lsl.w	r3, r1, r3
 8009206:	43db      	mvns	r3, r3
 8009208:	401a      	ands	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	3301      	adds	r3, #1
 8009212:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	f47f af25 	bne.w	800906c <HAL_GPIO_DeInit+0x14>
  }
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	371c      	adds	r7, #28
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	58000080 	.word	0x58000080
 8009234:	58000400 	.word	0x58000400
 8009238:	58020000 	.word	0x58020000
 800923c:	58020400 	.word	0x58020400
 8009240:	58020800 	.word	0x58020800
 8009244:	58020c00 	.word	0x58020c00
 8009248:	58021000 	.word	0x58021000
 800924c:	58021400 	.word	0x58021400
 8009250:	58021800 	.word	0x58021800
 8009254:	58021c00 	.word	0x58021c00
 8009258:	58022400 	.word	0x58022400

0800925c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	807b      	strh	r3, [r7, #2]
 8009268:	4613      	mov	r3, r2
 800926a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800926c:	787b      	ldrb	r3, [r7, #1]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009272:	887a      	ldrh	r2, [r7, #2]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009278:	e003      	b.n	8009282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800927a:	887b      	ldrh	r3, [r7, #2]
 800927c:	041a      	lsls	r2, r3, #16
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	619a      	str	r2, [r3, #24]
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	4603      	mov	r3, r0
 8009296:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800929c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80092a0:	88fb      	ldrh	r3, [r7, #6]
 80092a2:	4013      	ands	r3, r2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d008      	beq.n	80092ba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80092a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092ac:	88fb      	ldrh	r3, [r7, #6]
 80092ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80092b2:	88fb      	ldrh	r3, [r7, #6]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 f804 	bl	80092c2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80092ba:	bf00      	nop
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	4603      	mov	r3, r0
 80092ca:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80092e0:	4b19      	ldr	r3, [pc, #100]	; (8009348 <HAL_PWREx_ConfigSupply+0x70>)
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d00a      	beq.n	8009302 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80092ec:	4b16      	ldr	r3, [pc, #88]	; (8009348 <HAL_PWREx_ConfigSupply+0x70>)
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f003 0307 	and.w	r3, r3, #7
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d001      	beq.n	80092fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e01f      	b.n	800933e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	e01d      	b.n	800933e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009302:	4b11      	ldr	r3, [pc, #68]	; (8009348 <HAL_PWREx_ConfigSupply+0x70>)
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f023 0207 	bic.w	r2, r3, #7
 800930a:	490f      	ldr	r1, [pc, #60]	; (8009348 <HAL_PWREx_ConfigSupply+0x70>)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4313      	orrs	r3, r2
 8009310:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009312:	f7fc fbbb 	bl	8005a8c <HAL_GetTick>
 8009316:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009318:	e009      	b.n	800932e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800931a:	f7fc fbb7 	bl	8005a8c <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009328:	d901      	bls.n	800932e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e007      	b.n	800933e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800932e:	4b06      	ldr	r3, [pc, #24]	; (8009348 <HAL_PWREx_ConfigSupply+0x70>)
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800933a:	d1ee      	bne.n	800931a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	58024800 	.word	0x58024800

0800934c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08c      	sub	sp, #48	; 0x30
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e39d      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 8087 	beq.w	800947a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800936c:	4b88      	ldr	r3, [pc, #544]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009374:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009376:	4b86      	ldr	r3, [pc, #536]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937e:	2b10      	cmp	r3, #16
 8009380:	d007      	beq.n	8009392 <HAL_RCC_OscConfig+0x46>
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	2b18      	cmp	r3, #24
 8009386:	d110      	bne.n	80093aa <HAL_RCC_OscConfig+0x5e>
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	2b02      	cmp	r3, #2
 8009390:	d10b      	bne.n	80093aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009392:	4b7f      	ldr	r3, [pc, #508]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d06c      	beq.n	8009478 <HAL_RCC_OscConfig+0x12c>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d168      	bne.n	8009478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e377      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b2:	d106      	bne.n	80093c2 <HAL_RCC_OscConfig+0x76>
 80093b4:	4b76      	ldr	r3, [pc, #472]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a75      	ldr	r2, [pc, #468]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80093ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	e02e      	b.n	8009420 <HAL_RCC_OscConfig+0xd4>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10c      	bne.n	80093e4 <HAL_RCC_OscConfig+0x98>
 80093ca:	4b71      	ldr	r3, [pc, #452]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a70      	ldr	r2, [pc, #448]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80093d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	4b6e      	ldr	r3, [pc, #440]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a6d      	ldr	r2, [pc, #436]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80093dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	e01d      	b.n	8009420 <HAL_RCC_OscConfig+0xd4>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093ec:	d10c      	bne.n	8009408 <HAL_RCC_OscConfig+0xbc>
 80093ee:	4b68      	ldr	r3, [pc, #416]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a67      	ldr	r2, [pc, #412]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80093f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	4b65      	ldr	r3, [pc, #404]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a64      	ldr	r2, [pc, #400]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 8009400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	e00b      	b.n	8009420 <HAL_RCC_OscConfig+0xd4>
 8009408:	4b61      	ldr	r3, [pc, #388]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a60      	ldr	r2, [pc, #384]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800940e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	4b5e      	ldr	r3, [pc, #376]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a5d      	ldr	r2, [pc, #372]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800941a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800941e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d013      	beq.n	8009450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009428:	f7fc fb30 	bl	8005a8c <HAL_GetTick>
 800942c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800942e:	e008      	b.n	8009442 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009430:	f7fc fb2c 	bl	8005a8c <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b64      	cmp	r3, #100	; 0x64
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e32b      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009442:	4b53      	ldr	r3, [pc, #332]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0f0      	beq.n	8009430 <HAL_RCC_OscConfig+0xe4>
 800944e:	e014      	b.n	800947a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009450:	f7fc fb1c 	bl	8005a8c <HAL_GetTick>
 8009454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009456:	e008      	b.n	800946a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009458:	f7fc fb18 	bl	8005a8c <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	2b64      	cmp	r3, #100	; 0x64
 8009464:	d901      	bls.n	800946a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e317      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800946a:	4b49      	ldr	r3, [pc, #292]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1f0      	bne.n	8009458 <HAL_RCC_OscConfig+0x10c>
 8009476:	e000      	b.n	800947a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 808c 	beq.w	80095a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009488:	4b41      	ldr	r3, [pc, #260]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009490:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009492:	4b3f      	ldr	r3, [pc, #252]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 8009494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009496:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d007      	beq.n	80094ae <HAL_RCC_OscConfig+0x162>
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	2b18      	cmp	r3, #24
 80094a2:	d137      	bne.n	8009514 <HAL_RCC_OscConfig+0x1c8>
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f003 0303 	and.w	r3, r3, #3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d132      	bne.n	8009514 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094ae:	4b38      	ldr	r3, [pc, #224]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d005      	beq.n	80094c6 <HAL_RCC_OscConfig+0x17a>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e2e9      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094c6:	4b32      	ldr	r3, [pc, #200]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f023 0219 	bic.w	r2, r3, #25
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	492f      	ldr	r1, [pc, #188]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094d8:	f7fc fad8 	bl	8005a8c <HAL_GetTick>
 80094dc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094de:	e008      	b.n	80094f2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094e0:	f7fc fad4 	bl	8005a8c <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e2d3      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094f2:	4b27      	ldr	r3, [pc, #156]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0304 	and.w	r3, r3, #4
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0f0      	beq.n	80094e0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094fe:	4b24      	ldr	r3, [pc, #144]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	061b      	lsls	r3, r3, #24
 800950c:	4920      	ldr	r1, [pc, #128]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800950e:	4313      	orrs	r3, r2
 8009510:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009512:	e045      	b.n	80095a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d026      	beq.n	800956a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800951c:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f023 0219 	bic.w	r2, r3, #25
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	4919      	ldr	r1, [pc, #100]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800952a:	4313      	orrs	r3, r2
 800952c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800952e:	f7fc faad 	bl	8005a8c <HAL_GetTick>
 8009532:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009534:	e008      	b.n	8009548 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009536:	f7fc faa9 	bl	8005a8c <HAL_GetTick>
 800953a:	4602      	mov	r2, r0
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	2b02      	cmp	r3, #2
 8009542:	d901      	bls.n	8009548 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e2a8      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009548:	4b11      	ldr	r3, [pc, #68]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b00      	cmp	r3, #0
 8009552:	d0f0      	beq.n	8009536 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009554:	4b0e      	ldr	r3, [pc, #56]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	061b      	lsls	r3, r3, #24
 8009562:	490b      	ldr	r1, [pc, #44]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 8009564:	4313      	orrs	r3, r2
 8009566:	604b      	str	r3, [r1, #4]
 8009568:	e01a      	b.n	80095a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800956a:	4b09      	ldr	r3, [pc, #36]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a08      	ldr	r2, [pc, #32]	; (8009590 <HAL_RCC_OscConfig+0x244>)
 8009570:	f023 0301 	bic.w	r3, r3, #1
 8009574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009576:	f7fc fa89 	bl	8005a8c <HAL_GetTick>
 800957a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800957c:	e00a      	b.n	8009594 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800957e:	f7fc fa85 	bl	8005a8c <HAL_GetTick>
 8009582:	4602      	mov	r2, r0
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	2b02      	cmp	r3, #2
 800958a:	d903      	bls.n	8009594 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	e284      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
 8009590:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009594:	4b96      	ldr	r3, [pc, #600]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1ee      	bne.n	800957e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0310 	and.w	r3, r3, #16
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d06a      	beq.n	8009682 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095ac:	4b90      	ldr	r3, [pc, #576]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80095b6:	4b8e      	ldr	r3, [pc, #568]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80095b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ba:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	2b08      	cmp	r3, #8
 80095c0:	d007      	beq.n	80095d2 <HAL_RCC_OscConfig+0x286>
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	2b18      	cmp	r3, #24
 80095c6:	d11b      	bne.n	8009600 <HAL_RCC_OscConfig+0x2b4>
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d116      	bne.n	8009600 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095d2:	4b87      	ldr	r3, [pc, #540]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <HAL_RCC_OscConfig+0x29e>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	2b80      	cmp	r3, #128	; 0x80
 80095e4:	d001      	beq.n	80095ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e257      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095ea:	4b81      	ldr	r3, [pc, #516]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	061b      	lsls	r3, r3, #24
 80095f8:	497d      	ldr	r1, [pc, #500]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095fe:	e040      	b.n	8009682 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d023      	beq.n	8009650 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009608:	4b79      	ldr	r3, [pc, #484]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a78      	ldr	r2, [pc, #480]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 800960e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009614:	f7fc fa3a 	bl	8005a8c <HAL_GetTick>
 8009618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800961a:	e008      	b.n	800962e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800961c:	f7fc fa36 	bl	8005a8c <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	2b02      	cmp	r3, #2
 8009628:	d901      	bls.n	800962e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e235      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800962e:	4b70      	ldr	r3, [pc, #448]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0f0      	beq.n	800961c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800963a:	4b6d      	ldr	r3, [pc, #436]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	061b      	lsls	r3, r3, #24
 8009648:	4969      	ldr	r1, [pc, #420]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 800964a:	4313      	orrs	r3, r2
 800964c:	60cb      	str	r3, [r1, #12]
 800964e:	e018      	b.n	8009682 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009650:	4b67      	ldr	r3, [pc, #412]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a66      	ldr	r2, [pc, #408]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 8009656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800965a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800965c:	f7fc fa16 	bl	8005a8c <HAL_GetTick>
 8009660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009662:	e008      	b.n	8009676 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009664:	f7fc fa12 	bl	8005a8c <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	2b02      	cmp	r3, #2
 8009670:	d901      	bls.n	8009676 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e211      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009676:	4b5e      	ldr	r3, [pc, #376]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1f0      	bne.n	8009664 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0308 	and.w	r3, r3, #8
 800968a:	2b00      	cmp	r3, #0
 800968c:	d036      	beq.n	80096fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d019      	beq.n	80096ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009696:	4b56      	ldr	r3, [pc, #344]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 8009698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800969a:	4a55      	ldr	r2, [pc, #340]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 800969c:	f043 0301 	orr.w	r3, r3, #1
 80096a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096a2:	f7fc f9f3 	bl	8005a8c <HAL_GetTick>
 80096a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80096a8:	e008      	b.n	80096bc <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096aa:	f7fc f9ef 	bl	8005a8c <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d901      	bls.n	80096bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e1ee      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80096bc:	4b4c      	ldr	r3, [pc, #304]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80096be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096c0:	f003 0302 	and.w	r3, r3, #2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0f0      	beq.n	80096aa <HAL_RCC_OscConfig+0x35e>
 80096c8:	e018      	b.n	80096fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096ca:	4b49      	ldr	r3, [pc, #292]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80096cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ce:	4a48      	ldr	r2, [pc, #288]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80096d0:	f023 0301 	bic.w	r3, r3, #1
 80096d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d6:	f7fc f9d9 	bl	8005a8c <HAL_GetTick>
 80096da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096dc:	e008      	b.n	80096f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096de:	f7fc f9d5 	bl	8005a8c <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d901      	bls.n	80096f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e1d4      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096f0:	4b3f      	ldr	r3, [pc, #252]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80096f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1f0      	bne.n	80096de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0320 	and.w	r3, r3, #32
 8009704:	2b00      	cmp	r3, #0
 8009706:	d036      	beq.n	8009776 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d019      	beq.n	8009744 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009710:	4b37      	ldr	r3, [pc, #220]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a36      	ldr	r2, [pc, #216]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 8009716:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800971a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800971c:	f7fc f9b6 	bl	8005a8c <HAL_GetTick>
 8009720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009722:	e008      	b.n	8009736 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009724:	f7fc f9b2 	bl	8005a8c <HAL_GetTick>
 8009728:	4602      	mov	r2, r0
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	2b02      	cmp	r3, #2
 8009730:	d901      	bls.n	8009736 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e1b1      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009736:	4b2e      	ldr	r3, [pc, #184]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0f0      	beq.n	8009724 <HAL_RCC_OscConfig+0x3d8>
 8009742:	e018      	b.n	8009776 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009744:	4b2a      	ldr	r3, [pc, #168]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a29      	ldr	r2, [pc, #164]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 800974a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800974e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009750:	f7fc f99c 	bl	8005a8c <HAL_GetTick>
 8009754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009756:	e008      	b.n	800976a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009758:	f7fc f998 	bl	8005a8c <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	2b02      	cmp	r3, #2
 8009764:	d901      	bls.n	800976a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	e197      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800976a:	4b21      	ldr	r3, [pc, #132]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1f0      	bne.n	8009758 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 8086 	beq.w	8009890 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009784:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <HAL_RCC_OscConfig+0x4a8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a1a      	ldr	r2, [pc, #104]	; (80097f4 <HAL_RCC_OscConfig+0x4a8>)
 800978a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800978e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009790:	f7fc f97c 	bl	8005a8c <HAL_GetTick>
 8009794:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009796:	e008      	b.n	80097aa <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009798:	f7fc f978 	bl	8005a8c <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b64      	cmp	r3, #100	; 0x64
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e177      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097aa:	4b12      	ldr	r3, [pc, #72]	; (80097f4 <HAL_RCC_OscConfig+0x4a8>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0f0      	beq.n	8009798 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d106      	bne.n	80097cc <HAL_RCC_OscConfig+0x480>
 80097be:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80097c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c2:	4a0b      	ldr	r2, [pc, #44]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80097c4:	f043 0301 	orr.w	r3, r3, #1
 80097c8:	6713      	str	r3, [r2, #112]	; 0x70
 80097ca:	e032      	b.n	8009832 <HAL_RCC_OscConfig+0x4e6>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d111      	bne.n	80097f8 <HAL_RCC_OscConfig+0x4ac>
 80097d4:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80097d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d8:	4a05      	ldr	r2, [pc, #20]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80097da:	f023 0301 	bic.w	r3, r3, #1
 80097de:	6713      	str	r3, [r2, #112]	; 0x70
 80097e0:	4b03      	ldr	r3, [pc, #12]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80097e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e4:	4a02      	ldr	r2, [pc, #8]	; (80097f0 <HAL_RCC_OscConfig+0x4a4>)
 80097e6:	f023 0304 	bic.w	r3, r3, #4
 80097ea:	6713      	str	r3, [r2, #112]	; 0x70
 80097ec:	e021      	b.n	8009832 <HAL_RCC_OscConfig+0x4e6>
 80097ee:	bf00      	nop
 80097f0:	58024400 	.word	0x58024400
 80097f4:	58024800 	.word	0x58024800
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	2b05      	cmp	r3, #5
 80097fe:	d10c      	bne.n	800981a <HAL_RCC_OscConfig+0x4ce>
 8009800:	4b83      	ldr	r3, [pc, #524]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009804:	4a82      	ldr	r2, [pc, #520]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009806:	f043 0304 	orr.w	r3, r3, #4
 800980a:	6713      	str	r3, [r2, #112]	; 0x70
 800980c:	4b80      	ldr	r3, [pc, #512]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 800980e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009810:	4a7f      	ldr	r2, [pc, #508]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009812:	f043 0301 	orr.w	r3, r3, #1
 8009816:	6713      	str	r3, [r2, #112]	; 0x70
 8009818:	e00b      	b.n	8009832 <HAL_RCC_OscConfig+0x4e6>
 800981a:	4b7d      	ldr	r3, [pc, #500]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 800981c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981e:	4a7c      	ldr	r2, [pc, #496]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009820:	f023 0301 	bic.w	r3, r3, #1
 8009824:	6713      	str	r3, [r2, #112]	; 0x70
 8009826:	4b7a      	ldr	r3, [pc, #488]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982a:	4a79      	ldr	r2, [pc, #484]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 800982c:	f023 0304 	bic.w	r3, r3, #4
 8009830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d015      	beq.n	8009866 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800983a:	f7fc f927 	bl	8005a8c <HAL_GetTick>
 800983e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009840:	e00a      	b.n	8009858 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009842:	f7fc f923 	bl	8005a8c <HAL_GetTick>
 8009846:	4602      	mov	r2, r0
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009850:	4293      	cmp	r3, r2
 8009852:	d901      	bls.n	8009858 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e120      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009858:	4b6d      	ldr	r3, [pc, #436]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 800985a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985c:	f003 0302 	and.w	r3, r3, #2
 8009860:	2b00      	cmp	r3, #0
 8009862:	d0ee      	beq.n	8009842 <HAL_RCC_OscConfig+0x4f6>
 8009864:	e014      	b.n	8009890 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009866:	f7fc f911 	bl	8005a8c <HAL_GetTick>
 800986a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800986c:	e00a      	b.n	8009884 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800986e:	f7fc f90d 	bl	8005a8c <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	f241 3288 	movw	r2, #5000	; 0x1388
 800987c:	4293      	cmp	r3, r2
 800987e:	d901      	bls.n	8009884 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e10a      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009884:	4b62      	ldr	r3, [pc, #392]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1ee      	bne.n	800986e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 80ff 	beq.w	8009a98 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800989a:	4b5d      	ldr	r3, [pc, #372]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098a2:	2b18      	cmp	r3, #24
 80098a4:	f000 80ba 	beq.w	8009a1c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	f040 8095 	bne.w	80099dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098b2:	4b57      	ldr	r3, [pc, #348]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a56      	ldr	r2, [pc, #344]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80098b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098be:	f7fc f8e5 	bl	8005a8c <HAL_GetTick>
 80098c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098c4:	e008      	b.n	80098d8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098c6:	f7fc f8e1 	bl	8005a8c <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d901      	bls.n	80098d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e0e0      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098d8:	4b4d      	ldr	r3, [pc, #308]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1f0      	bne.n	80098c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098e4:	4b4a      	ldr	r3, [pc, #296]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80098e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098e8:	4b4a      	ldr	r3, [pc, #296]	; (8009a14 <HAL_RCC_OscConfig+0x6c8>)
 80098ea:	4013      	ands	r3, r2
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80098f4:	0112      	lsls	r2, r2, #4
 80098f6:	430a      	orrs	r2, r1
 80098f8:	4945      	ldr	r1, [pc, #276]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	628b      	str	r3, [r1, #40]	; 0x28
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009902:	3b01      	subs	r3, #1
 8009904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990c:	3b01      	subs	r3, #1
 800990e:	025b      	lsls	r3, r3, #9
 8009910:	b29b      	uxth	r3, r3
 8009912:	431a      	orrs	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009918:	3b01      	subs	r3, #1
 800991a:	041b      	lsls	r3, r3, #16
 800991c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009920:	431a      	orrs	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009926:	3b01      	subs	r3, #1
 8009928:	061b      	lsls	r3, r3, #24
 800992a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800992e:	4938      	ldr	r1, [pc, #224]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009930:	4313      	orrs	r3, r2
 8009932:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009934:	4b36      	ldr	r3, [pc, #216]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	4a35      	ldr	r2, [pc, #212]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 800993a:	f023 0301 	bic.w	r3, r3, #1
 800993e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009940:	4b33      	ldr	r3, [pc, #204]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009944:	4b34      	ldr	r3, [pc, #208]	; (8009a18 <HAL_RCC_OscConfig+0x6cc>)
 8009946:	4013      	ands	r3, r2
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800994c:	00d2      	lsls	r2, r2, #3
 800994e:	4930      	ldr	r1, [pc, #192]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009950:	4313      	orrs	r3, r2
 8009952:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009954:	4b2e      	ldr	r3, [pc, #184]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009958:	f023 020c 	bic.w	r2, r3, #12
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009960:	492b      	ldr	r1, [pc, #172]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009962:	4313      	orrs	r3, r2
 8009964:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009966:	4b2a      	ldr	r3, [pc, #168]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996a:	f023 0202 	bic.w	r2, r3, #2
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009972:	4927      	ldr	r1, [pc, #156]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009974:	4313      	orrs	r3, r2
 8009976:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009978:	4b25      	ldr	r3, [pc, #148]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997c:	4a24      	ldr	r2, [pc, #144]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 800997e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009984:	4b22      	ldr	r3, [pc, #136]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	4a21      	ldr	r2, [pc, #132]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 800998a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800998e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009990:	4b1f      	ldr	r3, [pc, #124]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	4a1e      	ldr	r2, [pc, #120]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800999a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800999c:	4b1c      	ldr	r3, [pc, #112]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	4a1b      	ldr	r2, [pc, #108]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80099a2:	f043 0301 	orr.w	r3, r3, #1
 80099a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099a8:	4b19      	ldr	r3, [pc, #100]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a18      	ldr	r2, [pc, #96]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80099ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b4:	f7fc f86a 	bl	8005a8c <HAL_GetTick>
 80099b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099ba:	e008      	b.n	80099ce <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099bc:	f7fc f866 	bl	8005a8c <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d901      	bls.n	80099ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e065      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099ce:	4b10      	ldr	r3, [pc, #64]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d0f0      	beq.n	80099bc <HAL_RCC_OscConfig+0x670>
 80099da:	e05d      	b.n	8009a98 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099dc:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a0b      	ldr	r2, [pc, #44]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 80099e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e8:	f7fc f850 	bl	8005a8c <HAL_GetTick>
 80099ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099f0:	f7fc f84c 	bl	8005a8c <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e04b      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a02:	4b03      	ldr	r3, [pc, #12]	; (8009a10 <HAL_RCC_OscConfig+0x6c4>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f0      	bne.n	80099f0 <HAL_RCC_OscConfig+0x6a4>
 8009a0e:	e043      	b.n	8009a98 <HAL_RCC_OscConfig+0x74c>
 8009a10:	58024400 	.word	0x58024400
 8009a14:	fffffc0c 	.word	0xfffffc0c
 8009a18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009a1c:	4b21      	ldr	r3, [pc, #132]	; (8009aa4 <HAL_RCC_OscConfig+0x758>)
 8009a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009a22:	4b20      	ldr	r3, [pc, #128]	; (8009aa4 <HAL_RCC_OscConfig+0x758>)
 8009a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a26:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d031      	beq.n	8009a94 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f003 0203 	and.w	r2, r3, #3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d12a      	bne.n	8009a94 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	091b      	lsrs	r3, r3, #4
 8009a42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d122      	bne.n	8009a94 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a58:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d11a      	bne.n	8009a94 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	0a5b      	lsrs	r3, r3, #9
 8009a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d111      	bne.n	8009a94 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	0c1b      	lsrs	r3, r3, #16
 8009a74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d108      	bne.n	8009a94 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	0e1b      	lsrs	r3, r3, #24
 8009a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d001      	beq.n	8009a98 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e000      	b.n	8009a9a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3730      	adds	r7, #48	; 0x30
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	58024400 	.word	0x58024400

08009aa8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e19c      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009abc:	4b8a      	ldr	r3, [pc, #552]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 030f 	and.w	r3, r3, #15
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d910      	bls.n	8009aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009aca:	4b87      	ldr	r3, [pc, #540]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f023 020f 	bic.w	r2, r3, #15
 8009ad2:	4985      	ldr	r1, [pc, #532]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ada:	4b83      	ldr	r3, [pc, #524]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 030f 	and.w	r3, r3, #15
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d001      	beq.n	8009aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e184      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d010      	beq.n	8009b1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	691a      	ldr	r2, [r3, #16]
 8009afc:	4b7b      	ldr	r3, [pc, #492]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d908      	bls.n	8009b1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b08:	4b78      	ldr	r3, [pc, #480]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	4975      	ldr	r1, [pc, #468]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0308 	and.w	r3, r3, #8
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d010      	beq.n	8009b48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	695a      	ldr	r2, [r3, #20]
 8009b2a:	4b70      	ldr	r3, [pc, #448]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d908      	bls.n	8009b48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b36:	4b6d      	ldr	r3, [pc, #436]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	496a      	ldr	r1, [pc, #424]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0310 	and.w	r3, r3, #16
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d010      	beq.n	8009b76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	4b64      	ldr	r3, [pc, #400]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d908      	bls.n	8009b76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b64:	4b61      	ldr	r3, [pc, #388]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	495e      	ldr	r1, [pc, #376]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d010      	beq.n	8009ba4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	69da      	ldr	r2, [r3, #28]
 8009b86:	4b59      	ldr	r3, [pc, #356]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d908      	bls.n	8009ba4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009b92:	4b56      	ldr	r3, [pc, #344]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	4953      	ldr	r1, [pc, #332]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d010      	beq.n	8009bd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	4b4d      	ldr	r3, [pc, #308]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	f003 030f 	and.w	r3, r3, #15
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d908      	bls.n	8009bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bc0:	4b4a      	ldr	r3, [pc, #296]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	f023 020f 	bic.w	r2, r3, #15
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	4947      	ldr	r1, [pc, #284]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d055      	beq.n	8009c8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009bde:	4b43      	ldr	r3, [pc, #268]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	4940      	ldr	r1, [pc, #256]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009bec:	4313      	orrs	r3, r2
 8009bee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d107      	bne.n	8009c08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009bf8:	4b3c      	ldr	r3, [pc, #240]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d121      	bne.n	8009c48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e0f6      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2b03      	cmp	r3, #3
 8009c0e:	d107      	bne.n	8009c20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c10:	4b36      	ldr	r3, [pc, #216]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d115      	bne.n	8009c48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e0ea      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d107      	bne.n	8009c38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c28:	4b30      	ldr	r3, [pc, #192]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d109      	bne.n	8009c48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e0de      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c38:	4b2c      	ldr	r3, [pc, #176]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e0d6      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c48:	4b28      	ldr	r3, [pc, #160]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f023 0207 	bic.w	r2, r3, #7
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	4925      	ldr	r1, [pc, #148]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c5a:	f7fb ff17 	bl	8005a8c <HAL_GetTick>
 8009c5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c60:	e00a      	b.n	8009c78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c62:	f7fb ff13 	bl	8005a8c <HAL_GetTick>
 8009c66:	4602      	mov	r2, r0
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d901      	bls.n	8009c78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e0be      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c78:	4b1c      	ldr	r3, [pc, #112]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d1eb      	bne.n	8009c62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d010      	beq.n	8009cb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	4b14      	ldr	r3, [pc, #80]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	f003 030f 	and.w	r3, r3, #15
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d208      	bcs.n	8009cb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ca6:	4b11      	ldr	r3, [pc, #68]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	f023 020f 	bic.w	r2, r3, #15
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	490e      	ldr	r1, [pc, #56]	; (8009cec <HAL_RCC_ClockConfig+0x244>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 030f 	and.w	r3, r3, #15
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d214      	bcs.n	8009cf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cc6:	4b08      	ldr	r3, [pc, #32]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f023 020f 	bic.w	r2, r3, #15
 8009cce:	4906      	ldr	r1, [pc, #24]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cd6:	4b04      	ldr	r3, [pc, #16]	; (8009ce8 <HAL_RCC_ClockConfig+0x240>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 030f 	and.w	r3, r3, #15
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d005      	beq.n	8009cf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e086      	b.n	8009df6 <HAL_RCC_ClockConfig+0x34e>
 8009ce8:	52002000 	.word	0x52002000
 8009cec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0304 	and.w	r3, r3, #4
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d010      	beq.n	8009d1e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691a      	ldr	r2, [r3, #16]
 8009d00:	4b3f      	ldr	r3, [pc, #252]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d208      	bcs.n	8009d1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d0c:	4b3c      	ldr	r3, [pc, #240]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	4939      	ldr	r1, [pc, #228]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0308 	and.w	r3, r3, #8
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d010      	beq.n	8009d4c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	695a      	ldr	r2, [r3, #20]
 8009d2e:	4b34      	ldr	r3, [pc, #208]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d208      	bcs.n	8009d4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d3a:	4b31      	ldr	r3, [pc, #196]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	492e      	ldr	r1, [pc, #184]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0310 	and.w	r3, r3, #16
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d010      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	699a      	ldr	r2, [r3, #24]
 8009d5c:	4b28      	ldr	r3, [pc, #160]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d208      	bcs.n	8009d7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d68:	4b25      	ldr	r3, [pc, #148]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	4922      	ldr	r1, [pc, #136]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d010      	beq.n	8009da8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	69da      	ldr	r2, [r3, #28]
 8009d8a:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d208      	bcs.n	8009da8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009d96:	4b1a      	ldr	r3, [pc, #104]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	4917      	ldr	r1, [pc, #92]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009da8:	f000 f834 	bl	8009e14 <HAL_RCC_GetSysClockFreq>
 8009dac:	4602      	mov	r2, r0
 8009dae:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	0a1b      	lsrs	r3, r3, #8
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	4912      	ldr	r1, [pc, #72]	; (8009e04 <HAL_RCC_ClockConfig+0x35c>)
 8009dba:	5ccb      	ldrb	r3, [r1, r3]
 8009dbc:	f003 031f 	and.w	r3, r3, #31
 8009dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009dc6:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <HAL_RCC_ClockConfig+0x358>)
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f003 030f 	and.w	r3, r3, #15
 8009dce:	4a0d      	ldr	r2, [pc, #52]	; (8009e04 <HAL_RCC_ClockConfig+0x35c>)
 8009dd0:	5cd3      	ldrb	r3, [r2, r3]
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ddc:	4a0a      	ldr	r2, [pc, #40]	; (8009e08 <HAL_RCC_ClockConfig+0x360>)
 8009dde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009de0:	4a0a      	ldr	r2, [pc, #40]	; (8009e0c <HAL_RCC_ClockConfig+0x364>)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009de6:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <HAL_RCC_ClockConfig+0x368>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fb fe04 	bl	80059f8 <HAL_InitTick>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	58024400 	.word	0x58024400
 8009e04:	0800fa18 	.word	0x0800fa18
 8009e08:	2400005c 	.word	0x2400005c
 8009e0c:	24000058 	.word	0x24000058
 8009e10:	24000060 	.word	0x24000060

08009e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b089      	sub	sp, #36	; 0x24
 8009e18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e1a:	4bb3      	ldr	r3, [pc, #716]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e22:	2b18      	cmp	r3, #24
 8009e24:	f200 8155 	bhi.w	800a0d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009e28:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e95 	.word	0x08009e95
 8009e34:	0800a0d3 	.word	0x0800a0d3
 8009e38:	0800a0d3 	.word	0x0800a0d3
 8009e3c:	0800a0d3 	.word	0x0800a0d3
 8009e40:	0800a0d3 	.word	0x0800a0d3
 8009e44:	0800a0d3 	.word	0x0800a0d3
 8009e48:	0800a0d3 	.word	0x0800a0d3
 8009e4c:	0800a0d3 	.word	0x0800a0d3
 8009e50:	08009ebb 	.word	0x08009ebb
 8009e54:	0800a0d3 	.word	0x0800a0d3
 8009e58:	0800a0d3 	.word	0x0800a0d3
 8009e5c:	0800a0d3 	.word	0x0800a0d3
 8009e60:	0800a0d3 	.word	0x0800a0d3
 8009e64:	0800a0d3 	.word	0x0800a0d3
 8009e68:	0800a0d3 	.word	0x0800a0d3
 8009e6c:	0800a0d3 	.word	0x0800a0d3
 8009e70:	08009ec1 	.word	0x08009ec1
 8009e74:	0800a0d3 	.word	0x0800a0d3
 8009e78:	0800a0d3 	.word	0x0800a0d3
 8009e7c:	0800a0d3 	.word	0x0800a0d3
 8009e80:	0800a0d3 	.word	0x0800a0d3
 8009e84:	0800a0d3 	.word	0x0800a0d3
 8009e88:	0800a0d3 	.word	0x0800a0d3
 8009e8c:	0800a0d3 	.word	0x0800a0d3
 8009e90:	08009ec7 	.word	0x08009ec7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e94:	4b94      	ldr	r3, [pc, #592]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 0320 	and.w	r3, r3, #32
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d009      	beq.n	8009eb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ea0:	4b91      	ldr	r3, [pc, #580]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	08db      	lsrs	r3, r3, #3
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	4a90      	ldr	r2, [pc, #576]	; (800a0ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009eac:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009eb2:	e111      	b.n	800a0d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009eb4:	4b8d      	ldr	r3, [pc, #564]	; (800a0ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009eb6:	61bb      	str	r3, [r7, #24]
    break;
 8009eb8:	e10e      	b.n	800a0d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009eba:	4b8d      	ldr	r3, [pc, #564]	; (800a0f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ebc:	61bb      	str	r3, [r7, #24]
    break;
 8009ebe:	e10b      	b.n	800a0d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009ec0:	4b8c      	ldr	r3, [pc, #560]	; (800a0f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009ec2:	61bb      	str	r3, [r7, #24]
    break;
 8009ec4:	e108      	b.n	800a0d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ec6:	4b88      	ldr	r3, [pc, #544]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eca:	f003 0303 	and.w	r3, r3, #3
 8009ece:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009ed0:	4b85      	ldr	r3, [pc, #532]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed4:	091b      	lsrs	r3, r3, #4
 8009ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009edc:	4b82      	ldr	r3, [pc, #520]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	f003 0301 	and.w	r3, r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ee6:	4b80      	ldr	r3, [pc, #512]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eea:	08db      	lsrs	r3, r3, #3
 8009eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009efe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 80e1 	beq.w	800a0cc <HAL_RCC_GetSysClockFreq+0x2b8>
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	f000 8083 	beq.w	800a018 <HAL_RCC_GetSysClockFreq+0x204>
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	f200 80a1 	bhi.w	800a05c <HAL_RCC_GetSysClockFreq+0x248>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <HAL_RCC_GetSysClockFreq+0x114>
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d056      	beq.n	8009fd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009f26:	e099      	b.n	800a05c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f28:	4b6f      	ldr	r3, [pc, #444]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0320 	and.w	r3, r3, #32
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d02d      	beq.n	8009f90 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f34:	4b6c      	ldr	r3, [pc, #432]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	08db      	lsrs	r3, r3, #3
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	4a6b      	ldr	r2, [pc, #428]	; (800a0ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
 8009f44:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	ee07 3a90 	vmov	s15, r3
 8009f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f5e:	4b62      	ldr	r3, [pc, #392]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f72:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a0f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009f8e:	e087      	b.n	800a0a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	ee07 3a90 	vmov	s15, r3
 8009f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a0fc <HAL_RCC_GetSysClockFreq+0x2e8>
 8009f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fa2:	4b51      	ldr	r3, [pc, #324]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fb6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a0f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fd2:	e065      	b.n	800a0a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	ee07 3a90 	vmov	s15, r3
 8009fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fde:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a100 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe6:	4b40      	ldr	r3, [pc, #256]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fee:	ee07 3a90 	vmov	s15, r3
 8009ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ffa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a0f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a016:	e043      	b.n	800a0a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a104 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02a:	4b2f      	ldr	r3, [pc, #188]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a03a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a03e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a0f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a04a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a05a:	e021      	b.n	800a0a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	ee07 3a90 	vmov	s15, r3
 800a062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a066:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a100 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06e:	4b1e      	ldr	r3, [pc, #120]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a082:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a0f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a09e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a0a0:	4b11      	ldr	r3, [pc, #68]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a4:	0a5b      	lsrs	r3, r3, #9
 800a0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	ee07 3a90 	vmov	s15, r3
 800a0b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a0b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0c4:	ee17 3a90 	vmov	r3, s15
 800a0c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a0ca:	e005      	b.n	800a0d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	61bb      	str	r3, [r7, #24]
    break;
 800a0d0:	e002      	b.n	800a0d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a0d2:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a0d4:	61bb      	str	r3, [r7, #24]
    break;
 800a0d6:	bf00      	nop
  }

  return sysclockfreq;
 800a0d8:	69bb      	ldr	r3, [r7, #24]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3724      	adds	r7, #36	; 0x24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	58024400 	.word	0x58024400
 800a0ec:	03d09000 	.word	0x03d09000
 800a0f0:	003d0900 	.word	0x003d0900
 800a0f4:	017d7840 	.word	0x017d7840
 800a0f8:	46000000 	.word	0x46000000
 800a0fc:	4c742400 	.word	0x4c742400
 800a100:	4a742400 	.word	0x4a742400
 800a104:	4bbebc20 	.word	0x4bbebc20

0800a108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a10e:	f7ff fe81 	bl	8009e14 <HAL_RCC_GetSysClockFreq>
 800a112:	4602      	mov	r2, r0
 800a114:	4b10      	ldr	r3, [pc, #64]	; (800a158 <HAL_RCC_GetHCLKFreq+0x50>)
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	0a1b      	lsrs	r3, r3, #8
 800a11a:	f003 030f 	and.w	r3, r3, #15
 800a11e:	490f      	ldr	r1, [pc, #60]	; (800a15c <HAL_RCC_GetHCLKFreq+0x54>)
 800a120:	5ccb      	ldrb	r3, [r1, r3]
 800a122:	f003 031f 	and.w	r3, r3, #31
 800a126:	fa22 f303 	lsr.w	r3, r2, r3
 800a12a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a12c:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <HAL_RCC_GetHCLKFreq+0x50>)
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	f003 030f 	and.w	r3, r3, #15
 800a134:	4a09      	ldr	r2, [pc, #36]	; (800a15c <HAL_RCC_GetHCLKFreq+0x54>)
 800a136:	5cd3      	ldrb	r3, [r2, r3]
 800a138:	f003 031f 	and.w	r3, r3, #31
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	fa22 f303 	lsr.w	r3, r2, r3
 800a142:	4a07      	ldr	r2, [pc, #28]	; (800a160 <HAL_RCC_GetHCLKFreq+0x58>)
 800a144:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a146:	4a07      	ldr	r2, [pc, #28]	; (800a164 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a14c:	4b04      	ldr	r3, [pc, #16]	; (800a160 <HAL_RCC_GetHCLKFreq+0x58>)
 800a14e:	681b      	ldr	r3, [r3, #0]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	58024400 	.word	0x58024400
 800a15c:	0800fa18 	.word	0x0800fa18
 800a160:	2400005c 	.word	0x2400005c
 800a164:	24000058 	.word	0x24000058

0800a168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a16c:	f7ff ffcc 	bl	800a108 <HAL_RCC_GetHCLKFreq>
 800a170:	4602      	mov	r2, r0
 800a172:	4b06      	ldr	r3, [pc, #24]	; (800a18c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	091b      	lsrs	r3, r3, #4
 800a178:	f003 0307 	and.w	r3, r3, #7
 800a17c:	4904      	ldr	r1, [pc, #16]	; (800a190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a17e:	5ccb      	ldrb	r3, [r1, r3]
 800a180:	f003 031f 	and.w	r3, r3, #31
 800a184:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a188:	4618      	mov	r0, r3
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	58024400 	.word	0x58024400
 800a190:	0800fa18 	.word	0x0800fa18

0800a194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a198:	f7ff ffb6 	bl	800a108 <HAL_RCC_GetHCLKFreq>
 800a19c:	4602      	mov	r2, r0
 800a19e:	4b06      	ldr	r3, [pc, #24]	; (800a1b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1a0:	69db      	ldr	r3, [r3, #28]
 800a1a2:	0a1b      	lsrs	r3, r3, #8
 800a1a4:	f003 0307 	and.w	r3, r3, #7
 800a1a8:	4904      	ldr	r1, [pc, #16]	; (800a1bc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a1aa:	5ccb      	ldrb	r3, [r1, r3]
 800a1ac:	f003 031f 	and.w	r3, r3, #31
 800a1b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	58024400 	.word	0x58024400
 800a1bc:	0800fa18 	.word	0x0800fa18

0800a1c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d03f      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1e4:	d02a      	beq.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a1e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1ea:	d824      	bhi.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a1ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1f0:	d018      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a1f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1f6:	d81e      	bhi.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a1fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a200:	d007      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a202:	e018      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a204:	4ba4      	ldr	r3, [pc, #656]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	4aa3      	ldr	r2, [pc, #652]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a20a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a20e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a210:	e015      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	3304      	adds	r3, #4
 800a216:	2102      	movs	r1, #2
 800a218:	4618      	mov	r0, r3
 800a21a:	f001 f989 	bl	800b530 <RCCEx_PLL2_Config>
 800a21e:	4603      	mov	r3, r0
 800a220:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a222:	e00c      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3324      	adds	r3, #36	; 0x24
 800a228:	2102      	movs	r1, #2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f001 fa32 	bl	800b694 <RCCEx_PLL3_Config>
 800a230:	4603      	mov	r3, r0
 800a232:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a234:	e003      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	75fb      	strb	r3, [r7, #23]
      break;
 800a23a:	e000      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a23c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d109      	bne.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a244:	4b94      	ldr	r3, [pc, #592]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a250:	4991      	ldr	r1, [pc, #580]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a252:	4313      	orrs	r3, r2
 800a254:	650b      	str	r3, [r1, #80]	; 0x50
 800a256:	e001      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a258:	7dfb      	ldrb	r3, [r7, #23]
 800a25a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a264:	2b00      	cmp	r3, #0
 800a266:	d03d      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	d826      	bhi.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a270:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a276:	bf00      	nop
 800a278:	0800a28d 	.word	0x0800a28d
 800a27c:	0800a29b 	.word	0x0800a29b
 800a280:	0800a2ad 	.word	0x0800a2ad
 800a284:	0800a2c5 	.word	0x0800a2c5
 800a288:	0800a2c5 	.word	0x0800a2c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a28c:	4b82      	ldr	r3, [pc, #520]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	4a81      	ldr	r2, [pc, #516]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a296:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a298:	e015      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3304      	adds	r3, #4
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f001 f945 	bl	800b530 <RCCEx_PLL2_Config>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a2aa:	e00c      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3324      	adds	r3, #36	; 0x24
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f001 f9ee 	bl	800b694 <RCCEx_PLL3_Config>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a2bc:	e003      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c2:	e000      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a2c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a2cc:	4b72      	ldr	r3, [pc, #456]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2d0:	f023 0207 	bic.w	r2, r3, #7
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d8:	496f      	ldr	r1, [pc, #444]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	650b      	str	r3, [r1, #80]	; 0x50
 800a2de:	e001      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
 800a2e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d051      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2f6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a2fa:	d036      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a2fc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a300:	d830      	bhi.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a306:	d032      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a308:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a30c:	d82a      	bhi.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a30e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a312:	d02e      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800a314:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a318:	d824      	bhi.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a31a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a31e:	d018      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a324:	d81e      	bhi.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a32a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a32e:	d007      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a330:	e018      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a332:	4b59      	ldr	r3, [pc, #356]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	4a58      	ldr	r2, [pc, #352]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a33c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a33e:	e019      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3304      	adds	r3, #4
 800a344:	2100      	movs	r1, #0
 800a346:	4618      	mov	r0, r3
 800a348:	f001 f8f2 	bl	800b530 <RCCEx_PLL2_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a350:	e010      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	3324      	adds	r3, #36	; 0x24
 800a356:	2100      	movs	r1, #0
 800a358:	4618      	mov	r0, r3
 800a35a:	f001 f99b 	bl	800b694 <RCCEx_PLL3_Config>
 800a35e:	4603      	mov	r3, r0
 800a360:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a362:	e007      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	75fb      	strb	r3, [r7, #23]
      break;
 800a368:	e004      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a36a:	bf00      	nop
 800a36c:	e002      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a36e:	bf00      	nop
 800a370:	e000      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a372:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10a      	bne.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a37a:	4b47      	ldr	r3, [pc, #284]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a388:	4943      	ldr	r1, [pc, #268]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	658b      	str	r3, [r1, #88]	; 0x58
 800a38e:	e001      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d051      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a3a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a3aa:	d036      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800a3ac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a3b0:	d830      	bhi.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a3b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3b6:	d032      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800a3b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3bc:	d82a      	bhi.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a3be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a3c2:	d02e      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800a3c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a3c8:	d824      	bhi.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3ce:	d018      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800a3d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3d4:	d81e      	bhi.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800a3da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a3de:	d007      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a3e0:	e018      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e2:	4b2d      	ldr	r3, [pc, #180]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	4a2c      	ldr	r2, [pc, #176]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a3e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a3ee:	e019      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f001 f89a 	bl	800b530 <RCCEx_PLL2_Config>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a400:	e010      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3324      	adds	r3, #36	; 0x24
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f001 f943 	bl	800b694 <RCCEx_PLL3_Config>
 800a40e:	4603      	mov	r3, r0
 800a410:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a412:	e007      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	75fb      	strb	r3, [r7, #23]
      break;
 800a418:	e004      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a41a:	bf00      	nop
 800a41c:	e002      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a41e:	bf00      	nop
 800a420:	e000      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a422:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10a      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a42a:	4b1b      	ldr	r3, [pc, #108]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a438:	4917      	ldr	r1, [pc, #92]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	658b      	str	r3, [r1, #88]	; 0x58
 800a43e:	e001      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d035      	beq.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a454:	2b30      	cmp	r3, #48	; 0x30
 800a456:	d01c      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a458:	2b30      	cmp	r3, #48	; 0x30
 800a45a:	d817      	bhi.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a45c:	2b20      	cmp	r3, #32
 800a45e:	d00c      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a460:	2b20      	cmp	r3, #32
 800a462:	d813      	bhi.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a464:	2b00      	cmp	r3, #0
 800a466:	d019      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a468:	2b10      	cmp	r3, #16
 800a46a:	d10f      	bne.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a46c:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	4a09      	ldr	r2, [pc, #36]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a476:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a478:	e011      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	3304      	adds	r3, #4
 800a47e:	2102      	movs	r1, #2
 800a480:	4618      	mov	r0, r3
 800a482:	f001 f855 	bl	800b530 <RCCEx_PLL2_Config>
 800a486:	4603      	mov	r3, r0
 800a488:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a48a:	e008      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	75fb      	strb	r3, [r7, #23]
      break;
 800a490:	e005      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800a492:	bf00      	nop
 800a494:	e003      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a496:	bf00      	nop
 800a498:	58024400 	.word	0x58024400
      break;
 800a49c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d109      	bne.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a4a4:	4ba3      	ldr	r3, [pc, #652]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4b0:	49a0      	ldr	r1, [pc, #640]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a4b6:	e001      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d047      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4d0:	d030      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800a4d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4d6:	d82a      	bhi.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a4d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4dc:	d02c      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a4de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4e2:	d824      	bhi.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a4e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4e8:	d018      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a4ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4ee:	d81e      	bhi.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d003      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a4f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f8:	d007      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a4fa:	e018      	b.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4fc:	4b8d      	ldr	r3, [pc, #564]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	4a8c      	ldr	r2, [pc, #560]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a508:	e017      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	3304      	adds	r3, #4
 800a50e:	2100      	movs	r1, #0
 800a510:	4618      	mov	r0, r3
 800a512:	f001 f80d 	bl	800b530 <RCCEx_PLL2_Config>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a51a:	e00e      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3324      	adds	r3, #36	; 0x24
 800a520:	2100      	movs	r1, #0
 800a522:	4618      	mov	r0, r3
 800a524:	f001 f8b6 	bl	800b694 <RCCEx_PLL3_Config>
 800a528:	4603      	mov	r3, r0
 800a52a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a52c:	e005      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	75fb      	strb	r3, [r7, #23]
      break;
 800a532:	e002      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a534:	bf00      	nop
 800a536:	e000      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d109      	bne.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a540:	4b7c      	ldr	r3, [pc, #496]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a544:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a54c:	4979      	ldr	r1, [pc, #484]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a54e:	4313      	orrs	r3, r2
 800a550:	650b      	str	r3, [r1, #80]	; 0x50
 800a552:	e001      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d049      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a56c:	d02e      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a56e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a572:	d828      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a574:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a578:	d02a      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a57a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a57e:	d822      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a580:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a584:	d026      	beq.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a586:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a58a:	d81c      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a58c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a590:	d010      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a596:	d816      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01d      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5a0:	d111      	bne.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 ffc1 	bl	800b530 <RCCEx_PLL2_Config>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a5b2:	e012      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3324      	adds	r3, #36	; 0x24
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f001 f86a 	bl	800b694 <RCCEx_PLL3_Config>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a5c4:	e009      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a5ca:	e006      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a5cc:	bf00      	nop
 800a5ce:	e004      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a5d0:	bf00      	nop
 800a5d2:	e002      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a5d4:	bf00      	nop
 800a5d6:	e000      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a5d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d109      	bne.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a5e0:	4b54      	ldr	r3, [pc, #336]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a5e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ec:	4951      	ldr	r1, [pc, #324]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	650b      	str	r3, [r1, #80]	; 0x50
 800a5f2:	e001      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f4:	7dfb      	ldrb	r3, [r7, #23]
 800a5f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d04b      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a60a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a60e:	d02e      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a614:	d828      	bhi.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a61a:	d02a      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a61c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a620:	d822      	bhi.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a622:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a626:	d026      	beq.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a628:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a62c:	d81c      	bhi.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a62e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a632:	d010      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a638:	d816      	bhi.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d01d      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a63e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a642:	d111      	bne.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3304      	adds	r3, #4
 800a648:	2101      	movs	r1, #1
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 ff70 	bl	800b530 <RCCEx_PLL2_Config>
 800a650:	4603      	mov	r3, r0
 800a652:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a654:	e012      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3324      	adds	r3, #36	; 0x24
 800a65a:	2101      	movs	r1, #1
 800a65c:	4618      	mov	r0, r3
 800a65e:	f001 f819 	bl	800b694 <RCCEx_PLL3_Config>
 800a662:	4603      	mov	r3, r0
 800a664:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a666:	e009      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	75fb      	strb	r3, [r7, #23]
      break;
 800a66c:	e006      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a66e:	bf00      	nop
 800a670:	e004      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a672:	bf00      	nop
 800a674:	e002      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a676:	bf00      	nop
 800a678:	e000      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a67a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10a      	bne.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a682:	4b2c      	ldr	r3, [pc, #176]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a686:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a690:	4928      	ldr	r1, [pc, #160]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a692:	4313      	orrs	r3, r2
 800a694:	658b      	str	r3, [r1, #88]	; 0x58
 800a696:	e001      	b.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d02f      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6b0:	d00e      	beq.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a6b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6b6:	d814      	bhi.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d015      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a6bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6c0:	d10f      	bne.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6c2:	4b1c      	ldr	r3, [pc, #112]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c6:	4a1b      	ldr	r2, [pc, #108]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a6c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a6ce:	e00c      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 ff2a 	bl	800b530 <RCCEx_PLL2_Config>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a6e0:	e003      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a6e6:	e000      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a6e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d109      	bne.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a6f0:	4b10      	ldr	r3, [pc, #64]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6fc:	490d      	ldr	r1, [pc, #52]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	650b      	str	r3, [r1, #80]	; 0x50
 800a702:	e001      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a704:	7dfb      	ldrb	r3, [r7, #23]
 800a706:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d034      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d81d      	bhi.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a71c:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a75f 	.word	0x0800a75f
 800a728:	0800a739 	.word	0x0800a739
 800a72c:	0800a747 	.word	0x0800a747
 800a730:	0800a75f 	.word	0x0800a75f
 800a734:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a738:	4bb1      	ldr	r3, [pc, #708]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	4ab0      	ldr	r2, [pc, #704]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a73e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a744:	e00c      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3304      	adds	r3, #4
 800a74a:	2102      	movs	r1, #2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 feef 	bl	800b530 <RCCEx_PLL2_Config>
 800a752:	4603      	mov	r3, r0
 800a754:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a756:	e003      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	75fb      	strb	r3, [r7, #23]
      break;
 800a75c:	e000      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a75e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a760:	7dfb      	ldrb	r3, [r7, #23]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d109      	bne.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a766:	4ba6      	ldr	r3, [pc, #664]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a76a:	f023 0203 	bic.w	r2, r3, #3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a772:	49a3      	ldr	r1, [pc, #652]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a774:	4313      	orrs	r3, r2
 800a776:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a778:	e001      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 8086 	beq.w	800a898 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a78c:	4b9d      	ldr	r3, [pc, #628]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a9c      	ldr	r2, [pc, #624]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a796:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a798:	f7fb f978 	bl	8005a8c <HAL_GetTick>
 800a79c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a79e:	e009      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7a0:	f7fb f974 	bl	8005a8c <HAL_GetTick>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	2b64      	cmp	r3, #100	; 0x64
 800a7ac:	d902      	bls.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	75fb      	strb	r3, [r7, #23]
        break;
 800a7b2:	e005      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7b4:	4b93      	ldr	r3, [pc, #588]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d0ef      	beq.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a7c0:	7dfb      	ldrb	r3, [r7, #23]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d166      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a7c6:	4b8e      	ldr	r3, [pc, #568]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7d0:	4053      	eors	r3, r2
 800a7d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d013      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a7da:	4b89      	ldr	r3, [pc, #548]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a7e4:	4b86      	ldr	r3, [pc, #536]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7e8:	4a85      	ldr	r2, [pc, #532]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a7f0:	4b83      	ldr	r3, [pc, #524]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f4:	4a82      	ldr	r2, [pc, #520]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a7fc:	4a80      	ldr	r2, [pc, #512]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a80c:	d115      	bne.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80e:	f7fb f93d 	bl	8005a8c <HAL_GetTick>
 800a812:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a814:	e00b      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a816:	f7fb f939 	bl	8005a8c <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	f241 3288 	movw	r2, #5000	; 0x1388
 800a824:	4293      	cmp	r3, r2
 800a826:	d902      	bls.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	75fb      	strb	r3, [r7, #23]
            break;
 800a82c:	e005      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a82e:	4b74      	ldr	r3, [pc, #464]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0ed      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d126      	bne.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a84a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a84e:	d10d      	bne.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a850:	4b6b      	ldr	r3, [pc, #428]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a85e:	0919      	lsrs	r1, r3, #4
 800a860:	4b69      	ldr	r3, [pc, #420]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a862:	400b      	ands	r3, r1
 800a864:	4966      	ldr	r1, [pc, #408]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a866:	4313      	orrs	r3, r2
 800a868:	610b      	str	r3, [r1, #16]
 800a86a:	e005      	b.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a86c:	4b64      	ldr	r3, [pc, #400]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	4a63      	ldr	r2, [pc, #396]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a872:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a876:	6113      	str	r3, [r2, #16]
 800a878:	4b61      	ldr	r3, [pc, #388]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a87a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a886:	495e      	ldr	r1, [pc, #376]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a888:	4313      	orrs	r3, r2
 800a88a:	670b      	str	r3, [r1, #112]	; 0x70
 800a88c:	e004      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a88e:	7dfb      	ldrb	r3, [r7, #23]
 800a890:	75bb      	strb	r3, [r7, #22]
 800a892:	e001      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d07e      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8a8:	2b28      	cmp	r3, #40	; 0x28
 800a8aa:	d867      	bhi.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a8ac:	a201      	add	r2, pc, #4	; (adr r2, 800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b2:	bf00      	nop
 800a8b4:	0800a983 	.word	0x0800a983
 800a8b8:	0800a97d 	.word	0x0800a97d
 800a8bc:	0800a97d 	.word	0x0800a97d
 800a8c0:	0800a97d 	.word	0x0800a97d
 800a8c4:	0800a97d 	.word	0x0800a97d
 800a8c8:	0800a97d 	.word	0x0800a97d
 800a8cc:	0800a97d 	.word	0x0800a97d
 800a8d0:	0800a97d 	.word	0x0800a97d
 800a8d4:	0800a959 	.word	0x0800a959
 800a8d8:	0800a97d 	.word	0x0800a97d
 800a8dc:	0800a97d 	.word	0x0800a97d
 800a8e0:	0800a97d 	.word	0x0800a97d
 800a8e4:	0800a97d 	.word	0x0800a97d
 800a8e8:	0800a97d 	.word	0x0800a97d
 800a8ec:	0800a97d 	.word	0x0800a97d
 800a8f0:	0800a97d 	.word	0x0800a97d
 800a8f4:	0800a96b 	.word	0x0800a96b
 800a8f8:	0800a97d 	.word	0x0800a97d
 800a8fc:	0800a97d 	.word	0x0800a97d
 800a900:	0800a97d 	.word	0x0800a97d
 800a904:	0800a97d 	.word	0x0800a97d
 800a908:	0800a97d 	.word	0x0800a97d
 800a90c:	0800a97d 	.word	0x0800a97d
 800a910:	0800a97d 	.word	0x0800a97d
 800a914:	0800a983 	.word	0x0800a983
 800a918:	0800a97d 	.word	0x0800a97d
 800a91c:	0800a97d 	.word	0x0800a97d
 800a920:	0800a97d 	.word	0x0800a97d
 800a924:	0800a97d 	.word	0x0800a97d
 800a928:	0800a97d 	.word	0x0800a97d
 800a92c:	0800a97d 	.word	0x0800a97d
 800a930:	0800a97d 	.word	0x0800a97d
 800a934:	0800a983 	.word	0x0800a983
 800a938:	0800a97d 	.word	0x0800a97d
 800a93c:	0800a97d 	.word	0x0800a97d
 800a940:	0800a97d 	.word	0x0800a97d
 800a944:	0800a97d 	.word	0x0800a97d
 800a948:	0800a97d 	.word	0x0800a97d
 800a94c:	0800a97d 	.word	0x0800a97d
 800a950:	0800a97d 	.word	0x0800a97d
 800a954:	0800a983 	.word	0x0800a983
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3304      	adds	r3, #4
 800a95c:	2101      	movs	r1, #1
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 fde6 	bl	800b530 <RCCEx_PLL2_Config>
 800a964:	4603      	mov	r3, r0
 800a966:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a968:	e00c      	b.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	3324      	adds	r3, #36	; 0x24
 800a96e:	2101      	movs	r1, #1
 800a970:	4618      	mov	r0, r3
 800a972:	f000 fe8f 	bl	800b694 <RCCEx_PLL3_Config>
 800a976:	4603      	mov	r3, r0
 800a978:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a97a:	e003      	b.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	75fb      	strb	r3, [r7, #23]
      break;
 800a980:	e000      	b.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a982:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a984:	7dfb      	ldrb	r3, [r7, #23]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d109      	bne.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a98a:	4b1d      	ldr	r3, [pc, #116]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a996:	491a      	ldr	r1, [pc, #104]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a998:	4313      	orrs	r3, r2
 800a99a:	654b      	str	r3, [r1, #84]	; 0x54
 800a99c:	e001      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
 800a9a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d03e      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	d820      	bhi.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a9b6:	a201      	add	r2, pc, #4	; (adr r2, 800a9bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9bc:	0800aa0d 	.word	0x0800aa0d
 800a9c0:	0800a9d5 	.word	0x0800a9d5
 800a9c4:	0800a9e7 	.word	0x0800a9e7
 800a9c8:	0800aa0d 	.word	0x0800aa0d
 800a9cc:	0800aa0d 	.word	0x0800aa0d
 800a9d0:	0800aa0d 	.word	0x0800aa0d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	2101      	movs	r1, #1
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fda8 	bl	800b530 <RCCEx_PLL2_Config>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a9e4:	e013      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	3324      	adds	r3, #36	; 0x24
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 fe51 	bl	800b694 <RCCEx_PLL3_Config>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a9f6:	e00a      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a9fc:	e007      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a9fe:	bf00      	nop
 800aa00:	58024400 	.word	0x58024400
 800aa04:	58024800 	.word	0x58024800
 800aa08:	00ffffcf 	.word	0x00ffffcf
      break;
 800aa0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d109      	bne.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aa14:	4b9f      	ldr	r3, [pc, #636]	; (800ac94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aa16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa18:	f023 0207 	bic.w	r2, r3, #7
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa20:	499c      	ldr	r1, [pc, #624]	; (800ac94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aa22:	4313      	orrs	r3, r2
 800aa24:	654b      	str	r3, [r1, #84]	; 0x54
 800aa26:	e001      	b.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0304 	and.w	r3, r3, #4
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d039      	beq.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa3e:	2b05      	cmp	r3, #5
 800aa40:	d820      	bhi.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800aa42:	a201      	add	r2, pc, #4	; (adr r2, 800aa48 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800aa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa48:	0800aa8b 	.word	0x0800aa8b
 800aa4c:	0800aa61 	.word	0x0800aa61
 800aa50:	0800aa73 	.word	0x0800aa73
 800aa54:	0800aa8b 	.word	0x0800aa8b
 800aa58:	0800aa8b 	.word	0x0800aa8b
 800aa5c:	0800aa8b 	.word	0x0800aa8b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3304      	adds	r3, #4
 800aa64:	2101      	movs	r1, #1
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fd62 	bl	800b530 <RCCEx_PLL2_Config>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800aa70:	e00c      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	3324      	adds	r3, #36	; 0x24
 800aa76:	2101      	movs	r1, #1
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fe0b 	bl	800b694 <RCCEx_PLL3_Config>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800aa82:	e003      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	75fb      	strb	r3, [r7, #23]
      break;
 800aa88:	e000      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800aa8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa8c:	7dfb      	ldrb	r3, [r7, #23]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10a      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aa92:	4b80      	ldr	r3, [pc, #512]	; (800ac94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aa94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa96:	f023 0207 	bic.w	r2, r3, #7
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaa0:	497c      	ldr	r1, [pc, #496]	; (800ac94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	658b      	str	r3, [r1, #88]	; 0x58
 800aaa6:	e001      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0320 	and.w	r3, r3, #32
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d04b      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aac2:	d02e      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800aac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aac8:	d828      	bhi.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800aaca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aace:	d02a      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800aad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad4:	d822      	bhi.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800aad6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aada:	d026      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800aadc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aae0:	d81c      	bhi.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800aae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aae6:	d010      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800aae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaec:	d816      	bhi.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d01d      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800aaf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aaf6:	d111      	bne.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	3304      	adds	r3, #4
 800aafc:	2100      	movs	r1, #0
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 fd16 	bl	800b530 <RCCEx_PLL2_Config>
 800ab04:	4603      	mov	r3, r0
 800ab06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ab08:	e012      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3324      	adds	r3, #36	; 0x24
 800ab0e:	2102      	movs	r1, #2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 fdbf 	bl	800b694 <RCCEx_PLL3_Config>
 800ab16:	4603      	mov	r3, r0
 800ab18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ab1a:	e009      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab20:	e006      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800ab22:	bf00      	nop
 800ab24:	e004      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800ab26:	bf00      	nop
 800ab28:	e002      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800ab2a:	bf00      	nop
 800ab2c:	e000      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800ab2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10a      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab36:	4b57      	ldr	r3, [pc, #348]	; (800ac94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ab38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab44:	4953      	ldr	r1, [pc, #332]	; (800ac94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	654b      	str	r3, [r1, #84]	; 0x54
 800ab4a:	e001      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d04b      	beq.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ab66:	d02e      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800ab68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ab6c:	d828      	bhi.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ab6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab72:	d02a      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800ab74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab78:	d822      	bhi.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ab7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab7e:	d026      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800ab80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab84:	d81c      	bhi.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ab86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab8a:	d010      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800ab8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab90:	d816      	bhi.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d01d      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800ab96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab9a:	d111      	bne.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3304      	adds	r3, #4
 800aba0:	2100      	movs	r1, #0
 800aba2:	4618      	mov	r0, r3
 800aba4:	f000 fcc4 	bl	800b530 <RCCEx_PLL2_Config>
 800aba8:	4603      	mov	r3, r0
 800abaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800abac:	e012      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	3324      	adds	r3, #36	; 0x24
 800abb2:	2102      	movs	r1, #2
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 fd6d 	bl	800b694 <RCCEx_PLL3_Config>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800abbe:	e009      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	75fb      	strb	r3, [r7, #23]
      break;
 800abc4:	e006      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800abc6:	bf00      	nop
 800abc8:	e004      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800abca:	bf00      	nop
 800abcc:	e002      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800abce:	bf00      	nop
 800abd0:	e000      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800abd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10a      	bne.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800abda:	4b2e      	ldr	r3, [pc, #184]	; (800ac94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800abdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abe8:	492a      	ldr	r1, [pc, #168]	; (800ac94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800abea:	4313      	orrs	r3, r2
 800abec:	658b      	str	r3, [r1, #88]	; 0x58
 800abee:	e001      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf0:	7dfb      	ldrb	r3, [r7, #23]
 800abf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d04d      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ac0a:	d02e      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800ac0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ac10:	d828      	bhi.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ac12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac16:	d02a      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800ac18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac1c:	d822      	bhi.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ac1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ac22:	d026      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800ac24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ac28:	d81c      	bhi.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ac2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac2e:	d010      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800ac30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac34:	d816      	bhi.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d01d      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800ac3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac3e:	d111      	bne.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	3304      	adds	r3, #4
 800ac44:	2100      	movs	r1, #0
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 fc72 	bl	800b530 <RCCEx_PLL2_Config>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ac50:	e012      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	3324      	adds	r3, #36	; 0x24
 800ac56:	2102      	movs	r1, #2
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 fd1b 	bl	800b694 <RCCEx_PLL3_Config>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ac62:	e009      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	75fb      	strb	r3, [r7, #23]
      break;
 800ac68:	e006      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ac6a:	bf00      	nop
 800ac6c:	e004      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ac6e:	bf00      	nop
 800ac70:	e002      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ac72:	bf00      	nop
 800ac74:	e000      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ac76:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10c      	bne.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac7e:	4b05      	ldr	r3, [pc, #20]	; (800ac94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ac80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac8c:	4901      	ldr	r1, [pc, #4]	; (800ac94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	658b      	str	r3, [r1, #88]	; 0x58
 800ac92:	e003      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800ac94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
 800ac9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0308 	and.w	r3, r3, #8
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d018      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb0:	d10a      	bne.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	3324      	adds	r3, #36	; 0x24
 800acb6:	2102      	movs	r1, #2
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fceb 	bl	800b694 <RCCEx_PLL3_Config>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800acc8:	4b8a      	ldr	r3, [pc, #552]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800acca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800accc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acd4:	4987      	ldr	r1, [pc, #540]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0310 	and.w	r3, r3, #16
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d01a      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acf0:	d10a      	bne.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	3324      	adds	r3, #36	; 0x24
 800acf6:	2102      	movs	r1, #2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 fccb 	bl	800b694 <RCCEx_PLL3_Config>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad08:	4b7a      	ldr	r3, [pc, #488]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad16:	4977      	ldr	r1, [pc, #476]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d034      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad32:	d01d      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ad34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad38:	d817      	bhi.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ad3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad42:	d009      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ad44:	e011      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	3304      	adds	r3, #4
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 fbef 	bl	800b530 <RCCEx_PLL2_Config>
 800ad52:	4603      	mov	r3, r0
 800ad54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ad56:	e00c      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3324      	adds	r3, #36	; 0x24
 800ad5c:	2102      	movs	r1, #2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 fc98 	bl	800b694 <RCCEx_PLL3_Config>
 800ad64:	4603      	mov	r3, r0
 800ad66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ad68:	e003      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad6e:	e000      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800ad70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad78:	4b5e      	ldr	r3, [pc, #376]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad86:	495b      	ldr	r1, [pc, #364]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	658b      	str	r3, [r1, #88]	; 0x58
 800ad8c:	e001      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
 800ad90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d033      	beq.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ada4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ada8:	d01c      	beq.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800adaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adae:	d816      	bhi.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800adb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adb4:	d003      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800adb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adba:	d007      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800adbc:	e00f      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adbe:	4b4d      	ldr	r3, [pc, #308]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800adc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc2:	4a4c      	ldr	r2, [pc, #304]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800adc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800adca:	e00c      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	3324      	adds	r3, #36	; 0x24
 800add0:	2101      	movs	r1, #1
 800add2:	4618      	mov	r0, r3
 800add4:	f000 fc5e 	bl	800b694 <RCCEx_PLL3_Config>
 800add8:	4603      	mov	r3, r0
 800adda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800addc:	e003      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	75fb      	strb	r3, [r7, #23]
      break;
 800ade2:	e000      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800ade4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10a      	bne.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800adec:	4b41      	ldr	r3, [pc, #260]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800adee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adfa:	493e      	ldr	r1, [pc, #248]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800adfc:	4313      	orrs	r3, r2
 800adfe:	654b      	str	r3, [r1, #84]	; 0x54
 800ae00:	e001      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d029      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800ae1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae1e:	d007      	beq.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ae20:	e00f      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae22:	4b34      	ldr	r3, [pc, #208]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ae24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae26:	4a33      	ldr	r2, [pc, #204]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ae28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ae2e:	e00b      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	3304      	adds	r3, #4
 800ae34:	2102      	movs	r1, #2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 fb7a 	bl	800b530 <RCCEx_PLL2_Config>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ae40:	e002      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	75fb      	strb	r3, [r7, #23]
      break;
 800ae46:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae48:	7dfb      	ldrb	r3, [r7, #23]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d109      	bne.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae4e:	4b29      	ldr	r3, [pc, #164]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ae50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae5a:	4926      	ldr	r1, [pc, #152]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ae60:	e001      	b.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
 800ae64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00a      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	3324      	adds	r3, #36	; 0x24
 800ae76:	2102      	movs	r1, #2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 fc0b 	bl	800b694 <RCCEx_PLL3_Config>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d033      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae9c:	d017      	beq.n	800aece <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ae9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aea2:	d811      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aea8:	d013      	beq.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800aeaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeae:	d80b      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d010      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800aeb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeb8:	d106      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeba:	4b0e      	ldr	r3, [pc, #56]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebe:	4a0d      	ldr	r2, [pc, #52]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aec6:	e007      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	75fb      	strb	r3, [r7, #23]
      break;
 800aecc:	e004      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800aece:	bf00      	nop
 800aed0:	e002      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800aed2:	bf00      	nop
 800aed4:	e000      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800aed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10c      	bne.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aede:	4b05      	ldr	r3, [pc, #20]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeea:	4902      	ldr	r1, [pc, #8]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aeec:	4313      	orrs	r3, r2
 800aeee:	654b      	str	r3, [r1, #84]	; 0x54
 800aef0:	e004      	b.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800aef2:	bf00      	nop
 800aef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef8:	7dfb      	ldrb	r3, [r7, #23]
 800aefa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d008      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af08:	4b29      	ldr	r3, [pc, #164]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af14:	4926      	ldr	r1, [pc, #152]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af16:	4313      	orrs	r3, r2
 800af18:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af22:	2b00      	cmp	r3, #0
 800af24:	d008      	beq.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af26:	4b22      	ldr	r3, [pc, #136]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af32:	491f      	ldr	r1, [pc, #124]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af34:	4313      	orrs	r3, r2
 800af36:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00d      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af44:	4b1a      	ldr	r3, [pc, #104]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	4a19      	ldr	r2, [pc, #100]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af4e:	6113      	str	r3, [r2, #16]
 800af50:	4b17      	ldr	r3, [pc, #92]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af52:	691a      	ldr	r2, [r3, #16]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af5a:	4915      	ldr	r1, [pc, #84]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	da08      	bge.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800af68:	4b11      	ldr	r3, [pc, #68]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af74:	490e      	ldr	r1, [pc, #56]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af76:	4313      	orrs	r3, r2
 800af78:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d009      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800af86:	4b0a      	ldr	r3, [pc, #40]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af94:	4906      	ldr	r1, [pc, #24]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af96:	4313      	orrs	r3, r2
 800af98:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800af9a:	7dbb      	ldrb	r3, [r7, #22]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	e000      	b.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	58024400 	.word	0x58024400

0800afb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800afb8:	f7ff f8a6 	bl	800a108 <HAL_RCC_GetHCLKFreq>
 800afbc:	4602      	mov	r2, r0
 800afbe:	4b06      	ldr	r3, [pc, #24]	; (800afd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	091b      	lsrs	r3, r3, #4
 800afc4:	f003 0307 	and.w	r3, r3, #7
 800afc8:	4904      	ldr	r1, [pc, #16]	; (800afdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800afca:	5ccb      	ldrb	r3, [r1, r3]
 800afcc:	f003 031f 	and.w	r3, r3, #31
 800afd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	58024400 	.word	0x58024400
 800afdc:	0800fa18 	.word	0x0800fa18

0800afe0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b089      	sub	sp, #36	; 0x24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afe8:	4ba1      	ldr	r3, [pc, #644]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afec:	f003 0303 	and.w	r3, r3, #3
 800aff0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aff2:	4b9f      	ldr	r3, [pc, #636]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff6:	0b1b      	lsrs	r3, r3, #12
 800aff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800affc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800affe:	4b9c      	ldr	r3, [pc, #624]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b002:	091b      	lsrs	r3, r3, #4
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b00a:	4b99      	ldr	r3, [pc, #612]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00e:	08db      	lsrs	r3, r3, #3
 800b010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	fb02 f303 	mul.w	r3, r2, r3
 800b01a:	ee07 3a90 	vmov	s15, r3
 800b01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b022:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 8111 	beq.w	800b250 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	2b02      	cmp	r3, #2
 800b032:	f000 8083 	beq.w	800b13c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	2b02      	cmp	r3, #2
 800b03a:	f200 80a1 	bhi.w	800b180 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d003      	beq.n	800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d056      	beq.n	800b0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b04a:	e099      	b.n	800b180 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b04c:	4b88      	ldr	r3, [pc, #544]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0320 	and.w	r3, r3, #32
 800b054:	2b00      	cmp	r3, #0
 800b056:	d02d      	beq.n	800b0b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b058:	4b85      	ldr	r3, [pc, #532]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	08db      	lsrs	r3, r3, #3
 800b05e:	f003 0303 	and.w	r3, r3, #3
 800b062:	4a84      	ldr	r2, [pc, #528]	; (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b064:	fa22 f303 	lsr.w	r3, r2, r3
 800b068:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	ee07 3a90 	vmov	s15, r3
 800b070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	ee07 3a90 	vmov	s15, r3
 800b07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b082:	4b7b      	ldr	r3, [pc, #492]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b092:	ed97 6a03 	vldr	s12, [r7, #12]
 800b096:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b278 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b0b2:	e087      	b.n	800b1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b27c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b0c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0c6:	4b6a      	ldr	r3, [pc, #424]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b278 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0f6:	e065      	b.n	800b1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b102:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b280 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b10a:	4b59      	ldr	r3, [pc, #356]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b11e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b278 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b12a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b13a:	e043      	b.n	800b1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b146:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b14e:	4b48      	ldr	r3, [pc, #288]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b156:	ee07 3a90 	vmov	s15, r3
 800b15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b15e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b162:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b278 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b17a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b17e:	e021      	b.n	800b1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b280 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b192:	4b37      	ldr	r3, [pc, #220]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b278 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b1c4:	4b2a      	ldr	r3, [pc, #168]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c8:	0a5b      	lsrs	r3, r3, #9
 800b1ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ea:	ee17 2a90 	vmov	r2, s15
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b1f2:	4b1f      	ldr	r3, [pc, #124]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f6:	0c1b      	lsrs	r3, r3, #16
 800b1f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1fc:	ee07 3a90 	vmov	s15, r3
 800b200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b20c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b218:	ee17 2a90 	vmov	r2, s15
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b220:	4b13      	ldr	r3, [pc, #76]	; (800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b224:	0e1b      	lsrs	r3, r3, #24
 800b226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b23a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b23e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b246:	ee17 2a90 	vmov	r2, s15
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b24e:	e008      	b.n	800b262 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	609a      	str	r2, [r3, #8]
}
 800b262:	bf00      	nop
 800b264:	3724      	adds	r7, #36	; 0x24
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	58024400 	.word	0x58024400
 800b274:	03d09000 	.word	0x03d09000
 800b278:	46000000 	.word	0x46000000
 800b27c:	4c742400 	.word	0x4c742400
 800b280:	4a742400 	.word	0x4a742400
 800b284:	4bbebc20 	.word	0x4bbebc20

0800b288 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b288:	b480      	push	{r7}
 800b28a:	b089      	sub	sp, #36	; 0x24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b290:	4ba1      	ldr	r3, [pc, #644]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b294:	f003 0303 	and.w	r3, r3, #3
 800b298:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b29a:	4b9f      	ldr	r3, [pc, #636]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29e:	0d1b      	lsrs	r3, r3, #20
 800b2a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b2a6:	4b9c      	ldr	r3, [pc, #624]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2aa:	0a1b      	lsrs	r3, r3, #8
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b2b2:	4b99      	ldr	r3, [pc, #612]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b6:	08db      	lsrs	r3, r3, #3
 800b2b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	fb02 f303 	mul.w	r3, r2, r3
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 8111 	beq.w	800b4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	f000 8083 	beq.w	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	f200 80a1 	bhi.w	800b428 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d003      	beq.n	800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d056      	beq.n	800b3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b2f2:	e099      	b.n	800b428 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2f4:	4b88      	ldr	r3, [pc, #544]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 0320 	and.w	r3, r3, #32
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d02d      	beq.n	800b35c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b300:	4b85      	ldr	r3, [pc, #532]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	08db      	lsrs	r3, r3, #3
 800b306:	f003 0303 	and.w	r3, r3, #3
 800b30a:	4a84      	ldr	r2, [pc, #528]	; (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b30c:	fa22 f303 	lsr.w	r3, r2, r3
 800b310:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	ee07 3a90 	vmov	s15, r3
 800b318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	ee07 3a90 	vmov	s15, r3
 800b322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b32a:	4b7b      	ldr	r3, [pc, #492]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b33a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b33e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b520 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b34a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b34e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b352:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b356:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b35a:	e087      	b.n	800b46c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	ee07 3a90 	vmov	s15, r3
 800b362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b366:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b524 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b36a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b36e:	4b6a      	ldr	r3, [pc, #424]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b37e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b382:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b520 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b38e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b39a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b39e:	e065      	b.n	800b46c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	ee07 3a90 	vmov	s15, r3
 800b3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b2:	4b59      	ldr	r3, [pc, #356]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ba:	ee07 3a90 	vmov	s15, r3
 800b3be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b520 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3e2:	e043      	b.n	800b46c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	ee07 3a90 	vmov	s15, r3
 800b3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f6:	4b48      	ldr	r3, [pc, #288]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fe:	ee07 3a90 	vmov	s15, r3
 800b402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b406:	ed97 6a03 	vldr	s12, [r7, #12]
 800b40a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b520 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b422:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b426:	e021      	b.n	800b46c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	ee07 3a90 	vmov	s15, r3
 800b42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b432:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b43a:	4b37      	ldr	r3, [pc, #220]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b442:	ee07 3a90 	vmov	s15, r3
 800b446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b44a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b44e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b520 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b45a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b45e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b466:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b46a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b46c:	4b2a      	ldr	r3, [pc, #168]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b470:	0a5b      	lsrs	r3, r3, #9
 800b472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b476:	ee07 3a90 	vmov	s15, r3
 800b47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b482:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b486:	edd7 6a07 	vldr	s13, [r7, #28]
 800b48a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b48e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b492:	ee17 2a90 	vmov	r2, s15
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b49a:	4b1f      	ldr	r3, [pc, #124]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49e:	0c1b      	lsrs	r3, r3, #16
 800b4a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4a4:	ee07 3a90 	vmov	s15, r3
 800b4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4c0:	ee17 2a90 	vmov	r2, s15
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b4c8:	4b13      	ldr	r3, [pc, #76]	; (800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4cc:	0e1b      	lsrs	r3, r3, #24
 800b4ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ee:	ee17 2a90 	vmov	r2, s15
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b4f6:	e008      	b.n	800b50a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	609a      	str	r2, [r3, #8]
}
 800b50a:	bf00      	nop
 800b50c:	3724      	adds	r7, #36	; 0x24
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	58024400 	.word	0x58024400
 800b51c:	03d09000 	.word	0x03d09000
 800b520:	46000000 	.word	0x46000000
 800b524:	4c742400 	.word	0x4c742400
 800b528:	4a742400 	.word	0x4a742400
 800b52c:	4bbebc20 	.word	0x4bbebc20

0800b530 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b53e:	4b53      	ldr	r3, [pc, #332]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b542:	f003 0303 	and.w	r3, r3, #3
 800b546:	2b03      	cmp	r3, #3
 800b548:	d101      	bne.n	800b54e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e099      	b.n	800b682 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b54e:	4b4f      	ldr	r3, [pc, #316]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a4e      	ldr	r2, [pc, #312]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b554:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b55a:	f7fa fa97 	bl	8005a8c <HAL_GetTick>
 800b55e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b560:	e008      	b.n	800b574 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b562:	f7fa fa93 	bl	8005a8c <HAL_GetTick>
 800b566:	4602      	mov	r2, r0
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d901      	bls.n	800b574 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b570:	2303      	movs	r3, #3
 800b572:	e086      	b.n	800b682 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b574:	4b45      	ldr	r3, [pc, #276]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1f0      	bne.n	800b562 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b580:	4b42      	ldr	r3, [pc, #264]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b584:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	031b      	lsls	r3, r3, #12
 800b58e:	493f      	ldr	r1, [pc, #252]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b590:	4313      	orrs	r3, r2
 800b592:	628b      	str	r3, [r1, #40]	; 0x28
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	3b01      	subs	r3, #1
 800b59a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	025b      	lsls	r3, r3, #9
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	041b      	lsls	r3, r3, #16
 800b5b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b5b6:	431a      	orrs	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	061b      	lsls	r3, r3, #24
 800b5c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b5c4:	4931      	ldr	r1, [pc, #196]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b5ca:	4b30      	ldr	r3, [pc, #192]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	492d      	ldr	r1, [pc, #180]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b5dc:	4b2b      	ldr	r3, [pc, #172]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	f023 0220 	bic.w	r2, r3, #32
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	4928      	ldr	r1, [pc, #160]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b5ee:	4b27      	ldr	r3, [pc, #156]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f2:	4a26      	ldr	r2, [pc, #152]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b5f4:	f023 0310 	bic.w	r3, r3, #16
 800b5f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b5fa:	4b24      	ldr	r3, [pc, #144]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b5fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5fe:	4b24      	ldr	r3, [pc, #144]	; (800b690 <RCCEx_PLL2_Config+0x160>)
 800b600:	4013      	ands	r3, r2
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	69d2      	ldr	r2, [r2, #28]
 800b606:	00d2      	lsls	r2, r2, #3
 800b608:	4920      	ldr	r1, [pc, #128]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b60a:	4313      	orrs	r3, r2
 800b60c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b60e:	4b1f      	ldr	r3, [pc, #124]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b612:	4a1e      	ldr	r2, [pc, #120]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b614:	f043 0310 	orr.w	r3, r3, #16
 800b618:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d106      	bne.n	800b62e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b620:	4b1a      	ldr	r3, [pc, #104]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	4a19      	ldr	r2, [pc, #100]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b62a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b62c:	e00f      	b.n	800b64e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d106      	bne.n	800b642 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b634:	4b15      	ldr	r3, [pc, #84]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	4a14      	ldr	r2, [pc, #80]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b63a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b63e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b640:	e005      	b.n	800b64e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b642:	4b12      	ldr	r3, [pc, #72]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b646:	4a11      	ldr	r2, [pc, #68]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b64c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b64e:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a0e      	ldr	r2, [pc, #56]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b65a:	f7fa fa17 	bl	8005a8c <HAL_GetTick>
 800b65e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b660:	e008      	b.n	800b674 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b662:	f7fa fa13 	bl	8005a8c <HAL_GetTick>
 800b666:	4602      	mov	r2, r0
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d901      	bls.n	800b674 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	e006      	b.n	800b682 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b674:	4b05      	ldr	r3, [pc, #20]	; (800b68c <RCCEx_PLL2_Config+0x15c>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0f0      	beq.n	800b662 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b680:	7bfb      	ldrb	r3, [r7, #15]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	58024400 	.word	0x58024400
 800b690:	ffff0007 	.word	0xffff0007

0800b694 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6a2:	4b53      	ldr	r3, [pc, #332]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a6:	f003 0303 	and.w	r3, r3, #3
 800b6aa:	2b03      	cmp	r3, #3
 800b6ac:	d101      	bne.n	800b6b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e099      	b.n	800b7e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b6b2:	4b4f      	ldr	r3, [pc, #316]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a4e      	ldr	r2, [pc, #312]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b6b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6be:	f7fa f9e5 	bl	8005a8c <HAL_GetTick>
 800b6c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6c4:	e008      	b.n	800b6d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b6c6:	f7fa f9e1 	bl	8005a8c <HAL_GetTick>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d901      	bls.n	800b6d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	e086      	b.n	800b7e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6d8:	4b45      	ldr	r3, [pc, #276]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1f0      	bne.n	800b6c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b6e4:	4b42      	ldr	r3, [pc, #264]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	051b      	lsls	r3, r3, #20
 800b6f2:	493f      	ldr	r1, [pc, #252]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	628b      	str	r3, [r1, #40]	; 0x28
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	3b01      	subs	r3, #1
 800b708:	025b      	lsls	r3, r3, #9
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	431a      	orrs	r2, r3
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	3b01      	subs	r3, #1
 800b714:	041b      	lsls	r3, r3, #16
 800b716:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b71a:	431a      	orrs	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	3b01      	subs	r3, #1
 800b722:	061b      	lsls	r3, r3, #24
 800b724:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b728:	4931      	ldr	r1, [pc, #196]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b72a:	4313      	orrs	r3, r2
 800b72c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b72e:	4b30      	ldr	r3, [pc, #192]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b732:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	492d      	ldr	r1, [pc, #180]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b73c:	4313      	orrs	r3, r2
 800b73e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b740:	4b2b      	ldr	r3, [pc, #172]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b744:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	4928      	ldr	r1, [pc, #160]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b74e:	4313      	orrs	r3, r2
 800b750:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b752:	4b27      	ldr	r3, [pc, #156]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	4a26      	ldr	r2, [pc, #152]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b75c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b75e:	4b24      	ldr	r3, [pc, #144]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b762:	4b24      	ldr	r3, [pc, #144]	; (800b7f4 <RCCEx_PLL3_Config+0x160>)
 800b764:	4013      	ands	r3, r2
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	69d2      	ldr	r2, [r2, #28]
 800b76a:	00d2      	lsls	r2, r2, #3
 800b76c:	4920      	ldr	r1, [pc, #128]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b772:	4b1f      	ldr	r3, [pc, #124]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	4a1e      	ldr	r2, [pc, #120]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b77c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d106      	bne.n	800b792 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b784:	4b1a      	ldr	r3, [pc, #104]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b788:	4a19      	ldr	r2, [pc, #100]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b78a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b78e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b790:	e00f      	b.n	800b7b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d106      	bne.n	800b7a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b798:	4b15      	ldr	r3, [pc, #84]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79c:	4a14      	ldr	r2, [pc, #80]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b79e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7a4:	e005      	b.n	800b7b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7a6:	4b12      	ldr	r3, [pc, #72]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	4a11      	ldr	r2, [pc, #68]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b7ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b7b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b7b2:	4b0f      	ldr	r3, [pc, #60]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a0e      	ldr	r2, [pc, #56]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b7b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7be:	f7fa f965 	bl	8005a8c <HAL_GetTick>
 800b7c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7c4:	e008      	b.n	800b7d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b7c6:	f7fa f961 	bl	8005a8c <HAL_GetTick>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d901      	bls.n	800b7d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e006      	b.n	800b7e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7d8:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <RCCEx_PLL3_Config+0x15c>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0f0      	beq.n	800b7c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	58024400 	.word	0x58024400
 800b7f4:	ffff0007 	.word	0xffff0007

0800b7f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e049      	b.n	800b89e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d106      	bne.n	800b824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7f9 fc3c 	bl	800509c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2202      	movs	r2, #2
 800b828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	3304      	adds	r3, #4
 800b834:	4619      	mov	r1, r3
 800b836:	4610      	mov	r0, r2
 800b838:	f000 feb8 	bl	800c5ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
	...

0800b8a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d001      	beq.n	800b8c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e05e      	b.n	800b97e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68da      	ldr	r2, [r3, #12]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f042 0201 	orr.w	r2, r2, #1
 800b8d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a2b      	ldr	r2, [pc, #172]	; (800b98c <HAL_TIM_Base_Start_IT+0xe4>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d02c      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x94>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ea:	d027      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x94>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a27      	ldr	r2, [pc, #156]	; (800b990 <HAL_TIM_Base_Start_IT+0xe8>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d022      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x94>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a26      	ldr	r2, [pc, #152]	; (800b994 <HAL_TIM_Base_Start_IT+0xec>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d01d      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x94>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a24      	ldr	r2, [pc, #144]	; (800b998 <HAL_TIM_Base_Start_IT+0xf0>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d018      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x94>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a23      	ldr	r2, [pc, #140]	; (800b99c <HAL_TIM_Base_Start_IT+0xf4>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d013      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x94>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a21      	ldr	r2, [pc, #132]	; (800b9a0 <HAL_TIM_Base_Start_IT+0xf8>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d00e      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x94>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a20      	ldr	r2, [pc, #128]	; (800b9a4 <HAL_TIM_Base_Start_IT+0xfc>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d009      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x94>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a1e      	ldr	r2, [pc, #120]	; (800b9a8 <HAL_TIM_Base_Start_IT+0x100>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d004      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x94>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a1d      	ldr	r2, [pc, #116]	; (800b9ac <HAL_TIM_Base_Start_IT+0x104>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d115      	bne.n	800b968 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	689a      	ldr	r2, [r3, #8]
 800b942:	4b1b      	ldr	r3, [pc, #108]	; (800b9b0 <HAL_TIM_Base_Start_IT+0x108>)
 800b944:	4013      	ands	r3, r2
 800b946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b06      	cmp	r3, #6
 800b94c:	d015      	beq.n	800b97a <HAL_TIM_Base_Start_IT+0xd2>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b954:	d011      	beq.n	800b97a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f042 0201 	orr.w	r2, r2, #1
 800b964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b966:	e008      	b.n	800b97a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0201 	orr.w	r2, r2, #1
 800b976:	601a      	str	r2, [r3, #0]
 800b978:	e000      	b.n	800b97c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b97a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	40010000 	.word	0x40010000
 800b990:	40000400 	.word	0x40000400
 800b994:	40000800 	.word	0x40000800
 800b998:	40000c00 	.word	0x40000c00
 800b99c:	40010400 	.word	0x40010400
 800b9a0:	40001800 	.word	0x40001800
 800b9a4:	40014000 	.word	0x40014000
 800b9a8:	4000e000 	.word	0x4000e000
 800b9ac:	4000e400 	.word	0x4000e400
 800b9b0:	00010007 	.word	0x00010007

0800b9b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e049      	b.n	800ba5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d106      	bne.n	800b9e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7f9 fc96 	bl	800530c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	f000 fdda 	bl	800c5ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d109      	bne.n	800ba88 <HAL_TIM_PWM_Start+0x24>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	bf14      	ite	ne
 800ba80:	2301      	movne	r3, #1
 800ba82:	2300      	moveq	r3, #0
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	e03c      	b.n	800bb02 <HAL_TIM_PWM_Start+0x9e>
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	2b04      	cmp	r3, #4
 800ba8c:	d109      	bne.n	800baa2 <HAL_TIM_PWM_Start+0x3e>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	bf14      	ite	ne
 800ba9a:	2301      	movne	r3, #1
 800ba9c:	2300      	moveq	r3, #0
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	e02f      	b.n	800bb02 <HAL_TIM_PWM_Start+0x9e>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	2b08      	cmp	r3, #8
 800baa6:	d109      	bne.n	800babc <HAL_TIM_PWM_Start+0x58>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	bf14      	ite	ne
 800bab4:	2301      	movne	r3, #1
 800bab6:	2300      	moveq	r3, #0
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	e022      	b.n	800bb02 <HAL_TIM_PWM_Start+0x9e>
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	2b0c      	cmp	r3, #12
 800bac0:	d109      	bne.n	800bad6 <HAL_TIM_PWM_Start+0x72>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	2b01      	cmp	r3, #1
 800bacc:	bf14      	ite	ne
 800bace:	2301      	movne	r3, #1
 800bad0:	2300      	moveq	r3, #0
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	e015      	b.n	800bb02 <HAL_TIM_PWM_Start+0x9e>
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	2b10      	cmp	r3, #16
 800bada:	d109      	bne.n	800baf0 <HAL_TIM_PWM_Start+0x8c>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	bf14      	ite	ne
 800bae8:	2301      	movne	r3, #1
 800baea:	2300      	moveq	r3, #0
 800baec:	b2db      	uxtb	r3, r3
 800baee:	e008      	b.n	800bb02 <HAL_TIM_PWM_Start+0x9e>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	bf14      	ite	ne
 800bafc:	2301      	movne	r3, #1
 800bafe:	2300      	moveq	r3, #0
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	e0ab      	b.n	800bc62 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d104      	bne.n	800bb1a <HAL_TIM_PWM_Start+0xb6>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2202      	movs	r2, #2
 800bb14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb18:	e023      	b.n	800bb62 <HAL_TIM_PWM_Start+0xfe>
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	2b04      	cmp	r3, #4
 800bb1e:	d104      	bne.n	800bb2a <HAL_TIM_PWM_Start+0xc6>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2202      	movs	r2, #2
 800bb24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb28:	e01b      	b.n	800bb62 <HAL_TIM_PWM_Start+0xfe>
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	2b08      	cmp	r3, #8
 800bb2e:	d104      	bne.n	800bb3a <HAL_TIM_PWM_Start+0xd6>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2202      	movs	r2, #2
 800bb34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb38:	e013      	b.n	800bb62 <HAL_TIM_PWM_Start+0xfe>
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b0c      	cmp	r3, #12
 800bb3e:	d104      	bne.n	800bb4a <HAL_TIM_PWM_Start+0xe6>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2202      	movs	r2, #2
 800bb44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb48:	e00b      	b.n	800bb62 <HAL_TIM_PWM_Start+0xfe>
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b10      	cmp	r3, #16
 800bb4e:	d104      	bne.n	800bb5a <HAL_TIM_PWM_Start+0xf6>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2202      	movs	r2, #2
 800bb54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb58:	e003      	b.n	800bb62 <HAL_TIM_PWM_Start+0xfe>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2201      	movs	r2, #1
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f001 f938 	bl	800cde0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a3d      	ldr	r2, [pc, #244]	; (800bc6c <HAL_TIM_PWM_Start+0x208>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d013      	beq.n	800bba2 <HAL_TIM_PWM_Start+0x13e>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a3c      	ldr	r2, [pc, #240]	; (800bc70 <HAL_TIM_PWM_Start+0x20c>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d00e      	beq.n	800bba2 <HAL_TIM_PWM_Start+0x13e>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a3a      	ldr	r2, [pc, #232]	; (800bc74 <HAL_TIM_PWM_Start+0x210>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d009      	beq.n	800bba2 <HAL_TIM_PWM_Start+0x13e>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a39      	ldr	r2, [pc, #228]	; (800bc78 <HAL_TIM_PWM_Start+0x214>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d004      	beq.n	800bba2 <HAL_TIM_PWM_Start+0x13e>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a37      	ldr	r2, [pc, #220]	; (800bc7c <HAL_TIM_PWM_Start+0x218>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d101      	bne.n	800bba6 <HAL_TIM_PWM_Start+0x142>
 800bba2:	2301      	movs	r3, #1
 800bba4:	e000      	b.n	800bba8 <HAL_TIM_PWM_Start+0x144>
 800bba6:	2300      	movs	r3, #0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d007      	beq.n	800bbbc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bbba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a2a      	ldr	r2, [pc, #168]	; (800bc6c <HAL_TIM_PWM_Start+0x208>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d02c      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1bc>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbce:	d027      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1bc>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a2a      	ldr	r2, [pc, #168]	; (800bc80 <HAL_TIM_PWM_Start+0x21c>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d022      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1bc>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a29      	ldr	r2, [pc, #164]	; (800bc84 <HAL_TIM_PWM_Start+0x220>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d01d      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1bc>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a27      	ldr	r2, [pc, #156]	; (800bc88 <HAL_TIM_PWM_Start+0x224>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d018      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1bc>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a1f      	ldr	r2, [pc, #124]	; (800bc70 <HAL_TIM_PWM_Start+0x20c>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d013      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1bc>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a23      	ldr	r2, [pc, #140]	; (800bc8c <HAL_TIM_PWM_Start+0x228>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d00e      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1bc>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a1b      	ldr	r2, [pc, #108]	; (800bc74 <HAL_TIM_PWM_Start+0x210>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d009      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1bc>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a1f      	ldr	r2, [pc, #124]	; (800bc90 <HAL_TIM_PWM_Start+0x22c>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d004      	beq.n	800bc20 <HAL_TIM_PWM_Start+0x1bc>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a1e      	ldr	r2, [pc, #120]	; (800bc94 <HAL_TIM_PWM_Start+0x230>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d115      	bne.n	800bc4c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689a      	ldr	r2, [r3, #8]
 800bc26:	4b1c      	ldr	r3, [pc, #112]	; (800bc98 <HAL_TIM_PWM_Start+0x234>)
 800bc28:	4013      	ands	r3, r2
 800bc2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b06      	cmp	r3, #6
 800bc30:	d015      	beq.n	800bc5e <HAL_TIM_PWM_Start+0x1fa>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc38:	d011      	beq.n	800bc5e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f042 0201 	orr.w	r2, r2, #1
 800bc48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc4a:	e008      	b.n	800bc5e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f042 0201 	orr.w	r2, r2, #1
 800bc5a:	601a      	str	r2, [r3, #0]
 800bc5c:	e000      	b.n	800bc60 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	40010000 	.word	0x40010000
 800bc70:	40010400 	.word	0x40010400
 800bc74:	40014000 	.word	0x40014000
 800bc78:	40014400 	.word	0x40014400
 800bc7c:	40014800 	.word	0x40014800
 800bc80:	40000400 	.word	0x40000400
 800bc84:	40000800 	.word	0x40000800
 800bc88:	40000c00 	.word	0x40000c00
 800bc8c:	40001800 	.word	0x40001800
 800bc90:	4000e000 	.word	0x4000e000
 800bc94:	4000e400 	.word	0x4000e400
 800bc98:	00010007 	.word	0x00010007

0800bc9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e08f      	b.n	800bdd0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d106      	bne.n	800bcca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7f9 fa2f 	bl	8005128 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2202      	movs	r2, #2
 800bcce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	6899      	ldr	r1, [r3, #8]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	4b3e      	ldr	r3, [pc, #248]	; (800bdd8 <HAL_TIM_Encoder_Init+0x13c>)
 800bcde:	400b      	ands	r3, r1
 800bce0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3304      	adds	r3, #4
 800bcea:	4619      	mov	r1, r3
 800bcec:	4610      	mov	r0, r2
 800bcee:	f000 fc5d 	bl	800c5ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6a1b      	ldr	r3, [r3, #32]
 800bd08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	4b31      	ldr	r3, [pc, #196]	; (800bddc <HAL_TIM_Encoder_Init+0x140>)
 800bd18:	4013      	ands	r3, r2
 800bd1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	689a      	ldr	r2, [r3, #8]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	021b      	lsls	r3, r3, #8
 800bd26:	4313      	orrs	r3, r2
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bd2e:	693a      	ldr	r2, [r7, #16]
 800bd30:	4b2b      	ldr	r3, [pc, #172]	; (800bde0 <HAL_TIM_Encoder_Init+0x144>)
 800bd32:	4013      	ands	r3, r2
 800bd34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bd36:	693a      	ldr	r2, [r7, #16]
 800bd38:	4b2a      	ldr	r3, [pc, #168]	; (800bde4 <HAL_TIM_Encoder_Init+0x148>)
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	68da      	ldr	r2, [r3, #12]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	69db      	ldr	r3, [r3, #28]
 800bd46:	021b      	lsls	r3, r3, #8
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	011a      	lsls	r2, r3, #4
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	031b      	lsls	r3, r3, #12
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bd6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bd72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	695b      	ldr	r3, [r3, #20]
 800bd7c:	011b      	lsls	r3, r3, #4
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	697a      	ldr	r2, [r7, #20]
 800bd8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	693a      	ldr	r2, [r7, #16]
 800bd94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3718      	adds	r7, #24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	fffebff8 	.word	0xfffebff8
 800bddc:	fffffcfc 	.word	0xfffffcfc
 800bde0:	fffff3f3 	.word	0xfffff3f3
 800bde4:	ffff0f0f 	.word	0xffff0f0f

0800bde8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bdf8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800be00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d110      	bne.n	800be3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d102      	bne.n	800be24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800be1e:	7b7b      	ldrb	r3, [r7, #13]
 800be20:	2b01      	cmp	r3, #1
 800be22:	d001      	beq.n	800be28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	e069      	b.n	800befc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2202      	movs	r2, #2
 800be2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2202      	movs	r2, #2
 800be34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be38:	e031      	b.n	800be9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	d110      	bne.n	800be62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800be40:	7bbb      	ldrb	r3, [r7, #14]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d102      	bne.n	800be4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800be46:	7b3b      	ldrb	r3, [r7, #12]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d001      	beq.n	800be50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	e055      	b.n	800befc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2202      	movs	r2, #2
 800be54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2202      	movs	r2, #2
 800be5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be60:	e01d      	b.n	800be9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be62:	7bfb      	ldrb	r3, [r7, #15]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d108      	bne.n	800be7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800be68:	7bbb      	ldrb	r3, [r7, #14]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d105      	bne.n	800be7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be6e:	7b7b      	ldrb	r3, [r7, #13]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d102      	bne.n	800be7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800be74:	7b3b      	ldrb	r3, [r7, #12]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d001      	beq.n	800be7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e03e      	b.n	800befc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2202      	movs	r2, #2
 800be82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2202      	movs	r2, #2
 800be8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2202      	movs	r2, #2
 800be92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2202      	movs	r2, #2
 800be9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d003      	beq.n	800beac <HAL_TIM_Encoder_Start+0xc4>
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	2b04      	cmp	r3, #4
 800bea8:	d008      	beq.n	800bebc <HAL_TIM_Encoder_Start+0xd4>
 800beaa:	e00f      	b.n	800becc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2201      	movs	r2, #1
 800beb2:	2100      	movs	r1, #0
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 ff93 	bl	800cde0 <TIM_CCxChannelCmd>
      break;
 800beba:	e016      	b.n	800beea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2201      	movs	r2, #1
 800bec2:	2104      	movs	r1, #4
 800bec4:	4618      	mov	r0, r3
 800bec6:	f000 ff8b 	bl	800cde0 <TIM_CCxChannelCmd>
      break;
 800beca:	e00e      	b.n	800beea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2201      	movs	r2, #1
 800bed2:	2100      	movs	r1, #0
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 ff83 	bl	800cde0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2201      	movs	r2, #1
 800bee0:	2104      	movs	r1, #4
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 ff7c 	bl	800cde0 <TIM_CCxChannelCmd>
      break;
 800bee8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f042 0201 	orr.w	r2, r2, #1
 800bef8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	f003 0302 	and.w	r3, r3, #2
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d122      	bne.n	800bf60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	f003 0302 	and.w	r3, r3, #2
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d11b      	bne.n	800bf60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f06f 0202 	mvn.w	r2, #2
 800bf30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2201      	movs	r2, #1
 800bf36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	699b      	ldr	r3, [r3, #24]
 800bf3e:	f003 0303 	and.w	r3, r3, #3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fb12 	bl	800c570 <HAL_TIM_IC_CaptureCallback>
 800bf4c:	e005      	b.n	800bf5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fb04 	bl	800c55c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fb15 	bl	800c584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	f003 0304 	and.w	r3, r3, #4
 800bf6a:	2b04      	cmp	r3, #4
 800bf6c:	d122      	bne.n	800bfb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	2b04      	cmp	r3, #4
 800bf7a:	d11b      	bne.n	800bfb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f06f 0204 	mvn.w	r2, #4
 800bf84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2202      	movs	r2, #2
 800bf8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	699b      	ldr	r3, [r3, #24]
 800bf92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fae8 	bl	800c570 <HAL_TIM_IC_CaptureCallback>
 800bfa0:	e005      	b.n	800bfae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fada 	bl	800c55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 faeb 	bl	800c584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	f003 0308 	and.w	r3, r3, #8
 800bfbe:	2b08      	cmp	r3, #8
 800bfc0:	d122      	bne.n	800c008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f003 0308 	and.w	r3, r3, #8
 800bfcc:	2b08      	cmp	r3, #8
 800bfce:	d11b      	bne.n	800c008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f06f 0208 	mvn.w	r2, #8
 800bfd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2204      	movs	r2, #4
 800bfde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	f003 0303 	and.w	r3, r3, #3
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d003      	beq.n	800bff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fabe 	bl	800c570 <HAL_TIM_IC_CaptureCallback>
 800bff4:	e005      	b.n	800c002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fab0 	bl	800c55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fac1 	bl	800c584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	f003 0310 	and.w	r3, r3, #16
 800c012:	2b10      	cmp	r3, #16
 800c014:	d122      	bne.n	800c05c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	f003 0310 	and.w	r3, r3, #16
 800c020:	2b10      	cmp	r3, #16
 800c022:	d11b      	bne.n	800c05c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f06f 0210 	mvn.w	r2, #16
 800c02c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2208      	movs	r2, #8
 800c032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	69db      	ldr	r3, [r3, #28]
 800c03a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fa94 	bl	800c570 <HAL_TIM_IC_CaptureCallback>
 800c048:	e005      	b.n	800c056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fa86 	bl	800c55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fa97 	bl	800c584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	691b      	ldr	r3, [r3, #16]
 800c062:	f003 0301 	and.w	r3, r3, #1
 800c066:	2b01      	cmp	r3, #1
 800c068:	d10e      	bne.n	800c088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b01      	cmp	r3, #1
 800c076:	d107      	bne.n	800c088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f06f 0201 	mvn.w	r2, #1
 800c080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7f5 faac 	bl	80015e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c092:	2b80      	cmp	r3, #128	; 0x80
 800c094:	d10e      	bne.n	800c0b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0a0:	2b80      	cmp	r3, #128	; 0x80
 800c0a2:	d107      	bne.n	800c0b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c0ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f001 f802 	bl	800d0b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0c2:	d10e      	bne.n	800c0e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ce:	2b80      	cmp	r3, #128	; 0x80
 800c0d0:	d107      	bne.n	800c0e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c0da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fff5 	bl	800d0cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ec:	2b40      	cmp	r3, #64	; 0x40
 800c0ee:	d10e      	bne.n	800c10e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68db      	ldr	r3, [r3, #12]
 800c0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0fa:	2b40      	cmp	r3, #64	; 0x40
 800c0fc:	d107      	bne.n	800c10e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fa45 	bl	800c598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	f003 0320 	and.w	r3, r3, #32
 800c118:	2b20      	cmp	r3, #32
 800c11a:	d10e      	bne.n	800c13a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	f003 0320 	and.w	r3, r3, #32
 800c126:	2b20      	cmp	r3, #32
 800c128:	d107      	bne.n	800c13a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f06f 0220 	mvn.w	r2, #32
 800c132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 ffb5 	bl	800d0a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
	...

0800c144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d101      	bne.n	800c162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c15e:	2302      	movs	r3, #2
 800c160:	e0ff      	b.n	800c362 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2201      	movs	r2, #1
 800c166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b14      	cmp	r3, #20
 800c16e:	f200 80f0 	bhi.w	800c352 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c172:	a201      	add	r2, pc, #4	; (adr r2, 800c178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c178:	0800c1cd 	.word	0x0800c1cd
 800c17c:	0800c353 	.word	0x0800c353
 800c180:	0800c353 	.word	0x0800c353
 800c184:	0800c353 	.word	0x0800c353
 800c188:	0800c20d 	.word	0x0800c20d
 800c18c:	0800c353 	.word	0x0800c353
 800c190:	0800c353 	.word	0x0800c353
 800c194:	0800c353 	.word	0x0800c353
 800c198:	0800c24f 	.word	0x0800c24f
 800c19c:	0800c353 	.word	0x0800c353
 800c1a0:	0800c353 	.word	0x0800c353
 800c1a4:	0800c353 	.word	0x0800c353
 800c1a8:	0800c28f 	.word	0x0800c28f
 800c1ac:	0800c353 	.word	0x0800c353
 800c1b0:	0800c353 	.word	0x0800c353
 800c1b4:	0800c353 	.word	0x0800c353
 800c1b8:	0800c2d1 	.word	0x0800c2d1
 800c1bc:	0800c353 	.word	0x0800c353
 800c1c0:	0800c353 	.word	0x0800c353
 800c1c4:	0800c353 	.word	0x0800c353
 800c1c8:	0800c311 	.word	0x0800c311
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68b9      	ldr	r1, [r7, #8]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 fa90 	bl	800c6f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	699a      	ldr	r2, [r3, #24]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f042 0208 	orr.w	r2, r2, #8
 800c1e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	699a      	ldr	r2, [r3, #24]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f022 0204 	bic.w	r2, r2, #4
 800c1f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6999      	ldr	r1, [r3, #24]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	691a      	ldr	r2, [r3, #16]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	619a      	str	r2, [r3, #24]
      break;
 800c20a:	e0a5      	b.n	800c358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68b9      	ldr	r1, [r7, #8]
 800c212:	4618      	mov	r0, r3
 800c214:	f000 fb00 	bl	800c818 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	699a      	ldr	r2, [r3, #24]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	699a      	ldr	r2, [r3, #24]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6999      	ldr	r1, [r3, #24]
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	021a      	lsls	r2, r3, #8
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	430a      	orrs	r2, r1
 800c24a:	619a      	str	r2, [r3, #24]
      break;
 800c24c:	e084      	b.n	800c358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68b9      	ldr	r1, [r7, #8]
 800c254:	4618      	mov	r0, r3
 800c256:	f000 fb69 	bl	800c92c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	69da      	ldr	r2, [r3, #28]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f042 0208 	orr.w	r2, r2, #8
 800c268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	69da      	ldr	r2, [r3, #28]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f022 0204 	bic.w	r2, r2, #4
 800c278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	69d9      	ldr	r1, [r3, #28]
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	691a      	ldr	r2, [r3, #16]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	430a      	orrs	r2, r1
 800c28a:	61da      	str	r2, [r3, #28]
      break;
 800c28c:	e064      	b.n	800c358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68b9      	ldr	r1, [r7, #8]
 800c294:	4618      	mov	r0, r3
 800c296:	f000 fbd1 	bl	800ca3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	69da      	ldr	r2, [r3, #28]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	69da      	ldr	r2, [r3, #28]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	69d9      	ldr	r1, [r3, #28]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	021a      	lsls	r2, r3, #8
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	61da      	str	r2, [r3, #28]
      break;
 800c2ce:	e043      	b.n	800c358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68b9      	ldr	r1, [r7, #8]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 fc1a 	bl	800cb10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 0208 	orr.w	r2, r2, #8
 800c2ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f022 0204 	bic.w	r2, r2, #4
 800c2fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	691a      	ldr	r2, [r3, #16]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	430a      	orrs	r2, r1
 800c30c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c30e:	e023      	b.n	800c358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68b9      	ldr	r1, [r7, #8]
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fc5e 	bl	800cbd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c32a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c33a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	021a      	lsls	r2, r3, #8
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	430a      	orrs	r2, r1
 800c34e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c350:	e002      	b.n	800c358 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	75fb      	strb	r3, [r7, #23]
      break;
 800c356:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c360:	7dfb      	ldrb	r3, [r7, #23]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3718      	adds	r7, #24
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop

0800c36c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c380:	2b01      	cmp	r3, #1
 800c382:	d101      	bne.n	800c388 <HAL_TIM_ConfigClockSource+0x1c>
 800c384:	2302      	movs	r3, #2
 800c386:	e0dc      	b.n	800c542 <HAL_TIM_ConfigClockSource+0x1d6>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2202      	movs	r2, #2
 800c394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	4b6a      	ldr	r3, [pc, #424]	; (800c54c <HAL_TIM_ConfigClockSource+0x1e0>)
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a64      	ldr	r2, [pc, #400]	; (800c550 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	f000 80a9 	beq.w	800c516 <HAL_TIM_ConfigClockSource+0x1aa>
 800c3c4:	4a62      	ldr	r2, [pc, #392]	; (800c550 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	f200 80ae 	bhi.w	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3cc:	4a61      	ldr	r2, [pc, #388]	; (800c554 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	f000 80a1 	beq.w	800c516 <HAL_TIM_ConfigClockSource+0x1aa>
 800c3d4:	4a5f      	ldr	r2, [pc, #380]	; (800c554 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	f200 80a6 	bhi.w	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3dc:	4a5e      	ldr	r2, [pc, #376]	; (800c558 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	f000 8099 	beq.w	800c516 <HAL_TIM_ConfigClockSource+0x1aa>
 800c3e4:	4a5c      	ldr	r2, [pc, #368]	; (800c558 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	f200 809e 	bhi.w	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c3f0:	f000 8091 	beq.w	800c516 <HAL_TIM_ConfigClockSource+0x1aa>
 800c3f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c3f8:	f200 8096 	bhi.w	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c400:	f000 8089 	beq.w	800c516 <HAL_TIM_ConfigClockSource+0x1aa>
 800c404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c408:	f200 808e 	bhi.w	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c40c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c410:	d03e      	beq.n	800c490 <HAL_TIM_ConfigClockSource+0x124>
 800c412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c416:	f200 8087 	bhi.w	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c41a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c41e:	f000 8086 	beq.w	800c52e <HAL_TIM_ConfigClockSource+0x1c2>
 800c422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c426:	d87f      	bhi.n	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c428:	2b70      	cmp	r3, #112	; 0x70
 800c42a:	d01a      	beq.n	800c462 <HAL_TIM_ConfigClockSource+0xf6>
 800c42c:	2b70      	cmp	r3, #112	; 0x70
 800c42e:	d87b      	bhi.n	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c430:	2b60      	cmp	r3, #96	; 0x60
 800c432:	d050      	beq.n	800c4d6 <HAL_TIM_ConfigClockSource+0x16a>
 800c434:	2b60      	cmp	r3, #96	; 0x60
 800c436:	d877      	bhi.n	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c438:	2b50      	cmp	r3, #80	; 0x50
 800c43a:	d03c      	beq.n	800c4b6 <HAL_TIM_ConfigClockSource+0x14a>
 800c43c:	2b50      	cmp	r3, #80	; 0x50
 800c43e:	d873      	bhi.n	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c440:	2b40      	cmp	r3, #64	; 0x40
 800c442:	d058      	beq.n	800c4f6 <HAL_TIM_ConfigClockSource+0x18a>
 800c444:	2b40      	cmp	r3, #64	; 0x40
 800c446:	d86f      	bhi.n	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c448:	2b30      	cmp	r3, #48	; 0x30
 800c44a:	d064      	beq.n	800c516 <HAL_TIM_ConfigClockSource+0x1aa>
 800c44c:	2b30      	cmp	r3, #48	; 0x30
 800c44e:	d86b      	bhi.n	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c450:	2b20      	cmp	r3, #32
 800c452:	d060      	beq.n	800c516 <HAL_TIM_ConfigClockSource+0x1aa>
 800c454:	2b20      	cmp	r3, #32
 800c456:	d867      	bhi.n	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d05c      	beq.n	800c516 <HAL_TIM_ConfigClockSource+0x1aa>
 800c45c:	2b10      	cmp	r3, #16
 800c45e:	d05a      	beq.n	800c516 <HAL_TIM_ConfigClockSource+0x1aa>
 800c460:	e062      	b.n	800c528 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6818      	ldr	r0, [r3, #0]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	6899      	ldr	r1, [r3, #8]
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	685a      	ldr	r2, [r3, #4]
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	f000 fc95 	bl	800cda0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	609a      	str	r2, [r3, #8]
      break;
 800c48e:	e04f      	b.n	800c530 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6818      	ldr	r0, [r3, #0]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	6899      	ldr	r1, [r3, #8]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	f000 fc7e 	bl	800cda0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	689a      	ldr	r2, [r3, #8]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c4b2:	609a      	str	r2, [r3, #8]
      break;
 800c4b4:	e03c      	b.n	800c530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	6859      	ldr	r1, [r3, #4]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	f000 fbee 	bl	800cca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2150      	movs	r1, #80	; 0x50
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 fc48 	bl	800cd64 <TIM_ITRx_SetConfig>
      break;
 800c4d4:	e02c      	b.n	800c530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6818      	ldr	r0, [r3, #0]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	6859      	ldr	r1, [r3, #4]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	f000 fc0d 	bl	800cd02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2160      	movs	r1, #96	; 0x60
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 fc38 	bl	800cd64 <TIM_ITRx_SetConfig>
      break;
 800c4f4:	e01c      	b.n	800c530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6818      	ldr	r0, [r3, #0]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	6859      	ldr	r1, [r3, #4]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	461a      	mov	r2, r3
 800c504:	f000 fbce 	bl	800cca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2140      	movs	r1, #64	; 0x40
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 fc28 	bl	800cd64 <TIM_ITRx_SetConfig>
      break;
 800c514:	e00c      	b.n	800c530 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4619      	mov	r1, r3
 800c520:	4610      	mov	r0, r2
 800c522:	f000 fc1f 	bl	800cd64 <TIM_ITRx_SetConfig>
      break;
 800c526:	e003      	b.n	800c530 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c528:	2301      	movs	r3, #1
 800c52a:	73fb      	strb	r3, [r7, #15]
      break;
 800c52c:	e000      	b.n	800c530 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c52e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c540:	7bfb      	ldrb	r3, [r7, #15]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	ffceff88 	.word	0xffceff88
 800c550:	00100040 	.word	0x00100040
 800c554:	00100030 	.word	0x00100030
 800c558:	00100020 	.word	0x00100020

0800c55c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c58c:	bf00      	nop
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a44      	ldr	r2, [pc, #272]	; (800c6d0 <TIM_Base_SetConfig+0x124>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d013      	beq.n	800c5ec <TIM_Base_SetConfig+0x40>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5ca:	d00f      	beq.n	800c5ec <TIM_Base_SetConfig+0x40>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a41      	ldr	r2, [pc, #260]	; (800c6d4 <TIM_Base_SetConfig+0x128>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d00b      	beq.n	800c5ec <TIM_Base_SetConfig+0x40>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a40      	ldr	r2, [pc, #256]	; (800c6d8 <TIM_Base_SetConfig+0x12c>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d007      	beq.n	800c5ec <TIM_Base_SetConfig+0x40>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4a3f      	ldr	r2, [pc, #252]	; (800c6dc <TIM_Base_SetConfig+0x130>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d003      	beq.n	800c5ec <TIM_Base_SetConfig+0x40>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a3e      	ldr	r2, [pc, #248]	; (800c6e0 <TIM_Base_SetConfig+0x134>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d108      	bne.n	800c5fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a33      	ldr	r2, [pc, #204]	; (800c6d0 <TIM_Base_SetConfig+0x124>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d027      	beq.n	800c656 <TIM_Base_SetConfig+0xaa>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c60c:	d023      	beq.n	800c656 <TIM_Base_SetConfig+0xaa>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4a30      	ldr	r2, [pc, #192]	; (800c6d4 <TIM_Base_SetConfig+0x128>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d01f      	beq.n	800c656 <TIM_Base_SetConfig+0xaa>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4a2f      	ldr	r2, [pc, #188]	; (800c6d8 <TIM_Base_SetConfig+0x12c>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d01b      	beq.n	800c656 <TIM_Base_SetConfig+0xaa>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4a2e      	ldr	r2, [pc, #184]	; (800c6dc <TIM_Base_SetConfig+0x130>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d017      	beq.n	800c656 <TIM_Base_SetConfig+0xaa>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	4a2d      	ldr	r2, [pc, #180]	; (800c6e0 <TIM_Base_SetConfig+0x134>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d013      	beq.n	800c656 <TIM_Base_SetConfig+0xaa>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4a2c      	ldr	r2, [pc, #176]	; (800c6e4 <TIM_Base_SetConfig+0x138>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d00f      	beq.n	800c656 <TIM_Base_SetConfig+0xaa>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4a2b      	ldr	r2, [pc, #172]	; (800c6e8 <TIM_Base_SetConfig+0x13c>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d00b      	beq.n	800c656 <TIM_Base_SetConfig+0xaa>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a2a      	ldr	r2, [pc, #168]	; (800c6ec <TIM_Base_SetConfig+0x140>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d007      	beq.n	800c656 <TIM_Base_SetConfig+0xaa>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a29      	ldr	r2, [pc, #164]	; (800c6f0 <TIM_Base_SetConfig+0x144>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d003      	beq.n	800c656 <TIM_Base_SetConfig+0xaa>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a28      	ldr	r2, [pc, #160]	; (800c6f4 <TIM_Base_SetConfig+0x148>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d108      	bne.n	800c668 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c65c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	4313      	orrs	r3, r2
 800c666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	4313      	orrs	r3, r2
 800c674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	689a      	ldr	r2, [r3, #8]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a10      	ldr	r2, [pc, #64]	; (800c6d0 <TIM_Base_SetConfig+0x124>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00f      	beq.n	800c6b4 <TIM_Base_SetConfig+0x108>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a12      	ldr	r2, [pc, #72]	; (800c6e0 <TIM_Base_SetConfig+0x134>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d00b      	beq.n	800c6b4 <TIM_Base_SetConfig+0x108>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a11      	ldr	r2, [pc, #68]	; (800c6e4 <TIM_Base_SetConfig+0x138>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d007      	beq.n	800c6b4 <TIM_Base_SetConfig+0x108>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a10      	ldr	r2, [pc, #64]	; (800c6e8 <TIM_Base_SetConfig+0x13c>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d003      	beq.n	800c6b4 <TIM_Base_SetConfig+0x108>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a0f      	ldr	r2, [pc, #60]	; (800c6ec <TIM_Base_SetConfig+0x140>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d103      	bne.n	800c6bc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	691a      	ldr	r2, [r3, #16]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	615a      	str	r2, [r3, #20]
}
 800c6c2:	bf00      	nop
 800c6c4:	3714      	adds	r7, #20
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	40010000 	.word	0x40010000
 800c6d4:	40000400 	.word	0x40000400
 800c6d8:	40000800 	.word	0x40000800
 800c6dc:	40000c00 	.word	0x40000c00
 800c6e0:	40010400 	.word	0x40010400
 800c6e4:	40014000 	.word	0x40014000
 800c6e8:	40014400 	.word	0x40014400
 800c6ec:	40014800 	.word	0x40014800
 800c6f0:	4000e000 	.word	0x4000e000
 800c6f4:	4000e400 	.word	0x4000e400

0800c6f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b087      	sub	sp, #28
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a1b      	ldr	r3, [r3, #32]
 800c706:	f023 0201 	bic.w	r2, r3, #1
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a1b      	ldr	r3, [r3, #32]
 800c712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	699b      	ldr	r3, [r3, #24]
 800c71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	4b37      	ldr	r3, [pc, #220]	; (800c800 <TIM_OC1_SetConfig+0x108>)
 800c724:	4013      	ands	r3, r2
 800c726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f023 0303 	bic.w	r3, r3, #3
 800c72e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	4313      	orrs	r3, r2
 800c738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	f023 0302 	bic.w	r3, r3, #2
 800c740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	4313      	orrs	r3, r2
 800c74a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a2d      	ldr	r2, [pc, #180]	; (800c804 <TIM_OC1_SetConfig+0x10c>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d00f      	beq.n	800c774 <TIM_OC1_SetConfig+0x7c>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a2c      	ldr	r2, [pc, #176]	; (800c808 <TIM_OC1_SetConfig+0x110>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d00b      	beq.n	800c774 <TIM_OC1_SetConfig+0x7c>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4a2b      	ldr	r2, [pc, #172]	; (800c80c <TIM_OC1_SetConfig+0x114>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d007      	beq.n	800c774 <TIM_OC1_SetConfig+0x7c>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4a2a      	ldr	r2, [pc, #168]	; (800c810 <TIM_OC1_SetConfig+0x118>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d003      	beq.n	800c774 <TIM_OC1_SetConfig+0x7c>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a29      	ldr	r2, [pc, #164]	; (800c814 <TIM_OC1_SetConfig+0x11c>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d10c      	bne.n	800c78e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f023 0308 	bic.w	r3, r3, #8
 800c77a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	697a      	ldr	r2, [r7, #20]
 800c782:	4313      	orrs	r3, r2
 800c784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	f023 0304 	bic.w	r3, r3, #4
 800c78c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a1c      	ldr	r2, [pc, #112]	; (800c804 <TIM_OC1_SetConfig+0x10c>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d00f      	beq.n	800c7b6 <TIM_OC1_SetConfig+0xbe>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a1b      	ldr	r2, [pc, #108]	; (800c808 <TIM_OC1_SetConfig+0x110>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d00b      	beq.n	800c7b6 <TIM_OC1_SetConfig+0xbe>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4a1a      	ldr	r2, [pc, #104]	; (800c80c <TIM_OC1_SetConfig+0x114>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d007      	beq.n	800c7b6 <TIM_OC1_SetConfig+0xbe>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a19      	ldr	r2, [pc, #100]	; (800c810 <TIM_OC1_SetConfig+0x118>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d003      	beq.n	800c7b6 <TIM_OC1_SetConfig+0xbe>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a18      	ldr	r2, [pc, #96]	; (800c814 <TIM_OC1_SetConfig+0x11c>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d111      	bne.n	800c7da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	695b      	ldr	r3, [r3, #20]
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	699b      	ldr	r3, [r3, #24]
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	693a      	ldr	r2, [r7, #16]
 800c7de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	685a      	ldr	r2, [r3, #4]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	621a      	str	r2, [r3, #32]
}
 800c7f4:	bf00      	nop
 800c7f6:	371c      	adds	r7, #28
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	fffeff8f 	.word	0xfffeff8f
 800c804:	40010000 	.word	0x40010000
 800c808:	40010400 	.word	0x40010400
 800c80c:	40014000 	.word	0x40014000
 800c810:	40014400 	.word	0x40014400
 800c814:	40014800 	.word	0x40014800

0800c818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c818:	b480      	push	{r7}
 800c81a:	b087      	sub	sp, #28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	f023 0210 	bic.w	r2, r3, #16
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	4b34      	ldr	r3, [pc, #208]	; (800c914 <TIM_OC2_SetConfig+0xfc>)
 800c844:	4013      	ands	r3, r2
 800c846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c84e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	021b      	lsls	r3, r3, #8
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	4313      	orrs	r3, r2
 800c85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	f023 0320 	bic.w	r3, r3, #32
 800c862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	011b      	lsls	r3, r3, #4
 800c86a:	697a      	ldr	r2, [r7, #20]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a29      	ldr	r2, [pc, #164]	; (800c918 <TIM_OC2_SetConfig+0x100>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d003      	beq.n	800c880 <TIM_OC2_SetConfig+0x68>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a28      	ldr	r2, [pc, #160]	; (800c91c <TIM_OC2_SetConfig+0x104>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d10d      	bne.n	800c89c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	011b      	lsls	r3, r3, #4
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	4313      	orrs	r3, r2
 800c892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c89a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4a1e      	ldr	r2, [pc, #120]	; (800c918 <TIM_OC2_SetConfig+0x100>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d00f      	beq.n	800c8c4 <TIM_OC2_SetConfig+0xac>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a1d      	ldr	r2, [pc, #116]	; (800c91c <TIM_OC2_SetConfig+0x104>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d00b      	beq.n	800c8c4 <TIM_OC2_SetConfig+0xac>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a1c      	ldr	r2, [pc, #112]	; (800c920 <TIM_OC2_SetConfig+0x108>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d007      	beq.n	800c8c4 <TIM_OC2_SetConfig+0xac>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a1b      	ldr	r2, [pc, #108]	; (800c924 <TIM_OC2_SetConfig+0x10c>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d003      	beq.n	800c8c4 <TIM_OC2_SetConfig+0xac>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a1a      	ldr	r2, [pc, #104]	; (800c928 <TIM_OC2_SetConfig+0x110>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d113      	bne.n	800c8ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	695b      	ldr	r3, [r3, #20]
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	693a      	ldr	r2, [r7, #16]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	693a      	ldr	r2, [r7, #16]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	697a      	ldr	r2, [r7, #20]
 800c904:	621a      	str	r2, [r3, #32]
}
 800c906:	bf00      	nop
 800c908:	371c      	adds	r7, #28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	feff8fff 	.word	0xfeff8fff
 800c918:	40010000 	.word	0x40010000
 800c91c:	40010400 	.word	0x40010400
 800c920:	40014000 	.word	0x40014000
 800c924:	40014400 	.word	0x40014400
 800c928:	40014800 	.word	0x40014800

0800c92c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b087      	sub	sp, #28
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a1b      	ldr	r3, [r3, #32]
 800c946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	69db      	ldr	r3, [r3, #28]
 800c952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	4b33      	ldr	r3, [pc, #204]	; (800ca24 <TIM_OC3_SetConfig+0xf8>)
 800c958:	4013      	ands	r3, r2
 800c95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f023 0303 	bic.w	r3, r3, #3
 800c962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	021b      	lsls	r3, r3, #8
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	4313      	orrs	r3, r2
 800c980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a28      	ldr	r2, [pc, #160]	; (800ca28 <TIM_OC3_SetConfig+0xfc>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d003      	beq.n	800c992 <TIM_OC3_SetConfig+0x66>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a27      	ldr	r2, [pc, #156]	; (800ca2c <TIM_OC3_SetConfig+0x100>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d10d      	bne.n	800c9ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	021b      	lsls	r3, r3, #8
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c9ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a1d      	ldr	r2, [pc, #116]	; (800ca28 <TIM_OC3_SetConfig+0xfc>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d00f      	beq.n	800c9d6 <TIM_OC3_SetConfig+0xaa>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a1c      	ldr	r2, [pc, #112]	; (800ca2c <TIM_OC3_SetConfig+0x100>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d00b      	beq.n	800c9d6 <TIM_OC3_SetConfig+0xaa>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4a1b      	ldr	r2, [pc, #108]	; (800ca30 <TIM_OC3_SetConfig+0x104>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d007      	beq.n	800c9d6 <TIM_OC3_SetConfig+0xaa>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4a1a      	ldr	r2, [pc, #104]	; (800ca34 <TIM_OC3_SetConfig+0x108>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d003      	beq.n	800c9d6 <TIM_OC3_SetConfig+0xaa>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4a19      	ldr	r2, [pc, #100]	; (800ca38 <TIM_OC3_SetConfig+0x10c>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d113      	bne.n	800c9fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	011b      	lsls	r3, r3, #4
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	699b      	ldr	r3, [r3, #24]
 800c9f6:	011b      	lsls	r3, r3, #4
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	697a      	ldr	r2, [r7, #20]
 800ca16:	621a      	str	r2, [r3, #32]
}
 800ca18:	bf00      	nop
 800ca1a:	371c      	adds	r7, #28
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	fffeff8f 	.word	0xfffeff8f
 800ca28:	40010000 	.word	0x40010000
 800ca2c:	40010400 	.word	0x40010400
 800ca30:	40014000 	.word	0x40014000
 800ca34:	40014400 	.word	0x40014400
 800ca38:	40014800 	.word	0x40014800

0800ca3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b087      	sub	sp, #28
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a1b      	ldr	r3, [r3, #32]
 800ca56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	69db      	ldr	r3, [r3, #28]
 800ca62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	4b24      	ldr	r3, [pc, #144]	; (800caf8 <TIM_OC4_SetConfig+0xbc>)
 800ca68:	4013      	ands	r3, r2
 800ca6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	021b      	lsls	r3, r3, #8
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	031b      	lsls	r3, r3, #12
 800ca8e:	693a      	ldr	r2, [r7, #16]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4a19      	ldr	r2, [pc, #100]	; (800cafc <TIM_OC4_SetConfig+0xc0>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d00f      	beq.n	800cabc <TIM_OC4_SetConfig+0x80>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a18      	ldr	r2, [pc, #96]	; (800cb00 <TIM_OC4_SetConfig+0xc4>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d00b      	beq.n	800cabc <TIM_OC4_SetConfig+0x80>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a17      	ldr	r2, [pc, #92]	; (800cb04 <TIM_OC4_SetConfig+0xc8>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d007      	beq.n	800cabc <TIM_OC4_SetConfig+0x80>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a16      	ldr	r2, [pc, #88]	; (800cb08 <TIM_OC4_SetConfig+0xcc>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d003      	beq.n	800cabc <TIM_OC4_SetConfig+0x80>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4a15      	ldr	r2, [pc, #84]	; (800cb0c <TIM_OC4_SetConfig+0xd0>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d109      	bne.n	800cad0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cac2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	019b      	lsls	r3, r3, #6
 800caca:	697a      	ldr	r2, [r7, #20]
 800cacc:	4313      	orrs	r3, r2
 800cace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	685a      	ldr	r2, [r3, #4]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	693a      	ldr	r2, [r7, #16]
 800cae8:	621a      	str	r2, [r3, #32]
}
 800caea:	bf00      	nop
 800caec:	371c      	adds	r7, #28
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	feff8fff 	.word	0xfeff8fff
 800cafc:	40010000 	.word	0x40010000
 800cb00:	40010400 	.word	0x40010400
 800cb04:	40014000 	.word	0x40014000
 800cb08:	40014400 	.word	0x40014400
 800cb0c:	40014800 	.word	0x40014800

0800cb10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b087      	sub	sp, #28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a1b      	ldr	r3, [r3, #32]
 800cb1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6a1b      	ldr	r3, [r3, #32]
 800cb2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	4b21      	ldr	r3, [pc, #132]	; (800cbc0 <TIM_OC5_SetConfig+0xb0>)
 800cb3c:	4013      	ands	r3, r2
 800cb3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cb50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	041b      	lsls	r3, r3, #16
 800cb58:	693a      	ldr	r2, [r7, #16]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a18      	ldr	r2, [pc, #96]	; (800cbc4 <TIM_OC5_SetConfig+0xb4>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d00f      	beq.n	800cb86 <TIM_OC5_SetConfig+0x76>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a17      	ldr	r2, [pc, #92]	; (800cbc8 <TIM_OC5_SetConfig+0xb8>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d00b      	beq.n	800cb86 <TIM_OC5_SetConfig+0x76>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a16      	ldr	r2, [pc, #88]	; (800cbcc <TIM_OC5_SetConfig+0xbc>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d007      	beq.n	800cb86 <TIM_OC5_SetConfig+0x76>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a15      	ldr	r2, [pc, #84]	; (800cbd0 <TIM_OC5_SetConfig+0xc0>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d003      	beq.n	800cb86 <TIM_OC5_SetConfig+0x76>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a14      	ldr	r2, [pc, #80]	; (800cbd4 <TIM_OC5_SetConfig+0xc4>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d109      	bne.n	800cb9a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	695b      	ldr	r3, [r3, #20]
 800cb92:	021b      	lsls	r3, r3, #8
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	697a      	ldr	r2, [r7, #20]
 800cb9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	685a      	ldr	r2, [r3, #4]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	693a      	ldr	r2, [r7, #16]
 800cbb2:	621a      	str	r2, [r3, #32]
}
 800cbb4:	bf00      	nop
 800cbb6:	371c      	adds	r7, #28
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	fffeff8f 	.word	0xfffeff8f
 800cbc4:	40010000 	.word	0x40010000
 800cbc8:	40010400 	.word	0x40010400
 800cbcc:	40014000 	.word	0x40014000
 800cbd0:	40014400 	.word	0x40014400
 800cbd4:	40014800 	.word	0x40014800

0800cbd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b087      	sub	sp, #28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a1b      	ldr	r3, [r3, #32]
 800cbe6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc00:	68fa      	ldr	r2, [r7, #12]
 800cc02:	4b22      	ldr	r3, [pc, #136]	; (800cc8c <TIM_OC6_SetConfig+0xb4>)
 800cc04:	4013      	ands	r3, r2
 800cc06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	021b      	lsls	r3, r3, #8
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	051b      	lsls	r3, r3, #20
 800cc22:	693a      	ldr	r2, [r7, #16]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a19      	ldr	r2, [pc, #100]	; (800cc90 <TIM_OC6_SetConfig+0xb8>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d00f      	beq.n	800cc50 <TIM_OC6_SetConfig+0x78>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4a18      	ldr	r2, [pc, #96]	; (800cc94 <TIM_OC6_SetConfig+0xbc>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d00b      	beq.n	800cc50 <TIM_OC6_SetConfig+0x78>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4a17      	ldr	r2, [pc, #92]	; (800cc98 <TIM_OC6_SetConfig+0xc0>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d007      	beq.n	800cc50 <TIM_OC6_SetConfig+0x78>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a16      	ldr	r2, [pc, #88]	; (800cc9c <TIM_OC6_SetConfig+0xc4>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d003      	beq.n	800cc50 <TIM_OC6_SetConfig+0x78>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a15      	ldr	r2, [pc, #84]	; (800cca0 <TIM_OC6_SetConfig+0xc8>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d109      	bne.n	800cc64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	695b      	ldr	r3, [r3, #20]
 800cc5c:	029b      	lsls	r3, r3, #10
 800cc5e:	697a      	ldr	r2, [r7, #20]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	693a      	ldr	r2, [r7, #16]
 800cc7c:	621a      	str	r2, [r3, #32]
}
 800cc7e:	bf00      	nop
 800cc80:	371c      	adds	r7, #28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	feff8fff 	.word	0xfeff8fff
 800cc90:	40010000 	.word	0x40010000
 800cc94:	40010400 	.word	0x40010400
 800cc98:	40014000 	.word	0x40014000
 800cc9c:	40014400 	.word	0x40014400
 800cca0:	40014800 	.word	0x40014800

0800cca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6a1b      	ldr	r3, [r3, #32]
 800ccb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6a1b      	ldr	r3, [r3, #32]
 800ccba:	f023 0201 	bic.w	r2, r3, #1
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	699b      	ldr	r3, [r3, #24]
 800ccc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ccce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	011b      	lsls	r3, r3, #4
 800ccd4:	693a      	ldr	r2, [r7, #16]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	f023 030a 	bic.w	r3, r3, #10
 800cce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cce2:	697a      	ldr	r2, [r7, #20]
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	697a      	ldr	r2, [r7, #20]
 800ccf4:	621a      	str	r2, [r3, #32]
}
 800ccf6:	bf00      	nop
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd02:	b480      	push	{r7}
 800cd04:	b087      	sub	sp, #28
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	60f8      	str	r0, [r7, #12]
 800cd0a:	60b9      	str	r1, [r7, #8]
 800cd0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6a1b      	ldr	r3, [r3, #32]
 800cd12:	f023 0210 	bic.w	r2, r3, #16
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	699b      	ldr	r3, [r3, #24]
 800cd1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	6a1b      	ldr	r3, [r3, #32]
 800cd24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	031b      	lsls	r3, r3, #12
 800cd32:	697a      	ldr	r2, [r7, #20]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	011b      	lsls	r3, r3, #4
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	4313      	orrs	r3, r2
 800cd48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	693a      	ldr	r2, [r7, #16]
 800cd54:	621a      	str	r2, [r3, #32]
}
 800cd56:	bf00      	nop
 800cd58:	371c      	adds	r7, #28
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
	...

0800cd64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <TIM_ITRx_SetConfig+0x38>)
 800cd78:	4013      	ands	r3, r2
 800cd7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	f043 0307 	orr.w	r3, r3, #7
 800cd86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	609a      	str	r2, [r3, #8]
}
 800cd8e:	bf00      	nop
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	ffcfff8f 	.word	0xffcfff8f

0800cda0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b087      	sub	sp, #28
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	021a      	lsls	r2, r3, #8
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	697a      	ldr	r2, [r7, #20]
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	697a      	ldr	r2, [r7, #20]
 800cdd2:	609a      	str	r2, [r3, #8]
}
 800cdd4:	bf00      	nop
 800cdd6:	371c      	adds	r7, #28
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b087      	sub	sp, #28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	f003 031f 	and.w	r3, r3, #31
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	fa02 f303 	lsl.w	r3, r2, r3
 800cdf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	6a1a      	ldr	r2, [r3, #32]
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	43db      	mvns	r3, r3
 800ce02:	401a      	ands	r2, r3
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6a1a      	ldr	r2, [r3, #32]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	f003 031f 	and.w	r3, r3, #31
 800ce12:	6879      	ldr	r1, [r7, #4]
 800ce14:	fa01 f303 	lsl.w	r3, r1, r3
 800ce18:	431a      	orrs	r2, r3
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	621a      	str	r2, [r3, #32]
}
 800ce1e:	bf00      	nop
 800ce20:	371c      	adds	r7, #28
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
	...

0800ce2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d101      	bne.n	800ce44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce40:	2302      	movs	r3, #2
 800ce42:	e077      	b.n	800cf34 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2202      	movs	r2, #2
 800ce50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a35      	ldr	r2, [pc, #212]	; (800cf40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d004      	beq.n	800ce78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a34      	ldr	r2, [pc, #208]	; (800cf44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d108      	bne.n	800ce8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ce7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a25      	ldr	r2, [pc, #148]	; (800cf40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d02c      	beq.n	800cf08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceb6:	d027      	beq.n	800cf08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a22      	ldr	r2, [pc, #136]	; (800cf48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d022      	beq.n	800cf08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a21      	ldr	r2, [pc, #132]	; (800cf4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d01d      	beq.n	800cf08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a1f      	ldr	r2, [pc, #124]	; (800cf50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d018      	beq.n	800cf08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a1a      	ldr	r2, [pc, #104]	; (800cf44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d013      	beq.n	800cf08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a1b      	ldr	r2, [pc, #108]	; (800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d00e      	beq.n	800cf08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a1a      	ldr	r2, [pc, #104]	; (800cf58 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d009      	beq.n	800cf08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a18      	ldr	r2, [pc, #96]	; (800cf5c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d004      	beq.n	800cf08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a17      	ldr	r2, [pc, #92]	; (800cf60 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d10c      	bne.n	800cf22 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	68ba      	ldr	r2, [r7, #8]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr
 800cf40:	40010000 	.word	0x40010000
 800cf44:	40010400 	.word	0x40010400
 800cf48:	40000400 	.word	0x40000400
 800cf4c:	40000800 	.word	0x40000800
 800cf50:	40000c00 	.word	0x40000c00
 800cf54:	40001800 	.word	0x40001800
 800cf58:	40014000 	.word	0x40014000
 800cf5c:	4000e000 	.word	0x4000e000
 800cf60:	4000e400 	.word	0x4000e400

0800cf64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d101      	bne.n	800cf80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cf7c:	2302      	movs	r3, #2
 800cf7e:	e087      	b.n	800d090 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	691b      	ldr	r3, [r3, #16]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	699b      	ldr	r3, [r3, #24]
 800cff4:	041b      	lsls	r3, r3, #16
 800cff6:	4313      	orrs	r3, r2
 800cff8:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a27      	ldr	r2, [pc, #156]	; (800d09c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d004      	beq.n	800d00e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a25      	ldr	r2, [pc, #148]	; (800d0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d106      	bne.n	800d01c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	4313      	orrs	r3, r2
 800d01a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a1e      	ldr	r2, [pc, #120]	; (800d09c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d004      	beq.n	800d030 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a1d      	ldr	r2, [pc, #116]	; (800d0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d126      	bne.n	800d07e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03a:	051b      	lsls	r3, r3, #20
 800d03c:	4313      	orrs	r3, r2
 800d03e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	6a1b      	ldr	r3, [r3, #32]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d058:	4313      	orrs	r3, r2
 800d05a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a0e      	ldr	r2, [pc, #56]	; (800d09c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d004      	beq.n	800d070 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a0d      	ldr	r2, [pc, #52]	; (800d0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d106      	bne.n	800d07e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07a:	4313      	orrs	r3, r2
 800d07c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	40010000 	.word	0x40010000
 800d0a0:	40010400 	.word	0x40010400

0800d0a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0ac:	bf00      	nop
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0c0:	bf00      	nop
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d0d4:	bf00      	nop
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d101      	bne.n	800d0f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e042      	b.n	800d178 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d106      	bne.n	800d10a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7f8 f9c1 	bl	800548c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2224      	movs	r2, #36	; 0x24
 800d10e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f022 0201 	bic.w	r2, r2, #1
 800d120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 fd18 	bl	800db58 <UART_SetConfig>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d101      	bne.n	800d132 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e022      	b.n	800d178 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d136:	2b00      	cmp	r3, #0
 800d138:	d002      	beq.n	800d140 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f001 fb78 	bl	800e830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	685a      	ldr	r2, [r3, #4]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d14e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	689a      	ldr	r2, [r3, #8]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d15e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f042 0201 	orr.w	r2, r2, #1
 800d16e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f001 fbff 	bl	800e974 <UART_CheckIdleState>
 800d176:	4603      	mov	r3, r0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3708      	adds	r7, #8
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	e02e      	b.n	800d1f0 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2224      	movs	r2, #36	; 0x24
 800d196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f022 0201 	bic.w	r2, r2, #1
 800d1a8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7f8 fa4a 	bl	800565c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1ee:	2300      	movs	r3, #0
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b08a      	sub	sp, #40	; 0x28
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	4613      	mov	r3, r2
 800d204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d20c:	2b20      	cmp	r3, #32
 800d20e:	d17a      	bne.n	800d306 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d002      	beq.n	800d21c <HAL_UART_Transmit_DMA+0x24>
 800d216:	88fb      	ldrh	r3, [r7, #6]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d101      	bne.n	800d220 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d21c:	2301      	movs	r3, #1
 800d21e:	e073      	b.n	800d308 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d226:	2b01      	cmp	r3, #1
 800d228:	d101      	bne.n	800d22e <HAL_UART_Transmit_DMA+0x36>
 800d22a:	2302      	movs	r3, #2
 800d22c:	e06c      	b.n	800d308 <HAL_UART_Transmit_DMA+0x110>
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	68ba      	ldr	r2, [r7, #8]
 800d23a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	88fa      	ldrh	r2, [r7, #6]
 800d240:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	88fa      	ldrh	r2, [r7, #6]
 800d248:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2200      	movs	r2, #0
 800d250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2221      	movs	r2, #33	; 0x21
 800d258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d260:	2b00      	cmp	r3, #0
 800d262:	d02c      	beq.n	800d2be <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d268:	4a29      	ldr	r2, [pc, #164]	; (800d310 <HAL_UART_Transmit_DMA+0x118>)
 800d26a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d270:	4a28      	ldr	r2, [pc, #160]	; (800d314 <HAL_UART_Transmit_DMA+0x11c>)
 800d272:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d278:	4a27      	ldr	r2, [pc, #156]	; (800d318 <HAL_UART_Transmit_DMA+0x120>)
 800d27a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d280:	2200      	movs	r2, #0
 800d282:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d28c:	4619      	mov	r1, r3
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3328      	adds	r3, #40	; 0x28
 800d294:	461a      	mov	r2, r3
 800d296:	88fb      	ldrh	r3, [r7, #6]
 800d298:	f7f9 fa56 	bl	8006748 <HAL_DMA_Start_IT>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00d      	beq.n	800d2be <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2210      	movs	r2, #16
 800d2a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2220      	movs	r2, #32
 800d2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e024      	b.n	800d308 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2240      	movs	r2, #64	; 0x40
 800d2c4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	3308      	adds	r3, #8
 800d2d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	e853 3f00 	ldrex	r3, [r3]
 800d2dc:	613b      	str	r3, [r7, #16]
   return(result);
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	3308      	adds	r3, #8
 800d2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ee:	623a      	str	r2, [r7, #32]
 800d2f0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f2:	69f9      	ldr	r1, [r7, #28]
 800d2f4:	6a3a      	ldr	r2, [r7, #32]
 800d2f6:	e841 2300 	strex	r3, r2, [r1]
 800d2fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d1e5      	bne.n	800d2ce <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	e000      	b.n	800d308 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d306:	2302      	movs	r3, #2
  }
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3728      	adds	r7, #40	; 0x28
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	0800ee3d 	.word	0x0800ee3d
 800d314:	0800eed3 	.word	0x0800eed3
 800d318:	0800f049 	.word	0x0800f049

0800d31c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b08a      	sub	sp, #40	; 0x28
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	4613      	mov	r3, r2
 800d328:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d330:	2b20      	cmp	r3, #32
 800d332:	d142      	bne.n	800d3ba <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d002      	beq.n	800d340 <HAL_UART_Receive_DMA+0x24>
 800d33a:	88fb      	ldrh	r3, [r7, #6]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d101      	bne.n	800d344 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d340:	2301      	movs	r3, #1
 800d342:	e03b      	b.n	800d3bc <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d101      	bne.n	800d352 <HAL_UART_Receive_DMA+0x36>
 800d34e:	2302      	movs	r3, #2
 800d350:	e034      	b.n	800d3bc <HAL_UART_Receive_DMA+0xa0>
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2201      	movs	r2, #1
 800d356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2200      	movs	r2, #0
 800d35e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a17      	ldr	r2, [pc, #92]	; (800d3c4 <HAL_UART_Receive_DMA+0xa8>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d01f      	beq.n	800d3aa <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d374:	2b00      	cmp	r3, #0
 800d376:	d018      	beq.n	800d3aa <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	e853 3f00 	ldrex	r3, [r3]
 800d384:	613b      	str	r3, [r7, #16]
   return(result);
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d38c:	627b      	str	r3, [r7, #36]	; 0x24
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	461a      	mov	r2, r3
 800d394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d396:	623b      	str	r3, [r7, #32]
 800d398:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d39a:	69f9      	ldr	r1, [r7, #28]
 800d39c:	6a3a      	ldr	r2, [r7, #32]
 800d39e:	e841 2300 	strex	r3, r2, [r1]
 800d3a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1e6      	bne.n	800d378 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d3aa:	88fb      	ldrh	r3, [r7, #6]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	68b9      	ldr	r1, [r7, #8]
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f001 fbf3 	bl	800eb9c <UART_Start_Receive_DMA>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	e000      	b.n	800d3bc <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d3ba:	2302      	movs	r3, #2
  }
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3728      	adds	r7, #40	; 0x28
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	58000c00 	.word	0x58000c00

0800d3c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b0ba      	sub	sp, #232	; 0xe8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	69db      	ldr	r3, [r3, #28]
 800d3d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d3ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d3f2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d3f6:	4013      	ands	r3, r2
 800d3f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d3fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d400:	2b00      	cmp	r3, #0
 800d402:	d11b      	bne.n	800d43c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d408:	f003 0320 	and.w	r3, r3, #32
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d015      	beq.n	800d43c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d414:	f003 0320 	and.w	r3, r3, #32
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d105      	bne.n	800d428 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d41c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d424:	2b00      	cmp	r3, #0
 800d426:	d009      	beq.n	800d43c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f000 835a 	beq.w	800dae6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	4798      	blx	r3
      }
      return;
 800d43a:	e354      	b.n	800dae6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d43c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d440:	2b00      	cmp	r3, #0
 800d442:	f000 811f 	beq.w	800d684 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d446:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d44a:	4b8b      	ldr	r3, [pc, #556]	; (800d678 <HAL_UART_IRQHandler+0x2b0>)
 800d44c:	4013      	ands	r3, r2
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d106      	bne.n	800d460 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d452:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d456:	4b89      	ldr	r3, [pc, #548]	; (800d67c <HAL_UART_IRQHandler+0x2b4>)
 800d458:	4013      	ands	r3, r2
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f000 8112 	beq.w	800d684 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d011      	beq.n	800d490 <HAL_UART_IRQHandler+0xc8>
 800d46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00b      	beq.n	800d490 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2201      	movs	r2, #1
 800d47e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d486:	f043 0201 	orr.w	r2, r3, #1
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d494:	f003 0302 	and.w	r3, r3, #2
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d011      	beq.n	800d4c0 <HAL_UART_IRQHandler+0xf8>
 800d49c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4a0:	f003 0301 	and.w	r3, r3, #1
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00b      	beq.n	800d4c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2202      	movs	r2, #2
 800d4ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4b6:	f043 0204 	orr.w	r2, r3, #4
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4c4:	f003 0304 	and.w	r3, r3, #4
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d011      	beq.n	800d4f0 <HAL_UART_IRQHandler+0x128>
 800d4cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d00b      	beq.n	800d4f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2204      	movs	r2, #4
 800d4de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4e6:	f043 0202 	orr.w	r2, r3, #2
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d4f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4f4:	f003 0308 	and.w	r3, r3, #8
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d017      	beq.n	800d52c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d4fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d500:	f003 0320 	and.w	r3, r3, #32
 800d504:	2b00      	cmp	r3, #0
 800d506:	d105      	bne.n	800d514 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d508:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d50c:	4b5a      	ldr	r3, [pc, #360]	; (800d678 <HAL_UART_IRQHandler+0x2b0>)
 800d50e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00b      	beq.n	800d52c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2208      	movs	r2, #8
 800d51a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d522:	f043 0208 	orr.w	r2, r3, #8
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d52c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d534:	2b00      	cmp	r3, #0
 800d536:	d012      	beq.n	800d55e <HAL_UART_IRQHandler+0x196>
 800d538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d53c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00c      	beq.n	800d55e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d54c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d554:	f043 0220 	orr.w	r2, r3, #32
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d564:	2b00      	cmp	r3, #0
 800d566:	f000 82c0 	beq.w	800daea <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d56e:	f003 0320 	and.w	r3, r3, #32
 800d572:	2b00      	cmp	r3, #0
 800d574:	d013      	beq.n	800d59e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d57a:	f003 0320 	and.w	r3, r3, #32
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d105      	bne.n	800d58e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d007      	beq.n	800d59e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d592:	2b00      	cmp	r3, #0
 800d594:	d003      	beq.n	800d59e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b2:	2b40      	cmp	r3, #64	; 0x40
 800d5b4:	d005      	beq.n	800d5c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d5b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d5ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d04f      	beq.n	800d662 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f001 fbd4 	bl	800ed70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5d2:	2b40      	cmp	r3, #64	; 0x40
 800d5d4:	d141      	bne.n	800d65a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3308      	adds	r3, #8
 800d5dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5e4:	e853 3f00 	ldrex	r3, [r3]
 800d5e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d5ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d602:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d60e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d612:	e841 2300 	strex	r3, r2, [r1]
 800d616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d61a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1d9      	bne.n	800d5d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d626:	2b00      	cmp	r3, #0
 800d628:	d013      	beq.n	800d652 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d62e:	4a14      	ldr	r2, [pc, #80]	; (800d680 <HAL_UART_IRQHandler+0x2b8>)
 800d630:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d636:	4618      	mov	r0, r3
 800d638:	f7f9 fe0e 	bl	8007258 <HAL_DMA_Abort_IT>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d017      	beq.n	800d672 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d64c:	4610      	mov	r0, r2
 800d64e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d650:	e00f      	b.n	800d672 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7f6 fe68 	bl	8004328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d658:	e00b      	b.n	800d672 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7f6 fe64 	bl	8004328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d660:	e007      	b.n	800d672 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7f6 fe60 	bl	8004328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d670:	e23b      	b.n	800daea <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d672:	bf00      	nop
    return;
 800d674:	e239      	b.n	800daea <HAL_UART_IRQHandler+0x722>
 800d676:	bf00      	nop
 800d678:	10000001 	.word	0x10000001
 800d67c:	04000120 	.word	0x04000120
 800d680:	0800f0c9 	.word	0x0800f0c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d688:	2b01      	cmp	r3, #1
 800d68a:	f040 81ce 	bne.w	800da2a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d692:	f003 0310 	and.w	r3, r3, #16
 800d696:	2b00      	cmp	r3, #0
 800d698:	f000 81c7 	beq.w	800da2a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6a0:	f003 0310 	and.w	r3, r3, #16
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f000 81c0 	beq.w	800da2a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2210      	movs	r2, #16
 800d6b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6bc:	2b40      	cmp	r3, #64	; 0x40
 800d6be:	f040 813b 	bne.w	800d938 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4a8b      	ldr	r2, [pc, #556]	; (800d8f8 <HAL_UART_IRQHandler+0x530>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d059      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a89      	ldr	r2, [pc, #548]	; (800d8fc <HAL_UART_IRQHandler+0x534>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d053      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a87      	ldr	r2, [pc, #540]	; (800d900 <HAL_UART_IRQHandler+0x538>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d04d      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a85      	ldr	r2, [pc, #532]	; (800d904 <HAL_UART_IRQHandler+0x53c>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d047      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4a83      	ldr	r2, [pc, #524]	; (800d908 <HAL_UART_IRQHandler+0x540>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d041      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a81      	ldr	r2, [pc, #516]	; (800d90c <HAL_UART_IRQHandler+0x544>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d03b      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a7f      	ldr	r2, [pc, #508]	; (800d910 <HAL_UART_IRQHandler+0x548>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d035      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a7d      	ldr	r2, [pc, #500]	; (800d914 <HAL_UART_IRQHandler+0x54c>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d02f      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a7b      	ldr	r2, [pc, #492]	; (800d918 <HAL_UART_IRQHandler+0x550>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d029      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a79      	ldr	r2, [pc, #484]	; (800d91c <HAL_UART_IRQHandler+0x554>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d023      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a77      	ldr	r2, [pc, #476]	; (800d920 <HAL_UART_IRQHandler+0x558>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d01d      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4a75      	ldr	r2, [pc, #468]	; (800d924 <HAL_UART_IRQHandler+0x55c>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d017      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a73      	ldr	r2, [pc, #460]	; (800d928 <HAL_UART_IRQHandler+0x560>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d011      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a71      	ldr	r2, [pc, #452]	; (800d92c <HAL_UART_IRQHandler+0x564>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d00b      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a6f      	ldr	r2, [pc, #444]	; (800d930 <HAL_UART_IRQHandler+0x568>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d005      	beq.n	800d782 <HAL_UART_IRQHandler+0x3ba>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a6d      	ldr	r2, [pc, #436]	; (800d934 <HAL_UART_IRQHandler+0x56c>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d105      	bne.n	800d78e <HAL_UART_IRQHandler+0x3c6>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	e004      	b.n	800d798 <HAL_UART_IRQHandler+0x3d0>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	b29b      	uxth	r3, r3
 800d798:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d79c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f000 81a4 	beq.w	800daee <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	f080 819c 	bcs.w	800daee <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d7bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7c4:	69db      	ldr	r3, [r3, #28]
 800d7c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7ca:	f000 8086 	beq.w	800d8da <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d7da:	e853 3f00 	ldrex	r3, [r3]
 800d7de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d7e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d7e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d7f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d7fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d800:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d804:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d808:	e841 2300 	strex	r3, r2, [r1]
 800d80c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1da      	bne.n	800d7ce <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	3308      	adds	r3, #8
 800d81e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d822:	e853 3f00 	ldrex	r3, [r3]
 800d826:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d82a:	f023 0301 	bic.w	r3, r3, #1
 800d82e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	3308      	adds	r3, #8
 800d838:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d83c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d840:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d842:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d844:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d848:	e841 2300 	strex	r3, r2, [r1]
 800d84c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d84e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d850:	2b00      	cmp	r3, #0
 800d852:	d1e1      	bne.n	800d818 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	3308      	adds	r3, #8
 800d85a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d85e:	e853 3f00 	ldrex	r3, [r3]
 800d862:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d86a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3308      	adds	r3, #8
 800d874:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d878:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d87a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d87e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d880:	e841 2300 	strex	r3, r2, [r1]
 800d884:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e3      	bne.n	800d854 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2220      	movs	r2, #32
 800d890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8a2:	e853 3f00 	ldrex	r3, [r3]
 800d8a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d8a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8aa:	f023 0310 	bic.w	r3, r3, #16
 800d8ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d8be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8c4:	e841 2300 	strex	r3, r2, [r1]
 800d8c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d8ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d1e4      	bne.n	800d89a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7f9 f9a1 	bl	8006c1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f926 	bl	800db40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d8f4:	e0fb      	b.n	800daee <HAL_UART_IRQHandler+0x726>
 800d8f6:	bf00      	nop
 800d8f8:	40020010 	.word	0x40020010
 800d8fc:	40020028 	.word	0x40020028
 800d900:	40020040 	.word	0x40020040
 800d904:	40020058 	.word	0x40020058
 800d908:	40020070 	.word	0x40020070
 800d90c:	40020088 	.word	0x40020088
 800d910:	400200a0 	.word	0x400200a0
 800d914:	400200b8 	.word	0x400200b8
 800d918:	40020410 	.word	0x40020410
 800d91c:	40020428 	.word	0x40020428
 800d920:	40020440 	.word	0x40020440
 800d924:	40020458 	.word	0x40020458
 800d928:	40020470 	.word	0x40020470
 800d92c:	40020488 	.word	0x40020488
 800d930:	400204a0 	.word	0x400204a0
 800d934:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d944:	b29b      	uxth	r3, r3
 800d946:	1ad3      	subs	r3, r2, r3
 800d948:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d952:	b29b      	uxth	r3, r3
 800d954:	2b00      	cmp	r3, #0
 800d956:	f000 80cc 	beq.w	800daf2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d95a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f000 80c7 	beq.w	800daf2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96c:	e853 3f00 	ldrex	r3, [r3]
 800d970:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d978:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	461a      	mov	r2, r3
 800d982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d986:	647b      	str	r3, [r7, #68]	; 0x44
 800d988:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d98a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d98c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d98e:	e841 2300 	strex	r3, r2, [r1]
 800d992:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1e4      	bne.n	800d964 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	3308      	adds	r3, #8
 800d9a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a4:	e853 3f00 	ldrex	r3, [r3]
 800d9a8:	623b      	str	r3, [r7, #32]
   return(result);
 800d9aa:	6a3a      	ldr	r2, [r7, #32]
 800d9ac:	4b54      	ldr	r3, [pc, #336]	; (800db00 <HAL_UART_IRQHandler+0x738>)
 800d9ae:	4013      	ands	r3, r2
 800d9b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	3308      	adds	r3, #8
 800d9ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d9be:	633a      	str	r2, [r7, #48]	; 0x30
 800d9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9c6:	e841 2300 	strex	r3, r2, [r1]
 800d9ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1e3      	bne.n	800d99a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2220      	movs	r2, #32
 800d9d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	e853 3f00 	ldrex	r3, [r3]
 800d9f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f023 0310 	bic.w	r3, r3, #16
 800d9fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	461a      	mov	r2, r3
 800da04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800da08:	61fb      	str	r3, [r7, #28]
 800da0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da0c:	69b9      	ldr	r1, [r7, #24]
 800da0e:	69fa      	ldr	r2, [r7, #28]
 800da10:	e841 2300 	strex	r3, r2, [r1]
 800da14:	617b      	str	r3, [r7, #20]
   return(result);
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d1e4      	bne.n	800d9e6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800da20:	4619      	mov	r1, r3
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f88c 	bl	800db40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da28:	e063      	b.n	800daf2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800da2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00e      	beq.n	800da54 <HAL_UART_IRQHandler+0x68c>
 800da36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d008      	beq.n	800da54 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800da4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f001 fb7c 	bl	800f14a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da52:	e051      	b.n	800daf8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800da54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d014      	beq.n	800da8a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800da60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d105      	bne.n	800da78 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800da6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da74:	2b00      	cmp	r3, #0
 800da76:	d008      	beq.n	800da8a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d03a      	beq.n	800daf6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	4798      	blx	r3
    }
    return;
 800da88:	e035      	b.n	800daf6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800da8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da92:	2b00      	cmp	r3, #0
 800da94:	d009      	beq.n	800daaa <HAL_UART_IRQHandler+0x6e2>
 800da96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d003      	beq.n	800daaa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f001 fb26 	bl	800f0f4 <UART_EndTransmit_IT>
    return;
 800daa8:	e026      	b.n	800daf8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800daaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800daae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d009      	beq.n	800daca <HAL_UART_IRQHandler+0x702>
 800dab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f001 fb55 	bl	800f172 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dac8:	e016      	b.n	800daf8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800daca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d010      	beq.n	800daf8 <HAL_UART_IRQHandler+0x730>
 800dad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	da0c      	bge.n	800daf8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f001 fb3d 	bl	800f15e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dae4:	e008      	b.n	800daf8 <HAL_UART_IRQHandler+0x730>
      return;
 800dae6:	bf00      	nop
 800dae8:	e006      	b.n	800daf8 <HAL_UART_IRQHandler+0x730>
    return;
 800daea:	bf00      	nop
 800daec:	e004      	b.n	800daf8 <HAL_UART_IRQHandler+0x730>
      return;
 800daee:	bf00      	nop
 800daf0:	e002      	b.n	800daf8 <HAL_UART_IRQHandler+0x730>
      return;
 800daf2:	bf00      	nop
 800daf4:	e000      	b.n	800daf8 <HAL_UART_IRQHandler+0x730>
    return;
 800daf6:	bf00      	nop
  }
}
 800daf8:	37e8      	adds	r7, #232	; 0xe8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	effffffe 	.word	0xeffffffe

0800db04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800db34:	bf00      	nop
 800db36:	370c      	adds	r7, #12
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800db4c:	bf00      	nop
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db5c:	b092      	sub	sp, #72	; 0x48
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800db62:	2300      	movs	r3, #0
 800db64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	689a      	ldr	r2, [r3, #8]
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	691b      	ldr	r3, [r3, #16]
 800db70:	431a      	orrs	r2, r3
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	431a      	orrs	r2, r3
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	69db      	ldr	r3, [r3, #28]
 800db7c:	4313      	orrs	r3, r2
 800db7e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	4bbe      	ldr	r3, [pc, #760]	; (800de80 <UART_SetConfig+0x328>)
 800db88:	4013      	ands	r3, r2
 800db8a:	697a      	ldr	r2, [r7, #20]
 800db8c:	6812      	ldr	r2, [r2, #0]
 800db8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db90:	430b      	orrs	r3, r1
 800db92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	68da      	ldr	r2, [r3, #12]
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	430a      	orrs	r2, r1
 800dba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	699b      	ldr	r3, [r3, #24]
 800dbae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4ab3      	ldr	r2, [pc, #716]	; (800de84 <UART_SetConfig+0x32c>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d004      	beq.n	800dbc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	6a1b      	ldr	r3, [r3, #32]
 800dbbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	689a      	ldr	r2, [r3, #8]
 800dbca:	4baf      	ldr	r3, [pc, #700]	; (800de88 <UART_SetConfig+0x330>)
 800dbcc:	4013      	ands	r3, r2
 800dbce:	697a      	ldr	r2, [r7, #20]
 800dbd0:	6812      	ldr	r2, [r2, #0]
 800dbd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbd4:	430b      	orrs	r3, r1
 800dbd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbde:	f023 010f 	bic.w	r1, r3, #15
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	430a      	orrs	r2, r1
 800dbec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4aa6      	ldr	r2, [pc, #664]	; (800de8c <UART_SetConfig+0x334>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d177      	bne.n	800dce8 <UART_SetConfig+0x190>
 800dbf8:	4ba5      	ldr	r3, [pc, #660]	; (800de90 <UART_SetConfig+0x338>)
 800dbfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc00:	2b28      	cmp	r3, #40	; 0x28
 800dc02:	d86d      	bhi.n	800dce0 <UART_SetConfig+0x188>
 800dc04:	a201      	add	r2, pc, #4	; (adr r2, 800dc0c <UART_SetConfig+0xb4>)
 800dc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc0a:	bf00      	nop
 800dc0c:	0800dcb1 	.word	0x0800dcb1
 800dc10:	0800dce1 	.word	0x0800dce1
 800dc14:	0800dce1 	.word	0x0800dce1
 800dc18:	0800dce1 	.word	0x0800dce1
 800dc1c:	0800dce1 	.word	0x0800dce1
 800dc20:	0800dce1 	.word	0x0800dce1
 800dc24:	0800dce1 	.word	0x0800dce1
 800dc28:	0800dce1 	.word	0x0800dce1
 800dc2c:	0800dcb9 	.word	0x0800dcb9
 800dc30:	0800dce1 	.word	0x0800dce1
 800dc34:	0800dce1 	.word	0x0800dce1
 800dc38:	0800dce1 	.word	0x0800dce1
 800dc3c:	0800dce1 	.word	0x0800dce1
 800dc40:	0800dce1 	.word	0x0800dce1
 800dc44:	0800dce1 	.word	0x0800dce1
 800dc48:	0800dce1 	.word	0x0800dce1
 800dc4c:	0800dcc1 	.word	0x0800dcc1
 800dc50:	0800dce1 	.word	0x0800dce1
 800dc54:	0800dce1 	.word	0x0800dce1
 800dc58:	0800dce1 	.word	0x0800dce1
 800dc5c:	0800dce1 	.word	0x0800dce1
 800dc60:	0800dce1 	.word	0x0800dce1
 800dc64:	0800dce1 	.word	0x0800dce1
 800dc68:	0800dce1 	.word	0x0800dce1
 800dc6c:	0800dcc9 	.word	0x0800dcc9
 800dc70:	0800dce1 	.word	0x0800dce1
 800dc74:	0800dce1 	.word	0x0800dce1
 800dc78:	0800dce1 	.word	0x0800dce1
 800dc7c:	0800dce1 	.word	0x0800dce1
 800dc80:	0800dce1 	.word	0x0800dce1
 800dc84:	0800dce1 	.word	0x0800dce1
 800dc88:	0800dce1 	.word	0x0800dce1
 800dc8c:	0800dcd1 	.word	0x0800dcd1
 800dc90:	0800dce1 	.word	0x0800dce1
 800dc94:	0800dce1 	.word	0x0800dce1
 800dc98:	0800dce1 	.word	0x0800dce1
 800dc9c:	0800dce1 	.word	0x0800dce1
 800dca0:	0800dce1 	.word	0x0800dce1
 800dca4:	0800dce1 	.word	0x0800dce1
 800dca8:	0800dce1 	.word	0x0800dce1
 800dcac:	0800dcd9 	.word	0x0800dcd9
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb6:	e326      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dcb8:	2304      	movs	r3, #4
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcbe:	e322      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dcc0:	2308      	movs	r3, #8
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e31e      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dcc8:	2310      	movs	r3, #16
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcce:	e31a      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dcd0:	2320      	movs	r3, #32
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd6:	e316      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dcd8:	2340      	movs	r3, #64	; 0x40
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcde:	e312      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dce0:	2380      	movs	r3, #128	; 0x80
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce6:	e30e      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a69      	ldr	r2, [pc, #420]	; (800de94 <UART_SetConfig+0x33c>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d130      	bne.n	800dd54 <UART_SetConfig+0x1fc>
 800dcf2:	4b67      	ldr	r3, [pc, #412]	; (800de90 <UART_SetConfig+0x338>)
 800dcf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcf6:	f003 0307 	and.w	r3, r3, #7
 800dcfa:	2b05      	cmp	r3, #5
 800dcfc:	d826      	bhi.n	800dd4c <UART_SetConfig+0x1f4>
 800dcfe:	a201      	add	r2, pc, #4	; (adr r2, 800dd04 <UART_SetConfig+0x1ac>)
 800dd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd04:	0800dd1d 	.word	0x0800dd1d
 800dd08:	0800dd25 	.word	0x0800dd25
 800dd0c:	0800dd2d 	.word	0x0800dd2d
 800dd10:	0800dd35 	.word	0x0800dd35
 800dd14:	0800dd3d 	.word	0x0800dd3d
 800dd18:	0800dd45 	.word	0x0800dd45
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd22:	e2f0      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dd24:	2304      	movs	r3, #4
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2a:	e2ec      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dd2c:	2308      	movs	r3, #8
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd32:	e2e8      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dd34:	2310      	movs	r3, #16
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3a:	e2e4      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dd3c:	2320      	movs	r3, #32
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd42:	e2e0      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dd44:	2340      	movs	r3, #64	; 0x40
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4a:	e2dc      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dd4c:	2380      	movs	r3, #128	; 0x80
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd52:	e2d8      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a4f      	ldr	r2, [pc, #316]	; (800de98 <UART_SetConfig+0x340>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d130      	bne.n	800ddc0 <UART_SetConfig+0x268>
 800dd5e:	4b4c      	ldr	r3, [pc, #304]	; (800de90 <UART_SetConfig+0x338>)
 800dd60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd62:	f003 0307 	and.w	r3, r3, #7
 800dd66:	2b05      	cmp	r3, #5
 800dd68:	d826      	bhi.n	800ddb8 <UART_SetConfig+0x260>
 800dd6a:	a201      	add	r2, pc, #4	; (adr r2, 800dd70 <UART_SetConfig+0x218>)
 800dd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd70:	0800dd89 	.word	0x0800dd89
 800dd74:	0800dd91 	.word	0x0800dd91
 800dd78:	0800dd99 	.word	0x0800dd99
 800dd7c:	0800dda1 	.word	0x0800dda1
 800dd80:	0800dda9 	.word	0x0800dda9
 800dd84:	0800ddb1 	.word	0x0800ddb1
 800dd88:	2300      	movs	r3, #0
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8e:	e2ba      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dd90:	2304      	movs	r3, #4
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd96:	e2b6      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dd98:	2308      	movs	r3, #8
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9e:	e2b2      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dda0:	2310      	movs	r3, #16
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dda6:	e2ae      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dda8:	2320      	movs	r3, #32
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddae:	e2aa      	b.n	800e306 <UART_SetConfig+0x7ae>
 800ddb0:	2340      	movs	r3, #64	; 0x40
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb6:	e2a6      	b.n	800e306 <UART_SetConfig+0x7ae>
 800ddb8:	2380      	movs	r3, #128	; 0x80
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddbe:	e2a2      	b.n	800e306 <UART_SetConfig+0x7ae>
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a35      	ldr	r2, [pc, #212]	; (800de9c <UART_SetConfig+0x344>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d130      	bne.n	800de2c <UART_SetConfig+0x2d4>
 800ddca:	4b31      	ldr	r3, [pc, #196]	; (800de90 <UART_SetConfig+0x338>)
 800ddcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddce:	f003 0307 	and.w	r3, r3, #7
 800ddd2:	2b05      	cmp	r3, #5
 800ddd4:	d826      	bhi.n	800de24 <UART_SetConfig+0x2cc>
 800ddd6:	a201      	add	r2, pc, #4	; (adr r2, 800dddc <UART_SetConfig+0x284>)
 800ddd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dddc:	0800ddf5 	.word	0x0800ddf5
 800dde0:	0800ddfd 	.word	0x0800ddfd
 800dde4:	0800de05 	.word	0x0800de05
 800dde8:	0800de0d 	.word	0x0800de0d
 800ddec:	0800de15 	.word	0x0800de15
 800ddf0:	0800de1d 	.word	0x0800de1d
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfa:	e284      	b.n	800e306 <UART_SetConfig+0x7ae>
 800ddfc:	2304      	movs	r3, #4
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de02:	e280      	b.n	800e306 <UART_SetConfig+0x7ae>
 800de04:	2308      	movs	r3, #8
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de0a:	e27c      	b.n	800e306 <UART_SetConfig+0x7ae>
 800de0c:	2310      	movs	r3, #16
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de12:	e278      	b.n	800e306 <UART_SetConfig+0x7ae>
 800de14:	2320      	movs	r3, #32
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de1a:	e274      	b.n	800e306 <UART_SetConfig+0x7ae>
 800de1c:	2340      	movs	r3, #64	; 0x40
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de22:	e270      	b.n	800e306 <UART_SetConfig+0x7ae>
 800de24:	2380      	movs	r3, #128	; 0x80
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2a:	e26c      	b.n	800e306 <UART_SetConfig+0x7ae>
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a1b      	ldr	r2, [pc, #108]	; (800dea0 <UART_SetConfig+0x348>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d142      	bne.n	800debc <UART_SetConfig+0x364>
 800de36:	4b16      	ldr	r3, [pc, #88]	; (800de90 <UART_SetConfig+0x338>)
 800de38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de3a:	f003 0307 	and.w	r3, r3, #7
 800de3e:	2b05      	cmp	r3, #5
 800de40:	d838      	bhi.n	800deb4 <UART_SetConfig+0x35c>
 800de42:	a201      	add	r2, pc, #4	; (adr r2, 800de48 <UART_SetConfig+0x2f0>)
 800de44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de48:	0800de61 	.word	0x0800de61
 800de4c:	0800de69 	.word	0x0800de69
 800de50:	0800de71 	.word	0x0800de71
 800de54:	0800de79 	.word	0x0800de79
 800de58:	0800dea5 	.word	0x0800dea5
 800de5c:	0800dead 	.word	0x0800dead
 800de60:	2300      	movs	r3, #0
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e24e      	b.n	800e306 <UART_SetConfig+0x7ae>
 800de68:	2304      	movs	r3, #4
 800de6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6e:	e24a      	b.n	800e306 <UART_SetConfig+0x7ae>
 800de70:	2308      	movs	r3, #8
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de76:	e246      	b.n	800e306 <UART_SetConfig+0x7ae>
 800de78:	2310      	movs	r3, #16
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de7e:	e242      	b.n	800e306 <UART_SetConfig+0x7ae>
 800de80:	cfff69f3 	.word	0xcfff69f3
 800de84:	58000c00 	.word	0x58000c00
 800de88:	11fff4ff 	.word	0x11fff4ff
 800de8c:	40011000 	.word	0x40011000
 800de90:	58024400 	.word	0x58024400
 800de94:	40004400 	.word	0x40004400
 800de98:	40004800 	.word	0x40004800
 800de9c:	40004c00 	.word	0x40004c00
 800dea0:	40005000 	.word	0x40005000
 800dea4:	2320      	movs	r3, #32
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deaa:	e22c      	b.n	800e306 <UART_SetConfig+0x7ae>
 800deac:	2340      	movs	r3, #64	; 0x40
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e228      	b.n	800e306 <UART_SetConfig+0x7ae>
 800deb4:	2380      	movs	r3, #128	; 0x80
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e224      	b.n	800e306 <UART_SetConfig+0x7ae>
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4ab1      	ldr	r2, [pc, #708]	; (800e188 <UART_SetConfig+0x630>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d176      	bne.n	800dfb4 <UART_SetConfig+0x45c>
 800dec6:	4bb1      	ldr	r3, [pc, #708]	; (800e18c <UART_SetConfig+0x634>)
 800dec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dece:	2b28      	cmp	r3, #40	; 0x28
 800ded0:	d86c      	bhi.n	800dfac <UART_SetConfig+0x454>
 800ded2:	a201      	add	r2, pc, #4	; (adr r2, 800ded8 <UART_SetConfig+0x380>)
 800ded4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded8:	0800df7d 	.word	0x0800df7d
 800dedc:	0800dfad 	.word	0x0800dfad
 800dee0:	0800dfad 	.word	0x0800dfad
 800dee4:	0800dfad 	.word	0x0800dfad
 800dee8:	0800dfad 	.word	0x0800dfad
 800deec:	0800dfad 	.word	0x0800dfad
 800def0:	0800dfad 	.word	0x0800dfad
 800def4:	0800dfad 	.word	0x0800dfad
 800def8:	0800df85 	.word	0x0800df85
 800defc:	0800dfad 	.word	0x0800dfad
 800df00:	0800dfad 	.word	0x0800dfad
 800df04:	0800dfad 	.word	0x0800dfad
 800df08:	0800dfad 	.word	0x0800dfad
 800df0c:	0800dfad 	.word	0x0800dfad
 800df10:	0800dfad 	.word	0x0800dfad
 800df14:	0800dfad 	.word	0x0800dfad
 800df18:	0800df8d 	.word	0x0800df8d
 800df1c:	0800dfad 	.word	0x0800dfad
 800df20:	0800dfad 	.word	0x0800dfad
 800df24:	0800dfad 	.word	0x0800dfad
 800df28:	0800dfad 	.word	0x0800dfad
 800df2c:	0800dfad 	.word	0x0800dfad
 800df30:	0800dfad 	.word	0x0800dfad
 800df34:	0800dfad 	.word	0x0800dfad
 800df38:	0800df95 	.word	0x0800df95
 800df3c:	0800dfad 	.word	0x0800dfad
 800df40:	0800dfad 	.word	0x0800dfad
 800df44:	0800dfad 	.word	0x0800dfad
 800df48:	0800dfad 	.word	0x0800dfad
 800df4c:	0800dfad 	.word	0x0800dfad
 800df50:	0800dfad 	.word	0x0800dfad
 800df54:	0800dfad 	.word	0x0800dfad
 800df58:	0800df9d 	.word	0x0800df9d
 800df5c:	0800dfad 	.word	0x0800dfad
 800df60:	0800dfad 	.word	0x0800dfad
 800df64:	0800dfad 	.word	0x0800dfad
 800df68:	0800dfad 	.word	0x0800dfad
 800df6c:	0800dfad 	.word	0x0800dfad
 800df70:	0800dfad 	.word	0x0800dfad
 800df74:	0800dfad 	.word	0x0800dfad
 800df78:	0800dfa5 	.word	0x0800dfa5
 800df7c:	2301      	movs	r3, #1
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df82:	e1c0      	b.n	800e306 <UART_SetConfig+0x7ae>
 800df84:	2304      	movs	r3, #4
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8a:	e1bc      	b.n	800e306 <UART_SetConfig+0x7ae>
 800df8c:	2308      	movs	r3, #8
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e1b8      	b.n	800e306 <UART_SetConfig+0x7ae>
 800df94:	2310      	movs	r3, #16
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e1b4      	b.n	800e306 <UART_SetConfig+0x7ae>
 800df9c:	2320      	movs	r3, #32
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa2:	e1b0      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dfa4:	2340      	movs	r3, #64	; 0x40
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfaa:	e1ac      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dfac:	2380      	movs	r3, #128	; 0x80
 800dfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb2:	e1a8      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a75      	ldr	r2, [pc, #468]	; (800e190 <UART_SetConfig+0x638>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d130      	bne.n	800e020 <UART_SetConfig+0x4c8>
 800dfbe:	4b73      	ldr	r3, [pc, #460]	; (800e18c <UART_SetConfig+0x634>)
 800dfc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfc2:	f003 0307 	and.w	r3, r3, #7
 800dfc6:	2b05      	cmp	r3, #5
 800dfc8:	d826      	bhi.n	800e018 <UART_SetConfig+0x4c0>
 800dfca:	a201      	add	r2, pc, #4	; (adr r2, 800dfd0 <UART_SetConfig+0x478>)
 800dfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd0:	0800dfe9 	.word	0x0800dfe9
 800dfd4:	0800dff1 	.word	0x0800dff1
 800dfd8:	0800dff9 	.word	0x0800dff9
 800dfdc:	0800e001 	.word	0x0800e001
 800dfe0:	0800e009 	.word	0x0800e009
 800dfe4:	0800e011 	.word	0x0800e011
 800dfe8:	2300      	movs	r3, #0
 800dfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfee:	e18a      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dff0:	2304      	movs	r3, #4
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff6:	e186      	b.n	800e306 <UART_SetConfig+0x7ae>
 800dff8:	2308      	movs	r3, #8
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffe:	e182      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e000:	2310      	movs	r3, #16
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e006:	e17e      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e008:	2320      	movs	r3, #32
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00e:	e17a      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e010:	2340      	movs	r3, #64	; 0x40
 800e012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e016:	e176      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e018:	2380      	movs	r3, #128	; 0x80
 800e01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01e:	e172      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4a5b      	ldr	r2, [pc, #364]	; (800e194 <UART_SetConfig+0x63c>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d130      	bne.n	800e08c <UART_SetConfig+0x534>
 800e02a:	4b58      	ldr	r3, [pc, #352]	; (800e18c <UART_SetConfig+0x634>)
 800e02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e02e:	f003 0307 	and.w	r3, r3, #7
 800e032:	2b05      	cmp	r3, #5
 800e034:	d826      	bhi.n	800e084 <UART_SetConfig+0x52c>
 800e036:	a201      	add	r2, pc, #4	; (adr r2, 800e03c <UART_SetConfig+0x4e4>)
 800e038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e03c:	0800e055 	.word	0x0800e055
 800e040:	0800e05d 	.word	0x0800e05d
 800e044:	0800e065 	.word	0x0800e065
 800e048:	0800e06d 	.word	0x0800e06d
 800e04c:	0800e075 	.word	0x0800e075
 800e050:	0800e07d 	.word	0x0800e07d
 800e054:	2300      	movs	r3, #0
 800e056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05a:	e154      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e05c:	2304      	movs	r3, #4
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e062:	e150      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e064:	2308      	movs	r3, #8
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06a:	e14c      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e06c:	2310      	movs	r3, #16
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e072:	e148      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e074:	2320      	movs	r3, #32
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07a:	e144      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e07c:	2340      	movs	r3, #64	; 0x40
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e082:	e140      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e084:	2380      	movs	r3, #128	; 0x80
 800e086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08a:	e13c      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a41      	ldr	r2, [pc, #260]	; (800e198 <UART_SetConfig+0x640>)
 800e092:	4293      	cmp	r3, r2
 800e094:	f040 8082 	bne.w	800e19c <UART_SetConfig+0x644>
 800e098:	4b3c      	ldr	r3, [pc, #240]	; (800e18c <UART_SetConfig+0x634>)
 800e09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e09c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0a0:	2b28      	cmp	r3, #40	; 0x28
 800e0a2:	d86d      	bhi.n	800e180 <UART_SetConfig+0x628>
 800e0a4:	a201      	add	r2, pc, #4	; (adr r2, 800e0ac <UART_SetConfig+0x554>)
 800e0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0aa:	bf00      	nop
 800e0ac:	0800e151 	.word	0x0800e151
 800e0b0:	0800e181 	.word	0x0800e181
 800e0b4:	0800e181 	.word	0x0800e181
 800e0b8:	0800e181 	.word	0x0800e181
 800e0bc:	0800e181 	.word	0x0800e181
 800e0c0:	0800e181 	.word	0x0800e181
 800e0c4:	0800e181 	.word	0x0800e181
 800e0c8:	0800e181 	.word	0x0800e181
 800e0cc:	0800e159 	.word	0x0800e159
 800e0d0:	0800e181 	.word	0x0800e181
 800e0d4:	0800e181 	.word	0x0800e181
 800e0d8:	0800e181 	.word	0x0800e181
 800e0dc:	0800e181 	.word	0x0800e181
 800e0e0:	0800e181 	.word	0x0800e181
 800e0e4:	0800e181 	.word	0x0800e181
 800e0e8:	0800e181 	.word	0x0800e181
 800e0ec:	0800e161 	.word	0x0800e161
 800e0f0:	0800e181 	.word	0x0800e181
 800e0f4:	0800e181 	.word	0x0800e181
 800e0f8:	0800e181 	.word	0x0800e181
 800e0fc:	0800e181 	.word	0x0800e181
 800e100:	0800e181 	.word	0x0800e181
 800e104:	0800e181 	.word	0x0800e181
 800e108:	0800e181 	.word	0x0800e181
 800e10c:	0800e169 	.word	0x0800e169
 800e110:	0800e181 	.word	0x0800e181
 800e114:	0800e181 	.word	0x0800e181
 800e118:	0800e181 	.word	0x0800e181
 800e11c:	0800e181 	.word	0x0800e181
 800e120:	0800e181 	.word	0x0800e181
 800e124:	0800e181 	.word	0x0800e181
 800e128:	0800e181 	.word	0x0800e181
 800e12c:	0800e171 	.word	0x0800e171
 800e130:	0800e181 	.word	0x0800e181
 800e134:	0800e181 	.word	0x0800e181
 800e138:	0800e181 	.word	0x0800e181
 800e13c:	0800e181 	.word	0x0800e181
 800e140:	0800e181 	.word	0x0800e181
 800e144:	0800e181 	.word	0x0800e181
 800e148:	0800e181 	.word	0x0800e181
 800e14c:	0800e179 	.word	0x0800e179
 800e150:	2301      	movs	r3, #1
 800e152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e156:	e0d6      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e158:	2304      	movs	r3, #4
 800e15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15e:	e0d2      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e160:	2308      	movs	r3, #8
 800e162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e166:	e0ce      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e168:	2310      	movs	r3, #16
 800e16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16e:	e0ca      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e170:	2320      	movs	r3, #32
 800e172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e176:	e0c6      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e178:	2340      	movs	r3, #64	; 0x40
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17e:	e0c2      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e180:	2380      	movs	r3, #128	; 0x80
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e0be      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e188:	40011400 	.word	0x40011400
 800e18c:	58024400 	.word	0x58024400
 800e190:	40007800 	.word	0x40007800
 800e194:	40007c00 	.word	0x40007c00
 800e198:	40011800 	.word	0x40011800
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4aad      	ldr	r2, [pc, #692]	; (800e458 <UART_SetConfig+0x900>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d176      	bne.n	800e294 <UART_SetConfig+0x73c>
 800e1a6:	4bad      	ldr	r3, [pc, #692]	; (800e45c <UART_SetConfig+0x904>)
 800e1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e1ae:	2b28      	cmp	r3, #40	; 0x28
 800e1b0:	d86c      	bhi.n	800e28c <UART_SetConfig+0x734>
 800e1b2:	a201      	add	r2, pc, #4	; (adr r2, 800e1b8 <UART_SetConfig+0x660>)
 800e1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b8:	0800e25d 	.word	0x0800e25d
 800e1bc:	0800e28d 	.word	0x0800e28d
 800e1c0:	0800e28d 	.word	0x0800e28d
 800e1c4:	0800e28d 	.word	0x0800e28d
 800e1c8:	0800e28d 	.word	0x0800e28d
 800e1cc:	0800e28d 	.word	0x0800e28d
 800e1d0:	0800e28d 	.word	0x0800e28d
 800e1d4:	0800e28d 	.word	0x0800e28d
 800e1d8:	0800e265 	.word	0x0800e265
 800e1dc:	0800e28d 	.word	0x0800e28d
 800e1e0:	0800e28d 	.word	0x0800e28d
 800e1e4:	0800e28d 	.word	0x0800e28d
 800e1e8:	0800e28d 	.word	0x0800e28d
 800e1ec:	0800e28d 	.word	0x0800e28d
 800e1f0:	0800e28d 	.word	0x0800e28d
 800e1f4:	0800e28d 	.word	0x0800e28d
 800e1f8:	0800e26d 	.word	0x0800e26d
 800e1fc:	0800e28d 	.word	0x0800e28d
 800e200:	0800e28d 	.word	0x0800e28d
 800e204:	0800e28d 	.word	0x0800e28d
 800e208:	0800e28d 	.word	0x0800e28d
 800e20c:	0800e28d 	.word	0x0800e28d
 800e210:	0800e28d 	.word	0x0800e28d
 800e214:	0800e28d 	.word	0x0800e28d
 800e218:	0800e275 	.word	0x0800e275
 800e21c:	0800e28d 	.word	0x0800e28d
 800e220:	0800e28d 	.word	0x0800e28d
 800e224:	0800e28d 	.word	0x0800e28d
 800e228:	0800e28d 	.word	0x0800e28d
 800e22c:	0800e28d 	.word	0x0800e28d
 800e230:	0800e28d 	.word	0x0800e28d
 800e234:	0800e28d 	.word	0x0800e28d
 800e238:	0800e27d 	.word	0x0800e27d
 800e23c:	0800e28d 	.word	0x0800e28d
 800e240:	0800e28d 	.word	0x0800e28d
 800e244:	0800e28d 	.word	0x0800e28d
 800e248:	0800e28d 	.word	0x0800e28d
 800e24c:	0800e28d 	.word	0x0800e28d
 800e250:	0800e28d 	.word	0x0800e28d
 800e254:	0800e28d 	.word	0x0800e28d
 800e258:	0800e285 	.word	0x0800e285
 800e25c:	2301      	movs	r3, #1
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e050      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e264:	2304      	movs	r3, #4
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e04c      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e26c:	2308      	movs	r3, #8
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e272:	e048      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e274:	2310      	movs	r3, #16
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27a:	e044      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e27c:	2320      	movs	r3, #32
 800e27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e282:	e040      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e284:	2340      	movs	r3, #64	; 0x40
 800e286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28a:	e03c      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e28c:	2380      	movs	r3, #128	; 0x80
 800e28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e292:	e038      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a71      	ldr	r2, [pc, #452]	; (800e460 <UART_SetConfig+0x908>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d130      	bne.n	800e300 <UART_SetConfig+0x7a8>
 800e29e:	4b6f      	ldr	r3, [pc, #444]	; (800e45c <UART_SetConfig+0x904>)
 800e2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2a2:	f003 0307 	and.w	r3, r3, #7
 800e2a6:	2b05      	cmp	r3, #5
 800e2a8:	d826      	bhi.n	800e2f8 <UART_SetConfig+0x7a0>
 800e2aa:	a201      	add	r2, pc, #4	; (adr r2, 800e2b0 <UART_SetConfig+0x758>)
 800e2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b0:	0800e2c9 	.word	0x0800e2c9
 800e2b4:	0800e2d1 	.word	0x0800e2d1
 800e2b8:	0800e2d9 	.word	0x0800e2d9
 800e2bc:	0800e2e1 	.word	0x0800e2e1
 800e2c0:	0800e2e9 	.word	0x0800e2e9
 800e2c4:	0800e2f1 	.word	0x0800e2f1
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ce:	e01a      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e2d0:	2304      	movs	r3, #4
 800e2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d6:	e016      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e2d8:	2308      	movs	r3, #8
 800e2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2de:	e012      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e2e0:	2310      	movs	r3, #16
 800e2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e6:	e00e      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e2e8:	2320      	movs	r3, #32
 800e2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ee:	e00a      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e2f0:	2340      	movs	r3, #64	; 0x40
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f6:	e006      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e2f8:	2380      	movs	r3, #128	; 0x80
 800e2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fe:	e002      	b.n	800e306 <UART_SetConfig+0x7ae>
 800e300:	2380      	movs	r3, #128	; 0x80
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a55      	ldr	r2, [pc, #340]	; (800e460 <UART_SetConfig+0x908>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	f040 80f8 	bne.w	800e502 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e312:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e316:	2b20      	cmp	r3, #32
 800e318:	dc46      	bgt.n	800e3a8 <UART_SetConfig+0x850>
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	db75      	blt.n	800e40a <UART_SetConfig+0x8b2>
 800e31e:	3b02      	subs	r3, #2
 800e320:	2b1e      	cmp	r3, #30
 800e322:	d872      	bhi.n	800e40a <UART_SetConfig+0x8b2>
 800e324:	a201      	add	r2, pc, #4	; (adr r2, 800e32c <UART_SetConfig+0x7d4>)
 800e326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e32a:	bf00      	nop
 800e32c:	0800e3af 	.word	0x0800e3af
 800e330:	0800e40b 	.word	0x0800e40b
 800e334:	0800e3b7 	.word	0x0800e3b7
 800e338:	0800e40b 	.word	0x0800e40b
 800e33c:	0800e40b 	.word	0x0800e40b
 800e340:	0800e40b 	.word	0x0800e40b
 800e344:	0800e3c7 	.word	0x0800e3c7
 800e348:	0800e40b 	.word	0x0800e40b
 800e34c:	0800e40b 	.word	0x0800e40b
 800e350:	0800e40b 	.word	0x0800e40b
 800e354:	0800e40b 	.word	0x0800e40b
 800e358:	0800e40b 	.word	0x0800e40b
 800e35c:	0800e40b 	.word	0x0800e40b
 800e360:	0800e40b 	.word	0x0800e40b
 800e364:	0800e3d7 	.word	0x0800e3d7
 800e368:	0800e40b 	.word	0x0800e40b
 800e36c:	0800e40b 	.word	0x0800e40b
 800e370:	0800e40b 	.word	0x0800e40b
 800e374:	0800e40b 	.word	0x0800e40b
 800e378:	0800e40b 	.word	0x0800e40b
 800e37c:	0800e40b 	.word	0x0800e40b
 800e380:	0800e40b 	.word	0x0800e40b
 800e384:	0800e40b 	.word	0x0800e40b
 800e388:	0800e40b 	.word	0x0800e40b
 800e38c:	0800e40b 	.word	0x0800e40b
 800e390:	0800e40b 	.word	0x0800e40b
 800e394:	0800e40b 	.word	0x0800e40b
 800e398:	0800e40b 	.word	0x0800e40b
 800e39c:	0800e40b 	.word	0x0800e40b
 800e3a0:	0800e40b 	.word	0x0800e40b
 800e3a4:	0800e3fd 	.word	0x0800e3fd
 800e3a8:	2b40      	cmp	r3, #64	; 0x40
 800e3aa:	d02a      	beq.n	800e402 <UART_SetConfig+0x8aa>
 800e3ac:	e02d      	b.n	800e40a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e3ae:	f7fc fe01 	bl	800afb4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e3b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3b4:	e02f      	b.n	800e416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fc fe10 	bl	800afe0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3c4:	e027      	b.n	800e416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3c6:	f107 0318 	add.w	r3, r7, #24
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fc ff5c 	bl	800b288 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3d4:	e01f      	b.n	800e416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3d6:	4b21      	ldr	r3, [pc, #132]	; (800e45c <UART_SetConfig+0x904>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f003 0320 	and.w	r3, r3, #32
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d009      	beq.n	800e3f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3e2:	4b1e      	ldr	r3, [pc, #120]	; (800e45c <UART_SetConfig+0x904>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	08db      	lsrs	r3, r3, #3
 800e3e8:	f003 0303 	and.w	r3, r3, #3
 800e3ec:	4a1d      	ldr	r2, [pc, #116]	; (800e464 <UART_SetConfig+0x90c>)
 800e3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800e3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3f4:	e00f      	b.n	800e416 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e3f6:	4b1b      	ldr	r3, [pc, #108]	; (800e464 <UART_SetConfig+0x90c>)
 800e3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3fa:	e00c      	b.n	800e416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3fc:	4b1a      	ldr	r3, [pc, #104]	; (800e468 <UART_SetConfig+0x910>)
 800e3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e400:	e009      	b.n	800e416 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e408:	e005      	b.n	800e416 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e40a:	2300      	movs	r3, #0
 800e40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e40e:	2301      	movs	r3, #1
 800e410:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e414:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f000 81ee 	beq.w	800e7fa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e422:	4a12      	ldr	r2, [pc, #72]	; (800e46c <UART_SetConfig+0x914>)
 800e424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e428:	461a      	mov	r2, r3
 800e42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e42c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e430:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	685a      	ldr	r2, [r3, #4]
 800e436:	4613      	mov	r3, r2
 800e438:	005b      	lsls	r3, r3, #1
 800e43a:	4413      	add	r3, r2
 800e43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e43e:	429a      	cmp	r2, r3
 800e440:	d305      	bcc.n	800e44e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d910      	bls.n	800e470 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e44e:	2301      	movs	r3, #1
 800e450:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e454:	e1d1      	b.n	800e7fa <UART_SetConfig+0xca2>
 800e456:	bf00      	nop
 800e458:	40011c00 	.word	0x40011c00
 800e45c:	58024400 	.word	0x58024400
 800e460:	58000c00 	.word	0x58000c00
 800e464:	03d09000 	.word	0x03d09000
 800e468:	003d0900 	.word	0x003d0900
 800e46c:	0800fa30 	.word	0x0800fa30
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e472:	2200      	movs	r2, #0
 800e474:	60bb      	str	r3, [r7, #8]
 800e476:	60fa      	str	r2, [r7, #12]
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e47c:	4ac0      	ldr	r2, [pc, #768]	; (800e780 <UART_SetConfig+0xc28>)
 800e47e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e482:	b29b      	uxth	r3, r3
 800e484:	2200      	movs	r2, #0
 800e486:	603b      	str	r3, [r7, #0]
 800e488:	607a      	str	r2, [r7, #4]
 800e48a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e48e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e492:	f7f1 ff45 	bl	8000320 <__aeabi_uldivmod>
 800e496:	4602      	mov	r2, r0
 800e498:	460b      	mov	r3, r1
 800e49a:	4610      	mov	r0, r2
 800e49c:	4619      	mov	r1, r3
 800e49e:	f04f 0200 	mov.w	r2, #0
 800e4a2:	f04f 0300 	mov.w	r3, #0
 800e4a6:	020b      	lsls	r3, r1, #8
 800e4a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e4ac:	0202      	lsls	r2, r0, #8
 800e4ae:	6979      	ldr	r1, [r7, #20]
 800e4b0:	6849      	ldr	r1, [r1, #4]
 800e4b2:	0849      	lsrs	r1, r1, #1
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	460c      	mov	r4, r1
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	eb12 0804 	adds.w	r8, r2, r4
 800e4be:	eb43 0905 	adc.w	r9, r3, r5
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	469a      	mov	sl, r3
 800e4ca:	4693      	mov	fp, r2
 800e4cc:	4652      	mov	r2, sl
 800e4ce:	465b      	mov	r3, fp
 800e4d0:	4640      	mov	r0, r8
 800e4d2:	4649      	mov	r1, r9
 800e4d4:	f7f1 ff24 	bl	8000320 <__aeabi_uldivmod>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4613      	mov	r3, r2
 800e4de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e4e6:	d308      	bcc.n	800e4fa <UART_SetConfig+0x9a2>
 800e4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4ee:	d204      	bcs.n	800e4fa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4f6:	60da      	str	r2, [r3, #12]
 800e4f8:	e17f      	b.n	800e7fa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e500:	e17b      	b.n	800e7fa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	69db      	ldr	r3, [r3, #28]
 800e506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e50a:	f040 80bd 	bne.w	800e688 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e50e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e512:	2b20      	cmp	r3, #32
 800e514:	dc48      	bgt.n	800e5a8 <UART_SetConfig+0xa50>
 800e516:	2b00      	cmp	r3, #0
 800e518:	db7b      	blt.n	800e612 <UART_SetConfig+0xaba>
 800e51a:	2b20      	cmp	r3, #32
 800e51c:	d879      	bhi.n	800e612 <UART_SetConfig+0xaba>
 800e51e:	a201      	add	r2, pc, #4	; (adr r2, 800e524 <UART_SetConfig+0x9cc>)
 800e520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e524:	0800e5af 	.word	0x0800e5af
 800e528:	0800e5b7 	.word	0x0800e5b7
 800e52c:	0800e613 	.word	0x0800e613
 800e530:	0800e613 	.word	0x0800e613
 800e534:	0800e5bf 	.word	0x0800e5bf
 800e538:	0800e613 	.word	0x0800e613
 800e53c:	0800e613 	.word	0x0800e613
 800e540:	0800e613 	.word	0x0800e613
 800e544:	0800e5cf 	.word	0x0800e5cf
 800e548:	0800e613 	.word	0x0800e613
 800e54c:	0800e613 	.word	0x0800e613
 800e550:	0800e613 	.word	0x0800e613
 800e554:	0800e613 	.word	0x0800e613
 800e558:	0800e613 	.word	0x0800e613
 800e55c:	0800e613 	.word	0x0800e613
 800e560:	0800e613 	.word	0x0800e613
 800e564:	0800e5df 	.word	0x0800e5df
 800e568:	0800e613 	.word	0x0800e613
 800e56c:	0800e613 	.word	0x0800e613
 800e570:	0800e613 	.word	0x0800e613
 800e574:	0800e613 	.word	0x0800e613
 800e578:	0800e613 	.word	0x0800e613
 800e57c:	0800e613 	.word	0x0800e613
 800e580:	0800e613 	.word	0x0800e613
 800e584:	0800e613 	.word	0x0800e613
 800e588:	0800e613 	.word	0x0800e613
 800e58c:	0800e613 	.word	0x0800e613
 800e590:	0800e613 	.word	0x0800e613
 800e594:	0800e613 	.word	0x0800e613
 800e598:	0800e613 	.word	0x0800e613
 800e59c:	0800e613 	.word	0x0800e613
 800e5a0:	0800e613 	.word	0x0800e613
 800e5a4:	0800e605 	.word	0x0800e605
 800e5a8:	2b40      	cmp	r3, #64	; 0x40
 800e5aa:	d02e      	beq.n	800e60a <UART_SetConfig+0xab2>
 800e5ac:	e031      	b.n	800e612 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5ae:	f7fb fddb 	bl	800a168 <HAL_RCC_GetPCLK1Freq>
 800e5b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e5b4:	e033      	b.n	800e61e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5b6:	f7fb fded 	bl	800a194 <HAL_RCC_GetPCLK2Freq>
 800e5ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e5bc:	e02f      	b.n	800e61e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fc fd0c 	bl	800afe0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5cc:	e027      	b.n	800e61e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5ce:	f107 0318 	add.w	r3, r7, #24
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fc fe58 	bl	800b288 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5dc:	e01f      	b.n	800e61e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5de:	4b69      	ldr	r3, [pc, #420]	; (800e784 <UART_SetConfig+0xc2c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f003 0320 	and.w	r3, r3, #32
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d009      	beq.n	800e5fe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5ea:	4b66      	ldr	r3, [pc, #408]	; (800e784 <UART_SetConfig+0xc2c>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	08db      	lsrs	r3, r3, #3
 800e5f0:	f003 0303 	and.w	r3, r3, #3
 800e5f4:	4a64      	ldr	r2, [pc, #400]	; (800e788 <UART_SetConfig+0xc30>)
 800e5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5fc:	e00f      	b.n	800e61e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e5fe:	4b62      	ldr	r3, [pc, #392]	; (800e788 <UART_SetConfig+0xc30>)
 800e600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e602:	e00c      	b.n	800e61e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e604:	4b61      	ldr	r3, [pc, #388]	; (800e78c <UART_SetConfig+0xc34>)
 800e606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e608:	e009      	b.n	800e61e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e60a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e610:	e005      	b.n	800e61e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e612:	2300      	movs	r3, #0
 800e614:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e616:	2301      	movs	r3, #1
 800e618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e61c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e620:	2b00      	cmp	r3, #0
 800e622:	f000 80ea 	beq.w	800e7fa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62a:	4a55      	ldr	r2, [pc, #340]	; (800e780 <UART_SetConfig+0xc28>)
 800e62c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e630:	461a      	mov	r2, r3
 800e632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e634:	fbb3 f3f2 	udiv	r3, r3, r2
 800e638:	005a      	lsls	r2, r3, #1
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	085b      	lsrs	r3, r3, #1
 800e640:	441a      	add	r2, r3
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	fbb2 f3f3 	udiv	r3, r2, r3
 800e64a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64e:	2b0f      	cmp	r3, #15
 800e650:	d916      	bls.n	800e680 <UART_SetConfig+0xb28>
 800e652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e658:	d212      	bcs.n	800e680 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	f023 030f 	bic.w	r3, r3, #15
 800e662:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e666:	085b      	lsrs	r3, r3, #1
 800e668:	b29b      	uxth	r3, r3
 800e66a:	f003 0307 	and.w	r3, r3, #7
 800e66e:	b29a      	uxth	r2, r3
 800e670:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e672:	4313      	orrs	r3, r2
 800e674:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e67c:	60da      	str	r2, [r3, #12]
 800e67e:	e0bc      	b.n	800e7fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e680:	2301      	movs	r3, #1
 800e682:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e686:	e0b8      	b.n	800e7fa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e688:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e68c:	2b20      	cmp	r3, #32
 800e68e:	dc4b      	bgt.n	800e728 <UART_SetConfig+0xbd0>
 800e690:	2b00      	cmp	r3, #0
 800e692:	f2c0 8087 	blt.w	800e7a4 <UART_SetConfig+0xc4c>
 800e696:	2b20      	cmp	r3, #32
 800e698:	f200 8084 	bhi.w	800e7a4 <UART_SetConfig+0xc4c>
 800e69c:	a201      	add	r2, pc, #4	; (adr r2, 800e6a4 <UART_SetConfig+0xb4c>)
 800e69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a2:	bf00      	nop
 800e6a4:	0800e72f 	.word	0x0800e72f
 800e6a8:	0800e737 	.word	0x0800e737
 800e6ac:	0800e7a5 	.word	0x0800e7a5
 800e6b0:	0800e7a5 	.word	0x0800e7a5
 800e6b4:	0800e73f 	.word	0x0800e73f
 800e6b8:	0800e7a5 	.word	0x0800e7a5
 800e6bc:	0800e7a5 	.word	0x0800e7a5
 800e6c0:	0800e7a5 	.word	0x0800e7a5
 800e6c4:	0800e74f 	.word	0x0800e74f
 800e6c8:	0800e7a5 	.word	0x0800e7a5
 800e6cc:	0800e7a5 	.word	0x0800e7a5
 800e6d0:	0800e7a5 	.word	0x0800e7a5
 800e6d4:	0800e7a5 	.word	0x0800e7a5
 800e6d8:	0800e7a5 	.word	0x0800e7a5
 800e6dc:	0800e7a5 	.word	0x0800e7a5
 800e6e0:	0800e7a5 	.word	0x0800e7a5
 800e6e4:	0800e75f 	.word	0x0800e75f
 800e6e8:	0800e7a5 	.word	0x0800e7a5
 800e6ec:	0800e7a5 	.word	0x0800e7a5
 800e6f0:	0800e7a5 	.word	0x0800e7a5
 800e6f4:	0800e7a5 	.word	0x0800e7a5
 800e6f8:	0800e7a5 	.word	0x0800e7a5
 800e6fc:	0800e7a5 	.word	0x0800e7a5
 800e700:	0800e7a5 	.word	0x0800e7a5
 800e704:	0800e7a5 	.word	0x0800e7a5
 800e708:	0800e7a5 	.word	0x0800e7a5
 800e70c:	0800e7a5 	.word	0x0800e7a5
 800e710:	0800e7a5 	.word	0x0800e7a5
 800e714:	0800e7a5 	.word	0x0800e7a5
 800e718:	0800e7a5 	.word	0x0800e7a5
 800e71c:	0800e7a5 	.word	0x0800e7a5
 800e720:	0800e7a5 	.word	0x0800e7a5
 800e724:	0800e797 	.word	0x0800e797
 800e728:	2b40      	cmp	r3, #64	; 0x40
 800e72a:	d037      	beq.n	800e79c <UART_SetConfig+0xc44>
 800e72c:	e03a      	b.n	800e7a4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e72e:	f7fb fd1b 	bl	800a168 <HAL_RCC_GetPCLK1Freq>
 800e732:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e734:	e03c      	b.n	800e7b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e736:	f7fb fd2d 	bl	800a194 <HAL_RCC_GetPCLK2Freq>
 800e73a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e73c:	e038      	b.n	800e7b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e73e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e742:	4618      	mov	r0, r3
 800e744:	f7fc fc4c 	bl	800afe0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e74c:	e030      	b.n	800e7b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e74e:	f107 0318 	add.w	r3, r7, #24
 800e752:	4618      	mov	r0, r3
 800e754:	f7fc fd98 	bl	800b288 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e75c:	e028      	b.n	800e7b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e75e:	4b09      	ldr	r3, [pc, #36]	; (800e784 <UART_SetConfig+0xc2c>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f003 0320 	and.w	r3, r3, #32
 800e766:	2b00      	cmp	r3, #0
 800e768:	d012      	beq.n	800e790 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e76a:	4b06      	ldr	r3, [pc, #24]	; (800e784 <UART_SetConfig+0xc2c>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	08db      	lsrs	r3, r3, #3
 800e770:	f003 0303 	and.w	r3, r3, #3
 800e774:	4a04      	ldr	r2, [pc, #16]	; (800e788 <UART_SetConfig+0xc30>)
 800e776:	fa22 f303 	lsr.w	r3, r2, r3
 800e77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e77c:	e018      	b.n	800e7b0 <UART_SetConfig+0xc58>
 800e77e:	bf00      	nop
 800e780:	0800fa30 	.word	0x0800fa30
 800e784:	58024400 	.word	0x58024400
 800e788:	03d09000 	.word	0x03d09000
 800e78c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e790:	4b24      	ldr	r3, [pc, #144]	; (800e824 <UART_SetConfig+0xccc>)
 800e792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e794:	e00c      	b.n	800e7b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e796:	4b24      	ldr	r3, [pc, #144]	; (800e828 <UART_SetConfig+0xcd0>)
 800e798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e79a:	e009      	b.n	800e7b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e79c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7a2:	e005      	b.n	800e7b0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e7ae:	bf00      	nop
    }

    if (pclk != 0U)
 800e7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d021      	beq.n	800e7fa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ba:	4a1c      	ldr	r2, [pc, #112]	; (800e82c <UART_SetConfig+0xcd4>)
 800e7bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	085b      	lsrs	r3, r3, #1
 800e7ce:	441a      	add	r2, r3
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7d8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7dc:	2b0f      	cmp	r3, #15
 800e7de:	d909      	bls.n	800e7f4 <UART_SetConfig+0xc9c>
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7e6:	d205      	bcs.n	800e7f4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	60da      	str	r2, [r3, #12]
 800e7f2:	e002      	b.n	800e7fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	2201      	movs	r2, #1
 800e806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	2200      	movs	r2, #0
 800e80e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	2200      	movs	r2, #0
 800e814:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e816:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3748      	adds	r7, #72	; 0x48
 800e81e:	46bd      	mov	sp, r7
 800e820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e824:	03d09000 	.word	0x03d09000
 800e828:	003d0900 	.word	0x003d0900
 800e82c:	0800fa30 	.word	0x0800fa30

0800e830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e83c:	f003 0301 	and.w	r3, r3, #1
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00a      	beq.n	800e85a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	430a      	orrs	r2, r1
 800e858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e85e:	f003 0302 	and.w	r3, r3, #2
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00a      	beq.n	800e87c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	430a      	orrs	r2, r1
 800e87a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e880:	f003 0304 	and.w	r3, r3, #4
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00a      	beq.n	800e89e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	430a      	orrs	r2, r1
 800e89c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8a2:	f003 0308 	and.w	r3, r3, #8
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00a      	beq.n	800e8c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	430a      	orrs	r2, r1
 800e8be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8c4:	f003 0310 	and.w	r3, r3, #16
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00a      	beq.n	800e8e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	430a      	orrs	r2, r1
 800e8e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8e6:	f003 0320 	and.w	r3, r3, #32
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d00a      	beq.n	800e904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	430a      	orrs	r2, r1
 800e902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d01a      	beq.n	800e946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	430a      	orrs	r2, r1
 800e924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e92a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e92e:	d10a      	bne.n	800e946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	430a      	orrs	r2, r1
 800e944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e94a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00a      	beq.n	800e968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	430a      	orrs	r2, r1
 800e966:	605a      	str	r2, [r3, #4]
  }
}
 800e968:	bf00      	nop
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af02      	add	r7, sp, #8
 800e97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e984:	f7f7 f882 	bl	8005a8c <HAL_GetTick>
 800e988:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f003 0308 	and.w	r3, r3, #8
 800e994:	2b08      	cmp	r3, #8
 800e996:	d10e      	bne.n	800e9b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 f82f 	bl	800ea0a <UART_WaitOnFlagUntilTimeout>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e9b2:	2303      	movs	r3, #3
 800e9b4:	e025      	b.n	800ea02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f003 0304 	and.w	r3, r3, #4
 800e9c0:	2b04      	cmp	r3, #4
 800e9c2:	d10e      	bne.n	800e9e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e9c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e9c8:	9300      	str	r3, [sp, #0]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 f819 	bl	800ea0a <UART_WaitOnFlagUntilTimeout>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d001      	beq.n	800e9e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e9de:	2303      	movs	r3, #3
 800e9e0:	e00f      	b.n	800ea02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2220      	movs	r2, #32
 800e9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2220      	movs	r2, #32
 800e9ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b09c      	sub	sp, #112	; 0x70
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	60f8      	str	r0, [r7, #12]
 800ea12:	60b9      	str	r1, [r7, #8]
 800ea14:	603b      	str	r3, [r7, #0]
 800ea16:	4613      	mov	r3, r2
 800ea18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea1a:	e0a9      	b.n	800eb70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea22:	f000 80a5 	beq.w	800eb70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea26:	f7f7 f831 	bl	8005a8c <HAL_GetTick>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d302      	bcc.n	800ea3c <UART_WaitOnFlagUntilTimeout+0x32>
 800ea36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d140      	bne.n	800eabe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea44:	e853 3f00 	ldrex	r3, [r3]
 800ea48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ea4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ea50:	667b      	str	r3, [r7, #100]	; 0x64
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	461a      	mov	r2, r3
 800ea58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea62:	e841 2300 	strex	r3, r2, [r1]
 800ea66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ea68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1e6      	bne.n	800ea3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	3308      	adds	r3, #8
 800ea74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea78:	e853 3f00 	ldrex	r3, [r3]
 800ea7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea80:	f023 0301 	bic.w	r3, r3, #1
 800ea84:	663b      	str	r3, [r7, #96]	; 0x60
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	3308      	adds	r3, #8
 800ea8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea8e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ea90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea96:	e841 2300 	strex	r3, r2, [r1]
 800ea9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1e5      	bne.n	800ea6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2220      	movs	r2, #32
 800eaa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2220      	movs	r2, #32
 800eaae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2200      	movs	r2, #0
 800eab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800eaba:	2303      	movs	r3, #3
 800eabc:	e069      	b.n	800eb92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f003 0304 	and.w	r3, r3, #4
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d051      	beq.n	800eb70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	69db      	ldr	r3, [r3, #28]
 800ead2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ead6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eada:	d149      	bne.n	800eb70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eae4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaee:	e853 3f00 	ldrex	r3, [r3]
 800eaf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eafa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	461a      	mov	r2, r3
 800eb02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb04:	637b      	str	r3, [r7, #52]	; 0x34
 800eb06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb0c:	e841 2300 	strex	r3, r2, [r1]
 800eb10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1e6      	bne.n	800eae6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	3308      	adds	r3, #8
 800eb1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	e853 3f00 	ldrex	r3, [r3]
 800eb26:	613b      	str	r3, [r7, #16]
   return(result);
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	f023 0301 	bic.w	r3, r3, #1
 800eb2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	3308      	adds	r3, #8
 800eb36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eb38:	623a      	str	r2, [r7, #32]
 800eb3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb3c:	69f9      	ldr	r1, [r7, #28]
 800eb3e:	6a3a      	ldr	r2, [r7, #32]
 800eb40:	e841 2300 	strex	r3, r2, [r1]
 800eb44:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d1e5      	bne.n	800eb18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2220      	movs	r2, #32
 800eb50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2220      	movs	r2, #32
 800eb58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2220      	movs	r2, #32
 800eb60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eb6c:	2303      	movs	r3, #3
 800eb6e:	e010      	b.n	800eb92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	69da      	ldr	r2, [r3, #28]
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	4013      	ands	r3, r2
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	bf0c      	ite	eq
 800eb80:	2301      	moveq	r3, #1
 800eb82:	2300      	movne	r3, #0
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	461a      	mov	r2, r3
 800eb88:	79fb      	ldrb	r3, [r7, #7]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	f43f af46 	beq.w	800ea1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3770      	adds	r7, #112	; 0x70
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
	...

0800eb9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b096      	sub	sp, #88	; 0x58
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	4613      	mov	r3, r2
 800eba8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	88fa      	ldrh	r2, [r7, #6]
 800ebb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2222      	movs	r2, #34	; 0x22
 800ebc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d02c      	beq.n	800ec2a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebd4:	4a42      	ldr	r2, [pc, #264]	; (800ece0 <UART_Start_Receive_DMA+0x144>)
 800ebd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebdc:	4a41      	ldr	r2, [pc, #260]	; (800ece4 <UART_Start_Receive_DMA+0x148>)
 800ebde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebe4:	4a40      	ldr	r2, [pc, #256]	; (800ece8 <UART_Start_Receive_DMA+0x14c>)
 800ebe6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebec:	2200      	movs	r2, #0
 800ebee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3324      	adds	r3, #36	; 0x24
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec00:	461a      	mov	r2, r3
 800ec02:	88fb      	ldrh	r3, [r7, #6]
 800ec04:	f7f7 fda0 	bl	8006748 <HAL_DMA_Start_IT>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d00d      	beq.n	800ec2a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2210      	movs	r2, #16
 800ec12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2220      	movs	r2, #32
 800ec22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ec26:	2301      	movs	r3, #1
 800ec28:	e055      	b.n	800ecd6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	691b      	ldr	r3, [r3, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d018      	beq.n	800ec6c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec42:	e853 3f00 	ldrex	r3, [r3]
 800ec46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec4e:	657b      	str	r3, [r7, #84]	; 0x54
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	461a      	mov	r2, r3
 800ec56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec5a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec60:	e841 2300 	strex	r3, r2, [r1]
 800ec64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ec66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1e6      	bne.n	800ec3a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	3308      	adds	r3, #8
 800ec72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	e853 3f00 	ldrex	r3, [r3]
 800ec7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7e:	f043 0301 	orr.w	r3, r3, #1
 800ec82:	653b      	str	r3, [r7, #80]	; 0x50
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	3308      	adds	r3, #8
 800ec8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec8c:	637a      	str	r2, [r7, #52]	; 0x34
 800ec8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec94:	e841 2300 	strex	r3, r2, [r1]
 800ec98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1e5      	bne.n	800ec6c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	3308      	adds	r3, #8
 800eca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	e853 3f00 	ldrex	r3, [r3]
 800ecae:	613b      	str	r3, [r7, #16]
   return(result);
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	3308      	adds	r3, #8
 800ecbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecc0:	623a      	str	r2, [r7, #32]
 800ecc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecc4:	69f9      	ldr	r1, [r7, #28]
 800ecc6:	6a3a      	ldr	r2, [r7, #32]
 800ecc8:	e841 2300 	strex	r3, r2, [r1]
 800eccc:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d1e5      	bne.n	800eca0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3758      	adds	r7, #88	; 0x58
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	0800eeef 	.word	0x0800eeef
 800ece4:	0800f011 	.word	0x0800f011
 800ece8:	0800f049 	.word	0x0800f049

0800ecec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b08f      	sub	sp, #60	; 0x3c
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecfa:	6a3b      	ldr	r3, [r7, #32]
 800ecfc:	e853 3f00 	ldrex	r3, [r3]
 800ed00:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ed08:	637b      	str	r3, [r7, #52]	; 0x34
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	461a      	mov	r2, r3
 800ed10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed1a:	e841 2300 	strex	r3, r2, [r1]
 800ed1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1e6      	bne.n	800ecf4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	3308      	adds	r3, #8
 800ed2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	e853 3f00 	ldrex	r3, [r3]
 800ed34:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ed3c:	633b      	str	r3, [r7, #48]	; 0x30
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	3308      	adds	r3, #8
 800ed44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed46:	61ba      	str	r2, [r7, #24]
 800ed48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed4a:	6979      	ldr	r1, [r7, #20]
 800ed4c:	69ba      	ldr	r2, [r7, #24]
 800ed4e:	e841 2300 	strex	r3, r2, [r1]
 800ed52:	613b      	str	r3, [r7, #16]
   return(result);
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1e5      	bne.n	800ed26 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2220      	movs	r2, #32
 800ed5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ed62:	bf00      	nop
 800ed64:	373c      	adds	r7, #60	; 0x3c
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
	...

0800ed70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b095      	sub	sp, #84	; 0x54
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed80:	e853 3f00 	ldrex	r3, [r3]
 800ed84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	461a      	mov	r2, r3
 800ed94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed96:	643b      	str	r3, [r7, #64]	; 0x40
 800ed98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed9e:	e841 2300 	strex	r3, r2, [r1]
 800eda2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d1e6      	bne.n	800ed78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	3308      	adds	r3, #8
 800edb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb2:	6a3b      	ldr	r3, [r7, #32]
 800edb4:	e853 3f00 	ldrex	r3, [r3]
 800edb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800edba:	69fa      	ldr	r2, [r7, #28]
 800edbc:	4b1e      	ldr	r3, [pc, #120]	; (800ee38 <UART_EndRxTransfer+0xc8>)
 800edbe:	4013      	ands	r3, r2
 800edc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	3308      	adds	r3, #8
 800edc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800edcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edd2:	e841 2300 	strex	r3, r2, [r1]
 800edd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800edd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d1e5      	bne.n	800edaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d118      	bne.n	800ee18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	e853 3f00 	ldrex	r3, [r3]
 800edf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	f023 0310 	bic.w	r3, r3, #16
 800edfa:	647b      	str	r3, [r7, #68]	; 0x44
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	461a      	mov	r2, r3
 800ee02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee04:	61bb      	str	r3, [r7, #24]
 800ee06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee08:	6979      	ldr	r1, [r7, #20]
 800ee0a:	69ba      	ldr	r2, [r7, #24]
 800ee0c:	e841 2300 	strex	r3, r2, [r1]
 800ee10:	613b      	str	r3, [r7, #16]
   return(result);
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d1e6      	bne.n	800ede6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2220      	movs	r2, #32
 800ee1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ee2c:	bf00      	nop
 800ee2e:	3754      	adds	r7, #84	; 0x54
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr
 800ee38:	effffffe 	.word	0xeffffffe

0800ee3c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b090      	sub	sp, #64	; 0x40
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee48:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	69db      	ldr	r3, [r3, #28]
 800ee4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee52:	d037      	beq.n	800eec4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ee54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee56:	2200      	movs	r2, #0
 800ee58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ee5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	3308      	adds	r3, #8
 800ee62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee66:	e853 3f00 	ldrex	r3, [r3]
 800ee6a:	623b      	str	r3, [r7, #32]
   return(result);
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee72:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	3308      	adds	r3, #8
 800ee7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee7c:	633a      	str	r2, [r7, #48]	; 0x30
 800ee7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee84:	e841 2300 	strex	r3, r2, [r1]
 800ee88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1e5      	bne.n	800ee5c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	e853 3f00 	ldrex	r3, [r3]
 800ee9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eea4:	637b      	str	r3, [r7, #52]	; 0x34
 800eea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	461a      	mov	r2, r3
 800eeac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeae:	61fb      	str	r3, [r7, #28]
 800eeb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb2:	69b9      	ldr	r1, [r7, #24]
 800eeb4:	69fa      	ldr	r2, [r7, #28]
 800eeb6:	e841 2300 	strex	r3, r2, [r1]
 800eeba:	617b      	str	r3, [r7, #20]
   return(result);
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d1e6      	bne.n	800ee90 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eec2:	e002      	b.n	800eeca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800eec4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eec6:	f7fe fe1d 	bl	800db04 <HAL_UART_TxCpltCallback>
}
 800eeca:	bf00      	nop
 800eecc:	3740      	adds	r7, #64	; 0x40
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b084      	sub	sp, #16
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eede:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800eee0:	68f8      	ldr	r0, [r7, #12]
 800eee2:	f7fe fe19 	bl	800db18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eee6:	bf00      	nop
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b09c      	sub	sp, #112	; 0x70
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eefa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	69db      	ldr	r3, [r3, #28]
 800ef00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef04:	d071      	beq.n	800efea <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ef06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef16:	e853 3f00 	ldrex	r3, [r3]
 800ef1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ef1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef22:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	461a      	mov	r2, r3
 800ef2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ef2c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef34:	e841 2300 	strex	r3, r2, [r1]
 800ef38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ef3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d1e6      	bne.n	800ef0e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	3308      	adds	r3, #8
 800ef46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4a:	e853 3f00 	ldrex	r3, [r3]
 800ef4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef52:	f023 0301 	bic.w	r3, r3, #1
 800ef56:	667b      	str	r3, [r7, #100]	; 0x64
 800ef58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	3308      	adds	r3, #8
 800ef5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef60:	647a      	str	r2, [r7, #68]	; 0x44
 800ef62:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef68:	e841 2300 	strex	r3, r2, [r1]
 800ef6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ef6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d1e5      	bne.n	800ef40 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	3308      	adds	r3, #8
 800ef7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	e853 3f00 	ldrex	r3, [r3]
 800ef82:	623b      	str	r3, [r7, #32]
   return(result);
 800ef84:	6a3b      	ldr	r3, [r7, #32]
 800ef86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef8a:	663b      	str	r3, [r7, #96]	; 0x60
 800ef8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	3308      	adds	r3, #8
 800ef92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef94:	633a      	str	r2, [r7, #48]	; 0x30
 800ef96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef9c:	e841 2300 	strex	r3, r2, [r1]
 800efa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800efa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1e5      	bne.n	800ef74 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800efa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efaa:	2220      	movs	r2, #32
 800efac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d118      	bne.n	800efea <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	e853 3f00 	ldrex	r3, [r3]
 800efc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f023 0310 	bic.w	r3, r3, #16
 800efcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800efce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	461a      	mov	r2, r3
 800efd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efd6:	61fb      	str	r3, [r7, #28]
 800efd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efda:	69b9      	ldr	r1, [r7, #24]
 800efdc:	69fa      	ldr	r2, [r7, #28]
 800efde:	e841 2300 	strex	r3, r2, [r1]
 800efe2:	617b      	str	r3, [r7, #20]
   return(result);
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1e6      	bne.n	800efb8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efee:	2b01      	cmp	r3, #1
 800eff0:	d107      	bne.n	800f002 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eff4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eff8:	4619      	mov	r1, r3
 800effa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800effc:	f7fe fda0 	bl	800db40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f000:	e002      	b.n	800f008 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f002:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f004:	f7f5 f9c8 	bl	8004398 <HAL_UART_RxCpltCallback>
}
 800f008:	bf00      	nop
 800f00a:	3770      	adds	r7, #112	; 0x70
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f01c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f022:	2b01      	cmp	r3, #1
 800f024:	d109      	bne.n	800f03a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f02c:	085b      	lsrs	r3, r3, #1
 800f02e:	b29b      	uxth	r3, r3
 800f030:	4619      	mov	r1, r3
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f7fe fd84 	bl	800db40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f038:	e002      	b.n	800f040 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f7fe fd76 	bl	800db2c <HAL_UART_RxHalfCpltCallback>
}
 800f040:	bf00      	nop
 800f042:	3710      	adds	r7, #16
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b086      	sub	sp, #24
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f054:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f05c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f064:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f070:	2b80      	cmp	r3, #128	; 0x80
 800f072:	d109      	bne.n	800f088 <UART_DMAError+0x40>
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	2b21      	cmp	r3, #33	; 0x21
 800f078:	d106      	bne.n	800f088 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f082:	6978      	ldr	r0, [r7, #20]
 800f084:	f7ff fe32 	bl	800ecec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f092:	2b40      	cmp	r3, #64	; 0x40
 800f094:	d109      	bne.n	800f0aa <UART_DMAError+0x62>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2b22      	cmp	r3, #34	; 0x22
 800f09a:	d106      	bne.n	800f0aa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f0a4:	6978      	ldr	r0, [r7, #20]
 800f0a6:	f7ff fe63 	bl	800ed70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0b0:	f043 0210 	orr.w	r2, r3, #16
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f0ba:	6978      	ldr	r0, [r7, #20]
 800f0bc:	f7f5 f934 	bl	8004328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0c0:	bf00      	nop
 800f0c2:	3718      	adds	r7, #24
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	f7f5 f91e 	bl	8004328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0ec:	bf00      	nop
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b088      	sub	sp, #32
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	e853 3f00 	ldrex	r3, [r3]
 800f108:	60bb      	str	r3, [r7, #8]
   return(result);
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f110:	61fb      	str	r3, [r7, #28]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	461a      	mov	r2, r3
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	61bb      	str	r3, [r7, #24]
 800f11c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11e:	6979      	ldr	r1, [r7, #20]
 800f120:	69ba      	ldr	r2, [r7, #24]
 800f122:	e841 2300 	strex	r3, r2, [r1]
 800f126:	613b      	str	r3, [r7, #16]
   return(result);
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d1e6      	bne.n	800f0fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2220      	movs	r2, #32
 800f132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f7fe fce1 	bl	800db04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f142:	bf00      	nop
 800f144:	3720      	adds	r7, #32
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f14a:	b480      	push	{r7}
 800f14c:	b083      	sub	sp, #12
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f152:	bf00      	nop
 800f154:	370c      	adds	r7, #12
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr

0800f15e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f15e:	b480      	push	{r7}
 800f160:	b083      	sub	sp, #12
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f166:	bf00      	nop
 800f168:	370c      	adds	r7, #12
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr

0800f172 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f172:	b480      	push	{r7}
 800f174:	b083      	sub	sp, #12
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f17a:	bf00      	nop
 800f17c:	370c      	adds	r7, #12
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr

0800f186 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f186:	b480      	push	{r7}
 800f188:	b085      	sub	sp, #20
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f194:	2b01      	cmp	r3, #1
 800f196:	d101      	bne.n	800f19c <HAL_UARTEx_DisableFifoMode+0x16>
 800f198:	2302      	movs	r3, #2
 800f19a:	e027      	b.n	800f1ec <HAL_UARTEx_DisableFifoMode+0x66>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2201      	movs	r2, #1
 800f1a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2224      	movs	r2, #36	; 0x24
 800f1a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f022 0201 	bic.w	r2, r2, #1
 800f1c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f1ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2220      	movs	r2, #32
 800f1de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f1ea:	2300      	movs	r3, #0
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3714      	adds	r7, #20
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr

0800f1f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d101      	bne.n	800f210 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f20c:	2302      	movs	r3, #2
 800f20e:	e02d      	b.n	800f26c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2201      	movs	r2, #1
 800f214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2224      	movs	r2, #36	; 0x24
 800f21c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f022 0201 	bic.w	r2, r2, #1
 800f236:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	689b      	ldr	r3, [r3, #8]
 800f23e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	683a      	ldr	r2, [r7, #0]
 800f248:	430a      	orrs	r2, r1
 800f24a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f000 f84f 	bl	800f2f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	68fa      	ldr	r2, [r7, #12]
 800f258:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2220      	movs	r2, #32
 800f25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2200      	movs	r2, #0
 800f266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b084      	sub	sp, #16
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f284:	2b01      	cmp	r3, #1
 800f286:	d101      	bne.n	800f28c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f288:	2302      	movs	r3, #2
 800f28a:	e02d      	b.n	800f2e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2201      	movs	r2, #1
 800f290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2224      	movs	r2, #36	; 0x24
 800f298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f022 0201 	bic.w	r2, r2, #1
 800f2b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	683a      	ldr	r2, [r7, #0]
 800f2c4:	430a      	orrs	r2, r1
 800f2c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 f811 	bl	800f2f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68fa      	ldr	r2, [r7, #12]
 800f2d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2220      	movs	r2, #32
 800f2da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d108      	bne.n	800f312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2201      	movs	r2, #1
 800f304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2201      	movs	r2, #1
 800f30c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f310:	e031      	b.n	800f376 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f312:	2310      	movs	r3, #16
 800f314:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f316:	2310      	movs	r3, #16
 800f318:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	689b      	ldr	r3, [r3, #8]
 800f320:	0e5b      	lsrs	r3, r3, #25
 800f322:	b2db      	uxtb	r3, r3
 800f324:	f003 0307 	and.w	r3, r3, #7
 800f328:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	0f5b      	lsrs	r3, r3, #29
 800f332:	b2db      	uxtb	r3, r3
 800f334:	f003 0307 	and.w	r3, r3, #7
 800f338:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f33a:	7bbb      	ldrb	r3, [r7, #14]
 800f33c:	7b3a      	ldrb	r2, [r7, #12]
 800f33e:	4911      	ldr	r1, [pc, #68]	; (800f384 <UARTEx_SetNbDataToProcess+0x94>)
 800f340:	5c8a      	ldrb	r2, [r1, r2]
 800f342:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f346:	7b3a      	ldrb	r2, [r7, #12]
 800f348:	490f      	ldr	r1, [pc, #60]	; (800f388 <UARTEx_SetNbDataToProcess+0x98>)
 800f34a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f34c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f350:	b29a      	uxth	r2, r3
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f358:	7bfb      	ldrb	r3, [r7, #15]
 800f35a:	7b7a      	ldrb	r2, [r7, #13]
 800f35c:	4909      	ldr	r1, [pc, #36]	; (800f384 <UARTEx_SetNbDataToProcess+0x94>)
 800f35e:	5c8a      	ldrb	r2, [r1, r2]
 800f360:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f364:	7b7a      	ldrb	r2, [r7, #13]
 800f366:	4908      	ldr	r1, [pc, #32]	; (800f388 <UARTEx_SetNbDataToProcess+0x98>)
 800f368:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f36a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f36e:	b29a      	uxth	r2, r3
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f376:	bf00      	nop
 800f378:	3714      	adds	r7, #20
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
 800f382:	bf00      	nop
 800f384:	0800fa48 	.word	0x0800fa48
 800f388:	0800fa50 	.word	0x0800fa50

0800f38c <__cxa_pure_virtual>:
 800f38c:	b508      	push	{r3, lr}
 800f38e:	f000 f80d 	bl	800f3ac <_ZSt9terminatev>

0800f392 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f392:	b508      	push	{r3, lr}
 800f394:	4780      	blx	r0
 800f396:	f000 f80e 	bl	800f3b6 <abort>
	...

0800f39c <_ZSt13get_terminatev>:
 800f39c:	4b02      	ldr	r3, [pc, #8]	; (800f3a8 <_ZSt13get_terminatev+0xc>)
 800f39e:	6818      	ldr	r0, [r3, #0]
 800f3a0:	f3bf 8f5b 	dmb	ish
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	24000068 	.word	0x24000068

0800f3ac <_ZSt9terminatev>:
 800f3ac:	b508      	push	{r3, lr}
 800f3ae:	f7ff fff5 	bl	800f39c <_ZSt13get_terminatev>
 800f3b2:	f7ff ffee 	bl	800f392 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f3b6 <abort>:
 800f3b6:	b508      	push	{r3, lr}
 800f3b8:	2006      	movs	r0, #6
 800f3ba:	f000 f873 	bl	800f4a4 <raise>
 800f3be:	2001      	movs	r0, #1
 800f3c0:	f7f6 f9fc 	bl	80057bc <_exit>

0800f3c4 <__errno>:
 800f3c4:	4b01      	ldr	r3, [pc, #4]	; (800f3cc <__errno+0x8>)
 800f3c6:	6818      	ldr	r0, [r3, #0]
 800f3c8:	4770      	bx	lr
 800f3ca:	bf00      	nop
 800f3cc:	2400006c 	.word	0x2400006c

0800f3d0 <__libc_init_array>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	4d0d      	ldr	r5, [pc, #52]	; (800f408 <__libc_init_array+0x38>)
 800f3d4:	4c0d      	ldr	r4, [pc, #52]	; (800f40c <__libc_init_array+0x3c>)
 800f3d6:	1b64      	subs	r4, r4, r5
 800f3d8:	10a4      	asrs	r4, r4, #2
 800f3da:	2600      	movs	r6, #0
 800f3dc:	42a6      	cmp	r6, r4
 800f3de:	d109      	bne.n	800f3f4 <__libc_init_array+0x24>
 800f3e0:	4d0b      	ldr	r5, [pc, #44]	; (800f410 <__libc_init_array+0x40>)
 800f3e2:	4c0c      	ldr	r4, [pc, #48]	; (800f414 <__libc_init_array+0x44>)
 800f3e4:	f000 f9b0 	bl	800f748 <_init>
 800f3e8:	1b64      	subs	r4, r4, r5
 800f3ea:	10a4      	asrs	r4, r4, #2
 800f3ec:	2600      	movs	r6, #0
 800f3ee:	42a6      	cmp	r6, r4
 800f3f0:	d105      	bne.n	800f3fe <__libc_init_array+0x2e>
 800f3f2:	bd70      	pop	{r4, r5, r6, pc}
 800f3f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3f8:	4798      	blx	r3
 800f3fa:	3601      	adds	r6, #1
 800f3fc:	e7ee      	b.n	800f3dc <__libc_init_array+0xc>
 800f3fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f402:	4798      	blx	r3
 800f404:	3601      	adds	r6, #1
 800f406:	e7f2      	b.n	800f3ee <__libc_init_array+0x1e>
 800f408:	0800fa60 	.word	0x0800fa60
 800f40c:	0800fa60 	.word	0x0800fa60
 800f410:	0800fa60 	.word	0x0800fa60
 800f414:	0800fa68 	.word	0x0800fa68

0800f418 <memcpy>:
 800f418:	440a      	add	r2, r1
 800f41a:	4291      	cmp	r1, r2
 800f41c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f420:	d100      	bne.n	800f424 <memcpy+0xc>
 800f422:	4770      	bx	lr
 800f424:	b510      	push	{r4, lr}
 800f426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f42a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f42e:	4291      	cmp	r1, r2
 800f430:	d1f9      	bne.n	800f426 <memcpy+0xe>
 800f432:	bd10      	pop	{r4, pc}

0800f434 <memset>:
 800f434:	4402      	add	r2, r0
 800f436:	4603      	mov	r3, r0
 800f438:	4293      	cmp	r3, r2
 800f43a:	d100      	bne.n	800f43e <memset+0xa>
 800f43c:	4770      	bx	lr
 800f43e:	f803 1b01 	strb.w	r1, [r3], #1
 800f442:	e7f9      	b.n	800f438 <memset+0x4>

0800f444 <realloc>:
 800f444:	4b02      	ldr	r3, [pc, #8]	; (800f450 <realloc+0xc>)
 800f446:	460a      	mov	r2, r1
 800f448:	4601      	mov	r1, r0
 800f44a:	6818      	ldr	r0, [r3, #0]
 800f44c:	f000 b8da 	b.w	800f604 <_realloc_r>
 800f450:	2400006c 	.word	0x2400006c

0800f454 <_raise_r>:
 800f454:	291f      	cmp	r1, #31
 800f456:	b538      	push	{r3, r4, r5, lr}
 800f458:	4604      	mov	r4, r0
 800f45a:	460d      	mov	r5, r1
 800f45c:	d904      	bls.n	800f468 <_raise_r+0x14>
 800f45e:	2316      	movs	r3, #22
 800f460:	6003      	str	r3, [r0, #0]
 800f462:	f04f 30ff 	mov.w	r0, #4294967295
 800f466:	bd38      	pop	{r3, r4, r5, pc}
 800f468:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f46a:	b112      	cbz	r2, 800f472 <_raise_r+0x1e>
 800f46c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f470:	b94b      	cbnz	r3, 800f486 <_raise_r+0x32>
 800f472:	4620      	mov	r0, r4
 800f474:	f000 f830 	bl	800f4d8 <_getpid_r>
 800f478:	462a      	mov	r2, r5
 800f47a:	4601      	mov	r1, r0
 800f47c:	4620      	mov	r0, r4
 800f47e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f482:	f000 b817 	b.w	800f4b4 <_kill_r>
 800f486:	2b01      	cmp	r3, #1
 800f488:	d00a      	beq.n	800f4a0 <_raise_r+0x4c>
 800f48a:	1c59      	adds	r1, r3, #1
 800f48c:	d103      	bne.n	800f496 <_raise_r+0x42>
 800f48e:	2316      	movs	r3, #22
 800f490:	6003      	str	r3, [r0, #0]
 800f492:	2001      	movs	r0, #1
 800f494:	e7e7      	b.n	800f466 <_raise_r+0x12>
 800f496:	2400      	movs	r4, #0
 800f498:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f49c:	4628      	mov	r0, r5
 800f49e:	4798      	blx	r3
 800f4a0:	2000      	movs	r0, #0
 800f4a2:	e7e0      	b.n	800f466 <_raise_r+0x12>

0800f4a4 <raise>:
 800f4a4:	4b02      	ldr	r3, [pc, #8]	; (800f4b0 <raise+0xc>)
 800f4a6:	4601      	mov	r1, r0
 800f4a8:	6818      	ldr	r0, [r3, #0]
 800f4aa:	f7ff bfd3 	b.w	800f454 <_raise_r>
 800f4ae:	bf00      	nop
 800f4b0:	2400006c 	.word	0x2400006c

0800f4b4 <_kill_r>:
 800f4b4:	b538      	push	{r3, r4, r5, lr}
 800f4b6:	4d07      	ldr	r5, [pc, #28]	; (800f4d4 <_kill_r+0x20>)
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	4608      	mov	r0, r1
 800f4be:	4611      	mov	r1, r2
 800f4c0:	602b      	str	r3, [r5, #0]
 800f4c2:	f7f6 f96b 	bl	800579c <_kill>
 800f4c6:	1c43      	adds	r3, r0, #1
 800f4c8:	d102      	bne.n	800f4d0 <_kill_r+0x1c>
 800f4ca:	682b      	ldr	r3, [r5, #0]
 800f4cc:	b103      	cbz	r3, 800f4d0 <_kill_r+0x1c>
 800f4ce:	6023      	str	r3, [r4, #0]
 800f4d0:	bd38      	pop	{r3, r4, r5, pc}
 800f4d2:	bf00      	nop
 800f4d4:	240010c4 	.word	0x240010c4

0800f4d8 <_getpid_r>:
 800f4d8:	f7f6 b958 	b.w	800578c <_getpid>

0800f4dc <sbrk_aligned>:
 800f4dc:	b570      	push	{r4, r5, r6, lr}
 800f4de:	4e0e      	ldr	r6, [pc, #56]	; (800f518 <sbrk_aligned+0x3c>)
 800f4e0:	460c      	mov	r4, r1
 800f4e2:	6831      	ldr	r1, [r6, #0]
 800f4e4:	4605      	mov	r5, r0
 800f4e6:	b911      	cbnz	r1, 800f4ee <sbrk_aligned+0x12>
 800f4e8:	f000 f8bc 	bl	800f664 <_sbrk_r>
 800f4ec:	6030      	str	r0, [r6, #0]
 800f4ee:	4621      	mov	r1, r4
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	f000 f8b7 	bl	800f664 <_sbrk_r>
 800f4f6:	1c43      	adds	r3, r0, #1
 800f4f8:	d00a      	beq.n	800f510 <sbrk_aligned+0x34>
 800f4fa:	1cc4      	adds	r4, r0, #3
 800f4fc:	f024 0403 	bic.w	r4, r4, #3
 800f500:	42a0      	cmp	r0, r4
 800f502:	d007      	beq.n	800f514 <sbrk_aligned+0x38>
 800f504:	1a21      	subs	r1, r4, r0
 800f506:	4628      	mov	r0, r5
 800f508:	f000 f8ac 	bl	800f664 <_sbrk_r>
 800f50c:	3001      	adds	r0, #1
 800f50e:	d101      	bne.n	800f514 <sbrk_aligned+0x38>
 800f510:	f04f 34ff 	mov.w	r4, #4294967295
 800f514:	4620      	mov	r0, r4
 800f516:	bd70      	pop	{r4, r5, r6, pc}
 800f518:	240010c0 	.word	0x240010c0

0800f51c <_malloc_r>:
 800f51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f520:	1ccd      	adds	r5, r1, #3
 800f522:	f025 0503 	bic.w	r5, r5, #3
 800f526:	3508      	adds	r5, #8
 800f528:	2d0c      	cmp	r5, #12
 800f52a:	bf38      	it	cc
 800f52c:	250c      	movcc	r5, #12
 800f52e:	2d00      	cmp	r5, #0
 800f530:	4607      	mov	r7, r0
 800f532:	db01      	blt.n	800f538 <_malloc_r+0x1c>
 800f534:	42a9      	cmp	r1, r5
 800f536:	d905      	bls.n	800f544 <_malloc_r+0x28>
 800f538:	230c      	movs	r3, #12
 800f53a:	603b      	str	r3, [r7, #0]
 800f53c:	2600      	movs	r6, #0
 800f53e:	4630      	mov	r0, r6
 800f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f544:	4e2e      	ldr	r6, [pc, #184]	; (800f600 <_malloc_r+0xe4>)
 800f546:	f000 f89d 	bl	800f684 <__malloc_lock>
 800f54a:	6833      	ldr	r3, [r6, #0]
 800f54c:	461c      	mov	r4, r3
 800f54e:	bb34      	cbnz	r4, 800f59e <_malloc_r+0x82>
 800f550:	4629      	mov	r1, r5
 800f552:	4638      	mov	r0, r7
 800f554:	f7ff ffc2 	bl	800f4dc <sbrk_aligned>
 800f558:	1c43      	adds	r3, r0, #1
 800f55a:	4604      	mov	r4, r0
 800f55c:	d14d      	bne.n	800f5fa <_malloc_r+0xde>
 800f55e:	6834      	ldr	r4, [r6, #0]
 800f560:	4626      	mov	r6, r4
 800f562:	2e00      	cmp	r6, #0
 800f564:	d140      	bne.n	800f5e8 <_malloc_r+0xcc>
 800f566:	6823      	ldr	r3, [r4, #0]
 800f568:	4631      	mov	r1, r6
 800f56a:	4638      	mov	r0, r7
 800f56c:	eb04 0803 	add.w	r8, r4, r3
 800f570:	f000 f878 	bl	800f664 <_sbrk_r>
 800f574:	4580      	cmp	r8, r0
 800f576:	d13a      	bne.n	800f5ee <_malloc_r+0xd2>
 800f578:	6821      	ldr	r1, [r4, #0]
 800f57a:	3503      	adds	r5, #3
 800f57c:	1a6d      	subs	r5, r5, r1
 800f57e:	f025 0503 	bic.w	r5, r5, #3
 800f582:	3508      	adds	r5, #8
 800f584:	2d0c      	cmp	r5, #12
 800f586:	bf38      	it	cc
 800f588:	250c      	movcc	r5, #12
 800f58a:	4629      	mov	r1, r5
 800f58c:	4638      	mov	r0, r7
 800f58e:	f7ff ffa5 	bl	800f4dc <sbrk_aligned>
 800f592:	3001      	adds	r0, #1
 800f594:	d02b      	beq.n	800f5ee <_malloc_r+0xd2>
 800f596:	6823      	ldr	r3, [r4, #0]
 800f598:	442b      	add	r3, r5
 800f59a:	6023      	str	r3, [r4, #0]
 800f59c:	e00e      	b.n	800f5bc <_malloc_r+0xa0>
 800f59e:	6822      	ldr	r2, [r4, #0]
 800f5a0:	1b52      	subs	r2, r2, r5
 800f5a2:	d41e      	bmi.n	800f5e2 <_malloc_r+0xc6>
 800f5a4:	2a0b      	cmp	r2, #11
 800f5a6:	d916      	bls.n	800f5d6 <_malloc_r+0xba>
 800f5a8:	1961      	adds	r1, r4, r5
 800f5aa:	42a3      	cmp	r3, r4
 800f5ac:	6025      	str	r5, [r4, #0]
 800f5ae:	bf18      	it	ne
 800f5b0:	6059      	strne	r1, [r3, #4]
 800f5b2:	6863      	ldr	r3, [r4, #4]
 800f5b4:	bf08      	it	eq
 800f5b6:	6031      	streq	r1, [r6, #0]
 800f5b8:	5162      	str	r2, [r4, r5]
 800f5ba:	604b      	str	r3, [r1, #4]
 800f5bc:	4638      	mov	r0, r7
 800f5be:	f104 060b 	add.w	r6, r4, #11
 800f5c2:	f000 f865 	bl	800f690 <__malloc_unlock>
 800f5c6:	f026 0607 	bic.w	r6, r6, #7
 800f5ca:	1d23      	adds	r3, r4, #4
 800f5cc:	1af2      	subs	r2, r6, r3
 800f5ce:	d0b6      	beq.n	800f53e <_malloc_r+0x22>
 800f5d0:	1b9b      	subs	r3, r3, r6
 800f5d2:	50a3      	str	r3, [r4, r2]
 800f5d4:	e7b3      	b.n	800f53e <_malloc_r+0x22>
 800f5d6:	6862      	ldr	r2, [r4, #4]
 800f5d8:	42a3      	cmp	r3, r4
 800f5da:	bf0c      	ite	eq
 800f5dc:	6032      	streq	r2, [r6, #0]
 800f5de:	605a      	strne	r2, [r3, #4]
 800f5e0:	e7ec      	b.n	800f5bc <_malloc_r+0xa0>
 800f5e2:	4623      	mov	r3, r4
 800f5e4:	6864      	ldr	r4, [r4, #4]
 800f5e6:	e7b2      	b.n	800f54e <_malloc_r+0x32>
 800f5e8:	4634      	mov	r4, r6
 800f5ea:	6876      	ldr	r6, [r6, #4]
 800f5ec:	e7b9      	b.n	800f562 <_malloc_r+0x46>
 800f5ee:	230c      	movs	r3, #12
 800f5f0:	603b      	str	r3, [r7, #0]
 800f5f2:	4638      	mov	r0, r7
 800f5f4:	f000 f84c 	bl	800f690 <__malloc_unlock>
 800f5f8:	e7a1      	b.n	800f53e <_malloc_r+0x22>
 800f5fa:	6025      	str	r5, [r4, #0]
 800f5fc:	e7de      	b.n	800f5bc <_malloc_r+0xa0>
 800f5fe:	bf00      	nop
 800f600:	240010bc 	.word	0x240010bc

0800f604 <_realloc_r>:
 800f604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f608:	4680      	mov	r8, r0
 800f60a:	4614      	mov	r4, r2
 800f60c:	460e      	mov	r6, r1
 800f60e:	b921      	cbnz	r1, 800f61a <_realloc_r+0x16>
 800f610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f614:	4611      	mov	r1, r2
 800f616:	f7ff bf81 	b.w	800f51c <_malloc_r>
 800f61a:	b92a      	cbnz	r2, 800f628 <_realloc_r+0x24>
 800f61c:	f000 f83e 	bl	800f69c <_free_r>
 800f620:	4625      	mov	r5, r4
 800f622:	4628      	mov	r0, r5
 800f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f628:	f000 f884 	bl	800f734 <_malloc_usable_size_r>
 800f62c:	4284      	cmp	r4, r0
 800f62e:	4607      	mov	r7, r0
 800f630:	d802      	bhi.n	800f638 <_realloc_r+0x34>
 800f632:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f636:	d812      	bhi.n	800f65e <_realloc_r+0x5a>
 800f638:	4621      	mov	r1, r4
 800f63a:	4640      	mov	r0, r8
 800f63c:	f7ff ff6e 	bl	800f51c <_malloc_r>
 800f640:	4605      	mov	r5, r0
 800f642:	2800      	cmp	r0, #0
 800f644:	d0ed      	beq.n	800f622 <_realloc_r+0x1e>
 800f646:	42bc      	cmp	r4, r7
 800f648:	4622      	mov	r2, r4
 800f64a:	4631      	mov	r1, r6
 800f64c:	bf28      	it	cs
 800f64e:	463a      	movcs	r2, r7
 800f650:	f7ff fee2 	bl	800f418 <memcpy>
 800f654:	4631      	mov	r1, r6
 800f656:	4640      	mov	r0, r8
 800f658:	f000 f820 	bl	800f69c <_free_r>
 800f65c:	e7e1      	b.n	800f622 <_realloc_r+0x1e>
 800f65e:	4635      	mov	r5, r6
 800f660:	e7df      	b.n	800f622 <_realloc_r+0x1e>
	...

0800f664 <_sbrk_r>:
 800f664:	b538      	push	{r3, r4, r5, lr}
 800f666:	4d06      	ldr	r5, [pc, #24]	; (800f680 <_sbrk_r+0x1c>)
 800f668:	2300      	movs	r3, #0
 800f66a:	4604      	mov	r4, r0
 800f66c:	4608      	mov	r0, r1
 800f66e:	602b      	str	r3, [r5, #0]
 800f670:	f7f6 f8ae 	bl	80057d0 <_sbrk>
 800f674:	1c43      	adds	r3, r0, #1
 800f676:	d102      	bne.n	800f67e <_sbrk_r+0x1a>
 800f678:	682b      	ldr	r3, [r5, #0]
 800f67a:	b103      	cbz	r3, 800f67e <_sbrk_r+0x1a>
 800f67c:	6023      	str	r3, [r4, #0]
 800f67e:	bd38      	pop	{r3, r4, r5, pc}
 800f680:	240010c4 	.word	0x240010c4

0800f684 <__malloc_lock>:
 800f684:	4801      	ldr	r0, [pc, #4]	; (800f68c <__malloc_lock+0x8>)
 800f686:	f000 b85d 	b.w	800f744 <__retarget_lock_acquire_recursive>
 800f68a:	bf00      	nop
 800f68c:	240010c8 	.word	0x240010c8

0800f690 <__malloc_unlock>:
 800f690:	4801      	ldr	r0, [pc, #4]	; (800f698 <__malloc_unlock+0x8>)
 800f692:	f000 b858 	b.w	800f746 <__retarget_lock_release_recursive>
 800f696:	bf00      	nop
 800f698:	240010c8 	.word	0x240010c8

0800f69c <_free_r>:
 800f69c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f69e:	2900      	cmp	r1, #0
 800f6a0:	d044      	beq.n	800f72c <_free_r+0x90>
 800f6a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6a6:	9001      	str	r0, [sp, #4]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	f1a1 0404 	sub.w	r4, r1, #4
 800f6ae:	bfb8      	it	lt
 800f6b0:	18e4      	addlt	r4, r4, r3
 800f6b2:	f7ff ffe7 	bl	800f684 <__malloc_lock>
 800f6b6:	4a1e      	ldr	r2, [pc, #120]	; (800f730 <_free_r+0x94>)
 800f6b8:	9801      	ldr	r0, [sp, #4]
 800f6ba:	6813      	ldr	r3, [r2, #0]
 800f6bc:	b933      	cbnz	r3, 800f6cc <_free_r+0x30>
 800f6be:	6063      	str	r3, [r4, #4]
 800f6c0:	6014      	str	r4, [r2, #0]
 800f6c2:	b003      	add	sp, #12
 800f6c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6c8:	f7ff bfe2 	b.w	800f690 <__malloc_unlock>
 800f6cc:	42a3      	cmp	r3, r4
 800f6ce:	d908      	bls.n	800f6e2 <_free_r+0x46>
 800f6d0:	6825      	ldr	r5, [r4, #0]
 800f6d2:	1961      	adds	r1, r4, r5
 800f6d4:	428b      	cmp	r3, r1
 800f6d6:	bf01      	itttt	eq
 800f6d8:	6819      	ldreq	r1, [r3, #0]
 800f6da:	685b      	ldreq	r3, [r3, #4]
 800f6dc:	1949      	addeq	r1, r1, r5
 800f6de:	6021      	streq	r1, [r4, #0]
 800f6e0:	e7ed      	b.n	800f6be <_free_r+0x22>
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	b10b      	cbz	r3, 800f6ec <_free_r+0x50>
 800f6e8:	42a3      	cmp	r3, r4
 800f6ea:	d9fa      	bls.n	800f6e2 <_free_r+0x46>
 800f6ec:	6811      	ldr	r1, [r2, #0]
 800f6ee:	1855      	adds	r5, r2, r1
 800f6f0:	42a5      	cmp	r5, r4
 800f6f2:	d10b      	bne.n	800f70c <_free_r+0x70>
 800f6f4:	6824      	ldr	r4, [r4, #0]
 800f6f6:	4421      	add	r1, r4
 800f6f8:	1854      	adds	r4, r2, r1
 800f6fa:	42a3      	cmp	r3, r4
 800f6fc:	6011      	str	r1, [r2, #0]
 800f6fe:	d1e0      	bne.n	800f6c2 <_free_r+0x26>
 800f700:	681c      	ldr	r4, [r3, #0]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	6053      	str	r3, [r2, #4]
 800f706:	4421      	add	r1, r4
 800f708:	6011      	str	r1, [r2, #0]
 800f70a:	e7da      	b.n	800f6c2 <_free_r+0x26>
 800f70c:	d902      	bls.n	800f714 <_free_r+0x78>
 800f70e:	230c      	movs	r3, #12
 800f710:	6003      	str	r3, [r0, #0]
 800f712:	e7d6      	b.n	800f6c2 <_free_r+0x26>
 800f714:	6825      	ldr	r5, [r4, #0]
 800f716:	1961      	adds	r1, r4, r5
 800f718:	428b      	cmp	r3, r1
 800f71a:	bf04      	itt	eq
 800f71c:	6819      	ldreq	r1, [r3, #0]
 800f71e:	685b      	ldreq	r3, [r3, #4]
 800f720:	6063      	str	r3, [r4, #4]
 800f722:	bf04      	itt	eq
 800f724:	1949      	addeq	r1, r1, r5
 800f726:	6021      	streq	r1, [r4, #0]
 800f728:	6054      	str	r4, [r2, #4]
 800f72a:	e7ca      	b.n	800f6c2 <_free_r+0x26>
 800f72c:	b003      	add	sp, #12
 800f72e:	bd30      	pop	{r4, r5, pc}
 800f730:	240010bc 	.word	0x240010bc

0800f734 <_malloc_usable_size_r>:
 800f734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f738:	1f18      	subs	r0, r3, #4
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	bfbc      	itt	lt
 800f73e:	580b      	ldrlt	r3, [r1, r0]
 800f740:	18c0      	addlt	r0, r0, r3
 800f742:	4770      	bx	lr

0800f744 <__retarget_lock_acquire_recursive>:
 800f744:	4770      	bx	lr

0800f746 <__retarget_lock_release_recursive>:
 800f746:	4770      	bx	lr

0800f748 <_init>:
 800f748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74a:	bf00      	nop
 800f74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f74e:	bc08      	pop	{r3}
 800f750:	469e      	mov	lr, r3
 800f752:	4770      	bx	lr

0800f754 <_fini>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	bf00      	nop
 800f758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75a:	bc08      	pop	{r3}
 800f75c:	469e      	mov	lr, r3
 800f75e:	4770      	bx	lr
